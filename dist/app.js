!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=482)}([function(e,t,n){"use strict";n.d(t,"x",function(){return i}),n.d(t,"e",function(){return a}),n.d(t,"b",function(){return s}),n.d(t,"a",function(){return c}),n.d(t,"c",function(){return l}),n.d(t,"d",function(){return f}),n.d(t,"r",function(){return d}),n.d(t,"u",function(){return h}),n.d(t,"o",function(){return g}),n.d(t,"h",function(){return y}),n.d(t,"q",function(){return x}),n.d(t,"v",function(){return m}),n.d(t,"w",function(){return b}),n.d(t,"f",function(){return O}),n.d(t,"l",function(){return w}),n.d(t,"g",function(){return S}),n.d(t,"m",function(){return k}),n.d(t,"j",function(){return E}),n.d(t,"y",function(){return T}),n.d(t,"t",function(){return A}),n.d(t,"s",function(){return P}),n.d(t,"n",function(){return N}),n.d(t,"z",function(){return M}),n.d(t,"p",function(){return B}),n.d(t,"k",function(){return D}),n.d(t,"A",function(){return z}),n.d(t,"i",function(){return L});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i=function(e){return"@@redux-saga/"+e},a=i("TASK"),u=i("HELPER"),s=i("MATCH"),c=i("CANCEL_PROMISE"),l=i("SAGA_ACTION"),f=i("SELF_CANCELLATION"),p=function(e){return function(){return e}},d=p(!0),h=function(){},g=function(e){return e};function y(e,t,n){if(!t(e))throw P("error","uncaught at check",n),new Error(n)}var v=Object.prototype.hasOwnProperty;function _(e,t){return x.notUndef(e)&&v.call(e,t)}var x={undef:function(e){return null===e||void 0===e},notUndef:function(e){return null!==e&&void 0!==e},func:function(e){return"function"==typeof e},number:function(e){return"number"==typeof e},string:function(e){return"string"==typeof e},array:Array.isArray,object:function(e){return e&&!x.array(e)&&"object"===(void 0===e?"undefined":o(e))},promise:function(e){return e&&x.func(e.then)},iterator:function(e){return e&&x.func(e.next)&&x.func(e.throw)},iterable:function(e){return e&&x.func(Symbol)?x.func(e[Symbol.iterator]):x.array(e)},task:function(e){return e&&e[a]},observable:function(e){return e&&x.func(e.subscribe)},buffer:function(e){return e&&x.func(e.isEmpty)&&x.func(e.take)&&x.func(e.put)},pattern:function(e){return e&&(x.string(e)||"symbol"===(void 0===e?"undefined":o(e))||x.func(e)||x.array(e))},channel:function(e){return e&&x.func(e.take)&&x.func(e.close)},helper:function(e){return e&&e[u]},stringableFunc:function(e){return x.func(e)&&_(e,"toString")}},m={assign:function(e,t){for(var n in t)_(t,n)&&(e[n]=t[n])}};function b(e,t){var n=e.indexOf(t);n>=0&&e.splice(n,1)}var O={from:function(e){var t=Array(e.length);for(var n in e)_(e,n)&&(t[n]=e[n]);return t}};function w(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=r({},e),n=new Promise(function(e,n){t.resolve=e,t.reject=n});return t.promise=n,t}function S(e){for(var t=[],n=0;n<e;n++)t.push(w());return t}function k(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=void 0,r=new Promise(function(r){n=setTimeout(function(){return r(t)},e)});return r[c]=function(){return clearTimeout(n)},r}function E(){var e,t=!0,n=void 0,r=void 0;return(e={})[a]=!0,e.isRunning=function(){return t},e.result=function(){return n},e.error=function(){return r},e.setRunning=function(e){return t=e},e.setResult=function(e){return n=e},e.setError=function(e){return r=e},e}var T=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return function(){return++e}}(),C=function(e){throw e},j=function(e){return{value:e,done:!0}};function A(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:C,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",r=arguments[3],o={name:n,next:e,throw:t,return:j};return r&&(o[u]=!0),"undefined"!=typeof Symbol&&(o[Symbol.iterator]=function(){return o}),o}function P(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";"undefined"==typeof window?console.log("redux-saga "+e+": "+t+"\n"+(n&&n.stack||n)):console[e](t,n)}function N(e,t){return function(){return e.apply(void 0,arguments)}}var M=function(e,t){return e+" has been deprecated in favor of "+t+", please update your code"},B=function(e){return new Error("\n  redux-saga: Error checking hooks detected an inconsistent state. This is likely a bug\n  in redux-saga code and not yours. Thanks for reporting this in the project's github repo.\n  Error: "+e+"\n")},D=function(e,t){return(e?e+".":"")+"setContext(props): argument "+t+" is not a plain object"},z=function(e){return function(t){return e(Object.defineProperty(t,l,{value:!0}))}},L=function e(t){return function(){for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var i=[],a=t.apply(void 0,r);return{next:function(e){return i.push(e),a.next(e)},clone:function(){var n=e(t).apply(void 0,r);return i.forEach(function(e){return n.next(e)}),n},return:function(e){return a.return(e)},throw:function(e){return a.throw(e)}}}}},function(e,t,n){var r=n(4),o=n(29),i=n(20),a=n(19),u=n(28),s=function(e,t,n){var c,l,f,p,d=e&s.F,h=e&s.G,g=e&s.S,y=e&s.P,v=e&s.B,_=h?r:g?r[t]||(r[t]={}):(r[t]||{}).prototype,x=h?o:o[t]||(o[t]={}),m=x.prototype||(x.prototype={});for(c in h&&(n=t),n)f=((l=!d&&_&&void 0!==_[c])?_:n)[c],p=v&&l?u(f,r):y&&"function"==typeof f?u(Function.call,f):f,_&&a(_,c,f,e&s.U),x[c]!=f&&i(x,c,p),y&&m[c]!=f&&(m[c]=f)};r.core=o,s.F=1,s.G=2,s.S=4,s.P=8,s.B=16,s.W=32,s.U=64,s.R=128,e.exports=s},function(e,t,n){"use strict";n.d(t,"i",function(){return w}),n.d(t,"s",function(){return S}),n.d(t,"v",function(){return k}),n.d(t,"n",function(){return E}),n.d(t,"b",function(){return T}),n.d(t,"o",function(){return C}),n.d(t,"e",function(){return A}),n.d(t,"c",function(){return P}),n.d(t,"h",function(){return N}),n.d(t,"k",function(){return M}),n.d(t,"r",function(){return B}),n.d(t,"m",function(){return D}),n.d(t,"f",function(){return z}),n.d(t,"p",function(){return L}),n.d(t,"a",function(){return U}),n.d(t,"g",function(){return I}),n.d(t,"j",function(){return R}),n.d(t,"l",function(){return F}),n.d(t,"q",function(){return X}),n.d(t,"t",function(){return G}),n.d(t,"u",function(){return K}),n.d(t,"w",function(){return W}),n.d(t,"d",function(){return q});var r=n(0),o=n(43),i=Object(r.x)("IO"),a="TAKE",u="PUT",s="ALL",c="RACE",l="CALL",f="CPS",p="FORK",d="JOIN",h="CANCEL",g="SELECT",y="ACTION_CHANNEL",v="CANCELLED",_="FLUSH",x="GET_CONTEXT",m="SET_CONTEXT",b="\n(HINT: if you are getting this errors in tests, consider using createMockTask from redux-saga/utils)",O=function(e,t){var n;return(n={})[i]=!0,n[e]=t,n},w=function(e){return Object(r.h)(q.fork(e),r.q.object,"detach(eff): argument must be a fork effect"),e[p].detached=!0,e};function S(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"*";if(arguments.length&&Object(r.h)(arguments[0],r.q.notUndef,"take(patternOrChannel): patternOrChannel is undefined"),r.q.pattern(e))return O(a,{pattern:e});if(r.q.channel(e))return O(a,{channel:e});throw new Error("take(patternOrChannel): argument "+String(e)+" is not valid channel or a valid pattern")}S.maybe=function(){var e=S.apply(void 0,arguments);return e[a].maybe=!0,e};var k=Object(r.n)(S.maybe,Object(r.z)("takem","take.maybe"));function E(e,t){return arguments.length>1?(Object(r.h)(e,r.q.notUndef,"put(channel, action): argument channel is undefined"),Object(r.h)(e,r.q.channel,"put(channel, action): argument "+e+" is not a valid channel"),Object(r.h)(t,r.q.notUndef,"put(channel, action): argument action is undefined")):(Object(r.h)(e,r.q.notUndef,"put(action): argument action is undefined"),t=e,e=null),O(u,{channel:e,action:t})}function T(e){return O(s,e)}function C(e){return O(c,e)}function j(e,t,n){Object(r.h)(t,r.q.notUndef,e+": argument fn is undefined");var o=null;if(r.q.array(t)){var i=t;o=i[0],t=i[1]}else if(t.fn){var a=t;o=a.context,t=a.fn}return o&&r.q.string(t)&&r.q.func(o[t])&&(t=o[t]),Object(r.h)(t,r.q.func,e+": argument "+t+" is not a function"),{context:o,fn:t,args:n}}function A(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return O(l,j("call",e,n))}function P(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[];return O(l,j("apply",{context:e,fn:t},n))}function N(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return O(f,j("cps",e,n))}function M(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return O(p,j("fork",e,n))}function B(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return w(M.apply(void 0,[e].concat(n)))}function D(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];if(t.length>1)return T(t.map(function(e){return D(e)}));var o=t[0];return Object(r.h)(o,r.q.notUndef,"join(task): argument task is undefined"),Object(r.h)(o,r.q.task,"join(task): argument "+o+" is not a valid Task object "+b),O(d,o)}function z(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];if(t.length>1)return T(t.map(function(e){return z(e)}));var o=t[0];return 1===t.length&&(Object(r.h)(o,r.q.notUndef,"cancel(task): argument task is undefined"),Object(r.h)(o,r.q.task,"cancel(task): argument "+o+" is not a valid Task object "+b)),O(h,o||r.d)}function L(e){for(var t=arguments.length,n=Array(t>1?t-1:0),o=1;o<t;o++)n[o-1]=arguments[o];return 0===arguments.length?e=r.o:(Object(r.h)(e,r.q.notUndef,"select(selector,[...]): argument selector is undefined"),Object(r.h)(e,r.q.func,"select(selector,[...]): argument "+e+" is not a function")),O(g,{selector:e,args:n})}function U(e,t){return Object(r.h)(e,r.q.notUndef,"actionChannel(pattern,...): argument pattern is undefined"),arguments.length>1&&(Object(r.h)(t,r.q.notUndef,"actionChannel(pattern, buffer): argument buffer is undefined"),Object(r.h)(t,r.q.buffer,"actionChannel(pattern, buffer): argument "+t+" is not a valid buffer")),O(y,{pattern:e,buffer:t})}function I(){return O(v,{})}function R(e){return Object(r.h)(e,r.q.channel,"flush(channel): argument "+e+" is not valid channel"),O(_,e)}function F(e){return Object(r.h)(e,r.q.string,"getContext(prop): argument "+e+" is not a string"),O(x,e)}function X(e){return Object(r.h)(e,r.q.object,Object(r.k)(null,e)),O(m,e)}function G(e,t){for(var n=arguments.length,r=Array(n>2?n-2:0),i=2;i<n;i++)r[i-2]=arguments[i];return M.apply(void 0,[o.b,e,t].concat(r))}function K(e,t){for(var n=arguments.length,r=Array(n>2?n-2:0),i=2;i<n;i++)r[i-2]=arguments[i];return M.apply(void 0,[o.d,e,t].concat(r))}function W(e,t,n){for(var r=arguments.length,i=Array(r>3?r-3:0),a=3;a<r;a++)i[a-3]=arguments[a];return M.apply(void 0,[o.f,e,t,n].concat(i))}E.resolve=function(){var e=E.apply(void 0,arguments);return e[u].resolve=!0,e},E.sync=Object(r.n)(E.resolve,Object(r.z)("put.sync","put.resolve"));var H=function(e){return function(t){return t&&t[i]&&t[e]}},q={take:H(a),put:H(u),all:H(s),race:H(c),call:H(l),cps:H(f),fork:H(p),join:H(d),cancel:H(h),select:H(g),actionChannel:H(y),cancelled:H(v),flush:H(_),getContext:H(x),setContext:H(m)}},function(e,t,n){var r=n(7);e.exports=function(e){if(!r(e))throw TypeError(e+" is not an object!");return e}},function(e,t){var n=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(e,t,n){"use strict";e.exports=n(481)},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t,n){var r=n(89)("wks"),o=n(53),i=n(4).Symbol,a="function"==typeof i;(e.exports=function(e){return r[e]||(r[e]=a&&i[e]||(a?i:o)("Symbol."+e))}).store=r},function(e,t,n){"use strict";n.r(t);var r=n(5),o=n(25),i=n.n(o),a=i.a.shape({trySubscribe:i.a.func.isRequired,tryUnsubscribe:i.a.func.isRequired,notifyNestedSubs:i.a.func.isRequired,isSubscribed:i.a.func.isRequired}),u=i.a.shape({subscribe:i.a.func.isRequired,dispatch:i.a.func.isRequired,getState:i.a.func.isRequired});function s(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"store",n=arguments[1]||t+"Subscription",o=function(e){function o(n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,o);var i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.call(this,n,r));return i[t]=n.store,i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(o,e),o.prototype.getChildContext=function(){var e;return(e={})[t]=this[t],e[n]=null,e},o.prototype.render=function(){return r.Children.only(this.props.children)},o}(r.Component);return o.propTypes={store:u.isRequired,children:i.a.element.isRequired},o.childContextTypes=((e={})[t]=u.isRequired,e[n]=a,e),o}var c=s(),l=n(189),f=n.n(l),p=n(90),d=n.n(p);var h=null,g={notify:function(){}};var y=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.store=t,this.parentSub=n,this.onStateChange=r,this.unsubscribe=null,this.listeners=g}return e.prototype.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},e.prototype.notifyNestedSubs=function(){this.listeners.notify()},e.prototype.isSubscribed=function(){return Boolean(this.unsubscribe)},e.prototype.trySubscribe=function(){var e,t;this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.onStateChange):this.store.subscribe(this.onStateChange),this.listeners=(e=[],t=[],{clear:function(){t=h,e=h},notify:function(){for(var n=e=t,r=0;r<n.length;r++)n[r]()},get:function(){return t},subscribe:function(n){var r=!0;return t===e&&(t=e.slice()),t.push(n),function(){r&&e!==h&&(r=!1,t===e&&(t=e.slice()),t.splice(t.indexOf(n),1))}}}))},e.prototype.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=g)},e}(),v=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var _=0,x={};function m(){}function b(e){var t,n,o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=o.getDisplayName,s=void 0===i?function(e){return"ConnectAdvanced("+e+")"}:i,c=o.methodName,l=void 0===c?"connectAdvanced":c,p=o.renderCountProp,h=void 0===p?void 0:p,g=o.shouldHandleStateChanges,b=void 0===g||g,O=o.storeKey,w=void 0===O?"store":O,S=o.withRef,k=void 0!==S&&S,E=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(o,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef"]),T=w+"Subscription",C=_++,j=((t={})[w]=u,t[T]=a,t),A=((n={})[T]=a,n);return function(t){d()("function"==typeof t,"You must pass a component to the function returned by "+l+". Instead received "+JSON.stringify(t));var n=t.displayName||t.name||"Component",o=s(n),i=v({},E,{getDisplayName:s,methodName:l,renderCountProp:h,shouldHandleStateChanges:b,storeKey:w,withRef:k,displayName:o,wrappedComponentName:n,WrappedComponent:t}),a=function(n){function a(e,t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,n.call(this,e,t));return r.version=C,r.state={},r.renderCount=0,r.store=e[w]||t[w],r.propsMode=Boolean(e[w]),r.setWrappedInstance=r.setWrappedInstance.bind(r),d()(r.store,'Could not find "'+w+'" in either the context or props of "'+o+'". Either wrap the root component in a <Provider>, or explicitly pass "'+w+'" as a prop to "'+o+'".'),r.initSelector(),r.initSubscription(),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(a,n),a.prototype.getChildContext=function(){var e,t=this.propsMode?null:this.subscription;return(e={})[T]=t||this.context[T],e},a.prototype.componentDidMount=function(){b&&(this.subscription.trySubscribe(),this.selector.run(this.props),this.selector.shouldComponentUpdate&&this.forceUpdate())},a.prototype.componentWillReceiveProps=function(e){this.selector.run(e)},a.prototype.shouldComponentUpdate=function(){return this.selector.shouldComponentUpdate},a.prototype.componentWillUnmount=function(){this.subscription&&this.subscription.tryUnsubscribe(),this.subscription=null,this.notifyNestedSubs=m,this.store=null,this.selector.run=m,this.selector.shouldComponentUpdate=!1},a.prototype.getWrappedInstance=function(){return d()(k,"To access the wrapped instance, you need to specify { withRef: true } in the options argument of the "+l+"() call."),this.wrappedInstance},a.prototype.setWrappedInstance=function(e){this.wrappedInstance=e},a.prototype.initSelector=function(){var t=e(this.store.dispatch,i);this.selector=function(e,t){var n={run:function(r){try{var o=e(t.getState(),r);(o!==n.props||n.error)&&(n.shouldComponentUpdate=!0,n.props=o,n.error=null)}catch(e){n.shouldComponentUpdate=!0,n.error=e}}};return n}(t,this.store),this.selector.run(this.props)},a.prototype.initSubscription=function(){if(b){var e=(this.propsMode?this.props:this.context)[T];this.subscription=new y(this.store,e,this.onStateChange.bind(this)),this.notifyNestedSubs=this.subscription.notifyNestedSubs.bind(this.subscription)}},a.prototype.onStateChange=function(){this.selector.run(this.props),this.selector.shouldComponentUpdate?(this.componentDidUpdate=this.notifyNestedSubsOnComponentDidUpdate,this.setState(x)):this.notifyNestedSubs()},a.prototype.notifyNestedSubsOnComponentDidUpdate=function(){this.componentDidUpdate=void 0,this.notifyNestedSubs()},a.prototype.isSubscribed=function(){return Boolean(this.subscription)&&this.subscription.isSubscribed()},a.prototype.addExtraProps=function(e){if(!(k||h||this.propsMode&&this.subscription))return e;var t=v({},e);return k&&(t.ref=this.setWrappedInstance),h&&(t[h]=this.renderCount++),this.propsMode&&this.subscription&&(t[T]=this.subscription),t},a.prototype.render=function(){var e=this.selector;if(e.shouldComponentUpdate=!1,e.error)throw e.error;return Object(r.createElement)(t,this.addExtraProps(e.props))},a}(r.Component);return a.WrappedComponent=t,a.displayName=o,a.childContextTypes=A,a.contextTypes=j,a.propTypes=j,f()(a,t)}}var O=Object.prototype.hasOwnProperty;function w(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function S(e,t){if(w(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!O.call(t,n[o])||!w(e[n[o]],t[n[o]]))return!1;return!0}var k=n(138),E=n(483),T="object"==typeof self&&self&&self.Object===Object&&self,C=(E.a||T||Function("return this")()).Symbol,j=Object.prototype;j.hasOwnProperty,j.toString,C&&C.toStringTag;Object.prototype.toString;C&&C.toStringTag;Object.getPrototypeOf,Object;var A=Function.prototype,P=Object.prototype,N=A.toString;P.hasOwnProperty,N.call(Object);function M(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function B(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function D(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=B(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=B(o),o=r(t,n)),o},r}}var z=[function(e){return"function"==typeof e?D(e):void 0},function(e){return e?void 0:M(function(e){return{dispatch:e}})},function(e){return e&&"object"==typeof e?M(function(t){return Object(k.bindActionCreators)(e,t)}):void 0}];var L=[function(e){return"function"==typeof e?D(e):void 0},function(e){return e?void 0:M(function(){return{}})}],U=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function I(e,t,n){return U({},n,e,t)}var R=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r=n.pure,o=n.areMergedPropsEqual,i=!1,a=void 0;return function(t,n,u){var s=e(t,n,u);return i?r&&o(s,a)||(a=s):(i=!0,a=s),a}}}(e):void 0},function(e){return e?void 0:function(){return I}}];function F(e,t,n,r){return function(o,i){return n(e(o,i),t(r,i),i)}}function X(e,t,n,r,o){var i=o.areStatesEqual,a=o.areOwnPropsEqual,u=o.areStatePropsEqual,s=!1,c=void 0,l=void 0,f=void 0,p=void 0,d=void 0;function h(o,s){var h,g,y=!a(s,l),v=!i(o,c);return c=o,l=s,y&&v?(f=e(c,l),t.dependsOnOwnProps&&(p=t(r,l)),d=n(f,p,l)):y?(e.dependsOnOwnProps&&(f=e(c,l)),t.dependsOnOwnProps&&(p=t(r,l)),d=n(f,p,l)):v?(h=e(c,l),g=!u(h,f),f=h,g&&(d=n(f,p,l)),d):d}return function(o,i){return s?h(o,i):(f=e(c=o,l=i),p=t(r,l),d=n(f,p,l),s=!0,d)}}function G(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,i=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),a=n(e,i),u=r(e,i),s=o(e,i);return(i.pure?X:F)(a,u,s,e,i)}var K=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function W(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function H(e,t){return e===t}var q=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.connectHOC,n=void 0===t?b:t,r=e.mapStateToPropsFactories,o=void 0===r?L:r,i=e.mapDispatchToPropsFactories,a=void 0===i?z:i,u=e.mergePropsFactories,s=void 0===u?R:u,c=e.selectorFactory,l=void 0===c?G:c;return function(e,t,r){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},u=i.pure,c=void 0===u||u,f=i.areStatesEqual,p=void 0===f?H:f,d=i.areOwnPropsEqual,h=void 0===d?S:d,g=i.areStatePropsEqual,y=void 0===g?S:g,v=i.areMergedPropsEqual,_=void 0===v?S:v,x=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(i,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),m=W(e,o,"mapStateToProps"),b=W(t,a,"mapDispatchToProps"),O=W(r,s,"mergeProps");return n(l,K({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:m,initMapDispatchToProps:b,initMergeProps:O,pure:c,areStatesEqual:p,areOwnPropsEqual:h,areStatePropsEqual:y,areMergedPropsEqual:_},x))}}();n.d(t,"Provider",function(){return c}),n.d(t,"createProvider",function(){return s}),n.d(t,"connectAdvanced",function(){return b}),n.d(t,"connect",function(){return q})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.Define={svgimagesize:{width:842,height:1192},grid:{width:10,height:10},handle:{width:10,height:10}},t.Font={fontface:'\n        @font-face {\n            font-family: "maiSMHWeb";\n            src: url(font/maiSMHWeb.eot) format("eot"), url(font/maiSMHWeb.woff) format("woff");\n        }\n        @font-face {\n            font-family: "maiSMBWeb";\n            src: url(font/maiSMBWeb.eot) format("eot"), url(font/maiSMBWeb.woff) format("woff");\n        }\n        @font-face {\n            font-family: "maiSGHWeb";\n            src: url(font/maiSGHWeb.eot) format("eot"), url(font/maiSGHWeb.woff) format("woff");\n        }\n        @font-face {\n            font-family: "maiSGBWeb";\n            src: url(font/maiSGBWeb.eot) format("eot"), url(font/maiSGBWeb.woff) format("woff");\n        }\n    ',font:["maiSMHWeb","maiSMBWeb","maiSGHWeb","maiSGBWeb"]},t.PresenBox={A:[{box_id:1,group_id:"テキストテスト",group_no:1,type:"text",x1:400,y1:100,x2:700,y2:300,text:{kumihoko:"tate",padding_js:10,padding_je:10,padding_gs:10,padding_ge:10,size_j:20,size_g:20,gyokan:5,font:1,grid:[],result:[],afure:0}},{box_id:2,group_id:"テキストテスト",group_no:2,type:"text",x1:400,y1:350,x2:700,y2:550,text:{kumihoko:"tate",padding_js:10,padding_je:10,padding_gs:10,padding_ge:10,size_j:20,size_g:20,gyokan:5,font:1,grid:[],result:[],afure:0}},{box_id:3,group_id:"テキストテスト",group_no:3,type:"text",x1:400,y1:600,x2:700,y2:800,text:{kumihoko:"tate",padding_js:10,padding_je:10,padding_gs:10,padding_ge:10,size_j:20,size_g:20,gyokan:5,font:1,grid:[],result:[],afure:0}},{box_id:4,group_id:"画像テスト",group_no:1,type:"image",x1:100,y1:100,x2:350,y2:300,image:{url:""}}],B:[{box_id:1,group_id:"K01タイトル",group_no:1,type:"text",x1:70,y1:70,x2:150,y2:100,text:{kumihoko:"yoko",padding_js:4,padding_je:4,padding_gs:10,padding_ge:10,size_j:9,size_g:9,gyokan:5,font:4,grid:[],result:[],afure:0}},{box_id:2,group_id:"K01タイトル",group_no:2,type:"text",x1:70,y1:100,x2:120,y2:370,text:{kumihoko:"tate",padding_js:0,padding_je:15,padding_gs:10,padding_ge:10,size_j:25,size_g:28,gyokan:5,font:2,grid:[],result:[],afure:0}},{box_id:3,group_id:"K01タイトル",group_no:3,type:"text",x1:120,y1:100,x2:150,y2:370,text:{kumihoko:"tate",padding_js:20,padding_je:5,padding_gs:0,padding_ge:10,size_j:17,size_g:17,gyokan:5,font:2,grid:[],result:[],afure:0}},{box_id:4,group_id:"K01本文",group_no:1,type:"text",x1:150,y1:70,x2:250,y2:170,text:{kumihoko:"tate",padding_js:5,padding_je:5,padding_gs:5,padding_ge:5,size_j:9,size_g:10,gyokan:5,font:1,grid:[],result:[],afure:0}},{box_id:5,group_id:"K01本文",group_no:2,type:"text",x1:150,y1:170,x2:250,y2:270,text:{kumihoko:"tate",padding_js:5,padding_je:5,padding_gs:5,padding_ge:5,size_j:9,size_g:10,gyokan:5,font:1,grid:[],result:[],afure:0}},{box_id:6,group_id:"K01本文",group_no:3,type:"text",x1:150,y1:270,x2:340,y2:370,text:{kumihoko:"tate",padding_js:5,padding_je:5,padding_gs:5,padding_ge:5,size_j:9,size_g:10,gyokan:5,font:1,grid:[],result:[],afure:0}},{box_id:7,group_id:"K01本文",group_no:4,type:"text",x1:70,y1:370,x2:340,y2:470,text:{kumihoko:"tate",padding_js:5,padding_je:5,padding_gs:10,padding_ge:5,size_j:9,size_g:10,gyokan:5,font:1,grid:[],result:[],afure:0}},{box_id:8,group_id:"K01本文",group_no:5,type:"text",x1:70,y1:470,x2:130,y2:570,text:{kumihoko:"tate",padding_js:5,padding_je:5,padding_gs:10,padding_ge:0,size_j:9,size_g:10,gyokan:5,font:1,grid:[],result:[],afure:0}},{box_id:9,group_id:"K01本文",group_no:6,type:"text",x1:70,y1:570,x2:130,y2:670,text:{kumihoko:"tate",padding_js:5,padding_je:5,padding_gs:10,padding_ge:0,size_j:9,size_g:10,gyokan:5,font:1,grid:[],result:[],afure:0}},{box_id:10,group_id:"K01画像",group_no:1,type:"image",x1:255,y1:75,x2:395,y2:265,image:{url:""}},{box_id:11,group_id:"K01絵解き",group_no:1,type:"text",x1:400,y1:70,x2:440,y2:270,text:{kumihoko:"tate",padding_js:15,padding_je:15,padding_gs:7,padding_ge:0,size_j:10,size_g:10,gyokan:5,font:3,textgrid:[],textResult:[],afure:0}},{box_id:12,group_id:"K02タイトル",group_no:1,type:"text",x1:140,y1:470,x2:190,y2:570,text:{kumihoko:"tate",padding_js:5,padding_je:5,padding_gs:10,padding_ge:0,size_j:8,size_g:12,gyokan:8,font:4,grid:[],result:[],afure:0}},{box_id:13,group_id:"K02タイトル",group_no:2,type:"text",x1:190,y1:470,x2:200,y2:570,text:{kumihoko:"tate",padding_js:17,padding_je:5,padding_gs:0,padding_ge:0,size_j:7,size_g:7,gyokan:10,font:4,grid:[],result:[],afure:0}},{box_id:14,group_id:"K02本文",group_no:1,type:"text",x1:200,y1:470,x2:340,y2:570,text:{kumihoko:"tate",padding_js:5,padding_je:5,padding_gs:15,padding_ge:5,size_j:9,size_g:10,gyokan:5,font:1,textgrid:[],textResult:[],afure:0}},{box_id:15,group_id:"K02本文",group_no:2,type:"text",x1:140,y1:570,x2:250,y2:670,text:{kumihoko:"tate",padding_js:5,padding_je:5,padding_gs:15,padding_ge:5,size_j:9,size_g:10,gyokan:5,font:1,textgrid:[],textResult:[],afure:0}},{box_id:16,group_id:"K03タイトル",group_no:1,type:"text",x1:460,y1:70,x2:640,y2:100,text:{kumihoko:"yoko",padding_js:55,padding_je:55,padding_gs:8,padding_ge:8,size_j:14,size_g:14,gyokan:5,font:3,textgrid:[],textResult:[],afure:0}},{box_id:17,group_id:"K03タイトル",group_no:2,type:"text",x1:460,y1:100,x2:640,y2:140,text:{kumihoko:"yoko",padding_js:0,padding_je:0,padding_gs:5,padding_ge:15,size_j:16,size_g:20,gyokan:5,font:2,textgrid:[],textResult:[],afure:0}},{box_id:18,group_id:"K03タイトル",group_no:3,type:"text",x1:460,y1:140,x2:640,y2:170,text:{kumihoko:"yoko",padding_js:7,padding_je:8,padding_gs:0,padding_ge:15,size_j:15,size_g:15,gyokan:5,font:1,textgrid:[],textResult:[],afure:0}},{box_id:19,group_id:"K03本文",group_no:1,type:"text",x1:640,y1:70,x2:770,y2:170,text:{kumihoko:"tate",padding_js:5,padding_je:5,padding_gs:10,padding_ge:5,size_j:9,size_g:10,gyokan:5,font:1,grid:[],result:[],afure:0}},{box_id:20,group_id:"K03本文",group_no:2,type:"text",x1:450,y1:170,x2:770,y2:270,text:{kumihoko:"tate",padding_js:5,padding_je:5,padding_gs:5,padding_ge:5,size_j:9,size_g:10,gyokan:5,font:1,grid:[],result:[],afure:0}},{box_id:21,group_id:"K03本文",group_no:3,type:"text",x1:450,y1:270,x2:770,y2:370,text:{kumihoko:"tate",padding_js:5,padding_je:5,padding_gs:5,padding_ge:5,size_j:9,size_g:10,gyokan:5,font:1,grid:[],result:[],afure:0}},{box_id:22,group_id:"K04タイトル",group_no:1,type:"text",x1:350,y1:270,x2:420,y2:290,text:{kumihoko:"yoko",padding_js:15,padding_je:15,padding_gs:5,padding_ge:5,size_j:10,size_g:10,gyokan:5,font:4,grid:[],result:[],afure:0}},{box_id:23,group_id:"K04タイトル",group_no:2,type:"text",x1:350,y1:290,x2:390,y2:470,text:{kumihoko:"tate",padding_js:9,padding_je:9,padding_gs:10,padding_ge:10,size_j:18,size_g:20,gyokan:5,font:2,grid:[],result:[],afure:0}},{box_id:24,group_id:"K04タイトル",group_no:3,type:"text",x1:390,y1:290,x2:420,y2:470,text:{kumihoko:"tate",padding_js:15,padding_je:9,padding_gs:9,padding_ge:9,size_j:12,size_g:12,gyokan:5,font:4,grid:[],result:[],afure:0}},{box_id:25,group_id:"K04本文",group_no:1,type:"text",x1:420,y1:270,x2:440,y2:370,text:{kumihoko:"tate",padding_js:5,padding_je:5,padding_gs:5,padding_ge:5,size_j:9,size_g:10,gyokan:5,font:1,grid:[],result:[],afure:0}},{box_id:26,group_id:"K04本文",group_no:2,type:"text",x1:420,y1:370,x2:770,y2:470,text:{kumihoko:"tate",padding_js:5,padding_je:5,padding_gs:5,padding_ge:5,size_j:9,size_g:10,gyokan:5,font:1,grid:[],result:[],afure:0}},{box_id:27,group_id:"K04本文",no:3,type:"text",x1:350,y1:470,x2:770,y2:570,text:{kumihoko:"tate",padding_js:5,padding_je:5,padding_gs:0,padding_ge:5,size_j:9,size_g:10,gyokan:5,font:1,textgrid:[],textResult:[],afure:0}},{box_id:28,group_id:"K05タイトル",group_no:1,type:"text",x1:260,y1:570,x2:280,y2:670,text:{kumihoko:"tate",padding_js:5,padding_je:5,padding_gs:3,padding_ge:3,size_j:9,size_g:14,gyokan:5,font:4,grid:[],result:[],afure:0}},{box_id:29,group_id:"K05タイトル",group_no:2,type:"text",x1:280,y1:570,x2:300,y2:670,text:{kumihoko:"tate",padding_js:5,padding_je:5,padding_gs:3,padding_ge:3,size_j:9,size_g:14,gyokan:5,font:4,grid:[],result:[],afure:0}},{box_id:30,group_id:"K05タイトル",group_no:3,type:"text",x1:300,y1:570,x2:320,y2:670,text:{kumihoko:"tate",padding_js:15,padding_je:5,padding_gs:6,padding_ge:6,size_j:8,size_g:8,gyokan:5,font:3,grid:[],result:[],afure:0}},{box_id:31,group_id:"K05本文",group_no:1,type:"text",x1:320,y1:570,x2:360,y2:670,text:{kumihoko:"tate",padding_js:5,padding_je:5,padding_gs:0,padding_ge:0,size_j:9,size_g:10,gyokan:5,font:1,grid:[],result:[],afure:0}},{box_id:32,group_id:"K05本文",group_no:2,type:"text",x1:70,y1:670,x2:360,y2:770,text:{kumihoko:"tate",padding_js:5,padding_je:5,padding_gs:10,padding_ge:0,size_j:9,size_g:10,gyokan:5,font:1,grid:[],result:[],afure:0}},{box_id:33,group_id:"K05本文",group_no:3,type:"text",x1:360,y1:720,x2:590,y2:770,text:{kumihoko:"tate",padding_js:5,padding_je:5,padding_gs:5,padding_ge:5,size_j:9,size_g:10,gyokan:5,font:1,grid:[],result:[],afure:0}},{box_id:34,group_id:"K05画像",group_no:1,type:"image",x1:365,y1:575,x2:520,y2:715,image:{url:""}},{box_id:35,group_id:"K05絵解き",group_no:1,type:"text",x1:520,y1:570,x2:590,y2:720,text:{kumihoko:"tate",padding_js:9,padding_je:9,padding_gs:5,padding_ge:6,size_j:11,size_g:11,gyokan:5,font:3,grid:[],result:[],afure:0}},{box_id:36,group_id:"K06画像",group_no:1,type:"image",x1:70,y1:770,x2:110,y2:870,image:{url:""}},{box_id:37,group_id:"K06タイトル",group_no:1,type:"text",x1:110,y1:770,x2:130,y2:870,text:{kumihoko:"tate",padding_js:6,padding_je:6,padding_gs:8,padding_ge:0,size_j:11,size_g:12,gyokan:5,font:2,grid:[],result:[],afure:0}},{box_id:38,group_id:"K06本文",group_no:1,type:"text",x1:130,y1:770,x2:340,y2:870,text:{kumihoko:"tate",padding_js:5,padding_je:5,padding_gs:10,padding_ge:5,size_j:9,size_g:10,gyokan:5,font:1,grid:[],result:[],afure:0}},{box_id:39,group_id:"K07タイトル",group_no:1,type:"text",x1:340,y1:770,x2:360,y2:870,text:{kumihoko:"tate",padding_js:6,padding_je:6,padding_gs:4,padding_ge:4,size_j:11,size_g:12,gyokan:5,font:2,grid:[],result:[],afure:0}},{box_id:40,group_id:"K07本文",group_no:1,type:"text",x1:360,y1:770,x2:590,y2:870,text:{kumihoko:"tate",padding_js:5,padding_je:5,padding_gs:5,padding_ge:5,size_j:9,size_g:10,gyokan:5,font:1,grid:[],result:[],afure:0}},{box_id:41,group_id:"K08画像",group_no:1,type:"image",x1:600,y1:570,x2:770,y2:870,image:{url:""}},{box_id:42,group_id:"K09画像",group_no:1,type:"image",x1:70,y1:875,x2:770,y2:1130,image:{url:""}}]},t.PresenSozai={A:[{sozai_id:"本文テスト用",type:"text",text:"　生産年齢人口の減少や第４次産業革命への対応など、建設業は大きな転換期を迎えている。３月に設立７０周年を迎えた全国建設業協会の近藤晴貞会長は、地域建設業が役割を果たし続けるために、「働き方改革と生産性向上に果敢に挑戦しなければならない」とし、「自ら改革を進めていくことも重要になる」と強調する。７０周年を契機に策定した「地域建設業将来展望」には、転換期を変革の好機に変えるためのキーワードを盛り込んだ。地域建設業の進化を後押しするため、全建は今後も各建設業協会の活躍を強力に推進するエンジンであり続ける。\n　近藤会長は、地域建設業に求められる役割について、「安全・安心の確保だけではなく、住民の利便性向上や地域経済の活性化など多岐にわたる」とした上で、「安全・安心の確保という切り口だけでなく、将来の地域建設業のあるべき姿を議論していかなければならない」と指摘する。\n　将来展望では、強みである「地域建設企業力」を生かした新時代の構築を打ち出し、インフラ老朽化対策での川上段階からの参画など、積極的な事業提案への取り組みを１つの方向性として示している。\n　視線の先にあるのは、地域建設業の持続的な発展であり、近藤会長は「若者が先を見通すことができる環境づくりの基盤を、年配の方々がつくる」という考えがベースになっていると説明する。\n　とはいえ、さまざまな施策が立案されても、経営の健全化がなければ実現は難しい。働き方改革や生産性向上の原資となる「健全な経営の継続」のためには、「仕事があり、仕事をこなす人がいて、利潤が出るという仕組みづくりをしなければならない」と強調する。\n　公共事業予算は下げ止まりの傾向が見られているが、今後も必要な仕事量を確保できるかどうかが地域ごとに異なる状況下で、「システムなどのサポートがなければできない部分もあるが、自ら仕事量を確保していくという取り組みも考えていく必要がある」と、積極果敢なチャレンジを生き残りの重要な要素に挙げる。\n　地域建設業が新時代を切り開くためには、公共事業予算の持続的・安定的な確保が重要な役割を果たすが、「予算の配分が一番大きな課題になる」とし、地域建設業、中小企業向けの予算確保に向けた活動を引き続き展開する。\n　働き方改革では、会員が現行の休日実績を１日増やす「休日月１＋（ツキイチプラス）」運動を展開するほか、「単価引き上げ分アップ宣言」に基づき、公共工事設計労務単価の改定分を下請に反映するための取り組みも徹底する。\n　建設キャリアアップシステムに対しては、「技能者の保有資格や就労実績を蓄積することで処遇の改善、技能の研さんにつながる。働き方改革、中長期的な担い手確保の面で、良い仕組みだと思う」と期待を寄せる。\n　新たな一歩を踏み出した全建の今後の役割として近藤会長は、各建協と会員企業が活動しやすい環境づくりや、地域建設業の魅力発信などを挙げる。「各建協単独では取り組みが難しいテーマや課題も、全建で集約すれば全国の声として発信することができる」とし、引き続き「地域建設業の地位向上と発展に寄与し続けていきたい」と力を込める。",mojiObjAry:[],imageUrl:"",select:""},{sozai_id:"画像テスト用",type:"image",text:"",mojiObjAry:[],imageUrl:"image/layoutA.jpg"}],B:[{sozai_id:"K01タイトル",type:"text",text:"アマゾンジャパン\n１０００人の新規採用\n有料会員増加やサービス拡張で",mojiObjAry:[],imageUrl:""},{sozai_id:"K01本文",type:"text",text:"　アマゾンジャパンは５月２日、コーポレート職や技術職などの職種について、全国で１０００人規模の新規採用を行うと発表した。Ａｍａｚｏｎの有料会員であるプライム会員の増加や、自動音声サービス「Ａｌｅｘａ（アレクサ）」などのサービスの拡張などを背景に、対応する人員の確保に乗り出す。採用の強化に伴い、東京・目黒の駅前ビル内に、オフィスを新設する。\n　新規採用は、１９年にかけて行う。中途採用のほか、大学卒や専門学校卒を対象とした新卒採用も行う。採用するのは、クラウドコンピューティングなどに通じた技術職や、マーケティング・財務を担う職種が対象だ。\n　東京・目黒に新設するオフィスでは、その日の業務内容に合わせて働く場所を選択できるようにする。機密性の高い商談なども行えるよう、プライベートブースも設ける。オールジェンダー向けのトイレやシャワールーム、礼拝室も備える予定。多様な人材を対象に採用を進めるとみられる。\n　アマゾンジャパンのジャスパー・チャン社長は、「日本はＡｍａｚｏｎにとって世界でも戦略的に重要な国の一つ。生産性の向上や働き方改革、ダイバーシティーの推進に取り組んでいく」としている。",mojiObjAry:[],imageUrl:""},{sozai_id:"K01画像",type:"image",text:"",mojiObjAry:[],imageUrl:"image/K1I1.jpg"},{sozai_id:"K01絵解き",type:"text",text:"新オフィスが入居する目黒セントラルスクエア",mojiObjAry:[],imageUrl:""},{sozai_id:"K02タイトル",type:"text",text:"オイシックス・ラ・大地\n経営統合へに新社名変更\nオイシックスドット大地",mojiObjAry:[],imageUrl:""},{sozai_id:"K02本文",type:"text",text:"　オイシックスドット大地は、１０月に予定しているらでぃっしゅぼーや（本社東京都、高島宏平社長）との経営統合へ向け、新社名を「オイシックス・ラ・大地株式会社」にすることを決めた。\n　経営統合に先駆けて７月１日付で社名を変更。１０月９日にらでぃっしゅぼーや社員はオイシックス・ラ・大地の本社（品川区大崎）に転籍する。",mojiObjAry:[],imageUrl:""},{sozai_id:"K03タイトル",type:"text",text:"楽　　　天\n「楽天アイリス」を開発\nビッグデータを分析活用",mojiObjAry:[],imageUrl:""},{sozai_id:"K03本文",type:"text",text:"　楽天はこのほど、ビッグデータを分析して消費行動を理解し、マーケティングソリューションに活用するＡＩエージェント「Ｒａｋｕｔｅｎ　ＡＩｒｉｓ（楽天アイリス）」を開発した。\n　「楽天アイリス」は、約９７００万の楽天ＩＤとそれに基づく消費行動分析データをマーケティングソリューションに活用するため、楽天技術研究所（所在地東京都、森正弥代表）や、楽天のデータサイエンス部、広告事業ディビジョンが共同で開発したシステム。\n　「アイリス」は「ＡＩ」（人工知能）と、英語で「虹彩」を意味する「Ｉｒｉｓ」を組み合わせた造語。機械学習を用いた独自のアルゴリズムで消費行動を解析することで、購買の見込みがあるユーザーを抽出することができる独自機能を有している。\n　対象商品の購買実績があるユーザー層の属性データや購買傾向、価格傾向、楽天グループサービス利用傾向など９２０項目に上るデータを分析してスコア化。\n　マッピングすることで、購買実績のないユーザーでも「購買見込みユーザー」として予測し、広告配信において精度の高い拡張ターゲティングを行うことができる。",mojiObjAry:[],imageUrl:""},{sozai_id:"K04タイトル",type:"text",text:"オルビス\n新スマホアプリ配信\n配送確認やコンビニ支払いも",mojiObjAry:[],imageUrl:""},{sozai_id:"K04本文",type:"text",text:"　化粧品通販のオルビス（本社東京都、小林琢磨社長）は６月１日、新たなスマホアプリを無料で配信する。従来のアプリで使えるポイント蓄積・利用機能に加え、通販で購入した配送状況の確認や、コンビニ支払いができる機能を搭載した。購入に便利な機能を加えることで、顧客の利便性を高め、売り上げ向上を図りたい考えだ。\n　「ＯＲＢＩＳアプリ」は、配送状況の確認や再配達が依頼できるアプリ「ウケトル」と、コンビニ支払いができるアプリ「ＰＡＹＳＬＥ（ペイスル）」のサービスを搭載している。\n　スマホで商品の配送状況が確認でき、商品代金の支払いが行える。注文した商品をコンビニで受け取る場合、電子バーコードをスマホに表示して、コンビニ店頭で決済できる。\n　コンビニ決済ができるのは６月１日からで、国内の「ミニストップ」（４月末現在で２２４７店）、「セイコーマート」（同１１９５店）で先行してサービスを開始する。その他大手コンビニへも導入する予定としている。\n　アプリではこのほか、商品を探して簡単なステップで注文したり、美容特集記事を閲覧することも可能。従来のアプリと同様、オルビルのポイントをためたり、使用したりすることもできる。",mojiObjAry:[],imageUrl:""},{sozai_id:"K05タイトル",type:"text",text:"ベネフィットワン向け\n犬用おやつを販売開始\nＥＣホールディングス",mojiObjAry:[],imageUrl:""},{sozai_id:"K05本文",type:"text",text:"　ＥＣ運営、運営支援を行うＥＣホールディングス（本社東京都、井関貴博社長）は５月１０日、ベネフィット・ワンが運営する会員制優待サービス「ベネフィット・ステーション」の会員向けＥＣサイト「ベネ通販」で、犬用おやつ・サプリメントブランド「Ｃｈｅｒｉ　ＷＡＮ」の商品の販売を始めた。\n　原材料や国産、無添加にこだわった犬用菓子づくりとサプリメントとなっている。\n　販売商品は「Ｃｈｅｒｉ　ＷＡＮ　ＰＬＡＣＥＮＴＡ　ＷＡＮ３種＆米粉パンケーキミックスセット」で、鶏ササミやタラなど３種に加えて米粉パンケーキミックスがセットで、価格は３１４０円（税抜）。会員価格２５２８円（税抜）。",mojiObjAry:[],imageUrl:""},{sozai_id:"K05画像",type:"image",text:"",mojiObjAry:[],imageUrl:"image/K5I1.jpg"},{sozai_id:"K05絵解き",type:"text",text:"「Ｃｈｅｒｉ　ＷＡＮ　ＰＬＡＣＥＭＴＡ　ＷＡＮ３種＆米粉パンケーキミックスセット」",mojiObjAry:[],imageUrl:""},{sozai_id:"K06画像",type:"image",text:"",mojiObjAry:[],imageUrl:"image/K6I1.gif"},{sozai_id:"K06タイトル",type:"text",text:"期末配当金は５円",mojiObjAry:[],imageUrl:""},{sozai_id:"K06本文",type:"text",text:"■ＪＡＬＵＸは５月１６日、２０１８年３月期の期末配当金につき、年５円増配し、１株５５円を配当すると発表した。６月１５日開催の株主総会に付議する予定。インバウンドの増加を背景に、先ごろ公表した１８年３月期の業績が増収増益と好調だったことから増配に踏み切った。なお、従来の配当は５０円。",mojiObjAry:[],imageUrl:""},{sozai_id:"K07タイトル",type:"text",text:"シリカサプリ刷新",mojiObjAry:[],imageUrl:""},{sozai_id:"K07本文",type:"text",text:"■自然食品のＥＣサイト「ハッピーナチュラル」などを運営するナカヤマは６月１日、シリカ（ケイ素）を用いたサプリ「ハッピーシリカ」をリニューアル発売する。木村式農法米のもみ殻から取れるシリカを使用している。７５種類の植物酵素を同時に摂取できるジュレタイプに仕上げた。価格は５グラム×１４包入りが３本で税別１万２０００円。",mojiObjAry:[],imageUrl:""},{sozai_id:"K08画像",type:"image",text:"",mojiObjAry:[],imageUrl:"image/K8I1.jpg"},{sozai_id:"K09画像",type:"image",text:"",mojiObjAry:[],imageUrl:"image/K9I1.jpg"}]},t.PresenLine={A:[],B:[{id:"line001",type:"rect",x1:65,y1:65,x2:775,y2:1142,width:.5,color:"#000000"},{id:"line002",type:"line",x1:445,y1:80,x2:445,y2:360,width:1,color:"#000000"},{id:"line003",type:"line",x1:340,y1:280,x2:340,y2:560,width:1,color:"#000000"},{id:"line004",type:"line",x1:135,y1:480,x2:135,y2:660,width:.5,color:"#000000"},{id:"line005",type:"line",x1:250,y1:580,x2:250,y2:660,width:.5,color:"#000000"},{id:"line006",type:"line",x1:590,y1:580,x2:590,y2:860,width:.5,color:"#000000"},{id:"line007",type:"line",x1:593,y1:580,x2:593,y2:860,width:.5,color:"#000000"},{id:"line008",type:"line",x1:155,y1:170,x2:240,y2:170,width:.5,color:"#000000"},{id:"line009",type:"line",x1:455,y1:170,x2:765,y2:170,width:.5,color:"#000000"},{id:"line010",type:"line",x1:155,y1:270,x2:435,y2:270,width:.5,color:"#000000"},{id:"line011",type:"line",x1:455,y1:270,x2:765,y2:270,width:.5,color:"#000000"},{id:"line012",type:"line",x1:80,y1:370,x2:330,y2:370,width:.5,color:"#000000"},{id:"line013",type:"line",x1:425,y1:370,x2:765,y2:370,width:.5,color:"#000000"},{id:"line014",type:"line",x1:80,y1:470,x2:330,y2:470,width:.5,color:"#000000"},{id:"line015",type:"line",x1:350,y1:470,x2:765,y2:470,width:.5,color:"#000000"},{id:"line016",type:"line",x1:80,y1:570,x2:120,y2:570,width:.5,color:"#000000"},{id:"line017",type:"line",x1:150,y1:570,x2:765,y2:570,width:.5,color:"#000000"},{id:"line018",type:"line",x1:80,y1:670,x2:360,y2:670,width:.5,color:"#000000"},{id:"line019",type:"line",x1:80,y1:770,x2:585,y2:770,width:.5,color:"#000000"},{id:"line020",type:"line",x1:80,y1:870,x2:765,y2:870,width:.5,color:"#000000"}]},t.PresenLink={B:[{group_id:"K01タイトル",sozai_id:"K01タイトル"},{group_id:"K01本文",sozai_id:"K01本文"},{group_id:"K01画像",sozai_id:"K01画像"},{group_id:"K01絵解き",sozai_id:"K01絵解き"},{group_id:"K02タイトル",sozai_id:"K02タイトル"},{group_id:"K02本文",sozai_id:"K02本文"},{group_id:"K02画像",sozai_id:"K02画像"},{group_id:"K02絵解き",sozai_id:"K02絵解き"},{group_id:"K03タイトル",sozai_id:"K03タイトル"},{group_id:"K03本文",sozai_id:"K03本文"},{group_id:"K03画像",sozai_id:"K03画像"},{group_id:"K03絵解き",sozai_id:"K03絵解き"},{group_id:"K04タイトル",sozai_id:"K04タイトル"},{group_id:"K04本文",sozai_id:"K04本文"},{group_id:"K04画像",sozai_id:"K04画像"},{group_id:"K04絵解き",sozai_id:"K04絵解き"},{group_id:"K05タイトル",sozai_id:"K05タイトル"},{group_id:"K05本文",sozai_id:"K05本文"},{group_id:"K05画像",sozai_id:"K05画像"},{group_id:"K05絵解き",sozai_id:"K05絵解き"},{group_id:"K06タイトル",sozai_id:"K06タイトル"},{group_id:"K06本文",sozai_id:"K06本文"},{group_id:"K06画像",sozai_id:"K06画像"},{group_id:"K06絵解き",sozai_id:"K06絵解き"},{group_id:"K07タイトル",sozai_id:"K07タイトル"},{group_id:"K07本文",sozai_id:"K07本文"},{group_id:"K07画像",sozai_id:"K07画像"},{group_id:"K07絵解き",sozai_id:"K07絵解き"},{group_id:"K08タイトル",sozai_id:"K08タイトル"},{group_id:"K08本文",sozai_id:"K08本文"},{group_id:"K08画像",sozai_id:"K08画像"},{group_id:"K08絵解き",sozai_id:"K08絵解き"},{group_id:"K09タイトル",sozai_id:"K09タイトル"},{group_id:"K09本文",sozai_id:"K09本文"},{group_id:"K09画像",sozai_id:"K09画像"},{group_id:"K09絵解き",sozai_id:"K09絵解き"}]}},function(e,t,n){var r=n(32),o=Math.min;e.exports=function(e){return e>0?o(r(e),9007199254740991):0}},function(e,t,n){var r=n(3),o=n(186),i=n(34),a=Object.defineProperty;t.f=n(13)?Object.defineProperty:function(e,t,n){if(r(e),t=i(t,!0),r(n),o)try{return a(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(e[t]=n.value),e}},function(e,t,n){e.exports=!n(6)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Grid=t.Cursor=t.Zahyo=void 0;var r=function(){return function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),o=(n(10),t.Zahyo={windowArea:function(){return{w:document.documentElement.clientWidth,h:document.documentElement.clientHeight}},luToruX:function(e,t){return t-e},luToruY:function(e,t){return e},ruToluX:function(e,t){return t-e},ruToluY:function(e,t){return e},changeRectToArea:function(e,t,n,r){var o={};return o.x=e,o.y=t,o.w=n-e,o.h=r-t,o},changeAreaToRect:function(e,t,n,r){var o={};return o.x1=e,o.y1=t,o.x2=e+n,o.y2=t+r,o},luToruRect:function(e,t,n,r,i,a){var u={};return u.x1=o.luToruX(n,i),u.y1=o.luToruY(t,a),u.x2=o.luToruX(e,i),u.y2=o.luToruX(r,a),u},ruToluRect:function(e,t,n,r,i,a){var u={};return u.x1=o.ruToluX(n,i),u.y1=o.ruToluY(t,a),u.x2=o.ruToluX(e,i),u.y2=o.ruToluY(r,a),u},luToruArea:function(e,t,n,r,i,a){var u={};return u.x=o.luToruX(e+n,i),u.y=o.luToruY(t,a),u.w=n,u.h=r,u},ruToluArea:function(e,t,n,r,i,a){var u={};return u.x=o.ruToluX(e+n,i),u.y=o.ruToluY(t,a),u.w=n,u.h=r,u},luToruRectToArea:function(e,t,n,r,i,a){var u={};return u.x=o.luToruX(n,i),u.y=o.luToruY(t,a),u.w=n-e,u.h=r-t,u},ruToluRectToArea:function(e,t,n,r,i,a){var u={};return u.x=o.ruToluX(n,i),u.y=o.ruToluY(t,a),u.w=n-e,u.h=r-t,u},luToruAreaToRect:function(e,t,n,r,i,a){var u={};return u.x1=o.luToruX(e+n,i),u.y1=o.luToruY(t,a),u.x2=o.luToruX(e,i),u.y2=o.luToruY(t+r,a),u},ruToluAreaToRect:function(e,t,n,r,i,a){var u={};return u.x1=o.ruToluX(e+n,i),u.y1=o.ruToluY(t,a),u.x2=o.ruToluX(e,i),u.y2=o.ruToluY(t+r,a),u},isInBox:function(e,t,n,r,o,i){return e>=n&&t>=r&&e<=o&&t<=i}}),i=t.Cursor={curPageKiten:function(e){return[e.pageX,e.pageY]},curPageScrollKiten:function(e,t){return[window.pageXOffset+e,window.pageYOffset+t]},elemPageKiten:function(e){var t=e.getBoundingClientRect();return[t.left,t.top]},elemPageScrollKiten:function(e){var t=window.pageXOffset,n=window.pageYOffset,o=i.elemPageKiten(e),a=r(o,2);return[t+a[0],n+a[1]]},curElemKiten:function(e,t,n){var o=i.elemPageScrollKiten(n),a=r(o,2),u=a[0],s=a[1],c=i.curPageScrollKiten(e,t),l=r(c,2);return[l[0]-u,l[1]-s]},curElemScrollKiten:function(e,t,n){var o=i.elemPageScrollKiten(n),a=r(o,2),u=a[0],s=a[1],c=i.curPageScrollKiten(e,t),l=r(c,2),f=l[0],p=l[1];return[f-u+n.scrollLeft,p-s+n.scrollTop]},curElemScaleScrollKiten:function(e,t,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1,a=i.elemPageScrollKiten(n),u=r(a,2),s=u[0],c=u[1],l=i.curPageScrollKiten(e,t),f=r(l,2),p=f[0],d=f[1];return[(p-s)/o+n.scrollLeft/o,(d-c)/o+n.scrollTop/o]}},a=t.Grid={snap:function(e,t,n,r,o,i){var a=e,u=t,s=void 0,c=void 0;0==(s=a%o)||(c=Math.floor(a/o),a=s>=o/2?(c+1)*o:c*o);0==(s=u%i)||(c=Math.floor(u/i),u=s>=i/2?(c+1)*i:c*i),a<0&&(a=0),u<0&&(u=0);var l=o*(c=Math.floor(n/o));a>l&&(a=l);var f=i*(c=Math.floor(r/i));return u>f&&(u=f),[a,u]},changeInArea:function(e,t,n,o,i,u,s,c){var l=n-e,f=o-t;e<0&&(e=0),t<0&&(t=0);var p=a.snap(e,t,i,u,s,c),d=r(p,2);n=(e=d[0])+l,o=(t=d[1])+f;var h=a.snap(n,o,i,u,s,c),g=r(h,2);return n=g[0],t=(o=g[1])-f,(e=n-l)<0&&(e=0),t<0&&(t=0),[e,t,n,o]}}},function(e,t,n){var r=n(33);e.exports=function(e){return Object(r(e))}},function(e,t,n){"use strict";n.d(t,"a",function(){return u}),n.d(t,"e",function(){return s}),n.d(t,"c",function(){return c}),n.d(t,"b",function(){return p}),n.d(t,"d",function(){return d}),n.d(t,"f",function(){return h});var r=n(0),o=n(39),i=n(62),a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},u={type:"@@redux-saga/CHANNEL_END"},s=function(e){return e&&"@@redux-saga/CHANNEL_END"===e.type};function c(){var e=[];return{subscribe:function(t){return e.push(t),function(){return Object(r.w)(e,t)}},emit:function(t){for(var n=e.slice(),r=0,o=n.length;r<o;r++)n[r](t)}}}var l="invalid buffer passed to channel factory function",f="Saga was provided with an undefined action";function p(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:o.a.fixed(),t=!1,n=[];function i(){if(t&&n.length)throw Object(r.p)("Cannot have a closed channel with pending takers");if(n.length&&!e.isEmpty())throw Object(r.p)("Cannot have pending takers with non empty buffer")}return Object(r.h)(e,r.q.buffer,l),{take:function(o){i(),Object(r.h)(o,r.q.func,"channel.take's callback must be a function"),t&&e.isEmpty()?o(u):e.isEmpty()?(n.push(o),o.cancel=function(){return Object(r.w)(n,o)}):o(e.take())},put:function(o){if(i(),Object(r.h)(o,r.q.notUndef,f),!t){if(!n.length)return e.put(o);for(var a=0;a<n.length;a++){var u=n[a];if(!u[r.b]||u[r.b](o))return n.splice(a,1),u(o)}}},flush:function(n){i(),Object(r.h)(n,r.q.func,"channel.flush' callback must be a function"),t&&e.isEmpty()?n(u):n(e.flush())},close:function(){if(i(),!t&&(t=!0,n.length)){var e=n;n=[];for(var r=0,o=e.length;r<o;r++)e[r](u)}},get __takers__(){return n},get __closed__(){return t}}}function d(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:o.a.none(),n=arguments[2];arguments.length>2&&Object(r.h)(n,r.q.func,"Invalid match function passed to eventChannel");var i=p(t),a=function(){i.__closed__||(u&&u(),i.close())},u=e(function(e){s(e)?a():n&&!n(e)||i.put(e)});if(i.__closed__&&u(),!r.q.func(u))throw new Error("in eventChannel: subscribe should return a function to unsubscribe");return{take:i.take,flush:i.flush,close:a}}function h(e){var t=d(function(t){return e(function(e){e[r.c]?t(e):Object(i.a)(function(){return t(e)})})});return a({},t,{take:function(e,n){arguments.length>1&&(Object(r.h)(n,r.q.func,"channel.take's matcher argument must be a function"),e[r.b]=n),t.take(e)}})}},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},function(e,t,n){var r=n(1),o=n(6),i=n(33),a=/"/g,u=function(e,t,n,r){var o=String(i(e)),u="<"+t;return""!==n&&(u+=" "+n+'="'+String(r).replace(a,"&quot;")+'"'),u+">"+o+"</"+t+">"};e.exports=function(e,t){var n={};n[e]=t(u),r(r.P+r.F*o(function(){var t=""[e]('"');return t!==t.toLowerCase()||t.split('"').length>3}),"String",n)}},function(e,t,n){var r=n(4),o=n(20),i=n(24),a=n(53)("src"),u=Function.toString,s=(""+u).split("toString");n(29).inspectSource=function(e){return u.call(e)},(e.exports=function(e,t,n,u){var c="function"==typeof n;c&&(i(n,"name")||o(n,"name",t)),e[t]!==n&&(c&&(i(n,a)||o(n,a,e[t]?""+e[t]:s.join(String(t)))),e===r?e[t]=n:u?e[t]?e[t]=n:o(e,t,n):(delete e[t],o(e,t,n)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[a]||u.call(this)})},function(e,t,n){var r=n(12),o=n(54);e.exports=n(13)?function(e,t,n){return r.f(e,t,o(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t,n){var r=n(24),o=n(15),i=n(118)("IE_PROTO"),a=Object.prototype;e.exports=Object.getPrototypeOf||function(e){return e=o(e),r(e,i)?e[i]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?a:null}},function(e,t,n){var r=n(66),o=n(54),i=n(23),a=n(34),u=n(24),s=n(186),c=Object.getOwnPropertyDescriptor;t.f=n(13)?c:function(e,t){if(e=i(e),t=a(t,!0),s)try{return c(e,t)}catch(e){}if(u(e,t))return o(!r.f.call(e,t),e[t])}},function(e,t,n){var r=n(67),o=n(33);e.exports=function(e){return r(o(e))}},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t,n){e.exports=n(268)()},function(e,t,n){"use strict";var r=n(6);e.exports=function(e,t){return!!e&&r(function(){t?e.call(null,function(){},1):e.call(null)})}},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t,n){var r=n(17);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,o){return e.call(t,n,r,o)}}return function(){return e.apply(t,arguments)}}},function(e,t){var n=e.exports={version:"2.5.6"};"number"==typeof __e&&(__e=n)},function(e,t,n){var r=n(28),o=n(67),i=n(15),a=n(11),u=n(101);e.exports=function(e,t){var n=1==e,s=2==e,c=3==e,l=4==e,f=6==e,p=5==e||f,d=t||u;return function(t,u,h){for(var g,y,v=i(t),_=o(v),x=r(u,h,3),m=a(_.length),b=0,O=n?d(t,m):s?d(t,0):void 0;m>b;b++)if((p||b in _)&&(y=x(g=_[b],b,v),e))if(n)O[b]=y;else if(y)switch(e){case 3:return!0;case 5:return g;case 6:return b;case 2:O.push(g)}else if(l)return!1;return f?-1:c||l?l:O}}},function(e,t,n){var r=n(1),o=n(29),i=n(6);e.exports=function(e,t){var n=(o.Object||{})[e]||Object[e],a={};a[e]=t(n),r(r.S+r.F*i(function(){n(1)}),"Object",a)}},function(e,t){var n=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:n)(e)}},function(e,t){e.exports=function(e){if(void 0==e)throw TypeError("Can't call method on  "+e);return e}},function(e,t,n){var r=n(7);e.exports=function(e,t){if(!r(e))return e;var n,o;if(t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;if("function"==typeof(n=e.valueOf)&&!r(o=n.call(e)))return o;if(!t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Box=void 0;var r=n(218);t.Box={getBox:function(e,t){for(var n="",r=0;r<e.length;r++)if(e[r].box_id==t){n=e[r];break}return n},getGroupAndNo:function(e,t){for(var n=0,r=0,o=0;o<e.length;o++)if(e[o].box_id==t){n=e[o].group_id,r=e[o].group_no;break}return[n,r]},getGroupAry:function(e){for(var t=[],n=0;n<e.length;n++)t=r.LibArray.setArrayUnique(t,e[n].group_id);return t.sort(function(e,t){return e-t}),t},getGroupNoAry:function(e,t){for(var n=[],r=0;r<e.length;r++)e[r].group_id==t&&n.push(e[r].group_no);return n.sort(function(e,t){return e-t}),n},getBoxId:function(e,t,n){for(var r="",o=0;o<e.length;o++)if(e[o].group_id==t&&e[o].group_no==n){r=e[o].box_id;break}return r},getLinkGroup:function(e,t,n){for(var r=0,o=0;o<t.length;o++)if(t[o].sozai_id==n){r=t[o].group_id;break}return r},getNewBoxId:function(e){for(var t=0,n=0;n<e.length;n++)e[n].box_id>t&&(t=e[n].box_id);return t+1},getNewGroupId:function(e){for(var t=void 0,n=1;n<999;n++){t="group"+i(n);for(var r=!1,o=0;o<e.length;o++)if(e[o].group_id==t){r=!0;break}if(0==r)break}function i(e){var t=e.toString(10);return 1==t.length?"00"+t:2==t.length?"0"+t:t}return t},isSameBoxTypeAndSozaiType:function(e,t){var n=!1;switch(e){case"text":switch(t){case"text":n=!0}break;case"image":switch(t){case"image":n=!0}break;case"title":switch(t){case"text":n=!0}}return n}}},function(e,t,n){"use strict";n.r(t);var r=n(2);n.d(t,"take",function(){return r.s}),n.d(t,"takem",function(){return r.v}),n.d(t,"put",function(){return r.n}),n.d(t,"all",function(){return r.b}),n.d(t,"race",function(){return r.o}),n.d(t,"call",function(){return r.e}),n.d(t,"apply",function(){return r.c}),n.d(t,"cps",function(){return r.h}),n.d(t,"fork",function(){return r.k}),n.d(t,"spawn",function(){return r.r}),n.d(t,"join",function(){return r.m}),n.d(t,"cancel",function(){return r.f}),n.d(t,"select",function(){return r.p}),n.d(t,"actionChannel",function(){return r.a}),n.d(t,"cancelled",function(){return r.g}),n.d(t,"flush",function(){return r.j}),n.d(t,"getContext",function(){return r.l}),n.d(t,"setContext",function(){return r.q}),n.d(t,"takeEvery",function(){return r.t}),n.d(t,"takeLatest",function(){return r.u}),n.d(t,"throttle",function(){return r.w})},function(e,t,n){var r=n(165),o=n(1),i=n(89)("metadata"),a=i.store||(i.store=new(n(162))),u=function(e,t,n){var o=a.get(e);if(!o){if(!n)return;a.set(e,o=new r)}var i=o.get(t);if(!i){if(!n)return;o.set(t,i=new r)}return i};e.exports={store:a,map:u,has:function(e,t,n){var r=u(t,n,!1);return void 0!==r&&r.has(e)},get:function(e,t,n){var r=u(t,n,!1);return void 0===r?void 0:r.get(e)},set:function(e,t,n,r){u(n,r,!0).set(e,t)},keys:function(e,t){var n=u(e,t,!1),r=[];return n&&n.forEach(function(e,t){r.push(t)}),r},key:function(e){return void 0===e||"symbol"==typeof e?e:String(e)},exp:function(e){o(o.S,"Reflect",e)}}},function(e,t,n){"use strict";if(n(13)){var r=n(41),o=n(4),i=n(6),a=n(1),u=n(78),s=n(95),c=n(28),l=n(47),f=n(54),p=n(20),d=n(45),h=n(32),g=n(11),y=n(160),v=n(51),_=n(34),x=n(24),m=n(65),b=n(7),O=n(15),w=n(104),S=n(50),k=n(21),E=n(49).f,T=n(102),C=n(53),j=n(8),A=n(30),P=n(88),N=n(81),M=n(99),B=n(58),D=n(84),z=n(48),L=n(100),U=n(170),I=n(12),R=n(22),F=I.f,X=R.f,G=o.RangeError,K=o.TypeError,W=o.Uint8Array,H=Array.prototype,q=s.ArrayBuffer,V=s.DataView,Z=A(0),Y=A(2),J=A(3),$=A(4),Q=A(5),ee=A(6),te=P(!0),ne=P(!1),re=M.values,oe=M.keys,ie=M.entries,ae=H.lastIndexOf,ue=H.reduce,se=H.reduceRight,ce=H.join,le=H.sort,fe=H.slice,pe=H.toString,de=H.toLocaleString,he=j("iterator"),ge=j("toStringTag"),ye=C("typed_constructor"),ve=C("def_constructor"),_e=u.CONSTR,xe=u.TYPED,me=u.VIEW,be=A(1,function(e,t){return Ee(N(e,e[ve]),t)}),Oe=i(function(){return 1===new W(new Uint16Array([1]).buffer)[0]}),we=!!W&&!!W.prototype.set&&i(function(){new W(1).set({})}),Se=function(e,t){var n=h(e);if(n<0||n%t)throw G("Wrong offset!");return n},ke=function(e){if(b(e)&&xe in e)return e;throw K(e+" is not a typed array!")},Ee=function(e,t){if(!(b(e)&&ye in e))throw K("It is not a typed array constructor!");return new e(t)},Te=function(e,t){return Ce(N(e,e[ve]),t)},Ce=function(e,t){for(var n=0,r=t.length,o=Ee(e,r);r>n;)o[n]=t[n++];return o},je=function(e,t,n){F(e,t,{get:function(){return this._d[n]}})},Ae=function(e){var t,n,r,o,i,a,u=O(e),s=arguments.length,l=s>1?arguments[1]:void 0,f=void 0!==l,p=T(u);if(void 0!=p&&!w(p)){for(a=p.call(u),r=[],t=0;!(i=a.next()).done;t++)r.push(i.value);u=r}for(f&&s>2&&(l=c(l,arguments[2],2)),t=0,n=g(u.length),o=Ee(this,n);n>t;t++)o[t]=f?l(u[t],t):u[t];return o},Pe=function(){for(var e=0,t=arguments.length,n=Ee(this,t);t>e;)n[e]=arguments[e++];return n},Ne=!!W&&i(function(){de.call(new W(1))}),Me=function(){return de.apply(Ne?fe.call(ke(this)):ke(this),arguments)},Be={copyWithin:function(e,t){return U.call(ke(this),e,t,arguments.length>2?arguments[2]:void 0)},every:function(e){return $(ke(this),e,arguments.length>1?arguments[1]:void 0)},fill:function(e){return L.apply(ke(this),arguments)},filter:function(e){return Te(this,Y(ke(this),e,arguments.length>1?arguments[1]:void 0))},find:function(e){return Q(ke(this),e,arguments.length>1?arguments[1]:void 0)},findIndex:function(e){return ee(ke(this),e,arguments.length>1?arguments[1]:void 0)},forEach:function(e){Z(ke(this),e,arguments.length>1?arguments[1]:void 0)},indexOf:function(e){return ne(ke(this),e,arguments.length>1?arguments[1]:void 0)},includes:function(e){return te(ke(this),e,arguments.length>1?arguments[1]:void 0)},join:function(e){return ce.apply(ke(this),arguments)},lastIndexOf:function(e){return ae.apply(ke(this),arguments)},map:function(e){return be(ke(this),e,arguments.length>1?arguments[1]:void 0)},reduce:function(e){return ue.apply(ke(this),arguments)},reduceRight:function(e){return se.apply(ke(this),arguments)},reverse:function(){for(var e,t=ke(this).length,n=Math.floor(t/2),r=0;r<n;)e=this[r],this[r++]=this[--t],this[t]=e;return this},some:function(e){return J(ke(this),e,arguments.length>1?arguments[1]:void 0)},sort:function(e){return le.call(ke(this),e)},subarray:function(e,t){var n=ke(this),r=n.length,o=v(e,r);return new(N(n,n[ve]))(n.buffer,n.byteOffset+o*n.BYTES_PER_ELEMENT,g((void 0===t?r:v(t,r))-o))}},De=function(e,t){return Te(this,fe.call(ke(this),e,t))},ze=function(e){ke(this);var t=Se(arguments[1],1),n=this.length,r=O(e),o=g(r.length),i=0;if(o+t>n)throw G("Wrong length!");for(;i<o;)this[t+i]=r[i++]},Le={entries:function(){return ie.call(ke(this))},keys:function(){return oe.call(ke(this))},values:function(){return re.call(ke(this))}},Ue=function(e,t){return b(e)&&e[xe]&&"symbol"!=typeof t&&t in e&&String(+t)==String(t)},Ie=function(e,t){return Ue(e,t=_(t,!0))?f(2,e[t]):X(e,t)},Re=function(e,t,n){return!(Ue(e,t=_(t,!0))&&b(n)&&x(n,"value"))||x(n,"get")||x(n,"set")||n.configurable||x(n,"writable")&&!n.writable||x(n,"enumerable")&&!n.enumerable?F(e,t,n):(e[t]=n.value,e)};_e||(R.f=Ie,I.f=Re),a(a.S+a.F*!_e,"Object",{getOwnPropertyDescriptor:Ie,defineProperty:Re}),i(function(){pe.call({})})&&(pe=de=function(){return ce.call(this)});var Fe=d({},Be);d(Fe,Le),p(Fe,he,Le.values),d(Fe,{slice:De,set:ze,constructor:function(){},toString:pe,toLocaleString:Me}),je(Fe,"buffer","b"),je(Fe,"byteOffset","o"),je(Fe,"byteLength","l"),je(Fe,"length","e"),F(Fe,ge,{get:function(){return this[xe]}}),e.exports=function(e,t,n,s){var c=e+((s=!!s)?"Clamped":"")+"Array",f="get"+e,d="set"+e,h=o[c],v=h||{},_=h&&k(h),x=!h||!u.ABV,O={},w=h&&h.prototype,T=function(e,n){F(e,n,{get:function(){return function(e,n){var r=e._d;return r.v[f](n*t+r.o,Oe)}(this,n)},set:function(e){return function(e,n,r){var o=e._d;s&&(r=(r=Math.round(r))<0?0:r>255?255:255&r),o.v[d](n*t+o.o,r,Oe)}(this,n,e)},enumerable:!0})};x?(h=n(function(e,n,r,o){l(e,h,c,"_d");var i,a,u,s,f=0,d=0;if(b(n)){if(!(n instanceof q||"ArrayBuffer"==(s=m(n))||"SharedArrayBuffer"==s))return xe in n?Ce(h,n):Ae.call(h,n);i=n,d=Se(r,t);var v=n.byteLength;if(void 0===o){if(v%t)throw G("Wrong length!");if((a=v-d)<0)throw G("Wrong length!")}else if((a=g(o)*t)+d>v)throw G("Wrong length!");u=a/t}else u=y(n),i=new q(a=u*t);for(p(e,"_d",{b:i,o:d,l:a,e:u,v:new V(i)});f<u;)T(e,f++)}),w=h.prototype=S(Fe),p(w,"constructor",h)):i(function(){h(1)})&&i(function(){new h(-1)})&&D(function(e){new h,new h(null),new h(1.5),new h(e)},!0)||(h=n(function(e,n,r,o){var i;return l(e,h,c),b(n)?n instanceof q||"ArrayBuffer"==(i=m(n))||"SharedArrayBuffer"==i?void 0!==o?new v(n,Se(r,t),o):void 0!==r?new v(n,Se(r,t)):new v(n):xe in n?Ce(h,n):Ae.call(h,n):new v(y(n))}),Z(_!==Function.prototype?E(v).concat(E(_)):E(v),function(e){e in h||p(h,e,v[e])}),h.prototype=w,r||(w.constructor=h));var C=w[he],j=!!C&&("values"==C.name||void 0==C.name),A=Le.values;p(h,ye,!0),p(w,xe,c),p(w,me,!0),p(w,ve,h),(s?new h(1)[ge]==c:ge in w)||F(w,ge,{get:function(){return c}}),O[c]=h,a(a.G+a.W+a.F*(h!=v),O),a(a.S,c,{BYTES_PER_ELEMENT:t}),a(a.S+a.F*i(function(){v.of.call(h,1)}),c,{from:Ae,of:Pe}),"BYTES_PER_ELEMENT"in w||p(w,"BYTES_PER_ELEMENT",t),a(a.P,c,Be),z(c),a(a.P+a.F*we,c,{set:ze}),a(a.P+a.F*!j,c,Le),r||w.toString==pe||(w.toString=pe),a(a.P+a.F*i(function(){new h(1).slice()}),c,{slice:De}),a(a.P+a.F*(i(function(){return[1,2].toLocaleString()!=new h([1,2]).toLocaleString()})||!i(function(){w.toLocaleString.call([1,2])})),c,{toLocaleString:Me}),B[c]=j?C:A,r||j||p(w,he,A)}}else e.exports=function(){}},function(e,t,n){"use strict";n.d(t,"a",function(){return l});var r=n(0),o="Channel's Buffer overflow!",i=1,a=3,u=4,s={isEmpty:r.r,put:r.u,take:r.u};function c(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:10,t=arguments[1],n=new Array(e),r=0,s=0,c=0,l=function(t){n[s]=t,s=(s+1)%e,r++},f=function(){if(0!=r){var t=n[c];return n[c]=null,r--,c=(c+1)%e,t}},p=function(){for(var e=[];r;)e.push(f());return e};return{isEmpty:function(){return 0==r},put:function(f){if(r<e)l(f);else{var d=void 0;switch(t){case i:throw new Error(o);case a:n[s]=f,c=s=(s+1)%e;break;case u:d=2*e,n=p(),r=n.length,s=n.length,c=0,n.length=d,e=d,l(f)}}},take:f,flush:p}}var l={none:function(){return s},fixed:function(e){return c(e,i)},dropping:function(e){return c(e,2)},sliding:function(e){return c(e,a)},expanding:function(e){return c(e,u)}}},function(e,t,n){var r=n(8)("unscopables"),o=Array.prototype;void 0==o[r]&&n(20)(o,r,{}),e.exports=function(e){o[r][e]=!0}},function(e,t){e.exports=!1},function(e,t,n){var r=n(53)("meta"),o=n(7),i=n(24),a=n(12).f,u=0,s=Object.isExtensible||function(){return!0},c=!n(6)(function(){return s(Object.preventExtensions({}))}),l=function(e){a(e,r,{value:{i:"O"+ ++u,w:{}}})},f=e.exports={KEY:r,NEED:!1,fastKey:function(e,t){if(!o(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!i(e,r)){if(!s(e))return"F";if(!t)return"E";l(e)}return e[r].i},getWeak:function(e,t){if(!i(e,r)){if(!s(e))return!0;if(!t)return!1;l(e)}return e[r].w},onFreeze:function(e){return c&&f.NEED&&s(e)&&!i(e,r)&&l(e),e}}},function(e,t,n){"use strict";var r=n(0),o={done:!0,value:void 0},i={};function a(e){return r.q.channel(e)?"channel":Array.isArray(e)?String(e.map(function(e){return String(e)})):String(e)}function u(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"iterator",a=void 0,u=t;function s(t,n){if(u===i)return o;if(n)throw u=i,n;a&&a(t);var r=e[u](),s=r[0],c=r[1],l=r[2];return a=l,(u=s)===i?o:c}return Object(r.t)(s,function(e){return s(null,e)},n,!0)}var s=n(2),c=n(16);function l(e,t){for(var n=arguments.length,r=Array(n>2?n-2:0),o=2;o<n;o++)r[o-2]=arguments[o];var l={done:!1,value:Object(s.s)(e)},f=void 0,p=function(e){return f=e};return u({q1:function(){return["q2",l,p]},q2:function(){return f===c.a?[i]:["q1",(e=f,{done:!1,value:s.k.apply(void 0,[t].concat(r,[e]))})];var e}},"q1","takeEvery("+a(e)+", "+t.name+")")}function f(e,t){for(var n=arguments.length,r=Array(n>2?n-2:0),o=2;o<n;o++)r[o-2]=arguments[o];var l={done:!1,value:Object(s.s)(e)},f=function(e){return{done:!1,value:s.k.apply(void 0,[t].concat(r,[e]))}},p=void 0,d=void 0,h=function(e){return p=e},g=function(e){return d=e};return u({q1:function(){return["q2",l,g]},q2:function(){return d===c.a?[i]:p?["q3",function(e){return{done:!1,value:Object(s.f)(e)}}(p)]:["q1",f(d),h]},q3:function(){return["q1",f(d),h]}},"q1","takeLatest("+a(e)+", "+t.name+")")}var p=n(39);function d(e,t,n){for(var o=arguments.length,l=Array(o>3?o-3:0),f=3;f<o;f++)l[f-3]=arguments[f];var d=void 0,h=void 0,g={done:!1,value:Object(s.a)(t,p.a.sliding(1))},y={done:!1,value:Object(s.e)(r.m,e)},v=function(e){return d=e},_=function(e){return h=e};return u({q1:function(){return["q2",g,_]},q2:function(){return["q3",{done:!1,value:Object(s.s)(h)},v]},q3:function(){return d===c.a?[i]:["q4",(e=d,{done:!1,value:s.k.apply(void 0,[n].concat(l,[e]))})];var e},q4:function(){return["q2",y]}},"q1","throttle("+a(t)+", "+n.name+")")}n.d(t,"a",function(){return g}),n.d(t,"c",function(){return y}),n.d(t,"e",function(){return v}),n.d(t,"b",function(){return l}),n.d(t,"d",function(){return f}),n.d(t,"f",function(){return d});var h=function(e){return"import { "+e+" } from 'redux-saga' has been deprecated in favor of import { "+e+" } from 'redux-saga/effects'.\nThe latter will not work with yield*, as helper effects are wrapped automatically for you in fork effect.\nTherefore yield "+e+" will return task descriptor to your saga and execute next lines of code."},g=Object(r.n)(l,h("takeEvery")),y=Object(r.n)(f,h("takeLatest")),v=Object(r.n)(d,h("throttle"))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=t.SAGA_LAYOUT_CALL="SAGA_LAYOUT_CALL",o=t.SAGA_SOZAI_CALL="SAGA_SOZAI_CALL",i=t.SAGA_LINK_CALL="SAGA_LINK_CALL",a=t.SAGA_EDITONOFF_CHANGE="SAGA_EDITONOFF_CHANGE";t.Saga_Layout_Call=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:r,payload:{pattern:e.pattern}}},t.Saga_Sozai_Call=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:o,payload:{pattern:e.pattern}}},t.Saga_Link_Call=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:i,payload:{links:e.links}}},t.Saga_EditOnOff_Change=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:a,payload:{onoff:e.onoff}}}},function(e,t,n){var r=n(19);e.exports=function(e,t,n){for(var o in t)r(e,o,t[o],n);return e}},function(e,t,n){var r=n(28),o=n(172),i=n(104),a=n(3),u=n(11),s=n(102),c={},l={};(t=e.exports=function(e,t,n,f,p){var d,h,g,y,v=p?function(){return e}:s(e),_=r(n,f,t?2:1),x=0;if("function"!=typeof v)throw TypeError(e+" is not iterable!");if(i(v)){for(d=u(e.length);d>x;x++)if((y=t?_(a(h=e[x])[0],h[1]):_(e[x]))===c||y===l)return y}else for(g=v.call(e);!(h=g.next()).done;)if((y=o(g,_,h.value,t))===c||y===l)return y}).BREAK=c,t.RETURN=l},function(e,t){e.exports=function(e,t,n,r){if(!(e instanceof t)||void 0!==r&&r in e)throw TypeError(n+": incorrect invocation!");return e}},function(e,t,n){"use strict";var r=n(4),o=n(12),i=n(13),a=n(8)("species");e.exports=function(e){var t=r[e];i&&t&&!t[a]&&o.f(t,a,{configurable:!0,get:function(){return this}})}},function(e,t,n){var r=n(184),o=n(117).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return r(e,o)}},function(e,t,n){var r=n(3),o=n(183),i=n(117),a=n(118)("IE_PROTO"),u=function(){},s=function(){var e,t=n(120)("iframe"),r=i.length;for(t.style.display="none",n(116).appendChild(t),t.src="javascript:",(e=t.contentWindow.document).open(),e.write("<script>document.F=Object<\/script>"),e.close(),s=e.F;r--;)delete s.prototype[i[r]];return s()};e.exports=Object.create||function(e,t){var n;return null!==e?(u.prototype=r(e),n=new u,u.prototype=null,n[a]=e):n=s(),void 0===t?n:o(n,t)}},function(e,t,n){var r=n(32),o=Math.max,i=Math.min;e.exports=function(e,t){return(e=r(e))<0?o(e+t,0):i(e,t)}},function(e,t,n){var r=n(184),o=n(117);e.exports=Object.keys||function(e){return r(e,o)}},function(e,t){var n=0,r=Math.random();e.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++n+r).toString(36))}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return"string"==typeof e&&r.test(e)};var r=/-webkit-|-moz-|-ms-/;e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=t.SU_CONTEXTMENU_OPEN="SU_CONTEXTMENU_OPEN",o=t.SU_CONTEXTMENU_CLOSE="SU_CONTEXTMENU_CLOSE",i=t.SU_CONTEXTMENU_NEWBOXTEXT="SU_CONTEXTMENU_NEWBOXTEXT",a=t.SU_CONTEXTMENU_NEWBOXIMAGE="SU_CONTEXTMENU_NEWBOXIMAGE",u=t.SU_CONTEXTMENU_COPYBOXTEXTONGROUP="SU_CONTEXTMENU_COPYBOXTEXTONGROUP",s=t.SU_CONTEXTMENU_COPYBOXTEXT="SU_CONTEXTMENU_COPYBOXTEXT",c=t.SU_CONTEXTMENU_COPYBOXIMAGE="SU_CONTEXTMENU_COPYBOXIMGE",l=t.SU_CONTEXTMENU_SOZAIUNLINK="SU_CONTEXTMENU_SOZAIUNLINK",f=t.SU_CONTEXTMENU_BOXREMOVE="SU_CONTEXTMENU_BOXREMOVE",p=t.SU_CONTEXTMENU_BOXTOFRONT="SU_CONTEXTMENU_BOXTOFRONT",d=t.SU_CONTEXTMENU_BOXTOBACK="SU_CONTEXTMENU_BOXTOBACK";t.SU_ContextMenu_Open=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:r,payload:{x:e.x,y:e.y}}},t.SU_ContextMenu_Close=function(){arguments.length>0&&void 0!==arguments[0]&&arguments[0];return{type:o,payload:{}}},t.SU_ContextMenu_NewBoxText=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:i,payload:{cur_x:e.cur_x,cur_y:e.cur_y}}},t.SU_ContextMenu_NewBoxImage=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:a,payload:{cur_x:e.cur_x,cur_y:e.cur_y}}},t.SU_ContextMenu_CopyBoxTextOnGroup=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:u,payload:{cur_x:e.cur_x,cur_y:e.cur_y,box_id:e.box_id,group_id:e.group_id}}},t.SU_ContextMenu_CopyBoxText=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:s,payload:{cur_x:e.cur_x,cur_y:e.cur_y,box_id:e.box_id}}},t.SU_ContextMenu_CopyBoxImage=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:c,payload:{cur_x:e.cur_x,cur_y:e.cur_y,box_id:e.box_id}}},t.SU_ContextMenu_SozaiUnlink=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:l,payload:{group_id:e.group_id}}},t.SU_ContextMenu_BoxRemove=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:f,payload:{box_id:e.box_id}}},t.SU_ContextMenu_BoxToFront=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:p,payload:{box_id:e.box_id}}},t.SU_ContextMenu_BoxToBack=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:d,payload:{box_id:e.box_id}}}},function(e,t,n){var r=n(7);e.exports=function(e,t){if(!r(e)||e._t!==t)throw TypeError("Incompatible receiver, "+t+" required!");return e}},function(e,t){e.exports={}},function(e,t,n){var r=n(1),o=n(33),i=n(6),a=n(114),u="["+a+"]",s=RegExp("^"+u+u+"*"),c=RegExp(u+u+"*$"),l=function(e,t,n){var o={},u=i(function(){return!!a[e]()||"​"!="​"[e]()}),s=o[e]=u?t(f):a[e];n&&(o[n]=s),r(r.P+r.F*u,"String",o)},f=l.trim=function(e,t){return e=String(o(e)),1&t&&(e=e.replace(s,"")),2&t&&(e=e.replace(c,"")),e};e.exports=l},function(e,t,n){var r=n(12).f,o=n(24),i=n(8)("toStringTag");e.exports=function(e,t,n){e&&!o(e=n?e:e.prototype,i)&&r(e,i,{configurable:!0,value:t})}},function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";n.d(t,"a",function(){return a}),n.d(t,"c",function(){return u}),n.d(t,"b",function(){return c});var r=[],o=0;function i(e){try{u(),e()}finally{s()}}function a(e){r.push(e),o||(u(),c())}function u(){o++}function s(){o--}function c(){s();for(var e=void 0;!o&&void 0!==(e=r.shift());)i(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=t.SAGA_NAGASHIRESULT_CREATE="SAGA_NAGASHIRESULT_CREATE",o=t.SAGA_NAGASHI_IMAGE="SAGA_NAGASHI_IMAGE",i=t.SAGA_NAGASHI_REMOVE="SAGA_NAGASHI_REMOVE",a=t.SAGA_NAGASHIRESULT_AFURE="SAGA_NAGASHIRESULT_AFURE";t.Saga_NagashiResult_Create=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:r,payload:{box_id:e.box_id,nagashiResult:e.nagashiResult}}},t.Saga_Nagashi_Image=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:o,payload:{box_id:e.box_id,imageUrl:e.imageUrl}}},t.Saga_Nagashi_Remove=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:i,payload:{group_id:e.group_id}}},t.Saga_NagashiResult_Afure=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:a,payload:{group_id:e.group_id,afure:e.afure}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=t.SAGA_TOOLBOXSOZAI_SOZAI_UPDATE="SAGA_TOOLBOXSOZAI_SOZAI_UPDATE",o=t.SAGA_TOOLBOXSOZAI_SOZAI_DELETE="SAGA_TOOLBOXSOZAI_SOZAI_DELETE",i=t.SAGA_TOOLBOXSOZAI_SOZAI_CREATE="SAGA_TOOLBOXSOZAI_SOZAI_CREATE",a=t.SAGA_TOOLBOXSOZAI_SOZAI_SELECT="SAGA_TOOLBOXSOZAI_SOZAI_SELECT",u=t.SAGA_TOOLBOXSOZAI_SOZAI_TOGGLE="SAGA_TOOLBOXSOZAI_SOZAI_TOGGLE";t.Saga_ToolBoxSozai_Sozai_Update=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:r,payload:{sozai:e.sozai}}},t.Saga_ToolBoxSozai_Sozai_Delete=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:o,payload:{sozai_id:e.sozai_id}}},t.Saga_ToolBoxSozai_Sozai_Create=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:i,payload:{sozai_id:e.sozai_id,type:e.type,text:e.text,imageUrl:e.imageUrl}}},t.Saga_ToolBoxSozai_Sozai_Select=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:a,payload:{sozai_id:e.sozai_id}}},t.Saga_ToolBoxSozai_Sozai_Toggle=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:u,payload:{sozai_id:e.sozai_id}}}},function(e,t,n){var r=n(27),o=n(8)("toStringTag"),i="Arguments"==r(function(){return arguments}());e.exports=function(e){var t,n,a;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),o))?n:i?r(t):"Object"==(a=r(t))&&"function"==typeof t.callee?"Arguments":a}},function(e,t){t.f={}.propertyIsEnumerable},function(e,t,n){var r=n(27);e.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==r(e)?e.split(""):Object(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){return function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();t.nagashiExec=h,t.nagashiExecGroup=g,t.nagashiExecBox=y,t.nagashiExecSozai=v,t.nagashiExecAll=_;var o=n(36),i=n(63),a=n(142),u=n(35),s=n(92),c=regeneratorRuntime.mark(h),l=regeneratorRuntime.mark(g),f=regeneratorRuntime.mark(y),p=regeneratorRuntime.mark(v),d=regeneratorRuntime.mark(_);function h(e,t){var n,l,f,p,d,h,g,y,v,_,x,m,b,O,w,S,k,E,T,C,j;return regeneratorRuntime.wrap(function(c){for(;;)switch(c.prev=c.next){case 0:return c.next=2,(0,o.select)(function(e){return e.boxs});case 2:return n=c.sent,c.next=5,(0,o.select)(function(e){return e.sozai});case 5:l=c.sent,f=u.Box.getGroupNoAry(n,e),p=u.Box.getBoxId(n,e,f[0]),d=u.Box.getBox(n,p),h=s.Sozai.getSozai(l,t),g=!1,c.t0=d.type,c.next="text"===c.t0?14:"image"===c.t0?51:55;break;case 14:y=0,v=void 0,_=void 0,x=0;case 17:if(!(x<f.length)){c.next=41;break}if(m=u.Box.getBoxId(n,e,f[x]),b=u.Box.getBox(n,m),O=void 0,w=void 0,"tate"==b.text.kumihoko?(O=b.y2-b.y1,w=b.x2-b.x1):(O=b.x2-b.x1,w=b.y2-b.y1),S=a.Text.getNagashiCenterAry(h.mojiObjAry,y,O,w,b.text.padding_js,b.text.padding_je,b.text.padding_gs,b.text.padding_ge,b.text.size_j,b.text.size_g,b.text.gyokan),k=r(S,2),v=k[0],-1!=(_=k[1])){c.next=32;break}return E={box_id:m,nagashiResult:[]},c.next=30,(0,o.put)((0,i.Saga_NagashiResult_Create)(E));case 30:c.next=38;break;case 32:return T=a.Text.nagashiResult(v,h.mojiObjAry,y),C={box_id:m,nagashiResult:T},c.next=36,(0,o.put)((0,i.Saga_NagashiResult_Create)(C));case 36:(y=_+1)>h.mojiObjAry.length-1&&(g=!0);case 38:x++,c.next=17;break;case 41:if(0!=g){c.next=47;break}return c.next=44,(0,o.put)((0,i.Saga_NagashiResult_Afure)({group_id:e,afure:h.mojiObjAry.length-y}));case 44:console.log("文字が余った（溢れ）"),c.next=50;break;case 47:return c.next=49,(0,o.put)((0,i.Saga_NagashiResult_Afure)({group_id:e,afure:0}));case 49:console.log("最後まで流した");case 50:return c.abrupt("break",55);case 51:return j={box_id:d.box_id,imageUrl:h.imageUrl},c.next=54,(0,o.put)((0,i.Saga_Nagashi_Image)(j));case 54:return c.abrupt("break",55);case 55:case"end":return c.stop()}},c,this)}function g(e){var t,n,r;return regeneratorRuntime.wrap(function(i){for(;;)switch(i.prev=i.next){case 0:return i.next=2,(0,o.select)(function(e){return e.links});case 2:t=i.sent,n="",r=0;case 5:if(!(r<t.length)){i.next=12;break}if(t[r].group_id!=e){i.next=9;break}return n=t[r].sozai_id,i.abrupt("break",12);case 9:r++,i.next=5;break;case 12:if(""!=n){i.next=14;break}return i.abrupt("return");case 14:return i.next=16,(0,o.fork)(h,e,n);case 16:case"end":return i.stop()}},l,this)}function y(e){var t,n,i,a;return regeneratorRuntime.wrap(function(s){for(;;)switch(s.prev=s.next){case 0:return s.next=2,(0,o.select)(function(e){return e.boxs});case 2:return t=s.sent,n=u.Box.getGroupAndNo(t,e),i=r(n,2),a=i[0],i[1],s.next=6,(0,o.fork)(g,a);case 6:case"end":return s.stop()}},f,this)}function v(e){var t,n,r;return regeneratorRuntime.wrap(function(i){for(;;)switch(i.prev=i.next){case 0:return i.next=2,(0,o.select)(function(e){return e.links});case 2:t=i.sent,n="",r=0;case 5:if(!(r<t.length)){i.next=12;break}if(t[r].sozai_id!=e){i.next=9;break}return n=t[r].group_id,i.abrupt("break",12);case 9:r++,i.next=5;break;case 12:if(""!=n){i.next=14;break}return i.abrupt("return");case 14:return i.next=16,(0,o.fork)(h,n,e);case 16:case"end":return i.stop()}},p,this)}function _(){var e,t;return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,(0,o.select)(function(e){return e.links});case 2:e=n.sent,t=0;case 4:if(!(t<e.length)){n.next=10;break}return n.next=7,(0,o.fork)(h,e[t].group_id,e[t].sozai_id);case 7:t++,n.next=4;break;case 10:case"end":return n.stop()}},d,this)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=t.SAGA_TOOLBOXLINK_LINK_CREATE="SAGA_TOOLBOXLINK_LINK_CREATE",o=t.SAGA_TOOLBOXLINK_LINK_DELETE="SAGA_TOOLBOXLINK_LINK_DELETE";t.Saga_ToolBoxLink_Link_Create=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:r,payload:{group_id:e.group_id,sozai_id:e.sozai_id}}},t.Saga_ToolBoxLink_Link_Delete=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:o,payload:{group_id:e.group_id}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=t.SAGA_CONTEXTMENU_OPEN="SAGA_CONTEXTMENU_OPEN",o=t.SAGA_CONTEXTMENU_CLOSE="SAGA_CONTEXTMENU_CLOSE",i=t.SAGA_CONTEXTMENU_NEWBOXTEXT="SAGA_CONTEXTMENU_NEWBOXTEXT",a=t.SAGA_CONTEXTMENU_NEWBOXIMAGE="SAGA_CONTEXTMENU_NEWBOXIMAGE",u=t.SAGA_CONTEXTMENU_BOXTOFRONT="SAGA_CONTEXTMENU_BOXTOFRONT",s=t.SAGA_CONTEXTMENU_BOXTOBACK="SAGA_CONTEXTMENU_BOXTOBACK";t.Saga_ContextMenu_Open=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:r,payload:{x:e.x,y:e.y}}},t.Saga_ContextMenu_Close=function(){arguments.length>0&&void 0!==arguments[0]&&arguments[0];return{type:o,payload:{}}},t.Saga_ContextMenu_NewBoxText=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:i,payload:{box_id:e.box_id,group_id:e.group_id,group_no:e.group_no,type:e.type,x1:e.x1,y1:e.y1,x2:e.x2,y2:e.y2,text:{kumihoko:e.text.kumihoko,padding_js:e.text.padding_js,padding_je:e.text.padding_je,padding_gs:e.text.padding_gs,padding_ge:e.text.padding_ge,size_j:e.text.size_j,size_g:e.text.size_g,gyokan:e.text.gyokan,font:e.text.font}}}},t.Saga_ContextMenu_NewBoxImage=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:a,payload:{box_id:e.box_id,group_id:e.group_id,group_no:e.group_no,type:e.type,x1:e.x1,y1:e.y1,x2:e.x2,y2:e.y2,image:{url:e.image.url}}}},t.Saga_ContextMenu_BoxToFront=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:u,payload:{box_id:e.box_id}}},t.Saga_ContextMenu_BoxToBack=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:s,payload:{box_id:e.box_id}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=t.SAGA_SELECTBOX_BOX_NONSELECT="SAGA_SELECTBOX_BOX_NONSELECT",o=t.SAGA_SELECTBOX_BOX_SELECT="SAGA_SELECTBOX_BOX_SELECT",i=t.SAGA_SELECTBOX_EDITBOX_MOVEEND="SAGA_SELECTBOX_EDITBOX_MOVEEND",a=t.SAGA_SELECTBOX_EDITBOX_CHANGESIZE="SAGA_SELECTBOX_EDITBOX_CHANGESIZE";t.Saga_SelectBox_Box_NonSelect=function(){arguments.length>0&&void 0!==arguments[0]&&arguments[0];return{type:r,payload:{box_id:0,group_id:"",group_no:0,type:""}}},t.Saga_SelectBox_Box_Select=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:o,payload:{box_id:e.box_id,group_id:e.group_id,group_no:e.group_no,type:e.type}}},t.Saga_SelectBox_EditBox_MoveEnd=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:i,payload:{box_id:e.box_id,x1:e.x1,y1:e.y1,x2:e.x2,y2:e.y2}}},t.Saga_SelectBox_EditBox_ChangeSize=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:a,payload:{box_id:e.box_id,x1:e.x1,y1:e.y1,x2:e.x2,y2:e.y2}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=t.SU_TOOLBOXLINK_CREATEBUTTON_CLICK="SU_TOOLBOXLINK_CREATEBUTTON_CLICK",o=t.SU_TOOLBOXLINK_DELETEBUTTON_CLICK="SU_TOOLBOXLINK_DELETEBUTTON_CLICK";t.SU_ToolBoxLink_CreateButton_Click=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:r,payload:{group_id:e.group_id,sozai_id:e.sozai_id}}},t.SU_ToolBoxLink_DeleteButton_Click=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:o,payload:{group_id:e.group_id}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.String={toNumeric:function(e){if(""==e)return"";var t=parseInt(e,10);return isNaN(t)?"":t}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=t.SU_SELECTBOX_BOX_NONSELECT="SU_SELECTBOX_BOX_NONSELECT",o=t.SU_SELECTBOX_BOX_SELECT="SU_SELECTBOX_BOX_SELECT",i=t.SU_SELECTBOX_EDITBOX_MOVEEND="SU_SELECTBOX_EDITBOX_MOVEEND",a=t.SU_SELECTBOX_EDITBOX_CHANGESIZE="SU_SELECTBOX_EDITBOX_CHANGESIZE",u=t.SU_SELECTBOX_EDITBOX_DELETEKEYPRESS="SU_SELECTBOX_EDITBOX_DELETEKEYPRESS";t.SU_SelectBox_Box_NonSelect=function(){arguments.length>0&&void 0!==arguments[0]&&arguments[0];return{type:r,payload:{box_id:0,group_id:"",group_no:0,type:""}}},t.SU_SelectBox_Box_Select=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:o,payload:{box_id:e.box_id,group_id:e.group_id,group_no:e.group_no,type:e.type}}},t.SU_SelectBox_EditBox_MoveEnd=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:i,payload:{box_id:e.box_id,x1:e.x1,y1:e.y1,x2:e.x2,y2:e.y2}}},t.SU_SelectBox_EditBox_ChangeSize=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:a,payload:{box_id:e.box_id,x1:e.x1,y1:e.y1,x2:e.x2,y2:e.y2}}},t.SU_SelectBox_EditBox_DeleteKeyPress=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:u,payload:{group_id:e.group_id}}}},function(e,t,n){"use strict";var r=n(1),o=n(17),i=n(28),a=n(46);e.exports=function(e){r(r.S,e,{from:function(e){var t,n,r,u,s=arguments[1];return o(this),(t=void 0!==s)&&o(s),void 0==e?new this:(n=[],t?(r=0,u=i(s,arguments[2],2),a(e,!1,function(e){n.push(u(e,r++))})):a(e,!1,n.push,n),new this(n))}})}},function(e,t,n){"use strict";var r=n(1);e.exports=function(e){r(r.S,e,{of:function(){for(var e=arguments.length,t=new Array(e);e--;)t[e]=arguments[e];return new this(t)}})}},function(e,t,n){"use strict";e.exports=n(41)||!n(6)(function(){var e=Math.random();__defineSetter__.call(null,e,function(){}),delete n(4)[e]})},function(e,t,n){for(var r,o=n(4),i=n(20),a=n(53),u=a("typed_array"),s=a("view"),c=!(!o.ArrayBuffer||!o.DataView),l=c,f=0,p="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");f<9;)(r=o[p[f++]])?(i(r.prototype,u,!0),i(r.prototype,s,!0)):l=!1;e.exports={ABV:c,CONSTR:l,TYPED:u,VIEW:s}},function(e,t,n){"use strict";var r=n(4),o=n(1),i=n(19),a=n(45),u=n(42),s=n(46),c=n(47),l=n(7),f=n(6),p=n(84),d=n(60),h=n(113);e.exports=function(e,t,n,g,y,v){var _=r[e],x=_,m=y?"set":"add",b=x&&x.prototype,O={},w=function(e){var t=b[e];i(b,e,"delete"==e?function(e){return!(v&&!l(e))&&t.call(this,0===e?0:e)}:"has"==e?function(e){return!(v&&!l(e))&&t.call(this,0===e?0:e)}:"get"==e?function(e){return v&&!l(e)?void 0:t.call(this,0===e?0:e)}:"add"==e?function(e){return t.call(this,0===e?0:e),this}:function(e,n){return t.call(this,0===e?0:e,n),this})};if("function"==typeof x&&(v||b.forEach&&!f(function(){(new x).entries().next()}))){var S=new x,k=S[m](v?{}:-0,1)!=S,E=f(function(){S.has(1)}),T=p(function(e){new x(e)}),C=!v&&f(function(){for(var e=new x,t=5;t--;)e[m](t,t);return!e.has(-0)});T||((x=t(function(t,n){c(t,x,e);var r=h(new _,t,x);return void 0!=n&&s(n,y,r[m],r),r})).prototype=b,b.constructor=x),(E||C)&&(w("delete"),w("has"),y&&w("get")),(C||k)&&w(m),v&&b.clear&&delete b.clear}else x=g.getConstructor(t,e,y,m),a(x.prototype,n),u.NEED=!0;return d(x,e),O[e]=x,o(o.G+o.W+o.F*(x!=_),O),v||g.setStrong(x,e,y),x}},function(e,t,n){var r=n(4).navigator;e.exports=r&&r.userAgent||""},function(e,t,n){var r=n(3),o=n(17),i=n(8)("species");e.exports=function(e,t){var n,a=r(e).constructor;return void 0===a||void 0==(n=r(a)[i])?t:o(n)}},function(e,t,n){"use strict";var r=n(20),o=n(19),i=n(6),a=n(33),u=n(8);e.exports=function(e,t,n){var s=u(e),c=n(a,s,""[e]),l=c[0],f=c[1];i(function(){var t={};return t[s]=function(){return 7},7!=""[e](t)})&&(o(String.prototype,e,l),r(RegExp.prototype,s,2==t?function(e,t){return f.call(e,this,t)}:function(e){return f.call(e,this)}))}},function(e,t,n){"use strict";var r=n(3);e.exports=function(){var e=r(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t}},function(e,t,n){var r=n(8)("iterator"),o=!1;try{var i=[7][r]();i.return=function(){o=!0},Array.from(i,function(){throw 2})}catch(e){}e.exports=function(e,t){if(!t&&!o)return!1;var n=!1;try{var i=[7],a=i[r]();a.next=function(){return{done:n=!0}},i[r]=function(){return a},e(i)}catch(e){}return n}},function(e,t,n){var r=n(7),o=n(27),i=n(8)("match");e.exports=function(e){var t;return r(e)&&(void 0!==(t=e[i])?!!t:"RegExp"==o(e))}},function(e,t,n){var r=n(27);e.exports=Array.isArray||function(e){return"Array"==r(e)}},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t,n){var r=n(23),o=n(11),i=n(51);e.exports=function(e){return function(t,n,a){var u,s=r(t),c=o(s.length),l=i(a,c);if(e&&n!=n){for(;c>l;)if((u=s[l++])!=u)return!0}else for(;c>l;l++)if((e||l in s)&&s[l]===n)return e||l||0;return!e&&-1}}},function(e,t,n){var r=n(29),o=n(4),i=o["__core-js_shared__"]||(o["__core-js_shared__"]={});(e.exports=function(e,t){return i[e]||(i[e]=void 0!==t?t:{})})("versions",[]).push({version:r.version,mode:n(41)?"pure":"global",copyright:"© 2018 Denis Pushkarev (zloirock.ru)"})},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o,i,a,u){if(!e){var s;if(void 0===t)s=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,r,o,i,a,u],l=0;(s=new Error(t.replace(/%s/g,function(){return c[l++]}))).name="Invariant Violation"}throw s.framesToPop=1,s}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=t.SAGA_TOOLBOXBOXDATA_BOXDATA_UPDATE="SAGA_TOOLBOXBOXDATA_BOXDATA_UPDATE",o=t.SAGA_TOOLBOXBOXDATA_BOXDATA_DELETE="SAGA_TOOLBOXBOXDATA_BOXDATA_DELETE",i=t.SAGA_TOOLBOXBOXDATA_BOXDATA_CREATE="SAGA_TOOLBOXBOXDATA_BOXDATA_CREATE";t.Saga_ToolBoxBoxData_BoxData_Update=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:r,payload:{box:e.box}}},t.Saga_ToolBoxBoxData_BoxData_Delete=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:o,payload:{box_id:e.box_id}}},t.Saga_ToolBoxBoxData_BoxData_Create=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:i,payload:{box:e.box}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.Sozai={getSozai:function(e,t){for(var n="",r=0;r<e.length;r++)if(e[r].sozai_id==t){n=e[r];break}return n}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=t.SU_DANDD_MOUSEDOWN="SU_DANDD_MOUSEDOWN",o=t.SU_DANDD_MOUSEUP="SU_DANDD_MOUSEUP";t.SU_DAndD_MouseDown=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:r,payload:{x:e.x,y:e.y,type:e.type,value:e.value}}},t.SU_DAndD_MouseUp=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:o,payload:{type:e.type,value:e.value,x:e.x,y:e.y}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=t.SU_TOOLBOXBOXDATA_UPDATEBUTTON_CLICK="SU_TOOLBOXBOXDATA_UPDATEBUTTON_CLICK",o=t.SU_TOOLBOXBOXDATA_DELETEBUTTON_CLICK="SU_TOOLBOXBOXDATA_DELETEBUTTON_CLICK",i=t.SU_TOOLBOXBOXDATA_CREATEBUTTON_CLICK="SU_TOOLBOXBOXDATA_CREATEBUTTON_CLICK";t.SU_ToolBoxBoxData_UpdateButton_Click=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:r,payload:{box:e.box}}},t.SU_ToolBoxBoxData_DeleteButton_Click=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:o,payload:{box_id:e.box_id}}},t.SU_ToolBoxBoxData_CreateButton_Click=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:i,payload:{box:e.box}}}},function(e,t,n){"use strict";var r=n(4),o=n(13),i=n(41),a=n(78),u=n(20),s=n(45),c=n(6),l=n(47),f=n(32),p=n(11),d=n(160),h=n(49).f,g=n(12).f,y=n(100),v=n(60),_="prototype",x="Wrong index!",m=r.ArrayBuffer,b=r.DataView,O=r.Math,w=r.RangeError,S=r.Infinity,k=m,E=O.abs,T=O.pow,C=O.floor,j=O.log,A=O.LN2,P=o?"_b":"buffer",N=o?"_l":"byteLength",M=o?"_o":"byteOffset";function B(e,t,n){var r,o,i,a=new Array(n),u=8*n-t-1,s=(1<<u)-1,c=s>>1,l=23===t?T(2,-24)-T(2,-77):0,f=0,p=e<0||0===e&&1/e<0?1:0;for((e=E(e))!=e||e===S?(o=e!=e?1:0,r=s):(r=C(j(e)/A),e*(i=T(2,-r))<1&&(r--,i*=2),(e+=r+c>=1?l/i:l*T(2,1-c))*i>=2&&(r++,i/=2),r+c>=s?(o=0,r=s):r+c>=1?(o=(e*i-1)*T(2,t),r+=c):(o=e*T(2,c-1)*T(2,t),r=0));t>=8;a[f++]=255&o,o/=256,t-=8);for(r=r<<t|o,u+=t;u>0;a[f++]=255&r,r/=256,u-=8);return a[--f]|=128*p,a}function D(e,t,n){var r,o=8*n-t-1,i=(1<<o)-1,a=i>>1,u=o-7,s=n-1,c=e[s--],l=127&c;for(c>>=7;u>0;l=256*l+e[s],s--,u-=8);for(r=l&(1<<-u)-1,l>>=-u,u+=t;u>0;r=256*r+e[s],s--,u-=8);if(0===l)l=1-a;else{if(l===i)return r?NaN:c?-S:S;r+=T(2,t),l-=a}return(c?-1:1)*r*T(2,l-t)}function z(e){return e[3]<<24|e[2]<<16|e[1]<<8|e[0]}function L(e){return[255&e]}function U(e){return[255&e,e>>8&255]}function I(e){return[255&e,e>>8&255,e>>16&255,e>>24&255]}function R(e){return B(e,52,8)}function F(e){return B(e,23,4)}function X(e,t,n){g(e[_],t,{get:function(){return this[n]}})}function G(e,t,n,r){var o=d(+n);if(o+t>e[N])throw w(x);var i=e[P]._b,a=o+e[M],u=i.slice(a,a+t);return r?u:u.reverse()}function K(e,t,n,r,o,i){var a=d(+n);if(a+t>e[N])throw w(x);for(var u=e[P]._b,s=a+e[M],c=r(+o),l=0;l<t;l++)u[s+l]=c[i?l:t-l-1]}if(a.ABV){if(!c(function(){m(1)})||!c(function(){new m(-1)})||c(function(){return new m,new m(1.5),new m(NaN),"ArrayBuffer"!=m.name})){for(var W,H=(m=function(e){return l(this,m),new k(d(e))})[_]=k[_],q=h(k),V=0;q.length>V;)(W=q[V++])in m||u(m,W,k[W]);i||(H.constructor=m)}var Z=new b(new m(2)),Y=b[_].setInt8;Z.setInt8(0,2147483648),Z.setInt8(1,2147483649),!Z.getInt8(0)&&Z.getInt8(1)||s(b[_],{setInt8:function(e,t){Y.call(this,e,t<<24>>24)},setUint8:function(e,t){Y.call(this,e,t<<24>>24)}},!0)}else m=function(e){l(this,m,"ArrayBuffer");var t=d(e);this._b=y.call(new Array(t),0),this[N]=t},b=function(e,t,n){l(this,b,"DataView"),l(e,m,"DataView");var r=e[N],o=f(t);if(o<0||o>r)throw w("Wrong offset!");if(o+(n=void 0===n?r-o:p(n))>r)throw w("Wrong length!");this[P]=e,this[M]=o,this[N]=n},o&&(X(m,"byteLength","_l"),X(b,"buffer","_b"),X(b,"byteLength","_l"),X(b,"byteOffset","_o")),s(b[_],{getInt8:function(e){return G(this,1,e)[0]<<24>>24},getUint8:function(e){return G(this,1,e)[0]},getInt16:function(e){var t=G(this,2,e,arguments[1]);return(t[1]<<8|t[0])<<16>>16},getUint16:function(e){var t=G(this,2,e,arguments[1]);return t[1]<<8|t[0]},getInt32:function(e){return z(G(this,4,e,arguments[1]))},getUint32:function(e){return z(G(this,4,e,arguments[1]))>>>0},getFloat32:function(e){return D(G(this,4,e,arguments[1]),23,4)},getFloat64:function(e){return D(G(this,8,e,arguments[1]),52,8)},setInt8:function(e,t){K(this,1,e,L,t)},setUint8:function(e,t){K(this,1,e,L,t)},setInt16:function(e,t){K(this,2,e,U,t,arguments[2])},setUint16:function(e,t){K(this,2,e,U,t,arguments[2])},setInt32:function(e,t){K(this,4,e,I,t,arguments[2])},setUint32:function(e,t){K(this,4,e,I,t,arguments[2])},setFloat32:function(e,t){K(this,4,e,F,t,arguments[2])},setFloat64:function(e,t){K(this,8,e,R,t,arguments[2])}});v(m,"ArrayBuffer"),v(b,"DataView"),u(b[_],a.VIEW,!0),t.ArrayBuffer=m,t.DataView=b},function(e,t,n){"use strict";var r=n(17);e.exports.f=function(e){return new function(e){var t,n;this.promise=new e(function(e,r){if(void 0!==t||void 0!==n)throw TypeError("Bad Promise constructor");t=e,n=r}),this.resolve=r(t),this.reject=r(n)}(e)}},function(e,t,n){var r=n(4),o=n(98).set,i=r.MutationObserver||r.WebKitMutationObserver,a=r.process,u=r.Promise,s="process"==n(27)(a);e.exports=function(){var e,t,n,c=function(){var r,o;for(s&&(r=a.domain)&&r.exit();e;){o=e.fn,e=e.next;try{o()}catch(r){throw e?n():t=void 0,r}}t=void 0,r&&r.enter()};if(s)n=function(){a.nextTick(c)};else if(!i||r.navigator&&r.navigator.standalone)if(u&&u.resolve){var l=u.resolve(void 0);n=function(){l.then(c)}}else n=function(){o.call(r,c)};else{var f=!0,p=document.createTextNode("");new i(c).observe(p,{characterData:!0}),n=function(){p.data=f=!f}}return function(r){var o={fn:r,next:void 0};t&&(t.next=o),e||(e=o,n()),t=o}}},function(e,t,n){var r,o,i,a=n(28),u=n(179),s=n(116),c=n(120),l=n(4),f=l.process,p=l.setImmediate,d=l.clearImmediate,h=l.MessageChannel,g=l.Dispatch,y=0,v={},_=function(){var e=+this;if(v.hasOwnProperty(e)){var t=v[e];delete v[e],t()}},x=function(e){_.call(e.data)};p&&d||(p=function(e){for(var t=[],n=1;arguments.length>n;)t.push(arguments[n++]);return v[++y]=function(){u("function"==typeof e?e:Function(e),t)},r(y),y},d=function(e){delete v[e]},"process"==n(27)(f)?r=function(e){f.nextTick(a(_,e,1))}:g&&g.now?r=function(e){g.now(a(_,e,1))}:h?(i=(o=new h).port2,o.port1.onmessage=x,r=a(i.postMessage,i,1)):l.addEventListener&&"function"==typeof postMessage&&!l.importScripts?(r=function(e){l.postMessage(e+"","*")},l.addEventListener("message",x,!1)):r="onreadystatechange"in c("script")?function(e){s.appendChild(c("script")).onreadystatechange=function(){s.removeChild(this),_.call(e)}}:function(e){setTimeout(a(_,e,1),0)}),e.exports={set:p,clear:d}},function(e,t,n){"use strict";var r=n(40),o=n(169),i=n(58),a=n(23);e.exports=n(108)(Array,"Array",function(e,t){this._t=a(e),this._i=0,this._k=t},function(){var e=this._t,t=this._k,n=this._i++;return!e||n>=e.length?(this._t=void 0,o(1)):o(0,"keys"==t?n:"values"==t?e[n]:[n,e[n]])},"values"),i.Arguments=i.Array,r("keys"),r("values"),r("entries")},function(e,t,n){"use strict";var r=n(15),o=n(51),i=n(11);e.exports=function(e){for(var t=r(this),n=i(t.length),a=arguments.length,u=o(a>1?arguments[1]:void 0,n),s=a>2?arguments[2]:void 0,c=void 0===s?n:o(s,n);c>u;)t[u++]=e;return t}},function(e,t,n){var r=n(380);e.exports=function(e,t){return new(r(e))(t)}},function(e,t,n){var r=n(65),o=n(8)("iterator"),i=n(58);e.exports=n(29).getIteratorMethod=function(e){if(void 0!=e)return e[o]||e["@@iterator"]||i[r(e)]}},function(e,t,n){"use strict";var r=n(12),o=n(54);e.exports=function(e,t,n){t in e?r.f(e,t,o(0,n)):e[t]=n}},function(e,t,n){var r=n(58),o=n(8)("iterator"),i=Array.prototype;e.exports=function(e){return void 0!==e&&(r.Array===e||i[o]===e)}},function(e,t,n){var r=n(8)("match");e.exports=function(e){var t=/./;try{"/./"[e](t)}catch(n){try{return t[r]=!1,!"/./"[e](t)}catch(e){}}return!0}},function(e,t,n){var r=n(85),o=n(33);e.exports=function(e,t,n){if(r(t))throw TypeError("String#"+n+" doesn't accept regex!");return String(o(e))}},function(e,t,n){"use strict";var r=n(50),o=n(54),i=n(60),a={};n(20)(a,n(8)("iterator"),function(){return this}),e.exports=function(e,t,n){e.prototype=r(a,{next:o(1,n)}),i(e,t+" Iterator")}},function(e,t,n){"use strict";var r=n(41),o=n(1),i=n(19),a=n(20),u=n(58),s=n(107),c=n(60),l=n(21),f=n(8)("iterator"),p=!([].keys&&"next"in[].keys()),d=function(){return this};e.exports=function(e,t,n,h,g,y,v){s(n,t,h);var _,x,m,b=function(e){if(!p&&e in k)return k[e];switch(e){case"keys":case"values":return function(){return new n(this,e)}}return function(){return new n(this,e)}},O=t+" Iterator",w="values"==g,S=!1,k=e.prototype,E=k[f]||k["@@iterator"]||g&&k[g],T=E||b(g),C=g?w?b("entries"):T:void 0,j="Array"==t&&k.entries||E;if(j&&(m=l(j.call(new e)))!==Object.prototype&&m.next&&(c(m,O,!0),r||"function"==typeof m[f]||a(m,f,d)),w&&E&&"values"!==E.name&&(S=!0,T=function(){return E.call(this)}),r&&!v||!p&&!S&&k[f]||a(k,f,T),u[t]=T,u[O]=d,g)if(_={values:w?T:b("values"),keys:y?T:b("keys"),entries:C},v)for(x in _)x in k||i(k,x,_[x]);else o(o.P+o.F*(p||S),t,_);return _}},function(e,t,n){var r=n(32),o=n(33);e.exports=function(e){return function(t,n){var i,a,u=String(o(t)),s=r(n),c=u.length;return s<0||s>=c?e?"":void 0:(i=u.charCodeAt(s))<55296||i>56319||s+1===c||(a=u.charCodeAt(s+1))<56320||a>57343?e?u.charAt(s):i:e?u.slice(s,s+2):a-56320+(i-55296<<10)+65536}}},function(e,t){var n=Math.expm1;e.exports=!n||n(10)>22025.465794806718||n(10)<22025.465794806718||-2e-17!=n(-2e-17)?function(e){return 0==(e=+e)?e:e>-1e-6&&e<1e-6?e+e*e/2:Math.exp(e)-1}:n},function(e,t){e.exports=Math.sign||function(e){return 0==(e=+e)||e!=e?e:e<0?-1:1}},function(e,t,n){"use strict";var r=n(32),o=n(33);e.exports=function(e){var t=String(o(this)),n="",i=r(e);if(i<0||i==1/0)throw RangeError("Count can't be negative");for(;i>0;(i>>>=1)&&(t+=t))1&i&&(n+=t);return n}},function(e,t,n){var r=n(7),o=n(115).set;e.exports=function(e,t,n){var i,a=t.constructor;return a!==n&&"function"==typeof a&&(i=a.prototype)!==n.prototype&&r(i)&&o&&o(e,i),e}},function(e,t){e.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},function(e,t,n){var r=n(7),o=n(3),i=function(e,t){if(o(e),!r(t)&&null!==t)throw TypeError(t+": can't set as prototype!")};e.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(e,t,r){try{(r=n(28)(Function.call,n(22).f(Object.prototype,"__proto__").set,2))(e,[]),t=!(e instanceof Array)}catch(e){t=!0}return function(e,n){return i(e,n),t?e.__proto__=n:r(e,n),e}}({},!1):void 0),check:i}},function(e,t,n){var r=n(4).document;e.exports=r&&r.documentElement},function(e,t){e.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(e,t,n){var r=n(89)("keys"),o=n(53);e.exports=function(e){return r[e]||(r[e]=o(e))}},function(e,t,n){var r=n(4),o=n(29),i=n(41),a=n(185),u=n(12).f;e.exports=function(e){var t=o.Symbol||(o.Symbol=i?{}:r.Symbol||{});"_"==e.charAt(0)||e in t||u(t,e,{value:a.f(e)})}},function(e,t,n){var r=n(7),o=n(4).document,i=r(o)&&r(o.createElement);e.exports=function(e){return i?o.createElement(e):{}}},function(e,t,n){"use strict";function r(e){return function(){return e}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},e.exports=o},function(e,t,n){"use strict";var r=function(e){};e.exports=function(e,t,n,o,i,a,u,s){if(r(t),!e){var c;if(void 0===t)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,o,i,a,u,s],f=0;(c=new Error(t.replace(/%s/g,function(){return l[f++]}))).name="Invariant Violation"}throw c.framesToPop=1,c}}},function(e,t,n){"use strict";var r=n(226),o=[],i=[],a=r.makeRequestCallFromTimer(function(){if(i.length)throw i.shift()});function u(e){var t;(t=o.length?o.pop():new s).task=e,r(t)}function s(){this.task=null}e.exports=u,s.prototype.call=function(){try{this.task.call()}catch(e){u.onerror?u.onerror(e):(i.push(e),a())}finally{this.task=null,o[o.length]=this}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=e.prefixMap,n=e.plugins;return function e(u){for(var s in u){var c=u[s];if((0,a.default)(c))u[s]=e(c);else if(Array.isArray(c)){for(var l=[],f=0,p=c.length;f<p;++f){var d=(0,o.default)(n,s,c[f],u,t);(0,i.default)(l,d||c[f])}l.length>0&&(u[s]=l)}else{var h=(0,o.default)(n,s,c,u,t);h&&(u[s]=h),u=(0,r.default)(t,s,u)}}return u}};var r=u(n(230)),o=u(n(229)),i=u(n(228)),a=u(n(227));function u(e){return e&&e.__esModule?e:{default:e}}e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,a){if("string"==typeof t&&u.hasOwnProperty(e)){var c=function(e,t){if((0,o.default)(e))return e;for(var n=e.split(/,(?![^()]*(?:\([^()]*\))?\))/g),i=0,a=n.length;i<a;++i){var u=n[i],c=[u];for(var l in t){var f=(0,r.default)(l);if(u.indexOf(f)>-1&&"order"!==f)for(var p=t[l],d=0,h=p.length;d<h;++d)c.unshift(u.replace(f,s[p[d]]+f))}n[i]=c.join(",")}return n.join(",")}(t,a),l=c.split(/,(?![^()]*(?:\([^()]*\))?\))/g).filter(function(e){return!/-moz-|-ms-/.test(e)}).join(",");if(e.indexOf("Webkit")>-1)return l;var f=c.split(/,(?![^()]*(?:\([^()]*\))?\))/g).filter(function(e){return!/-webkit-|-ms-/.test(e)}).join(",");return e.indexOf("Moz")>-1?f:(n["Webkit"+(0,i.default)(e)]=l,n["Moz"+(0,i.default)(e)]=f,c)}};var r=a(n(232)),o=a(n(55)),i=a(n(152));function a(e){return e&&e.__esModule?e:{default:e}}var u={transition:!0,transitionProperty:!0,WebkitTransition:!0,WebkitTransitionProperty:!0,MozTransition:!0,MozTransitionProperty:!0},s={Webkit:"-webkit-",Moz:"-moz-",ms:"-ms-"};e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if(o.hasOwnProperty(e)&&i.hasOwnProperty(t))return r.map(function(e){return e+t})};var r=["-webkit-","-moz-",""],o={maxHeight:!0,maxWidth:!0,width:!0,height:!0,columnWidth:!0,minWidth:!0,minHeight:!0},i={"min-content":!0,"max-content":!0,"fill-available":!0,"fit-content":!0,"contain-floats":!0};e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("position"===e&&"sticky"===t)return["-webkit-sticky","sticky"]},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("string"==typeof t&&!(0,i.default)(t)&&t.indexOf("image-set(")>-1)return a.map(function(e){return t.replace(/image-set\(/g,e+"image-set(")})};var r,o=n(55),i=(r=o)&&r.__esModule?r:{default:r};var a=["-webkit-",""];e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("string"==typeof t&&!(0,i.default)(t)&&u.test(t))return a.map(function(e){return t.replace(u,function(t){return e+t})})};var r,o=n(55),i=(r=o)&&r.__esModule?r:{default:r};var a=["-webkit-","-moz-",""],u=/linear-gradient|radial-gradient|repeating-linear-gradient|repeating-radial-gradient/gi;e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){"flexDirection"===e&&"string"==typeof t&&(t.indexOf("column")>-1?n.WebkitBoxOrient="vertical":n.WebkitBoxOrient="horizontal",t.indexOf("reverse")>-1?n.WebkitBoxDirection="reverse":n.WebkitBoxDirection="normal");o.hasOwnProperty(e)&&(n[o[e]]=r[t]||t)};var r={"space-around":"justify","space-between":"justify","flex-start":"start","flex-end":"end","wrap-reverse":"multiple",wrap:"multiple",flex:"box","inline-flex":"inline-box"},o={alignItems:"WebkitBoxAlign",justifyContent:"WebkitBoxPack",flexWrap:"WebkitBoxLines",flexGrow:"WebkitBoxFlex"};e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){o.hasOwnProperty(e)&&(n[o[e]]=r[t]||t)};var r={"space-around":"distribute","space-between":"justify","flex-start":"start","flex-end":"end"},o={alignContent:"msFlexLinePack",alignSelf:"msFlexItemAlign",alignItems:"msFlexAlign",justifyContent:"msFlexPack",order:"msFlexOrder",flexGrow:"msFlexPositive",flexShrink:"msFlexNegative",flexBasis:"msFlexPreferredSize"};e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("display"===e&&r.hasOwnProperty(t))return r[t]};var r={flex:["-webkit-box","-moz-box","-ms-flexbox","-webkit-flex","flex"],"inline-flex":["-webkit-inline-box","-moz-inline-box","-ms-inline-flexbox","-webkit-inline-flex","inline-flex"]};e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("string"==typeof t&&!(0,i.default)(t)&&t.indexOf("filter(")>-1)return a.map(function(e){return t.replace(/filter\(/g,e+"filter(")})};var r,o=n(55),i=(r=o)&&r.__esModule?r:{default:r};var a=["-webkit-",""];e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("cursor"===e&&o.hasOwnProperty(t))return r.map(function(e){return e+t})};var r=["-webkit-","-moz-",""],o={"zoom-in":!0,"zoom-out":!0,grab:!0,grabbing:!0};e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("string"==typeof t&&!(0,i.default)(t)&&t.indexOf("cross-fade(")>-1)return a.map(function(e){return t.replace(/cross-fade\(/g,e+"cross-fade(")})};var r,o=n(55),i=(r=o)&&r.__esModule?r:{default:r};var a=["-webkit-",""];e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("string"==typeof t&&!(0,i.default)(t)&&t.indexOf("calc(")>-1)return a.map(function(e){return t.replace(/calc\(/g,e+"calc(")})};var r,o=n(55),i=(r=o)&&r.__esModule?r:{default:r};var a=["-webkit-","-moz-",""];e.exports=t.default},function(e,t,n){"use strict";e.exports=function(e){for(var t=5381,n=e.length;n;)t=33*t^e.charCodeAt(--n);return t>>>0}},function(e,t,n){"use strict";n.r(t),n.d(t,"createStore",function(){return s}),n.d(t,"combineReducers",function(){return l}),n.d(t,"bindActionCreators",function(){return p}),n.d(t,"applyMiddleware",function(){return h}),n.d(t,"compose",function(){return d}),n.d(t,"__DO_NOT_USE__ActionTypes",function(){return o});var r=n(139),o={INIT:"@@redux/INIT"+Math.random().toString(36).substring(7).split("").join("."),REPLACE:"@@redux/REPLACE"+Math.random().toString(36).substring(7).split("").join(".")},i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function u(e){if("object"!==(void 0===e?"undefined":i(e))||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function s(e,t,n){var a;if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(s)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var c=e,l=t,f=[],p=f,d=!1;function h(){p===f&&(p=f.slice())}function g(){if(d)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return l}function y(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(d)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");var t=!0;return h(),p.push(e),function(){if(t){if(d)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");t=!1,h();var n=p.indexOf(e);p.splice(n,1)}}}function v(e){if(!u(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(d)throw new Error("Reducers may not dispatch actions.");try{d=!0,l=c(l,e)}finally{d=!1}for(var t=f=p,n=0;n<t.length;n++){(0,t[n])()}return e}return v({type:o.INIT}),(a={dispatch:v,subscribe:y,getState:g,replaceReducer:function(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");c=e,v({type:o.REPLACE})}})[r.a]=function(){var e,t=y;return(e={subscribe:function(e){if("object"!==(void 0===e?"undefined":i(e))||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(g())}return n(),{unsubscribe:t(n)}}})[r.a]=function(){return this},e},a}function c(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function l(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var i=t[r];0,"function"==typeof e[i]&&(n[i]=e[i])}var a=Object.keys(n);var u=void 0;try{!function(e){Object.keys(e).forEach(function(t){var n=e[t];if(void 0===n(void 0,{type:o.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:"@@redux/PROBE_UNKNOWN_ACTION_"+Math.random().toString(36).substring(7).split("").join(".")}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+o.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')})}(n)}catch(e){u=e}return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments[1];if(u)throw u;for(var r=!1,o={},i=0;i<a.length;i++){var s=a[i],l=n[s],f=e[s],p=l(f,t);if(void 0===p){var d=c(s,t);throw new Error(d)}o[s]=p,r=r||p!==f}return r?o:e}}function f(e,t){return function(){return t(e.apply(this,arguments))}}function p(e,t){if("function"==typeof e)return f(e,t);if("object"!==(void 0===e?"undefined":i(e))||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":void 0===e?"undefined":i(e))+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');for(var n=Object.keys(e),r={},o=0;o<n.length;o++){var a=n[o],u=e[a];"function"==typeof u&&(r[a]=f(u,t))}return r}function d(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce(function(e,t){return function(){return e(t.apply(void 0,arguments))}})}function h(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var i=e.apply(void 0,r),u=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},s={getState:i.getState,dispatch:function(){return u.apply(void 0,arguments)}},c=t.map(function(e){return e(s)});return u=d.apply(void 0,c)(i.dispatch),a({},i,{dispatch:u})}}}},function(e,t,n){"use strict";(function(e,r){var o,i=n(190);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var a=Object(i.a)(o);t.a=a}).call(this,n(61),n(269)(e))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=t.Link={getSozaiId:function(e,t){for(var n="",r=0;r<e.length;r++)if(e[r].group_id==t){n=e[r].sozai_id;break}return n},getSozaiIdFromBoxId:function(e,t,n){for(var o=0,i=0,a=0;a<t.length;a++)if(t[a].box_id==n){i=t[a].group_id;break}return 0!=i&&(o=r.getSozaiId(e,i)),o},getGroupFromSozaiId:function(e,t){for(var n=0,r=0;r<e.length;r++)if(e[r].sozai_id==t){n=e[r].group_id;break}return n}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=t.SAGA_DANDD_MOUSEDOWN="SAGA_DANDD_MOUSEDOWN",o=t.SAGA_DANDD_MOUSEUP="SAGA_DANDD_MOUSEUP";t.Saga_DAndD_MouseDown=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:r,payload:{view:"true",x:e.x,y:e.y,type:e.type,value:e.value}}},t.Saga_DAndD_MouseUp=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:o,payload:{view:"false",type:e.type,value:e.value,x:e.x,y:e.y}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){return function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),o=t.Text={createMojiObjAry:function(e){for(var t=[],n=void 0,r=0;r<e.length;r++){var o=e.substr(r,1);n={moji:o,size_j:0,size_g:0,font:0},"★"===o&&(n.size_j=30,n.size_g=30),t.push(n)}return t},getJidumeMojiNagashiIndex:function(e,t,n,r,o,i){var a=0,u=void 0;a+=r;var s=void 0,c=void 0,l=0;for(s=t;s<e.length;s++){if(a+(u=0==e[s].size_j?i:e[s].size_j)>n-o){"\n"==e[s].moji&&(s==t||s++),l=0;break}if("\n"==e[s].moji){s++,l=1;break}a+=u}return s==t?c=-1:(s>=e.length&&(l=1),c=s-1),[c,l]},getJidumeAry:function(e,t,n,r,o,i,a){for(var u=r-(o+i),s=0,c=t;c<=n;c++)"\n"!=e[c].moji&&s++;for(var l=0,f=void 0,p=t;p<=n;p++)f=0==e[p].size_j?a:e[p].size_j,"\n"!=e[p].moji&&(l+=f);var d=(u-l)/(s-1),h=[],g=0;g+=o;for(var y=t;y<=n;y++)"\n"!=e[y].moji?(f=0==e[y].size_j?a:e[y].size_j,h.push(g+f/2),g+=f,g+=d):h.push(0);return h},getJidumeArySoroeNashi:function(e,t,n,r,o){for(var i=t;i<=n;i++)"\n"!=e[i].moji&&0;var a=[],u=0;u+=r;for(var s=t;s<=n;s++)if("\n"!=e[s].moji){var c=void 0;c=0==e[s].size_j?o:e[s].size_j,a.push(u+c/2),u+=c}else a.push(0);return a},getZenGyoIndexAry:function(e,t,n,i,a,u){var s=[],c={};if(e.length<=0)return s;for(;;){var l=o.getJidumeMojiNagashiIndex(e,t,n,i,a,u),f=r(l,2),p=f[0],d=f[1];if(-1==p)break;if(c={s:t,e:p,normalgyo:d},s.push(c),p>=e.length-1)break;t=p+1}return s},maxSizeGyoOkuri:function(e,t,n,r){for(var o=0,i=void 0,a=t;a<=n;a++)o<(i=0==e[a].size_g?r:e[a].size_g)&&(o=i);return o},getGyookuriAry:function(e,t,n,r,i,a,u,s,c,l,f){var p=[],d=0,h=o.getZenGyoIndexAry(e,t,n,i,a,c),g=0;g+=u;for(var y=0;y<h.length&&!(g+(d=o.maxSizeGyoOkuri(e,h[y].s,h[y].e,l))>r-s);y++)p.push(g+d/2),g+=d,g+=f;return p},getNagashiCenterAry:function(e,t,n,r,i,a,u,s,c,l,f){var p=[],d=o.getZenGyoIndexAry(e,t,n,i,a,c),h=o.getGyookuriAry(e,t,n,r,i,a,u,s,c,l,f),g=void 0,y=d.length,v=h.length,_=0;_=y<v?y:v;var x=void 0,m=void 0;for(x=0;x<_;x++)for(g=0==d[x].normalgyo?o.getJidumeAry(e,d[x].s,d[x].e,n,i,a,c):o.getJidumeArySoroeNashi(e,d[x].s,d[x].e,i,c),m=0;m<g.length;m++)p.push([g[m],h[x]]);return[p,x<=0?-1:d[x-1].e]},nagashiResult:function(e,t,n){for(var r=[],o={},i=n,a=0;a<e.length;a++)o={moji:t[i].moji,size_j:t[i].size_j,size_g:t[i].size_g,j:e[a][0],g:e[a][1]},r.push(o),i++;return r}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=t.SAGA_TOOLBOX_MOVEEND="SAGA_TOOLBOX_MOVEEND";t.Saga_ToolBox_MoveEnd=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:r,payload:{toolbox_id:e.toolbox_id,x:e.x,y:e.y}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=t.SAGA_TOOLBOXTEXTDATA_TEXTDATA_UPDATE="SAGA_TOOLBOXTEXTDATA_TEXTDATA_UPDATE";t.Saga_ToolBoxTextData_TextData_Update=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:r,payload:{box:e.box}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=t.TextGrid={getTextGridAry:function(e,t,n,o,i,a,u,s,c){for(var l=[],f=r.getGyookuriGridAry(t,i,a,c,s),p=r.getJidumeGridAry(e,n,o,u),d=0;d<f.length;d++)for(var h=0;h<p.length;h++)l.push([p[h],f[d]]);return l},getJidumeGridAry:function(e,t,n,r){var o=e-(t+n),i=Math.floor(o/r),a=o%r/(i-1),u=[],s=0;s+=t;for(var c=0;c<i;c++)u.push(s+r/2),s+=r,s+=a;return u},getGyookuriGridAry:function(e,t,n,r,o){var i=[],a=0;for(a+=t;!(a+o>e-n);)i.push(a+o/2),a+=o+r;return i}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=t.SAGA_SCALE_CHANGE="SAGA_SCALE_CHANGE";t.Saga_Scale_Change=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:r,payload:{scale:e.scale}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=t.SU_TOOLBOXPRESEN_LAYOUTCALLBUTTON_CLICK="SU_TOOLBOXPRESEN_LAYOUTCALLBUTTON_CLICK",o=t.SU_TOOLBOXPRESEN_SOZAICALLBUTTON_CLICK="SU_TOOLBOXPRESEN_SOZAICALLBUTTON_CLICK",i=t.SU_TOOLBOXPRESEN_LINKCALLBUTTON_CLICK="SU_TOOLBOXPRESEN_LINKCALLBUTTON_CLICK",a=t.SU_TOOLBOXPRESEN_EDITONOFFBUTTON_CLICK="SU_TOOLBOXPRESEN_EDITONOFFBUTTON_CLICK";t.SU_ToolBoxPresen_LayoutCallButton_Click=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:r,payload:{pattern:e.pattern}}},t.SU_ToolBoxPresen_SozaiCallButton_Click=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:o,payload:{pattern:e.pattern}}},t.SU_ToolBoxPresen_LinkCallButton_Click=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:i,payload:{pattern:e.pattern}}},t.SU_ToolBoxPresen_EditOnOffButton_Click=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:a,payload:{onoff:e.onoff}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=t.SU_TOOLBOXSOZAI_UPDATEBUTTON_CLICK="SU_TOOLBOXSOZAI_UPDATEBUTTON_CLICK",o=t.SU_TOOLBOXSOZAI_DELETEBUTTON_CLICK="SU_TOOLBOXSOZAI_DELETEBUTTON_CLICK",i=t.SU_TOOLBOXSOZAI_CREATEBUTTON_CLICK="SU_TOOLBOXSOZAI_CREATEBUTTON_CLICK",a=t.SU_TOOLBOXSOZAI_SOZAI_SELECT="SU_TOOLBOXSOZAI_SOZAI_SELECT",u=t.SU_TOOLBOXSOZAI_SOZAI_TOGGLE="SU_TOOLBOXSOZAI_SOZAI_TOGGLE";t.SU_ToolBoxSozai_UpdateButton_Click=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:r,payload:{sozai:e.sozai}}},t.SU_ToolBoxSozai_DeleteButton_Click=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:o,payload:{sozai_id:e.sozai_id}}},t.SU_ToolBoxSozai_CreateButton_Click=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:i,payload:{sozai_id:e.sozai_id,type:e.type,text:e.text,imageUrl:e.imageUrl}}},t.SU_ToolBoxSozai_Sozai_Select=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:a,payload:{sozai_id:e.sozai_id}}},t.SU_ToolBoxSozai_Sozai_Toggle=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:u,payload:{sozai_id:e.sozai_id}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=t.SU_TOOLBOXTEXTDATA_UPDATEBUTTON_CLICK="SU_TOOLBOXTEXTDATA_UPDATEBUTTON_CLICK";t.SU_ToolBoxTextData_UpdateButton_Click=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:r,payload:{box:e.box}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=t.SU_TOOLBOXSCALE_MINBUTTON_CLICK="SU_TOOLBOXSCALE_MINBUTTON_CLICK",o=t.SU_TOOLBOXSCALE_MAXBUTTON_CLICK="SU_TOOLBOXSCALE_MAXBUTTON_CLICK",i=t.SU_TOOLBOXSCALE_100PERBUTTON_CLICK="SU_TOOLBOXSCALE_100PERBUTTON_CLICK";t.SU_ToolBoxScale_MinButton_Click=function(){arguments.length>0&&void 0!==arguments[0]&&arguments[0];return{type:r,payload:{}}},t.SU_ToolBoxScale_MaxButton_Click=function(){arguments.length>0&&void 0!==arguments[0]&&arguments[0];return{type:o,payload:{}}},t.SU_ToolBoxScale_100PerButton_Click=function(){arguments.length>0&&void 0!==arguments[0]&&arguments[0];return{type:i,payload:{}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=t.SU_TOOLBOX_MOVEEND="SU_TOOLBOX_MOVEEND";t.SU_ToolBox_MoveEnd=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:r,payload:{toolbox_id:e.toolbox_id,x:e.x,y:e.y}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return e.charAt(0).toUpperCase()+e.slice(1)},e.exports=t.default},function(e,t){e.exports=Math.scale||function(e,t,n,r,o){return 0===arguments.length||e!=e||t!=t||n!=n||r!=r||o!=o?NaN:e===1/0||e===-1/0?e:(e-t)*(o-r)/(n-t)+r}},function(e,t,n){var r=n(46);e.exports=function(e,t){var n=[];return r(e,!1,n.push,n,t),n}},function(e,t,n){var r=n(65),o=n(154);e.exports=function(e){return function(){if(r(this)!=e)throw TypeError(e+"#toJSON isn't generic");return o(this)}}},function(e,t,n){var r=n(52),o=n(23),i=n(66).f;e.exports=function(e){return function(t){for(var n,a=o(t),u=r(a),s=u.length,c=0,l=[];s>c;)i.call(a,n=u[c++])&&l.push(e?[n,a[n]]:a[n]);return l}}},function(e,t,n){var r=n(11),o=n(112),i=n(33);e.exports=function(e,t,n,a){var u=String(i(e)),s=u.length,c=void 0===n?" ":String(n),l=r(t);if(l<=s||""==c)return u;var f=l-s,p=o.call(c,Math.ceil(f/c.length));return p.length>f&&(p=p.slice(0,f)),a?p+u:u+p}},function(e,t,n){"use strict";var r=n(86),o=n(7),i=n(11),a=n(28),u=n(8)("isConcatSpreadable");e.exports=function e(t,n,s,c,l,f,p,d){for(var h,g,y=l,v=0,_=!!p&&a(p,d,3);v<c;){if(v in s){if(h=_?_(s[v],v,n):s[v],g=!1,o(h)&&(g=void 0!==(g=h[u])?!!g:r(h)),g&&f>0)y=e(t,n,h,i(h.length),y,f-1)-1;else{if(y>=9007199254740991)throw TypeError();t[y]=h}y++}v++}return y}},function(e,t,n){var r=n(49),o=n(87),i=n(3),a=n(4).Reflect;e.exports=a&&a.ownKeys||function(e){var t=r.f(i(e)),n=o.f;return n?t.concat(n(e)):t}},function(e,t,n){var r=n(32),o=n(11);e.exports=function(e){if(void 0===e)return 0;var t=r(e),n=o(t);if(t!==n)throw RangeError("Wrong length!");return n}},function(e,t,n){"use strict";var r=n(45),o=n(42).getWeak,i=n(3),a=n(7),u=n(47),s=n(46),c=n(30),l=n(24),f=n(57),p=c(5),d=c(6),h=0,g=function(e){return e._l||(e._l=new y)},y=function(){this.a=[]},v=function(e,t){return p(e.a,function(e){return e[0]===t})};y.prototype={get:function(e){var t=v(this,e);if(t)return t[1]},has:function(e){return!!v(this,e)},set:function(e,t){var n=v(this,e);n?n[1]=t:this.a.push([e,t])},delete:function(e){var t=d(this.a,function(t){return t[0]===e});return~t&&this.a.splice(t,1),!!~t}},e.exports={getConstructor:function(e,t,n,i){var c=e(function(e,r){u(e,c,t,"_i"),e._t=t,e._i=h++,e._l=void 0,void 0!=r&&s(r,n,e[i],e)});return r(c.prototype,{delete:function(e){if(!a(e))return!1;var n=o(e);return!0===n?g(f(this,t)).delete(e):n&&l(n,this._i)&&delete n[this._i]},has:function(e){if(!a(e))return!1;var n=o(e);return!0===n?g(f(this,t)).has(e):n&&l(n,this._i)}}),c},def:function(e,t,n){var r=o(i(t),!0);return!0===r?g(e).set(t,n):r[e._i]=n,e},ufstore:g}},function(e,t,n){"use strict";var r,o=n(30)(0),i=n(19),a=n(42),u=n(181),s=n(161),c=n(7),l=n(6),f=n(57),p=a.getWeak,d=Object.isExtensible,h=s.ufstore,g={},y=function(e){return function(){return e(this,arguments.length>0?arguments[0]:void 0)}},v={get:function(e){if(c(e)){var t=p(e);return!0===t?h(f(this,"WeakMap")).get(e):t?t[this._i]:void 0}},set:function(e,t){return s.def(f(this,"WeakMap"),e,t)}},_=e.exports=n(79)("WeakMap",y,v,s,!0,!0);l(function(){return 7!=(new _).set((Object.freeze||Object)(g),7).get(g)})&&(u((r=s.getConstructor(y,"WeakMap")).prototype,v),a.NEED=!0,o(["delete","has","get","set"],function(e){var t=_.prototype,n=t[e];i(t,e,function(t,o){if(c(t)&&!d(t)){this._f||(this._f=new r);var i=this._f[e](t,o);return"set"==e?this:i}return n.call(this,t,o)})}))},function(e,t,n){"use strict";var r=n(164),o=n(57);e.exports=n(79)("Set",function(e){return function(){return e(this,arguments.length>0?arguments[0]:void 0)}},{add:function(e){return r.def(o(this,"Set"),e=0===e?0:e,e)}},r)},function(e,t,n){"use strict";var r=n(12).f,o=n(50),i=n(45),a=n(28),u=n(47),s=n(46),c=n(108),l=n(169),f=n(48),p=n(13),d=n(42).fastKey,h=n(57),g=p?"_s":"size",y=function(e,t){var n,r=d(t);if("F"!==r)return e._i[r];for(n=e._f;n;n=n.n)if(n.k==t)return n};e.exports={getConstructor:function(e,t,n,c){var l=e(function(e,r){u(e,l,t,"_i"),e._t=t,e._i=o(null),e._f=void 0,e._l=void 0,e[g]=0,void 0!=r&&s(r,n,e[c],e)});return i(l.prototype,{clear:function(){for(var e=h(this,t),n=e._i,r=e._f;r;r=r.n)r.r=!0,r.p&&(r.p=r.p.n=void 0),delete n[r.i];e._f=e._l=void 0,e[g]=0},delete:function(e){var n=h(this,t),r=y(n,e);if(r){var o=r.n,i=r.p;delete n._i[r.i],r.r=!0,i&&(i.n=o),o&&(o.p=i),n._f==r&&(n._f=o),n._l==r&&(n._l=i),n[g]--}return!!r},forEach:function(e){h(this,t);for(var n,r=a(e,arguments.length>1?arguments[1]:void 0,3);n=n?n.n:this._f;)for(r(n.v,n.k,this);n&&n.r;)n=n.p},has:function(e){return!!y(h(this,t),e)}}),p&&r(l.prototype,"size",{get:function(){return h(this,t)[g]}}),l},def:function(e,t,n){var r,o,i=y(e,t);return i?i.v=n:(e._l=i={i:o=d(t,!0),k:t,v:n,p:r=e._l,n:void 0,r:!1},e._f||(e._f=i),r&&(r.n=i),e[g]++,"F"!==o&&(e._i[o]=i)),e},getEntry:y,setStrong:function(e,t,n){c(e,t,function(e,n){this._t=h(e,t),this._k=n,this._l=void 0},function(){for(var e=this._k,t=this._l;t&&t.r;)t=t.p;return this._t&&(this._l=t=t?t.n:this._t._f)?l(0,"keys"==e?t.k:"values"==e?t.v:[t.k,t.v]):(this._t=void 0,l(1))},n?"entries":"values",!n,!0),f(t)}}},function(e,t,n){"use strict";var r=n(164),o=n(57);e.exports=n(79)("Map",function(e){return function(){return e(this,arguments.length>0?arguments[0]:void 0)}},{get:function(e){var t=r.getEntry(o(this,"Map"),e);return t&&t.v},set:function(e,t){return r.def(o(this,"Map"),0===e?0:e,t)}},r,!0)},function(e,t,n){var r=n(3),o=n(7),i=n(96);e.exports=function(e,t){if(r(e),o(t)&&t.constructor===e)return t;var n=i.f(e);return(0,n.resolve)(t),n.promise}},function(e,t){e.exports=function(e){try{return{e:!1,v:e()}}catch(e){return{e:!0,v:e}}}},function(e,t,n){n(13)&&"g"!=/./g.flags&&n(12).f(RegExp.prototype,"flags",{configurable:!0,get:n(83)})},function(e,t){e.exports=function(e,t){return{value:t,done:!!e}}},function(e,t,n){"use strict";var r=n(15),o=n(51),i=n(11);e.exports=[].copyWithin||function(e,t){var n=r(this),a=i(n.length),u=o(e,a),s=o(t,a),c=arguments.length>2?arguments[2]:void 0,l=Math.min((void 0===c?a:o(c,a))-s,a-u),f=1;for(s<u&&u<s+l&&(f=-1,s+=l-1,u+=l-1);l-- >0;)s in n?n[u]=n[s]:delete n[u],u+=f,s+=f;return n}},function(e,t,n){var r=n(17),o=n(15),i=n(67),a=n(11);e.exports=function(e,t,n,u,s){r(t);var c=o(e),l=i(c),f=a(c.length),p=s?f-1:0,d=s?-1:1;if(n<2)for(;;){if(p in l){u=l[p],p+=d;break}if(p+=d,s?p<0:f<=p)throw TypeError("Reduce of empty array with no initial value")}for(;s?p>=0:f>p;p+=d)p in l&&(u=t(u,l[p],p,c));return u}},function(e,t,n){var r=n(3);e.exports=function(e,t,n,o){try{return o?t(r(n)[0],n[1]):t(n)}catch(t){var i=e.return;throw void 0!==i&&r(i.call(e)),t}}},function(e,t,n){var r=n(111),o=Math.pow,i=o(2,-52),a=o(2,-23),u=o(2,127)*(2-a),s=o(2,-126);e.exports=Math.fround||function(e){var t,n,o=Math.abs(e),c=r(e);return o<s?c*(o/s/a+1/i-1/i)*s*a:(n=(t=(1+a/i)*o)-(t-o))>u||n!=n?c*(1/0):c*n}},function(e,t){e.exports=Math.log1p||function(e){return(e=+e)>-1e-8&&e<1e-8?e-e*e/2:Math.log(1+e)}},function(e,t,n){var r=n(7),o=Math.floor;e.exports=function(e){return!r(e)&&isFinite(e)&&o(e)===e}},function(e,t,n){var r=n(27);e.exports=function(e,t){if("number"!=typeof e&&"Number"!=r(e))throw TypeError(t);return+e}},function(e,t,n){var r=n(4).parseFloat,o=n(59).trim;e.exports=1/r(n(114)+"-0")!=-1/0?function(e){var t=o(String(e),3),n=r(t);return 0===n&&"-"==t.charAt(0)?-0:n}:r},function(e,t,n){var r=n(4).parseInt,o=n(59).trim,i=n(114),a=/^[-+]?0[xX]/;e.exports=8!==r(i+"08")||22!==r(i+"0x16")?function(e,t){var n=o(String(e),3);return r(n,t>>>0||(a.test(n)?16:10))}:r},function(e,t){e.exports=function(e,t,n){var r=void 0===n;switch(t.length){case 0:return r?e():e.call(n);case 1:return r?e(t[0]):e.call(n,t[0]);case 2:return r?e(t[0],t[1]):e.call(n,t[0],t[1]);case 3:return r?e(t[0],t[1],t[2]):e.call(n,t[0],t[1],t[2]);case 4:return r?e(t[0],t[1],t[2],t[3]):e.call(n,t[0],t[1],t[2],t[3])}return e.apply(n,t)}},function(e,t,n){"use strict";var r=n(17),o=n(7),i=n(179),a=[].slice,u={};e.exports=Function.bind||function(e){var t=r(this),n=a.call(arguments,1),s=function(){var r=n.concat(a.call(arguments));return this instanceof s?function(e,t,n){if(!(t in u)){for(var r=[],o=0;o<t;o++)r[o]="a["+o+"]";u[t]=Function("F,a","return new F("+r.join(",")+")")}return u[t](e,n)}(t,r.length,r):i(t,r,e)};return o(t.prototype)&&(s.prototype=t.prototype),s}},function(e,t,n){"use strict";var r=n(52),o=n(87),i=n(66),a=n(15),u=n(67),s=Object.assign;e.exports=!s||n(6)(function(){var e={},t={},n=Symbol(),r="abcdefghijklmnopqrst";return e[n]=7,r.split("").forEach(function(e){t[e]=e}),7!=s({},e)[n]||Object.keys(s({},t)).join("")!=r})?function(e,t){for(var n=a(e),s=arguments.length,c=1,l=o.f,f=i.f;s>c;)for(var p,d=u(arguments[c++]),h=l?r(d).concat(l(d)):r(d),g=h.length,y=0;g>y;)f.call(d,p=h[y++])&&(n[p]=d[p]);return n}:s},function(e,t,n){var r=n(23),o=n(49).f,i={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return a&&"[object Window]"==i.call(e)?function(e){try{return o(e)}catch(e){return a.slice()}}(e):o(r(e))}},function(e,t,n){var r=n(12),o=n(3),i=n(52);e.exports=n(13)?Object.defineProperties:function(e,t){o(e);for(var n,a=i(t),u=a.length,s=0;u>s;)r.f(e,n=a[s++],t[n]);return e}},function(e,t,n){var r=n(24),o=n(23),i=n(88)(!1),a=n(118)("IE_PROTO");e.exports=function(e,t){var n,u=o(e),s=0,c=[];for(n in u)n!=a&&r(u,n)&&c.push(n);for(;t.length>s;)r(u,n=t[s++])&&(~i(c,n)||c.push(n));return c}},function(e,t,n){t.f=n(8)},function(e,t,n){e.exports=!n(13)&&!n(6)(function(){return 7!=Object.defineProperty(n(120)("div"),"a",{get:function(){return 7}}).a})},function(e,t,n){"use strict";e.exports={}},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,a,u=function(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),s=1;s<arguments.length;s++){for(var c in n=Object(arguments[s]))o.call(n,c)&&(u[c]=n[c]);if(r){a=r(n);for(var l=0;l<a.length;l++)i.call(n,a[l])&&(u[a[l]]=n[a[l]])}}return u}},function(e,t,n){e.exports=function(){"use strict";var e={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},t={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},n=Object.defineProperty,r=Object.getOwnPropertyNames,o=Object.getOwnPropertySymbols,i=Object.getOwnPropertyDescriptor,a=Object.getPrototypeOf,u=a&&a(Object);return function s(c,l,f){if("string"!=typeof l){if(u){var p=a(l);p&&p!==u&&s(c,p,f)}var d=r(l);o&&(d=d.concat(o(l)));for(var h=0;h<d.length;++h){var g=d[h];if(!(e[g]||t[g]||f&&f[g])){var y=i(l,g);try{n(c,g,y)}catch(e){}}}return c}return c}}()},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";n.r(t);var r=n(137),o=n.n(r),i=n(136),a=n.n(i),u=n(135),s=n.n(u),c=n(134),l=n.n(c),f=n(133),p=n.n(f),d=n(132),h=n.n(d),g=n(131),y=n.n(g),v=n(130),_=n.n(v),x=n(129),m=n.n(x),b=n(128),O=n.n(b),w=n(127),S=n.n(w),k=n(126),E=n.n(k),T=n(125),C=n.n(T),j=n(124),A=n.n(j),P=n(123),N=n.n(P),M=/([A-Z])/g,B=function(e){return"-"+String(e.toLowerCase())},D={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridColumn:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0};var z=["Webkit","ms","Moz","O"];Object.keys(D).forEach(function(e){z.forEach(function(t){D[function(e,t){return e+t.charAt(0).toUpperCase()+t.substring(1)}(t,e)]=D[e]})});var L=function(e,t){return"number"==typeof t?D[e]?""+t:t+"px":""+t},U=function(e,t){return F(L(e,t))},I=function(e,t){return o()(e).toString(36)},R=function(e){return I(JSON.stringify(e))},F=function(e){return"!"===e[e.length-10]&&" !important"===e.slice(-11)?e:String(e)+" !important"},X="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},G=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var K="undefined"!=typeof Map,W=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.elements={},this.keyOrder=[]}return G(e,[{key:"forEach",value:function(){return function(e){for(var t=0;t<this.keyOrder.length;t++)e(this.elements[this.keyOrder[t]],this.keyOrder[t])}}()},{key:"set",value:function(){return function(t,n,r){if(this.elements.hasOwnProperty(t)){if(r){var o=this.keyOrder.indexOf(t);this.keyOrder.splice(o,1),this.keyOrder.push(t)}}else this.keyOrder.push(t);if(null!=n){if(K&&n instanceof Map||n instanceof e){var i=this.elements.hasOwnProperty(t)?this.elements[t]:new e;return n.forEach(function(e,t){i.set(t,e,r)}),void(this.elements[t]=i)}if(Array.isArray(n)||"object"!==(void 0===n?"undefined":X(n)))this.elements[t]=n;else{for(var a=this.elements.hasOwnProperty(t)?this.elements[t]:new e,u=Object.keys(n),s=0;s<u.length;s+=1)a.set(u[s],n[u[s]],r);this.elements[t]=a}}else this.elements[t]=n}}()},{key:"get",value:function(){return function(e){return this.elements[e]}}()},{key:"has",value:function(){return function(e){return this.elements.hasOwnProperty(e)}}()},{key:"addStyleType",value:function(){return function(t){var n=this;if(K&&t instanceof Map||t instanceof e)t.forEach(function(e,t){n.set(t,e,!0)});else for(var r=Object.keys(t),o=0;o<r.length;o++)this.set(r[o],t[r[o]],!0)}}()}]),e}(),H=["Webkit"],q=["Moz"],V=["ms"],Z=["Webkit","Moz"],Y=["Webkit","ms"],J=["Webkit","Moz","ms"],$={plugins:[a.a,s.a,l.a,p.a,h.a,y.a,_.a,m.a,O.a,S.a,E.a,C.a],prefixMap:{transform:Y,transformOrigin:Y,transformOriginX:Y,transformOriginY:Y,backfaceVisibility:H,perspective:H,perspectiveOrigin:H,transformStyle:H,transformOriginZ:H,animation:H,animationDelay:H,animationDirection:H,animationFillMode:H,animationDuration:H,animationIterationCount:H,animationName:H,animationPlayState:H,animationTimingFunction:H,appearance:Z,userSelect:J,fontKerning:H,textEmphasisPosition:H,textEmphasis:H,textEmphasisStyle:H,textEmphasisColor:H,boxDecorationBreak:H,clipPath:H,maskImage:H,maskMode:H,maskRepeat:H,maskPosition:H,maskClip:H,maskOrigin:H,maskSize:H,maskComposite:H,mask:H,maskBorderSource:H,maskBorderMode:H,maskBorderSlice:H,maskBorderWidth:H,maskBorderOutset:H,maskBorderRepeat:H,maskBorder:H,maskType:H,textDecorationStyle:Z,textDecorationSkip:Z,textDecorationLine:Z,textDecorationColor:Z,filter:H,fontFeatureSettings:Z,breakAfter:J,breakBefore:J,breakInside:J,columnCount:Z,columnFill:Z,columnGap:Z,columnRule:Z,columnRuleColor:Z,columnRuleStyle:Z,columnRuleWidth:Z,columns:Z,columnSpan:Z,columnWidth:Z,writingMode:Y,flex:Y,flexBasis:H,flexDirection:Y,flexGrow:H,flexFlow:Y,flexShrink:H,flexWrap:Y,alignContent:H,alignItems:H,alignSelf:H,justifyContent:H,order:H,transitionDelay:H,transitionDuration:H,transitionProperty:H,transitionTimingFunction:H,backdropFilter:H,scrollSnapType:Y,scrollSnapPointsX:Y,scrollSnapPointsY:Y,scrollSnapDestination:Y,scrollSnapCoordinate:Y,shapeImageThreshold:H,shapeImageMargin:H,shapeImageOutside:H,hyphens:J,flowInto:Y,flowFrom:Y,regionFragment:Y,boxSizing:q,textAlignLast:q,tabSize:q,wrapFlow:V,wrapThrough:V,wrapMargin:V,touchAction:V,gridTemplateColumns:V,gridTemplateRows:V,gridTemplateAreas:V,gridTemplate:V,gridAutoColumns:V,gridAutoRows:V,gridAutoFlow:V,grid:V,gridRowStart:V,gridColumnStart:V,gridRowEnd:V,gridRow:V,gridColumn:V,gridColumnEnd:V,gridColumnGap:V,gridRowGap:V,gridArea:V,gridGap:V,textSizeAdjust:Y,borderImage:H,borderImageOutset:H,borderImageRepeat:H,borderImageSlice:H,borderImageSource:H,borderImageWidth:H}};var Q=A()($),ee=[function(){return function(e,t,n){return":"!==e[0]?null:n(t+e)}}(),function(){return function(e,t,n){if("@"!==e[0])return null;var r=n(t);return[String(e)+"{"+String(r.join(""))+"}"]}}()],te=function e(t,n,r,o,i){for(var a=new W,u=0;u<n.length;u++)a.addStyleType(n[u]);var s=new W,c=[];a.forEach(function(n,a){r.some(function(u){var s=u(a,t,function(t){return e(t,[n],r,o,i)});if(null!=s)return Array.isArray(s)?c.push.apply(c,function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(s)):(console.warn("WARNING: Selector handlers should return an array of rules.Returning a string containing multiple rules is deprecated.",u),c.push("@media all {"+String(s)+"}")),!0})||s.set(a,n,!0)});var l=oe(t,s,o,i,r);return l&&c.unshift(l),c},ne=function(e,t,n){return String("m"===(r=e.replace(M,B))[0]&&"s"===r[1]&&"-"===r[2]?"-"+String(r):r)+":"+String(n(e,t))+";";var r},re=function(e,t){return e[t]=!0,e},oe=function(e,t,n,r,o){!function(e,t,n){if(t)for(var r=Object.keys(t),o=0;o<r.length;o++){var i=r[o];e.has(i)&&e.set(i,t[i](e.get(i),n),!1)}}(t,n,o);var i=Object.keys(t.elements).reduce(re,Object.create(null)),a=Q(t.elements),u=Object.keys(a);if(u.length!==t.keyOrder.length)for(var s=0;s<u.length;s++)if(!i[u[s]]){var c=void 0;if((c="W"===u[s][0]?u[s][6].toLowerCase()+u[s].slice(7):"o"===u[s][1]?u[s][3].toLowerCase()+u[s].slice(4):u[s][2].toLowerCase()+u[s].slice(3))&&i[c]){var l=t.keyOrder.indexOf(c);t.keyOrder.splice(l,0,u[s])}else t.keyOrder.unshift(u[s])}for(var f=!1===r?L:U,p=[],d=0;d<t.keyOrder.length;d++){var h=t.keyOrder[d],g=a[h];if(Array.isArray(g))for(var y=0;y<g.length;y++)p.push(ne(h,g[y],f));else p.push(ne(h,g,f))}return p.length?String(e)+"{"+String(p.join(""))+"}":""},ie="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};var ae=null,ue={fontFamily:function(){return function e(t){if(Array.isArray(t)){var n={};return t.forEach(function(t){n[e(t)]=!0}),Object.keys(n).join(",")}return"object"===(void 0===t?"undefined":ie(t))?(pe(t.src,"@font-face",[t],!1),'"'+String(t.fontFamily)+'"'):t}}(),animationName:function(){return function e(t,n){if(Array.isArray(t))return t.map(function(t){return e(t,n)}).join(",");if("object"===(void 0===t?"undefined":ie(t))){var r="keyframe_"+String(R(t)),o="@keyframes "+r+"{";return t instanceof W?t.forEach(function(e,t){o+=te(t,[e],n,ue,!1).join("")}):Object.keys(t).forEach(function(e){o+=te(e,[t[e]],n,ue,!1).join("")}),fe(r,[o+="}"]),r}return t}}()},se={},ce=[],le=!1,fe=function(e,t){var n;if(!se[e]){if(!le){if("undefined"==typeof document)throw new Error("Cannot automatically buffer without a document");le=!0,N()(ve)}(n=ce).push.apply(n,function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(t)),se[e]=!0}},pe=function(e,t,n,r){var o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:[];if(!se[e]){var i=te(t,n,o,ue,r);fe(e,i)}},de=function(){ce=[],se={},le=!1,ae=null},he=function(){if(le)throw new Error("Cannot buffer while already buffering");le=!0},ge=function(){le=!1;var e=ce;return ce=[],e},ye=function(){return ge().join("")},ve=function(){var e=ge();e.length>0&&function(e){if(null==ae&&null==(ae=document.querySelector("style[data-aphrodite]"))){var t=document.head||document.getElementsByTagName("head")[0];(ae=document.createElement("style")).type="text/css",ae.setAttribute("data-aphrodite",""),t.appendChild(ae)}var n=ae.styleSheet||ae.sheet;if(n.insertRule){var r=n.cssRules.length;e.forEach(function(e){try{n.insertRule(e,r),r+=1}catch(e){}})}else ae.innerText=(ae.innerText||"")+e.join("")}(e)},_e=function(){return Object.keys(se)},xe=function(e){e.forEach(function(e){se[e]=!0})},me=function(e,t,n){var r=[],o=[],i=function e(t,n,r,o){for(var i=0;i<t.length;i+=1)t[i]&&(Array.isArray(t[i])?o+=e(t[i],n,r,o):(n.push(t[i]._name),r.push(t[i]._definition),o+=t[i]._len));return o}(t,r,o,0);if(0===r.length)return"";var a=void 0;return a=1===r.length?"_"+String(r[0]):"_"+String(I(r.join()))+String((i%36).toString(36)),pe(a,"."+String(a),o,e,n),a},be=function(e,t){return String(t)+"_"+String(I(e))},Oe=I,we={create:function(){return function(e){for(var t={},n=Object.keys(e),r=0;r<n.length;r+=1){var o=n[r],i=e[o],a=JSON.stringify(i);t[o]={_len:a.length,_name:Oe(a,o),_definition:i}}return t}}(),rehydrate:function(){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];xe(e)}}()},Se="undefined"!=typeof window?null:{renderStatic:function(){return function(e){return de(),he(),{html:e(),css:{content:ye(),renderedClassNames:_e()}}}}()},ke=null;n.d(t,"StyleSheet",function(){return Te}),n.d(t,"StyleSheetServer",function(){return Ce}),n.d(t,"StyleSheetTestUtils",function(){return je}),n.d(t,"css",function(){return Ae}),n.d(t,"minify",function(){return Pe}),n.d(t,"flushToStyleTag",function(){return Ne}),n.d(t,"injectAndGetClassName",function(){return Me}),n.d(t,"defaultSelectorHandlers",function(){return Be});var Ee=function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:ee;return{StyleSheet:Object.assign({},we,{extend:function(r){var o=r.map(function(e){return e.selectorHandler}).filter(function(e){return e});return e(t,n.concat(o))}}),StyleSheetServer:Se,StyleSheetTestUtils:ke,minify:function(e){Oe=e?I:be},css:function(){for(var e=arguments.length,r=Array(e),o=0;o<e;o++)r[o]=arguments[o];return me(t,r,n)},flushToStyleTag:ve,injectAndGetClassName:me,defaultSelectorHandlers:ee}}(!0),Te=Ee.StyleSheet,Ce=Ee.StyleSheetServer,je=Ee.StyleSheetTestUtils,Ae=Ee.css,Pe=Ee.minify,Ne=Ee.flushToStyleTag,Me=Ee.injectAndGetClassName,Be=Ee.defaultSelectorHandlers},function(e,t,n){"use strict";n.r(t);var r={};n.d(r,"TASK",function(){return o.e}),n.d(r,"SAGA_ACTION",function(){return o.c}),n.d(r,"noop",function(){return o.u}),n.d(r,"is",function(){return o.q}),n.d(r,"deferred",function(){return o.l}),n.d(r,"arrayOfDeffered",function(){return o.g}),n.d(r,"createMockTask",function(){return o.j}),n.d(r,"cloneableGenerator",function(){return o.i}),n.d(r,"asEffect",function(){return u.d}),n.d(r,"CHANNEL_END",function(){return p});var o=n(0),i=n(16),a=n(62),u=n(2),s=n(39),c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};var f="proc first argument (Saga function result) must be an iterator",p={toString:function(){return"@@redux-saga/CHANNEL_END"}},d={toString:function(){return"@@redux-saga/TASK_CANCEL"}},h={wildcard:function(){return o.r},default:function(e){return"symbol"===(void 0===e?"undefined":l(e))?function(t){return t.type===e}:function(t){return t.type===String(e)}},array:function(e){return function(t){return e.some(function(e){return g(e)(t)})}},predicate:function(e){return function(t){return e(t)}}};function g(e){return("*"===e?h.wildcard:o.q.array(e)?h.array:o.q.stringableFunc(e)?h.default:o.q.func(e)?h.predicate:h.default)(e)}var y=function(e){return{fn:e}};function v(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){return o.u},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:o.u,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:o.u,l=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{},h=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{},_=arguments.length>6&&void 0!==arguments[6]?arguments[6]:0,x=arguments.length>7&&void 0!==arguments[7]?arguments[7]:"anonymous",m=arguments[8];Object(o.h)(e,o.q.iterator,f);var b=Object(o.n)(I,Object(o.z)("[...effects]","all([...effects])")),O=h.sagaMonitor,w=h.logger,S=h.onError,k=w||o.s,E=function(e){var t=e.sagaStack;!t&&e.stack&&(t=-1!==e.stack.split("\n")[0].indexOf(e.message)?e.stack:"Error: "+e.message+"\n"+e.stack),k("error","uncaught at "+x,t||e.message||e)},T=Object(i.f)(t),C=Object.create(l);M.cancel=o.u;var j=function(e,t,n,r){var i,a;return n._deferredEnd=null,(i={})[o.e]=!0,i.id=e,i.name=t,"done",(a={}).done=a.done||{},a.done.get=function(){if(n._deferredEnd)return n._deferredEnd.promise;var e=Object(o.l)();return n._deferredEnd=e,n._isRunning||(n._error?e.reject(n._error):e.resolve(n._result)),e.promise},i.cont=r,i.joiners=[],i.cancel=N,i.isRunning=function(){return n._isRunning},i.isCancelled=function(){return n._isCancelled},i.isAborted=function(){return n._isAborted},i.result=function(){return n._result},i.error=function(){return n._error},i.setContext=function(e){Object(o.h)(e,o.q.object,Object(o.k)("task",e)),o.v.assign(C,e)},function(e,t){for(var n in t){var r=t[n];r.configurable=r.enumerable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,n,r)}}(i,a),i}(_,x,e,m),A={name:x,cancel:function(){A.isRunning&&!A.isCancelled&&(A.isCancelled=!0,M(d))},isRunning:!0},P=function(e,t,n){var r=[],i=void 0,a=!1;function u(e){c(),n(e,!0)}function s(e){r.push(e),e.cont=function(s,c){a||(Object(o.w)(r,e),e.cont=o.u,c?u(s):(e===t&&(i=s),r.length||(a=!0,n(i))))}}function c(){a||(a=!0,r.forEach(function(e){e.cont=o.u,e.cancel()}),r=[])}return s(t),{addTask:s,cancelAll:c,abort:u,getTasks:function(){return r},taskNames:function(){return r.map(function(e){return e.name})}}}(0,A,B);function N(){e._isRunning&&!e._isCancelled&&(e._isCancelled=!0,P.cancelAll(),B(d))}return m&&(m.cancel=N),e._isRunning=!0,M(),j;function M(t,n){if(!A.isRunning)throw new Error("Trying to resume an already finished generator");try{var r=void 0;n?r=e.throw(t):t===d?(A.isCancelled=!0,M.cancel(),r=o.q.func(e.return)?e.return(d):{done:!0,value:d}):r=t===p?o.q.func(e.return)?e.return():{done:!0}:e.next(t),r.done?(A.isMainRunning=!1,A.cont&&A.cont(r.value)):D(r.value,_,"",M)}catch(e){A.isCancelled&&E(e),A.isMainRunning=!1,A.cont(e,!0)}}function B(t,n){e._isRunning=!1,T.close(),n?(t instanceof Error&&Object.defineProperty(t,"sagaStack",{value:"at "+x+" \n "+(t.sagaStack||t.stack),configurable:!0}),j.cont||(t instanceof Error&&S?S(t):E(t)),e._error=t,e._isAborted=!0,e._deferredEnd&&e._deferredEnd.reject(t)):(e._result=t,e._deferredEnd&&e._deferredEnd.resolve(t)),j.cont&&j.cont(t,n),j.joiners.forEach(function(e){return e.cb(t,n)}),j.joiners=null}function D(e,l){var f=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",h=arguments[3],v=Object(o.y)();O&&O.effectTriggered({effectId:v,parentEffectId:l,label:f,effect:e});var _=void 0;function m(e,t){_||(_=!0,h.cancel=o.u,O&&(t?O.effectRejected(v,e):O.effectResolved(v,e)),h(e,t))}m.cancel=o.u,h.cancel=function(){if(!_){_=!0;try{m.cancel()}catch(e){E(e)}m.cancel=o.u,O&&O.effectCancelled(v)}};var w=void 0;return o.q.promise(e)?z(e,m):o.q.helper(e)?U(y(e),v,m):o.q.iterator(e)?L(e,v,x,m):o.q.array(e)?b(e,v,m):(w=u.d.take(e))?function(e,t){var n=e.channel,r=e.pattern,o=e.maybe;n=n||T;var a=function(e){return e instanceof Error?t(e,!0):Object(i.e)(e)&&!o?t(p):t(e)};try{n.take(a,g(r))}catch(e){return t(e,!0)}t.cancel=a.cancel}(w,m):(w=u.d.put(e))?function(e,t){var r=e.channel,i=e.action,u=e.resolve;Object(a.a)(function(){var e=void 0;try{e=(r?r.put:n)(i)}catch(e){if(r||u)return t(e,!0);E(e)}if(!u||!o.q.promise(e))return t(e);z(e,t)})}(w,m):(w=u.d.all(e))?I(w,v,m):(w=u.d.race(e))?function(e,t,n){var r=void 0,a=Object.keys(e),u={};a.forEach(function(t){var s=function(u,s){if(!r)if(s)n.cancel(),n(u,!0);else if(!Object(i.e)(u)&&u!==p&&u!==d){var l;n.cancel(),r=!0;var f=((l={})[t]=u,l);n(o.q.array(e)?[].slice.call(c({},f,{length:a.length})):f)}};s.cancel=o.u,u[t]=s}),n.cancel=function(){r||(r=!0,a.forEach(function(e){return u[e].cancel()}))},a.forEach(function(n){r||D(e[n],t,n,u[n])})}(w,v,m):(w=u.d.call(e))?function(e,t,n){var r=e.context,i=e.fn,a=e.args,u=void 0;try{u=i.apply(r,a)}catch(e){return n(e,!0)}return o.q.promise(u)?z(u,n):o.q.iterator(u)?L(u,t,i.name,n):n(u)}(w,v,m):(w=u.d.cps(e))?function(e,t){var n=e.context,r=e.fn,i=e.args;try{var a=function(e,n){return o.q.undef(e)?t(n):t(e,!0)};r.apply(n,i.concat(a)),a.cancel&&(t.cancel=function(){return a.cancel()})}catch(e){return t(e,!0)}}(w,m):(w=u.d.fork(e))?U(w,v,m):(w=u.d.join(e))?function(e,t){if(e.isRunning()){var n={task:j,cb:t};t.cancel=function(){return Object(o.w)(e.joiners,n)},e.joiners.push(n)}else e.isAborted()?t(e.error(),!0):t(e.result())}(w,m):(w=u.d.cancel(e))?function(e,t){e===o.d&&(e=j);e.isRunning()&&e.cancel();t()}(w,m):(w=u.d.select(e))?function(e,t){var n=e.selector,o=e.args;try{var i=n.apply(void 0,[r()].concat(o));t(i)}catch(e){t(e,!0)}}(w,m):(w=u.d.actionChannel(e))?function(e,n){var r=e.pattern,o=e.buffer,a=g(r);a.pattern=r,n(Object(i.d)(t,o||s.a.fixed(),a))}(w,m):(w=u.d.flush(e))?function(e,t){e.flush(t)}(w,m):(w=u.d.cancelled(e))?function(e,t){t(!!A.isCancelled)}(0,m):(w=u.d.getContext(e))?function(e,t){t(C[e])}(w,m):(w=u.d.setContext(e))?function(e,t){o.v.assign(C,e),t()}(w,m):m(e)}function z(e,t){var n=e[o.a];o.q.func(n)?t.cancel=n:o.q.func(e.abort)&&(t.cancel=function(){return e.abort()}),e.then(t,function(e){return t(e,!0)})}function L(e,o,i,a){v(e,t,n,r,C,h,o,i,a)}function U(e,i,u){var s=e.context,c=e.fn,l=e.args,f=e.detached,p=function(e){var t=e.context,n=e.fn,r=e.args;if(o.q.iterator(n))return n;var i,a,u=void 0,s=void 0;try{u=n.apply(t,r)}catch(e){s=e}return o.q.iterator(u)?u:s?Object(o.t)(function(){throw s}):Object(o.t)((i=void 0,a={done:!1,value:u},function(e){return i?{done:!0,value:e}:(i=!0,a)}))}({context:s,fn:c,args:l});try{Object(a.c)();var d=v(p,t,n,r,C,h,i,c.name,f?null:o.u);f?u(d):p._isRunning?(P.addTask(d),u(d)):p._error?P.abort(p._error):u(d)}finally{Object(a.b)()}}function I(e,t,n){var r=Object.keys(e);if(!r.length)return n(o.q.array(e)?[]:{});var a=0,u=void 0,s={},l={};r.forEach(function(t){var f=function(l,f){u||(f||Object(i.e)(l)||l===p||l===d?(n.cancel(),n(l,f)):(s[t]=l,++a===r.length&&(u=!0,n(o.q.array(e)?o.f.from(c({},s,{length:r.length})):s))))};f.cancel=o.u,l[t]=f}),n.cancel=function(){u||(u=!0,r.forEach(function(e){return l[e].cancel()}))},r.forEach(function(n){return D(e[n],t,n,l[n])})}}var _="runSaga(storeInterface, saga, ...args): saga argument must be a Generator function!";function x(e,t){for(var n=arguments.length,r=Array(n>2?n-2:0),i=2;i<n;i++)r[i-2]=arguments[i];var a=void 0;o.q.iterator(e)?(a=e,e=t):(Object(o.h)(t,o.q.func,_),a=t.apply(void 0,r),Object(o.h)(a,o.q.iterator,_));var u=e,s=u.subscribe,c=u.dispatch,l=u.getState,f=u.context,p=u.sagaMonitor,d=u.logger,h=u.onError,g=Object(o.y)();p&&(p.effectTriggered=p.effectTriggered||o.u,p.effectResolved=p.effectResolved||o.u,p.effectRejected=p.effectRejected||o.u,p.effectCancelled=p.effectCancelled||o.u,p.actionDispatched=p.actionDispatched||o.u,p.effectTriggered({effectId:g,root:!0,parentEffectId:0,effect:{root:!0,saga:t,args:r}}));var y=v(a,s,Object(o.A)(c),l,f,{sagaMonitor:p,logger:d,onError:h},g,t.name);return p&&p.effectResolved(g,y),y}var m=n(43),b=n(36);n.d(t,"runSaga",function(){return x}),n.d(t,"END",function(){return i.a}),n.d(t,"eventChannel",function(){return i.d}),n.d(t,"channel",function(){return i.b}),n.d(t,"buffers",function(){return s.a}),n.d(t,"takeEvery",function(){return m.a}),n.d(t,"takeLatest",function(){return m.c}),n.d(t,"throttle",function(){return m.e}),n.d(t,"delay",function(){return o.m}),n.d(t,"CANCEL",function(){return o.a}),n.d(t,"detach",function(){return u.i}),n.d(t,"effects",function(){return b}),n.d(t,"utils",function(){return r});t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.context,n=void 0===t?{}:t,r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["context"]),a=r.sagaMonitor,u=r.logger,s=r.onError;if(o.q.func(r))throw new Error("Saga middleware no longer accept Generator functions. Use sagaMiddleware.run instead");if(u&&!o.q.func(u))throw new Error("`options.logger` passed to the Saga middleware is not a function!");if(s&&!o.q.func(s))throw new Error("`options.onError` passed to the Saga middleware is not a function!");if(r.emitter&&!o.q.func(r.emitter))throw new Error("`options.emitter` passed to the Saga middleware is not a function!");function c(e){var t=e.getState,l=e.dispatch,f=Object(i.c)();return f.emit=(r.emitter||o.o)(f.emit),c.run=x.bind(null,{context:n,subscribe:f.subscribe,dispatch:l,getState:t,sagaMonitor:a,logger:u,onError:s}),function(e){return function(t){a&&a.actionDispatched&&a.actionDispatched(t);var n=e(t);return f.emit(t),n}}}return c.run=function(){throw new Error("Before running a Saga, you must mount the Saga middleware on the Store using applyMiddleware")},c.setContext=function(e){Object(o.h)(e,o.q.object,Object(o.k)("sagaMiddleware",e)),o.v.assign(n,e)},c}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){return function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();t.default=h;var o=n(36),i=n(56),a=n(70),u=n(68),s=n(72),c=n(94),l=n(10),f=n(35),p=n(14),d=regeneratorRuntime.mark(h);function h(){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,o.takeEvery)(i.SU_CONTEXTMENU_OPEN,regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,o.put)((0,a.Saga_ContextMenu_Open)(t.payload));case 2:case"end":return e.stop()}},e,this)}));case 2:return e.next=4,(0,o.takeEvery)(i.SU_CONTEXTMENU_CLOSE,regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,o.put)((0,a.Saga_ContextMenu_Close)(t.payload));case 2:case"end":return e.stop()}},e,this)}));case 4:return e.next=6,(0,o.takeEvery)(i.SU_CONTEXTMENU_NEWBOXTEXT,regeneratorRuntime.mark(function e(t){var n,i,u,s,c,d,h,g,y,v,_,x,m,b,O,w;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,o.select)(function(e){return e.boxs});case 2:return n=e.sent,i=200,u=100,s=t.payload.cur_x-i,c=t.payload.cur_y,d=p.Grid.snap(s,c,l.Define.svgimagesize.width,l.Define.svgimagesize.height,l.Define.grid.width,l.Define.grid.height),h=r(d,2),s=h[0],c=h[1],v=(g=s)+i,_=(y=c)+u,x=p.Grid.changeInArea(g,y,v,_,l.Define.svgimagesize.width,l.Define.svgimagesize.height,l.Define.grid.width,l.Define.grid.height),m=r(x,4),g=m[0],y=m[1],v=m[2],_=m[3],b=f.Box.getNewBoxId(n),O=f.Box.getNewGroupId(n),w={box_id:b,group_id:O,group_no:1,type:"text",x1:g,y1:y,x2:v,y2:_,text:{kumihoko:"tate",padding_js:10,padding_je:10,padding_gs:10,padding_ge:10,size_j:10,size_g:10,gyokan:5,font:1}},e.next=26,(0,o.put)((0,a.Saga_ContextMenu_NewBoxText)(w));case 26:case"end":return e.stop()}},e,this)}));case 6:return e.next=8,(0,o.takeEvery)(i.SU_CONTEXTMENU_NEWBOXIMAGE,regeneratorRuntime.mark(function e(t){var n,i,u,s,c,d,h,g,y,v,_,x,m,b,O,w;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,o.select)(function(e){return e.boxs});case 2:return n=e.sent,i=200,u=100,s=t.payload.cur_x-i,c=t.payload.cur_y,d=p.Grid.snap(s,c,l.Define.svgimagesize.width,l.Define.svgimagesize.height,l.Define.grid.width,l.Define.grid.height),h=r(d,2),s=h[0],c=h[1],v=(g=s)+i,_=(y=c)+u,x=p.Grid.changeInArea(g,y,v,_,l.Define.svgimagesize.width,l.Define.svgimagesize.height,l.Define.grid.width,l.Define.grid.height),m=r(x,4),g=m[0],y=m[1],v=m[2],_=m[3],b=f.Box.getNewBoxId(n),O=f.Box.getNewGroupId(n),w={box_id:b,group_id:O,group_no:1,type:"image",x1:g,y1:y,x2:v,y2:_,image:{url:""}},e.next=26,(0,o.put)((0,a.Saga_ContextMenu_NewBoxImage)(w));case 26:case"end":return e.stop()}},e,this)}));case 8:return e.next=10,(0,o.takeEvery)(i.SU_CONTEXTMENU_COPYBOXTEXTONGROUP,regeneratorRuntime.mark(function e(t){var n,i,s,c,d,h,g,y,v,_,x,m,b,O,w,S,k,E,T;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,o.select)(function(e){return e.boxs});case 2:return n=e.sent,i=f.Box.getBox(n,t.payload.box_id),s=i.x2-i.x1,c=i.y2-i.y1,d=i.x1-50,h=i.y1+50,g=p.Grid.snap(d,h,l.Define.svgimagesize.width,l.Define.svgimagesize.height,l.Define.grid.width,l.Define.grid.height),y=r(g,2),d=y[0],h=y[1],x=(v=d)+s,m=(_=h)+c,b=p.Grid.changeInArea(v,_,x,m,l.Define.svgimagesize.width,l.Define.svgimagesize.height,l.Define.grid.width,l.Define.grid.height),O=r(b,4),v=O[0],_=O[1],x=O[2],m=O[3],w=f.Box.getNewBoxId(n),S=t.payload.group_id,k=f.Box.getGroupNoAry(n,S),E=k.pop()+1,T={box_id:w,group_id:t.payload.group_id,group_no:E,type:"text",x1:v,y1:_,x2:x,y2:m,text:{kumihoko:i.text.kumihoko,padding_js:i.text.padding_js,padding_je:i.text.padding_je,padding_gs:i.text.padding_gs,padding_ge:i.text.padding_ge,size_j:i.text.size_j,size_g:i.text.size_g,gyokan:i.text.gyokan,font:i.text.font}},e.next=29,(0,o.put)((0,a.Saga_ContextMenu_NewBoxText)(T));case 29:return e.next=31,(0,o.fork)(u.nagashiExecGroup,S);case 31:case"end":return e.stop()}},e,this)}));case 10:return e.next=12,(0,o.takeEvery)(i.SU_CONTEXTMENU_COPYBOXTEXT,regeneratorRuntime.mark(function e(t){var n,i,u,s,c,d,h,g,y,v,_,x,m,b,O,w,S;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,o.select)(function(e){return e.boxs});case 2:return n=e.sent,i=f.Box.getBox(n,t.payload.box_id),u=i.x2-i.x1,s=i.y2-i.y1,c=i.x1-50,d=i.y1+50,h=p.Grid.snap(c,d,l.Define.svgimagesize.width,l.Define.svgimagesize.height,l.Define.grid.width,l.Define.grid.height),g=r(h,2),c=g[0],d=g[1],_=(y=c)+u,x=(v=d)+s,m=p.Grid.changeInArea(y,v,_,x,l.Define.svgimagesize.width,l.Define.svgimagesize.height,l.Define.grid.width,l.Define.grid.height),b=r(m,4),y=b[0],v=b[1],_=b[2],x=b[3],O=f.Box.getNewBoxId(n),w=f.Box.getNewGroupId(n),S={box_id:O,group_id:w,group_no:1,type:"text",x1:y,y1:v,x2:_,y2:x,text:{kumihoko:i.text.kumihoko,padding_js:i.text.padding_js,padding_je:i.text.padding_je,padding_gs:i.text.padding_gs,padding_ge:i.text.padding_ge,size_j:i.text.size_j,size_g:i.text.size_g,gyokan:i.text.gyokan,font:i.text.font}},e.next=27,(0,o.put)((0,a.Saga_ContextMenu_NewBoxText)(S));case 27:case"end":return e.stop()}},e,this)}));case 12:return e.next=14,(0,o.takeEvery)(i.SU_CONTEXTMENU_COPYBOXIMAGE,regeneratorRuntime.mark(function e(t){var n,i,u,s,c,d,h,g,y,v,_,x,m,b,O,w,S;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,o.select)(function(e){return e.boxs});case 2:return n=e.sent,i=f.Box.getBox(n,t.payload.box_id),u=i.x2-i.x1,s=i.y2-i.y1,c=i.x1-50,d=i.y1+50,h=p.Grid.snap(c,d,l.Define.svgimagesize.width,l.Define.svgimagesize.height,l.Define.grid.width,l.Define.grid.height),g=r(h,2),c=g[0],d=g[1],_=(y=c)+u,x=(v=d)+s,m=p.Grid.changeInArea(y,v,_,x,l.Define.svgimagesize.width,l.Define.svgimagesize.height,l.Define.grid.width,l.Define.grid.height),b=r(m,4),y=b[0],v=b[1],_=b[2],x=b[3],O=f.Box.getNewBoxId(n),w=f.Box.getNewGroupId(n),S={box_id:O,group_id:w,group_no:1,type:"image",x1:y,y1:v,x2:_,y2:x,image:{url:""}},e.next=27,(0,o.put)((0,a.Saga_ContextMenu_NewBoxImage)(S));case 27:case"end":return e.stop()}},e,this)}));case 14:return e.next=16,(0,o.takeEvery)(i.SU_CONTEXTMENU_SOZAIUNLINK,regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,o.put)((0,s.SU_ToolBoxLink_DeleteButton_Click)(t.payload));case 2:case"end":return e.stop()}},e,this)}));case 16:return e.next=18,(0,o.takeEvery)(i.SU_CONTEXTMENU_BOXREMOVE,regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,o.put)((0,c.SU_ToolBoxBoxData_DeleteButton_Click)(t.payload));case 2:case"end":return e.stop()}},e,this)}));case 18:return e.next=20,(0,o.takeEvery)(i.SU_CONTEXTMENU_BOXTOFRONT,regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,o.put)((0,a.Saga_ContextMenu_BoxToFront)(t.payload));case 2:case"end":return e.stop()}},e,this)}));case 20:return e.next=22,(0,o.takeEvery)(i.SU_CONTEXTMENU_BOXTOBACK,regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,o.put)((0,a.Saga_ContextMenu_BoxToBack)(t.payload));case 2:case"end":return e.stop()}},e,this)}));case 22:case"end":return e.stop()}},d,this)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=h;var r=n(36),o=n(93),i=n(141),a=n(69),u=n(63),s=n(14),c=n(10),l=n(140),f=n(68),p=n(35),d=regeneratorRuntime.mark(h);function h(){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,r.takeEvery)(o.SU_DANDD_MOUSEDOWN,regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,r.put)((0,i.Saga_DAndD_MouseDown)(t.payload));case 2:case"end":return e.stop()}},e,this)}));case 2:return e.next=4,(0,r.takeEvery)(o.SU_DANDD_MOUSEUP,regeneratorRuntime.mark(function e(t){var n,o,d,h,g,y,v,_,x,m,b,O;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,r.select)(function(e){return e.boxs});case 2:n=e.sent,o=s.Zahyo.luToruX(t.payload.x,c.Define.svgimagesize.width),d=s.Zahyo.luToruY(t.payload.y,c.Define.svgimagesize.height),h="",g=!1,y=0;case 8:if(!(y<n.length)){e.next=18;break}if(h=n[y],0!=s.Zahyo.isInBox(o,d,h.x1,h.y1,h.x2,h.y2)){e.next=12;break}return e.abrupt("continue",15);case 12:if(1!=(g=p.Box.isSameBoxTypeAndSozaiType(h.type,t.payload.value.type))){e.next=15;break}return e.abrupt("break",18);case 15:y++,e.next=8;break;case 18:if(1!=g||""==h){e.next=36;break}return e.next=21,(0,r.select)(function(e){return e.links});case 21:if(v=e.sent,_=t.payload.value.sozai_id,x=h.group_id,""==(m=l.Link.getGroupFromSozaiId(v,_))){e.next=31;break}return b={group_id:m},e.next=29,(0,r.put)((0,u.Saga_Nagashi_Remove)(b));case 29:return e.next=31,(0,r.put)((0,a.Saga_ToolBoxLink_Link_Delete)(b));case 31:return e.next=33,(0,r.fork)(f.nagashiExec,x,_);case 33:return O={group_id:x,sozai_id:_},e.next=36,(0,r.put)((0,a.Saga_ToolBoxLink_Link_Create)(O));case 36:return e.next=38,(0,r.put)((0,i.Saga_DAndD_MouseUp)(t.payload));case 38:case"end":return e.stop()}},e,this)}));case 4:case"end":return e.stop()}},d,this)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=s;var r=n(36),o=n(150),i=n(146),a=regeneratorRuntime.mark(s),u=function(e){return e.scale};function s(){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,r.takeEvery)(o.SU_TOOLBOXSCALE_MINBUTTON_CLICK,regeneratorRuntime.mark(function e(t){var n;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,r.select)(u);case 2:return n=e.sent,(n-=50)<=50&&(n=50),e.next=7,(0,r.put)((0,i.Saga_Scale_Change)({scale:n}));case 7:case"end":return e.stop()}},e,this)}));case 2:return e.next=4,(0,r.takeEvery)(o.SU_TOOLBOXSCALE_MAXBUTTON_CLICK,regeneratorRuntime.mark(function e(t){var n;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,r.select)(u);case 2:return n=e.sent,(n+=50)>=1e3&&(n=1e3),e.next=7,(0,r.put)((0,i.Saga_Scale_Change)({scale:n}));case 7:case"end":return e.stop()}},e,this)}));case 4:return e.next=6,(0,r.takeEvery)(o.SU_TOOLBOXSCALE_100PERBUTTON_CLICK,regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,r.put)((0,i.Saga_Scale_Change)({scale:100}));case 2:case"end":return e.stop()}},e,this)}));case 6:case"end":return e.stop()}},a,this)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){return function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();t.default=S;var o=n(36),i=n(151),a=n(143),u=n(94),s=n(91),c=n(149),l=n(144),f=n(148),p=n(64),d=n(72),h=n(69),g=n(147),y=n(44),v=n(63),_=n(68),x=n(14),m=n(35),b=n(92),O=n(10),w=regeneratorRuntime.mark(S);function S(){var e,t,n,S,k,E;return regeneratorRuntime.wrap(function(w){for(;;)switch(w.prev=w.next){case 0:return w.next=2,(0,o.select)(function(e){return e.sozai});case 2:e=w.sent,t=0;case 4:if(!(t<e.length)){w.next=11;break}return n={sozai:{sozai_id:e[t].sozai_id,type:e[t].type,text:e[t].text,image:e[t].image}},w.next=8,(0,o.put)((0,p.Saga_ToolBoxSozai_Sozai_Update)(n));case 8:t++,w.next=4;break;case 11:return w.next=13,(0,o.select)(function(e){return e.toolboxs});case 13:S=w.sent,k={},E=0;case 16:if(!(E<S.length)){w.next=47;break}w.t0=S[E].type,w.next="scale"===w.t0?20:"boxdata"===w.t0?24:"textdata"===w.t0?28:"sozai"===w.t0?32:"link"===w.t0?36:"presen"===w.t0?40:44;break;case 20:return k={toolbox_id:S[E].toolbox_id,x:x.Zahyo.windowArea().w-S[E].w-20,y:5},w.next=23,(0,o.put)((0,a.Saga_ToolBox_MoveEnd)(k));case 23:return w.abrupt("break",44);case 24:return k={toolbox_id:S[E].toolbox_id,x:x.Zahyo.windowArea().w-S[E].w-20,y:50},w.next=27,(0,o.put)((0,a.Saga_ToolBox_MoveEnd)(k));case 27:return w.abrupt("break",44);case 28:return k={toolbox_id:S[E].toolbox_id,x:x.Zahyo.windowArea().w-S[E].w-20,y:195},w.next=31,(0,o.put)((0,a.Saga_ToolBox_MoveEnd)(k));case 31:return w.abrupt("break",44);case 32:return k={toolbox_id:S[E].toolbox_id,x:x.Zahyo.windowArea().w-S[E].w-20-200-5,y:5},w.next=35,(0,o.put)((0,a.Saga_ToolBox_MoveEnd)(k));case 35:return w.abrupt("break",44);case 36:return k={toolbox_id:S[E].toolbox_id,x:x.Zahyo.windowArea().w-S[E].w-20-200-5-200-5,y:5},w.next=39,(0,o.put)((0,a.Saga_ToolBox_MoveEnd)(k));case 39:return w.abrupt("break",44);case 40:return k={toolbox_id:S[E].toolbox_id,x:x.Zahyo.windowArea().w-S[E].w-20,y:400},w.next=43,(0,o.put)((0,a.Saga_ToolBox_MoveEnd)(k));case 43:return w.abrupt("break",44);case 44:E++,w.next=16;break;case 47:return w.next=49,(0,o.takeEvery)(i.SU_TOOLBOX_MOVEEND,regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,o.put)((0,a.Saga_ToolBox_MoveEnd)(t.payload));case 2:case"end":return e.stop()}},e,this)}));case 49:return w.next=51,(0,o.takeEvery)(u.SU_TOOLBOXBOXDATA_UPDATEBUTTON_CLICK,regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,o.put)((0,s.Saga_ToolBoxBoxData_BoxData_Update)(t.payload));case 2:return e.next=4,(0,o.fork)(_.nagashiExecAll);case 4:case"end":return e.stop()}},e,this)}));case 51:return w.next=53,(0,o.takeEvery)(u.SU_TOOLBOXBOXDATA_DELETEBUTTON_CLICK,regeneratorRuntime.mark(function e(t){var n,i,a,u,c;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,o.select)(function(e){return e.boxs});case 2:return n=e.sent,i=m.Box.getGroupAndNo(n,t.payload.box_id),a=r(i,2),u=a[0],a[1],e.next=6,(0,o.put)((0,s.Saga_ToolBoxBoxData_BoxData_Delete)(t.payload));case 6:return e.next=8,(0,o.select)(function(e){return e.boxs});case 8:if(n=e.sent,!(m.Box.getGroupAry(n).indexOf(u)<0)){e.next=16;break}return c={group_id:u},e.next=14,(0,o.put)((0,h.Saga_ToolBoxLink_Link_Delete)(c));case 14:e.next=18;break;case 16:return e.next=18,(0,o.fork)(_.nagashiExecGroup,u);case 18:case"end":return e.stop()}},e,this)}));case 53:return w.next=55,(0,o.takeEvery)(u.SU_TOOLBOXBOXDATA_CREATEBUTTON_CLICK,regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,o.put)((0,s.Saga_ToolBoxBoxData_BoxData_Create)(t.payload));case 2:return e.next=4,(0,o.fork)(_.nagashiExecBox,t.payload.box.box_id);case 4:case"end":return e.stop()}},e,this)}));case 55:return w.next=57,(0,o.takeEvery)(c.SU_TOOLBOXTEXTDATA_UPDATEBUTTON_CLICK,regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,o.put)((0,l.Saga_ToolBoxTextData_TextData_Update)(t.payload));case 2:return e.next=4,(0,o.fork)(_.nagashiExecBox,t.payload.box.box_id);case 4:case"end":return e.stop()}},e,this)}));case 57:return w.next=59,(0,o.takeEvery)(f.SU_TOOLBOXSOZAI_UPDATEBUTTON_CLICK,regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,o.put)((0,p.Saga_ToolBoxSozai_Sozai_Update)(t.payload));case 2:return e.next=4,(0,o.fork)(_.nagashiExecSozai,t.payload.sozai.sozai_id);case 4:case"end":return e.stop()}},e,this)}));case 59:return w.next=61,(0,o.takeEvery)(f.SU_TOOLBOXSOZAI_DELETEBUTTON_CLICK,regeneratorRuntime.mark(function e(t){var n,r,i,a;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,o.select)(function(e){return e.boxs});case 2:return n=e.sent,e.next=5,(0,o.select)(function(e){return e.links});case 5:if(r=e.sent,!((i=m.Box.getLinkGroup(n,r,t.payload.sozai_id))>=1)){e.next=11;break}return a={group_id:i},e.next=11,(0,o.put)((0,v.Saga_Nagashi_Remove)(a));case 11:return e.next=13,(0,o.put)((0,p.Saga_ToolBoxSozai_Sozai_Delete)(t.payload));case 13:case"end":return e.stop()}},e,this)}));case 61:return w.next=63,(0,o.takeEvery)(f.SU_TOOLBOXSOZAI_CREATEBUTTON_CLICK,regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,o.put)((0,p.Saga_ToolBoxSozai_Sozai_Create)(t.payload));case 2:case"end":return e.stop()}},e,this)}));case 63:return w.next=65,(0,o.takeEvery)(f.SU_TOOLBOXSOZAI_SOZAI_TOGGLE,regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,o.put)((0,p.Saga_ToolBoxSozai_Sozai_Toggle)(t.payload));case 2:case"end":return e.stop()}},e,this)}));case 65:return w.next=67,(0,o.takeEvery)(d.SU_TOOLBOXLINK_CREATEBUTTON_CLICK,regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,o.put)((0,h.Saga_ToolBoxLink_Link_Create)(t.payload));case 2:return e.next=4,(0,o.fork)(_.nagashiExec,t.payload.group_id,t.payload.sozai_id);case 4:case"end":return e.stop()}},e,this)}));case 67:return w.next=69,(0,o.takeEvery)(d.SU_TOOLBOXLINK_DELETEBUTTON_CLICK,regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,o.put)((0,v.Saga_Nagashi_Remove)(t.payload));case 2:return e.next=4,(0,o.put)((0,h.Saga_ToolBoxLink_Link_Delete)(t.payload));case 4:case"end":return e.stop()}},e,this)}));case 69:return w.next=71,(0,o.takeEvery)(g.SU_TOOLBOXPRESEN_LAYOUTCALLBUTTON_CLICK,regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,o.put)((0,y.Saga_Layout_Call)(t.payload));case 2:case"end":return e.stop()}},e,this)}));case 71:return w.next=73,(0,o.takeEvery)(g.SU_TOOLBOXPRESEN_SOZAICALLBUTTON_CLICK,regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,o.put)((0,y.Saga_Sozai_Call)(t.payload));case 2:case"end":return e.stop()}},e,this)}));case 73:return w.next=75,(0,o.takeEvery)(g.SU_TOOLBOXPRESEN_LINKCALLBUTTON_CLICK,regeneratorRuntime.mark(function e(t){var n,r,i,a,u,s,c,l,f,p,d,h,g,v;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return g=function(e,t){for(var n=0;n<e.length;n++)if(e[n].group_id==t.group_id&&e[n].sozai_id==t.sozai_id)return n;return-1},n=O.PresenLink[t.payload.pattern],e.next=4,(0,o.select)(function(e){return e.boxs});case 4:return r=e.sent,e.next=7,(0,o.select)(function(e){return e.sozai});case 7:i=e.sent,a=[],u=0;case 10:if(!(u<n.length)){e.next=27;break}if(s=n[u].group_id,c=n[u].sozai_id,!((l=m.Box.getGroupNoAry(r,s)).length<=0)){e.next=16;break}return e.abrupt("continue",24);case 16:if(f=m.Box.getBoxId(r,s,l[0]),p=m.Box.getBox(r,f),""!=(d=b.Sozai.getSozai(i,c))){e.next=21;break}return e.abrupt("continue",24);case 21:if(p.type==d.type){e.next=23;break}return e.abrupt("continue",24);case 23:a.push({group_id:s,sozai_id:c});case 24:u++,e.next=10;break;case 27:h=a.filter(function(e,t,n){return g(n,e)===t}),v=0;case 29:if(!(v<h.length)){e.next=35;break}return e.next=32,(0,o.fork)(_.nagashiExec,h[v].group_id,h[v].sozai_id);case 32:v++,e.next=29;break;case 35:return e.next=37,(0,o.put)((0,y.Saga_Link_Call)({links:h}));case 37:case"end":return e.stop()}},e,this)}));case 75:return w.next=77,(0,o.takeEvery)(g.SU_TOOLBOXPRESEN_EDITONOFFBUTTON_CLICK,regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,o.put)((0,y.Saga_EditOnOff_Change)(t.payload));case 2:case"end":return e.stop()}},e,this)}));case 77:case"end":return w.stop()}},w,this)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=p;var r=n(36),o=n(74),i=n(71),a=n(64),u=(n(63),n(72)),s=(n(69),n(68)),c=n(140),l=n(35),f=regeneratorRuntime.mark(p);function p(){var e,t,n;return regeneratorRuntime.wrap(function(f){for(;;)switch(f.prev=f.next){case 0:return f.next=2,(0,r.select)(function(e){return e.boxs});case 2:e=f.sent,t=0;case 4:if(!(t<e.length)){f.next=12;break}if("text"!=e[t].type){f.next=9;break}return n={box_id:e[t].box_id,x1:e[t].x1,y1:e[t].y1,x2:e[t].x2,y2:e[t].y2},f.next=9,(0,r.put)((0,i.Saga_SelectBox_EditBox_ChangeSize)(n));case 9:t++,f.next=4;break;case 12:return f.next=14,(0,r.takeEvery)(o.SU_SELECTBOX_BOX_NONSELECT,regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,r.put)((0,i.Saga_SelectBox_Box_NonSelect)(t.payload));case 2:case"end":return e.stop()}},e,this)}));case 14:return f.next=16,(0,r.takeEvery)(o.SU_SELECTBOX_BOX_SELECT,regeneratorRuntime.mark(function e(t){var n,o,u;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,r.put)((0,i.Saga_SelectBox_Box_Select)(t.payload));case 2:return e.next=4,(0,r.select)(function(e){return e.links});case 4:return n=e.sent,e.next=7,(0,r.select)(function(e){return e.boxs});case 7:if(o=e.sent,""==(u=c.Link.getSozaiIdFromBoxId(n,o,t.payload.id))){e.next=12;break}return e.next=12,(0,r.put)((0,a.Saga_ToolBoxSozai_Sozai_Select)({sozai_id:u}));case 12:case"end":return e.stop()}},e,this)}));case 16:return f.next=18,(0,r.takeEvery)(o.SU_SELECTBOX_EDITBOX_MOVEEND,regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,r.put)((0,i.Saga_SelectBox_EditBox_MoveEnd)(t.payload));case 2:case"end":return e.stop()}},e,this)}));case 18:return f.next=20,(0,r.takeEvery)(o.SU_SELECTBOX_EDITBOX_CHANGESIZE,regeneratorRuntime.mark(function e(t){var n,o;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,r.put)((0,i.Saga_SelectBox_EditBox_ChangeSize)(t.payload));case 2:return e.next=4,(0,r.select)(function(e){return e.boxs});case 4:n=e.sent,o=l.Box.getBox(n,t.payload.box_id),e.t0=o.type,e.next="text"===e.t0?9:"image"===e.t0?12:13;break;case 9:return e.next=11,(0,r.fork)(s.nagashiExecBox,t.payload.box_id);case 11:case 12:return e.abrupt("break",13);case 13:case"end":return e.stop()}},e,this)}));case 20:return f.next=22,(0,r.takeEvery)(o.SU_SELECTBOX_EDITBOX_DELETEKEYPRESS,regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,r.put)((0,u.SU_ToolBoxLink_DeleteButton_Click)(t.payload));case 2:case"end":return e.stop()}},e,this)}));case 22:case"end":return f.stop()}},f,this)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=f;var r=n(36),o=c(n(197)),i=c(n(196)),a=c(n(195)),u=c(n(194)),s=c(n(193));function c(e){return e&&e.__esModule?e:{default:e}}var l=regeneratorRuntime.mark(f);function f(){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,r.fork)(o.default);case 2:return e.next=4,(0,r.fork)(i.default);case 4:return e.next=6,(0,r.fork)(a.default);case 6:return e.next=8,(0,r.fork)(u.default);case 8:return e.next=10,(0,r.fork)(s.default);case 10:case"end":return e.stop()}},l,this)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.contextmenu=void 0;var r=n(70);t.contextmenu=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{openclose:"close",x:0,y:0},t=arguments[1];switch(t.type){case r.SAGA_CONTEXTMENU_OPEN:return{openclose:"open",x:t.payload.x,y:t.payload.y};case r.SAGA_CONTEXTMENU_CLOSE:return{openclose:"close",x:0,y:0};default:return e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.dandd=void 0;var r=n(141);t.dandd=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{view:"false"},t=arguments[1],n=[];switch(t.type){case r.SAGA_DANDD_MOUSEDOWN:return t.payload;default:return(n=JSON.parse(JSON.stringify(e))).view="false",n}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.editonoff=void 0;var r=n(44);t.editonoff=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"on",t=arguments[1];switch(t.type){case r.SAGA_EDITONOFF_CHANGE:return t.payload.onoff;default:return e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.lines=void 0;n(14),n(145);var r=n(10),o=n(44);t.lines=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments[1],n=void 0;switch(t.type){case o.SAGA_LAYOUT_CALL:return n=JSON.parse(JSON.stringify(r.PresenLine[t.payload.pattern])),n;default:return e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.links=void 0;var r=n(69),o=n(64),i=n(44);t.links=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments[1],n=void 0,a=void 0;switch(t.type){case i.SAGA_LINK_CALL:return n=JSON.parse(JSON.stringify(t.payload.links));case r.SAGA_TOOLBOXLINK_LINK_CREATE:return n=JSON.parse(JSON.stringify(e)),a={group_id:t.payload.group_id,sozai_id:t.payload.sozai_id},n.push(a),n;case r.SAGA_TOOLBOXLINK_LINK_DELETE:n=JSON.parse(JSON.stringify(e));for(var u=0;u<n.length;u++)if(n[u].group_id==t.payload.group_id){n.splice(u,1);break}return n;case o.SAGA_TOOLBOXSOZAI_SOZAI_DELETE:n=JSON.parse(JSON.stringify(e));for(var s=0;s<n.length;s++)if(n[s].sozai_id==t.payload.sozai_id){n.splice(s,1);break}return n;case i.SAGA_LAYOUT_CALL:return n=[];default:return e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.sozai=void 0;var r=n(142),o=n(10),i=n(64),a=n(44);t.sozai=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments[1],n=void 0,u=void 0;switch(t.type){case a.SAGA_SOZAI_CALL:n=JSON.parse(JSON.stringify(o.PresenSozai[t.payload.pattern]));for(var s=0;s<n.length;s++)"text"==n[s].type&&(n[s].mojiObjAry=r.Text.createMojiObjAry(n[s].text));return n;case i.SAGA_TOOLBOXSOZAI_SOZAI_SELECT:n=JSON.parse(JSON.stringify(e));for(var c=0;c<n.length;c++)n[c].select="";for(var l=0;l<n.length;l++)if(n[l].sozai_id==t.payload.sozai_id){n[l].select="on";break}return n;case i.SAGA_TOOLBOXSOZAI_SOZAI_TOGGLE:n=JSON.parse(JSON.stringify(e));for(var f=-1,p=void 0,d=0;d<n.length;d++)if(n[d].sozai_id==t.payload.sozai_id){f=d,p=n[d].select;break}if(-1==f)return n;for(var h=0;h<n.length;h++)n[h].select="";return p="on"==p?"":"on",n[f].select=p,n;case i.SAGA_TOOLBOXSOZAI_SOZAI_UPDATE:n=JSON.parse(JSON.stringify(e));for(var g=0;g<n.length;g++)if(n[g].sozai_id==t.payload.sozai.sozai_id){n[g].type=t.payload.sozai.type,n[g].text=t.payload.sozai.text,n[g].mojiObjAry=r.Text.createMojiObjAry(t.payload.sozai.text),n[g].image=t.payload.sozai.image;break}return n;case i.SAGA_TOOLBOXSOZAI_SOZAI_DELETE:n=JSON.parse(JSON.stringify(e));for(var y=0;y<n.length;y++)n[y].select="";for(var v=0;v<n.length;v++)if(n[v].sozai_id==t.payload.sozai_id){n.splice(v,1);break}return n;case i.SAGA_TOOLBOXSOZAI_SOZAI_CREATE:n=JSON.parse(JSON.stringify(e));for(var _=0;_<n.length;_++)n[_].select="";return u={sozai_id:t.payload.sozai_id,type:t.payload.type,text:t.payload.text,mojiObjAry:r.Text.createMojiObjAry(t.payload.text),image:t.payload.image,select:"on"},n.push(u),n;default:return e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.toolboxs=void 0;var r=n(143),o=n(71),i=n(44);t.toolboxs=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[{toolbox_id:1,type:"scale",x:0,y:0,w:200,h:40,view:"true"},{toolbox_id:2,type:"boxdata",x:0,y:0,w:200,h:140,view:"true"},{toolbox_id:3,type:"textdata",x:0,y:0,w:200,h:160,view:"false"},{toolbox_id:4,type:"sozai",x:0,y:0,w:200,h:400,view:"true"},{toolbox_id:5,type:"link",x:0,y:0,w:200,h:470,view:"false"},{toolbox_id:6,type:"presen",x:0,y:0,w:200,h:100,view:"true"}],t=arguments[1],n=void 0;switch(t.type){case r.SAGA_TOOLBOX_MOVEEND:n=JSON.parse(JSON.stringify(e));var a=void 0;for(a=0;a<n.length;a++)if(n[a].toolbox_id==t.payload.toolbox_id){n[a].x=t.payload.x,n[a].y=t.payload.y;break}var u=n.slice(a,a+1);return n.splice(a,1),n=n.concat(u),n;case o.SAGA_SELECTBOX_BOX_SELECT:n=JSON.parse(JSON.stringify(e));for(var s=0;s<n.length;s++)"textdata"==n[s].type&&("text"==t.payload.type?n[s].view="true":n[s].view="false");return n;case o.SAGA_SELECTBOX_BOX_NONSELECT:n=JSON.parse(JSON.stringify(e));for(var c=0;c<n.length;c++)if("textdata"==n[c].type){n[c].view="false";break}return n;case i.SAGA_EDITONOFF_CHANGE:n=JSON.parse(JSON.stringify(e));for(var l=0;l<n.length;l++)"on"==t.payload.onoff?(n[l].view="true","link"==n[l].type&&(n[l].view="false")):(n[l].view="false","presen"!=n[l].type&&"scale"!=n[l].type||(n[l].view="true"));return n;default:return e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.focusbox=void 0;var r=n(71),o=n(91),i=n(70);t.focusbox=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{box_id:0,group_id:0,group_no:0,type:""},t=arguments[1];switch(t.type){case r.SAGA_SELECTBOX_BOX_NONSELECT:return{box_id:0,group_id:0,box_no:0,type:""};case r.SAGA_SELECTBOX_BOX_SELECT:return{box_id:t.payload.box_id,group_id:t.payload.group_id,group_no:t.payload.group_no,type:t.payload.type};case o.SAGA_TOOLBOXBOXDATA_BOXDATA_UPDATE:return{box_id:t.payload.box.box_id,group_id:t.payload.box.group_id,group_no:t.payload.box.group_no,type:t.payload.box.type};case o.SAGA_TOOLBOXBOXDATA_BOXDATA_DELETE:return{box_id:0,group_id:0,group_no:0,type:""};case o.SAGA_TOOLBOXBOXDATA_BOXDATA_CREATE:return{box_id:t.payload.box.box_id,group_id:t.payload.box.group_id,group_no:t.payload.box.group_no,type:t.payload.box.type};case i.SAGA_CONTEXTMENU_NEWBOXTEXT:case i.SAGA_CONTEXTMENU_NEWBOXIMAGE:return{box_id:t.payload.box_id,group_id:t.payload.group_id,group_no:t.payload.group_no,type:t.payload.type};default:return e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.boxs=void 0;n(14);var r=n(145),o=n(35),i=n(10),a=n(71),u=n(91),s=n(144),c=(n(64),n(63)),l=n(70),f=n(44);t.boxs=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments[1],n=void 0,p=void 0,d=void 0,h=void 0,g=void 0,y=void 0;switch(t.type){case f.SAGA_LAYOUT_CALL:n=JSON.parse(JSON.stringify(i.PresenBox[t.payload.pattern]));for(var v=0;v<n.length;v++)switch(n[v].type){case"text":"tate"==n[v].text.kumihoko?(g=n[v].y2-n[v].y1,y=n[v].x2-n[v].x1):(g=n[v].x2-n[v].x1,y=n[v].y2-n[v].y1);var _=r.TextGrid.getTextGridAry(g,y,n[v].text.padding_js,n[v].text.padding_je,n[v].text.padding_gs,n[v].text.padding_ge,n[v].text.size_j,n[v].text.size_g,n[v].text.gyokan);n[v].text.grid=_,n[v].text.result=[],n[v].text.afure="";break;case"image":n[v].image.url=""}return n;case a.SAGA_SELECTBOX_EDITBOX_MOVEEND:n=JSON.parse(JSON.stringify(e));for(var x=0;x<n.length;x++)if(n[x].box_id==t.payload.box_id){n[x].x1=t.payload.x1,n[x].y1=t.payload.y1,n[x].x2=t.payload.x2,n[x].y2=t.payload.y2;break}return n;case a.SAGA_SELECTBOX_EDITBOX_CHANGESIZE:n=JSON.parse(JSON.stringify(e));for(var m=0;m<n.length;m++)if(n[m].box_id==t.payload.box_id){switch(n[m].x1=t.payload.x1,n[m].y1=t.payload.y1,n[m].x2=t.payload.x2,n[m].y2=t.payload.y2,n[m].type){case"text":"tate"==n[m].text.kumihoko?(g=n[m].y2-n[m].y1,y=n[m].x2-n[m].x1):(g=n[m].x2-n[m].x1,y=n[m].y2-n[m].y1);var b=r.TextGrid.getTextGridAry(g,y,n[m].text.padding_js,n[m].text.padding_je,n[m].text.padding_gs,n[m].text.padding_ge,n[m].text.size_j,n[m].text.size_g,n[m].text.gyokan);n[m].text.grid=b}break}return n;case u.SAGA_TOOLBOXBOXDATA_BOXDATA_UPDATE:n=JSON.parse(JSON.stringify(e));for(var O=0;O<n.length;O++)if(n[O].box_id==t.payload.box.box_id){n[O].group_id=t.payload.box.group_id,n[O].group_no=t.payload.box.group_no;break}return n;case s.SAGA_TOOLBOXTEXTDATA_TEXTDATA_UPDATE:n=JSON.parse(JSON.stringify(e));for(var w=0;w<n.length;w++)if(n[w].box_id==t.payload.box.box_id){switch(n[w].type){case"text":n[w].text.padding_js=t.payload.box.text.padding_js,n[w].text.padding_je=t.payload.box.text.padding_je,n[w].text.padding_gs=t.payload.box.text.padding_gs,n[w].text.padding_ge=t.payload.box.text.padding_ge,n[w].text.kumihoko=t.payload.box.text.kumihoko,n[w].text.gyokan=t.payload.box.text.gyokan,n[w].text.font=t.payload.box.text.font,"tate"==n[w].text.kumihoko?(g=n[w].y2-n[w].y1,y=n[w].x2-n[w].x1):(g=n[w].x2-n[w].x1,y=n[w].y2-n[w].y1);var S=r.TextGrid.getTextGridAry(g,y,n[w].text.padding_js,n[w].text.padding_je,n[w].text.padding_gs,n[w].text.padding_ge,n[w].text.size_j,n[w].text.size_g,n[w].text.gyokan);n[w].text.grid=S}break}return n;case u.SAGA_TOOLBOXBOXDATA_BOXDATA_DELETE:n=JSON.parse(JSON.stringify(e)),d="";for(var k=0;k<n.length;k++)if(n[k].box_id==t.payload.box_id){d=n[k].group_id,n.splice(k,1);break}h=o.Box.getGroupNoAry(n,d);for(var E=1,T=0;T<h.length;T++)for(var C=0;C<n.length;C++)if(n[C].group_id==d&&n[C].group_no==h[T]){n[C].group_no=E,E++;break}return n;case u.SAGA_TOOLBOXBOXDATA_BOXDATA_CREATE:if(n=JSON.parse(JSON.stringify(e)),"text"==(p={box_id:t.payload.box.box_id,group_id:t.payload.box.group_id,group_no:t.payload.box.group_no,type:t.payload.box.type,x1:100,y1:100,x2:200,y2:200,text:{kumihoko:"tate",padding_js:10,padding_je:10,padding_gs:10,padding_ge:10,size_j:10,size_g:10,gyokan:5,font:1}}).type){"tate"==p.text.kumihoko?(g=p.y2-p.y1,y=p.x2-p.x1):(g=p.x2-p.x1,y=p.y2-p.y1);var j=r.TextGrid.getTextGridAry(g,y,p.text.padding_js,p.text.padding_je,p.text.padding_gs,p.text.padding_ge,p.text.size_j,p.text.size_g,p.text.gyokan);p.text.grid=j,p.text.result=[],p.text.afure=0}return n.push(p),n;case c.SAGA_NAGASHIRESULT_CREATE:n=JSON.parse(JSON.stringify(e));for(var A=0;A<n.length;A++)if(n[A].box_id==t.payload.box_id){n[A].text.result=t.payload.nagashiResult,n[A].text.afure=0;break}return n;case c.SAGA_NAGASHI_IMAGE:n=JSON.parse(JSON.stringify(e));for(var P=0;P<n.length;P++)if(n[P].box_id==t.payload.box_id){n[P].image.url=t.payload.imageUrl;break}return n;case c.SAGA_NAGASHI_REMOVE:n=JSON.parse(JSON.stringify(e));for(var N=0;N<n.length;N++)if(n[N].group_id==t.payload.group_id)switch(n[N].type){case"text":n[N].text.result=[],n[N].text.afure=0;break;case"image":n[N].image.url=""}return n;case c.SAGA_NAGASHIRESULT_AFURE:n=JSON.parse(JSON.stringify(e)),d=t.payload.group_id;for(var M=(h=o.Box.getGroupNoAry(n,d)).pop(),B=o.Box.getBoxId(n,d,M),D=0;D<n.length;D++)if(n[D].box_id==B){n[D].text.afure=t.payload.afure;break}return n;case l.SAGA_CONTEXTMENU_NEWBOXTEXT:n=JSON.parse(JSON.stringify(e)),"tate"==(p={box_id:t.payload.box_id,group_id:t.payload.group_id,group_no:t.payload.group_no,type:t.payload.type,x1:t.payload.x1,y1:t.payload.y1,x2:t.payload.x2,y2:t.payload.y2,text:{kumihoko:t.payload.text.kumihoko,padding_js:t.payload.text.padding_js,padding_je:t.payload.text.padding_je,padding_gs:t.payload.text.padding_gs,padding_ge:t.payload.text.padding_ge,size_j:t.payload.text.size_j,size_g:t.payload.text.size_g,gyokan:t.payload.text.gyokan,font:t.payload.text.font,grid:[],result:[],afure:0}}).text.kumihoko?(g=p.y2-p.y1,y=p.x2-p.x1):(g=p.x2-p.x1,y=p.y2-p.y1);var z=r.TextGrid.getTextGridAry(g,y,p.text.padding_js,p.text.padding_je,p.text.padding_gs,p.text.padding_ge,p.text.size_j,p.text.size_g,p.text.gyokan);return p.text.grid=z,p.text.result=[],p.text.afure=0,n.push(p),n;case l.SAGA_CONTEXTMENU_NEWBOXIMAGE:return n=JSON.parse(JSON.stringify(e)),p={box_id:t.payload.box_id,group_id:t.payload.group_id,group_no:t.payload.group_no,type:t.payload.type,x1:t.payload.x1,y1:t.payload.y1,x2:t.payload.x2,y2:t.payload.y2,image:{url:t.payload.image.url}},n.push(p),n;case l.SAGA_CONTEXTMENU_BOXTOFRONT:n=JSON.parse(JSON.stringify(e)),p="";for(var L=0;L<n.length;L++)if(n[L].box_id==t.payload.box_id){p=n[L],n.splice(L,1);break}return n.push(p),n;case l.SAGA_CONTEXTMENU_BOXTOBACK:n=JSON.parse(JSON.stringify(e)),p="";for(var U=0;U<n.length;U++)if(n[U].box_id==t.payload.box_id){p=n[U],n.splice(U,1);break}return n.unshift(p),n;default:return e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.scale=void 0;var r=n(146);t.scale=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:100,t=arguments[1];switch(t.type){case r.SAGA_SCALE_CHANGE:return t.payload.scale;default:return e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(138),o=n(208),i=n(207),a=n(206),u=n(205),s=n(204),c=n(203),l=n(202),f=n(201),p=n(200),d=n(199),h=(0,r.combineReducers)({scale:o.scale,boxs:i.boxs,focusbox:a.focusbox,toolboxs:u.toolboxs,sozai:s.sozai,links:c.links,lines:l.lines,editonoff:f.editonoff,dandd:p.dandd,contextmenu:d.contextmenu});t.default=h},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(5),u=(r=a)&&r.__esModule?r:{default:r};var s={container:{textAlign:"left"},button:{marginTop:"2px",width:"38px",height:"14px",textAlign:"center",fontSize:"12px",lineHeight:"14px",border:"1px solid #333",borderRadius:"2px",backgroundColor:"lightblue",userSelect:"none",cursor:"pointer"},button2:{marginTop:"2px",width:"38px",height:"14px",textAlign:"center",fontSize:"12px",lineHeight:"14px",border:"1px solid #333",borderRadius:"2px",backgroundColor:"lightgreen",userSelect:"none",cursor:"pointer"}},c=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,u.default.Component),i(t,[{key:"download",value:function(){var e=document.getElementById("viewbox").innerHTML;e='<?xml version="1.0" encoding="utf-8"?>'+e;var t=new Blob([e],{type:"text/plain"}),n=document.createElement("a");n.href=window.URL.createObjectURL(t),n.target="_blank",n.download="shimen.svg",n.click()}},{key:"render",value:function(){var e=this;return u.default.createElement("div",{style:s.container},u.default.createElement("div",{style:o({},s.button,{float:"left"}),onClick:function(){return e.props.onCallLayout({pattern:"A"})}},"lay A"),u.default.createElement("div",{style:o({},s.button,{float:"left",marginLeft:"5px"}),onClick:function(){return e.props.onCallLayout({pattern:"B"})}},"lay B"),u.default.createElement("div",{style:o({},s.button,{float:"right",marginRight:"0px"}),onClick:function(){return e.props.onEditOnClick()}},"E On"),u.default.createElement("div",{style:{clear:"both"}}),u.default.createElement("div",{style:o({},s.button2,{float:"left"}),onClick:function(){return e.props.onCallSozai({pattern:"A"})}},"Soz A"),u.default.createElement("div",{style:o({},s.button2,{float:"left",marginLeft:"5px"}),onClick:function(){return e.props.onCallSozai({pattern:"B"})}},"Soz B"),u.default.createElement("div",{style:o({},s.button,{float:"right",marginRight:"0px"}),onClick:function(){return e.props.onEditOffClick()}},"E Off"),u.default.createElement("div",{style:{clear:"both"}}),u.default.createElement("div",{style:o({},s.button2,{float:"left",marginLeft:"45px",backgroundColor:"lightyellow"}),onClick:function(){return e.props.onCallLink({pattern:"B"})}},"Lik B"),u.default.createElement("div",{style:{clear:"both"}}),u.default.createElement("div",{style:o({},s.button2,{float:"right",marginRight:"0px",backgroundColor:"orange"}),onClick:function(){return e.download()}},"DL"))}}]),t}();t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=n(9),a=n(210),u=(r=a)&&r.__esModule?r:{default:r},s=n(147);var c=(0,i.connect)(function(e,t){return o({},e)},function(e,t){return{dispatch:e}},function(e,t,n){return{onCallLayout:function(e){t.dispatch((0,s.SU_ToolBoxPresen_LayoutCallButton_Click)(e))},onCallSozai:function(e){t.dispatch((0,s.SU_ToolBoxPresen_SozaiCallButton_Click)(e))},onCallLink:function(e){t.dispatch((0,s.SU_ToolBoxPresen_LinkCallButton_Click)(e))},onEditOnClick:function(){t.dispatch((0,s.SU_ToolBoxPresen_EditOnOffButton_Click)({onoff:"on"}))},onEditOffClick:function(){t.dispatch((0,s.SU_ToolBoxPresen_EditOnOffButton_Click)({onoff:"off"}))}}})(u.default);t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(5),u=(r=a)&&r.__esModule?r:{default:r},s=(n(73),n(35));var c={container:{textAlign:"left",paddingTop:"5px"},line:{height:"20px",fontSize:"12px",lineHeight:"20px"},button:{width:"40px",height:"14px",fontSize:"12px",textAlign:"center",lineHeight:"14px",border:"1px solid gray",backgroundColor:"lightgreen",borderRadius:"2px"},boxlistbox:{width:"100%",height:"115px",overflowY:"scroll",outline:"1px solid #a8a8a8",backgroundColor:"white"},sozailistbox:{width:"100%",height:"115px",overflowY:"scroll",outline:"1px solid #a8a8a8",backgroundColor:"white"},linklistbox:{width:"100%",height:"115px",overflowY:"scroll",outline:"1px solid #a8a8a8",backgroundColor:"white"},list:{width:"100%",height:"20px",lineHeight:"20px",borderBottom:"1px solid gray"},linklist:{width:"100%",height:"40px",lineHeight:"20px",borderBottom:"1px solid gray",backgroundColor:"lightgreen"}},l="lightyellow",f="lightcyan",p=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={group_id:"",sozai_id:""},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,u.default.Component),i(t,[{key:"componentWillReceiveProps",value:function(e){this.setState({group_id:"",sozai_id:""})}},{key:"clickBoxList",value:function(e){var t=void 0;t=this.state.group_id==e?"":e,this.setState({group_id:t})}},{key:"clickSozaiList",value:function(e){var t=void 0;t=this.state.sozai_id==e?"":e,this.setState({sozai_id:t})}},{key:"clickCreateButton",value:function(){if(""!=this.state.group_id&&""!=this.state.sozai_id){var e=this.props.getTypeBoxGroup(this.state.group_id),t=this.props.getTypeSozai(this.state.sozai_id),n="ng";"text"==e?"text"==t&&(n="ok"):"image"==e&&"image"==t&&(n="ok"),"ng"!=n?this.props.onClickCreateButton({group_id:this.state.group_id,sozai_id:this.state.sozai_id}):alert("ボックスのタイプと素材のタイプが異なります。リンクできません")}}},{key:"clickDeleteButton",value:function(e){0!=confirm("削除します。よろしいですか？")&&this.props.onClickDeleteButton({group_id:e})}},{key:"isIncludeLinkListGroup",value:function(e){for(var t=0;t<this.props.links.length;t++)if(this.props.links[t].group_id==e)return!0;return!1}},{key:"isIncludeLinkListSozaiId",value:function(e){for(var t=0;t<this.props.links.length;t++)if(this.props.links[t].sozai_id==e)return!0;return!1}},{key:"grouplist",value:function(){for(var e=this,t=[],n=[],r=s.Box.getGroupAry(this.props.boxs),i=0;i<r.length;i++)1!=this.isIncludeLinkListGroup(r[i])&&t.push({group_id:r[i]});for(var a=function(r){var i=void 0;if(e.state.group_id==t[r].group_id)i="red";else{var a=e.props.getTypeBoxGroup(t[r].group_id);"text"==a?i=l:"image"==a&&(i=f)}n.push(u.default.createElement("div",{style:o({},c.list,{backgroundColor:i}),onClick:function(n){return e.clickBoxList(t[r].group_id)}},t[r].group_id))},p=0;p<t.length;p++)a(p);return n}},{key:"sozailist",value:function(){for(var e=this,t=[],n=[],r=0;r<this.props.sozai.length;r++)1!=this.isIncludeLinkListSozaiId(this.props.sozai[r].sozai_id)&&t.push({sozai_id:this.props.sozai[r].sozai_id});for(var i=function(r){var i=void 0;if(e.state.sozai_id==t[r].sozai_id)i="red";else{var a=e.props.getTypeSozai(t[r].sozai_id);"text"==a?i=l:"image"==a&&(i=f)}n.push(u.default.createElement("div",{style:o({},c.list,{backgroundColor:i}),onClick:function(n){return e.clickSozaiList(t[r].sozai_id)}},t[r].sozai_id))},a=0;a<t.length;a++)i(a);return n}},{key:"linklist",value:function(){for(var e=this,t=[],n=function(n){t.push(u.default.createElement("div",{style:o({},c.linklist)},u.default.createElement("span",{style:{width:"9px",height:"9px",backgroundColor:"lightgray"},onClick:function(t){return e.clickDeleteButton(e.props.links[n].group_id)}},"✕")," ",e.props.links[n].group_id,u.default.createElement("br",null),u.default.createElement("span",{style:{width:"9px",height:"9px"}},"　")," ",e.props.links[n].sozai_id))},r=0;r<this.props.links.length;r++)n(r);return t}},{key:"render",value:function(){var e=this;return u.default.createElement("div",{style:c.container},u.default.createElement("div",{style:o({},c.line,{color:"blue"})},"グループリスト"),u.default.createElement("div",{style:o({},c.boxlistbox)},this.grouplist()),u.default.createElement("div",{style:o({},c.line,{color:"blue"})},"素材リスト"),u.default.createElement("div",{style:o({},c.sozailistbox)},this.sozailist()),u.default.createElement("div",{style:o({},c.button,{width:"60px",float:"right",marginTop:"5px"}),onClick:function(t){return e.clickCreateButton()}},"リンク"),u.default.createElement("div",{style:{clear:"both"}}),u.default.createElement("div",{style:o({},c.line,{color:"green"})},"リンクリスト"),u.default.createElement("div",{style:o({},c.linklistbox)},this.linklist()))}}]),t}();t.default=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=n(9),a=n(212),u=(r=a)&&r.__esModule?r:{default:r},s=n(35),c=n(92),l=n(72);var f=(0,i.connect)(function(e,t){return o({},e)},function(e,t){return{dispatch:e}},function(e,t,n){return{links:e.links,boxs:e.boxs,sozai:e.sozai,onClickCreateButton:function(e){t.dispatch((0,l.SU_ToolBoxLink_CreateButton_Click)(e))},onClickDeleteButton:function(e){t.dispatch((0,l.SU_ToolBoxLink_DeleteButton_Click)(e))},getTypeBoxGroup:function(t){var n=s.Box.getGroupNoAry(e.boxs,t),r=s.Box.getBoxId(e.boxs,t,n[0]);return s.Box.getBox(e.boxs,r).type},getTypeSozai:function(t){return c.Sozai.getSozai(e.sozai,t).type}}})(u.default);t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(5),u=(r=a)&&r.__esModule?r:{default:r};n(73);var s={container:{textAlign:"left",paddingTop:"5px"},line:{height:"20px",fontSize:"12px",lineHeight:"20px"},button:{width:"40px",height:"14px",fontSize:"12px",textAlign:"center",lineHeight:"14px",border:"1px solid gray",backgroundColor:"lightgreen",borderRadius:"2px"},input:{height:"9px"},listbox:{width:"100%",height:"115px",overflowY:"scroll",outline:"1px solid #a8a8a8",backgroundColor:"white"},textbox:{width:"174px",height:"175px",marginTop:"5px"},imagebox:{display:"table-cell",width:"174px",height:"175px",marginTop:"5px",backgroundColor:"gray",verticalAlign:"middle",textAlign:"center"},img:{maxWidth:"174px",maxHeight:"175px"},sozailist:{width:"100%",height:"20px",lineHeight:"20px",borderBottom:"1px solid gray",cursor:"pointer"}},c="lightyellow",l="lightcyan",f="red",p=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.button="",n.state={sozai_id:"",input_id:"",type:"",text:"",imageUrl:""},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,u.default.Component),i(t,[{key:"componentWillReceiveProps",value:function(e){for(var t="",n=0;n<e.sozai.length;n++)if("on"==e.sozai[n].select){t=e.sozai[n];break}""==t?this.setState({sozai_id:"",input_id:"",type:"",text:"",imageUrl:""}):this.setState({sozai_id:t.id,type:t.type,text:t.text,imageUrl:t.imageUrl})}},{key:"clickList",value:function(e){this.props.onClickSozaiList({sozai_id:e.sozai_id})}},{key:"clickUpdateButton",value:function(){var e={sozai_id:this.state.sozai_id,type:this.state.type,text:this.state.text,imageUrl:this.state.imageUrl};this.props.onClickUpdateButton({sozai:e}),this.button="update"}},{key:"clickDeleteButton",value:function(e){0!=confirm("削除します。よろしいですか？")&&this.props.onClickDeleteButton({sozai_id:e})}},{key:"clickCreateButton",value:function(){if(""!=this.state.input_id&&""!=this.state.type)if(this.props.checkSozaiExist(this.state.input_id))alert("この素材IDは既に存在しています");else if("text"==this.state.type||"image"==this.state.type){var e="";"image"==this.state.type&&(e=this.state.text),this.props.onClickCreateButton({sozai_id:this.state.input_id,type:this.state.type,text:this.state.text,imageUrl:e}),this.setState({input_id:""})}else alert("「タイプ」は text または image と入力してください");else alert("素材IDおよびタイプを入力してください")}},{key:"sozailist",value:function(){var e=this;return this.props.sozai.map(function(t){var n=void 0;switch(t.type){case"text":n=c;break;case"image":n=l}return"on"==t.select&&(n=f),u.default.createElement("div",{style:o({},s.sozailist,{backgroundColor:n}),onClick:function(n){e.clickList(t)},onMouseDown:function(n){return n.stopPropagation(),n.preventDefault(),e.props.sozaiMouseDown({x:n.pageX,y:n.pageY,type:"sozai",value:t}),!1}},u.default.createElement("span",{style:{width:"9px",height:"9px",backgroundColor:"lightgray"},onClick:function(n){return e.clickDeleteButton(t.sozai_id)}},"✕")," ",t.sozai_id)})}},{key:"idtype",value:function(){var e=this;return""==this.state.sozai_id?[u.default.createElement("div",{style:o({},s.line)},"素材ID：",u.default.createElement("input",{type:"text",style:o({},s.input,{width:"80px"}),value:this.state.input_id,onChange:function(t){return e.setState({input_id:t.target.value})}})),u.default.createElement("div",{style:o({},s.line)},"タイプ：",u.default.createElement("input",{type:"text",style:o({},s.input,{width:"80px"}),value:this.state.type,onChange:function(t){return e.setState({type:t.target.value})}}))]:[u.default.createElement("div",{style:o({},s.line)},"素材ID：",this.state.sozai_id),u.default.createElement("div",{style:o({},s.line)},"タイプ：",this.state.type)]}},{key:"newupdatebutton",value:function(){var e=this,t=void 0;return""==this.state.sozai_id?t=[u.default.createElement("div",{style:o({},s.button,{width:"60px",float:"right"}),onClick:function(t){return e.clickCreateButton()}},"新規作成")]:"text"==this.state.type&&(t=[u.default.createElement("div",{style:o({},s.button,{float:"right"}),onClick:function(t){return e.clickUpdateButton()}},"更新")]),t}},{key:"sozaiarea",value:function(){var e=this;return""==this.state.sozai_id?[u.default.createElement("textarea",{id:"toolboxsozaitextarea",value:this.state.text,style:o({},s.textbox),onChange:function(t){return e.setState({text:t.target.value})}})]:"text"==this.state.type?[u.default.createElement("textarea",{id:"toolboxsozaitextarea",value:this.state.text,style:o({},s.textbox),onChange:function(t){return e.setState({text:t.target.value})}})]:[u.default.createElement("div",{id:"toolboxsozaiimagearea",style:o({},s.imagebox)},u.default.createElement("img",{src:this.state.imageUrl,style:o({},s.img)}))]}},{key:"render",value:function(){return u.default.createElement("div",{id:"toolboxsozai",style:s.container},u.default.createElement("div",{style:{height:"5px"}}),u.default.createElement("div",{style:o({},s.listbox,{marginBottom:"5px"})},this.sozailist()),this.idtype(),this.sozaiarea(),this.newupdatebutton())}}]),t}();t.default=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=n(9),a=n(214),u=(r=a)&&r.__esModule?r:{default:r},s=n(148),c=n(93);var l=(0,i.connect)(function(e,t){return o({},e)},function(e,t){return{dispatch:e}},function(e,t,n){return{sozai:e.sozai,onClickSozaiList:function(e){t.dispatch((0,s.SU_ToolBoxSozai_Sozai_Toggle)(e))},onClickUpdateButton:function(e){t.dispatch((0,s.SU_ToolBoxSozai_UpdateButton_Click)(e))},onClickDeleteButton:function(e){t.dispatch((0,s.SU_ToolBoxSozai_DeleteButton_Click)(e))},onClickCreateButton:function(e){t.dispatch((0,s.SU_ToolBoxSozai_CreateButton_Click)(e))},checkSozaiExist:function(t){for(var n=0;n<e.sozai.length;n++)if(e.sozai[n].sozai_id==t)return!0;return!1},sozaiMouseDown:function(e){t.dispatch((0,c.SU_DAndD_MouseDown)(e))}}})(u.default);t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(5),u=(r=a)&&r.__esModule?r:{default:r},s=n(73);var c={container:{textAlign:"left"},line:{height:"20px",fontSize:"12px",lineHeight:"20px"},button:{width:"40px",height:"14px",fontSize:"12px",textAlign:"center",lineHeight:"14px",border:"1px solid gray",backgroundColor:"lightgreen",borderRadius:"2px"},input:{height:"9px",fontSize:"9px"}},l=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={padding_js:e.box.text.padding_js,padding_je:e.box.text.padding_je,padding_gs:e.box.text.padding_gs,padding_ge:e.box.text.padding_ge,kumihoko:e.box.text.kumihoko,size_j:e.box.text.size_j,size_g:e.box.text.size_g,gyokan:e.box.text.gyokan,font:e.box.text.font},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,u.default.Component),i(t,[{key:"componentWillReceiveProps",value:function(e){this.setState({padding_js:e.box.text.padding_js,padding_je:e.box.text.padding_je,padding_gs:e.box.text.padding_gs,padding_ge:e.box.text.padding_ge,kumihoko:e.box.text.kumihoko,size_j:e.box.text.size_j,size_g:e.box.text.size_g,gyokan:e.box.text.gyokan,font:e.box.text.font})}},{key:"clickUpdateButton",value:function(){var e=this.props.box;""!==this.state.padding_js&&""!==this.state.padding_je&&""!==this.state.padding_gs&&""!==this.state.padding_ge&&""!==this.state.kumihoko&&""!==this.state.size_j&&""!==this.state.size_g&&""!==this.state.gyokan&&""!==this.state.font?"tate"==this.state.kumihoko||"yoko"==this.state.kumihoko?this.state.font<1||this.state.font>4?alert("「フォントNo」は、1 ～ 4 で入力してください"):(e.id=this.props.box.id,e.text.padding_js=this.state.padding_js,e.text.padding_je=this.state.padding_je,e.text.padding_gs=this.state.padding_gs,e.text.padding_ge=this.state.padding_ge,e.text.kumihoko=this.state.kumihoko,e.text.size_j=this.state.size_j,e.text.size_g=this.state.size_g,e.text.gyokan=this.state.gyokan,e.text.font=this.state.font,this.props.onClickUpdateButton({box:e})):alert("「組方向」は、tate または yoko と入力してください"):alert("全ての項目を入力してください")}},{key:"render",value:function(){var e=this;return u.default.createElement("div",{style:c.container},u.default.createElement("div",{style:o({},c.line)},"ﾊﾟﾃﾞｨﾝｸﾞ(字詰) S",u.default.createElement("input",{type:"text",value:this.state.padding_js,style:o({},c.input,{width:"25px"}),onChange:function(t){return e.setState({padding_js:s.String.toNumeric(t.target.value)})}}),"  E",u.default.createElement("input",{type:"text",value:this.state.padding_je,style:o({},c.input,{width:"25px"}),onChange:function(t){return e.setState({padding_je:s.String.toNumeric(t.target.value)})}})),u.default.createElement("div",{style:o({},c.line)},"ﾊﾟﾃﾞｨﾝｸﾞ(行送) S",u.default.createElement("input",{type:"text",value:this.state.padding_gs,style:o({},c.input,{width:"25px"}),onChange:function(t){return e.setState({padding_gs:s.String.toNumeric(t.target.value)})}}),"  E",u.default.createElement("input",{type:"text",value:this.state.padding_ge,style:o({},c.input,{width:"25px"}),onChange:function(t){return e.setState({padding_ge:s.String.toNumeric(t.target.value)})}})),u.default.createElement("div",{style:o({},c.line)},"組方向 ",u.default.createElement("input",{type:"text",value:this.state.kumihoko,style:o({},c.input,{width:"50px"}),onChange:function(t){return e.setState({kumihoko:t.target.value})}}),"  行間 ",u.default.createElement("input",{type:"text",value:this.state.gyokan,style:o({},c.input,{width:"30px"}),onChange:function(t){return e.setState({gyokan:s.String.toNumeric(t.target.value)})}})),u.default.createElement("div",{style:o({},c.line)},"文字サイズ（字詰）",u.default.createElement("input",{type:"text",value:this.state.size_j,style:o({},c.input,{width:"30px"}),onChange:function(t){return e.setState({size_j:s.String.toNumeric(t.target.value)})}})),u.default.createElement("div",{style:o({},c.line)},"文字サイズ（行送）",u.default.createElement("input",{type:"text",value:this.state.size_g,style:o({},c.input,{width:"30px"}),onChange:function(t){return e.setState({size_g:s.String.toNumeric(t.target.value)})}})),u.default.createElement("div",{style:o({},c.line)},"フォントNo.",u.default.createElement("input",{type:"text",value:this.state.font,style:o({},c.input,{width:"30px"}),onChange:function(t){return e.setState({font:s.String.toNumeric(t.target.value)})}})),u.default.createElement("div",{style:o({},c.line)},u.default.createElement("div",{style:o({},c.button,{float:"right"}),onClick:function(){return e.clickUpdateButton()}},"更新")))}}]),t}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=n(9),a=n(216),u=(r=a)&&r.__esModule?r:{default:r},s=n(14),c=n(149);var l=(0,i.connect)(function(e,t){return o({},e)},function(e,t){return{dispatch:e}},function(e,t,n){var r={box_id:"",text:{kumihoko:"",padding_js:"",padding_je:"",padding_gs:"",padding_ge:"",size_j:"",size_g:"",gyokan:"",font:""}};if(""!=e.focusbox.box_id)for(var o=0;o<e.boxs.length;o++)if(e.boxs[o].box_id==e.focusbox.box_id){var i=s.Zahyo.changeRectToArea(e.boxs[o].x1,e.boxs[o].y1,e.boxs[o].x2,e.boxs[o].y2);(r=e.boxs[o]).x=i.x,r.y=i.y,r.w=i.w,r.h=i.h;break}return{box:r,onClickUpdateButton:function(e){t.dispatch((0,c.SU_ToolBoxTextData_UpdateButton_Click)(e))}}})(u.default);t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.LibArray={setArrayUnique:function(e,t){for(var n=!1,r=0;r<e.length;r++)if(e[r]==t){n=!0;break}return 0==n&&e.push(t),e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(5),u=(r=a)&&r.__esModule?r:{default:r},s=n(73);var c={container:{textAlign:"left"},line:{height:"20px",fontSize:"12px",lineHeight:"20px"},button:{width:"40px",height:"14px",fontSize:"12px",textAlign:"center",lineHeight:"14px",border:"1px solid gray",backgroundColor:"lightgreen",borderRadius:"2px"},input:{height:"9px",fontSize:"9px"}},l=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={box_id:e.box.box_id,group_id:e.box.group_id,group_no:e.box.group_no,type:e.box.type},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,u.default.Component),i(t,[{key:"componentWillReceiveProps",value:function(e){this.setState({box_id:e.box.box_id,group_id:e.box.group_id,group_no:e.box.group_no,type:e.box.type})}},{key:"clickUpdateButton",value:function(){var e=this.props.box;""!==this.props.box.box_id&&""!==this.state.group_id&&""!==this.state.group_no&&""!==this.props.box.type?(e.box_id=this.props.box.box_id,e.group_id=this.state.group_id,e.group_no=this.state.group_no,e.type=this.props.box.type,this.props.onClickUpdateButton({box:e})):alert("全ての項目を入力してください")}},{key:"clickDeleteButton",value:function(){0!=confirm("ボックスを削除します。よろしいですか？")&&this.props.onClickDeleteButton({box_id:this.state.box_id})}},{key:"clickCreateButton",value:function(){var e=this.props.box;""!==this.state.box_id&&""!==this.state.group_id&&""!==this.state.group_no&&""!==this.state.type?this.props.checkKizonId(this.state.id)?alert("このボックスIDは既に存在します"):"text"==this.state.type||"image"==this.state.type?1!=this.props.isSameGroupAndNo(this.state.group_id,this.state.group_no)?"text"==this.state.type||1!=this.props.isSameGroup(this.state.group_id)?(e.box_id=this.state.box_id,e.group_id=this.state.group_id,e.group_no=this.state.group_no,e.type=this.state.type,this.props.onClickCreateButton({box:e})):alert("同じグループ名のボックスがあります。ボックスを作成できません。"):alert("同じグループ名とグループNoのボックスが存在します"):alert("「タイプ」は text または image と入力してください"):alert("全ての項目を入力してください")}},{key:"henshu",value:function(){var e=this;return u.default.createElement("div",{style:c.container},u.default.createElement("div",{style:o({},c.line)},"ボックスID:",u.default.createElement("span",{style:{width:"9px",height:"9px",backgroundColor:"lightgray"},onClick:function(t){return e.clickDeleteButton()}},"✕")," ",u.default.createElement("span",{style:{fontWeight:"bold",color:"blue"}},this.props.box.box_id)),u.default.createElement("div",{style:o({},c.line)},"タイプ： ",u.default.createElement("span",{style:{color:"green"}},this.props.box.type)),u.default.createElement("div",{style:o({},c.line)},"ｸﾞﾙｰﾌﾟID ",u.default.createElement("input",{type:"text",value:this.state.group_id,style:o({},c.input,{width:"100px"}),onChange:function(t){return e.setState({group_id:t.target.value})}})),u.default.createElement("div",{style:o({},c.line)},"No.",u.default.createElement("input",{type:"text",value:this.state.group_no,style:o({},c.input,{width:"20px"}),onChange:function(t){return e.setState({group_no:s.String.toNumeric(t.target.value)})}})),u.default.createElement("div",{style:o({},c.line)},"x:",this.props.box.x," y:",this.props.box.y," w:",this.props.box.w," h:",this.props.box.h),u.default.createElement("div",{style:o({},c.line)},u.default.createElement("div",{style:o({},c.button,{float:"right"}),onClick:function(){return e.clickUpdateButton()}},"更新")))}},{key:"shinki",value:function(){var e=this;return u.default.createElement("div",{style:c.container},u.default.createElement("div",{style:o({},c.line)},"ボックスID: ",u.default.createElement("input",{type:"text",value:this.state.box_id,style:o({},c.input,{width:"50px"}),onChange:function(t){return e.setState({box_id:t.target.value})}})),u.default.createElement("div",{style:o({},c.line)},"タイプ： ",u.default.createElement("input",{type:"text",value:this.state.type,style:o({},c.input,{width:"50px"}),onChange:function(t){return e.setState({type:t.target.value})}})),u.default.createElement("div",{style:o({},c.line)},"ｸﾞﾙｰﾌﾟID ",u.default.createElement("input",{type:"text",value:this.state.group_id,style:o({},c.input,{width:"100px"}),onChange:function(t){return e.setState({group_id:t.target.value})}})),u.default.createElement("div",{style:o({},c.line)},"No.",u.default.createElement("input",{type:"text",value:this.state.group_no,style:o({},c.input,{width:"20px"}),onChange:function(t){return e.setState({group_no:s.String.toNumeric(t.target.value)})}})),u.default.createElement("div",{style:o({},c.line)}),u.default.createElement("div",{style:o({},c.line)},u.default.createElement("div",{style:o({},c.button,{width:"60px",float:"right"}),onClick:function(){return e.clickCreateButton()}},"新規作成")))}},{key:"render",value:function(){return""==this.props.box.box_id?this.shinki():this.henshu()}}]),t}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=n(9),a=n(219),u=(r=a)&&r.__esModule?r:{default:r},s=n(14),c=n(35),l=n(94);var f=(0,i.connect)(function(e,t){return o({},e)},function(e,t){return{dispatch:e}},function(e,t,n){var r={box_id:"",group_id:"",group_no:"",type:"",text:{kumihoko:"",padding_js:"",padding_je:"",padding_gs:"",padding_ge:"",size_j:"",size_g:"",gyokan:""}};if(""!=e.focusbox.box_id)for(var o=0;o<e.boxs.length;o++)if(e.boxs[o].box_id==e.focusbox.box_id){var i=s.Zahyo.changeRectToArea(e.boxs[o].x1,e.boxs[o].y1,e.boxs[o].x2,e.boxs[o].y2);(r=e.boxs[o]).x=i.x,r.y=i.y,r.w=i.w,r.h=i.h;break}return{box:r,onClickUpdateButton:function(e){t.dispatch((0,l.SU_ToolBoxBoxData_UpdateButton_Click)(e))},onClickDeleteButton:function(e){t.dispatch((0,l.SU_ToolBoxBoxData_DeleteButton_Click)(e))},onClickCreateButton:function(e){t.dispatch((0,l.SU_ToolBoxBoxData_CreateButton_Click)(e))},checkKizonId:function(t){for(var n=0;n<e.boxs.length;n++)if(e.boxs[n].box_id==t)return!0;return!1},isSameGroupAndNo:function(t,n){return""!=c.Box.getBoxId(e.boxs,t,n)},isSameGroup:function(t){return c.Box.getGroupNoAry(e.boxs,t).length>0}}})(u.default);t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(5),u=(r=a)&&r.__esModule?r:{default:r};var s={container:{textAlign:"left"},per:{width:"40px",fontSize:"12px",textAlign:"left",lineHeight:"20px"},button:{marginTop:"2px",width:"38px",height:"14px",textAlign:"center",fontSize:"12px",lineHeight:"14px",border:"1px solid #333",borderRadius:"2px",backgroundColor:"lightgreen",userSelect:"none"}},c=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,u.default.Component),i(t,[{key:"render",value:function(){var e=this;return u.default.createElement("div",{style:s.container},u.default.createElement("div",{style:o({},s.per,{float:"left"})},this.props.scale," %"),u.default.createElement("div",{style:o({},s.button,{float:"right"}),onClick:function(){return e.props.onClick100PerButton()}},"100%"),u.default.createElement("div",{style:o({},s.button,{float:"right",marginRight:"5px"}),onClick:function(){return e.props.onClickMaxButton()}},"拡大"),u.default.createElement("div",{style:o({},s.button,{float:"right",marginRight:"5px"}),onClick:function(){return e.props.onClickMinButton()}},"縮小"))}}]),t}();t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=n(9),a=n(221),u=(r=a)&&r.__esModule?r:{default:r},s=n(150);var c=(0,i.connect)(function(e,t){return o({},e)},function(e,t){return{dispatch:e}},function(e,t,n){return{scale:e.scale,onClickMinButton:function(){t.dispatch((0,s.SU_ToolBoxScale_MinButton_Click)())},onClickMaxButton:function(){t.dispatch((0,s.SU_ToolBoxScale_MaxButton_Click)())},onClick100PerButton:function(){t.dispatch((0,s.SU_ToolBoxScale_100PerButton_Click)())}}})(u.default);t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=function(){return function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=n(5),s=(r=u)&&r.__esModule?r:{default:r};var c={container:{position:"absolute",borderRadius:"5px",boxShadow:"0 0 2px gray"},title:{width:"calc(100% - 2px - 20px)",height:"18px",border:"1px solid gray",padding:"0px 10px",fontSize:"12px",lineHeight:"18px",color:"#333",borderRadius:"5px 5px 0 0",textAlign:"left",backgroundColor:"#a1bde8",userSelect:"none"},body:{width:"calc(100% - 2px - 20px)",padding:"0px 10px",borderRadius:"0 0 5px 5px",borderLeft:"1px solid gray",borderRight:"1px solid gray",borderBottom:"1px solid gray",fontSize:"14px",textAlign:"left",backgroundColor:"#f3f3f5",userSelect:"none"}},l=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.boxorgpos={x:e.x,y:e.y},n.mousepos={x:0,y:0},n.state={x:n.boxorgpos.x,y:n.boxorgpos.y},n.mouseMove=n.mouseMove.bind(n),n.mouseUp=n.mouseUp.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,s.default.Component),a(t,[{key:"componentWillReceiveProps",value:function(e){this.boxorgpos={x:e.x,y:e.y},this.setState({x:e.x,y:e.y})}},{key:"mouseDown",value:function(e){e.stopPropagation(),e.preventDefault(),document.addEventListener("mousemove",this.mouseMove,!1),document.addEventListener("mouseup",this.mouseUp,!1),this.mousepos.x=e.pageX,this.mousepos.y=e.pageY}},{key:"mouseMove",value:function(e){e.stopPropagation(),e.preventDefault();var t=e.pageX,n=e.pageY,r=this.boxorgpos.x+(t-this.mousepos.x),o=this.boxorgpos.y+(n-this.mousepos.y),a=this.boxmovestop(r,o),u=i(a,2),s=u[0],c=u[1];this.setState({x:s,y:c})}},{key:"mouseUp",value:function(e){e.stopPropagation(),e.preventDefault(),document.removeEventListener("mousemove",this.mouseMove),document.removeEventListener("mouseup",this.mouseUp),this.props.endMoveBox({toolbox_id:this.props.toolbox_id,x:this.state.x,y:this.state.y})}},{key:"boxmovestop",value:function(e,t){var n=window.innerWidth,r=window.innerHeight;return e+this.props.w>=n&&(e=n-this.props.w),e<=0&&(e=0),t+20>=r&&(t=r-20),t<=0&&(t=0),[e,t]}},{key:"render",value:function(){var e=this;return s.default.createElement("div",{style:o({},c.container,{left:this.state.x+"px",top:this.state.y+"px",width:this.props.w+"px",height:this.props.h+"px"}),onClick:function(e){return e.stopPropagation(),e.preventDefault(),!1}},s.default.createElement("div",{style:c.title,onMouseDown:function(t){return e.mouseDown(t)}},this.props.title),s.default.createElement("div",{style:o({},c.body,{height:"calc("+this.props.h+"px - 20px"})},this.props.children))}}]),t}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=n(9),a=n(223),u=(r=a)&&r.__esModule?r:{default:r},s=n(151);var c=(0,i.connect)(function(e,t){return o({},e)},function(e,t){return{dispatch:e}},function(e,t,n){return o({},n,{endMoveBox:function(e){t.dispatch((0,s.SU_ToolBox_MoveEnd)(e))}})})(u.default);t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.Event={triggerEvent:function(e,t){if(document.createEvent)return(n=document.createEvent("HTMLEvents")).initEvent(t,!0,!0),e.dispatchEvent(n);var n=document.createEventObject();return e.fireEvent("on"+t,n)}}},function(e,t,n){"use strict";(function(t){function n(e){o.length||(r(),!0),o[o.length]=e}e.exports=n;var r,o=[],i=0,a=1024;function u(){for(;i<o.length;){var e=i;if(i+=1,o[e].call(),i>a){for(var t=0,n=o.length-i;t<n;t++)o[t]=o[t+i];o.length-=i,i=0}}o.length=0,i=0,!1}var s,c,l,f=void 0!==t?t:self,p=f.MutationObserver||f.WebKitMutationObserver;function d(e){return function(){var t=setTimeout(r,0),n=setInterval(r,50);function r(){clearTimeout(t),clearInterval(n),e()}}}"function"==typeof p?(s=1,c=new p(u),l=document.createTextNode(""),c.observe(l,{characterData:!0}),r=function(){s=-s,l.data=s}):r=d(u),n.requestFlush=r,n.makeRequestCallFromTimer=d}).call(this,n(61))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return e instanceof Object&&!Array.isArray(e)},e.exports=t.default},function(e,t,n){"use strict";function r(e,t){-1===e.indexOf(t)&&e.push(t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if(Array.isArray(t))for(var n=0,o=t.length;n<o;++n)r(e,t[n]);else r(e,t)},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,r,o){for(var i=0,a=e.length;i<a;++i){var u=e[i](t,n,r,o);if(u)return u}},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){if(e.hasOwnProperty(t)){for(var r={},o=e[t],a=(0,i.default)(t),u=Object.keys(n),s=0;s<u.length;s++){var c=u[s];if(c===t)for(var l=0;l<o.length;l++)r[o[l]+a]=n[t];r[c]=n[c]}return r}return n};var r,o=n(152),i=(r=o)&&r.__esModule?r:{default:r};e.exports=t.default},function(e,t,n){"use strict";var r=/[A-Z]/g,o=/^ms-/,i={};e.exports=function(e){return e in i?i[e]:i[e]=e.replace(r,"-$&").toLowerCase().replace(o,"-ms-")}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return(0,i.default)(e)};var r,o=n(231),i=(r=o)&&r.__esModule?r:{default:r};e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){return function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(5),u=(r=a)&&r.__esModule?r:{default:r},s=n(191),c=n(10),l=n(14),f=n(225);var p=s.StyleSheet.create({container:{position:"absolute",width:"300px",padding:"10px",backgroundColor:"#fefefe",border:"1px solid lightgray",boxShadow:"2px 2px 2px rgba(0, 0, 0, 0.4)",color:"#555",fontSize:"12px"},item:{padding:"5px",":hover":{backgroundColor:"#ddd",cursor:"pointer"}},grayout:{padding:"5px",color:"lightgray",cursor:"default"}}),d=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.clickDocument=n.clickDocument.bind(n),n.clickBase=n.clickBase.bind(n),n.clickNewBoxText=n.clickNewBoxText.bind(n),n.clickNewBoxImage=n.clickNewBoxImage.bind(n),n.clickCopyBoxOnGroup=n.clickCopyBoxOnGroup.bind(n),n.clickCopyBox=n.clickCopyBox.bind(n),n.clickSozaiUnlink=n.clickSozaiUnlink.bind(n),n.clickBoxRemove=n.clickBoxRemove.bind(n),n.clickBoxToFront=n.clickBoxToFront.bind(n),n.clickBoxToBack=n.clickBoxToBack.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,u.default.Component),i(t,[{key:"componentDidMount",value:function(){this.addEvent()}},{key:"componentWillUnmount",value:function(){this.removeEvent()}},{key:"addEvent",value:function(){var e=void 0;(e=document).addEventListener("click",this.clickDocument,!1),e.addEventListener("mousedown",this.clickDocument,!1),(e=document.getElementById("contextmenu")).addEventListener("click",this.clickBase,!1),e.addEventListener("mousedown",this.clickBase,!1),(e=document.getElementById("cm_newboxtext"))&&e.addEventListener("mousedown",this.clickNewBoxText,!1),(e=document.getElementById("cm_newboximage"))&&e.addEventListener("mousedown",this.clickNewBoxImage,!1),(e=document.getElementById("cm_copyboxongroup"))&&e.addEventListener("mousedown",this.clickCopyBoxOnGroup,!1),(e=document.getElementById("cm_copybox"))&&e.addEventListener("mousedown",this.clickCopyBox,!1),(e=document.getElementById("cm_sozaiunlink"))&&e.addEventListener("mousedown",this.clickSozaiUnlink,!1),(e=document.getElementById("cm_boxremove"))&&e.addEventListener("mousedown",this.clickBoxRemove,!1),(e=document.getElementById("cm_boxtofront"))&&e.addEventListener("mousedown",this.clickBoxToFront,!1),(e=document.getElementById("cm_boxtoback"))&&e.addEventListener("mousedown",this.clickBoxToBack,!1)}},{key:"removeEvent",value:function(){var e=void 0;(e=document).removeEventListener("click",this.clickDocument),e.removeEventListener("mousedown",this.clickDocument),(e=document.getElementById("contextmenu")).removeEventListener("click",this.clickBase),e.removeEventListener("mousedown",this.clickBase),(e=document.getElementById("cm_newboxtext"))&&e.removeEventListener("mousedown",this.clickNewBoxText),(e=document.getElementById("cm_newboximage"))&&e.removeEventListener("mousedown",this.clickNewBoxImage),(e=document.getElementById("cm_copyboxongroup"))&&e.removeEventListener("mousedown",this.clickCopyBoxOnGroup),(e=document.getElementById("cm_copybox"))&&e.removeEventListener("mousedown",this.clickCopyBox),(e=document.getElementById("cm_sozaiunlink"))&&e.removeEventListener("mousedown",this.clickSozaiUnlink),(e=document.getElementById("cm_boxremove"))&&e.removeEventListener("mousedown",this.clickBoxRemove),(e=document.getElementById("cm_boxtofront"))&&e.removeEventListener("mousedown",this.clickBoxToFront),(e=document.getElementById("cm_boxtoback"))&&e.removeEventListener("mousedown",this.clickBoxToBack)}},{key:"clickDocument",value:function(e){return e.stopPropagation(),e.preventDefault(),this.props.closeContextMenu(),!1}},{key:"clickBase",value:function(e){return e.stopPropagation(),e.preventDefault(),!1}},{key:"clickNewBoxText",value:function(e){e.stopPropagation(),e.preventDefault();var t=this.changeCursorToArea(this.props.x,this.props.y),n=o(t,2),r=n[0],i=n[1];return this.props.newBoxText({cur_x:r,cur_y:i}),f.Event.triggerEvent(document,"click"),!1}},{key:"clickNewBoxImage",value:function(e){e.stopPropagation(),e.preventDefault();var t=this.changeCursorToArea(this.props.x,this.props.y),n=o(t,2),r=n[0],i=n[1];return this.props.newBoxImage({cur_x:r,cur_y:i}),f.Event.triggerEvent(document,"click"),!1}},{key:"clickCopyBoxOnGroup",value:function(e){e.stopPropagation(),e.preventDefault();var t=this.changeCursorToArea(this.props.x,this.props.y),n=o(t,2),r=n[0],i=n[1];switch(this.props.focusbox.type){case"text":this.props.copyBoxTextOnGroup({cur_x:r,cur_y:i,box_id:this.props.focusbox.box_id,group_id:this.props.focusbox.group_id})}return f.Event.triggerEvent(document,"click"),!1}},{key:"clickCopyBox",value:function(e){e.stopPropagation(),e.preventDefault();var t=this.changeCursorToArea(this.props.x,this.props.y),n=o(t,2),r=n[0],i=n[1];switch(this.props.focusbox.type){case"text":this.props.copyBoxText({cur_x:r,cur_y:i,box_id:this.props.focusbox.box_id});break;case"image":this.props.copyBoxImage({cur_x:r,cur_y:i,box_id:this.props.focusbox.box_id})}return f.Event.triggerEvent(document,"click"),!1}},{key:"changeCursorToArea",value:function(e,t){var n=l.Cursor.curElemScaleScrollKiten(e,t,document.getElementById("viewbox"),this.props.scale/100),r=o(n,2),i=r[0],a=r[1];return[l.Zahyo.luToruX(i,c.Define.svgimagesize.width),l.Zahyo.luToruY(a,c.Define.svgimagesize.height)]}},{key:"clickSozaiUnlink",value:function(e){return e.stopPropagation(),e.preventDefault(),this.props.sozaiUnlink({group_id:this.props.focusbox.group_id}),f.Event.triggerEvent(document,"click"),!1}},{key:"clickBoxRemove",value:function(e){if(e.stopPropagation(),e.preventDefault(),f.Event.triggerEvent(document,"click"),0!=confirm("ボックスを削除します。よろしいですか？"))return this.props.boxRemove({box_id:this.props.focusbox.box_id}),!1}},{key:"clickBoxToFront",value:function(e){return e.stopPropagation(),e.preventDefault(),this.props.boxToFront({box_id:this.props.focusbox.box_id}),f.Event.triggerEvent(document,"click"),!1}},{key:"clickBoxToBack",value:function(e){return e.stopPropagation(),e.preventDefault(),this.props.boxToBack({box_id:this.props.focusbox.box_id}),f.Event.triggerEvent(document,"click"),!1}},{key:"items",value:function(){var e=[];return""==this.props.focusbox.box_id?(e.push(u.default.createElement("div",{id:"cm_newboxtext",className:(0,s.css)(p.item)},"新規作成（テキストボックス）")),e.push(u.default.createElement("div",{id:"cm_newboximage",className:(0,s.css)(p.item)},"新規作成（画像ボックス）"))):("text"!=this.props.focusbox.type&&"title"!=this.props.focusbox.type||e.push(u.default.createElement("div",{id:"cm_copyboxongroup",className:(0,s.css)(p.item)},"ボックスを複製（グループ化する）")),e.push(u.default.createElement("div",{id:"cm_copybox",className:(0,s.css)(p.item)},"ボックスを複製"))),""==this.props.focusbox.box_id||(e.push(u.default.createElement("hr",null)),e.push(u.default.createElement("div",{id:"cm_sozaiunlink",className:(0,s.css)(p.item)},"素材をはずす")),e.push(u.default.createElement("div",{id:"cm_boxremove",className:(0,s.css)(p.item)},"ボックスを削除"))),""==this.props.focusbox.box_id||(e.push(u.default.createElement("hr",null)),e.push(u.default.createElement("div",{id:"cm_boxtofront",className:(0,s.css)(p.item)},"最前面へ")),e.push(u.default.createElement("div",{id:"cm_boxtoback",className:(0,s.css)(p.item)},"最背面へ"))),e}},{key:"render",value:function(){return u.default.createElement("div",{id:"contextmenu",className:(0,s.css)(p.container),style:{left:this.props.x,top:this.props.y}},this.items())}}]),t}();t.default=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=n(9),a=n(233),u=(r=a)&&r.__esModule?r:{default:r},s=n(56);var c=(0,i.connect)(function(e,t){return o({},e)},function(e,t){return{dispatch:e}},function(e,t,n){return o({},n,{focusbox:e.focusbox,scale:e.scale,closeContextMenu:function(){t.dispatch((0,s.SU_ContextMenu_Close)())},newBoxText:function(e){t.dispatch((0,s.SU_ContextMenu_NewBoxText)(e))},newBoxImage:function(e){t.dispatch((0,s.SU_ContextMenu_NewBoxImage)(e))},copyBoxTextOnGroup:function(e){t.dispatch((0,s.SU_ContextMenu_CopyBoxTextOnGroup)(e))},copyBoxText:function(e){t.dispatch((0,s.SU_ContextMenu_CopyBoxText)(e))},copyBoxImage:function(e){t.dispatch((0,s.SU_ContextMenu_CopyBoxImage)(e))},sozaiUnlink:function(e){t.dispatch((0,s.SU_ContextMenu_SozaiUnlink)(e))},boxRemove:function(e){t.dispatch((0,s.SU_ContextMenu_BoxRemove)(e))},boxToFront:function(e){t.dispatch((0,s.SU_ContextMenu_BoxToFront)(e))},boxToBack:function(e){t.dispatch((0,s.SU_ContextMenu_BoxToBack)(e))}})})(u.default);t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(5),a=(r=i)&&r.__esModule?r:{default:r},u=n(14),s=n(10);var c=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.boxClick=n.boxClick.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),o(t,[{key:"componentDidMount",value:function(){document.getElementById("selectbox_"+this.props.box_id).addEventListener("click",this.boxClick,!1)}},{key:"boxClick",value:function(e){return e.stopPropagation(),e.preventDefault(),this.props.onClickBox({box_id:this.props.box_id,group_id:this.props.group_id,group_no:this.props.group_no,type:this.props.type}),!1}},{key:"render",value:function(){var e=u.Zahyo.ruToluRectToArea(this.props.x1,this.props.y1,this.props.x2,this.props.y2,s.Define.svgimagesize.width,s.Define.svgimagesize.height);return a.default.createElement("g",null,a.default.createElement("rect",{id:"selectbox_"+this.props.box_id,x:e.x,y:e.y,width:e.w,height:e.h,style:{fill:"black",fillOpacity:"0.0",stroke:"none"}}))}}]),t}();t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=n(9),a=n(235),u=(r=a)&&r.__esModule?r:{default:r},s=n(74);n(56);var c=(0,i.connect)(function(e,t){return o({},e)},function(e,t){return{dispatch:e}},function(e,t,n){return o({},n,{onClickBox:function(e){t.dispatch((0,s.SU_SelectBox_Box_Select)(e))}})})(u.default);t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(5),a=(r=i)&&r.__esModule?r:{default:r},u=n(14),s=n(10);var c=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.boxClick=n.boxClick.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),o(t,[{key:"componentDidMount",value:function(){document.getElementById("selectbox_"+this.props.box_id).addEventListener("click",this.boxClick,!1)}},{key:"boxClick",value:function(e){return e.stopPropagation(),e.preventDefault(),this.props.onClickBox({box_id:this.props.box_id,group_id:this.props.group_id,group_no:this.props.group_no,type:this.props.type}),!1}},{key:"render",value:function(){var e=u.Zahyo.ruToluRectToArea(this.props.x1,this.props.y1,this.props.x2,this.props.y2,s.Define.svgimagesize.width,s.Define.svgimagesize.height);return a.default.createElement("g",null,a.default.createElement("rect",{id:"selectbox_"+this.props.box_id,x:e.x,y:e.y,width:e.w,height:e.h,style:{fill:"blue",fillOpacity:"0.3",stroke:"none"}}),a.default.createElement("text",{x:e.x+5,y:e.y+20,style:{fontSize:15,stroke:"none",fill:"white",fillOpacity:"0.7"}},this.props.group_no))}}]),t}();t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=n(9),a=n(237),u=(r=a)&&r.__esModule?r:{default:r},s=n(74);n(56);var c=(0,i.connect)(function(e,t){return o({},e)},function(e,t){return{dispatch:e}},function(e,t,n){return o({},n,{onClickBox:function(e){t.dispatch((0,s.SU_SelectBox_Box_Select)(e))}})})(u.default);t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){return function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(5),u=(r=a)&&r.__esModule?r:{default:r},s=n(10);var c=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.boxorgpos={x:e.x,y:e.y,w:e.w,h:e.h},n.handleorgpos={x:e.x+e.w/2,y:e.y+e.h},n.mousepos={x:0,y:0},n.state={x:n.handleorgpos.x,y:n.handleorgpos.y},n.mouseMove=n.mouseMove.bind(n),n.mouseUp=n.mouseUp.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,u.default.Component),i(t,[{key:"componentWillReceiveProps",value:function(e){1==e.handleRefresh&&(this.boxorgpos={x:e.x,y:e.y,w:e.w,h:e.h},this.handleorgpos={x:e.x+e.w/2,y:e.y+e.h}),this.setState({x:e.x+e.w/2,y:e.y+e.h})}},{key:"mouseDown",value:function(e){e.stopPropagation(),e.preventDefault(),document.addEventListener("mousemove",this.mouseMove,!1),document.addEventListener("mouseup",this.mouseUp,!1),document.addEventListener("click",this.click,!1),this.mousepos.x=100*e.pageX/this.props.scale,this.mousepos.y=100*e.pageY/this.props.scale,this.props.handleMouseDown()}},{key:"mouseMove",value:function(e){e.stopPropagation(),e.preventDefault();var t=100*e.pageY/this.props.scale,n=this.handleorgpos.x,r=this.handleorgpos.y+(t-this.mousepos.y),i=this.checkgrid1block(n,r),a=o(i,2);n=a[0],r=a[1];var u=this.props.gridsnap(n,r),s=o(u,2);n=s[0],r=s[1];var c=this.props.handlestop(n,r),l=o(c,2);n=l[0],r=l[1],this.props.handleMove(this.boxorgpos.x,this.boxorgpos.y,this.boxorgpos.w,r-this.boxorgpos.y)}},{key:"mouseUp",value:function(e){e.stopPropagation(),e.preventDefault(),document.removeEventListener("mousemove",this.mouseMove),document.removeEventListener("mouseup",this.mouseUp);return document.addEventListener("click",function e(t){t.stopPropagation(),document.removeEventListener("click",e,!0)},!0),this.props.handleMouseUp(),!1}},{key:"checkgrid1block",value:function(e,t){var n=this.boxorgpos.y;return t<n+s.Define.grid.height&&(t=n+s.Define.grid.height),[e,t]}},{key:"render",value:function(){var e=this,t=100*s.Define.handle.width/this.props.scale,n=100*s.Define.handle.height/this.props.scale;return u.default.createElement("rect",{x:this.state.x-t/2,y:this.state.y-n/2,width:t,height:n,style:{fill:"blue",cursor:"ns-resize"},onClick:function(e){e.stopPropagation(),e.preventDefault()},onMouseDown:function(t){return e.mouseDown(t)}})}}]),t}();t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=n(9),a=n(239),u=(r=a)&&r.__esModule?r:{default:r};var s=(0,i.connect)(function(e,t){return o({},e)},function(e,t){return{dispatch:e}},function(e,t,n){return o({},n,{scale:e.scale})})(u.default);t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){return function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(5),u=(r=a)&&r.__esModule?r:{default:r},s=n(10);var c=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.boxorgpos={x:e.x,y:e.y,w:e.w,h:e.h},n.handleorgpos={x:e.x+e.w,y:e.y+e.h/2},n.mousepos={x:0,y:0},n.state={x:n.handleorgpos.x,y:n.handleorgpos.y},n.mouseMove=n.mouseMove.bind(n),n.mouseUp=n.mouseUp.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,u.default.Component),i(t,[{key:"componentWillReceiveProps",value:function(e){1==e.handleRefresh&&(this.boxorgpos={x:e.x,y:e.y,w:e.w,h:e.h},this.handleorgpos={x:e.x+e.w,y:e.y+e.h/2}),this.setState({x:e.x+e.w,y:e.y+e.h/2})}},{key:"mouseDown",value:function(e){e.stopPropagation(),e.preventDefault(),document.addEventListener("mousemove",this.mouseMove,!1),document.addEventListener("mouseup",this.mouseUp,!1),document.addEventListener("click",this.click,!1),this.mousepos.x=100*e.pageX/this.props.scale,this.mousepos.y=100*e.pageY/this.props.scale,this.props.handleMouseDown()}},{key:"mouseMove",value:function(e){e.stopPropagation(),e.preventDefault();var t=100*e.pageX/this.props.scale,n=this.handleorgpos.x+(t-this.mousepos.x),r=this.handleorgpos.y,i=this.checkgrid1block(n,r),a=o(i,2);n=a[0],r=a[1];var u=this.props.gridsnap(n,r),s=o(u,2);n=s[0],r=s[1];var c=this.props.handlestop(n,r),l=o(c,2);n=l[0],r=l[1],this.props.handleMove(this.boxorgpos.x,this.boxorgpos.y,n-this.boxorgpos.x,this.boxorgpos.h)}},{key:"mouseUp",value:function(e){e.stopPropagation(),e.preventDefault(),document.removeEventListener("mousemove",this.mouseMove),document.removeEventListener("mouseup",this.mouseUp);return document.addEventListener("click",function e(t){t.stopPropagation(),document.removeEventListener("click",e,!0)},!0),this.props.handleMouseUp(),!1}},{key:"checkgrid1block",value:function(e,t){var n=this.boxorgpos.x;return e<n+s.Define.grid.width&&(e=n+s.Define.grid.width),[e,t]}},{key:"render",value:function(){var e=this,t=100*s.Define.handle.width/this.props.scale,n=100*s.Define.handle.height/this.props.scale;return u.default.createElement("rect",{x:this.state.x-t/2,y:this.state.y-n/2,width:t,height:n,style:{fill:"blue",cursor:"ew-resize"},onClick:function(e){},onMouseDown:function(t){return e.mouseDown(t)}})}}]),t}();t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=n(9),a=n(241),u=(r=a)&&r.__esModule?r:{default:r};var s=(0,i.connect)(function(e,t){return o({},e)},function(e,t){return{dispatch:e}},function(e,t,n){return o({},n,{scale:e.scale})})(u.default);t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){return function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(5),u=(r=a)&&r.__esModule?r:{default:r},s=n(10);var c=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.boxorgpos={x:e.x,y:e.y,w:e.w,h:e.h},n.handleorgpos={x:e.x,y:e.y+e.h/2},n.mousepos={x:0,y:0},n.state={x:n.handleorgpos.x,y:n.handleorgpos.y},n.mouseMove=n.mouseMove.bind(n),n.mouseUp=n.mouseUp.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,u.default.Component),i(t,[{key:"componentWillReceiveProps",value:function(e){1==e.handleRefresh&&(this.boxorgpos={x:e.x,y:e.y,w:e.w,h:e.h},this.handleorgpos={x:e.x,y:e.y+e.h/2}),this.setState({x:e.x,y:e.y+e.h/2})}},{key:"mouseDown",value:function(e){e.stopPropagation(),e.preventDefault(),document.addEventListener("mousemove",this.mouseMove,!1),document.addEventListener("mouseup",this.mouseUp,!1),document.addEventListener("click",this.click,!1),this.mousepos.x=100*e.pageX/this.props.scale,this.mousepos.y=100*e.pageY/this.props.scale,this.props.handleMouseDown()}},{key:"mouseMove",value:function(e){e.stopPropagation(),e.preventDefault();var t=100*e.pageX/this.props.scale,n=this.handleorgpos.x+(t-this.mousepos.x),r=this.handleorgpos.y,i=this.checkgrid1block(n,r),a=o(i,2);n=a[0],r=a[1];var u=this.props.gridsnap(n,r),s=o(u,2);n=s[0],r=s[1];var c=this.props.handlestop(n,r),l=o(c,2);n=l[0],r=l[1],this.props.handleMove(n,this.boxorgpos.y,this.boxorgpos.x-n+this.boxorgpos.w,this.boxorgpos.h)}},{key:"mouseUp",value:function(e){e.stopPropagation(),e.preventDefault(),document.removeEventListener("mousemove",this.mouseMove),document.removeEventListener("mouseup",this.mouseUp);return document.addEventListener("click",function e(t){t.stopPropagation(),document.removeEventListener("click",e,!0)},!0),this.props.handleMouseUp(),!1}},{key:"checkgrid1block",value:function(e,t){var n=this.boxorgpos.x+this.boxorgpos.w;return e>n-s.Define.grid.width&&(e=n-s.Define.grid.width),[e,t]}},{key:"render",value:function(){var e=this,t=100*s.Define.handle.width/this.props.scale,n=100*s.Define.handle.height/this.props.scale;return u.default.createElement("rect",{x:this.state.x-t/2,y:this.state.y-n/2,width:t,height:n,style:{fill:"blue",cursor:"ew-resize"},onClick:function(e){},onMouseDown:function(t){return e.mouseDown(t)}})}}]),t}();t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=n(9),a=n(243),u=(r=a)&&r.__esModule?r:{default:r};var s=(0,i.connect)(function(e,t){return o({},e)},function(e,t){return{dispatch:e}},function(e,t,n){return o({},n,{scale:e.scale})})(u.default);t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){return function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(5),u=(r=a)&&r.__esModule?r:{default:r},s=n(10);var c=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.boxorgpos={x:e.x,y:e.y,w:e.w,h:e.h},n.handleorgpos={x:e.x+e.w/2,y:e.y},n.mousepos={x:0,y:0},n.state={x:n.handleorgpos.x,y:n.handleorgpos.y},n.mouseMove=n.mouseMove.bind(n),n.mouseUp=n.mouseUp.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,u.default.Component),i(t,[{key:"componentWillReceiveProps",value:function(e){1==e.handleRefresh&&(this.boxorgpos={x:e.x,y:e.y,w:e.w,h:e.h},this.handleorgpos={x:e.x+e.w/2,y:e.y}),this.setState({x:e.x+e.w/2,y:e.y})}},{key:"mouseDown",value:function(e){e.stopPropagation(),e.preventDefault(),document.addEventListener("mousemove",this.mouseMove,!1),document.addEventListener("mouseup",this.mouseUp,!1),document.addEventListener("click",this.click,!1),this.mousepos.x=100*e.pageX/this.props.scale,this.mousepos.y=100*e.pageY/this.props.scale,this.props.handleMouseDown()}},{key:"mouseMove",value:function(e){e.stopPropagation(),e.preventDefault();var t=100*e.pageY/this.props.scale,n=this.handleorgpos.x,r=this.handleorgpos.y+(t-this.mousepos.y),i=this.checkgrid1block(n,r),a=o(i,2);n=a[0],r=a[1];var u=this.props.gridsnap(n,r),s=o(u,2);n=s[0],r=s[1];var c=this.props.handlestop(n,r),l=o(c,2);n=l[0],r=l[1],this.props.handleMove(this.boxorgpos.x,r,this.boxorgpos.w,this.boxorgpos.y-r+this.boxorgpos.h)}},{key:"mouseUp",value:function(e){e.stopPropagation(),e.preventDefault(),document.removeEventListener("mousemove",this.mouseMove),document.removeEventListener("mouseup",this.mouseUp);return document.addEventListener("click",function e(t){t.stopPropagation(),document.removeEventListener("click",e,!0)},!0),this.props.handleMouseUp(),!1}},{key:"checkgrid1block",value:function(e,t){var n=this.boxorgpos.y+this.boxorgpos.h;return t>n-s.Define.grid.height&&(t=n-s.Define.grid.height),[e,t]}},{key:"render",value:function(){var e=this,t=100*s.Define.handle.width/this.props.scale,n=100*s.Define.handle.height/this.props.scale;return u.default.createElement("rect",{x:this.state.x-t/2,y:this.state.y-n/2,width:t,height:n,style:{fill:"blue",cursor:"ns-resize"},onClick:function(e){e.stopPropagation(),e.preventDefault()},onMouseDown:function(t){return e.mouseDown(t)}})}}]),t}();t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=n(9),a=n(245),u=(r=a)&&r.__esModule?r:{default:r};var s=(0,i.connect)(function(e,t){return o({},e)},function(e,t){return{dispatch:e}},function(e,t,n){return o({},n,{scale:e.scale})})(u.default);t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){return function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=p(n(5)),a=p(n(246)),u=p(n(244)),s=p(n(242)),c=p(n(240)),l=n(10),f=n(14);function p(e){return e&&e.__esModule?e:{default:e}}var d=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e)),r=f.Zahyo.ruToluRect(e.x1,e.y1,e.x2,e.y2,l.Define.svgimagesize.width,l.Define.svgimagesize.height);n.boxorgpos={x:r.x1,y:r.y1},n.mousepos={x:0,y:0};var o=f.Zahyo.ruToluRectToArea(e.x1,e.y1,e.x2,e.y2,l.Define.svgimagesize.width,l.Define.svgimagesize.height);return n.state={group_id:e.group_id,x:o.x,y:o.y,w:o.w,h:o.h,handle_refresh:!0},n.mouseMove=n.mouseMove.bind(n),n.mouseUp=n.mouseUp.bind(n),n.baseClick=n.baseClick.bind(n),n.addBaseClickEvent(),n.keyPress=n.keyPress.bind(n),n.addKeyPressEvent(),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.default.Component),o(t,[{key:"componentWillReceiveProps",value:function(e){var t=f.Zahyo.ruToluRectToArea(e.x1,e.y1,e.x2,e.y2,l.Define.svgimagesize.width,l.Define.svgimagesize.height);this.boxorgpos={x:t.x,y:t.y},this.setState({group_id:e.group_id,x:t.x,y:t.y,w:t.w,h:t.h,handle_refresh:!0})}},{key:"componentWillUnmount",value:function(){this.removeBaseClickEvent(),this.removeKeyPressEvent()}},{key:"addKeyPressEvent",value:function(){document.addEventListener("keydown",this.keyPress,!1)}},{key:"removeKeyPressEvent",value:function(){document.removeEventListener("keydown",this.keyPress)}},{key:"keyPress",value:function(e){46==e.keyCode&&this.props.sozaiRemove({group_id:this.state.group_id})}},{key:"addBaseClickEvent",value:function(){document.getElementById("viewbox").addEventListener("click",this.baseClick,!1)}},{key:"removeBaseClickEvent",value:function(){document.getElementById("viewbox").removeEventListener("click",this.baseClick)}},{key:"baseClick",value:function(e){return e.stopPropagation(),e.preventDefault(),this.removeBaseClickEvent(),this.props.onClickBase(),!1}},{key:"mouseDown",value:function(e){e.stopPropagation(),e.preventDefault(),this.removeBaseClickEvent(),document.addEventListener("mousemove",this.mouseMove,!1),document.addEventListener("mouseup",this.mouseUp,!1),this.mousepos.x=100*e.pageX/this.props.scale,this.mousepos.y=100*e.pageY/this.props.scale}},{key:"mouseMove",value:function(e){e.stopPropagation(),e.preventDefault();var t=100*e.pageX/this.props.scale,n=100*e.pageY/this.props.scale,o=this.boxorgpos.x+(t-this.mousepos.x),i=this.boxorgpos.y+(n-this.mousepos.y),a=this.gridsnap(o,i),u=r(a,2);o=u[0],i=u[1];var s=this.boxmovestop(o,i,this.state.w,this.state.h),c=r(s,2);o=c[0],i=c[1],this.setState({x:o,y:i,handle_refresh:!0})}},{key:"mouseUp",value:function(e){e.stopPropagation(),e.preventDefault(),document.removeEventListener("mousemove",this.mouseMove),document.removeEventListener("mouseup",this.mouseUp);document.addEventListener("click",function e(t){t.stopPropagation(),document.removeEventListener("click",e,!0)},!0),this.addBaseClickEvent();var t=f.Zahyo.luToruAreaToRect(this.state.x,this.state.y,this.state.w,this.state.h,l.Define.svgimagesize.width,l.Define.svgimagesize.height);this.props.endMoveBox({box_id:this.props.box_id,x1:t.x1,y1:t.y1,x2:t.x2,y2:t.y2})}},{key:"gridsnap",value:function(e,t){var n=f.Zahyo.luToruX(e,l.Define.svgimagesize.width),r=f.Zahyo.luToruY(t,l.Define.svgimagesize.height),o=void 0,i=void 0,a=void 0,u=void 0;0==(o=n%l.Define.grid.width)||(a=(i=Math.floor(n/l.Define.grid.width))*l.Define.grid.width,u=(i+1)*l.Define.grid.width,n=o>=l.Define.grid.width/2?u:a);var s=void 0,c=void 0;return 0==(o=r%l.Define.grid.height)||(s=(i=Math.floor(r/l.Define.grid.height))*l.Define.grid.height,c=(i+1)*l.Define.grid.height,r=o>=l.Define.grid.height/2?c:s),[e=f.Zahyo.ruToluX(n,l.Define.svgimagesize.width),t=f.Zahyo.ruToluY(r,l.Define.svgimagesize.height)]}},{key:"boxmovestop",value:function(e,t,n,r){var o,i,a=f.Zahyo.luToruArea(e,t,n,r,l.Define.svgimagesize.width,l.Define.svgimagesize.height),u=void 0;u=Math.floor(l.Define.svgimagesize.width/l.Define.grid.width),o=l.Define.grid.width*u,u=Math.floor(l.Define.svgimagesize.height/l.Define.grid.height),i=l.Define.grid.height*u,a.x<=0?a.x=0:a.x+n>=o&&(a.x=o-a.w),a.y<=0?a.y=0:a.y+r>=i&&(a.y=i-a.h);var s=f.Zahyo.ruToluArea(a.x,a.y,a.w,a.h,l.Define.svgimagesize.width,l.Define.svgimagesize.height);return[s.x,s.y]}},{key:"handlestop",value:function(e,t){var n,r,o=f.Zahyo.luToruX(e,l.Define.svgimagesize.width),i=f.Zahyo.luToruY(t,l.Define.svgimagesize.height),a=void 0;return a=Math.floor(l.Define.svgimagesize.width/l.Define.grid.width),n=l.Define.grid.width*a,a=Math.floor(l.Define.svgimagesize.height/l.Define.grid.height),r=l.Define.grid.height*a,o<=0?o=0:o>=n&&(o=n),i<=0?i=0:i>=r&&(i=r),[e=f.Zahyo.ruToluX(o,l.Define.svgimagesize.width),t=f.Zahyo.ruToluY(i,l.Define.svgimagesize.height)]}},{key:"handleMouseDown",value:function(){this.removeBaseClickEvent()}},{key:"handleMove",value:function(e,t,n,r){this.setState({x:e,y:t,w:n,h:r,handle_refresh:!1})}},{key:"handleMouseUp",value:function(){this.addBaseClickEvent();var e=f.Zahyo.luToruAreaToRect(this.state.x,this.state.y,this.state.w,this.state.h,l.Define.svgimagesize.width,l.Define.svgimagesize.height);this.setState({handle_refresh:!0}),this.props.endChangeSizeBox({box_id:this.props.box_id,x1:e.x1,y1:e.y1,x2:e.x2,y2:e.y2})}},{key:"render",value:function(){var e=this;return i.default.createElement("g",null,i.default.createElement("rect",{id:"selectbox_"+this.props.box_id,x:this.state.x,y:this.state.y,width:this.state.w,height:this.state.h,style:{fill:"blue",fillOpacity:"0.3",stroke:"blue",strokeWidth:200/this.props.scale,cursor:"move"},onClick:function(e){e.stopPropagation(),e.preventDefault()},onMouseDown:function(t){return e.mouseDown(t)}}),i.default.createElement("text",{x:this.state.x+5,y:this.state.y+20,style:{fontSize:15,stroke:"none",fill:"white",fillOpacity:"0.7"}},this.props.group_no),i.default.createElement(a.default,{x:this.state.x,y:this.state.y,w:this.state.w,h:this.state.h,handleRefresh:this.state.handle_refresh,gridsnap:function(t,n){return e.gridsnap(t,n)},handlestop:function(t,n,r,o){return e.handlestop(t,n,r,o)},handleMouseDown:function(){return e.handleMouseDown()},handleMove:function(t,n,r,o){return e.handleMove(t,n,r,o)},handleMouseUp:function(){return e.handleMouseUp()}}),i.default.createElement(u.default,{x:this.state.x,y:this.state.y,w:this.state.w,h:this.state.h,handleRefresh:this.state.handle_refresh,gridsnap:function(t,n){return e.gridsnap(t,n)},handlestop:function(t,n,r,o){return e.handlestop(t,n,r,o)},handleMouseDown:function(){return e.handleMouseDown()},handleMove:function(t,n,r,o){return e.handleMove(t,n,r,o)},handleMouseUp:function(){return e.handleMouseUp()}}),i.default.createElement(s.default,{x:this.state.x,y:this.state.y,w:this.state.w,h:this.state.h,handleRefresh:this.state.handle_refresh,gridsnap:function(t,n){return e.gridsnap(t,n)},handlestop:function(t,n,r,o){return e.handlestop(t,n,r,o)},handleMouseDown:function(){return e.handleMouseDown()},handleMove:function(t,n,r,o){return e.handleMove(t,n,r,o)},handleMouseUp:function(){return e.handleMouseUp()}}),i.default.createElement(c.default,{x:this.state.x,y:this.state.y,w:this.state.w,h:this.state.h,handleRefresh:this.state.handle_refresh,gridsnap:function(t,n){return e.gridsnap(t,n)},handlestop:function(t,n,r,o){return e.handlestop(t,n,r,o)},handleMouseDown:function(){return e.handleMouseDown()},handleMove:function(t,n,r,o){return e.handleMove(t,n,r,o)},handleMouseUp:function(){return e.handleMouseUp()}}))}}]),t}();t.default=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=n(9),a=n(247),u=(r=a)&&r.__esModule?r:{default:r},s=n(74);n(56);var c=(0,i.connect)(function(e,t){return o({},e)},function(e,t){return{dispatch:e}},function(e,t,n){return o({},n,{scale:e.scale,endMoveBox:function(e){t.dispatch((0,s.SU_SelectBox_EditBox_MoveEnd)(e))},endChangeSizeBox:function(e){t.dispatch((0,s.SU_SelectBox_EditBox_ChangeSize)(e))},onClickBase:function(){t.dispatch((0,s.SU_SelectBox_Box_NonSelect)())},sozaiRemove:function(e){t.dispatch((0,s.SU_SelectBox_EditBox_DeleteKeyPress)(e))}})})(u.default);t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=s(n(5)),i=s(n(248)),a=s(n(238)),u=s(n(236));function s(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"selectAllSonotaBox",value:function(){for(var e=[],t=0;t<this.props.boxs.length;t++)e.push(o.default.createElement(u.default,{box_id:this.props.boxs[t].box_id,group_id:this.props.boxs[t].group_id,group_no:this.props.boxs[t].group_no,type:this.props.boxs[t].type,x1:this.props.boxs[t].x1,y1:this.props.boxs[t].y1,x2:this.props.boxs[t].x2,y2:this.props.boxs[t].y2}));return e}},{key:"selectBox",value:function(){for(var e=[],t=void 0,n=0;n<this.props.boxs.length;n++)this.props.focusbox.box_id!=this.props.boxs[n].box_id?this.props.focusbox.group_id!=this.props.boxs[n].group_id?e.push(o.default.createElement(u.default,{box_id:this.props.boxs[n].box_id,group_id:this.props.boxs[n].group_id,group_no:this.props.boxs[n].group_no,type:this.props.boxs[n].type,x1:this.props.boxs[n].x1,y1:this.props.boxs[n].y1,x2:this.props.boxs[n].x2,y2:this.props.boxs[n].y2})):e.push(o.default.createElement(a.default,{box_id:this.props.boxs[n].box_id,group_id:this.props.boxs[n].group_id,group_no:this.props.boxs[n].group_no,type:this.props.boxs[n].type,x1:this.props.boxs[n].x1,y1:this.props.boxs[n].y1,x2:this.props.boxs[n].x2,y2:this.props.boxs[n].y2})):t=o.default.createElement(i.default,{box_id:this.props.boxs[n].box_id,group_id:this.props.boxs[n].group_id,group_no:this.props.boxs[n].group_no,type:this.props.boxs[n].type,x1:this.props.boxs[n].x1,y1:this.props.boxs[n].y1,x2:this.props.boxs[n].x2,y2:this.props.boxs[n].y2});return e.push(t),e}},{key:"render",value:function(){var e=void 0;return e=""==this.props.focusbox.box_id?this.selectAllSonotaBox():this.selectBox(),o.default.createElement("g",null,e)}}]),t}();t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=n(9),a=n(249),u=(r=a)&&r.__esModule?r:{default:r};var s=(0,i.connect)(function(e,t){return o({},e)},function(e,t){return{dispatch:e}},function(e,t,n){return{boxs:e.boxs,focusbox:e.focusbox}})(u.default);t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(5),a=(r=i)&&r.__esModule?r:{default:r},u=n(10),s=n(14);var c=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),o(t,[{key:"render",value:function(){return a.default.createElement("g",{id:this.props.id},this.props.lines.map(function(e){switch(e.type){case"rect":var t=s.Zahyo.ruToluRectToArea(e.x1,e.y1,e.x2,e.y2,u.Define.svgimagesize.width,u.Define.svgimagesize.height);return a.default.createElement("rect",{x:t.x,y:t.y,width:t.w,height:t.h,style:{stroke:e.color,strokeWidth:e.width,fill:"none"}});case"line":var n=s.Zahyo.ruToluRect(e.x1,e.y1,e.x2,e.y2,u.Define.svgimagesize.width,u.Define.svgimagesize.height);return a.default.createElement("line",{x1:n.x1,y1:n.y1,x2:n.x2,y2:n.y2,style:{stroke:e.color,strokeWidth:e.width,fill:"none"}})}}))}}]),t}();t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=n(9),a=n(251),u=(r=a)&&r.__esModule?r:{default:r};var s=(0,i.connect)(function(e,t){return o({},e)},function(e,t){return{dispatch:e}},function(e,t,n){return o({},n,{lines:e.lines})})(u.default);t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(5),a=(r=i)&&r.__esModule?r:{default:r};n(14);var u={container:{backgroundColor:"yellow"}},s=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),o(t,[{key:"box",value:function(){return"off"==this.props.editonoff?"":a.default.createElement("rect",{x:"0",y:"0",width:this.props.width,height:this.props.height,style:{stroke:"none",fill:"lightcyan",opacity:"0.5"}})}},{key:"image",value:function(){return a.default.createElement("image",{x:"0",y:"0",width:this.props.width,height:this.props.height,xlinkHref:this.props.imageUrl,preserveAspectRatio:"xMidYMid meet"})}},{key:"render",value:function(){return a.default.createElement("g",{id:this.props.box_id,transform:"translate("+this.props.x+","+this.props.y+")",width:this.props.width,height:this.props.height,style:u.container},this.box(),this.image())}}]),t}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=n(9),a=n(253),u=(r=a)&&r.__esModule?r:{default:r};var s=(0,i.connect)(function(e,t){return o({},e)},function(e,t){return{dispatch:e}},function(e,t,n){return o({},n,{editonoff:e.editonoff})})(u.default);t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(5),a=(r=i)&&r.__esModule?r:{default:r},u=n(14),s=n(10);var c={container:{backgroundColor:"yellow"}},l=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),o(t,[{key:"box",value:function(){return"off"==this.props.editonoff?"":a.default.createElement("rect",{x:"0",y:"0",width:this.props.width,height:this.props.height,style:{stroke:"none",fill:"lightyellow",opacity:"0.5"}})}},{key:"textgrid",value:function(){var e=[];if("off"==this.props.editonoff)return"";for(var t=0;t<this.props.text.grid.length;t++){var n,r,o=void 0,i=void 0,s=void 0,c=void 0;n=this.props.text.grid[t][0],r=this.props.text.grid[t][1],"tate"==this.props.text.kumihoko?(o=u.Zahyo.ruToluX(r,this.props.width),i=u.Zahyo.ruToluY(n,this.props.height),s=this.props.text.size_g,c=this.props.text.size_j):(o=n,i=r,s=this.props.text.size_j,c=this.props.text.size_g),e.push(a.default.createElement("rect",{x:o-s/2,y:i-c/2,width:s,height:c,style:{stroke:"lightgray",strokeWidth:"1",fill:"none"}}))}return e}},{key:"text",value:function(){for(var e=[],t=0;t<this.props.text.result.length;t++){var n,r,o=void 0,i=void 0,s=void 0,c=void 0;n=this.props.text.result[t].j,r=this.props.text.result[t].g,"tate"==this.props.text.kumihoko?(s=0==this.props.text.result[t].size_g?this.props.text.size_g:this.props.text.result[t].size_g,c=0==this.props.text.result[t].size_j?this.props.text.size_j:this.props.text.result[t].size_j,o=u.Zahyo.ruToluX(r,this.props.width),i=u.Zahyo.ruToluY(n,this.props.height)):(s=0==this.props.text.result[t].size_j?this.props.text.size_j:this.props.text.result[t].size_j,c=0==this.props.text.result[t].size_g?this.props.text.size_g:this.props.text.result[t].size_g,o=n,i=r);var l=s>c?s:c,f=0;if("tate"==this.props.text.kumihoko)switch(this.props.text.result[t].moji){case"「":case"」":case"（":case"）":case"ー":f=90}e.push(a.default.createElement("text",{x:l/2*-1,y:l/2-12.5*l/100,style:{fontSize:l,stroke:"none",fill:"#333333"},transform:"translate("+o+", "+i+") scale("+s/l+", "+c/l+") rotate("+f+")"},this.props.text.result[t].moji))}return e}},{key:"render",value:function(){return a.default.createElement("g",{id:"box_"+this.props.box_id,transform:"translate("+this.props.x+","+this.props.y+")",width:this.props.width,height:this.props.height,style:c.container},this.box(),this.textgrid(),a.default.createElement("g",{style:{fontFamily:s.Font.font[this.props.text.font-1]}},this.text()))}}]),t}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=n(9),a=n(255),u=(r=a)&&r.__esModule?r:{default:r};var s=(0,i.connect)(function(e,t){return o({},e)},function(e,t){return{dispatch:e}},function(e,t,n){return o({},n,{editonoff:e.editonoff,dandd:e.dandd})})(u.default);t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=c(n(5)),i=c(n(256)),a=c(n(254)),u=n(10),s=n(14);function c(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"render",value:function(){var e=this;return o.default.createElement("g",{id:this.props.id},this.props.boxs.map(function(t){var n=s.Zahyo.ruToluRectToArea(t.x1,t.y1,t.x2,t.y2,u.Define.svgimagesize.width,u.Define.svgimagesize.height);switch(t.type){case"text":var r="",c=void 0,l=void 0;return t.text.afure>0&&("tate"==t.text.kumihoko?(c=n.x,l=n.y+n.h):(c=n.x+n.w-15,l=n.y+n.h),r=o.default.createElement("text",{x:c,y:l,style:{fontSize:11,stroke:"none",fill:"red",opacity:"0.8"}},t.text.afure)),"off"==e.props.editonoff&&(r=""),o.default.createElement("g",null,o.default.createElement(i.default,{box_id:t.box_id,group_id:t.group_id,group_no:t.group_no,x:n.x,y:n.y,width:n.w,height:n.h,text:t.text}),r);case"image":return o.default.createElement(a.default,{box_id:t.box_id,group_id:t.group_id,group_no:t.group_no,x:n.x,y:n.y,width:n.w,height:n.h,imageUrl:t.image.url})}}))}}]),t}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=n(9),a=n(257),u=(r=a)&&r.__esModule?r:{default:r};var s=(0,i.connect)(function(e,t){return o({},e)},function(e,t){return{dispatch:e}},function(e,t,n){return o({},n,{boxs:e.boxs,editonoff:e.editonoff})})(u.default);t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(5),a=(r=i)&&r.__esModule?r:{default:r},u=n(14),s=n(10);var c=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),o(t,[{key:"yokokei",value:function(){for(var e=[],t=0;t<=this.props.height;t+=s.Define.grid.height){var n=100/this.props.scale,r="#f9f9f9";t%(5*s.Define.grid.height)==0&&(n=200/this.props.scale,r="#efeff9"),t%(10*s.Define.grid.height)==0&&(n=300/this.props.scale,r="#f9efef"),e.push(a.default.createElement("line",{x1:0,y1:u.Zahyo.luToruY(t,this.props.height),x2:this.props.width,y2:u.Zahyo.luToruY(t,this.props.height),strokeWidth:n,stroke:r}))}return e}},{key:"tatekei",value:function(){for(var e=[],t=0;t<this.props.width;t+=s.Define.grid.width){var n=100/this.props.scale,r="#f9f9f9";t%(5*s.Define.grid.width)==0&&(n=200/this.props.scale,r="#efeff9"),t%(10*s.Define.grid.width)==0&&(n=300/this.props.scale,r="#f9efef"),e.push(a.default.createElement("line",{x1:u.Zahyo.luToruX(t,this.props.width),y1:0,x2:u.Zahyo.luToruX(t,this.props.width),y2:this.props.height,strokeWidth:n,stroke:r}))}return e}},{key:"render",value:function(){return a.default.createElement("g",null,this.yokokei(),this.tatekei())}}]),t}();t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=f(n(5)),a=f(n(259)),u=f(n(258)),s=f(n(252)),c=f(n(250)),l=n(10);n(14);function f(e){return e&&e.__esModule?e:{default:e}}var p={backgroundColor:"#fff"},d=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.default.Component),o(t,[{key:"render",value:function(){var e="",t="";return"on"==this.props.editonoff&&(e=i.default.createElement(a.default,{width:this.props.width,height:this.props.height,scale:this.props.scale}),t=i.default.createElement(c.default,null)),i.default.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",version:"1.1",xmlnsXlink:"http://www.w3.org/1999/xlink",width:this.props.width*this.props.scale/100,height:this.props.height*this.props.scale/100,viewBox:"0 0 "+this.props.width+" "+this.props.height,style:r({},p)},i.default.createElement("style",null,l.Font.fontface),e,i.default.createElement(u.default,null),i.default.createElement(s.default,null),t)}}]),t}();t.default=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=n(9),a=n(260),u=(r=a)&&r.__esModule?r:{default:r};var s=(0,i.connect)(function(e,t){return o({},e)},function(e,t){return{dispatch:e}},function(e,t,n){return{width:n.width,height:n.height,scale:e.scale,editonoff:e.editonoff}})(u.default);t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=c(n(5)),a=c(n(261)),u=n(10),s=c(n(234));function c(e){return e&&e.__esModule?e:{default:e}}var l={overflow:"scroll",backgroundColor:"#ddd",width:"100%",height:"100vh"},f=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={contenxtmenuOpenClose:"close",contextmenuX:0,contextmenuY:0},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.default.Component),o(t,[{key:"componentDidMount",value:function(){}},{key:"componentWillReceiveProps",value:function(e){this.setState({contextmenuOpenClose:e.contextmenu.openclose,contextmenuX:e.contextmenu.x,contextmenuY:e.contextmenu.y})}},{key:"contextMenu",value:function(){var e="";return"open"==this.state.contextmenuOpenClose&&(e=i.default.createElement(s.default,{x:this.state.contextmenuX,y:this.state.contextmenuY})),e}},{key:"render",value:function(){var e=this;return i.default.createElement("div",{id:"viewbox",style:r({},l,this.props.style),onContextMenu:function(t){t.stopPropagation(),t.preventDefault(),e.props.onContextMenu({x:t.pageX,y:t.pageY})}},i.default.createElement(a.default,{width:u.Define.svgimagesize.width,height:u.Define.svgimagesize.height}),this.contextMenu())}}]),t}();t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=n(9),a=n(262),u=(r=a)&&r.__esModule?r:{default:r},s=n(56);var c=(0,i.connect)(function(e,t){return o({},e)},function(e,t){return{dispatch:e}},function(e,t,n){return{contextmenu:e.contextmenu,onContextMenu:function(e){t.dispatch((0,s.SU_ContextMenu_Open)(e))},onContextMenuClose:function(){t.dispatch((0,s.SU_ContextMenu_Close)())}}})(u.default);t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o,i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a=function(){return function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=_(n(5)),c=_(n(263)),l=_(n(224)),f=_(n(222)),p=_(n(220)),d=_(n(217)),h=_(n(215)),g=_(n(213)),y=_(n(211)),v=n(14);function _(e){return e&&e.__esModule?e:{default:e}}function x(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var m={container:{position:"relative",fontSize:"20px",fontWeight:"bold",color:"black",width:"100%",height:"100vh",overflow:"hidden"},danddTextBox:(r={position:"absolute",width:"125px",height:"125px",padding:"5px",fontSize:"12px",color:"black",overflow:"hidden",textOverflow:"ellipsis",backgroundColor:"lightyellow",opacity:"0.5",cursor:"-moz-grabbing"},x(r,"cursor","-webkit-grabbing"),x(r,"cursor","pointer"),r),danddImageBox:(o={position:"absolute",verticalAlign:"middle",textAlign:"center",width:"130px",height:"130px",opacity:"0.5",cursor:"-moz-grabbing"},x(o,"cursor","-webkit-grabbing"),x(o,"cursor","pointer"),o),danddImage:{maxWidth:"130px",maxHeight:"130px"}},b=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={view:"false",x:0,y:0,type:"",value:""},n.danddMouseMove=n.danddMouseMove.bind(n),n.danddMouseUp=n.danddMouseUp.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,s.default.Component),u(t,[{key:"componentWillReceiveProps",value:function(e){"true"==e.dandd.view&&(document.addEventListener("mousemove",this.danddMouseMove,!1),document.addEventListener("mouseup",this.danddMouseUp,!1),this.setState({x:e.dandd.x,y:e.dandd.y,type:e.dandd.type,value:e.dandd.value}))}},{key:"danddMouseMove",value:function(e){e.stopPropagation(),e.preventDefault();var t=v.Cursor.curPageKiten(e),n=a(t,2),r=n[0],o=n[1];this.setState({view:"true",x:r,y:o})}},{key:"danddMouseUp",value:function(e){e.stopPropagation(),e.preventDefault(),document.removeEventListener("mousemove",this.danddMouseMove),document.removeEventListener("mouseup",this.danddMouseUp),this.setState({view:"false"});var t=v.Cursor.curElemScaleScrollKiten(this.state.x,this.state.y,document.getElementById("viewbox"),this.props.scale/100),n=a(t,2),r=n[0],o=n[1];this.props.danddMouseUp({type:this.state.type,value:this.state.value,x:r,y:o})}},{key:"toolBoxs",value:function(){for(var e=[],t=0;t<this.props.toolboxs.length;t++)switch(this.props.toolboxs[t].type){case"scale":if("false"==this.props.toolboxs[t].view)break;e.push(s.default.createElement(l.default,{toolbox_id:this.props.toolboxs[t].toolbox_id,x:this.props.toolboxs[t].x,y:this.props.toolboxs[t].y,w:this.props.toolboxs[t].w,h:this.props.toolboxs[t].h,title:"拡大縮小"},s.default.createElement(f.default,null)));break;case"boxdata":if("false"==this.props.toolboxs[t].view)break;e.push(s.default.createElement(l.default,{toolbox_id:this.props.toolboxs[t].toolbox_id,x:this.props.toolboxs[t].x,y:this.props.toolboxs[t].y,w:this.props.toolboxs[t].w,h:this.props.toolboxs[t].h,title:"ボックス情報"},s.default.createElement(p.default,null)));break;case"textdata":if("false"==this.props.toolboxs[t].view)break;e.push(s.default.createElement(l.default,{toolbox_id:this.props.toolboxs[t].toolbox_id,x:this.props.toolboxs[t].x,y:this.props.toolboxs[t].y,w:this.props.toolboxs[t].w,h:this.props.toolboxs[t].h,title:"ﾎﾞｯｸｽﾃｷｽﾄ情報"},s.default.createElement(d.default,null)));break;case"sozai":if("false"==this.props.toolboxs[t].view)break;e.push(s.default.createElement(l.default,{toolbox_id:this.props.toolboxs[t].toolbox_id,x:this.props.toolboxs[t].x,y:this.props.toolboxs[t].y,w:this.props.toolboxs[t].w,h:this.props.toolboxs[t].h,title:"素材リスト"},s.default.createElement(h.default,null)));break;case"link":if("false"==this.props.toolboxs[t].view)break;e.push(s.default.createElement(l.default,{toolbox_id:this.props.toolboxs[t].toolbox_id,x:this.props.toolboxs[t].x,y:this.props.toolboxs[t].y,w:this.props.toolboxs[t].w,h:this.props.toolboxs[t].h,title:"リンクリスト"},s.default.createElement(g.default,null)));break;case"presen":if("false"==this.props.toolboxs[t].view)break;e.push(s.default.createElement(l.default,{toolbox_id:this.props.toolboxs[t].toolbox_id,x:this.props.toolboxs[t].x,y:this.props.toolboxs[t].y,w:this.props.toolboxs[t].w,h:this.props.toolboxs[t].h,title:"プレゼン用"},s.default.createElement(y.default,null)))}return e}},{key:"dandd",value:function(){var e=[],t={},n="";if("false"==this.state.view)return e;switch(this.state.type){case"sozai":switch(this.state.value.type){case"text":var r=this.state.value.text;r.length>95&&(r=r.slice(0,94)+"..."),t=m.danddTextBox,n=r;break;case"image":t=m.danddImageBox,n=s.default.createElement("img",{src:this.state.value.imageUrl,style:m.danddImage})}}return e.push(s.default.createElement("div",{style:i({},t,{left:this.state.x-65+"px",top:this.state.y-15+"px"})},n)),e}},{key:"render",value:function(){return s.default.createElement("div",{style:m.container},s.default.createElement(c.default,null),this.toolBoxs(),this.dandd())}}]),t}();t.default=b},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=n(9),a=n(264),u=(r=a)&&r.__esModule?r:{default:r},s=n(93);var c=(0,i.connect)(function(e,t){return o({},e)},function(e,t){return{dispatch:e}},function(e,t,n){return{toolboxs:e.toolboxs,dandd:e.dandd,scale:e.scale,danddMouseUp:function(e){t.dispatch((0,s.SU_DAndD_MouseUp)(e))}}})(u.default);t.default=c},function(e,t,n){(function(e){!function(t){"use strict";function n(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}function r(e,t){Object.defineProperty(this,"kind",{value:e,enumerable:!0}),t&&t.length&&Object.defineProperty(this,"path",{value:t,enumerable:!0})}function o(e,t,n){o.super_.call(this,"E",e),Object.defineProperty(this,"lhs",{value:t,enumerable:!0}),Object.defineProperty(this,"rhs",{value:n,enumerable:!0})}function i(e,t){i.super_.call(this,"N",e),Object.defineProperty(this,"rhs",{value:t,enumerable:!0})}function a(e,t){a.super_.call(this,"D",e),Object.defineProperty(this,"lhs",{value:t,enumerable:!0})}function u(e,t,n){u.super_.call(this,"A",e),Object.defineProperty(this,"index",{value:t,enumerable:!0}),Object.defineProperty(this,"item",{value:n,enumerable:!0})}function s(e,t,n){var r=e.slice((n||t)+1||e.length);return e.length=t<0?e.length+t:t,e.push.apply(e,r),e}function c(e){var t=void 0===e?"undefined":O(e);return"object"!==t?t:e===Math?"math":null===e?"null":Array.isArray(e)?"array":"[object Date]"===Object.prototype.toString.call(e)?"date":"function"==typeof e.toString&&/^\/.*\//.test(e.toString())?"regexp":"object"}function l(e,t,n,r,f,p,d){f=f||[],d=d||[];var h=f.slice(0);if(void 0!==p){if(r){if("function"==typeof r&&r(h,p))return;if("object"===(void 0===r?"undefined":O(r))){if(r.prefilter&&r.prefilter(h,p))return;if(r.normalize){var g=r.normalize(h,p,e,t);g&&(e=g[0],t=g[1])}}}h.push(p)}"regexp"===c(e)&&"regexp"===c(t)&&(e=e.toString(),t=t.toString());var y=void 0===e?"undefined":O(e),v=void 0===t?"undefined":O(t),_="undefined"!==y||d&&d[d.length-1].lhs&&d[d.length-1].lhs.hasOwnProperty(p),x="undefined"!==v||d&&d[d.length-1].rhs&&d[d.length-1].rhs.hasOwnProperty(p);if(!_&&x)n(new i(h,t));else if(!x&&_)n(new a(h,e));else if(c(e)!==c(t))n(new o(h,e,t));else if("date"===c(e)&&e-t!=0)n(new o(h,e,t));else if("object"===y&&null!==e&&null!==t)if(d.filter(function(t){return t.lhs===e}).length)e!==t&&n(new o(h,e,t));else{if(d.push({lhs:e,rhs:t}),Array.isArray(e)){var m;for(e.length,m=0;m<e.length;m++)m>=t.length?n(new u(h,m,new a(void 0,e[m]))):l(e[m],t[m],n,r,h,m,d);for(;m<t.length;)n(new u(h,m,new i(void 0,t[m++])))}else{var b=Object.keys(e),w=Object.keys(t);b.forEach(function(o,i){var a=w.indexOf(o);a>=0?(l(e[o],t[o],n,r,h,o,d),w=s(w,a)):l(e[o],void 0,n,r,h,o,d)}),w.forEach(function(e){l(void 0,t[e],n,r,h,e,d)})}d.length=d.length-1}else e!==t&&("number"===y&&isNaN(e)&&isNaN(t)||n(new o(h,e,t)))}function f(e,t,n,r){return r=r||[],l(e,t,function(e){e&&r.push(e)},n),r.length?r:void 0}function p(e,t,n){if(e&&t&&n&&n.kind){for(var r=e,o=-1,i=n.path?n.path.length-1:0;++o<i;)void 0===r[n.path[o]]&&(r[n.path[o]]="number"==typeof n.path[o]?[]:{}),r=r[n.path[o]];switch(n.kind){case"A":!function e(t,n,r){if(r.path&&r.path.length){var o,i=t[n],a=r.path.length-1;for(o=0;o<a;o++)i=i[r.path[o]];switch(r.kind){case"A":e(i[r.path[o]],r.index,r.item);break;case"D":delete i[r.path[o]];break;case"E":case"N":i[r.path[o]]=r.rhs}}else switch(r.kind){case"A":e(t[n],r.index,r.item);break;case"D":t=s(t,n);break;case"E":case"N":t[n]=r.rhs}return t}(n.path?r[n.path[o]]:r,n.index,n.item);break;case"D":delete r[n.path[o]];break;case"E":case"N":r[n.path[o]]=n.rhs}}}function d(e,t,n,r){var o=f(e,t);try{r?n.groupCollapsed("diff"):n.group("diff")}catch(e){n.log("diff")}o?o.forEach(function(e){var t=e.kind,r=function(e){var t=e.kind,n=e.path,r=e.lhs,o=e.rhs,i=e.index,a=e.item;switch(t){case"E":return[n.join("."),r,"→",o];case"N":return[n.join("."),o];case"D":return[n.join(".")];case"A":return[n.join(".")+"["+i+"]",a];default:return[]}}(e);n.log.apply(n,["%c "+k[t].text,function(e){return"color: "+k[e].color+"; font-weight: bold"}(t)].concat(w(r)))}):n.log("—— no diff ——");try{n.groupEnd()}catch(e){n.log("—— diff end —— ")}}function h(e,t,n,r){switch(void 0===e?"undefined":O(e)){case"object":return"function"==typeof e[r]?e[r].apply(e,w(n)):e[r];case"function":return e(t);default:return e}}function g(e,t){var n=t.logger,r=t.actionTransformer,o=t.titleFormatter,i=void 0===o?function(e){var t=e.timestamp,n=e.duration;return function(e,r,o){var i=["action"];return i.push("%c"+String(e.type)),t&&i.push("%c@ "+r),n&&i.push("%c(in "+o.toFixed(2)+" ms)"),i.join(" ")}}(t):o,a=t.collapsed,u=t.colors,s=t.level,c=t.diff,l=void 0===t.titleFormatter;e.forEach(function(o,f){var p=o.started,g=o.startedTime,y=o.action,v=o.prevState,_=o.error,x=o.took,b=o.nextState,O=e[f+1];O&&(b=O.prevState,x=O.started-p);var w=r(y),S="function"==typeof a?a(function(){return b},y,o):a,k=m(g),E=u.title?"color: "+u.title(w)+";":"",T=["color: gray; font-weight: lighter;"];T.push(E),t.timestamp&&T.push("color: gray; font-weight: lighter;"),t.duration&&T.push("color: gray; font-weight: lighter;");var C=i(w,k,x);try{S?u.title&&l?n.groupCollapsed.apply(n,["%c "+C].concat(T)):n.groupCollapsed(C):u.title&&l?n.group.apply(n,["%c "+C].concat(T)):n.group(C)}catch(e){n.log(C)}var j=h(s,w,[v],"prevState"),A=h(s,w,[w],"action"),P=h(s,w,[_,v],"error"),N=h(s,w,[b],"nextState");if(j)if(u.prevState){var M="color: "+u.prevState(v)+"; font-weight: bold";n[j]("%c prev state",M,v)}else n[j]("prev state",v);if(A)if(u.action){var B="color: "+u.action(w)+"; font-weight: bold";n[A]("%c action    ",B,w)}else n[A]("action    ",w);if(_&&P)if(u.error){var D="color: "+u.error(_,v)+"; font-weight: bold;";n[P]("%c error     ",D,_)}else n[P]("error     ",_);if(N)if(u.nextState){var z="color: "+u.nextState(b)+"; font-weight: bold";n[N]("%c next state",z,b)}else n[N]("next state",b);c&&d(v,b,n,S);try{n.groupEnd()}catch(e){n.log("—— log end ——")}})}function y(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=Object.assign({},E,e),n=t.logger,r=t.stateTransformer,o=t.errorTransformer,i=t.predicate,a=t.logErrors,u=t.diffPredicate;if(void 0===n)return function(){return function(e){return function(t){return e(t)}}};if(e.getState&&e.dispatch)return console.error("[redux-logger] redux-logger not installed. Make sure to pass logger instance as middleware:\n// Logger with default options\nimport { logger } from 'redux-logger'\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n// Or you can create your own logger with custom options http://bit.ly/redux-logger-options\nimport createLogger from 'redux-logger'\nconst logger = createLogger({\n  // ...options\n});\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n"),function(){return function(e){return function(t){return e(t)}}};var s=[];return function(e){var n=e.getState;return function(e){return function(c){if("function"==typeof i&&!i(n,c))return e(c);var l={};s.push(l),l.started=b.now(),l.startedTime=new Date,l.prevState=r(n()),l.action=c;var f=void 0;if(a)try{f=e(c)}catch(e){l.error=o(e)}else f=e(c);l.took=b.now()-l.started,l.nextState=r(n());var p=t.diff&&"function"==typeof u?u(n,c):t.diff;if(g(s,Object.assign({},t,{diff:p})),s.length=0,l.error)throw l.error;return f}}}}var v,_,x=function(e,t){return function(e,t){return new Array(t+1).join(e)}("0",t-e.toString().length)+e},m=function(e){return x(e.getHours(),2)+":"+x(e.getMinutes(),2)+":"+x(e.getSeconds(),2)+"."+x(e.getMilliseconds(),3)},b="undefined"!=typeof performance&&null!==performance&&"function"==typeof performance.now?performance:Date,O="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},w=function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)},S=[];v="object"===(void 0===e?"undefined":O(e))&&e?e:"undefined"!=typeof window?window:{},(_=v.DeepDiff)&&S.push(function(){void 0!==_&&v.DeepDiff===f&&(v.DeepDiff=_,_=void 0)}),n(o,r),n(i,r),n(a,r),n(u,r),Object.defineProperties(f,{diff:{value:f,enumerable:!0},observableDiff:{value:l,enumerable:!0},applyDiff:{value:function(e,t,n){e&&t&&l(e,t,function(r){n&&!n(e,t,r)||p(e,t,r)})},enumerable:!0},applyChange:{value:p,enumerable:!0},revertChange:{value:function(e,t,n){if(e&&t&&n&&n.kind){var r,o,i=e;for(o=n.path.length-1,r=0;r<o;r++)void 0===i[n.path[r]]&&(i[n.path[r]]={}),i=i[n.path[r]];switch(n.kind){case"A":!function e(t,n,r){if(r.path&&r.path.length){var o,i=t[n],a=r.path.length-1;for(o=0;o<a;o++)i=i[r.path[o]];switch(r.kind){case"A":e(i[r.path[o]],r.index,r.item);break;case"D":case"E":i[r.path[o]]=r.lhs;break;case"N":delete i[r.path[o]]}}else switch(r.kind){case"A":e(t[n],r.index,r.item);break;case"D":case"E":t[n]=r.lhs;break;case"N":t=s(t,n)}return t}(i[n.path[r]],n.index,n.item);break;case"D":case"E":i[n.path[r]]=n.lhs;break;case"N":delete i[n.path[r]]}}},enumerable:!0},isConflict:{value:function(){return void 0!==_},enumerable:!0},noConflict:{value:function(){return S&&(S.forEach(function(e){e()}),S=null),f},enumerable:!0}});var k={E:{color:"#2196F3",text:"CHANGED:"},N:{color:"#4CAF50",text:"ADDED:"},D:{color:"#F44336",text:"DELETED:"},A:{color:"#2196F3",text:"ARRAY:"}},E={level:"log",logger:console,logErrors:!0,collapsed:void 0,predicate:void 0,duration:!1,timestamp:!0,stateTransformer:function(e){return e},actionTransformer:function(e){return e},errorTransformer:function(e){return e},colors:{title:function(){return"inherit"},prevState:function(){return"#9E9E9E"},action:function(){return"#03A9F4"},nextState:function(){return"#4CAF50"},error:function(){return"#F20404"}},diff:!1,diffPredicate:void 0,transformer:void 0},T=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.dispatch,n=e.getState;return"function"==typeof t||"function"==typeof n?y()({dispatch:t,getState:n}):void console.error("\n[redux-logger v3] BREAKING CHANGE\n[redux-logger v3] Since 3.0.0 redux-logger exports by default logger with default settings.\n[redux-logger v3] Change\n[redux-logger v3] import createLogger from 'redux-logger'\n[redux-logger v3] to\n[redux-logger v3] import { createLogger } from 'redux-logger'\n")};t.defaults=E,t.createLogger=y,t.logger=T,t.default=T,Object.defineProperty(t,"__esModule",{value:!0})}(t)}).call(this,n(61))},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";var r=n(121),o=n(122),i=n(267);e.exports=function(){function e(e,t,n,r,a,u){u!==i&&o(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=r,n.PropTypes=n,n}},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=p(n(5)),i=n(138),a=n(9),u=p(n(192)),s=n(266),c=p(n(265)),l=p(n(209)),f=p(n(198));function p(e){return e&&e.__esModule?e:{default:e}}var d=(0,u.default)(),h=(0,i.createStore)(l.default,(0,i.applyMiddleware)(d,(0,s.createLogger)()));d.run(f.default);var g=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"render",value:function(){return o.default.createElement(a.Provider,{store:h},o.default.createElement(c.default,null))}}]),t}();t.default=g},function(e,t){e.exports=function(e,t){var n=t===Object(t)?function(e){return t[e]}:t;return function(t){return String(t).replace(e,n)}}},function(e,t,n){var r=n(1),o=n(271)(/[\\^$*+?.()|[\]{}]/g,"\\$&");r(r.S,"RegExp",{escape:function(e){return o(e)}})},function(e,t,n){n(272),e.exports=n(29).RegExp.escape},function(e,t,n){(function(t){!function(t){"use strict";var n,r=Object.prototype,o=r.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",u=i.asyncIterator||"@@asyncIterator",s=i.toStringTag||"@@toStringTag",c="object"==typeof e,l=t.regeneratorRuntime;if(l)c&&(e.exports=l);else{(l=t.regeneratorRuntime=c?e.exports:{}).wrap=m;var f="suspendedStart",p="suspendedYield",d="executing",h="completed",g={},y={};y[a]=function(){return this};var v=Object.getPrototypeOf,_=v&&v(v(P([])));_&&_!==r&&o.call(_,a)&&(y=_);var x=S.prototype=O.prototype=Object.create(y);w.prototype=x.constructor=S,S.constructor=w,S[s]=w.displayName="GeneratorFunction",l.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===w||"GeneratorFunction"===(t.displayName||t.name))},l.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,S):(e.__proto__=S,s in e||(e[s]="GeneratorFunction")),e.prototype=Object.create(x),e},l.awrap=function(e){return{__await:e}},k(E.prototype),E.prototype[u]=function(){return this},l.AsyncIterator=E,l.async=function(e,t,n,r){var o=new E(m(e,t,n,r));return l.isGeneratorFunction(t)?o:o.next().then(function(e){return e.done?e.value:o.next()})},k(x),x[s]="Generator",x[a]=function(){return this},x.toString=function(){return"[object Generator]"},l.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},l.values=P,A.prototype={constructor:A,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=n,this.done=!1,this.delegate=null,this.method="next",this.arg=n,this.tryEntries.forEach(j),!e)for(var t in this)"t"===t.charAt(0)&&o.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=n)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(r,o){return u.type="throw",u.arg=e,t.next=r,o&&(t.method="next",t.arg=n),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],u=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var s=o.call(a,"catchLoc"),c=o.call(a,"finallyLoc");if(s&&c){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(s){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&o.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var i=r;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=t,i?(this.method="next",this.next=i.finallyLoc,g):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),g},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),j(n),g}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;j(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,r){return this.delegate={iterator:P(e),resultName:t,nextLoc:r},"next"===this.method&&(this.arg=n),g}}}function m(e,t,n,r){var o=t&&t.prototype instanceof O?t:O,i=Object.create(o.prototype),a=new A(r||[]);return i._invoke=function(e,t,n){var r=f;return function(o,i){if(r===d)throw new Error("Generator is already running");if(r===h){if("throw"===o)throw i;return N()}for(n.method=o,n.arg=i;;){var a=n.delegate;if(a){var u=T(a,n);if(u){if(u===g)continue;return u}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===f)throw r=h,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=d;var s=b(e,t,n);if("normal"===s.type){if(r=n.done?h:p,s.arg===g)continue;return{value:s.arg,done:n.done}}"throw"===s.type&&(r=h,n.method="throw",n.arg=s.arg)}}}(e,n,a),i}function b(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}function O(){}function w(){}function S(){}function k(e){["next","throw","return"].forEach(function(t){e[t]=function(e){return this._invoke(t,e)}})}function E(e){function n(t,r,i,a){var u=b(e[t],e,r);if("throw"!==u.type){var s=u.arg,c=s.value;return c&&"object"==typeof c&&o.call(c,"__await")?Promise.resolve(c.__await).then(function(e){n("next",e,i,a)},function(e){n("throw",e,i,a)}):Promise.resolve(c).then(function(e){s.value=e,i(s)},a)}a(u.arg)}var r;"object"==typeof t.process&&t.process.domain&&(n=t.process.domain.bind(n)),this._invoke=function(e,t){function o(){return new Promise(function(r,o){n(e,t,r,o)})}return r=r?r.then(o,o):o()}}function T(e,t){var r=e.iterator[t.method];if(r===n){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=n,T(e,t),"throw"===t.method))return g;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return g}var o=b(r,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,g;var i=o.arg;return i?i.done?(t[e.resultName]=i.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=n),t.delegate=null,g):i:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,g)}function C(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function j(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function A(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function P(e){if(e){var t=e[a];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,i=function t(){for(;++r<e.length;)if(o.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=n,t.done=!0,t};return i.next=i}}return{next:N}}function N(){return{value:n,done:!0}}}("object"==typeof t?t:"object"==typeof window?window:"object"==typeof self?self:this)}).call(this,n(61))},function(e,t,n){for(var r=n(99),o=n(52),i=n(19),a=n(4),u=n(20),s=n(58),c=n(8),l=c("iterator"),f=c("toStringTag"),p=s.Array,d={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},h=o(d),g=0;g<h.length;g++){var y,v=h[g],_=d[v],x=a[v],m=x&&x.prototype;if(m&&(m[l]||u(m,l,p),m[f]||u(m,f,v),s[v]=p,_))for(y in r)m[y]||i(m,y,r[y],!0)}},function(e,t,n){var r=n(1),o=n(98);r(r.G+r.B,{setImmediate:o.set,clearImmediate:o.clear})},function(e,t,n){var r=n(4),o=n(1),i=n(80),a=[].slice,u=/MSIE .\./.test(i),s=function(e){return function(t,n){var r=arguments.length>2,o=!!r&&a.call(arguments,2);return e(r?function(){("function"==typeof t?t:Function(t)).apply(this,o)}:t,n)}};o(o.G+o.B+o.F*u,{setTimeout:s(r.setTimeout),setInterval:s(r.setInterval)})},function(e,t,n){"use strict";var r=n(1),o=n(4),i=n(29),a=n(97)(),u=n(8)("observable"),s=n(17),c=n(3),l=n(47),f=n(45),p=n(20),d=n(46),h=d.RETURN,g=function(e){return null==e?void 0:s(e)},y=function(e){var t=e._c;t&&(e._c=void 0,t())},v=function(e){return void 0===e._o},_=function(e){v(e)||(e._o=void 0,y(e))},x=function(e,t){c(e),this._c=void 0,this._o=e,e=new m(this);try{var n=t(e),r=n;null!=n&&("function"==typeof n.unsubscribe?n=function(){r.unsubscribe()}:s(n),this._c=n)}catch(t){return void e.error(t)}v(this)&&y(this)};x.prototype=f({},{unsubscribe:function(){_(this)}});var m=function(e){this._s=e};m.prototype=f({},{next:function(e){var t=this._s;if(!v(t)){var n=t._o;try{var r=g(n.next);if(r)return r.call(n,e)}catch(e){try{_(t)}finally{throw e}}}},error:function(e){var t=this._s;if(v(t))throw e;var n=t._o;t._o=void 0;try{var r=g(n.error);if(!r)throw e;e=r.call(n,e)}catch(e){try{y(t)}finally{throw e}}return y(t),e},complete:function(e){var t=this._s;if(!v(t)){var n=t._o;t._o=void 0;try{var r=g(n.complete);e=r?r.call(n,e):void 0}catch(e){try{y(t)}finally{throw e}}return y(t),e}}});var b=function(e){l(this,b,"Observable","_f")._f=s(e)};f(b.prototype,{subscribe:function(e){return new x(e,this._f)},forEach:function(e){var t=this;return new(i.Promise||o.Promise)(function(n,r){s(e);var o=t.subscribe({next:function(t){try{return e(t)}catch(e){r(e),o.unsubscribe()}},error:r,complete:n})})}}),f(b,{from:function(e){var t="function"==typeof this?this:b,n=g(c(e)[u]);if(n){var r=c(n.call(e));return r.constructor===t?r:new t(function(e){return r.subscribe(e)})}return new t(function(t){var n=!1;return a(function(){if(!n){try{if(d(e,!1,function(e){if(t.next(e),n)return h})===h)return}catch(e){if(n)throw e;return void t.error(e)}t.complete()}}),function(){n=!0}})},of:function(){for(var e=0,t=arguments.length,n=new Array(t);e<t;)n[e]=arguments[e++];return new("function"==typeof this?this:b)(function(e){var t=!1;return a(function(){if(!t){for(var r=0;r<n.length;++r)if(e.next(n[r]),t)return;e.complete()}}),function(){t=!0}})}}),p(b.prototype,u,function(){return this}),r(r.G,{Observable:b}),n(48)("Observable")},function(e,t,n){var r=n(1),o=n(97)(),i=n(4).process,a="process"==n(27)(i);r(r.G,{asap:function(e){var t=a&&i.domain;o(t?t.bind(e):e)}})},function(e,t,n){var r=n(37),o=n(3),i=n(17),a=r.key,u=r.set;r.exp({metadata:function(e,t){return function(n,r){u(e,t,(void 0!==r?o:i)(n),a(r))}}})},function(e,t,n){var r=n(37),o=n(3),i=r.has,a=r.key;r.exp({hasOwnMetadata:function(e,t){return i(e,o(t),arguments.length<3?void 0:a(arguments[2]))}})},function(e,t,n){var r=n(37),o=n(3),i=n(21),a=r.has,u=r.key,s=function(e,t,n){if(a(e,t,n))return!0;var r=i(t);return null!==r&&s(e,r,n)};r.exp({hasMetadata:function(e,t){return s(e,o(t),arguments.length<3?void 0:u(arguments[2]))}})},function(e,t,n){var r=n(37),o=n(3),i=r.keys,a=r.key;r.exp({getOwnMetadataKeys:function(e){return i(o(e),arguments.length<2?void 0:a(arguments[1]))}})},function(e,t,n){var r=n(37),o=n(3),i=r.get,a=r.key;r.exp({getOwnMetadata:function(e,t){return i(e,o(t),arguments.length<3?void 0:a(arguments[2]))}})},function(e,t,n){var r=n(163),o=n(154),i=n(37),a=n(3),u=n(21),s=i.keys,c=i.key,l=function(e,t){var n=s(e,t),i=u(e);if(null===i)return n;var a=l(i,t);return a.length?n.length?o(new r(n.concat(a))):a:n};i.exp({getMetadataKeys:function(e){return l(a(e),arguments.length<2?void 0:c(arguments[1]))}})},function(e,t,n){var r=n(37),o=n(3),i=n(21),a=r.has,u=r.get,s=r.key,c=function(e,t,n){if(a(e,t,n))return u(e,t,n);var r=i(t);return null!==r?c(e,r,n):void 0};r.exp({getMetadata:function(e,t){return c(e,o(t),arguments.length<3?void 0:s(arguments[2]))}})},function(e,t,n){var r=n(37),o=n(3),i=r.key,a=r.map,u=r.store;r.exp({deleteMetadata:function(e,t){var n=arguments.length<3?void 0:i(arguments[2]),r=a(o(t),n,!1);if(void 0===r||!r.delete(e))return!1;if(r.size)return!0;var s=u.get(t);return s.delete(n),!!s.size||u.delete(t)}})},function(e,t,n){var r=n(37),o=n(3),i=r.key,a=r.set;r.exp({defineMetadata:function(e,t,n,r){a(e,t,o(n),i(r))}})},function(e,t,n){"use strict";var r=n(1),o=n(96),i=n(167);r(r.S,"Promise",{try:function(e){var t=o.f(this),n=i(e);return(n.e?t.reject:t.resolve)(n.v),t.promise}})},function(e,t,n){"use strict";var r=n(1),o=n(29),i=n(4),a=n(81),u=n(166);r(r.P+r.R,"Promise",{finally:function(e){var t=a(this,o.Promise||i.Promise),n="function"==typeof e;return this.then(n?function(n){return u(t,e()).then(function(){return n})}:e,n?function(n){return u(t,e()).then(function(){throw n})}:e)}})},function(e,t,n){var r=n(1);r(r.S,"Math",{signbit:function(e){return(e=+e)!=e?e:0==e?1/e==1/0:e>0}})},function(e,t,n){var r=n(1);r(r.S,"Math",{umulh:function(e,t){var n=+e,r=+t,o=65535&n,i=65535&r,a=n>>>16,u=r>>>16,s=(a*i>>>0)+(o*i>>>16);return a*u+(s>>>16)+((o*u>>>0)+(65535&s)>>>16)}})},function(e,t,n){var r=n(1);r(r.S,"Math",{scale:n(153)})},function(e,t,n){var r=n(1),o=Math.PI/180;r(r.S,"Math",{radians:function(e){return e*o}})},function(e,t,n){var r=n(1);r(r.S,"Math",{RAD_PER_DEG:180/Math.PI})},function(e,t,n){var r=n(1);r(r.S,"Math",{imulh:function(e,t){var n=+e,r=+t,o=65535&n,i=65535&r,a=n>>16,u=r>>16,s=(a*i>>>0)+(o*i>>>16);return a*u+(s>>16)+((o*u>>>0)+(65535&s)>>16)}})},function(e,t,n){var r=n(1);r(r.S,"Math",{isubh:function(e,t,n,r){var o=e>>>0,i=n>>>0;return(t>>>0)-(r>>>0)-((~o&i|~(o^i)&o-i>>>0)>>>31)|0}})},function(e,t,n){var r=n(1);r(r.S,"Math",{iaddh:function(e,t,n,r){var o=e>>>0,i=n>>>0;return(t>>>0)+(r>>>0)+((o&i|(o|i)&~(o+i>>>0))>>>31)|0}})},function(e,t,n){var r=n(1),o=n(153),i=n(173);r(r.S,"Math",{fscale:function(e,t,n,r,a){return i(o(e,t,n,r,a))}})},function(e,t,n){var r=n(1),o=180/Math.PI;r(r.S,"Math",{degrees:function(e){return e*o}})},function(e,t,n){var r=n(1);r(r.S,"Math",{DEG_PER_RAD:Math.PI/180})},function(e,t,n){var r=n(1);r(r.S,"Math",{clamp:function(e,t,n){return Math.min(n,Math.max(t,e))}})},function(e,t,n){var r=n(1),o=n(27);r(r.S,"Error",{isError:function(e){return"Error"===o(e)}})},function(e,t,n){var r=n(1);r(r.S,"System",{global:n(4)})},function(e,t,n){var r=n(1);r(r.G,{global:n(4)})},function(e,t,n){n(75)("WeakSet")},function(e,t,n){n(75)("WeakMap")},function(e,t,n){n(75)("Set")},function(e,t,n){n(75)("Map")},function(e,t,n){n(76)("WeakSet")},function(e,t,n){n(76)("WeakMap")},function(e,t,n){n(76)("Set")},function(e,t,n){n(76)("Map")},function(e,t,n){var r=n(1);r(r.P+r.R,"Set",{toJSON:n(155)("Set")})},function(e,t,n){var r=n(1);r(r.P+r.R,"Map",{toJSON:n(155)("Map")})},function(e,t,n){"use strict";var r=n(1),o=n(15),i=n(34),a=n(21),u=n(22).f;n(13)&&r(r.P+n(77),"Object",{__lookupSetter__:function(e){var t,n=o(this),r=i(e,!0);do{if(t=u(n,r))return t.set}while(n=a(n))}})},function(e,t,n){"use strict";var r=n(1),o=n(15),i=n(34),a=n(21),u=n(22).f;n(13)&&r(r.P+n(77),"Object",{__lookupGetter__:function(e){var t,n=o(this),r=i(e,!0);do{if(t=u(n,r))return t.get}while(n=a(n))}})},function(e,t,n){"use strict";var r=n(1),o=n(15),i=n(17),a=n(12);n(13)&&r(r.P+n(77),"Object",{__defineSetter__:function(e,t){a.f(o(this),e,{set:i(t),enumerable:!0,configurable:!0})}})},function(e,t,n){"use strict";var r=n(1),o=n(15),i=n(17),a=n(12);n(13)&&r(r.P+n(77),"Object",{__defineGetter__:function(e,t){a.f(o(this),e,{get:i(t),enumerable:!0,configurable:!0})}})},function(e,t,n){var r=n(1),o=n(156)(!0);r(r.S,"Object",{entries:function(e){return o(e)}})},function(e,t,n){var r=n(1),o=n(156)(!1);r(r.S,"Object",{values:function(e){return o(e)}})},function(e,t,n){var r=n(1),o=n(159),i=n(23),a=n(22),u=n(103);r(r.S,"Object",{getOwnPropertyDescriptors:function(e){for(var t,n,r=i(e),s=a.f,c=o(r),l={},f=0;c.length>f;)void 0!==(n=s(r,t=c[f++]))&&u(l,t,n);return l}})},function(e,t,n){n(119)("observable")},function(e,t,n){n(119)("asyncIterator")},function(e,t,n){"use strict";var r=n(1),o=n(33),i=n(11),a=n(85),u=n(83),s=RegExp.prototype,c=function(e,t){this._r=e,this._s=t};n(107)(c,"RegExp String",function(){var e=this._r.exec(this._s);return{value:e,done:null===e}}),r(r.P,"String",{matchAll:function(e){if(o(this),!a(e))throw TypeError(e+" is not a regexp!");var t=String(this),n="flags"in s?String(e.flags):u.call(e),r=new RegExp(e.source,~n.indexOf("g")?n:"g"+n);return r.lastIndex=i(e.lastIndex),new c(r,t)}})},function(e,t,n){"use strict";n(59)("trimRight",function(e){return function(){return e(this,2)}},"trimEnd")},function(e,t,n){"use strict";n(59)("trimLeft",function(e){return function(){return e(this,1)}},"trimStart")},function(e,t,n){"use strict";var r=n(1),o=n(157),i=n(80);r(r.P+r.F*/Version\/10\.\d+(\.\d+)? Safari\//.test(i),"String",{padEnd:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0,!1)}})},function(e,t,n){"use strict";var r=n(1),o=n(157),i=n(80);r(r.P+r.F*/Version\/10\.\d+(\.\d+)? Safari\//.test(i),"String",{padStart:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0,!0)}})},function(e,t,n){"use strict";var r=n(1),o=n(109)(!0);r(r.P,"String",{at:function(e){return o(this,e)}})},function(e,t,n){"use strict";var r=n(1),o=n(158),i=n(15),a=n(11),u=n(32),s=n(101);r(r.P,"Array",{flatten:function(){var e=arguments[0],t=i(this),n=a(t.length),r=s(t,0);return o(r,t,t,n,0,void 0===e?1:u(e)),r}}),n(40)("flatten")},function(e,t,n){"use strict";var r=n(1),o=n(158),i=n(15),a=n(11),u=n(17),s=n(101);r(r.P,"Array",{flatMap:function(e){var t,n,r=i(this);return u(e),t=a(r.length),n=s(r,0),o(n,r,r,t,0,1,e,arguments[1]),n}}),n(40)("flatMap")},function(e,t,n){"use strict";var r=n(1),o=n(88)(!0);r(r.P,"Array",{includes:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),n(40)("includes")},function(e,t,n){var r=n(1),o=n(115);o&&r(r.S,"Reflect",{setPrototypeOf:function(e,t){o.check(e,t);try{return o.set(e,t),!0}catch(e){return!1}}})},function(e,t,n){var r=n(12),o=n(22),i=n(21),a=n(24),u=n(1),s=n(54),c=n(3),l=n(7);u(u.S,"Reflect",{set:function e(t,n,u){var f,p,d=arguments.length<4?t:arguments[3],h=o.f(c(t),n);if(!h){if(l(p=i(t)))return e(p,n,u,d);h=s(0)}if(a(h,"value")){if(!1===h.writable||!l(d))return!1;if(f=o.f(d,n)){if(f.get||f.set||!1===f.writable)return!1;f.value=u,r.f(d,n,f)}else r.f(d,n,s(0,u));return!0}return void 0!==h.set&&(h.set.call(d,u),!0)}})},function(e,t,n){var r=n(1),o=n(3),i=Object.preventExtensions;r(r.S,"Reflect",{preventExtensions:function(e){o(e);try{return i&&i(e),!0}catch(e){return!1}}})},function(e,t,n){var r=n(1);r(r.S,"Reflect",{ownKeys:n(159)})},function(e,t,n){var r=n(1),o=n(3),i=Object.isExtensible;r(r.S,"Reflect",{isExtensible:function(e){return o(e),!i||i(e)}})},function(e,t,n){var r=n(1);r(r.S,"Reflect",{has:function(e,t){return t in e}})},function(e,t,n){var r=n(1),o=n(21),i=n(3);r(r.S,"Reflect",{getPrototypeOf:function(e){return o(i(e))}})},function(e,t,n){var r=n(22),o=n(1),i=n(3);o(o.S,"Reflect",{getOwnPropertyDescriptor:function(e,t){return r.f(i(e),t)}})},function(e,t,n){var r=n(22),o=n(21),i=n(24),a=n(1),u=n(7),s=n(3);a(a.S,"Reflect",{get:function e(t,n){var a,c,l=arguments.length<3?t:arguments[2];return s(t)===l?t[n]:(a=r.f(t,n))?i(a,"value")?a.value:void 0!==a.get?a.get.call(l):void 0:u(c=o(t))?e(c,n,l):void 0}})},function(e,t,n){"use strict";var r=n(1),o=n(3),i=function(e){this._t=o(e),this._i=0;var t,n=this._k=[];for(t in e)n.push(t)};n(107)(i,"Object",function(){var e,t=this._k;do{if(this._i>=t.length)return{value:void 0,done:!0}}while(!((e=t[this._i++])in this._t));return{value:e,done:!1}}),r(r.S,"Reflect",{enumerate:function(e){return new i(e)}})},function(e,t,n){var r=n(1),o=n(22).f,i=n(3);r(r.S,"Reflect",{deleteProperty:function(e,t){var n=o(i(e),t);return!(n&&!n.configurable)&&delete e[t]}})},function(e,t,n){var r=n(12),o=n(1),i=n(3),a=n(34);o(o.S+o.F*n(6)(function(){Reflect.defineProperty(r.f({},1,{value:1}),1,{value:2})}),"Reflect",{defineProperty:function(e,t,n){i(e),t=a(t,!0),i(n);try{return r.f(e,t,n),!0}catch(e){return!1}}})},function(e,t,n){var r=n(1),o=n(50),i=n(17),a=n(3),u=n(7),s=n(6),c=n(180),l=(n(4).Reflect||{}).construct,f=s(function(){function e(){}return!(l(function(){},[],e)instanceof e)}),p=!s(function(){l(function(){})});r(r.S+r.F*(f||p),"Reflect",{construct:function(e,t){i(e),a(t);var n=arguments.length<3?e:i(arguments[2]);if(p&&!f)return l(e,t,n);if(e==n){switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3])}var r=[null];return r.push.apply(r,t),new(c.apply(e,r))}var s=n.prototype,d=o(u(s)?s:Object.prototype),h=Function.apply.call(e,d,t);return u(h)?h:d}})},function(e,t,n){var r=n(1),o=n(17),i=n(3),a=(n(4).Reflect||{}).apply,u=Function.apply;r(r.S+r.F*!n(6)(function(){a(function(){})}),"Reflect",{apply:function(e,t,n){var r=o(e),s=i(n);return a?a(r,t,s):u.call(r,t,s)}})},function(e,t,n){n(38)("Float64",8,function(e){return function(t,n,r){return e(this,t,n,r)}})},function(e,t,n){n(38)("Float32",4,function(e){return function(t,n,r){return e(this,t,n,r)}})},function(e,t,n){n(38)("Uint32",4,function(e){return function(t,n,r){return e(this,t,n,r)}})},function(e,t,n){n(38)("Int32",4,function(e){return function(t,n,r){return e(this,t,n,r)}})},function(e,t,n){n(38)("Uint16",2,function(e){return function(t,n,r){return e(this,t,n,r)}})},function(e,t,n){n(38)("Int16",2,function(e){return function(t,n,r){return e(this,t,n,r)}})},function(e,t,n){n(38)("Uint8",1,function(e){return function(t,n,r){return e(this,t,n,r)}},!0)},function(e,t,n){n(38)("Uint8",1,function(e){return function(t,n,r){return e(this,t,n,r)}})},function(e,t,n){n(38)("Int8",1,function(e){return function(t,n,r){return e(this,t,n,r)}})},function(e,t,n){var r=n(1);r(r.G+r.W+r.F*!n(78).ABV,{DataView:n(95).DataView})},function(e,t,n){"use strict";var r=n(1),o=n(78),i=n(95),a=n(3),u=n(51),s=n(11),c=n(7),l=n(4).ArrayBuffer,f=n(81),p=i.ArrayBuffer,d=i.DataView,h=o.ABV&&l.isView,g=p.prototype.slice,y=o.VIEW;r(r.G+r.W+r.F*(l!==p),{ArrayBuffer:p}),r(r.S+r.F*!o.CONSTR,"ArrayBuffer",{isView:function(e){return h&&h(e)||c(e)&&y in e}}),r(r.P+r.U+r.F*n(6)(function(){return!new p(2).slice(1,void 0).byteLength}),"ArrayBuffer",{slice:function(e,t){if(void 0!==g&&void 0===t)return g.call(a(this),e);for(var n=a(this).byteLength,r=u(e,n),o=u(void 0===t?n:t,n),i=new(f(this,p))(s(o-r)),c=new d(this),l=new d(i),h=0;r<o;)l.setUint8(h++,c.getUint8(r++));return i}}),n(48)("ArrayBuffer")},function(e,t,n){"use strict";var r=n(161),o=n(57);n(79)("WeakSet",function(e){return function(){return e(this,arguments.length>0?arguments[0]:void 0)}},{add:function(e){return r.def(o(this,"WeakSet"),e,!0)}},r,!1,!0)},function(e,t,n){"use strict";var r,o,i,a,u=n(41),s=n(4),c=n(28),l=n(65),f=n(1),p=n(7),d=n(17),h=n(47),g=n(46),y=n(81),v=n(98).set,_=n(97)(),x=n(96),m=n(167),b=n(80),O=n(166),w=s.TypeError,S=s.process,k=S&&S.versions,E=k&&k.v8||"",T=s.Promise,C="process"==l(S),j=function(){},A=o=x.f,P=!!function(){try{var e=T.resolve(1),t=(e.constructor={})[n(8)("species")]=function(e){e(j,j)};return(C||"function"==typeof PromiseRejectionEvent)&&e.then(j)instanceof t&&0!==E.indexOf("6.6")&&-1===b.indexOf("Chrome/66")}catch(e){}}(),N=function(e){var t;return!(!p(e)||"function"!=typeof(t=e.then))&&t},M=function(e,t){if(!e._n){e._n=!0;var n=e._c;_(function(){for(var r=e._v,o=1==e._s,i=0,a=function(t){var n,i,a,u=o?t.ok:t.fail,s=t.resolve,c=t.reject,l=t.domain;try{u?(o||(2==e._h&&z(e),e._h=1),!0===u?n=r:(l&&l.enter(),n=u(r),l&&(l.exit(),a=!0)),n===t.promise?c(w("Promise-chain cycle")):(i=N(n))?i.call(n,s,c):s(n)):c(r)}catch(e){l&&!a&&l.exit(),c(e)}};n.length>i;)a(n[i++]);e._c=[],e._n=!1,t&&!e._h&&B(e)})}},B=function(e){v.call(s,function(){var t,n,r,o=e._v,i=D(e);if(i&&(t=m(function(){C?S.emit("unhandledRejection",o,e):(n=s.onunhandledrejection)?n({promise:e,reason:o}):(r=s.console)&&r.error&&r.error("Unhandled promise rejection",o)}),e._h=C||D(e)?2:1),e._a=void 0,i&&t.e)throw t.v})},D=function(e){return 1!==e._h&&0===(e._a||e._c).length},z=function(e){v.call(s,function(){var t;C?S.emit("rejectionHandled",e):(t=s.onrejectionhandled)&&t({promise:e,reason:e._v})})},L=function(e){var t=this;t._d||(t._d=!0,(t=t._w||t)._v=e,t._s=2,t._a||(t._a=t._c.slice()),M(t,!0))},U=function(e){var t,n=this;if(!n._d){n._d=!0,n=n._w||n;try{if(n===e)throw w("Promise can't be resolved itself");(t=N(e))?_(function(){var r={_w:n,_d:!1};try{t.call(e,c(U,r,1),c(L,r,1))}catch(e){L.call(r,e)}}):(n._v=e,n._s=1,M(n,!1))}catch(e){L.call({_w:n,_d:!1},e)}}};P||(T=function(e){h(this,T,"Promise","_h"),d(e),r.call(this);try{e(c(U,this,1),c(L,this,1))}catch(e){L.call(this,e)}},(r=function(e){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=n(45)(T.prototype,{then:function(e,t){var n=A(y(this,T));return n.ok="function"!=typeof e||e,n.fail="function"==typeof t&&t,n.domain=C?S.domain:void 0,this._c.push(n),this._a&&this._a.push(n),this._s&&M(this,!1),n.promise},catch:function(e){return this.then(void 0,e)}}),i=function(){var e=new r;this.promise=e,this.resolve=c(U,e,1),this.reject=c(L,e,1)},x.f=A=function(e){return e===T||e===a?new i(e):o(e)}),f(f.G+f.W+f.F*!P,{Promise:T}),n(60)(T,"Promise"),n(48)("Promise"),a=n(29).Promise,f(f.S+f.F*!P,"Promise",{reject:function(e){var t=A(this);return(0,t.reject)(e),t.promise}}),f(f.S+f.F*(u||!P),"Promise",{resolve:function(e){return O(u&&this===a?T:this,e)}}),f(f.S+f.F*!(P&&n(84)(function(e){T.all(e).catch(j)})),"Promise",{all:function(e){var t=this,n=A(t),r=n.resolve,o=n.reject,i=m(function(){var n=[],i=0,a=1;g(e,!1,function(e){var u=i++,s=!1;n.push(void 0),a++,t.resolve(e).then(function(e){s||(s=!0,n[u]=e,--a||r(n))},o)}),--a||r(n)});return i.e&&o(i.v),n.promise},race:function(e){var t=this,n=A(t),r=n.reject,o=m(function(){g(e,!1,function(e){t.resolve(e).then(n.resolve,r)})});return o.e&&r(o.v),n.promise}})},function(e,t,n){n(82)("split",2,function(e,t,r){"use strict";var o=n(85),i=r,a=[].push;if("c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length){var u=void 0===/()??/.exec("")[1];r=function(e,t){var n=String(this);if(void 0===e&&0===t)return[];if(!o(e))return i.call(n,e,t);var r,s,c,l,f,p=[],d=(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.unicode?"u":"")+(e.sticky?"y":""),h=0,g=void 0===t?4294967295:t>>>0,y=new RegExp(e.source,d+"g");for(u||(r=new RegExp("^"+y.source+"$(?!\\s)",d));(s=y.exec(n))&&!((c=s.index+s[0].length)>h&&(p.push(n.slice(h,s.index)),!u&&s.length>1&&s[0].replace(r,function(){for(f=1;f<arguments.length-2;f++)void 0===arguments[f]&&(s[f]=void 0)}),s.length>1&&s.index<n.length&&a.apply(p,s.slice(1)),l=s[0].length,h=c,p.length>=g));)y.lastIndex===s.index&&y.lastIndex++;return h===n.length?!l&&y.test("")||p.push(""):p.push(n.slice(h)),p.length>g?p.slice(0,g):p}}else"0".split(void 0,0).length&&(r=function(e,t){return void 0===e&&0===t?[]:i.call(this,e,t)});return[function(n,o){var i=e(this),a=void 0==n?void 0:n[t];return void 0!==a?a.call(n,i,o):r.call(String(i),n,o)},r]})},function(e,t,n){n(82)("search",1,function(e,t,n){return[function(n){"use strict";var r=e(this),o=void 0==n?void 0:n[t];return void 0!==o?o.call(n,r):new RegExp(n)[t](String(r))},n]})},function(e,t,n){n(82)("replace",2,function(e,t,n){return[function(r,o){"use strict";var i=e(this),a=void 0==r?void 0:r[t];return void 0!==a?a.call(r,i,o):n.call(String(i),r,o)},n]})},function(e,t,n){n(82)("match",1,function(e,t,n){return[function(n){"use strict";var r=e(this),o=void 0==n?void 0:n[t];return void 0!==o?o.call(n,r):new RegExp(n)[t](String(r))},n]})},function(e,t,n){"use strict";n(168);var r=n(3),o=n(83),i=n(13),a=/./.toString,u=function(e){n(19)(RegExp.prototype,"toString",e,!0)};n(6)(function(){return"/a/b"!=a.call({source:"a",flags:"b"})})?u(function(){var e=r(this);return"/".concat(e.source,"/","flags"in e?e.flags:!i&&e instanceof RegExp?o.call(e):void 0)}):"toString"!=a.name&&u(function(){return a.call(this)})},function(e,t,n){var r=n(4),o=n(113),i=n(12).f,a=n(49).f,u=n(85),s=n(83),c=r.RegExp,l=c,f=c.prototype,p=/a/g,d=/a/g,h=new c(p)!==p;if(n(13)&&(!h||n(6)(function(){return d[n(8)("match")]=!1,c(p)!=p||c(d)==d||"/a/i"!=c(p,"i")}))){c=function(e,t){var n=this instanceof c,r=u(e),i=void 0===t;return!n&&r&&e.constructor===c&&i?e:o(h?new l(r&&!i?e.source:e,t):l((r=e instanceof c)?e.source:e,r&&i?s.call(e):t),n?this:f,c)};for(var g=function(e){e in c||i(c,e,{configurable:!0,get:function(){return l[e]},set:function(t){l[e]=t}})},y=a(l),v=0;y.length>v;)g(y[v++]);f.constructor=c,c.prototype=f,n(19)(r,"RegExp",c)}n(48)("RegExp")},function(e,t,n){n(48)("Array")},function(e,t,n){"use strict";var r=n(1),o=n(30)(6),i="findIndex",a=!0;i in[]&&Array(1)[i](function(){a=!1}),r(r.P+r.F*a,"Array",{findIndex:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),n(40)(i)},function(e,t,n){"use strict";var r=n(1),o=n(30)(5),i=!0;"find"in[]&&Array(1).find(function(){i=!1}),r(r.P+r.F*i,"Array",{find:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),n(40)("find")},function(e,t,n){var r=n(1);r(r.P,"Array",{fill:n(100)}),n(40)("fill")},function(e,t,n){var r=n(1);r(r.P,"Array",{copyWithin:n(170)}),n(40)("copyWithin")},function(e,t,n){"use strict";var r=n(1),o=n(23),i=n(32),a=n(11),u=[].lastIndexOf,s=!!u&&1/[1].lastIndexOf(1,-0)<0;r(r.P+r.F*(s||!n(26)(u)),"Array",{lastIndexOf:function(e){if(s)return u.apply(this,arguments)||0;var t=o(this),n=a(t.length),r=n-1;for(arguments.length>1&&(r=Math.min(r,i(arguments[1]))),r<0&&(r=n+r);r>=0;r--)if(r in t&&t[r]===e)return r||0;return-1}})},function(e,t,n){"use strict";var r=n(1),o=n(88)(!1),i=[].indexOf,a=!!i&&1/[1].indexOf(1,-0)<0;r(r.P+r.F*(a||!n(26)(i)),"Array",{indexOf:function(e){return a?i.apply(this,arguments)||0:o(this,e,arguments[1])}})},function(e,t,n){"use strict";var r=n(1),o=n(171);r(r.P+r.F*!n(26)([].reduceRight,!0),"Array",{reduceRight:function(e){return o(this,e,arguments.length,arguments[1],!0)}})},function(e,t,n){"use strict";var r=n(1),o=n(171);r(r.P+r.F*!n(26)([].reduce,!0),"Array",{reduce:function(e){return o(this,e,arguments.length,arguments[1],!1)}})},function(e,t,n){"use strict";var r=n(1),o=n(30)(4);r(r.P+r.F*!n(26)([].every,!0),"Array",{every:function(e){return o(this,e,arguments[1])}})},function(e,t,n){"use strict";var r=n(1),o=n(30)(3);r(r.P+r.F*!n(26)([].some,!0),"Array",{some:function(e){return o(this,e,arguments[1])}})},function(e,t,n){"use strict";var r=n(1),o=n(30)(2);r(r.P+r.F*!n(26)([].filter,!0),"Array",{filter:function(e){return o(this,e,arguments[1])}})},function(e,t,n){"use strict";var r=n(1),o=n(30)(1);r(r.P+r.F*!n(26)([].map,!0),"Array",{map:function(e){return o(this,e,arguments[1])}})},function(e,t,n){var r=n(7),o=n(86),i=n(8)("species");e.exports=function(e){var t;return o(e)&&("function"!=typeof(t=e.constructor)||t!==Array&&!o(t.prototype)||(t=void 0),r(t)&&null===(t=t[i])&&(t=void 0)),void 0===t?Array:t}},function(e,t,n){"use strict";var r=n(1),o=n(30)(0),i=n(26)([].forEach,!0);r(r.P+r.F*!i,"Array",{forEach:function(e){return o(this,e,arguments[1])}})},function(e,t,n){"use strict";var r=n(1),o=n(17),i=n(15),a=n(6),u=[].sort,s=[1,2,3];r(r.P+r.F*(a(function(){s.sort(void 0)})||!a(function(){s.sort(null)})||!n(26)(u)),"Array",{sort:function(e){return void 0===e?u.call(i(this)):u.call(i(this),o(e))}})},function(e,t,n){"use strict";var r=n(1),o=n(116),i=n(27),a=n(51),u=n(11),s=[].slice;r(r.P+r.F*n(6)(function(){o&&s.call(o)}),"Array",{slice:function(e,t){var n=u(this.length),r=i(this);if(t=void 0===t?n:t,"Array"==r)return s.call(this,e,t);for(var o=a(e,n),c=a(t,n),l=u(c-o),f=new Array(l),p=0;p<l;p++)f[p]="String"==r?this.charAt(o+p):this[o+p];return f}})},function(e,t,n){"use strict";var r=n(1),o=n(23),i=[].join;r(r.P+r.F*(n(67)!=Object||!n(26)(i)),"Array",{join:function(e){return i.call(o(this),void 0===e?",":e)}})},function(e,t,n){"use strict";var r=n(1),o=n(103);r(r.S+r.F*n(6)(function(){function e(){}return!(Array.of.call(e)instanceof e)}),"Array",{of:function(){for(var e=0,t=arguments.length,n=new("function"==typeof this?this:Array)(t);t>e;)o(n,e,arguments[e++]);return n.length=t,n}})},function(e,t,n){"use strict";var r=n(28),o=n(1),i=n(15),a=n(172),u=n(104),s=n(11),c=n(103),l=n(102);o(o.S+o.F*!n(84)(function(e){Array.from(e)}),"Array",{from:function(e){var t,n,o,f,p=i(e),d="function"==typeof this?this:Array,h=arguments.length,g=h>1?arguments[1]:void 0,y=void 0!==g,v=0,_=l(p);if(y&&(g=r(g,h>2?arguments[2]:void 0,2)),void 0==_||d==Array&&u(_))for(n=new d(t=s(p.length));t>v;v++)c(n,v,y?g(p[v],v):p[v]);else for(f=_.call(p),n=new d;!(o=f.next()).done;v++)c(n,v,y?a(f,g,[o.value,v],!0):o.value);return n.length=v,n}})},function(e,t,n){var r=n(1);r(r.S,"Array",{isArray:n(86)})},function(e,t,n){"use strict";var r=n(3),o=n(34);e.exports=function(e){if("string"!==e&&"number"!==e&&"default"!==e)throw TypeError("Incorrect hint");return o(r(this),"number"!=e)}},function(e,t,n){var r=n(8)("toPrimitive"),o=Date.prototype;r in o||n(20)(o,r,n(388))},function(e,t,n){var r=Date.prototype,o=r.toString,i=r.getTime;new Date(NaN)+""!="Invalid Date"&&n(19)(r,"toString",function(){var e=i.call(this);return e==e?o.call(this):"Invalid Date"})},function(e,t,n){"use strict";var r=n(6),o=Date.prototype.getTime,i=Date.prototype.toISOString,a=function(e){return e>9?e:"0"+e};e.exports=r(function(){return"0385-07-25T07:06:39.999Z"!=i.call(new Date(-5e13-1))})||!r(function(){i.call(new Date(NaN))})?function(){if(!isFinite(o.call(this)))throw RangeError("Invalid time value");var e=this,t=e.getUTCFullYear(),n=e.getUTCMilliseconds(),r=t<0?"-":t>9999?"+":"";return r+("00000"+Math.abs(t)).slice(r?-6:-4)+"-"+a(e.getUTCMonth()+1)+"-"+a(e.getUTCDate())+"T"+a(e.getUTCHours())+":"+a(e.getUTCMinutes())+":"+a(e.getUTCSeconds())+"."+(n>99?n:"0"+a(n))+"Z"}:i},function(e,t,n){var r=n(1),o=n(391);r(r.P+r.F*(Date.prototype.toISOString!==o),"Date",{toISOString:o})},function(e,t,n){"use strict";var r=n(1),o=n(15),i=n(34);r(r.P+r.F*n(6)(function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})}),"Date",{toJSON:function(e){var t=o(this),n=i(t);return"number"!=typeof n||isFinite(n)?t.toISOString():null}})},function(e,t,n){var r=n(1);r(r.S,"Date",{now:function(){return(new Date).getTime()}})},function(e,t,n){"use strict";n(18)("sup",function(e){return function(){return e(this,"sup","","")}})},function(e,t,n){"use strict";n(18)("sub",function(e){return function(){return e(this,"sub","","")}})},function(e,t,n){"use strict";n(18)("strike",function(e){return function(){return e(this,"strike","","")}})},function(e,t,n){"use strict";n(18)("small",function(e){return function(){return e(this,"small","","")}})},function(e,t,n){"use strict";n(18)("link",function(e){return function(t){return e(this,"a","href",t)}})},function(e,t,n){"use strict";n(18)("italics",function(e){return function(){return e(this,"i","","")}})},function(e,t,n){"use strict";n(18)("fontsize",function(e){return function(t){return e(this,"font","size",t)}})},function(e,t,n){"use strict";n(18)("fontcolor",function(e){return function(t){return e(this,"font","color",t)}})},function(e,t,n){"use strict";n(18)("fixed",function(e){return function(){return e(this,"tt","","")}})},function(e,t,n){"use strict";n(18)("bold",function(e){return function(){return e(this,"b","","")}})},function(e,t,n){"use strict";n(18)("blink",function(e){return function(){return e(this,"blink","","")}})},function(e,t,n){"use strict";n(18)("big",function(e){return function(){return e(this,"big","","")}})},function(e,t,n){"use strict";n(18)("anchor",function(e){return function(t){return e(this,"a","name",t)}})},function(e,t,n){"use strict";var r=n(1),o=n(11),i=n(106),a="".startsWith;r(r.P+r.F*n(105)("startsWith"),"String",{startsWith:function(e){var t=i(this,e,"startsWith"),n=o(Math.min(arguments.length>1?arguments[1]:void 0,t.length)),r=String(e);return a?a.call(t,r,n):t.slice(n,n+r.length)===r}})},function(e,t,n){var r=n(1);r(r.P,"String",{repeat:n(112)})},function(e,t,n){"use strict";var r=n(1),o=n(106);r(r.P+r.F*n(105)("includes"),"String",{includes:function(e){return!!~o(this,e,"includes").indexOf(e,arguments.length>1?arguments[1]:void 0)}})},function(e,t,n){"use strict";var r=n(1),o=n(11),i=n(106),a="".endsWith;r(r.P+r.F*n(105)("endsWith"),"String",{endsWith:function(e){var t=i(this,e,"endsWith"),n=arguments.length>1?arguments[1]:void 0,r=o(t.length),u=void 0===n?r:Math.min(o(n),r),s=String(e);return a?a.call(t,s,u):t.slice(u-s.length,u)===s}})},function(e,t,n){"use strict";var r=n(1),o=n(109)(!1);r(r.P,"String",{codePointAt:function(e){return o(this,e)}})},function(e,t,n){"use strict";var r=n(109)(!0);n(108)(String,"String",function(e){this._t=String(e),this._i=0},function(){var e,t=this._t,n=this._i;return n>=t.length?{value:void 0,done:!0}:(e=r(t,n),this._i+=e.length,{value:e,done:!1})})},function(e,t,n){"use strict";n(59)("trim",function(e){return function(){return e(this,3)}})},function(e,t,n){var r=n(1),o=n(23),i=n(11);r(r.S,"String",{raw:function(e){for(var t=o(e.raw),n=i(t.length),r=arguments.length,a=[],u=0;n>u;)a.push(String(t[u++])),u<r&&a.push(String(arguments[u]));return a.join("")}})},function(e,t,n){var r=n(1),o=n(51),i=String.fromCharCode,a=String.fromCodePoint;r(r.S+r.F*(!!a&&1!=a.length),"String",{fromCodePoint:function(e){for(var t,n=[],r=arguments.length,a=0;r>a;){if(t=+arguments[a++],o(t,1114111)!==t)throw RangeError(t+" is not a valid code point");n.push(t<65536?i(t):i(55296+((t-=65536)>>10),t%1024+56320))}return n.join("")}})},function(e,t,n){var r=n(1);r(r.S,"Math",{trunc:function(e){return(e>0?Math.floor:Math.ceil)(e)}})},function(e,t,n){var r=n(1),o=n(110),i=Math.exp;r(r.S,"Math",{tanh:function(e){var t=o(e=+e),n=o(-e);return t==1/0?1:n==1/0?-1:(t-n)/(i(e)+i(-e))}})},function(e,t,n){var r=n(1),o=n(110),i=Math.exp;r(r.S+r.F*n(6)(function(){return-2e-17!=!Math.sinh(-2e-17)}),"Math",{sinh:function(e){return Math.abs(e=+e)<1?(o(e)-o(-e))/2:(i(e-1)-i(-e-1))*(Math.E/2)}})},function(e,t,n){var r=n(1);r(r.S,"Math",{sign:n(111)})},function(e,t,n){var r=n(1);r(r.S,"Math",{log2:function(e){return Math.log(e)/Math.LN2}})},function(e,t,n){var r=n(1);r(r.S,"Math",{log1p:n(174)})},function(e,t,n){var r=n(1);r(r.S,"Math",{log10:function(e){return Math.log(e)*Math.LOG10E}})},function(e,t,n){var r=n(1),o=Math.imul;r(r.S+r.F*n(6)(function(){return-5!=o(4294967295,5)||2!=o.length}),"Math",{imul:function(e,t){var n=+e,r=+t,o=65535&n,i=65535&r;return 0|o*i+((65535&n>>>16)*i+o*(65535&r>>>16)<<16>>>0)}})},function(e,t,n){var r=n(1),o=Math.abs;r(r.S,"Math",{hypot:function(e,t){for(var n,r,i=0,a=0,u=arguments.length,s=0;a<u;)s<(n=o(arguments[a++]))?(i=i*(r=s/n)*r+1,s=n):i+=n>0?(r=n/s)*r:n;return s===1/0?1/0:s*Math.sqrt(i)}})},function(e,t,n){var r=n(1);r(r.S,"Math",{fround:n(173)})},function(e,t,n){var r=n(1),o=n(110);r(r.S+r.F*(o!=Math.expm1),"Math",{expm1:o})},function(e,t,n){var r=n(1),o=Math.exp;r(r.S,"Math",{cosh:function(e){return(o(e=+e)+o(-e))/2}})},function(e,t,n){var r=n(1);r(r.S,"Math",{clz32:function(e){return(e>>>=0)?31-Math.floor(Math.log(e+.5)*Math.LOG2E):32}})},function(e,t,n){var r=n(1),o=n(111);r(r.S,"Math",{cbrt:function(e){return o(e=+e)*Math.pow(Math.abs(e),1/3)}})},function(e,t,n){var r=n(1),o=Math.atanh;r(r.S+r.F*!(o&&1/o(-0)<0),"Math",{atanh:function(e){return 0==(e=+e)?e:Math.log((1+e)/(1-e))/2}})},function(e,t,n){var r=n(1),o=Math.asinh;r(r.S+r.F*!(o&&1/o(0)>0),"Math",{asinh:function e(t){return isFinite(t=+t)&&0!=t?t<0?-e(-t):Math.log(t+Math.sqrt(t*t+1)):t}})},function(e,t,n){var r=n(1),o=n(174),i=Math.sqrt,a=Math.acosh;r(r.S+r.F*!(a&&710==Math.floor(a(Number.MAX_VALUE))&&a(1/0)==1/0),"Math",{acosh:function(e){return(e=+e)<1?NaN:e>94906265.62425156?Math.log(e)+Math.LN2:o(e-1+i(e-1)*i(e+1))}})},function(e,t,n){var r=n(1),o=n(178);r(r.S+r.F*(Number.parseInt!=o),"Number",{parseInt:o})},function(e,t,n){var r=n(1),o=n(177);r(r.S+r.F*(Number.parseFloat!=o),"Number",{parseFloat:o})},function(e,t,n){var r=n(1);r(r.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},function(e,t,n){var r=n(1);r(r.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},function(e,t,n){var r=n(1),o=n(175),i=Math.abs;r(r.S,"Number",{isSafeInteger:function(e){return o(e)&&i(e)<=9007199254740991}})},function(e,t,n){var r=n(1);r(r.S,"Number",{isNaN:function(e){return e!=e}})},function(e,t,n){var r=n(1);r(r.S,"Number",{isInteger:n(175)})},function(e,t,n){var r=n(1),o=n(4).isFinite;r(r.S,"Number",{isFinite:function(e){return"number"==typeof e&&o(e)}})},function(e,t,n){var r=n(1);r(r.S,"Number",{EPSILON:Math.pow(2,-52)})},function(e,t,n){"use strict";var r=n(1),o=n(6),i=n(176),a=1..toPrecision;r(r.P+r.F*(o(function(){return"1"!==a.call(1,void 0)})||!o(function(){a.call({})})),"Number",{toPrecision:function(e){var t=i(this,"Number#toPrecision: incorrect invocation!");return void 0===e?a.call(t):a.call(t,e)}})},function(e,t,n){"use strict";var r=n(1),o=n(32),i=n(176),a=n(112),u=1..toFixed,s=Math.floor,c=[0,0,0,0,0,0],l="Number.toFixed: incorrect invocation!",f=function(e,t){for(var n=-1,r=t;++n<6;)r+=e*c[n],c[n]=r%1e7,r=s(r/1e7)},p=function(e){for(var t=6,n=0;--t>=0;)n+=c[t],c[t]=s(n/e),n=n%e*1e7},d=function(){for(var e=6,t="";--e>=0;)if(""!==t||0===e||0!==c[e]){var n=String(c[e]);t=""===t?n:t+a.call("0",7-n.length)+n}return t},h=function(e,t,n){return 0===t?n:t%2==1?h(e,t-1,n*e):h(e*e,t/2,n)};r(r.P+r.F*(!!u&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!n(6)(function(){u.call({})})),"Number",{toFixed:function(e){var t,n,r,u,s=i(this,l),c=o(e),g="",y="0";if(c<0||c>20)throw RangeError(l);if(s!=s)return"NaN";if(s<=-1e21||s>=1e21)return String(s);if(s<0&&(g="-",s=-s),s>1e-21)if(n=(t=function(e){for(var t=0,n=e;n>=4096;)t+=12,n/=4096;for(;n>=2;)t+=1,n/=2;return t}(s*h(2,69,1))-69)<0?s*h(2,-t,1):s/h(2,t,1),n*=4503599627370496,(t=52-t)>0){for(f(0,n),r=c;r>=7;)f(1e7,0),r-=7;for(f(h(10,r,1),0),r=t-1;r>=23;)p(1<<23),r-=23;p(1<<r),f(1,1),p(2),y=d()}else f(0,n),f(1<<-t,0),y=d()+a.call("0",c);return y=c>0?g+((u=y.length)<=c?"0."+a.call("0",c-u)+y:y.slice(0,u-c)+"."+y.slice(u-c)):g+y}})},function(e,t,n){"use strict";var r=n(4),o=n(24),i=n(27),a=n(113),u=n(34),s=n(6),c=n(49).f,l=n(22).f,f=n(12).f,p=n(59).trim,d=r.Number,h=d,g=d.prototype,y="Number"==i(n(50)(g)),v="trim"in String.prototype,_=function(e){var t=u(e,!1);if("string"==typeof t&&t.length>2){var n,r,o,i=(t=v?t.trim():p(t,3)).charCodeAt(0);if(43===i||45===i){if(88===(n=t.charCodeAt(2))||120===n)return NaN}else if(48===i){switch(t.charCodeAt(1)){case 66:case 98:r=2,o=49;break;case 79:case 111:r=8,o=55;break;default:return+t}for(var a,s=t.slice(2),c=0,l=s.length;c<l;c++)if((a=s.charCodeAt(c))<48||a>o)return NaN;return parseInt(s,r)}}return+t};if(!d(" 0o1")||!d("0b1")||d("+0x1")){d=function(e){var t=arguments.length<1?0:e,n=this;return n instanceof d&&(y?s(function(){g.valueOf.call(n)}):"Number"!=i(n))?a(new h(_(t)),n,d):_(t)};for(var x,m=n(13)?c(h):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),b=0;m.length>b;b++)o(h,x=m[b])&&!o(d,x)&&f(d,x,l(h,x));d.prototype=g,g.constructor=d,n(19)(r,"Number",d)}},function(e,t,n){var r=n(1),o=n(177);r(r.G+r.F*(parseFloat!=o),{parseFloat:o})},function(e,t,n){var r=n(1),o=n(178);r(r.G+r.F*(parseInt!=o),{parseInt:o})},function(e,t,n){"use strict";var r=n(7),o=n(21),i=n(8)("hasInstance"),a=Function.prototype;i in a||n(12).f(a,i,{value:function(e){if("function"!=typeof this||!r(e))return!1;if(!r(this.prototype))return e instanceof this;for(;e=o(e);)if(this.prototype===e)return!0;return!1}})},function(e,t,n){var r=n(12).f,o=Function.prototype,i=/^\s*function ([^ (]*)/;"name"in o||n(13)&&r(o,"name",{configurable:!0,get:function(){try{return(""+this).match(i)[1]}catch(e){return""}}})},function(e,t,n){var r=n(1);r(r.P,"Function",{bind:n(180)})},function(e,t,n){"use strict";var r=n(65),o={};o[n(8)("toStringTag")]="z",o+""!="[object z]"&&n(19)(Object.prototype,"toString",function(){return"[object "+r(this)+"]"},!0)},function(e,t,n){var r=n(1);r(r.S,"Object",{setPrototypeOf:n(115).set})},function(e,t){e.exports=Object.is||function(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}},function(e,t,n){var r=n(1);r(r.S,"Object",{is:n(453)})},function(e,t,n){var r=n(1);r(r.S+r.F,"Object",{assign:n(181)})},function(e,t,n){var r=n(7);n(31)("isExtensible",function(e){return function(t){return!!r(t)&&(!e||e(t))}})},function(e,t,n){var r=n(7);n(31)("isSealed",function(e){return function(t){return!r(t)||!!e&&e(t)}})},function(e,t,n){var r=n(7);n(31)("isFrozen",function(e){return function(t){return!r(t)||!!e&&e(t)}})},function(e,t,n){var r=n(7),o=n(42).onFreeze;n(31)("preventExtensions",function(e){return function(t){return e&&r(t)?e(o(t)):t}})},function(e,t,n){var r=n(7),o=n(42).onFreeze;n(31)("seal",function(e){return function(t){return e&&r(t)?e(o(t)):t}})},function(e,t,n){var r=n(7),o=n(42).onFreeze;n(31)("freeze",function(e){return function(t){return e&&r(t)?e(o(t)):t}})},function(e,t,n){n(31)("getOwnPropertyNames",function(){return n(182).f})},function(e,t,n){var r=n(15),o=n(52);n(31)("keys",function(){return function(e){return o(r(e))}})},function(e,t,n){var r=n(15),o=n(21);n(31)("getPrototypeOf",function(){return function(e){return o(r(e))}})},function(e,t,n){var r=n(23),o=n(22).f;n(31)("getOwnPropertyDescriptor",function(){return function(e,t){return o(r(e),t)}})},function(e,t,n){var r=n(1);r(r.S+r.F*!n(13),"Object",{defineProperties:n(183)})},function(e,t,n){var r=n(1);r(r.S+r.F*!n(13),"Object",{defineProperty:n(12).f})},function(e,t,n){var r=n(1);r(r.S,"Object",{create:n(50)})},function(e,t,n){var r=n(52),o=n(87),i=n(66);e.exports=function(e){var t=r(e),n=o.f;if(n)for(var a,u=n(e),s=i.f,c=0;u.length>c;)s.call(e,a=u[c++])&&t.push(a);return t}},function(e,t,n){"use strict";var r=n(4),o=n(24),i=n(13),a=n(1),u=n(19),s=n(42).KEY,c=n(6),l=n(89),f=n(60),p=n(53),d=n(8),h=n(185),g=n(119),y=n(469),v=n(86),_=n(3),x=n(7),m=n(23),b=n(34),O=n(54),w=n(50),S=n(182),k=n(22),E=n(12),T=n(52),C=k.f,j=E.f,A=S.f,P=r.Symbol,N=r.JSON,M=N&&N.stringify,B=d("_hidden"),D=d("toPrimitive"),z={}.propertyIsEnumerable,L=l("symbol-registry"),U=l("symbols"),I=l("op-symbols"),R=Object.prototype,F="function"==typeof P,X=r.QObject,G=!X||!X.prototype||!X.prototype.findChild,K=i&&c(function(){return 7!=w(j({},"a",{get:function(){return j(this,"a",{value:7}).a}})).a})?function(e,t,n){var r=C(R,t);r&&delete R[t],j(e,t,n),r&&e!==R&&j(R,t,r)}:j,W=function(e){var t=U[e]=w(P.prototype);return t._k=e,t},H=F&&"symbol"==typeof P.iterator?function(e){return"symbol"==typeof e}:function(e){return e instanceof P},q=function(e,t,n){return e===R&&q(I,t,n),_(e),t=b(t,!0),_(n),o(U,t)?(n.enumerable?(o(e,B)&&e[B][t]&&(e[B][t]=!1),n=w(n,{enumerable:O(0,!1)})):(o(e,B)||j(e,B,O(1,{})),e[B][t]=!0),K(e,t,n)):j(e,t,n)},V=function(e,t){_(e);for(var n,r=y(t=m(t)),o=0,i=r.length;i>o;)q(e,n=r[o++],t[n]);return e},Z=function(e){var t=z.call(this,e=b(e,!0));return!(this===R&&o(U,e)&&!o(I,e))&&(!(t||!o(this,e)||!o(U,e)||o(this,B)&&this[B][e])||t)},Y=function(e,t){if(e=m(e),t=b(t,!0),e!==R||!o(U,t)||o(I,t)){var n=C(e,t);return!n||!o(U,t)||o(e,B)&&e[B][t]||(n.enumerable=!0),n}},J=function(e){for(var t,n=A(m(e)),r=[],i=0;n.length>i;)o(U,t=n[i++])||t==B||t==s||r.push(t);return r},$=function(e){for(var t,n=e===R,r=A(n?I:m(e)),i=[],a=0;r.length>a;)!o(U,t=r[a++])||n&&!o(R,t)||i.push(U[t]);return i};F||(u((P=function(){if(this instanceof P)throw TypeError("Symbol is not a constructor!");var e=p(arguments.length>0?arguments[0]:void 0),t=function(n){this===R&&t.call(I,n),o(this,B)&&o(this[B],e)&&(this[B][e]=!1),K(this,e,O(1,n))};return i&&G&&K(R,e,{configurable:!0,set:t}),W(e)}).prototype,"toString",function(){return this._k}),k.f=Y,E.f=q,n(49).f=S.f=J,n(66).f=Z,n(87).f=$,i&&!n(41)&&u(R,"propertyIsEnumerable",Z,!0),h.f=function(e){return W(d(e))}),a(a.G+a.W+a.F*!F,{Symbol:P});for(var Q="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),ee=0;Q.length>ee;)d(Q[ee++]);for(var te=T(d.store),ne=0;te.length>ne;)g(te[ne++]);a(a.S+a.F*!F,"Symbol",{for:function(e){return o(L,e+="")?L[e]:L[e]=P(e)},keyFor:function(e){if(!H(e))throw TypeError(e+" is not a symbol!");for(var t in L)if(L[t]===e)return t},useSetter:function(){G=!0},useSimple:function(){G=!1}}),a(a.S+a.F*!F,"Object",{create:function(e,t){return void 0===t?w(e):V(w(e),t)},defineProperty:q,defineProperties:V,getOwnPropertyDescriptor:Y,getOwnPropertyNames:J,getOwnPropertySymbols:$}),N&&a(a.S+a.F*(!F||c(function(){var e=P();return"[null]"!=M([e])||"{}"!=M({a:e})||"{}"!=M(Object(e))})),"JSON",{stringify:function(e){for(var t,n,r=[e],o=1;arguments.length>o;)r.push(arguments[o++]);if(n=t=r[1],(x(t)||void 0!==e)&&!H(e))return v(t)||(t=function(e,t){if("function"==typeof n&&(t=n.call(this,e,t)),!H(t))return t}),r[1]=t,M.apply(N,r)}}),P.prototype[D]||n(20)(P.prototype,D,P.prototype.valueOf),f(P,"Symbol"),f(Math,"Math",!0),f(r.JSON,"JSON",!0)},function(e,t,n){n(470),n(468),n(467),n(466),n(465),n(464),n(463),n(462),n(461),n(460),n(459),n(458),n(457),n(456),n(455),n(454),n(452),n(451),n(450),n(449),n(448),n(447),n(446),n(445),n(444),n(443),n(442),n(441),n(440),n(439),n(438),n(437),n(436),n(435),n(434),n(433),n(432),n(431),n(430),n(429),n(428),n(427),n(426),n(425),n(424),n(423),n(422),n(421),n(420),n(419),n(418),n(417),n(416),n(415),n(414),n(413),n(412),n(411),n(410),n(409),n(408),n(407),n(406),n(405),n(404),n(403),n(402),n(401),n(400),n(399),n(398),n(397),n(396),n(395),n(394),n(393),n(392),n(390),n(389),n(387),n(386),n(385),n(384),n(383),n(382),n(381),n(379),n(378),n(377),n(376),n(375),n(374),n(373),n(372),n(371),n(370),n(369),n(368),n(367),n(99),n(366),n(365),n(168),n(364),n(363),n(362),n(361),n(360),n(165),n(163),n(162),n(359),n(358),n(357),n(356),n(355),n(354),n(353),n(352),n(351),n(350),n(349),n(348),n(347),n(346),n(345),n(344),n(343),n(342),n(341),n(340),n(339),n(338),n(337),n(336),n(335),n(334),n(333),n(332),n(331),n(330),n(329),n(328),n(327),n(326),n(325),n(324),n(323),n(322),n(321),n(320),n(319),n(318),n(317),n(316),n(315),n(314),n(313),n(312),n(311),n(310),n(309),n(308),n(307),n(306),n(305),n(304),n(303),n(302),n(301),n(300),n(299),n(298),n(297),n(296),n(295),n(294),n(293),n(292),n(291),n(290),n(289),n(288),n(287),n(286),n(285),n(284),n(283),n(282),n(281),n(280),n(279),n(278),n(277),n(276),n(275),e.exports=n(29)},function(e,t,n){"use strict";(function(e){if(n(471),n(274),n(273),e._babelPolyfill)throw new Error("only one instance of babel-polyfill is allowed");e._babelPolyfill=!0;var t="defineProperty";function r(e,n,r){e[n]||Object[t](e,n,{writable:!0,configurable:!0,value:r})}r(String.prototype,"padLeft","".padStart),r(String.prototype,"padRight","".padEnd),"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function(e){[][e]&&r(Array,e,Function.call.bind([][e]))})}).call(this,n(61))},function(e,t,n){"use strict";e.exports=function(e){var t=(e?e.ownerDocument||e:document).defaultView||window;return!(!e||!("function"==typeof t.Node?e instanceof t.Node:"object"==typeof e&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName))}},function(e,t,n){"use strict";var r=n(473);e.exports=function(e){return r(e)&&3==e.nodeType}},function(e,t,n){"use strict";var r=n(474);e.exports=function e(t,n){return!(!t||!n)&&(t===n||!r(t)&&(r(n)?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}},function(e,t,n){"use strict";var r=Object.prototype.hasOwnProperty;function o(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}e.exports=function(e,t){if(o(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),i=Object.keys(t);if(n.length!==i.length)return!1;for(var a=0;a<n.length;a++)if(!r.call(t,n[a])||!o(e[n[a]],t[n[a]]))return!1;return!0}},function(e,t,n){"use strict";e.exports=function(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}},function(e,t,n){"use strict";var r=!("undefined"==typeof window||!window.document||!window.document.createElement),o={canUseDOM:r,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:r&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:r&&!!window.screen,isInWorker:!r};e.exports=o},function(e,t,n){"use strict";
/** @license React v16.3.2
 * react-dom.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(122),o=n(5),i=n(478),a=n(188),u=n(121),s=n(477),c=n(476),l=n(475),f=n(187);function p(e){for(var t=arguments.length-1,n="http://reactjs.org/docs/error-decoder.html?invariant="+e,o=0;o<t;o++)n+="&args[]="+encodeURIComponent(arguments[o+1]);r(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}o||p("227");var d={_caughtError:null,_hasCaughtError:!1,_rethrowError:null,_hasRethrowError:!1,invokeGuardedCallback:function(e,t,n,r,o,i,a,u,s){(function(e,t,n,r,o,i,a,u,s){this._hasCaughtError=!1,this._caughtError=null;var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this._caughtError=e,this._hasCaughtError=!0}}).apply(d,arguments)},invokeGuardedCallbackAndCatchFirstError:function(e,t,n,r,o,i,a,u,s){if(d.invokeGuardedCallback.apply(this,arguments),d.hasCaughtError()){var c=d.clearCaughtError();d._hasRethrowError||(d._hasRethrowError=!0,d._rethrowError=c)}},rethrowCaughtError:function(){return function(){if(d._hasRethrowError){var e=d._rethrowError;throw d._rethrowError=null,d._hasRethrowError=!1,e}}.apply(d,arguments)},hasCaughtError:function(){return d._hasCaughtError},clearCaughtError:function(){if(d._hasCaughtError){var e=d._caughtError;return d._caughtError=null,d._hasCaughtError=!1,e}p("198")}};var h=null,g={};function y(){if(h)for(var e in g){var t=g[e],n=h.indexOf(e);if(-1<n||p("96",e),!_[n])for(var r in t.extractEvents||p("97",e),_[n]=t,n=t.eventTypes){var o=void 0,i=n[r],a=t,u=r;x.hasOwnProperty(u)&&p("99",u),x[u]=i;var s=i.phasedRegistrationNames;if(s){for(o in s)s.hasOwnProperty(o)&&v(s[o],a,u);o=!0}else i.registrationName?(v(i.registrationName,a,u),o=!0):o=!1;o||p("98",r,e)}}}function v(e,t,n){m[e]&&p("100",e),m[e]=t,b[e]=t.eventTypes[n].dependencies}var _=[],x={},m={},b={};function O(e){h&&p("101"),h=Array.prototype.slice.call(e),y()}function w(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];g.hasOwnProperty(t)&&g[t]===r||(g[t]&&p("102",t),g[t]=r,n=!0)}n&&y()}var S=Object.freeze({plugins:_,eventNameDispatchConfigs:x,registrationNameModules:m,registrationNameDependencies:b,possibleRegistrationNames:null,injectEventPluginOrder:O,injectEventPluginsByName:w}),k=null,E=null,T=null;function C(e,t,n,r){t=e.type||"unknown-event",e.currentTarget=T(r),d.invokeGuardedCallbackAndCatchFirstError(t,n,void 0,e),e.currentTarget=null}function j(e,t){return null==t&&p("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function A(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var P=null;function N(e,t){if(e){var n=e._dispatchListeners,r=e._dispatchInstances;if(Array.isArray(n))for(var o=0;o<n.length&&!e.isPropagationStopped();o++)C(e,t,n[o],r[o]);else n&&C(e,t,n,r);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function M(e){return N(e,!0)}function B(e){return N(e,!1)}var D={injectEventPluginOrder:O,injectEventPluginsByName:w};function z(e,t){var n=e.stateNode;if(!n)return null;var r=k(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&p("231",t,typeof n),n)}function L(e,t){null!==e&&(P=j(P,e)),e=P,P=null,e&&(A(e,t?M:B),P&&p("95"),d.rethrowCaughtError())}function U(e,t,n,r){for(var o=null,i=0;i<_.length;i++){var a=_[i];a&&(a=a.extractEvents(e,t,n,r))&&(o=j(o,a))}L(o,!1)}var I=Object.freeze({injection:D,getListener:z,runEventsInBatch:L,runExtractedEventsInBatch:U}),R=Math.random().toString(36).slice(2),F="__reactInternalInstance$"+R,X="__reactEventHandlers$"+R;function G(e){if(e[F])return e[F];for(;!e[F];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[F]).tag||6===e.tag?e:null}function K(e){if(5===e.tag||6===e.tag)return e.stateNode;p("33")}function W(e){return e[X]||null}var H=Object.freeze({precacheFiberNode:function(e,t){t[F]=e},getClosestInstanceFromNode:G,getInstanceFromNode:function(e){return!(e=e[F])||5!==e.tag&&6!==e.tag?null:e},getNodeFromInstance:K,getFiberCurrentPropsFromNode:W,updateFiberProps:function(e,t){e[X]=t}});function q(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function V(e,t,n){for(var r=[];e;)r.push(e),e=q(e);for(e=r.length;0<e--;)t(r[e],"captured",n);for(e=0;e<r.length;e++)t(r[e],"bubbled",n)}function Z(e,t,n){(t=z(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=j(n._dispatchListeners,t),n._dispatchInstances=j(n._dispatchInstances,e))}function Y(e){e&&e.dispatchConfig.phasedRegistrationNames&&V(e._targetInst,Z,e)}function J(e){if(e&&e.dispatchConfig.phasedRegistrationNames){var t=e._targetInst;V(t=t?q(t):null,Z,e)}}function $(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=z(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=j(n._dispatchListeners,t),n._dispatchInstances=j(n._dispatchInstances,e))}function Q(e){e&&e.dispatchConfig.registrationName&&$(e._targetInst,null,e)}function ee(e){A(e,Y)}function te(e,t,n,r){if(n&&r)e:{for(var o=n,i=r,a=0,u=o;u;u=q(u))a++;u=0;for(var s=i;s;s=q(s))u++;for(;0<a-u;)o=q(o),a--;for(;0<u-a;)i=q(i),u--;for(;a--;){if(o===i||o===i.alternate)break e;o=q(o),i=q(i)}o=null}else o=null;for(i=o,o=[];n&&n!==i&&(null===(a=n.alternate)||a!==i);)o.push(n),n=q(n);for(n=[];r&&r!==i&&(null===(a=r.alternate)||a!==i);)n.push(r),r=q(r);for(r=0;r<o.length;r++)$(o[r],"bubbled",e);for(e=n.length;0<e--;)$(n[e],"captured",t)}var ne=Object.freeze({accumulateTwoPhaseDispatches:ee,accumulateTwoPhaseDispatchesSkipTarget:function(e){A(e,J)},accumulateEnterLeaveDispatches:te,accumulateDirectDispatches:function(e){A(e,Q)}}),re=null;function oe(){return!re&&i.canUseDOM&&(re="textContent"in document.documentElement?"textContent":"innerText"),re}var ie={_root:null,_startText:null,_fallbackText:null};function ae(){if(ie._fallbackText)return ie._fallbackText;var e,t,n=ie._startText,r=n.length,o=ue(),i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return ie._fallbackText=o.slice(e,1<t?1-t:void 0),ie._fallbackText}function ue(){return"value"in ie._root?ie._root.value:ie._root[oe()]}var se="dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances".split(" "),ce={type:null,target:null,currentTarget:u.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};function le(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?u.thatReturnsTrue:u.thatReturnsFalse,this.isPropagationStopped=u.thatReturnsFalse,this}function fe(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function pe(e){e instanceof this||p("223"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function de(e){e.eventPool=[],e.getPooled=fe,e.release=pe}a(le.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=u.thatReturnsTrue)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=u.thatReturnsTrue)},persist:function(){this.isPersistent=u.thatReturnsTrue},isPersistent:u.thatReturnsFalse,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;for(t=0;t<se.length;t++)this[se[t]]=null}}),le.Interface=ce,le.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var o=new t;return a(o,n.prototype),n.prototype=o,n.prototype.constructor=n,n.Interface=a({},r.Interface,e),n.extend=r.extend,de(n),n},de(le);var he=le.extend({data:null}),ge=le.extend({data:null}),ye=[9,13,27,32],ve=i.canUseDOM&&"CompositionEvent"in window,_e=null;i.canUseDOM&&"documentMode"in document&&(_e=document.documentMode);var xe=i.canUseDOM&&"TextEvent"in window&&!_e,me=i.canUseDOM&&(!ve||_e&&8<_e&&11>=_e),be=String.fromCharCode(32),Oe={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["topCompositionEnd","topKeyPress","topTextInput","topPaste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"topBlur topCompositionEnd topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"topBlur topCompositionStart topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"topBlur topCompositionUpdate topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")}},we=!1;function Se(e,t){switch(e){case"topKeyUp":return-1!==ye.indexOf(t.keyCode);case"topKeyDown":return 229!==t.keyCode;case"topKeyPress":case"topMouseDown":case"topBlur":return!0;default:return!1}}function ke(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Ee=!1;var Te={eventTypes:Oe,extractEvents:function(e,t,n,r){var o=void 0,i=void 0;if(ve)e:{switch(e){case"topCompositionStart":o=Oe.compositionStart;break e;case"topCompositionEnd":o=Oe.compositionEnd;break e;case"topCompositionUpdate":o=Oe.compositionUpdate;break e}o=void 0}else Ee?Se(e,n)&&(o=Oe.compositionEnd):"topKeyDown"===e&&229===n.keyCode&&(o=Oe.compositionStart);return o?(me&&(Ee||o!==Oe.compositionStart?o===Oe.compositionEnd&&Ee&&(i=ae()):(ie._root=r,ie._startText=ue(),Ee=!0)),o=he.getPooled(o,t,n,r),i?o.data=i:null!==(i=ke(n))&&(o.data=i),ee(o),i=o):i=null,(e=xe?function(e,t){switch(e){case"topCompositionEnd":return ke(t);case"topKeyPress":return 32!==t.which?null:(we=!0,be);case"topTextInput":return(e=t.data)===be&&we?null:e;default:return null}}(e,n):function(e,t){if(Ee)return"topCompositionEnd"===e||!ve&&Se(e,t)?(e=ae(),ie._root=null,ie._startText=null,ie._fallbackText=null,Ee=!1,e):null;switch(e){case"topPaste":return null;case"topKeyPress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"topCompositionEnd":return me?null:t.data;default:return null}}(e,n))?((t=ge.getPooled(Oe.beforeInput,t,n,r)).data=e,ee(t)):t=null,null===i?t:null===t?i:[i,t]}},Ce=null,je={injectFiberControlledHostComponent:function(e){Ce=e}},Ae=null,Pe=null;function Ne(e){if(e=E(e)){Ce&&"function"==typeof Ce.restoreControlledState||p("194");var t=k(e.stateNode);Ce.restoreControlledState(e.stateNode,e.type,t)}}function Me(e){Ae?Pe?Pe.push(e):Pe=[e]:Ae=e}function Be(){return null!==Ae||null!==Pe}function De(){if(Ae){var e=Ae,t=Pe;if(Pe=Ae=null,Ne(e),t)for(e=0;e<t.length;e++)Ne(t[e])}}var ze=Object.freeze({injection:je,enqueueStateRestore:Me,needsStateRestore:Be,restoreStateIfNeeded:De});function Le(e,t){return e(t)}function Ue(e,t,n){return e(t,n)}function Ie(){}var Re=!1;function Fe(e,t){if(Re)return e(t);Re=!0;try{return Le(e,t)}finally{Re=!1,Be()&&(Ie(),De())}}var Xe={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Ge(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Xe[e.type]:"textarea"===t}function Ke(e){return(e=e.target||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function We(e,t){return!(!i.canUseDOM||t&&!("addEventListener"in document))&&((t=(e="on"+e)in document)||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t)}function He(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function qe(e){e._valueTracker||(e._valueTracker=function(e){var t=He(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&"function"==typeof n.get&&"function"==typeof n.set)return Object.defineProperty(e,t,{configurable:!0,get:function(){return n.get.call(this)},set:function(e){r=""+e,n.set.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}(e))}function Ve(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=He(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var Ze=o.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,Ye="function"==typeof Symbol&&Symbol.for,Je=Ye?Symbol.for("react.element"):60103,$e=Ye?Symbol.for("react.call"):60104,Qe=Ye?Symbol.for("react.return"):60105,et=Ye?Symbol.for("react.portal"):60106,tt=Ye?Symbol.for("react.fragment"):60107,nt=Ye?Symbol.for("react.strict_mode"):60108,rt=Ye?Symbol.for("react.provider"):60109,ot=Ye?Symbol.for("react.context"):60110,it=Ye?Symbol.for("react.async_mode"):60111,at=Ye?Symbol.for("react.forward_ref"):60112,ut="function"==typeof Symbol&&Symbol.iterator;function st(e){return null===e||void 0===e?null:"function"==typeof(e=ut&&e[ut]||e["@@iterator"])?e:null}function ct(e){if("function"==typeof(e=e.type))return e.displayName||e.name;if("string"==typeof e)return e;switch(e){case tt:return"ReactFragment";case et:return"ReactPortal";case $e:return"ReactCall";case Qe:return"ReactReturn"}if("object"==typeof e&&null!==e)switch(e.$$typeof){case at:return""!==(e=e.render.displayName||e.render.name||"")?"ForwardRef("+e+")":"ForwardRef"}return null}function lt(e){var t="";do{e:switch(e.tag){case 0:case 1:case 2:case 5:var n=e._debugOwner,r=e._debugSource,o=ct(e),i=null;n&&(i=ct(n)),n=r,o="\n    in "+(o||"Unknown")+(n?" (at "+n.fileName.replace(/^.*[\\\/]/,"")+":"+n.lineNumber+")":i?" (created by "+i+")":"");break e;default:o=""}t+=o,e=e.return}while(e);return t}var ft=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,pt={},dt={};function ht(e,t,n,r,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t}var gt={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){gt[e]=new ht(e,0,!1,e,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];gt[t]=new ht(t,1,!1,e[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){gt[e]=new ht(e,2,!1,e.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","preserveAlpha"].forEach(function(e){gt[e]=new ht(e,2,!1,e,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){gt[e]=new ht(e,3,!1,e.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(e){gt[e]=new ht(e,3,!0,e.toLowerCase(),null)}),["capture","download"].forEach(function(e){gt[e]=new ht(e,4,!1,e.toLowerCase(),null)}),["cols","rows","size","span"].forEach(function(e){gt[e]=new ht(e,6,!1,e.toLowerCase(),null)}),["rowSpan","start"].forEach(function(e){gt[e]=new ht(e,5,!1,e.toLowerCase(),null)});var yt=/[\-:]([a-z])/g;function vt(e){return e[1].toUpperCase()}function _t(e,t,n,r){var o=gt.hasOwnProperty(t)?gt[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null===t||void 0===t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!dt.hasOwnProperty(e)||!pt.hasOwnProperty(e)&&(ft.test(e)?dt[e]=!0:(pt[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function xt(e,t){var n=t.checked;return a({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function mt(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=kt(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function bt(e,t){null!=(t=t.checked)&&_t(e,"checked",t,!1)}function Ot(e,t){bt(e,t);var n=kt(t.value);null!=n&&("number"===t.type?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n)),t.hasOwnProperty("value")?St(e,t.type,n):t.hasOwnProperty("defaultValue")&&St(e,t.type,kt(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function wt(e,t){(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue"))&&(""===e.value&&(e.value=""+e._wrapperState.initialValue),e.defaultValue=""+e._wrapperState.initialValue),""!==(t=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!e.defaultChecked,""!==t&&(e.name=t)}function St(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function kt(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(yt,vt);gt[t]=new ht(t,1,!1,e,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(yt,vt);gt[t]=new ht(t,1,!1,e,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(yt,vt);gt[t]=new ht(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")}),gt.tabIndex=new ht("tabIndex",1,!1,"tabindex",null);var Et={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"topBlur topChange topClick topFocus topInput topKeyDown topKeyUp topSelectionChange".split(" ")}};function Tt(e,t,n){return(e=le.getPooled(Et.change,e,t,n)).type="change",Me(n),ee(e),e}var Ct=null,jt=null;function At(e){L(e,!1)}function Pt(e){if(Ve(K(e)))return e}function Nt(e,t){if("topChange"===e)return t}var Mt=!1;function Bt(){Ct&&(Ct.detachEvent("onpropertychange",Dt),jt=Ct=null)}function Dt(e){"value"===e.propertyName&&Pt(jt)&&Fe(At,e=Tt(jt,e,Ke(e)))}function zt(e,t,n){"topFocus"===e?(Bt(),jt=n,(Ct=t).attachEvent("onpropertychange",Dt)):"topBlur"===e&&Bt()}function Lt(e){if("topSelectionChange"===e||"topKeyUp"===e||"topKeyDown"===e)return Pt(jt)}function Ut(e,t){if("topClick"===e)return Pt(t)}function It(e,t){if("topInput"===e||"topChange"===e)return Pt(t)}i.canUseDOM&&(Mt=We("input")&&(!document.documentMode||9<document.documentMode));var Rt={eventTypes:Et,_isInputEventSupported:Mt,extractEvents:function(e,t,n,r){var o=t?K(t):window,i=void 0,a=void 0,u=o.nodeName&&o.nodeName.toLowerCase();if("select"===u||"input"===u&&"file"===o.type?i=Nt:Ge(o)?Mt?i=It:(i=Lt,a=zt):(u=o.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(i=Ut),i&&(i=i(e,t)))return Tt(i,n,r);a&&a(e,o,t),"topBlur"===e&&null!=t&&(e=t._wrapperState||o._wrapperState)&&e.controlled&&"number"===o.type&&St(o,"number",o.value)}},Ft=le.extend({view:null,detail:null}),Xt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Gt(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Xt[e])&&!!t[e]}function Kt(){return Gt}var Wt=Ft.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Kt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)}}),Ht={mouseEnter:{registrationName:"onMouseEnter",dependencies:["topMouseOut","topMouseOver"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["topMouseOut","topMouseOver"]}},qt={eventTypes:Ht,extractEvents:function(e,t,n,r){if("topMouseOver"===e&&(n.relatedTarget||n.fromElement)||"topMouseOut"!==e&&"topMouseOver"!==e)return null;var o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window;if("topMouseOut"===e?(e=t,t=(t=n.relatedTarget||n.toElement)?G(t):null):e=null,e===t)return null;var i=null==e?o:K(e);o=null==t?o:K(t);var a=Wt.getPooled(Ht.mouseLeave,e,n,r);return a.type="mouseleave",a.target=i,a.relatedTarget=o,(n=Wt.getPooled(Ht.mouseEnter,t,n,r)).type="mouseenter",n.target=o,n.relatedTarget=i,te(a,n,e,t),[a,n]}};function Vt(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function Zt(e){return!!(e=e._reactInternalFiber)&&2===Vt(e)}function Yt(e){2!==Vt(e)&&p("188")}function Jt(e){var t=e.alternate;if(!t)return 3===(t=Vt(e))&&p("188"),1===t?null:e;for(var n=e,r=t;;){var o=n.return,i=o?o.alternate:null;if(!o||!i)break;if(o.child===i.child){for(var a=o.child;a;){if(a===n)return Yt(o),e;if(a===r)return Yt(o),t;a=a.sibling}p("188")}if(n.return!==r.return)n=o,r=i;else{a=!1;for(var u=o.child;u;){if(u===n){a=!0,n=o,r=i;break}if(u===r){a=!0,r=o,n=i;break}u=u.sibling}if(!a){for(u=i.child;u;){if(u===n){a=!0,n=i,r=o;break}if(u===r){a=!0,r=i,n=o;break}u=u.sibling}a||p("189")}}n.alternate!==r&&p("190")}return 3!==n.tag&&p("188"),n.stateNode.current===n?e:t}function $t(e){if(!(e=Jt(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var Qt=le.extend({animationName:null,elapsedTime:null,pseudoElement:null}),en=le.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),tn=Ft.extend({relatedTarget:null});function nn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var rn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},on={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},an=Ft.extend({key:function(e){if(e.key){var t=rn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=nn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?on[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Kt,charCode:function(e){return"keypress"===e.type?nn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?nn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),un=Wt.extend({dataTransfer:null}),sn=Ft.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Kt}),cn=le.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),ln=Wt.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),fn={},pn={};function dn(e,t){var n=e[0].toUpperCase()+e.slice(1),r="on"+n;t={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[n="top"+n],isInteractive:t},fn[e]=t,pn[n]=t}"blur cancel click close contextMenu copy cut doubleClick dragEnd dragStart drop focus input invalid keyDown keyPress keyUp mouseDown mouseUp paste pause play rateChange reset seeked submit touchCancel touchEnd touchStart volumeChange".split(" ").forEach(function(e){dn(e,!0)}),"abort animationEnd animationIteration animationStart canPlay canPlayThrough drag dragEnter dragExit dragLeave dragOver durationChange emptied encrypted ended error load loadedData loadedMetadata loadStart mouseMove mouseOut mouseOver playing progress scroll seeking stalled suspend timeUpdate toggle touchMove transitionEnd waiting wheel".split(" ").forEach(function(e){dn(e,!1)});var hn={eventTypes:fn,isInteractiveTopLevelEventType:function(e){return void 0!==(e=pn[e])&&!0===e.isInteractive},extractEvents:function(e,t,n,r){var o=pn[e];if(!o)return null;switch(e){case"topKeyPress":if(0===nn(n))return null;case"topKeyDown":case"topKeyUp":e=an;break;case"topBlur":case"topFocus":e=tn;break;case"topClick":if(2===n.button)return null;case"topDoubleClick":case"topMouseDown":case"topMouseMove":case"topMouseUp":case"topMouseOut":case"topMouseOver":case"topContextMenu":e=Wt;break;case"topDrag":case"topDragEnd":case"topDragEnter":case"topDragExit":case"topDragLeave":case"topDragOver":case"topDragStart":case"topDrop":e=un;break;case"topTouchCancel":case"topTouchEnd":case"topTouchMove":case"topTouchStart":e=sn;break;case"topAnimationEnd":case"topAnimationIteration":case"topAnimationStart":e=Qt;break;case"topTransitionEnd":e=cn;break;case"topScroll":e=Ft;break;case"topWheel":e=ln;break;case"topCopy":case"topCut":case"topPaste":e=en;break;default:e=le}return ee(t=e.getPooled(o,t,n,r)),t}},gn=hn.isInteractiveTopLevelEventType,yn=[];function vn(e){var t=e.targetInst;do{if(!t){e.ancestors.push(t);break}var n;for(n=t;n.return;)n=n.return;if(!(n=3!==n.tag?null:n.stateNode.containerInfo))break;e.ancestors.push(t),t=G(n)}while(t);for(n=0;n<e.ancestors.length;n++)t=e.ancestors[n],U(e.topLevelType,t,e.nativeEvent,Ke(e.nativeEvent))}var _n=!0;function xn(e){_n=!!e}function mn(e,t,n){if(!n)return null;e=(gn(e)?On:wn).bind(null,e),n.addEventListener(t,e,!1)}function bn(e,t,n){if(!n)return null;e=(gn(e)?On:wn).bind(null,e),n.addEventListener(t,e,!0)}function On(e,t){Ue(wn,e,t)}function wn(e,t){if(_n){var n=Ke(t);if(null!==(n=G(n))&&"number"==typeof n.tag&&2!==Vt(n)&&(n=null),yn.length){var r=yn.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{Fe(vn,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>yn.length&&yn.push(e)}}}var Sn=Object.freeze({get _enabled(){return _n},setEnabled:xn,isEnabled:function(){return _n},trapBubbledEvent:mn,trapCapturedEvent:bn,dispatchEvent:wn});function kn(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n["ms"+e]="MS"+t,n["O"+e]="o"+t.toLowerCase(),n}var En={animationend:kn("Animation","AnimationEnd"),animationiteration:kn("Animation","AnimationIteration"),animationstart:kn("Animation","AnimationStart"),transitionend:kn("Transition","TransitionEnd")},Tn={},Cn={};function jn(e){if(Tn[e])return Tn[e];if(!En[e])return e;var t,n=En[e];for(t in n)if(n.hasOwnProperty(t)&&t in Cn)return Tn[e]=n[t];return e}i.canUseDOM&&(Cn=document.createElement("div").style,"AnimationEvent"in window||(delete En.animationend.animation,delete En.animationiteration.animation,delete En.animationstart.animation),"TransitionEvent"in window||delete En.transitionend.transition);var An={topAnimationEnd:jn("animationend"),topAnimationIteration:jn("animationiteration"),topAnimationStart:jn("animationstart"),topBlur:"blur",topCancel:"cancel",topChange:"change",topClick:"click",topClose:"close",topCompositionEnd:"compositionend",topCompositionStart:"compositionstart",topCompositionUpdate:"compositionupdate",topContextMenu:"contextmenu",topCopy:"copy",topCut:"cut",topDoubleClick:"dblclick",topDrag:"drag",topDragEnd:"dragend",topDragEnter:"dragenter",topDragExit:"dragexit",topDragLeave:"dragleave",topDragOver:"dragover",topDragStart:"dragstart",topDrop:"drop",topFocus:"focus",topInput:"input",topKeyDown:"keydown",topKeyPress:"keypress",topKeyUp:"keyup",topLoad:"load",topLoadStart:"loadstart",topMouseDown:"mousedown",topMouseMove:"mousemove",topMouseOut:"mouseout",topMouseOver:"mouseover",topMouseUp:"mouseup",topPaste:"paste",topScroll:"scroll",topSelectionChange:"selectionchange",topTextInput:"textInput",topToggle:"toggle",topTouchCancel:"touchcancel",topTouchEnd:"touchend",topTouchMove:"touchmove",topTouchStart:"touchstart",topTransitionEnd:jn("transitionend"),topWheel:"wheel"},Pn={topAbort:"abort",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topLoadedData:"loadeddata",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topSeeked:"seeked",topSeeking:"seeking",topStalled:"stalled",topSuspend:"suspend",topTimeUpdate:"timeupdate",topVolumeChange:"volumechange",topWaiting:"waiting"},Nn={},Mn=0,Bn="_reactListenersID"+(""+Math.random()).slice(2);function Dn(e){return Object.prototype.hasOwnProperty.call(e,Bn)||(e[Bn]=Mn++,Nn[e[Bn]]={}),Nn[e[Bn]]}function zn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Ln(e,t){var n,r=zn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=zn(r)}}function Un(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&"text"===e.type||"textarea"===t||"true"===e.contentEditable)}var In=i.canUseDOM&&"documentMode"in document&&11>=document.documentMode,Rn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"topBlur topContextMenu topFocus topKeyDown topKeyUp topMouseDown topMouseUp topSelectionChange".split(" ")}},Fn=null,Xn=null,Gn=null,Kn=!1;function Wn(e,t){if(Kn||null==Fn||Fn!==s())return null;var n=Fn;return"selectionStart"in n&&Un(n)?n={start:n.selectionStart,end:n.selectionEnd}:window.getSelection?n={anchorNode:(n=window.getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset}:n=void 0,Gn&&c(Gn,n)?null:(Gn=n,(e=le.getPooled(Rn.select,Xn,e,t)).type="select",e.target=Fn,ee(e),e)}var Hn={eventTypes:Rn,extractEvents:function(e,t,n,r){var o,i=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!i)){e:{i=Dn(i),o=b.onSelect;for(var a=0;a<o.length;a++){var u=o[a];if(!i.hasOwnProperty(u)||!i[u]){i=!1;break e}}i=!0}o=!i}if(o)return null;switch(i=t?K(t):window,e){case"topFocus":(Ge(i)||"true"===i.contentEditable)&&(Fn=i,Xn=t,Gn=null);break;case"topBlur":Gn=Xn=Fn=null;break;case"topMouseDown":Kn=!0;break;case"topContextMenu":case"topMouseUp":return Kn=!1,Wn(n,r);case"topSelectionChange":if(In)break;case"topKeyDown":case"topKeyUp":return Wn(n,r)}return null}};function qn(e,t,n,r){this.tag=e,this.key=n,this.stateNode=this.type=null,this.sibling=this.child=this.return=null,this.index=0,this.ref=null,this.pendingProps=t,this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.expirationTime=0,this.alternate=null}function Vn(e,t,n){var r=e.alternate;return null===r?((r=new qn(e.tag,t,e.key,e.mode)).type=e.type,r.stateNode=e.stateNode,r.alternate=e,e.alternate=r):(r.pendingProps=t,r.effectTag=0,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null),r.expirationTime=n,r.child=e.child,r.memoizedProps=e.memoizedProps,r.memoizedState=e.memoizedState,r.updateQueue=e.updateQueue,r.sibling=e.sibling,r.index=e.index,r.ref=e.ref,r}function Zn(e,t,n){var r=e.type,o=e.key;e=e.props;var i=void 0;if("function"==typeof r)i=r.prototype&&r.prototype.isReactComponent?2:0;else if("string"==typeof r)i=5;else switch(r){case tt:return Yn(e.children,t,n,o);case it:i=11,t|=3;break;case nt:i=11,t|=2;break;case $e:i=7;break;case Qe:i=9;break;default:if("object"==typeof r&&null!==r)switch(r.$$typeof){case rt:i=13;break;case ot:i=12;break;case at:i=14;break;default:if("number"==typeof r.tag)return(t=r).pendingProps=e,t.expirationTime=n,t;p("130",null==r?r:typeof r,"")}else p("130",null==r?r:typeof r,"")}return(t=new qn(i,e,o,t)).type=r,t.expirationTime=n,t}function Yn(e,t,n,r){return(e=new qn(10,e,r,t)).expirationTime=n,e}function Jn(e,t,n){return(e=new qn(6,e,null,t)).expirationTime=n,e}function $n(e,t,n){return(t=new qn(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}D.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),k=H.getFiberCurrentPropsFromNode,E=H.getInstanceFromNode,T=H.getNodeFromInstance,D.injectEventPluginsByName({SimpleEventPlugin:hn,EnterLeaveEventPlugin:qt,ChangeEventPlugin:Rt,SelectEventPlugin:Hn,BeforeInputEventPlugin:Te});var Qn=null,er=null;function tr(e){return function(t){try{return e(t)}catch(e){}}}function nr(e){"function"==typeof Qn&&Qn(e)}function rr(e){"function"==typeof er&&er(e)}function or(e){return{baseState:e,expirationTime:0,first:null,last:null,callbackList:null,hasForceUpdate:!1,isInitialized:!1,capturedValues:null}}function ir(e,t){null===e.last?e.first=e.last=t:(e.last.next=t,e.last=t),(0===e.expirationTime||e.expirationTime>t.expirationTime)&&(e.expirationTime=t.expirationTime)}new Set;var ar=void 0,ur=void 0;function sr(e){ar=ur=null;var t=e.alternate,n=e.updateQueue;null===n&&(n=e.updateQueue=or(null)),null!==t?null===(e=t.updateQueue)&&(e=t.updateQueue=or(null)):e=null,ar=n,ur=e!==n?e:null}function cr(e,t){sr(e),e=ar;var n=ur;null===n?ir(e,t):null===e.last||null===n.last?(ir(e,t),ir(n,t)):(ir(e,t),n.last=t)}function lr(e,t,n,r){return"function"==typeof(e=e.partialState)?e.call(t,n,r):e}function fr(e,t,n,r,o,i){null!==e&&e.updateQueue===n&&(n=t.updateQueue={baseState:n.baseState,expirationTime:n.expirationTime,first:n.first,last:n.last,isInitialized:n.isInitialized,capturedValues:n.capturedValues,callbackList:null,hasForceUpdate:!1}),n.expirationTime=0,n.isInitialized?e=n.baseState:(e=n.baseState=t.memoizedState,n.isInitialized=!0);for(var u=!0,s=n.first,c=!1;null!==s;){var l=s.expirationTime;if(l>i){var f=n.expirationTime;(0===f||f>l)&&(n.expirationTime=l),c||(c=!0,n.baseState=e)}else c||(n.first=s.next,null===n.first&&(n.last=null)),s.isReplace?(e=lr(s,r,e,o),u=!0):(l=lr(s,r,e,o))&&(e=u?a({},e,l):a(e,l),u=!1),s.isForced&&(n.hasForceUpdate=!0),null!==s.callback&&(null===(l=n.callbackList)&&(l=n.callbackList=[]),l.push(s)),null!==s.capturedValue&&(null===(l=n.capturedValues)?n.capturedValues=[s.capturedValue]:l.push(s.capturedValue));s=s.next}return null!==n.callbackList?t.effectTag|=32:null!==n.first||n.hasForceUpdate||null!==n.capturedValues||(t.updateQueue=null),c||(n.baseState=e),e}function pr(e,t){var n=e.callbackList;if(null!==n)for(e.callbackList=null,e=0;e<n.length;e++){var r=n[e],o=r.callback;r.callback=null,"function"!=typeof o&&p("191",o),o.call(t)}}var dr=Array.isArray;function hr(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){var r=void 0;(n=n._owner)&&(2!==n.tag&&p("110"),r=n.stateNode),r||p("147",e);var o=""+e;return null!==t&&null!==t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs===f?r.refs={}:r.refs;null===e?delete t[o]:t[o]=e})._stringRef=o,t)}"string"!=typeof e&&p("148"),n._owner||p("254",e)}return e}function gr(e,t){"textarea"!==e.type&&p("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function yr(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t,n){return(e=Vn(e,t,n)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function a(t){return e&&null===t.alternate&&(t.effectTag=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Jn(n,e.mode,r)).return=e,t):((t=o(t,n,r)).return=e,t)}function s(e,t,n,r){return null!==t&&t.type===n.type?((r=o(t,n.props,r)).ref=hr(e,t,n),r.return=e,r):((r=Zn(n,e.mode,r)).ref=hr(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=$n(n,e.mode,r)).return=e,t):((t=o(t,n.children||[],r)).return=e,t)}function l(e,t,n,r,i){return null===t||10!==t.tag?((t=Yn(n,e.mode,r,i)).return=e,t):((t=o(t,n,r)).return=e,t)}function f(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Jn(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case Je:return(n=Zn(t,e.mode,n)).ref=hr(e,null,t),n.return=e,n;case et:return(t=$n(t,e.mode,n)).return=e,t}if(dr(t)||st(t))return(t=Yn(t,e.mode,n,null)).return=e,t;gr(e,t)}return null}function d(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case Je:return n.key===o?n.type===tt?l(e,t,n.props.children,r,o):s(e,t,n,r):null;case et:return n.key===o?c(e,t,n,r):null}if(dr(n)||st(n))return null!==o?null:l(e,t,n,r,null);gr(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case Je:return e=e.get(null===r.key?n:r.key)||null,r.type===tt?l(t,e,r.props.children,o,r.key):s(t,e,r,o);case et:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(dr(r)||st(r))return l(t,e=e.get(n)||null,r,o,null);gr(t,r)}return null}function g(o,a,u,s){for(var c=null,l=null,p=a,g=a=0,y=null;null!==p&&g<u.length;g++){p.index>g?(y=p,p=null):y=p.sibling;var v=d(o,p,u[g],s);if(null===v){null===p&&(p=y);break}e&&p&&null===v.alternate&&t(o,p),a=i(v,a,g),null===l?c=v:l.sibling=v,l=v,p=y}if(g===u.length)return n(o,p),c;if(null===p){for(;g<u.length;g++)(p=f(o,u[g],s))&&(a=i(p,a,g),null===l?c=p:l.sibling=p,l=p);return c}for(p=r(o,p);g<u.length;g++)(y=h(p,o,g,u[g],s))&&(e&&null!==y.alternate&&p.delete(null===y.key?g:y.key),a=i(y,a,g),null===l?c=y:l.sibling=y,l=y);return e&&p.forEach(function(e){return t(o,e)}),c}function y(o,a,u,s){var c=st(u);"function"!=typeof c&&p("150"),null==(u=c.call(u))&&p("151");for(var l=c=null,g=a,y=a=0,v=null,_=u.next();null!==g&&!_.done;y++,_=u.next()){g.index>y?(v=g,g=null):v=g.sibling;var x=d(o,g,_.value,s);if(null===x){g||(g=v);break}e&&g&&null===x.alternate&&t(o,g),a=i(x,a,y),null===l?c=x:l.sibling=x,l=x,g=v}if(_.done)return n(o,g),c;if(null===g){for(;!_.done;y++,_=u.next())null!==(_=f(o,_.value,s))&&(a=i(_,a,y),null===l?c=_:l.sibling=_,l=_);return c}for(g=r(o,g);!_.done;y++,_=u.next())null!==(_=h(g,o,y,_.value,s))&&(e&&null!==_.alternate&&g.delete(null===_.key?y:_.key),a=i(_,a,y),null===l?c=_:l.sibling=_,l=_);return e&&g.forEach(function(e){return t(o,e)}),c}return function(e,r,i,u){"object"==typeof i&&null!==i&&i.type===tt&&null===i.key&&(i=i.props.children);var s="object"==typeof i&&null!==i;if(s)switch(i.$$typeof){case Je:e:{var c=i.key;for(s=r;null!==s;){if(s.key===c){if(10===s.tag?i.type===tt:s.type===i.type){n(e,s.sibling),(r=o(s,i.type===tt?i.props.children:i.props,u)).ref=hr(e,s,i),r.return=e,e=r;break e}n(e,s);break}t(e,s),s=s.sibling}i.type===tt?((r=Yn(i.props.children,e.mode,u,i.key)).return=e,e=r):((u=Zn(i,e.mode,u)).ref=hr(e,r,i),u.return=e,e=u)}return a(e);case et:e:{for(s=i.key;null!==r;){if(r.key===s){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[],u)).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=$n(i,e.mode,u)).return=e,e=r}return a(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i,u)).return=e,e=r):(n(e,r),(r=Jn(i,e.mode,u)).return=e,e=r),a(e);if(dr(i))return g(e,r,i,u);if(st(i))return y(e,r,i,u);if(s&&gr(e,i),void 0===i)switch(e.tag){case 2:case 1:p("152",(u=e.type).displayName||u.name||"Component")}return n(e,r)}}var vr=yr(!0),_r=yr(!1);function xr(e,t,n,r,o,i,u){function s(e,t,n){l(e,t,n,t.expirationTime)}function l(e,t,n,r){t.child=null===e?_r(t,null,n,r):vr(t,e.child,n,r)}function d(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function h(e,t,n,r,o,i){if(d(e,t),!n&&!o)return r&&C(t,!1),v(e,t);n=t.stateNode,Ze.current=t;var a=o?null:n.render();return t.effectTag|=1,o&&(l(e,t,null,i),t.child=null),l(e,t,a,i),t.memoizedState=n.state,t.memoizedProps=n.props,r&&C(t,!0),t.child}function g(e){var t=e.stateNode;t.pendingContext?T(e,t.pendingContext,t.pendingContext!==t.context):t.context&&T(e,t.context,!1),b(e,t.containerInfo)}function y(e,t,n,r){var o=e.child;for(null!==o&&(o.return=e);null!==o;){switch(o.tag){case 12:var i=0|o.stateNode;if(o.type===t&&0!=(i&n)){for(i=o;null!==i;){var a=i.alternate;if(0===i.expirationTime||i.expirationTime>r)i.expirationTime=r,null!==a&&(0===a.expirationTime||a.expirationTime>r)&&(a.expirationTime=r);else{if(null===a||!(0===a.expirationTime||a.expirationTime>r))break;a.expirationTime=r}i=i.return}i=null}else i=o.child;break;case 13:i=o.type===e.type?null:o.child;break;default:i=o.child}if(null!==i)i.return=o;else for(i=o;null!==i;){if(i===e){i=null;break}if(null!==(o=i.sibling)){i=o;break}i=i.return}o=i}}function v(e,t){if(null!==e&&t.child!==e.child&&p("153"),null!==t.child){var n=Vn(e=t.child,e.pendingProps,e.expirationTime);for(t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Vn(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}var _=e.shouldSetTextContent,x=e.shouldDeprioritizeSubtree,m=t.pushHostContext,b=t.pushHostContainer,O=r.pushProvider,w=n.getMaskedContext,S=n.getUnmaskedContext,k=n.hasContextChanged,E=n.pushContextProvider,T=n.pushTopLevelContextObject,C=n.invalidateContextProvider,j=o.enterHydrationState,A=o.resetHydrationState,P=o.tryToClaimNextHydratableInstance,N=(e=function(e,t,n,r,o){function i(e,t,n,r,o,i){if(null===t||null!==e.updateQueue&&e.updateQueue.hasForceUpdate)return!0;var a=e.stateNode;return e=e.type,"function"==typeof a.shouldComponentUpdate?a.shouldComponentUpdate(n,o,i):!(e.prototype&&e.prototype.isPureReactComponent&&c(t,n)&&c(r,o))}function u(e,t){t.updater=v,e.stateNode=t,t._reactInternalFiber=e}function s(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&v.enqueueReplaceState(t,t.state,null)}function l(e,t,n,r){if("function"==typeof(e=e.type).getDerivedStateFromProps)return e.getDerivedStateFromProps.call(null,n,r)}var p=e.cacheContext,d=e.getMaskedContext,h=e.getUnmaskedContext,g=e.isContextConsumer,y=e.hasContextChanged,v={isMounted:Zt,enqueueSetState:function(e,r,o){e=e._reactInternalFiber,o=void 0===o?null:o;var i=n(e);cr(e,{expirationTime:i,partialState:r,callback:o,isReplace:!1,isForced:!1,capturedValue:null,next:null}),t(e,i)},enqueueReplaceState:function(e,r,o){e=e._reactInternalFiber,o=void 0===o?null:o;var i=n(e);cr(e,{expirationTime:i,partialState:r,callback:o,isReplace:!0,isForced:!1,capturedValue:null,next:null}),t(e,i)},enqueueForceUpdate:function(e,r){e=e._reactInternalFiber,r=void 0===r?null:r;var o=n(e);cr(e,{expirationTime:o,partialState:null,callback:r,isReplace:!1,isForced:!0,capturedValue:null,next:null}),t(e,o)}};return{adoptClassInstance:u,callGetDerivedStateFromProps:l,constructClassInstance:function(e,t){var n=e.type,r=h(e),o=g(e),i=o?d(e,r):f,s=null!==(n=new n(t,i)).state&&void 0!==n.state?n.state:null;return u(e,n),e.memoizedState=s,null!==(t=l(e,0,t,s))&&void 0!==t&&(e.memoizedState=a({},e.memoizedState,t)),o&&p(e,r,i),n},mountClassInstance:function(e,t){var n=e.type,r=e.alternate,o=e.stateNode,i=e.pendingProps,a=h(e);o.props=i,o.state=e.memoizedState,o.refs=f,o.context=d(e,a),"function"==typeof n.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(n=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),n!==o.state&&v.enqueueReplaceState(o,o.state,null),null!==(n=e.updateQueue)&&(o.state=fr(r,e,n,o,i,t))),"function"==typeof o.componentDidMount&&(e.effectTag|=4)},resumeMountClassInstance:function(e,t){var n=e.type,u=e.stateNode;u.props=e.memoizedProps,u.state=e.memoizedState;var c=e.memoizedProps,f=e.pendingProps,p=u.context,g=h(e);g=d(e,g),(n="function"==typeof n.getDerivedStateFromProps||"function"==typeof u.getSnapshotBeforeUpdate)||"function"!=typeof u.UNSAFE_componentWillReceiveProps&&"function"!=typeof u.componentWillReceiveProps||(c!==f||p!==g)&&s(e,u,f,g),p=e.memoizedState,t=null!==e.updateQueue?fr(null,e,e.updateQueue,u,f,t):p;var v=void 0;if(c!==f&&(v=l(e,0,f,t)),null!==v&&void 0!==v){t=null===t||void 0===t?v:a({},t,v);var _=e.updateQueue;null!==_&&(_.baseState=a({},_.baseState,v))}return c!==f||p!==t||y()||null!==e.updateQueue&&e.updateQueue.hasForceUpdate?((c=i(e,c,f,p,t,g))?(n||"function"!=typeof u.UNSAFE_componentWillMount&&"function"!=typeof u.componentWillMount||("function"==typeof u.componentWillMount&&u.componentWillMount(),"function"==typeof u.UNSAFE_componentWillMount&&u.UNSAFE_componentWillMount()),"function"==typeof u.componentDidMount&&(e.effectTag|=4)):("function"==typeof u.componentDidMount&&(e.effectTag|=4),r(e,f),o(e,t)),u.props=f,u.state=t,u.context=g,c):("function"==typeof u.componentDidMount&&(e.effectTag|=4),!1)},updateClassInstance:function(e,t,n){var u=t.type,c=t.stateNode;c.props=t.memoizedProps,c.state=t.memoizedState;var f=t.memoizedProps,p=t.pendingProps,g=c.context,v=h(t);v=d(t,v),(u="function"==typeof u.getDerivedStateFromProps||"function"==typeof c.getSnapshotBeforeUpdate)||"function"!=typeof c.UNSAFE_componentWillReceiveProps&&"function"!=typeof c.componentWillReceiveProps||(f!==p||g!==v)&&s(t,c,p,v),g=t.memoizedState,n=null!==t.updateQueue?fr(e,t,t.updateQueue,c,p,n):g;var _=void 0;if(f!==p&&(_=l(t,0,p,n)),null!==_&&void 0!==_){n=null===n||void 0===n?_:a({},n,_);var x=t.updateQueue;null!==x&&(x.baseState=a({},x.baseState,_))}return f!==p||g!==n||y()||null!==t.updateQueue&&t.updateQueue.hasForceUpdate?((_=i(t,f,p,g,n,v))?(u||"function"!=typeof c.UNSAFE_componentWillUpdate&&"function"!=typeof c.componentWillUpdate||("function"==typeof c.componentWillUpdate&&c.componentWillUpdate(p,n,v),"function"==typeof c.UNSAFE_componentWillUpdate&&c.UNSAFE_componentWillUpdate(p,n,v)),"function"==typeof c.componentDidUpdate&&(t.effectTag|=4),"function"==typeof c.getSnapshotBeforeUpdate&&(t.effectTag|=2048)):("function"!=typeof c.componentDidUpdate||f===e.memoizedProps&&g===e.memoizedState||(t.effectTag|=4),"function"!=typeof c.getSnapshotBeforeUpdate||f===e.memoizedProps&&g===e.memoizedState||(t.effectTag|=2048),r(t,p),o(t,n)),c.props=p,c.state=n,c.context=v,_):("function"!=typeof c.componentDidUpdate||f===e.memoizedProps&&g===e.memoizedState||(t.effectTag|=4),"function"!=typeof c.getSnapshotBeforeUpdate||f===e.memoizedProps&&g===e.memoizedState||(t.effectTag|=2048),!1)}}}(n,i,u,function(e,t){e.memoizedProps=t},function(e,t){e.memoizedState=t})).adoptClassInstance,M=e.callGetDerivedStateFromProps,B=e.constructClassInstance,D=e.mountClassInstance,z=e.resumeMountClassInstance,L=e.updateClassInstance;return{beginWork:function(e,t,n){if(0===t.expirationTime||t.expirationTime>n){switch(t.tag){case 3:g(t);break;case 2:E(t);break;case 4:b(t,t.stateNode.containerInfo);break;case 13:O(t)}return null}switch(t.tag){case 0:null!==e&&p("155");var r=t.type,o=t.pendingProps,i=S(t);return r=r(o,i=w(t,i)),t.effectTag|=1,"object"==typeof r&&null!==r&&"function"==typeof r.render&&void 0===r.$$typeof?(i=t.type,t.tag=2,t.memoizedState=null!==r.state&&void 0!==r.state?r.state:null,"function"==typeof i.getDerivedStateFromProps&&(null!==(o=M(t,r,o,t.memoizedState))&&void 0!==o&&(t.memoizedState=a({},t.memoizedState,o))),o=E(t),N(t,r),D(t,n),e=h(e,t,!0,o,!1,n)):(t.tag=1,s(e,t,r),t.memoizedProps=o,e=t.child),e;case 1:return o=t.type,n=t.pendingProps,k()||t.memoizedProps!==n?(r=S(t),o=o(n,r=w(t,r)),t.effectTag|=1,s(e,t,o),t.memoizedProps=n,e=t.child):e=v(e,t),e;case 2:o=E(t),null===e?null===t.stateNode?(B(t,t.pendingProps),D(t,n),r=!0):r=z(t,n):r=L(e,t,n),i=!1;var u=t.updateQueue;return null!==u&&null!==u.capturedValues&&(i=r=!0),h(e,t,r,o,i,n);case 3:e:if(g(t),r=t.updateQueue,null!==r){if(i=t.memoizedState,o=fr(e,t,r,null,null,n),t.memoizedState=o,null!==(r=t.updateQueue)&&null!==r.capturedValues)r=null;else{if(i===o){A(),e=v(e,t);break e}r=o.element}i=t.stateNode,(null===e||null===e.child)&&i.hydrate&&j(t)?(t.effectTag|=2,t.child=_r(t,null,r,n)):(A(),s(e,t,r)),t.memoizedState=o,e=t.child}else A(),e=v(e,t);return e;case 5:return m(t),null===e&&P(t),o=t.type,u=t.memoizedProps,r=t.pendingProps,i=null!==e?e.memoizedProps:null,k()||u!==r||((u=1&t.mode&&x(o,r))&&(t.expirationTime=1073741823),u&&1073741823===n)?(u=r.children,_(o,r)?u=null:i&&_(o,i)&&(t.effectTag|=16),d(e,t),1073741823!==n&&1&t.mode&&x(o,r)?(t.expirationTime=1073741823,t.memoizedProps=r,e=null):(s(e,t,u),t.memoizedProps=r,e=t.child)):e=v(e,t),e;case 6:return null===e&&P(t),t.memoizedProps=t.pendingProps,null;case 8:t.tag=7;case 7:return o=t.pendingProps,k()||t.memoizedProps!==o||(o=t.memoizedProps),r=o.children,t.stateNode=null===e?_r(t,t.stateNode,r,n):vr(t,e.stateNode,r,n),t.memoizedProps=o,t.stateNode;case 9:return null;case 4:return b(t,t.stateNode.containerInfo),o=t.pendingProps,k()||t.memoizedProps!==o?(null===e?t.child=vr(t,null,o,n):s(e,t,o),t.memoizedProps=o,e=t.child):e=v(e,t),e;case 14:return s(e,t,n=(n=t.type.render)(t.pendingProps,t.ref)),t.memoizedProps=n,t.child;case 10:return n=t.pendingProps,k()||t.memoizedProps!==n?(s(e,t,n),t.memoizedProps=n,e=t.child):e=v(e,t),e;case 11:return n=t.pendingProps.children,k()||null!==n&&t.memoizedProps!==n?(s(e,t,n),t.memoizedProps=n,e=t.child):e=v(e,t),e;case 13:return function(e,t,n){var r=t.type._context,o=t.pendingProps,i=t.memoizedProps;if(!k()&&i===o)return t.stateNode=0,O(t),v(e,t);var a=o.value;if(t.memoizedProps=o,null===i)a=1073741823;else if(i.value===o.value){if(i.children===o.children)return t.stateNode=0,O(t),v(e,t);a=0}else{var u=i.value;if(u===a&&(0!==u||1/u==1/a)||u!=u&&a!=a){if(i.children===o.children)return t.stateNode=0,O(t),v(e,t);a=0}else if(a="function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,a):1073741823,0==(a|=0)){if(i.children===o.children)return t.stateNode=0,O(t),v(e,t)}else y(t,r,a,n)}return t.stateNode=a,O(t),s(e,t,o.children),t.child}(e,t,n);case 12:e:{r=t.type,i=t.pendingProps,u=t.memoizedProps,o=r._currentValue;var c=r._changedBits;if(k()||0!==c||u!==i){t.memoizedProps=i;var l=i.unstable_observedBits;if(void 0!==l&&null!==l||(l=1073741823),t.stateNode=l,0!=(c&l))y(t,r,c,n);else if(u===i){e=v(e,t);break e}s(e,t,n=(n=i.children)(o)),e=t.child}else e=v(e,t)}return e;default:p("156")}}}}function mr(e,t){var n=t.source;null===t.stack&&lt(n),null!==n&&ct(n),t=t.value,null!==e&&2===e.tag&&ct(e);try{t&&t.suppressReactErrorLogging||console.error(t)}catch(e){e&&e.suppressReactErrorLogging||console.error(e)}}var br={};function Or(e){function t(){if(null!==ee)for(var e=ee.return;null!==e;)B(e),e=e.return;te=null,ne=0,ee=null,ie=!1}function n(e){return null!==ae&&ae.has(e)}function r(e){for(;;){var t=e.alternate,n=e.return,r=e.sibling;if(0==(512&e.effectTag)){t=P(t,e,ne);var o=e;if(1073741823===ne||1073741823!==o.expirationTime){e:switch(o.tag){case 3:case 2:var i=o.updateQueue;i=null===i?0:i.expirationTime;break e;default:i=0}for(var a=o.child;null!==a;)0!==a.expirationTime&&(0===i||i>a.expirationTime)&&(i=a.expirationTime),a=a.sibling;o.expirationTime=i}if(null!==t)return t;if(null!==n&&0==(512&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e)),null!==r)return r;if(null===n){ie=!0;break}e=n}else{if(null!==(e=M(e)))return e.effectTag&=2559,e;if(null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=512),null!==r)return r;if(null===n)break;e=n}}return null}function o(e){var t=A(e.alternate,e,ne);return null===t&&(t=r(e)),Ze.current=null,t}function i(e,n,i){Q&&p("243"),Q=!0,n===ne&&e===te&&null!==ee||(t(),ne=n,ee=Vn((te=e).current,null,ne),e.pendingCommitExpirationTime=0);for(var a=!1;;){try{if(i)for(;null!==ee&&!S();)ee=o(ee);else for(;null!==ee;)ee=o(ee)}catch(e){if(null===ee){a=!0,k(e);break}var u=(i=ee).return;if(null===u){a=!0,k(e);break}N(u,i,e),ee=r(i)}break}return Q=!1,a||null!==ee?null:ie?(e.pendingCommitExpirationTime=n,e.current.alternate):void p("262")}function u(e,t,n,r){cr(t,{expirationTime:r,partialState:null,callback:null,isReplace:!1,isForced:!1,capturedValue:e={value:n,source:e,stack:lt(e)},next:null}),l(t,r)}function s(e,t){e:{Q&&!oe&&p("263");for(var r=e.return;null!==r;){switch(r.tag){case 2:var o=r.stateNode;if("function"==typeof r.type.getDerivedStateFromCatch||"function"==typeof o.componentDidCatch&&!n(o)){u(e,r,t,1),e=void 0;break e}break;case 3:u(e,r,t,1),e=void 0;break e}r=r.return}3===e.tag&&u(e,e,t,1),e=void 0}return e}function c(e){return e=0!==$?$:Q?oe?1:ne:1&e.mode?be?10*(1+((d()+15)/10|0)):25*(1+((d()+500)/25|0)):1,be&&(0===he||e>he)&&(he=e),e}function l(e,n){e:{for(;null!==e;){if((0===e.expirationTime||e.expirationTime>n)&&(e.expirationTime=n),null!==e.alternate&&(0===e.alternate.expirationTime||e.alternate.expirationTime>n)&&(e.alternate.expirationTime=n),null===e.return){if(3!==e.tag){n=void 0;break e}var r=e.stateNode;!Q&&0!==ne&&n<ne&&t(),Q&&!oe&&te===r||y(r,n),Se>we&&p("185")}e=e.return}n=void 0}return n}function d(){return Y=K()-Z,2+(Y/10|0)}function h(e,t,n,r,o){var i=$;$=1;try{return e(t,n,r,o)}finally{$=i}}function g(e){if(0!==ce){if(e>ce)return;H(le)}var t=K()-Z;ce=e,le=W(_,{timeout:10*(e-2)-t})}function y(e,t){if(null===e.nextScheduledRoot)e.remainingExpirationTime=t,null===se?(ue=se=e,e.nextScheduledRoot=e):(se=se.nextScheduledRoot=e).nextScheduledRoot=ue;else{var n=e.remainingExpirationTime;(0===n||t<n)&&(e.remainingExpirationTime=t)}fe||(xe?me&&(pe=e,de=1,O(e,1,!1)):1===t?x():g(t))}function v(){var e=0,t=null;if(null!==se)for(var n=se,r=ue;null!==r;){var o=r.remainingExpirationTime;if(0===o){if((null===n||null===se)&&p("244"),r===r.nextScheduledRoot){ue=se=r.nextScheduledRoot=null;break}if(r===ue)ue=o=r.nextScheduledRoot,se.nextScheduledRoot=o,r.nextScheduledRoot=null;else{if(r===se){(se=n).nextScheduledRoot=ue,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if((0===e||o<e)&&(e=o,t=r),r===se)break;n=r,r=r.nextScheduledRoot}}null!==(n=pe)&&n===t&&1===e?Se++:Se=0,pe=t,de=e}function _(e){m(0,!0,e)}function x(){m(1,!1,null)}function m(e,t,n){if(_e=n,v(),t)for(;null!==pe&&0!==de&&(0===e||e>=de)&&(!ge||d()>=de);)O(pe,de,!ge),v();else for(;null!==pe&&0!==de&&(0===e||e>=de);)O(pe,de,!1),v();null!==_e&&(ce=0,le=-1),0!==de&&g(de),_e=null,ge=!1,b()}function b(){if(Se=0,null!==Oe){var e=Oe;Oe=null;for(var t=0;t<e.length;t++){var n=e[t];try{n._onComplete()}catch(e){ye||(ye=!0,ve=e)}}}if(ye)throw e=ve,ve=null,ye=!1,e}function O(e,t,n){fe&&p("245"),fe=!0,n?null!==(n=e.finishedWork)?w(e,n,t):(e.finishedWork=null,null!==(n=i(e,t,!0))&&(S()?e.finishedWork=n:w(e,n,t))):null!==(n=e.finishedWork)?w(e,n,t):(e.finishedWork=null,null!==(n=i(e,t,!1))&&w(e,n,t)),fe=!1}function w(e,t,n){var r=e.firstBatch;if(null!==r&&r._expirationTime<=n&&(null===Oe?Oe=[r]:Oe.push(r),r._defer))return e.finishedWork=t,void(e.remainingExpirationTime=0);e.finishedWork=null,oe=Q=!0,(n=t.stateNode).current===t&&p("177"),0===(r=n.pendingCommitExpirationTime)&&p("261"),n.pendingCommitExpirationTime=0;var o=d();if(Ze.current=null,1<t.effectTag)if(null!==t.lastEffect){t.lastEffect.nextEffect=t;var i=t.firstEffect}else i=t;else i=t.firstEffect;for(q(n.containerInfo),re=i;null!==re;){var a=!1,u=void 0;try{for(;null!==re;)2048&re.effectTag&&D(re.alternate,re),re=re.nextEffect}catch(e){a=!0,u=e}a&&(null===re&&p("178"),s(re,u),null!==re&&(re=re.nextEffect))}for(re=i;null!==re;){a=!1,u=void 0;try{for(;null!==re;){var c=re.effectTag;if(16&c&&z(re),128&c){var l=re.alternate;null!==l&&G(l)}switch(14&c){case 2:L(re),re.effectTag&=-3;break;case 6:L(re),re.effectTag&=-3,I(re.alternate,re);break;case 4:I(re.alternate,re);break;case 8:U(re)}re=re.nextEffect}}catch(e){a=!0,u=e}a&&(null===re&&p("178"),s(re,u),null!==re&&(re=re.nextEffect))}for(V(n.containerInfo),n.current=t,re=i;null!==re;){c=!1,l=void 0;try{for(i=n,a=o,u=r;null!==re;){var f=re.effectTag;36&f&&R(i,re.alternate,re,a,u),256&f&&F(re,k),128&f&&X(re);var h=re.nextEffect;re.nextEffect=null,re=h}}catch(e){c=!0,l=e}c&&(null===re&&p("178"),s(re,l),null!==re&&(re=re.nextEffect))}Q=oe=!1,nr(t.stateNode),0===(t=n.current.expirationTime)&&(ae=null),e.remainingExpirationTime=t}function S(){return!(null===_e||_e.timeRemaining()>ke)&&(ge=!0)}function k(e){null===pe&&p("246"),pe.remainingExpirationTime=0,ye||(ye=!0,ve=e)}var E=function(){var e=[],t=-1;return{createCursor:function(e){return{current:e}},isEmpty:function(){return-1===t},pop:function(n){0>t||(n.current=e[t],e[t]=null,t--)},push:function(n,r){e[++t]=n.current,n.current=r},checkThatStackIsEmpty:function(){},resetStackAfterFatalErrorInDev:function(){}}}(),T=function(e,t){function n(e){return e===br&&p("174"),e}var r=e.getChildHostContext,o=e.getRootHostContext;e=t.createCursor;var i=t.push,a=t.pop,u=e(br),s=e(br),c=e(br);return{getHostContext:function(){return n(u.current)},getRootHostContainer:function(){return n(c.current)},popHostContainer:function(e){a(u,e),a(s,e),a(c,e)},popHostContext:function(e){s.current===e&&(a(u,e),a(s,e))},pushHostContainer:function(e,t){i(c,t,e),i(s,e,e),i(u,br,e),t=o(t),a(u,e),i(u,t,e)},pushHostContext:function(e){var t=n(c.current),o=n(u.current);o!==(t=r(o,e.type,t))&&(i(s,e,e),i(u,t,e))}}}(e,E),C=function(e){function t(e,t,n){(e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=n}function n(e){return 2===e.tag&&null!=e.type.childContextTypes}function r(e,t){var n=e.stateNode,r=e.type.childContextTypes;if("function"!=typeof n.getChildContext)return t;for(var o in n=n.getChildContext())o in r||p("108",ct(e)||"Unknown",o);return a({},t,n)}var o=e.createCursor,i=e.push,u=e.pop,s=o(f),c=o(!1),l=f;return{getUnmaskedContext:function(e){return n(e)?l:s.current},cacheContext:t,getMaskedContext:function(e,n){var r=e.type.contextTypes;if(!r)return f;var o=e.stateNode;if(o&&o.__reactInternalMemoizedUnmaskedChildContext===n)return o.__reactInternalMemoizedMaskedChildContext;var i,a={};for(i in r)a[i]=n[i];return o&&t(e,n,a),a},hasContextChanged:function(){return c.current},isContextConsumer:function(e){return 2===e.tag&&null!=e.type.contextTypes},isContextProvider:n,popContextProvider:function(e){n(e)&&(u(c,e),u(s,e))},popTopLevelContextObject:function(e){u(c,e),u(s,e)},pushTopLevelContextObject:function(e,t,n){null!=s.cursor&&p("168"),i(s,t,e),i(c,n,e)},processChildContext:r,pushContextProvider:function(e){if(!n(e))return!1;var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||f,l=s.current,i(s,t,e),i(c,c.current,e),!0},invalidateContextProvider:function(e,t){var n=e.stateNode;if(n||p("169"),t){var o=r(e,l);n.__reactInternalMemoizedMergedChildContext=o,u(c,e),u(s,e),i(s,o,e)}else u(c,e);i(c,t,e)},findCurrentUnmaskedContext:function(e){for((2!==Vt(e)||2!==e.tag)&&p("170");3!==e.tag;){if(n(e))return e.stateNode.__reactInternalMemoizedMergedChildContext;(e=e.return)||p("171")}return e.stateNode.context}}}(E);E=function(e){var t=e.createCursor,n=e.push,r=e.pop,o=t(null),i=t(null),a=t(0);return{pushProvider:function(e){var t=e.type._context;n(a,t._changedBits,e),n(i,t._currentValue,e),n(o,e,e),t._currentValue=e.pendingProps.value,t._changedBits=e.stateNode},popProvider:function(e){var t=a.current,n=i.current;r(o,e),r(i,e),r(a,e),(e=e.type._context)._currentValue=n,e._changedBits=t}}}(E);var j=function(e){function t(e,t){var n=new qn(5,null,null,0);n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function n(e,t){switch(e.tag){case 5:return null!==(t=i(t,e.type,e.pendingProps))&&(e.stateNode=t,!0);case 6:return null!==(t=a(t,e.pendingProps))&&(e.stateNode=t,!0);default:return!1}}function r(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag;)e=e.return;f=e}var o=e.shouldSetTextContent;if(!(e=e.hydration))return{enterHydrationState:function(){return!1},resetHydrationState:function(){},tryToClaimNextHydratableInstance:function(){},prepareToHydrateHostInstance:function(){p("175")},prepareToHydrateHostTextInstance:function(){p("176")},popHydrationState:function(){return!1}};var i=e.canHydrateInstance,a=e.canHydrateTextInstance,u=e.getNextHydratableSibling,s=e.getFirstHydratableChild,c=e.hydrateInstance,l=e.hydrateTextInstance,f=null,d=null,h=!1;return{enterHydrationState:function(e){return d=s(e.stateNode.containerInfo),f=e,h=!0},resetHydrationState:function(){d=f=null,h=!1},tryToClaimNextHydratableInstance:function(e){if(h){var r=d;if(r){if(!n(e,r)){if(!(r=u(r))||!n(e,r))return e.effectTag|=2,h=!1,void(f=e);t(f,d)}f=e,d=s(r)}else e.effectTag|=2,h=!1,f=e}},prepareToHydrateHostInstance:function(e,t,n){return t=c(e.stateNode,e.type,e.memoizedProps,t,n,e),e.updateQueue=t,null!==t},prepareToHydrateHostTextInstance:function(e){return l(e.stateNode,e.memoizedProps,e)},popHydrationState:function(e){if(e!==f)return!1;if(!h)return r(e),h=!0,!1;var n=e.type;if(5!==e.tag||"head"!==n&&"body"!==n&&!o(n,e.memoizedProps))for(n=d;n;)t(e,n),n=u(n);return r(e),d=f?u(e.stateNode):null,!0}}}(e),A=xr(e,T,C,E,j,l,c).beginWork,P=function(e,t,n,r,o){function i(e){e.effectTag|=4}var a=e.createInstance,u=e.createTextInstance,s=e.appendInitialChild,c=e.finalizeInitialChildren,l=e.prepareUpdate,f=e.persistence,d=t.getRootHostContainer,h=t.popHostContext,g=t.getHostContext,y=t.popHostContainer,v=n.popContextProvider,_=n.popTopLevelContextObject,x=r.popProvider,m=o.prepareToHydrateHostInstance,b=o.prepareToHydrateHostTextInstance,O=o.popHydrationState,w=void 0,S=void 0,k=void 0;return e.mutation?(w=function(){},S=function(e,t,n){(t.updateQueue=n)&&i(t)},k=function(e,t,n,r){n!==r&&i(t)}):p(f?"235":"236"),{completeWork:function(e,t,n){var r=t.pendingProps;switch(t.tag){case 1:return null;case 2:return v(t),e=t.stateNode,null!==(r=t.updateQueue)&&null!==r.capturedValues&&(t.effectTag&=-65,"function"==typeof e.componentDidCatch?t.effectTag|=256:r.capturedValues=null),null;case 3:return y(t),_(t),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(O(t),t.effectTag&=-3),w(t),null!==(e=t.updateQueue)&&null!==e.capturedValues&&(t.effectTag|=256),null;case 5:h(t),n=d();var o=t.type;if(null!==e&&null!=t.stateNode){var f=e.memoizedProps,E=t.stateNode,T=g();E=l(E,o,f,r,n,T),S(e,t,E,o,f,r,n,T),e.ref!==t.ref&&(t.effectTag|=128)}else{if(!r)return null===t.stateNode&&p("166"),null;if(e=g(),O(t))m(t,n,e)&&i(t);else{f=a(o,r,n,e,t);e:for(T=t.child;null!==T;){if(5===T.tag||6===T.tag)s(f,T.stateNode);else if(4!==T.tag&&null!==T.child){T.child.return=T,T=T.child;continue}if(T===t)break;for(;null===T.sibling;){if(null===T.return||T.return===t)break e;T=T.return}T.sibling.return=T.return,T=T.sibling}c(f,o,r,n,e)&&i(t),t.stateNode=f}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)k(e,t,e.memoizedProps,r);else{if("string"!=typeof r)return null===t.stateNode&&p("166"),null;e=d(),n=g(),O(t)?b(t)&&i(t):t.stateNode=u(r,e,n,t)}return null;case 7:(r=t.memoizedProps)||p("165"),t.tag=8,o=[];e:for((f=t.stateNode)&&(f.return=t);null!==f;){if(5===f.tag||6===f.tag||4===f.tag)p("247");else if(9===f.tag)o.push(f.pendingProps.value);else if(null!==f.child){f.child.return=f,f=f.child;continue}for(;null===f.sibling;){if(null===f.return||f.return===t)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}return r=(f=r.handler)(r.props,o),t.child=vr(t,null!==e?e.child:null,r,n),t.child;case 8:return t.tag=7,null;case 9:case 14:case 10:case 11:return null;case 4:return y(t),w(t),null;case 13:return x(t),null;case 12:return null;case 0:p("167");default:p("156")}}}}(e,T,C,E,j).completeWork,N=(T=function(e,t,n,r,o){var i=e.popHostContainer,a=e.popHostContext,u=t.popContextProvider,s=t.popTopLevelContextObject,c=n.popProvider;return{throwException:function(e,t,n){t.effectTag|=512,t.firstEffect=t.lastEffect=null,t={value:n,source:t,stack:lt(t)};do{switch(e.tag){case 3:return sr(e),e.updateQueue.capturedValues=[t],void(e.effectTag|=1024);case 2:if(n=e.stateNode,0==(64&e.effectTag)&&null!==n&&"function"==typeof n.componentDidCatch&&!o(n)){sr(e);var r=(n=e.updateQueue).capturedValues;return null===r?n.capturedValues=[t]:r.push(t),void(e.effectTag|=1024)}}e=e.return}while(null!==e)},unwindWork:function(e){switch(e.tag){case 2:u(e);var t=e.effectTag;return 1024&t?(e.effectTag=-1025&t|64,e):null;case 3:return i(e),s(e),1024&(t=e.effectTag)?(e.effectTag=-1025&t|64,e):null;case 5:return a(e),null;case 4:return i(e),null;case 13:return c(e),null;default:return null}},unwindInterruptedWork:function(e){switch(e.tag){case 2:u(e);break;case 3:i(e),s(e);break;case 5:a(e);break;case 4:i(e);break;case 13:c(e)}}}}(T,C,E,0,n)).throwException,M=T.unwindWork,B=T.unwindInterruptedWork,D=(T=function(e,t,n,r,o){function i(e){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){t(e,n)}else n.current=null}function a(e){switch(rr(e),e.tag){case 2:i(e);var n=e.stateNode;if("function"==typeof n.componentWillUnmount)try{n.props=e.memoizedProps,n.state=e.memoizedState,n.componentWillUnmount()}catch(n){t(e,n)}break;case 5:i(e);break;case 7:u(e.stateNode);break;case 4:f&&c(e)}}function u(e){for(var t=e;;)if(a(t),null===t.child||f&&4===t.tag){if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;t=t.return}t.sibling.return=t.return,t=t.sibling}else t.child.return=t,t=t.child}function s(e){return 5===e.tag||3===e.tag||4===e.tag}function c(e){for(var t=e,n=!1,r=void 0,o=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&p("160"),n.tag){case 5:r=n.stateNode,o=!1;break e;case 3:case 4:r=n.stateNode.containerInfo,o=!0;break e}n=n.return}n=!0}if(5===t.tag||6===t.tag)u(t),o?O(r,t.stateNode):b(r,t.stateNode);else if(4===t.tag?r=t.stateNode.containerInfo:a(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;4===(t=t.return).tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}var l=e.getPublicInstance,f=e.mutation;e=e.persistence,f||p(e?"235":"236");var d=f.commitMount,h=f.commitUpdate,g=f.resetTextContent,y=f.commitTextUpdate,v=f.appendChild,_=f.appendChildToContainer,x=f.insertBefore,m=f.insertInContainerBefore,b=f.removeChild,O=f.removeChildFromContainer;return{commitBeforeMutationLifeCycles:function(e,t){switch(t.tag){case 2:if(2048&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;(e=t.stateNode).props=t.memoizedProps,e.state=t.memoizedState,t=e.getSnapshotBeforeUpdate(n,r),e.__reactInternalSnapshotBeforeUpdate=t}break;case 3:case 5:case 6:case 4:break;default:p("163")}},commitResetTextContent:function(e){g(e.stateNode)},commitPlacement:function(e){e:{for(var t=e.return;null!==t;){if(s(t)){var n=t;break e}t=t.return}p("160"),n=void 0}var r=t=void 0;switch(n.tag){case 5:t=n.stateNode,r=!1;break;case 3:case 4:t=n.stateNode.containerInfo,r=!0;break;default:p("161")}16&n.effectTag&&(g(t),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||s(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){if(5===o.tag||6===o.tag)n?r?m(t,o.stateNode,n):x(t,o.stateNode,n):r?_(t,o.stateNode):v(t,o.stateNode);else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}},commitDeletion:function(e){c(e),e.return=null,e.child=null,e.alternate&&(e.alternate.child=null,e.alternate.return=null)},commitWork:function(e,t){switch(t.tag){case 2:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps;e=null!==e?e.memoizedProps:r;var o=t.type,i=t.updateQueue;t.updateQueue=null,null!==i&&h(n,i,o,e,r,t)}break;case 6:null===t.stateNode&&p("162"),n=t.memoizedProps,y(t.stateNode,null!==e?e.memoizedProps:n,n);break;case 3:break;default:p("163")}},commitLifeCycles:function(e,t,n){switch(n.tag){case 2:if(e=n.stateNode,4&n.effectTag)if(null===t)e.props=n.memoizedProps,e.state=n.memoizedState,e.componentDidMount();else{var r=t.memoizedProps;t=t.memoizedState,e.props=n.memoizedProps,e.state=n.memoizedState,e.componentDidUpdate(r,t,e.__reactInternalSnapshotBeforeUpdate)}null!==(n=n.updateQueue)&&pr(n,e);break;case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=l(n.child.stateNode);break;case 2:e=n.child.stateNode}pr(t,e)}break;case 5:e=n.stateNode,null===t&&4&n.effectTag&&d(e,n.type,n.memoizedProps,n);break;case 6:case 4:break;default:p("163")}},commitErrorLogging:function(e,t){switch(e.tag){case 2:var n=e.type;t=e.stateNode;var r=e.updateQueue;(null===r||null===r.capturedValues)&&p("264");var i=r.capturedValues;for(r.capturedValues=null,"function"!=typeof n.getDerivedStateFromCatch&&o(t),t.props=e.memoizedProps,t.state=e.memoizedState,n=0;n<i.length;n++){var a=(r=i[n]).value,u=r.stack;mr(e,r),t.componentDidCatch(a,{componentStack:null!==u?u:""})}break;case 3:for((null===(n=e.updateQueue)||null===n.capturedValues)&&p("264"),i=n.capturedValues,n.capturedValues=null,n=0;n<i.length;n++)mr(e,r=i[n]),t(r.value);break;default:p("265")}},commitAttachRef:function(e){var t=e.ref;if(null!==t){var n=e.stateNode;switch(e.tag){case 5:e=l(n);break;default:e=n}"function"==typeof t?t(e):t.current=e}},commitDetachRef:function(e){null!==(e=e.ref)&&("function"==typeof e?e(null):e.current=null)}}}(e,s,0,0,function(e){null===ae?ae=new Set([e]):ae.add(e)})).commitBeforeMutationLifeCycles,z=T.commitResetTextContent,L=T.commitPlacement,U=T.commitDeletion,I=T.commitWork,R=T.commitLifeCycles,F=T.commitErrorLogging,X=T.commitAttachRef,G=T.commitDetachRef,K=e.now,W=e.scheduleDeferredCallback,H=e.cancelDeferredCallback,q=e.prepareForCommit,V=e.resetAfterCommit,Z=K(),Y=Z,J=0,$=0,Q=!1,ee=null,te=null,ne=0,re=null,oe=!1,ie=!1,ae=null,ue=null,se=null,ce=0,le=-1,fe=!1,pe=null,de=0,he=0,ge=!1,ye=!1,ve=null,_e=null,xe=!1,me=!1,be=!1,Oe=null,we=1e3,Se=0,ke=1;return{recalculateCurrentTime:d,computeExpirationForFiber:c,scheduleWork:l,requestWork:y,flushRoot:function(e,t){fe&&p("253"),pe=e,de=t,O(e,t,!1),x(),b()},batchedUpdates:function(e,t){var n=xe;xe=!0;try{return e(t)}finally{(xe=n)||fe||x()}},unbatchedUpdates:function(e,t){if(xe&&!me){me=!0;try{return e(t)}finally{me=!1}}return e(t)},flushSync:function(e,t){fe&&p("187");var n=xe;xe=!0;try{return h(e,t)}finally{xe=n,x()}},flushControlled:function(e){var t=xe;xe=!0;try{h(e)}finally{(xe=t)||fe||m(1,!1,null)}},deferredUpdates:function(e){var t=$;$=25*(1+((d()+500)/25|0));try{return e()}finally{$=t}},syncUpdates:h,interactiveUpdates:function(e,t,n){if(be)return e(t,n);xe||fe||0===he||(m(he,!1,null),he=0);var r=be,o=xe;xe=be=!0;try{return e(t,n)}finally{be=r,(xe=o)||fe||x()}},flushInteractiveUpdates:function(){fe||0===he||(m(he,!1,null),he=0)},computeUniqueAsyncExpiration:function(){var e=25*(1+((d()+500)/25|0));return e<=J&&(e=J+1),J=e},legacyContext:C}}function wr(e){function t(e,t,n,r,o,a){if(r=t.current,n){n=n._reactInternalFiber;var u=s(n);n=c(n)?l(n,u):u}else n=f;return null===t.context?t.context=n:t.pendingContext=n,cr(r,{expirationTime:o,partialState:{element:e},callback:void 0===(t=a)?null:t,isReplace:!1,isForced:!1,capturedValue:null,next:null}),i(r,o),o}var n=e.getPublicInstance,r=(e=Or(e)).recalculateCurrentTime,o=e.computeExpirationForFiber,i=e.scheduleWork,u=e.legacyContext,s=u.findCurrentUnmaskedContext,c=u.isContextProvider,l=u.processChildContext;return{createContainer:function(e,t,n){return e={current:t=new qn(3,null,null,t?3:0),containerInfo:e,pendingChildren:null,pendingCommitExpirationTime:0,finishedWork:null,context:null,pendingContext:null,hydrate:n,remainingExpirationTime:0,firstBatch:null,nextScheduledRoot:null},t.stateNode=e},updateContainer:function(e,n,i,a){var u=n.current;return t(e,n,i,r(),u=o(u),a)},updateContainerAtExpirationTime:function(e,n,o,i,a){return t(e,n,o,r(),i,a)},flushRoot:e.flushRoot,requestWork:e.requestWork,computeUniqueAsyncExpiration:e.computeUniqueAsyncExpiration,batchedUpdates:e.batchedUpdates,unbatchedUpdates:e.unbatchedUpdates,deferredUpdates:e.deferredUpdates,syncUpdates:e.syncUpdates,interactiveUpdates:e.interactiveUpdates,flushInteractiveUpdates:e.flushInteractiveUpdates,flushControlled:e.flushControlled,flushSync:e.flushSync,getPublicRootInstance:function(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:return n(e.child.stateNode);default:return e.child.stateNode}},findHostInstance:function(e){var t=e._reactInternalFiber;return void 0===t&&("function"==typeof e.render?p("188"):p("268",Object.keys(e))),null===(e=$t(t))?null:e.stateNode},findHostInstanceWithNoPortals:function(e){return null===(e=function(e){if(!(e=Jt(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child&&4!==t.tag)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}(e))?null:e.stateNode},injectIntoDevTools:function(e){var t=e.findFiberByHostInstance;return function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Qn=tr(function(e){return t.onCommitFiberRoot(n,e)}),er=tr(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}return!0}(a({},e,{findHostInstanceByFiber:function(e){return null===(e=$t(e))?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null}}))}}}var Sr=Object.freeze({default:wr}),kr=Sr&&wr||Sr,Er=kr.default?kr.default:kr;var Tr="object"==typeof performance&&"function"==typeof performance.now,Cr=void 0;Cr=Tr?function(){return performance.now()}:function(){return Date.now()};var jr=void 0,Ar=void 0;if(i.canUseDOM)if("function"!=typeof requestIdleCallback||"function"!=typeof cancelIdleCallback){var Pr=null,Nr=!1,Mr=-1,Br=!1,Dr=0,zr=33,Lr=33,Ur=void 0;Ur=Tr?{didTimeout:!1,timeRemaining:function(){var e=Dr-performance.now();return 0<e?e:0}}:{didTimeout:!1,timeRemaining:function(){var e=Dr-Date.now();return 0<e?e:0}};var Ir="__reactIdleCallback$"+Math.random().toString(36).slice(2);window.addEventListener("message",function(e){if(e.source===window&&e.data===Ir){if(Nr=!1,e=Cr(),0>=Dr-e){if(!(-1!==Mr&&Mr<=e))return void(Br||(Br=!0,requestAnimationFrame(Rr)));Ur.didTimeout=!0}else Ur.didTimeout=!1;Mr=-1,e=Pr,Pr=null,null!==e&&e(Ur)}},!1);var Rr=function(e){Br=!1;var t=e-Dr+Lr;t<Lr&&zr<Lr?(8>t&&(t=8),Lr=t<zr?zr:t):zr=t,Dr=e+Lr,Nr||(Nr=!0,window.postMessage(Ir,"*"))};jr=function(e,t){return Pr=e,null!=t&&"number"==typeof t.timeout&&(Mr=Cr()+t.timeout),Br||(Br=!0,requestAnimationFrame(Rr)),0},Ar=function(){Pr=null,Nr=!1,Mr=-1}}else jr=window.requestIdleCallback,Ar=window.cancelIdleCallback;else jr=function(e){return setTimeout(function(){e({timeRemaining:function(){return 1/0},didTimeout:!1})})},Ar=function(e){clearTimeout(e)};function Fr(e,t){return e=a({children:void 0},t),(t=function(e){var t="";return o.Children.forEach(e,function(e){null==e||"string"!=typeof e&&"number"!=typeof e||(t+=e)}),t}(t.children))&&(e.children=t),e}function Xr(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+n,t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function Gr(e,t){var n=t.value;e._wrapperState={initialValue:null!=n?n:t.defaultValue,wasMultiple:!!t.multiple}}function Kr(e,t){return null!=t.dangerouslySetInnerHTML&&p("91"),a({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Wr(e,t){var n=t.value;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&p("92"),Array.isArray(t)&&(1>=t.length||p("93"),t=t[0]),n=""+t),null==n&&(n="")),e._wrapperState={initialValue:""+n}}function Hr(e,t){var n=t.value;null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&(e.defaultValue=n)),null!=t.defaultValue&&(e.defaultValue=t.defaultValue)}function qr(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}var Vr={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function Zr(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Yr(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Zr(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var Jr,$r=void 0,Qr=(Jr=function(e,t){if(e.namespaceURI!==Vr.svg||"innerHTML"in e)e.innerHTML=t;else{for(($r=$r||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=$r.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction(function(){return Jr(e,t)})}:Jr);function eo(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var to={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},no=["Webkit","ms","Moz","O"];function ro(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=n,i=t[n];o=null==i||"boolean"==typeof i||""===i?"":r||"number"!=typeof i||0===i||to.hasOwnProperty(o)&&to[o]?(""+i).trim():i+"px","float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(to).forEach(function(e){no.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),to[t]=to[e]})});var oo=a({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function io(e,t,n){t&&(oo[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&p("137",e,n()),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&p("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||p("61")),null!=t.style&&"object"!=typeof t.style&&p("62",n()))}function ao(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var uo=u.thatReturns("");function so(e,t){var n=Dn(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=b[t];for(var r=0;r<t.length;r++){var o=t[r];n.hasOwnProperty(o)&&n[o]||("topScroll"===o?bn("topScroll","scroll",e):"topFocus"===o||"topBlur"===o?(bn("topFocus","focus",e),bn("topBlur","blur",e),n.topBlur=!0,n.topFocus=!0):"topCancel"===o?(We("cancel",!0)&&bn("topCancel","cancel",e),n.topCancel=!0):"topClose"===o?(We("close",!0)&&bn("topClose","close",e),n.topClose=!0):An.hasOwnProperty(o)&&mn(o,An[o],e),n[o]=!0)}}function co(e,t,n,r){return n=9===n.nodeType?n:n.ownerDocument,r===Vr.html&&(r=Zr(e)),r===Vr.html?"script"===e?((e=n.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):e="string"==typeof t.is?n.createElement(e,{is:t.is}):n.createElement(e):e=n.createElementNS(r,e),e}function lo(e,t){return(9===t.nodeType?t:t.ownerDocument).createTextNode(e)}function fo(e,t,n,r){var o=ao(t,n);switch(t){case"iframe":case"object":mn("topLoad","load",e);var i=n;break;case"video":case"audio":for(i in Pn)Pn.hasOwnProperty(i)&&mn(i,Pn[i],e);i=n;break;case"source":mn("topError","error",e),i=n;break;case"img":case"image":case"link":mn("topError","error",e),mn("topLoad","load",e),i=n;break;case"form":mn("topReset","reset",e),mn("topSubmit","submit",e),i=n;break;case"details":mn("topToggle","toggle",e),i=n;break;case"input":mt(e,n),i=xt(e,n),mn("topInvalid","invalid",e),so(r,"onChange");break;case"option":i=Fr(e,n);break;case"select":Gr(e,n),i=a({},n,{value:void 0}),mn("topInvalid","invalid",e),so(r,"onChange");break;case"textarea":Wr(e,n),i=Kr(e,n),mn("topInvalid","invalid",e),so(r,"onChange");break;default:i=n}io(t,i,uo);var s,c=i;for(s in c)if(c.hasOwnProperty(s)){var l=c[s];"style"===s?ro(e,l):"dangerouslySetInnerHTML"===s?null!=(l=l?l.__html:void 0)&&Qr(e,l):"children"===s?"string"==typeof l?("textarea"!==t||""!==l)&&eo(e,l):"number"==typeof l&&eo(e,""+l):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(m.hasOwnProperty(s)?null!=l&&so(r,s):null!=l&&_t(e,s,l,o))}switch(t){case"input":qe(e),wt(e,n);break;case"textarea":qe(e),qr(e);break;case"option":null!=n.value&&e.setAttribute("value",n.value);break;case"select":e.multiple=!!n.multiple,null!=(t=n.value)?Xr(e,!!n.multiple,t,!1):null!=n.defaultValue&&Xr(e,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof i.onClick&&(e.onclick=u)}}function po(e,t,n,r,o){var i=null;switch(t){case"input":n=xt(e,n),r=xt(e,r),i=[];break;case"option":n=Fr(e,n),r=Fr(e,r),i=[];break;case"select":n=a({},n,{value:void 0}),r=a({},r,{value:void 0}),i=[];break;case"textarea":n=Kr(e,n),r=Kr(e,r),i=[];break;default:"function"!=typeof n.onClick&&"function"==typeof r.onClick&&(e.onclick=u)}io(t,r,uo),t=e=void 0;var s=null;for(e in n)if(!r.hasOwnProperty(e)&&n.hasOwnProperty(e)&&null!=n[e])if("style"===e){var c=n[e];for(t in c)c.hasOwnProperty(t)&&(s||(s={}),s[t]="")}else"dangerouslySetInnerHTML"!==e&&"children"!==e&&"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&"autoFocus"!==e&&(m.hasOwnProperty(e)?i||(i=[]):(i=i||[]).push(e,null));for(e in r){var l=r[e];if(c=null!=n?n[e]:void 0,r.hasOwnProperty(e)&&l!==c&&(null!=l||null!=c))if("style"===e)if(c){for(t in c)!c.hasOwnProperty(t)||l&&l.hasOwnProperty(t)||(s||(s={}),s[t]="");for(t in l)l.hasOwnProperty(t)&&c[t]!==l[t]&&(s||(s={}),s[t]=l[t])}else s||(i||(i=[]),i.push(e,s)),s=l;else"dangerouslySetInnerHTML"===e?(l=l?l.__html:void 0,c=c?c.__html:void 0,null!=l&&c!==l&&(i=i||[]).push(e,""+l)):"children"===e?c===l||"string"!=typeof l&&"number"!=typeof l||(i=i||[]).push(e,""+l):"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&(m.hasOwnProperty(e)?(null!=l&&so(o,e),i||c===l||(i=[])):(i=i||[]).push(e,l))}return s&&(i=i||[]).push("style",s),i}function ho(e,t,n,r,o){"input"===n&&"radio"===o.type&&null!=o.name&&bt(e,o),ao(n,r),r=ao(n,o);for(var i=0;i<t.length;i+=2){var a=t[i],u=t[i+1];"style"===a?ro(e,u):"dangerouslySetInnerHTML"===a?Qr(e,u):"children"===a?eo(e,u):_t(e,a,u,r)}switch(n){case"input":Ot(e,o);break;case"textarea":Hr(e,o);break;case"select":e._wrapperState.initialValue=void 0,t=e._wrapperState.wasMultiple,e._wrapperState.wasMultiple=!!o.multiple,null!=(n=o.value)?Xr(e,!!o.multiple,n,!1):t!==!!o.multiple&&(null!=o.defaultValue?Xr(e,!!o.multiple,o.defaultValue,!0):Xr(e,!!o.multiple,o.multiple?[]:"",!1))}}function go(e,t,n,r,o){switch(t){case"iframe":case"object":mn("topLoad","load",e);break;case"video":case"audio":for(var i in Pn)Pn.hasOwnProperty(i)&&mn(i,Pn[i],e);break;case"source":mn("topError","error",e);break;case"img":case"image":case"link":mn("topError","error",e),mn("topLoad","load",e);break;case"form":mn("topReset","reset",e),mn("topSubmit","submit",e);break;case"details":mn("topToggle","toggle",e);break;case"input":mt(e,n),mn("topInvalid","invalid",e),so(o,"onChange");break;case"select":Gr(e,n),mn("topInvalid","invalid",e),so(o,"onChange");break;case"textarea":Wr(e,n),mn("topInvalid","invalid",e),so(o,"onChange")}for(var a in io(t,n,uo),r=null,n)n.hasOwnProperty(a)&&(i=n[a],"children"===a?"string"==typeof i?e.textContent!==i&&(r=["children",i]):"number"==typeof i&&e.textContent!==""+i&&(r=["children",""+i]):m.hasOwnProperty(a)&&null!=i&&so(o,a));switch(t){case"input":qe(e),wt(e,n);break;case"textarea":qe(e),qr(e);break;case"select":case"option":break;default:"function"==typeof n.onClick&&(e.onclick=u)}return r}function yo(e,t){return e.nodeValue!==t}var vo=Object.freeze({createElement:co,createTextNode:lo,setInitialProperties:fo,diffProperties:po,updateProperties:ho,diffHydratedProperties:go,diffHydratedText:yo,warnForUnmatchedText:function(){},warnForDeletedHydratableElement:function(){},warnForDeletedHydratableText:function(){},warnForInsertedHydratedElement:function(){},warnForInsertedHydratedText:function(){},restoreControlledState:function(e,t,n){switch(t){case"input":if(Ot(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=W(r);o||p("90"),Ve(r),Ot(r,o)}}}break;case"textarea":Hr(e,n);break;case"select":null!=(t=n.value)&&Xr(e,!!n.multiple,t,!1)}}});je.injectFiberControlledHostComponent(vo);var _o=null,xo=null;function mo(e){this._expirationTime=ko.computeUniqueAsyncExpiration(),this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function bo(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function Oo(e,t,n){this._internalRoot=ko.createContainer(e,t,n)}function wo(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function So(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}mo.prototype.render=function(e){this._defer||p("250"),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new bo;return ko.updateContainerAtExpirationTime(e,t,null,n,r._onCommit),r},mo.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},mo.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||p("251"),this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,o=t;o!==this;)r=o,o=o._next;null===r&&p("251"),r._next=o._next,this._next=t,e.firstBatch=this}this._defer=!1,ko.flushRoot(e,n),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},mo.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},bo.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},bo.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];"function"!=typeof n&&p("191",n),n()}}},Oo.prototype.render=function(e,t){var n=this._internalRoot,r=new bo;return null!==(t=void 0===t?null:t)&&r.then(t),ko.updateContainer(e,n,null,r._onCommit),r},Oo.prototype.unmount=function(e){var t=this._internalRoot,n=new bo;return null!==(e=void 0===e?null:e)&&n.then(e),ko.updateContainer(null,t,null,n._onCommit),n},Oo.prototype.legacy_renderSubtreeIntoContainer=function(e,t,n){var r=this._internalRoot,o=new bo;return null!==(n=void 0===n?null:n)&&o.then(n),ko.updateContainer(t,r,e,o._onCommit),o},Oo.prototype.createBatch=function(){var e=new mo(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime<=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e};var ko=Er({getRootHostContext:function(e){var t=e.nodeType;switch(t){case 9:case 11:e=(e=e.documentElement)?e.namespaceURI:Yr(null,"");break;default:e=Yr(e=(t=8===t?e.parentNode:e).namespaceURI||null,t=t.tagName)}return e},getChildHostContext:function(e,t){return Yr(e,t)},getPublicInstance:function(e){return e},prepareForCommit:function(){_o=_n;var e=s();if(Un(e)){if("selectionStart"in e)var t={start:e.selectionStart,end:e.selectionEnd};else e:{var n=window.getSelection&&window.getSelection();if(n&&0!==n.rangeCount){t=n.anchorNode;var r=n.anchorOffset,o=n.focusNode;n=n.focusOffset;try{t.nodeType,o.nodeType}catch(e){t=null;break e}var i=0,a=-1,u=-1,c=0,l=0,f=e,p=null;t:for(;;){for(var d;f!==t||0!==r&&3!==f.nodeType||(a=i+r),f!==o||0!==n&&3!==f.nodeType||(u=i+n),3===f.nodeType&&(i+=f.nodeValue.length),null!==(d=f.firstChild);)p=f,f=d;for(;;){if(f===e)break t;if(p===t&&++c===r&&(a=i),p===o&&++l===n&&(u=i),null!==(d=f.nextSibling))break;p=(f=p).parentNode}f=d}t=-1===a||-1===u?null:{start:a,end:u}}else t=null}t=t||{start:0,end:0}}else t=null;xo={focusedElem:e,selectionRange:t},xn(!1)},resetAfterCommit:function(){var e=xo,t=s(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&l(document.documentElement,n)){if(Un(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if(window.getSelection){t=window.getSelection();var o=n[oe()].length;e=Math.min(r.start,o),r=void 0===r.end?e:Math.min(r.end,o),!t.extend&&e>r&&(o=r,r=e,e=o),o=Ln(n,e);var i=Ln(n,r);if(o&&i&&(1!==t.rangeCount||t.anchorNode!==o.node||t.anchorOffset!==o.offset||t.focusNode!==i.node||t.focusOffset!==i.offset)){var a=document.createRange();a.setStart(o.node,o.offset),t.removeAllRanges(),e>r?(t.addRange(a),t.extend(i.node,i.offset)):(a.setEnd(i.node,i.offset),t.addRange(a))}}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for(n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}xo=null,xn(_o),_o=null},createInstance:function(e,t,n,r,o){return(e=co(e,t,n,r))[F]=o,e[X]=t,e},appendInitialChild:function(e,t){e.appendChild(t)},finalizeInitialChildren:function(e,t,n,r){return fo(e,t,n,r),So(t,n)},prepareUpdate:function(e,t,n,r,o){return po(e,t,n,r,o)},shouldSetTextContent:function(e,t){return"textarea"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&"string"==typeof t.dangerouslySetInnerHTML.__html},shouldDeprioritizeSubtree:function(e,t){return!!t.hidden},createTextInstance:function(e,t,n,r){return(e=lo(e,t))[F]=r,e},now:Cr,mutation:{commitMount:function(e,t,n){So(t,n)&&e.focus()},commitUpdate:function(e,t,n,r,o){e[X]=o,ho(e,t,n,r,o)},resetTextContent:function(e){eo(e,"")},commitTextUpdate:function(e,t,n){e.nodeValue=n},appendChild:function(e,t){e.appendChild(t)},appendChildToContainer:function(e,t){8===e.nodeType?e.parentNode.insertBefore(t,e):e.appendChild(t)},insertBefore:function(e,t,n){e.insertBefore(t,n)},insertInContainerBefore:function(e,t,n){8===e.nodeType?e.parentNode.insertBefore(t,n):e.insertBefore(t,n)},removeChild:function(e,t){e.removeChild(t)},removeChildFromContainer:function(e,t){8===e.nodeType?e.parentNode.removeChild(t):e.removeChild(t)}},hydration:{canHydrateInstance:function(e,t){return 1!==e.nodeType||t.toLowerCase()!==e.nodeName.toLowerCase()?null:e},canHydrateTextInstance:function(e,t){return""===t||3!==e.nodeType?null:e},getNextHydratableSibling:function(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e},getFirstHydratableChild:function(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e},hydrateInstance:function(e,t,n,r,o,i){return e[F]=i,e[X]=n,go(e,t,n,o,r)},hydrateTextInstance:function(e,t,n){return e[F]=n,yo(e,t)},didNotMatchHydratedContainerTextInstance:function(){},didNotMatchHydratedTextInstance:function(){},didNotHydrateContainerInstance:function(){},didNotHydrateInstance:function(){},didNotFindHydratableContainerInstance:function(){},didNotFindHydratableContainerTextInstance:function(){},didNotFindHydratableInstance:function(){},didNotFindHydratableTextInstance:function(){}},scheduleDeferredCallback:jr,cancelDeferredCallback:Ar}),Eo=ko;function To(e,t,n,r,o){wo(n)||p("200");var i=n._reactRootContainer;if(i){if("function"==typeof o){var a=o;o=function(){var e=ko.getPublicRootInstance(i._internalRoot);a.call(e)}}null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Oo(e,!1,t)}(n,r),"function"==typeof o){var u=o;o=function(){var e=ko.getPublicRootInstance(i._internalRoot);u.call(e)}}ko.unbatchedUpdates(function(){null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)})}return ko.getPublicRootInstance(i._internalRoot)}function Co(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return wo(t)||p("200"),function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:et,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}Le=Eo.batchedUpdates,Ue=Eo.interactiveUpdates,Ie=Eo.flushInteractiveUpdates;var jo={createPortal:Co,findDOMNode:function(e){return null==e?null:1===e.nodeType?e:ko.findHostInstance(e)},hydrate:function(e,t,n){return To(null,e,t,!0,n)},render:function(e,t,n){return To(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){return(null==e||void 0===e._reactInternalFiber)&&p("38"),To(e,t,n,!1,r)},unmountComponentAtNode:function(e){return wo(e)||p("40"),!!e._reactRootContainer&&(ko.unbatchedUpdates(function(){To(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return Co.apply(void 0,arguments)},unstable_batchedUpdates:ko.batchedUpdates,unstable_deferredUpdates:ko.deferredUpdates,flushSync:ko.flushSync,unstable_flushControlled:ko.flushControlled,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{EventPluginHub:I,EventPluginRegistry:S,EventPropagators:ne,ReactControlledComponent:ze,ReactDOMComponentTree:H,ReactDOMEventListener:Sn},unstable_createRoot:function(e,t){return new Oo(e,!0,null!=t&&!0===t.hydrate)}};ko.injectIntoDevTools({findFiberByHostInstance:G,bundleType:0,version:"16.3.2",rendererPackageName:"react-dom"});var Ao=Object.freeze({default:jo}),Po=Ao&&jo||Ao;e.exports=Po.default?Po.default:Po},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(479)},function(e,t,n){"use strict";
/** @license React v16.3.2
 * react.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(188),o=n(122),i=n(187),a=n(121),u="function"==typeof Symbol&&Symbol.for,s=u?Symbol.for("react.element"):60103,c=u?Symbol.for("react.portal"):60106,l=u?Symbol.for("react.fragment"):60107,f=u?Symbol.for("react.strict_mode"):60108,p=u?Symbol.for("react.provider"):60109,d=u?Symbol.for("react.context"):60110,h=u?Symbol.for("react.async_mode"):60111,g=u?Symbol.for("react.forward_ref"):60112,y="function"==typeof Symbol&&Symbol.iterator;function v(e){for(var t=arguments.length-1,n="http://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);o(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var _={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}};function x(e,t,n){this.props=e,this.context=t,this.refs=i,this.updater=n||_}function m(){}function b(e,t,n){this.props=e,this.context=t,this.refs=i,this.updater=n||_}x.prototype.isReactComponent={},x.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&v("85"),this.updater.enqueueSetState(this,e,t,"setState")},x.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},m.prototype=x.prototype;var O=b.prototype=new m;O.constructor=b,r(O,x.prototype),O.isPureReactComponent=!0;var w={current:null},S=Object.prototype.hasOwnProperty,k={key:!0,ref:!0,__self:!0,__source:!0};function E(e,t,n){var r=void 0,o={},i=null,a=null;if(null!=t)for(r in void 0!==t.ref&&(a=t.ref),void 0!==t.key&&(i=""+t.key),t)S.call(t,r)&&!k.hasOwnProperty(r)&&(o[r]=t[r]);var u=arguments.length-2;if(1===u)o.children=n;else if(1<u){for(var c=Array(u),l=0;l<u;l++)c[l]=arguments[l+2];o.children=c}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===o[r]&&(o[r]=u[r]);return{$$typeof:s,type:e,key:i,ref:a,props:o,_owner:w.current}}function T(e){return"object"==typeof e&&null!==e&&e.$$typeof===s}var C=/\/+/g,j=[];function A(e,t,n,r){if(j.length){var o=j.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function P(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>j.length&&j.push(e)}function N(e,t,n,r){var o=typeof e;"undefined"!==o&&"boolean"!==o||(e=null);var i=!1;if(null===e)i=!0;else switch(o){case"string":case"number":i=!0;break;case"object":switch(e.$$typeof){case s:case c:i=!0}}if(i)return n(r,e,""===t?"."+M(e,0):t),1;if(i=0,t=""===t?".":t+":",Array.isArray(e))for(var a=0;a<e.length;a++){var u=t+M(o=e[a],a);i+=N(o,u,n,r)}else if(null===e||void 0===e?u=null:u="function"==typeof(u=y&&e[y]||e["@@iterator"])?u:null,"function"==typeof u)for(e=u.call(e),a=0;!(o=e.next()).done;)i+=N(o=o.value,u=t+M(o,a++),n,r);else"object"===o&&v("31","[object Object]"===(n=""+e)?"object with keys {"+Object.keys(e).join(", ")+"}":n,"");return i}function M(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function B(e,t){e.func.call(e.context,t,e.count++)}function D(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?z(e,r,n,a.thatReturnsArgument):null!=e&&(T(e)&&(t=o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(C,"$&/")+"/")+n,e={$$typeof:s,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}),r.push(e))}function z(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(C,"$&/")+"/"),t=A(t,i,r,o),null==e||N(e,"",D,t),P(t)}var L={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return z(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;t=A(null,null,t,n),null==e||N(e,"",B,t),P(t)},count:function(e){return null==e?0:N(e,"",a.thatReturnsNull,null)},toArray:function(e){var t=[];return z(e,t,null,a.thatReturnsArgument),t},only:function(e){return T(e)||v("143"),e}},createRef:function(){return{current:null}},Component:x,PureComponent:b,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:d,_calculateChangedBits:t,_defaultValue:e,_currentValue:e,_changedBits:0,Provider:null,Consumer:null}).Provider={$$typeof:p,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:g,render:e}},Fragment:l,StrictMode:f,unstable_AsyncMode:h,createElement:E,cloneElement:function(e,t,n){(null===e||void 0===e)&&v("267",e);var o=void 0,i=r({},e.props),a=e.key,u=e.ref,c=e._owner;if(null!=t){void 0!==t.ref&&(u=t.ref,c=w.current),void 0!==t.key&&(a=""+t.key);var l=void 0;for(o in e.type&&e.type.defaultProps&&(l=e.type.defaultProps),t)S.call(t,o)&&!k.hasOwnProperty(o)&&(i[o]=void 0===t[o]&&void 0!==l?l[o]:t[o])}if(1===(o=arguments.length-2))i.children=n;else if(1<o){l=Array(o);for(var f=0;f<o;f++)l[f]=arguments[f+2];i.children=l}return{$$typeof:s,type:e.type,key:a,ref:u,props:i,_owner:c}},createFactory:function(e){var t=E.bind(null,e);return t.type=e,t},isValidElement:T,version:"16.3.2",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:w,assign:r}},U=Object.freeze({default:L}),I=U&&L||U;e.exports=I.default?I.default:I},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=u(n(5)),i=u(n(480));n(472);var a=u(n(270));function u(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"render",value:function(){return o.default.createElement(a.default,null)}}]),t}();t.default=s,i.default.render(o.default.createElement(s,null),document.getElementById("app"))},function(e,t,n){"use strict";(function(e){var n="object"==typeof e&&e&&e.Object===Object&&e;t.a=n}).call(this,n(61))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4LXNhZ2EvZXMvaW50ZXJuYWwvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZXhwb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC1zYWdhL2VzL2ludGVybmFsL2lvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FuLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZhaWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL1Byb3BUeXBlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29tcG9uZW50cy9Qcm92aWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvU3Vic2NyaXB0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb21wb25lbnRzL2Nvbm5lY3RBZHZhbmNlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvc2hhbGxvd0VxdWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3Jvb3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fU3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2dldFJhd1RhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19vYmplY3RUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlR2V0VGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2dldFByb3RvdHlwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzT2JqZWN0TGlrZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzUGxhaW5PYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3Qvd3JhcE1hcFRvUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWFwRGlzcGF0Y2hUb1Byb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L21hcFN0YXRlVG9Qcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9tZXJnZVByb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L3NlbGVjdG9yRmFjdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9jb25uZWN0LmpzIiwid2VicGFjazovLy8uL3NyYy9kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tbGVuZ3RoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1kcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbGlicy96YWh5by5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4LXNhZ2EvZXMvaW50ZXJuYWwvY2hhbm5lbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hLWZ1bmN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1odG1sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2hpZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdwby5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2hhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpY3QtbWV0aG9kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jdHguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29yZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1tZXRob2RzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1zYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kZWZpbmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbGlicy9ib3guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdHlwZWQtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4LXNhZ2EvZXMvaW50ZXJuYWwvYnVmZmVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hZGQtdG8tdW5zY29wYWJsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbGlicmFyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tZXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC1zYWdhL2VzL2ludGVybmFsL3NhZ2FIZWxwZXJzL2ZzbUl0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC1zYWdhL2VzL2ludGVybmFsL3NhZ2FIZWxwZXJzL3Rha2VFdmVyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtc2FnYS9lcy9pbnRlcm5hbC9zYWdhSGVscGVycy90YWtlTGF0ZXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC1zYWdhL2VzL2ludGVybmFsL3NhZ2FIZWxwZXJzL3Rocm90dGxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC1zYWdhL2VzL2ludGVybmFsL3NhZ2FIZWxwZXJzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9hY3Rpb25zX3NhZ2EvdG9vbGJveHByZXNlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS1hbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZm9yLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FuLWluc3RhbmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1zcGVjaWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tYWJzb2x1dGUtaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdWlkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3Byb3BlcnR5LWRlc2MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1pbi1qcy11dGlscy9saWIvaXNQcmVmaXhlZFZhbHVlLmpzIiwid2VicGFjazovLy8uL3NyYy9hY3Rpb25zX3N1L2NvbnRleHRtZW51LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3ZhbGlkYXRlLWNvbGxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlcmF0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy10cmltLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC10by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4LXNhZ2EvZXMvaW50ZXJuYWwvc2NoZWR1bGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9hY3Rpb25zX3NhZ2EvbmFnYXNoaS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYWN0aW9uc19zYWdhL3Rvb2xib3hzb3phaS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jbGFzc29mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1waWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2FnYXMvbmFnYXNoaS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYWN0aW9uc19zYWdhL3Rvb2xib3hsaW5rLmpzIiwid2VicGFjazovLy8uL3NyYy9hY3Rpb25zX3NhZ2EvY29udGV4dG1lbnUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FjdGlvbnNfc2FnYS9zZWxlY3Rib3guanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FjdGlvbnNfc3UvdG9vbGJveGxpbmsuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYnMvc3RyaW5nLmpzIiwid2VicGFjazovLy8uL3NyYy9hY3Rpb25zX3N1L3NlbGVjdGJveC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtY29sbGVjdGlvbi1mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1jb2xsZWN0aW9uLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1mb3JjZWQtcGFtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3R5cGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdXNlci1hZ2VudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZpeC1yZS13a3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmxhZ3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1kZXRlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtcmVnZXhwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWluY2x1ZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NoYXJlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW52YXJpYW50L2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FjdGlvbnNfc2FnYS90b29sYm94Ym94ZGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbGlicy9zb3phaS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYWN0aW9uc19zdS9kYW5kZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYWN0aW9uc19zdS90b29sYm94Ym94ZGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC1idWZmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbmV3LXByb21pc2UtY2FwYWJpbGl0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19taWNyb3Rhc2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdGFzay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1maWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXNwZWNpZXMtY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NyZWF0ZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1hcnJheS1pdGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZhaWxzLWlzLXJlZ2V4cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctY29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1leHBtMS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLXNpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXJlcGVhdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pbmhlcml0LWlmLXJlcXVpcmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy13cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtcHJvdG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faHRtbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19lbnVtLWJ1Zy1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NoYXJlZC1rZXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kb20tY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9lbXB0eUZ1bmN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9pbnZhcmlhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FzYXAvYnJvd3Nlci1hc2FwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hcGhyb2RpdGUvbm9kZV9tb2R1bGVzL2lubGluZS1zdHlsZS1wcmVmaXhlci9zdGF0aWMvY3JlYXRlUHJlZml4ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FwaHJvZGl0ZS9ub2RlX21vZHVsZXMvaW5saW5lLXN0eWxlLXByZWZpeGVyL3N0YXRpYy9wbHVnaW5zL3RyYW5zaXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FwaHJvZGl0ZS9ub2RlX21vZHVsZXMvaW5saW5lLXN0eWxlLXByZWZpeGVyL3N0YXRpYy9wbHVnaW5zL3NpemluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXBocm9kaXRlL25vZGVfbW9kdWxlcy9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvc3RhdGljL3BsdWdpbnMvcG9zaXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FwaHJvZGl0ZS9ub2RlX21vZHVsZXMvaW5saW5lLXN0eWxlLXByZWZpeGVyL3N0YXRpYy9wbHVnaW5zL2ltYWdlU2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hcGhyb2RpdGUvbm9kZV9tb2R1bGVzL2lubGluZS1zdHlsZS1wcmVmaXhlci9zdGF0aWMvcGx1Z2lucy9ncmFkaWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXBocm9kaXRlL25vZGVfbW9kdWxlcy9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvc3RhdGljL3BsdWdpbnMvZmxleGJveE9sZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXBocm9kaXRlL25vZGVfbW9kdWxlcy9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvc3RhdGljL3BsdWdpbnMvZmxleGJveElFLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hcGhyb2RpdGUvbm9kZV9tb2R1bGVzL2lubGluZS1zdHlsZS1wcmVmaXhlci9zdGF0aWMvcGx1Z2lucy9mbGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hcGhyb2RpdGUvbm9kZV9tb2R1bGVzL2lubGluZS1zdHlsZS1wcmVmaXhlci9zdGF0aWMvcGx1Z2lucy9maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FwaHJvZGl0ZS9ub2RlX21vZHVsZXMvaW5saW5lLXN0eWxlLXByZWZpeGVyL3N0YXRpYy9wbHVnaW5zL2N1cnNvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXBocm9kaXRlL25vZGVfbW9kdWxlcy9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvc3RhdGljL3BsdWdpbnMvY3Jvc3NGYWRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hcGhyb2RpdGUvbm9kZV9tb2R1bGVzL2lubGluZS1zdHlsZS1wcmVmaXhlci9zdGF0aWMvcGx1Z2lucy9jYWxjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHJpbmctaGFzaC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgvZXMvcmVkdXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9saWJzL2xpbmsuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FjdGlvbnNfc2FnYS9kYW5kZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbGlicy90ZXh0LmpzIiwid2VicGFjazovLy8uL3NyYy9hY3Rpb25zX3NhZ2EvdG9vbGJveC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYWN0aW9uc19zYWdhL3Rvb2xib3h0ZXh0ZGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbGlicy90ZXh0Z3JpZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYWN0aW9uc19zYWdhL3Rvb2xib3hzY2FsZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYWN0aW9uc19zdS90b29sYm94cHJlc2VuLmpzIiwid2VicGFjazovLy8uL3NyYy9hY3Rpb25zX3N1L3Rvb2xib3hzb3phaS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYWN0aW9uc19zdS90b29sYm94dGV4dGRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FjdGlvbnNfc3UvdG9vbGJveHNjYWxlLmpzIiwid2VicGFjazovLy8uL3NyYy9hY3Rpb25zX3N1L3Rvb2xib3guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FwaHJvZGl0ZS9ub2RlX21vZHVsZXMvaW5saW5lLXN0eWxlLXByZWZpeGVyL3V0aWxzL2NhcGl0YWxpemVTdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1zY2FsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1mcm9tLWl0ZXJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24tdG8tanNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtdG8tYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXBhZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mbGF0dGVuLWludG8tYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb3duLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi13ZWFrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LndlYWstbWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLXN0cm9uZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcHJvbWlzZS1yZXNvbHZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3BlcmZvcm0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmZsYWdzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItc3RlcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1jb3B5LXdpdGhpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1yZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1jYWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtZnJvdW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtbG9nMXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hLW51bWJlci12YWx1ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wYXJzZS1mbG9hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW52b2tlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2JpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWFzc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wbi1leHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qta2V5cy1pbnRlcm5hbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MtZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2llOC1kb20tZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9lbXB0eU9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LWFzc2lnbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL3BvbnlmaWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hcGhyb2RpdGUvZXMvY2h1bmstYzRlMzczODcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FwaHJvZGl0ZS9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtc2FnYS9lcy9pbnRlcm5hbC9wcm9jLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC1zYWdhL2VzL2ludGVybmFsL3J1blNhZ2EuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4LXNhZ2EvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4LXNhZ2EvZXMvaW50ZXJuYWwvbWlkZGxld2FyZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2FnYXMvY29udGV4dG1lbnUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NhZ2FzL2RhbmRkLmpzIiwid2VicGFjazovLy8uL3NyYy9zYWdhcy9zY2FsZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2FnYXMvdG9vbGJveC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2FnYXMvc2VsZWN0Ym94LmpzIiwid2VicGFjazovLy8uL3NyYy9zYWdhcy9yb290U2FnYS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcmVkdWNlcnMvY29udGV4dG1lbnUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlZHVjZXJzL2RhbmRkLmpzIiwid2VicGFjazovLy8uL3NyYy9yZWR1Y2Vycy9lZGl0b25vZmYuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlZHVjZXJzL2xpbmVzLmpzIiwid2VicGFjazovLy8uL3NyYy9yZWR1Y2Vycy9saW5rcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcmVkdWNlcnMvc296YWkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlZHVjZXJzL3Rvb2xib3hzLmpzIiwid2VicGFjazovLy8uL3NyYy9yZWR1Y2Vycy9mb2N1c2JveC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcmVkdWNlcnMvYm94cy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcmVkdWNlcnMvc2NhbGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlZHVjZXJzL3Jvb3RSZWR1Y2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1Rvb2xCb3hQcmVzZW4uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvVG9vbEJveFByZXNlbk1hcC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ub29sQm94TGluay5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ub29sQm94TGlua01hcC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ub29sQm94U296YWkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvVG9vbEJveFNvemFpTWFwLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1Rvb2xCb3hUZXh0RGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ub29sQm94VGV4dERhdGFNYXAuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYnMvYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvVG9vbEJveEJveERhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvVG9vbEJveEJveERhdGFNYXAuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvVG9vbEJveFNjYWxlLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1Rvb2xCb3hTY2FsZU1hcC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ub29sQm94LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1Rvb2xCb3hNYXAuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYnMvZXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FzYXAvYnJvd3Nlci1yYXcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FwaHJvZGl0ZS9ub2RlX21vZHVsZXMvaW5saW5lLXN0eWxlLXByZWZpeGVyL3V0aWxzL2lzT2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hcGhyb2RpdGUvbm9kZV9tb2R1bGVzL2lubGluZS1zdHlsZS1wcmVmaXhlci91dGlscy9hZGROZXdWYWx1ZXNPbmx5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hcGhyb2RpdGUvbm9kZV9tb2R1bGVzL2lubGluZS1zdHlsZS1wcmVmaXhlci91dGlscy9wcmVmaXhWYWx1ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXBocm9kaXRlL25vZGVfbW9kdWxlcy9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvdXRpbHMvcHJlZml4UHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2h5cGhlbmF0ZS1zdHlsZS1uYW1lL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtaW4tanMtdXRpbHMvbGliL2h5cGhlbmF0ZVByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0NvbnRleHRNZW51LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0NvbnRleHRNZW51TWFwLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1NlbGVjdFNvbm90YUJveC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TZWxlY3RTb25vdGFCb3hNYXAuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU2VsZWN0R3JvdXBCb3guanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU2VsZWN0R3JvdXBCb3hNYXAuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvSGFuZGxlRC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9IYW5kbGVETWFwLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0hhbmRsZVIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvSGFuZGxlUk1hcC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9IYW5kbGVMLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0hhbmRsZUxNYXAuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvSGFuZGxlVS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9IYW5kbGVVTWFwLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1NlbGVjdEVkaXRCb3guanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU2VsZWN0RWRpdEJveE1hcC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TZWxlY3RCb3hzLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1NlbGVjdEJveHNNYXAuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvTGluZXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvTGluZXNNYXAuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvSW1hZ2VCb3guanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvSW1hZ2VCb3hNYXAuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvVGV4dEJveC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9UZXh0Qm94TWFwLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0JveHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvQm94c01hcC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9HcmlkLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1N2Z0ltYWdlLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1N2Z0ltYWdlTWFwLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1ZpZXdCb3guanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvVmlld0JveE1hcC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2NyZWVucy9Ub3BTY3JlZW4uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NjcmVlbnMvVG9wU2NyZWVuTWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC1sb2dnZXIvZGlzdC9yZWR1eC1sb2dnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vaGFybW9ueS1tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NjcmVlbnMvQmFzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZXBsYWNlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2NvcmUucmVnZXhwLmVzY2FwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9yZWdleHAvZXNjYXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmltbWVkaWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi50aW1lcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5hc2FwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QubWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5oYXMtb3duLW1ldGFkYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuaGFzLW1ldGFkYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YS1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1tZXRhZGF0YS1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZGVsZXRlLW1ldGFkYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZGVmaW5lLW1ldGFkYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnByb21pc2UudHJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnByb21pc2UuZmluYWxseS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLnNpZ25iaXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC51bXVsaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLnNjYWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGgucmFkaWFucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLnJhZC1wZXItZGVnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguaW11bGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5pc3ViaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmlhZGRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguZnNjYWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguZGVncmVlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmRlZy1wZXItcmFkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguY2xhbXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuZXJyb3IuaXMtZXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3lzdGVtLmdsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcud2Vhay1zZXQuZnJvbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy53ZWFrLW1hcC5mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnNldC5mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hcC5mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LndlYWstc2V0Lm9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LndlYWstbWFwLm9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnNldC5vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXAub2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc2V0LnRvLWpzb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWFwLnRvLWpzb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0Lmxvb2t1cC1zZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0Lmxvb2t1cC1nZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmRlZmluZS1zZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmRlZmluZS1nZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmVudHJpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LnZhbHVlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLm1hdGNoLWFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1yaWdodC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1sZWZ0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtZW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtc3RhcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLmF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmFycmF5LmZsYXR0ZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuZmxhdC1tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5zZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QucHJldmVudC1leHRlbnNpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Qub3duLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5pcy1leHRlbnNpYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuaGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmVudW1lcmF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlbGV0ZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmNvbnN0cnVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmFwcGx5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0NjQtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZmxvYXQzMi1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50MzItYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50MzItYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDE2LWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmludDE2LWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWNsYW1wZWQtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDgtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50OC1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5kYXRhLXZpZXcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuYXJyYXktYnVmZmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LndlYWstc2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnByb21pc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnNwbGl0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5zZWFyY2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnJlcGxhY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLm1hdGNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNwZWNpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmluZC1pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuY29weS13aXRoaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkubGFzdC1pbmRleC1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pbmRleC1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UtcmlnaHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmV2ZXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNvbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmlsdGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lm1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZvci1lYWNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc2xpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuam9pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmlzLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RhdGUtdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RhdGUtdG8taXNvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLWlzby1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1qc29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUubm93LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN1Yi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3RyaWtlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zbWFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcubGluay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuaXRhbGljcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udHNpemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRjb2xvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZml4ZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJvbGQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJsaW5rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5iaWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmFuY2hvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3RhcnRzLXdpdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnJlcGVhdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmVuZHMtd2l0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuY29kZS1wb2ludC1hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnRyaW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnJhdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZnJvbS1jb2RlLXBvaW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgudHJ1bmMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC50YW5oLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguc2luaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnNpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5sb2cyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgubG9nMXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5sb2cxMC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmltdWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5oeXBvdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmZyb3VuZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmV4cG0xLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY29zaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmNsejMyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY2JydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmF0YW5oLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYXNpbmguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hY29zaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtaW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1mbG9hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIubWluLXNhZmUtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIubWF4LXNhZmUtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtc2FmZS1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1uYW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLWZpbml0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuZXBzaWxvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIudG8tcHJlY2lzaW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci50by1maXhlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucGFyc2UtZmxvYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucGFyc2UtaW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmhhcy1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5uYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmJpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zYW1lLXZhbHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuYXNzaWduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1leHRlbnNpYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1zZWFsZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLWZyb3plbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QucHJldmVudC1leHRlbnNpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5zZWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5mcmVlemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktbmFtZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2VudW0ta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvc2hpbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9pc05vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2lzVGV4dE5vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2NvbnRhaW5zTm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvc2hhbGxvd0VxdWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9nZXRBY3RpdmVFbGVtZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL3NyYy9hcHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZnJlZUdsb2JhbC5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJ2YWx1ZSIsIm4iLCJfX2VzTW9kdWxlIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsImNsb25lYWJsZUdlbmVyYXRvciIsIl9leHRlbmRzIiwiYXNzaWduIiwidGFyZ2V0IiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwia2V5IiwiX3R5cGVvZiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwib2JqIiwiY29uc3RydWN0b3IiLCJzeW0iLCJpZCIsIlRBU0siLCJIRUxQRVIiLCJNQVRDSCIsIkNBTkNFTCIsIlNBR0FfQUNUSU9OIiwiU0VMRl9DQU5DRUxMQVRJT04iLCJrb25zdCIsInYiLCJrVHJ1ZSIsIm5vb3AiLCJpZGVudCIsImNoZWNrIiwicHJlZGljYXRlIiwiZXJyb3IiLCJsb2ciLCJFcnJvciIsImhhc093biIsImlzIiwibm90VW5kZWYiLCJ1bmRlZiIsInVuZGVmaW5lZCIsImZ1bmMiLCJmIiwibnVtYmVyIiwic3RyaW5nIiwiYXJyYXkiLCJBcnJheSIsImlzQXJyYXkiLCJwcm9taXNlIiwidGhlbiIsIml0IiwibmV4dCIsInRocm93IiwiaXRlcmFibGUiLCJ0YXNrIiwidCIsIm9ic2VydmFibGUiLCJvYiIsInN1YnNjcmliZSIsImJ1ZmZlciIsImJ1ZiIsImlzRW1wdHkiLCJ0YWtlIiwicHV0IiwicGF0dGVybiIsInBhdCIsImNoYW5uZWwiLCJjaCIsImNsb3NlIiwiaGVscGVyIiwic3RyaW5nYWJsZUZ1bmMiLCJyZW1vdmUiLCJpdGVtIiwiaW5kZXgiLCJpbmRleE9mIiwic3BsaWNlIiwiZnJvbSIsImFyciIsImRlZmVycmVkIiwicHJvcHMiLCJkZWYiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImFycmF5T2ZEZWZmZXJlZCIsInB1c2giLCJkZWxheSIsIm1zIiwidmFsIiwidGltZW91dElkIiwic2V0VGltZW91dCIsImNsZWFyVGltZW91dCIsImNyZWF0ZU1vY2tUYXNrIiwiX3JlZiIsInJ1bm5pbmciLCJfcmVzdWx0IiwiX2Vycm9yIiwiaXNSdW5uaW5nIiwicmVzdWx0Iiwic2V0UnVubmluZyIsImIiLCJzZXRSZXN1bHQiLCJzZXRFcnJvciIsImUiLCJ1aWQiLCJzZWVkIiwiYXV0b0luYyIsImtUaHJvdyIsImVyciIsImtSZXR1cm4iLCJkb25lIiwibWFrZUl0ZXJhdG9yIiwidGhybyIsImlzSGVscGVyIiwicmV0dXJuIiwibGV2ZWwiLCJtZXNzYWdlIiwid2luZG93IiwiY29uc29sZSIsInN0YWNrIiwiZGVwcmVjYXRlIiwiZm4iLCJkZXByZWNhdGlvbldhcm5pbmciLCJhcHBseSIsInVwZGF0ZUluY2VudGl2ZSIsImRlcHJlY2F0ZWQiLCJwcmVmZXJyZWQiLCJpbnRlcm5hbEVyciIsImNyZWF0ZVNldENvbnRleHRXYXJuaW5nIiwiY3R4Iiwid3JhcFNhZ2FEaXNwYXRjaCIsImRpc3BhdGNoIiwiYWN0aW9uIiwiZ2VuZXJhdG9yRnVuYyIsIl9sZW4iLCJhcmdzIiwiX2tleSIsImhpc3RvcnkiLCJnZW4iLCJhcmciLCJjbG9uZSIsImNsb25lZEdlbiIsImZvckVhY2giLCJleGNlcHRpb24iLCJnbG9iYWwiLCJjb3JlIiwiaGlkZSIsInJlZGVmaW5lIiwiJGV4cG9ydCIsInR5cGUiLCJvd24iLCJvdXQiLCJleHAiLCJJU19GT1JDRUQiLCJGIiwiSVNfR0xPQkFMIiwiRyIsIklTX1NUQVRJQyIsIlMiLCJJU19QUk9UTyIsIlAiLCJJU19CSU5EIiwiQiIsImV4cFByb3RvIiwiRnVuY3Rpb24iLCJVIiwiVyIsIlIiLCJJTyIsIl91dGlsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiVEFLRSIsIlBVVCIsIkFMTCIsIlJBQ0UiLCJDQUxMIiwiQ1BTIiwiRk9SSyIsIkpPSU4iLCJTRUxFQ1QiLCJBQ1RJT05fQ0hBTk5FTCIsIkNBTkNFTExFRCIsIkZMVVNIIiwiR0VUX0NPTlRFWFQiLCJTRVRfQ09OVEVYVCIsIlRFU1RfSElOVCIsImVmZmVjdCIsInBheWxvYWQiLCJkZXRhY2giLCJlZmYiLCJhc0VmZmVjdCIsImZvcmsiLCJkZXRhY2hlZCIsInBhdHRlcm5PckNoYW5uZWwiLCJTdHJpbmciLCJtYXliZSIsInRha2VtIiwiYWxsIiwiZWZmZWN0cyIsInJhY2UiLCJnZXRGbkNhbGxEZXNjIiwibWV0aCIsImNvbnRleHQiLCJfZm4iLCJfZm4yIiwiY3BzIiwiX2xlbjIiLCJfa2V5MiIsIl9sZW4zIiwiX2tleTMiLCJzcGF3biIsIl9sZW40IiwiX2tleTQiLCJjb25jYXQiLCJqb2luIiwiX2xlbjUiLCJ0YXNrcyIsIl9rZXk1IiwibWFwIiwiY2FuY2VsIiwiX2xlbjYiLCJfa2V5NiIsInNlbGVjdCIsInNlbGVjdG9yIiwiX2xlbjciLCJfa2V5NyIsImFjdGlvbkNoYW5uZWwiLCJjYW5jZWxsZWQiLCJmbHVzaCIsImdldENvbnRleHQiLCJwcm9wIiwic2V0Q29udGV4dCIsInRha2VFdmVyeSIsIndvcmtlciIsIl9sZW44IiwiX2tleTgiLCJfc2FnYUhlbHBlcnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsInRha2VMYXRlc3QiLCJfbGVuOSIsIl9rZXk5IiwidGhyb3R0bGUiLCJfbGVuMTAiLCJfa2V5MTAiLCJzeW5jIiwiY3JlYXRlQXNFZmZlY3RUeXBlIiwiaXNPYmplY3QiLCJUeXBlRXJyb3IiLCJNYXRoIiwic2VsZiIsIl9fZyIsImV4ZWMiLCJzdG9yZSIsIlVTRV9TWU1CT0wiLCJzdWJzY3JpcHRpb25TaGFwZSIsInByb3BfdHlwZXNfZGVmYXVsdCIsImEiLCJzaGFwZSIsInRyeVN1YnNjcmliZSIsImlzUmVxdWlyZWQiLCJ0cnlVbnN1YnNjcmliZSIsIm5vdGlmeU5lc3RlZFN1YnMiLCJpc1N1YnNjcmliZWQiLCJzdG9yZVNoYXBlIiwiZ2V0U3RhdGUiLCJjcmVhdGVQcm92aWRlciIsIl9Qcm92aWRlciRjaGlsZENvbnRleCIsInN0b3JlS2V5Iiwic3Vic2NyaXB0aW9uS2V5IiwiUHJvdmlkZXIiLCJfQ29tcG9uZW50IiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIl9jbGFzc0NhbGxDaGVjayIsInRoaXMiLCJfdGhpcyIsIlJlZmVyZW5jZUVycm9yIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJ3cml0YWJsZSIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiX2luaGVyaXRzIiwiZ2V0Q2hpbGRDb250ZXh0IiwicmVuZGVyIiwicmVhY3QiLCJvbmx5IiwiY2hpbGRyZW4iLCJwcm9wVHlwZXMiLCJlbGVtZW50IiwiY2hpbGRDb250ZXh0VHlwZXMiLCJjb21wb25lbnRzX1Byb3ZpZGVyIiwiQ0xFQVJFRCIsIm51bGxMaXN0ZW5lcnMiLCJub3RpZnkiLCJTdWJzY3JpcHRpb24iLCJwYXJlbnRTdWIiLCJvblN0YXRlQ2hhbmdlIiwiU3Vic2NyaXB0aW9uX2NsYXNzQ2FsbENoZWNrIiwidW5zdWJzY3JpYmUiLCJsaXN0ZW5lcnMiLCJhZGROZXN0ZWRTdWIiLCJsaXN0ZW5lciIsIkJvb2xlYW4iLCJjdXJyZW50IiwiY2xlYXIiLCJzbGljZSIsImhvdFJlbG9hZGluZ1ZlcnNpb24iLCJkdW1teVN0YXRlIiwiY29ubmVjdEFkdmFuY2VkIiwic2VsZWN0b3JGYWN0b3J5IiwiX2NvbnRleHRUeXBlcyIsIl9jaGlsZENvbnRleHRUeXBlcyIsIl9yZWYkZ2V0RGlzcGxheU5hbWUiLCJnZXREaXNwbGF5TmFtZSIsIl9yZWYkbWV0aG9kTmFtZSIsIm1ldGhvZE5hbWUiLCJfcmVmJHJlbmRlckNvdW50UHJvcCIsInJlbmRlckNvdW50UHJvcCIsIl9yZWYkc2hvdWxkSGFuZGxlU3RhdCIsInNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyIsIl9yZWYkc3RvcmVLZXkiLCJfcmVmJHdpdGhSZWYiLCJ3aXRoUmVmIiwiY29ubmVjdE9wdGlvbnMiLCJrZXlzIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwidmVyc2lvbiIsImNvbnRleHRUeXBlcyIsIldyYXBwZWRDb21wb25lbnQiLCJicm93c2VyX2RlZmF1bHQiLCJKU09OIiwic3RyaW5naWZ5Iiwid3JhcHBlZENvbXBvbmVudE5hbWUiLCJkaXNwbGF5TmFtZSIsInNlbGVjdG9yRmFjdG9yeU9wdGlvbnMiLCJDb25uZWN0IiwiY29ubmVjdEFkdmFuY2VkX2NsYXNzQ2FsbENoZWNrIiwiY29ubmVjdEFkdmFuY2VkX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJzdGF0ZSIsInJlbmRlckNvdW50IiwicHJvcHNNb2RlIiwic2V0V3JhcHBlZEluc3RhbmNlIiwiYmluZCIsImluaXRTZWxlY3RvciIsImluaXRTdWJzY3JpcHRpb24iLCJjb25uZWN0QWR2YW5jZWRfaW5oZXJpdHMiLCJfcmVmMiIsInN1YnNjcmlwdGlvbiIsImNvbXBvbmVudERpZE1vdW50IiwicnVuIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiZm9yY2VVcGRhdGUiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwibmV4dFByb3BzIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJnZXRXcmFwcGVkSW5zdGFuY2UiLCJ3cmFwcGVkSW5zdGFuY2UiLCJyZWYiLCJzb3VyY2VTZWxlY3RvciIsIm1ha2VTZWxlY3RvclN0YXRlZnVsIiwiY29tcG9uZW50RGlkVXBkYXRlIiwibm90aWZ5TmVzdGVkU3Vic09uQ29tcG9uZW50RGlkVXBkYXRlIiwic2V0U3RhdGUiLCJhZGRFeHRyYVByb3BzIiwid2l0aEV4dHJhcyIsImhvaXN0X25vbl9yZWFjdF9zdGF0aWNzX2RlZmF1bHQiLCJ4IiwieSIsInNoYWxsb3dFcXVhbCIsIm9iakEiLCJvYmpCIiwia2V5c0EiLCJrZXlzQiIsImZyZWVTZWxmIiwiX1N5bWJvbCIsIl9mcmVlR2xvYmFsIiwib2JqZWN0UHJvdG8iLCJ0b1N0cmluZyIsInRvU3RyaW5nVGFnIiwiZ2V0UHJvdG90eXBlT2YiLCJmdW5jUHJvdG8iLCJpc1BsYWluT2JqZWN0X29iamVjdFByb3RvIiwiZnVuY1RvU3RyaW5nIiwid3JhcE1hcFRvUHJvcHNDb25zdGFudCIsImdldENvbnN0YW50Iiwib3B0aW9ucyIsImNvbnN0YW50IiwiY29uc3RhbnRTZWxlY3RvciIsImRlcGVuZHNPbk93blByb3BzIiwiZ2V0RGVwZW5kc09uT3duUHJvcHMiLCJtYXBUb1Byb3BzIiwid3JhcE1hcFRvUHJvcHNGdW5jIiwicHJveHkiLCJzdGF0ZU9yRGlzcGF0Y2giLCJvd25Qcm9wcyIsImNvbm5lY3RfbWFwRGlzcGF0Y2hUb1Byb3BzIiwibWFwRGlzcGF0Y2hUb1Byb3BzIiwicmVkdXgiLCJjb25uZWN0X21hcFN0YXRlVG9Qcm9wcyIsIm1hcFN0YXRlVG9Qcm9wcyIsIm1lcmdlUHJvcHNfZXh0ZW5kcyIsImRlZmF1bHRNZXJnZVByb3BzIiwic3RhdGVQcm9wcyIsImRpc3BhdGNoUHJvcHMiLCJjb25uZWN0X21lcmdlUHJvcHMiLCJtZXJnZVByb3BzIiwicHVyZSIsImFyZU1lcmdlZFByb3BzRXF1YWwiLCJoYXNSdW5PbmNlIiwibWVyZ2VkUHJvcHMiLCJuZXh0TWVyZ2VkUHJvcHMiLCJ3cmFwTWVyZ2VQcm9wc0Z1bmMiLCJpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IiwicHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkiLCJhcmVTdGF0ZXNFcXVhbCIsImFyZU93blByb3BzRXF1YWwiLCJhcmVTdGF0ZVByb3BzRXF1YWwiLCJoYXNSdW5BdExlYXN0T25jZSIsImhhbmRsZVN1YnNlcXVlbnRDYWxscyIsIm5leHRTdGF0ZSIsIm5leHRPd25Qcm9wcyIsIm5leHRTdGF0ZVByb3BzIiwic3RhdGVQcm9wc0NoYW5nZWQiLCJwcm9wc0NoYW5nZWQiLCJzdGF0ZUNoYW5nZWQiLCJmaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IiwiaW5pdE1hcFN0YXRlVG9Qcm9wcyIsImluaXRNYXBEaXNwYXRjaFRvUHJvcHMiLCJpbml0TWVyZ2VQcm9wcyIsInNlbGVjdG9yRmFjdG9yeV9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsImNvbm5lY3RfZXh0ZW5kcyIsIm1hdGNoIiwiZmFjdG9yaWVzIiwic3RyaWN0RXF1YWwiLCJjb25uZWN0X2Nvbm5lY3QiLCJfcmVmJGNvbm5lY3RIT0MiLCJjb25uZWN0SE9DIiwiX3JlZiRtYXBTdGF0ZVRvUHJvcHNGIiwibWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzIiwiX3JlZiRtYXBEaXNwYXRjaFRvUHJvIiwibWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzIiwiX3JlZiRtZXJnZVByb3BzRmFjdG9yIiwibWVyZ2VQcm9wc0ZhY3RvcmllcyIsIl9yZWYkc2VsZWN0b3JGYWN0b3J5IiwiX3JlZjIkcHVyZSIsIl9yZWYyJGFyZVN0YXRlc0VxdWFsIiwiX3JlZjIkYXJlT3duUHJvcHNFcXVhIiwiX3JlZjIkYXJlU3RhdGVQcm9wc0VxIiwiX3JlZjIkYXJlTWVyZ2VkUHJvcHNFIiwiZXh0cmFPcHRpb25zIiwiY29ubmVjdF9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsIkRlZmluZSIsInN2Z2ltYWdlc2l6ZSIsIndpZHRoIiwiaGVpZ2h0IiwiZ3JpZCIsImhhbmRsZSIsIkZvbnQiLCJmb250ZmFjZSIsImZvbnQiLCJQcmVzZW5Cb3giLCJBIiwiYm94X2lkIiwiZ3JvdXBfaWQiLCJncm91cF9ubyIsIngxIiwieTEiLCJ4MiIsInkyIiwidGV4dCIsImt1bWlob2tvIiwicGFkZGluZ19qcyIsInBhZGRpbmdfamUiLCJwYWRkaW5nX2dzIiwicGFkZGluZ19nZSIsInNpemVfaiIsInNpemVfZyIsImd5b2thbiIsImFmdXJlIiwiaW1hZ2UiLCJ1cmwiLCJ0ZXh0Z3JpZCIsInRleHRSZXN1bHQiLCJubyIsIlByZXNlblNvemFpIiwic296YWlfaWQiLCJtb2ppT2JqQXJ5IiwiaW1hZ2VVcmwiLCJQcmVzZW5MaW5lIiwiY29sb3IiLCJQcmVzZW5MaW5rIiwidG9JbnRlZ2VyIiwibWluIiwiYW5PYmplY3QiLCJJRThfRE9NX0RFRklORSIsInRvUHJpbWl0aXZlIiwiZFAiLCJPIiwiQXR0cmlidXRlcyIsIlphaHlvIiwid2luZG93QXJlYSIsInciLCJkb2N1bWVudCIsImRvY3VtZW50RWxlbWVudCIsImNsaWVudFdpZHRoIiwiaCIsImNsaWVudEhlaWdodCIsImx1VG9ydVgiLCJrdyIsImx1VG9ydVkiLCJraCIsInJ1VG9sdVgiLCJydVRvbHVZIiwiY2hhbmdlUmVjdFRvQXJlYSIsInJlY3QiLCJjaGFuZ2VBcmVhVG9SZWN0IiwibHVUb3J1UmVjdCIsInJ1VG9sdVJlY3QiLCJsdVRvcnVBcmVhIiwiYXJlYSIsInJ1VG9sdUFyZWEiLCJsdVRvcnVSZWN0VG9BcmVhIiwicnVUb2x1UmVjdFRvQXJlYSIsImx1VG9ydUFyZWFUb1JlY3QiLCJydVRvbHVBcmVhVG9SZWN0IiwiaXNJbkJveCIsImJveF94MSIsImJveF95MSIsImJveF94MiIsImJveF95MiIsIkN1cnNvciIsImN1clBhZ2VLaXRlbiIsInBhZ2VYIiwicGFnZVkiLCJjdXJQYWdlU2Nyb2xsS2l0ZW4iLCJwYWdlWE9mZnNldCIsInBhZ2VZT2Zmc2V0IiwiZWxlbVBhZ2VLaXRlbiIsImVsZW0iLCJlbSIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImxlZnQiLCJ0b3AiLCJlbGVtUGFnZVNjcm9sbEtpdGVuIiwic3giLCJzeSIsIl9DdXJzb3IkZWxlbVBhZ2VLaXRlbiIsIl9DdXJzb3IkZWxlbVBhZ2VLaXRlbjIiLCJfc2xpY2VkVG9BcnJheSIsImN1ckVsZW1LaXRlbiIsIl9DdXJzb3IkZWxlbVBhZ2VTY3JvbCIsIl9DdXJzb3IkZWxlbVBhZ2VTY3JvbDIiLCJlbXgiLCJlbXkiLCJfQ3Vyc29yJGN1clBhZ2VTY3JvbGwiLCJfQ3Vyc29yJGN1clBhZ2VTY3JvbGwyIiwiY3VyRWxlbVNjcm9sbEtpdGVuIiwiX0N1cnNvciRlbGVtUGFnZVNjcm9sMyIsIl9DdXJzb3IkZWxlbVBhZ2VTY3JvbDQiLCJfQ3Vyc29yJGN1clBhZ2VTY3JvbGwzIiwiX0N1cnNvciRjdXJQYWdlU2Nyb2xsNCIsImN4IiwiY3kiLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsVG9wIiwiY3VyRWxlbVNjYWxlU2Nyb2xsS2l0ZW4iLCJzY2FsZSIsIl9DdXJzb3IkZWxlbVBhZ2VTY3JvbDUiLCJfQ3Vyc29yJGVsZW1QYWdlU2Nyb2w2IiwiX0N1cnNvciRjdXJQYWdlU2Nyb2xsNSIsIl9DdXJzb3IkY3VyUGFnZVNjcm9sbDYiLCJHcmlkIiwic25hcCIsImFyZWFfdyIsImFyZWFfaCIsImdyaWRfdyIsImdyaWRfaCIsInJ1X3giLCJydV95IiwiYW1hcmkiLCJzaG8iLCJmbG9vciIsImFyZWFtYXhfeCIsImFyZWFtYXhfeSIsImNoYW5nZUluQXJlYSIsIl9HcmlkJHNuYXAiLCJfR3JpZCRzbmFwMiIsIl9HcmlkJHNuYXAzIiwiX0dyaWQkc25hcDQiLCJkZWZpbmVkIiwiX3NjaGVkdWxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fIiwiRU5EIiwiaXNFbmQiLCJlbWl0dGVyIiwic3Vic2NyaWJlcnMiLCJzdWIiLCJlbWl0IiwibGVuIiwiSU5WQUxJRF9CVUZGRVIiLCJVTkRFRklORURfSU5QVVRfRVJST1IiLCJfYnVmZmVyc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwiZml4ZWQiLCJjbG9zZWQiLCJ0YWtlcnMiLCJjaGVja0ZvcmJpZGRlblN0YXRlcyIsImNiIiwiaW5wdXQiLCJfX3Rha2Vyc19fIiwiX19jbG9zZWRfXyIsImV2ZW50Q2hhbm5lbCIsIm5vbmUiLCJtYXRjaGVyIiwiY2hhbiIsInN0ZENoYW5uZWwiLCJmYWlscyIsInF1b3QiLCJjcmVhdGVIVE1MIiwidGFnIiwiYXR0cmlidXRlIiwicDEiLCJyZXBsYWNlIiwiTkFNRSIsInRlc3QiLCJ0b0xvd2VyQ2FzZSIsInNwbGl0IiwiaGFzIiwiU1JDIiwiJHRvU3RyaW5nIiwiVFBMIiwiaW5zcGVjdFNvdXJjZSIsInNhZmUiLCJpc0Z1bmN0aW9uIiwiY3JlYXRlRGVzYyIsInRvT2JqZWN0IiwiSUVfUFJPVE8iLCJPYmplY3RQcm90byIsInBJRSIsInRvSU9iamVjdCIsImdPUEQiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJJT2JqZWN0IiwibWV0aG9kIiwiYUZ1bmN0aW9uIiwidGhhdCIsIl9fZSIsInRvTGVuZ3RoIiwiYXNjIiwiVFlQRSIsIiRjcmVhdGUiLCJJU19NQVAiLCJJU19GSUxURVIiLCJJU19TT01FIiwiSVNfRVZFUlkiLCJJU19GSU5EX0lOREVYIiwiTk9fSE9MRVMiLCIkdGhpcyIsImNhbGxiYWNrZm4iLCJyZXMiLCJLRVkiLCJjZWlsIiwiaXNOYU4iLCJ2YWx1ZU9mIiwiX2FycmF5IiwiQm94IiwiZ2V0Qm94IiwiYm94cyIsImJveCIsImdldEdyb3VwQW5kTm8iLCJnZXRHcm91cEFyeSIsImFyeSIsIkxpYkFycmF5Iiwic2V0QXJyYXlVbmlxdWUiLCJzb3J0IiwiZ2V0R3JvdXBOb0FyeSIsImdldEJveElkIiwiZ2V0TGlua0dyb3VwIiwibGlua3MiLCJnZXROZXdCb3hJZCIsImdldE5ld0dyb3VwSWQiLCJudW0iLCJudW1UbzAwMCIsIm51bXN0ciIsImlzU2FtZUJveFR5cGVBbmRTb3phaVR5cGUiLCJib3hfdHlwZSIsInNvemFpX3R5cGUiLCJNYXAiLCJzaGFyZWQiLCJnZXRPckNyZWF0ZU1ldGFkYXRhTWFwIiwidGFyZ2V0S2V5IiwidGFyZ2V0TWV0YWRhdGEiLCJzZXQiLCJrZXlNZXRhZGF0YSIsIk1ldGFkYXRhS2V5IiwibWV0YWRhdGFNYXAiLCJNZXRhZGF0YVZhbHVlIiwiXyIsIkxJQlJBUlkiLCIkdHlwZWQiLCIkYnVmZmVyIiwiYW5JbnN0YW5jZSIsInByb3BlcnR5RGVzYyIsInJlZGVmaW5lQWxsIiwidG9JbmRleCIsInRvQWJzb2x1dGVJbmRleCIsImNsYXNzb2YiLCJpc0FycmF5SXRlciIsImdPUE4iLCJnZXRJdGVyRm4iLCJ3a3MiLCJjcmVhdGVBcnJheU1ldGhvZCIsImNyZWF0ZUFycmF5SW5jbHVkZXMiLCJzcGVjaWVzQ29uc3RydWN0b3IiLCJBcnJheUl0ZXJhdG9ycyIsIkl0ZXJhdG9ycyIsIiRpdGVyRGV0ZWN0Iiwic2V0U3BlY2llcyIsImFycmF5RmlsbCIsImFycmF5Q29weVdpdGhpbiIsIiREUCIsIiRHT1BEIiwiUmFuZ2VFcnJvciIsIlVpbnQ4QXJyYXkiLCJBcnJheVByb3RvIiwiJEFycmF5QnVmZmVyIiwiQXJyYXlCdWZmZXIiLCIkRGF0YVZpZXciLCJEYXRhVmlldyIsImFycmF5Rm9yRWFjaCIsImFycmF5RmlsdGVyIiwiYXJyYXlTb21lIiwiYXJyYXlFdmVyeSIsImFycmF5RmluZCIsImFycmF5RmluZEluZGV4IiwiYXJyYXlJbmNsdWRlcyIsImFycmF5SW5kZXhPZiIsImFycmF5VmFsdWVzIiwidmFsdWVzIiwiYXJyYXlLZXlzIiwiYXJyYXlFbnRyaWVzIiwiZW50cmllcyIsImFycmF5TGFzdEluZGV4T2YiLCJsYXN0SW5kZXhPZiIsImFycmF5UmVkdWNlIiwicmVkdWNlIiwiYXJyYXlSZWR1Y2VSaWdodCIsInJlZHVjZVJpZ2h0IiwiYXJyYXlKb2luIiwiYXJyYXlTb3J0IiwiYXJyYXlTbGljZSIsImFycmF5VG9TdHJpbmciLCJhcnJheVRvTG9jYWxlU3RyaW5nIiwidG9Mb2NhbGVTdHJpbmciLCJJVEVSQVRPUiIsIlRBRyIsIlRZUEVEX0NPTlNUUlVDVE9SIiwiREVGX0NPTlNUUlVDVE9SIiwiQUxMX0NPTlNUUlVDVE9SUyIsIkNPTlNUUiIsIlRZUEVEX0FSUkFZIiwiVFlQRUQiLCJWSUVXIiwiJG1hcCIsImFsbG9jYXRlIiwiTElUVExFX0VORElBTiIsIlVpbnQxNkFycmF5IiwiRk9SQ0VEX1NFVCIsInRvT2Zmc2V0IiwiQllURVMiLCJvZmZzZXQiLCJ2YWxpZGF0ZSIsIkMiLCJzcGVjaWVzRnJvbUxpc3QiLCJsaXN0IiwiZnJvbUxpc3QiLCJhZGRHZXR0ZXIiLCJpbnRlcm5hbCIsIl9kIiwiJGZyb20iLCJzdGVwIiwiYUxlbiIsIm1hcGZuIiwibWFwcGluZyIsIml0ZXJGbiIsIiRvZiIsIlRPX0xPQ0FMRV9CVUciLCIkdG9Mb2NhbGVTdHJpbmciLCJwcm90byIsImNvcHlXaXRoaW4iLCJzdGFydCIsImV2ZXJ5IiwiZmlsbCIsImZpbHRlciIsImZpbmQiLCJmaW5kSW5kZXgiLCJzZWFyY2hFbGVtZW50IiwiaW5jbHVkZXMiLCJzZXBhcmF0b3IiLCJyZXZlcnNlIiwibWlkZGxlIiwic29tZSIsImNvbXBhcmVmbiIsInN1YmFycmF5IiwiYmVnaW4iLCJlbmQiLCIkYmVnaW4iLCJieXRlT2Zmc2V0IiwiQllURVNfUEVSX0VMRU1FTlQiLCIkc2xpY2UiLCIkc2V0IiwiYXJyYXlMaWtlIiwic3JjIiwiJGl0ZXJhdG9ycyIsImlzVEFJbmRleCIsIiRnZXREZXNjIiwiJHNldERlc2MiLCJkZXNjIiwiJFR5cGVkQXJyYXlQcm90b3R5cGUkIiwid3JhcHBlciIsIkNMQU1QRUQiLCJHRVRURVIiLCJTRVRURVIiLCJUeXBlZEFycmF5IiwiQmFzZSIsIlRBQyIsIkZPUkNFRCIsIkFCViIsIlR5cGVkQXJyYXlQcm90b3R5cGUiLCJhZGRFbGVtZW50IiwiZGF0YSIsInJvdW5kIiwic2V0dGVyIiwiJG9mZnNldCIsIiRsZW5ndGgiLCJieXRlTGVuZ3RoIiwia2xhc3MiLCIkbGVuIiwiaXRlciIsIiRuYXRpdmVJdGVyYXRvciIsIkNPUlJFQ1RfSVRFUl9OQU1FIiwiJGl0ZXJhdG9yIiwib2YiLCJCVUZGRVJfT1ZFUkZMT1ciLCJPTl9PVkVSRkxPV19USFJPVyIsIk9OX09WRVJGTE9XX1NMSURFIiwiT05fT1ZFUkZMT1dfRVhQQU5EIiwiemVyb0J1ZmZlciIsInJpbmdCdWZmZXIiLCJsaW1pdCIsIm92ZXJmbG93QWN0aW9uIiwicHVzaEluZGV4IiwicG9wSW5kZXgiLCJpdGVtcyIsImRvdWJsZWRMaW1pdCIsImJ1ZmZlcnMiLCJkcm9wcGluZyIsInNsaWRpbmciLCJleHBhbmRpbmciLCJpbml0aWFsU2l6ZSIsIlVOU0NPUEFCTEVTIiwiTUVUQSIsInNldERlc2MiLCJpc0V4dGVuc2libGUiLCJGUkVFWkUiLCJwcmV2ZW50RXh0ZW5zaW9ucyIsInNldE1ldGEiLCJtZXRhIiwiTkVFRCIsImZhc3RLZXkiLCJnZXRXZWFrIiwib25GcmVlemUiLCJxRW5kIiwic2FmZU5hbWUiLCJ1dGlscyIsImVudHJ5IiwiZnNtSXRlcmF0b3IiLCJmc20iLCJxMCIsInVwZGF0ZVN0YXRlIiwicU5leHQiLCJfZnNtJHFOZXh0IiwicSIsIm91dHB1dCIsIl91cGRhdGVTdGF0ZSIsInlUYWtlIiwiaW8iLCJzZXRBY3Rpb24iLCJhYyIsInExIiwicTIiLCJpbnRlcm5hbF9jaGFubmVsIiwieUZvcmsiLCJzZXRUYXNrIiwieUNhbmNlbCIsInEzIiwiZGVsYXlMZW5ndGgiLCJ5QWN0aW9uQ2hhbm5lbCIsInlEZWxheSIsInNldENoYW5uZWwiLCJxNCIsImhlbHBlck5hbWUiLCJzYWdhSGVscGVyc190YWtlRXZlcnkiLCJzYWdhSGVscGVyc190YWtlTGF0ZXN0Iiwic2FnYUhlbHBlcnNfdGhyb3R0bGUiLCJTQUdBX0xBWU9VVF9DQUxMIiwiU0FHQV9TT1pBSV9DQUxMIiwiU0FHQV9MSU5LX0NBTEwiLCJTQUdBX0VESVRPTk9GRl9DSEFOR0UiLCJTYWdhX0xheW91dF9DYWxsIiwiU2FnYV9Tb3phaV9DYWxsIiwiU2FnYV9MaW5rX0NhbGwiLCJTYWdhX0VkaXRPbk9mZl9DaGFuZ2UiLCJvbm9mZiIsIkJSRUFLIiwiUkVUVVJOIiwiZm9yYmlkZGVuRmllbGQiLCJERVNDUklQVE9SUyIsIlNQRUNJRVMiLCIka2V5cyIsImhpZGRlbktleXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZFBzIiwiZW51bUJ1Z0tleXMiLCJFbXB0eSIsImNyZWF0ZURpY3QiLCJpZnJhbWVEb2N1bWVudCIsImlmcmFtZSIsInN0eWxlIiwiZGlzcGxheSIsImFwcGVuZENoaWxkIiwiY29udGVudFdpbmRvdyIsIm9wZW4iLCJ3cml0ZSIsImx0IiwiUHJvcGVydGllcyIsIm1heCIsInB4IiwicmFuZG9tIiwiYml0bWFwIiwiZGVmYXVsdCIsInJlZ2V4IiwiU1VfQ09OVEVYVE1FTlVfT1BFTiIsIlNVX0NPTlRFWFRNRU5VX0NMT1NFIiwiU1VfQ09OVEVYVE1FTlVfTkVXQk9YVEVYVCIsIlNVX0NPTlRFWFRNRU5VX05FV0JPWElNQUdFIiwiU1VfQ09OVEVYVE1FTlVfQ09QWUJPWFRFWFRPTkdST1VQIiwiU1VfQ09OVEVYVE1FTlVfQ09QWUJPWFRFWFQiLCJTVV9DT05URVhUTUVOVV9DT1BZQk9YSU1BR0UiLCJTVV9DT05URVhUTUVOVV9TT1pBSVVOTElOSyIsIlNVX0NPTlRFWFRNRU5VX0JPWFJFTU9WRSIsIlNVX0NPTlRFWFRNRU5VX0JPWFRPRlJPTlQiLCJTVV9DT05URVhUTUVOVV9CT1hUT0JBQ0siLCJTVV9Db250ZXh0TWVudV9PcGVuIiwiU1VfQ29udGV4dE1lbnVfQ2xvc2UiLCJTVV9Db250ZXh0TWVudV9OZXdCb3hUZXh0IiwiY3VyX3giLCJjdXJfeSIsIlNVX0NvbnRleHRNZW51X05ld0JveEltYWdlIiwiU1VfQ29udGV4dE1lbnVfQ29weUJveFRleHRPbkdyb3VwIiwiU1VfQ29udGV4dE1lbnVfQ29weUJveFRleHQiLCJTVV9Db250ZXh0TWVudV9Db3B5Qm94SW1hZ2UiLCJTVV9Db250ZXh0TWVudV9Tb3phaVVubGluayIsIlNVX0NvbnRleHRNZW51X0JveFJlbW92ZSIsIlNVX0NvbnRleHRNZW51X0JveFRvRnJvbnQiLCJTVV9Db250ZXh0TWVudV9Cb3hUb0JhY2siLCJfdCIsInNwYWNlcyIsInNwYWNlIiwibHRyaW0iLCJSZWdFeHAiLCJydHJpbSIsImV4cG9ydGVyIiwiQUxJQVMiLCJGT1JDRSIsInRyaW0iLCJzdGF0IiwiZyIsImV2YWwiLCJxdWV1ZSIsInNlbWFwaG9yZSIsInN1c3BlbmQiLCJyZWxlYXNlIiwiYXNhcCIsInNoaWZ0IiwiU0FHQV9OQUdBU0hJUkVTVUxUX0NSRUFURSIsIlNBR0FfTkFHQVNISV9JTUFHRSIsIlNBR0FfTkFHQVNISV9SRU1PVkUiLCJTQUdBX05BR0FTSElSRVNVTFRfQUZVUkUiLCJTYWdhX05hZ2FzaGlSZXN1bHRfQ3JlYXRlIiwibmFnYXNoaVJlc3VsdCIsIlNhZ2FfTmFnYXNoaV9JbWFnZSIsIlNhZ2FfTmFnYXNoaV9SZW1vdmUiLCJTYWdhX05hZ2FzaGlSZXN1bHRfQWZ1cmUiLCJTQUdBX1RPT0xCT1hTT1pBSV9TT1pBSV9VUERBVEUiLCJTQUdBX1RPT0xCT1hTT1pBSV9TT1pBSV9ERUxFVEUiLCJTQUdBX1RPT0xCT1hTT1pBSV9TT1pBSV9DUkVBVEUiLCJTQUdBX1RPT0xCT1hTT1pBSV9TT1pBSV9TRUxFQ1QiLCJTQUdBX1RPT0xCT1hTT1pBSV9TT1pBSV9UT0dHTEUiLCJTYWdhX1Rvb2xCb3hTb3phaV9Tb3phaV9VcGRhdGUiLCJzb3phaSIsIlNhZ2FfVG9vbEJveFNvemFpX1NvemFpX0RlbGV0ZSIsIlNhZ2FfVG9vbEJveFNvemFpX1NvemFpX0NyZWF0ZSIsIlNhZ2FfVG9vbEJveFNvemFpX1NvemFpX1NlbGVjdCIsIlNhZ2FfVG9vbEJveFNvemFpX1NvemFpX1RvZ2dsZSIsImNvZiIsIkFSRyIsIlQiLCJ0cnlHZXQiLCJjYWxsZWUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIm5hZ2FzaGlFeGVjIiwibmFnYXNoaUV4ZWNHcm91cCIsIm5hZ2FzaGlFeGVjQm94IiwibmFnYXNoaUV4ZWNTb3phaSIsIm5hZ2FzaGlFeGVjQWxsIiwiX2VmZmVjdHMiLCJfbmFnYXNoaSIsIl90ZXh0IiwiX2JveCIsIl9zb3phaSIsImdyb3VwX25vX2FyeSIsImZpcnN0X2JveF9pZCIsInNvemFpX3JlYyIsImxhc3ROYWdhc2hpRmxnIiwibW9qaV9pbmRleCIsImNlbnRlckFyeSIsImVuZF9pbmRleCIsInRhcmdldF9ib3hfaWQiLCJib3hfcmVjIiwiYXJlYXNpemVfaiIsImFyZWFzaXplX2ciLCJfVGV4dCRnZXROYWdhc2hpQ2VudGUiLCJfVGV4dCRnZXROYWdhc2hpQ2VudGUyIiwiX3BheWxvYWQiLCJfcGF5bG9hZDIiLCJyZWdlbmVyYXRvclJ1bnRpbWUiLCJ3cmFwIiwiX2NvbnRleHQiLCJwcmV2Iiwic2VudCIsIlNvemFpIiwiZ2V0U296YWkiLCJ0MCIsIlRleHQiLCJnZXROYWdhc2hpQ2VudGVyQXJ5IiwiYWJydXB0Iiwic3RvcCIsIl9tYXJrZWQiLCJfY29udGV4dDIiLCJfbWFya2VkMiIsIl9Cb3gkZ2V0R3JvdXBBbmRObyIsIl9Cb3gkZ2V0R3JvdXBBbmRObzIiLCJfY29udGV4dDMiLCJfbWFya2VkMyIsIl9jb250ZXh0NCIsIl9tYXJrZWQ0IiwiX2NvbnRleHQ1IiwiX21hcmtlZDUiLCJTQUdBX1RPT0xCT1hMSU5LX0xJTktfQ1JFQVRFIiwiU0FHQV9UT09MQk9YTElOS19MSU5LX0RFTEVURSIsIlNhZ2FfVG9vbEJveExpbmtfTGlua19DcmVhdGUiLCJTYWdhX1Rvb2xCb3hMaW5rX0xpbmtfRGVsZXRlIiwiU0FHQV9DT05URVhUTUVOVV9PUEVOIiwiU0FHQV9DT05URVhUTUVOVV9DTE9TRSIsIlNBR0FfQ09OVEVYVE1FTlVfTkVXQk9YVEVYVCIsIlNBR0FfQ09OVEVYVE1FTlVfTkVXQk9YSU1BR0UiLCJTQUdBX0NPTlRFWFRNRU5VX0JPWFRPRlJPTlQiLCJTQUdBX0NPTlRFWFRNRU5VX0JPWFRPQkFDSyIsIlNhZ2FfQ29udGV4dE1lbnVfT3BlbiIsIlNhZ2FfQ29udGV4dE1lbnVfQ2xvc2UiLCJTYWdhX0NvbnRleHRNZW51X05ld0JveFRleHQiLCJTYWdhX0NvbnRleHRNZW51X05ld0JveEltYWdlIiwiU2FnYV9Db250ZXh0TWVudV9Cb3hUb0Zyb250IiwiU2FnYV9Db250ZXh0TWVudV9Cb3hUb0JhY2siLCJTQUdBX1NFTEVDVEJPWF9CT1hfTk9OU0VMRUNUIiwiU0FHQV9TRUxFQ1RCT1hfQk9YX1NFTEVDVCIsIlNBR0FfU0VMRUNUQk9YX0VESVRCT1hfTU9WRUVORCIsIlNBR0FfU0VMRUNUQk9YX0VESVRCT1hfQ0hBTkdFU0laRSIsIlNhZ2FfU2VsZWN0Qm94X0JveF9Ob25TZWxlY3QiLCJTYWdhX1NlbGVjdEJveF9Cb3hfU2VsZWN0IiwiU2FnYV9TZWxlY3RCb3hfRWRpdEJveF9Nb3ZlRW5kIiwiU2FnYV9TZWxlY3RCb3hfRWRpdEJveF9DaGFuZ2VTaXplIiwiU1VfVE9PTEJPWExJTktfQ1JFQVRFQlVUVE9OX0NMSUNLIiwiU1VfVE9PTEJPWExJTktfREVMRVRFQlVUVE9OX0NMSUNLIiwiU1VfVG9vbEJveExpbmtfQ3JlYXRlQnV0dG9uX0NsaWNrIiwiU1VfVG9vbEJveExpbmtfRGVsZXRlQnV0dG9uX0NsaWNrIiwidG9OdW1lcmljIiwicGFyc2VJbnQiLCJTVV9TRUxFQ1RCT1hfQk9YX05PTlNFTEVDVCIsIlNVX1NFTEVDVEJPWF9CT1hfU0VMRUNUIiwiU1VfU0VMRUNUQk9YX0VESVRCT1hfTU9WRUVORCIsIlNVX1NFTEVDVEJPWF9FRElUQk9YX0NIQU5HRVNJWkUiLCJTVV9TRUxFQ1RCT1hfRURJVEJPWF9ERUxFVEVLRVlQUkVTUyIsIlNVX1NlbGVjdEJveF9Cb3hfTm9uU2VsZWN0IiwiU1VfU2VsZWN0Qm94X0JveF9TZWxlY3QiLCJTVV9TZWxlY3RCb3hfRWRpdEJveF9Nb3ZlRW5kIiwiU1VfU2VsZWN0Qm94X0VkaXRCb3hfQ2hhbmdlU2l6ZSIsIlNVX1NlbGVjdEJveF9FZGl0Qm94X0RlbGV0ZUtleVByZXNzIiwiZm9yT2YiLCJDT0xMRUNUSU9OIiwibWFwRm4iLCJuZXh0SXRlbSIsIksiLCJfX2RlZmluZVNldHRlcl9fIiwiVHlwZWQiLCJUeXBlZEFycmF5Q29uc3RydWN0b3JzIiwic2V0VG9TdHJpbmdUYWciLCJpbmhlcml0SWZSZXF1aXJlZCIsIm1ldGhvZHMiLCJjb21tb24iLCJJU19XRUFLIiwiQURERVIiLCJmaXhNZXRob2QiLCJIQVNOVF9DSEFJTklORyIsIlRIUk9XU19PTl9QUklNSVRJVkVTIiwiQUNDRVBUX0lURVJBQkxFUyIsIkJVR0dZX1pFUk8iLCIkaW5zdGFuY2UiLCJnZXRDb25zdHJ1Y3RvciIsInNldFN0cm9uZyIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsIkQiLCJTWU1CT0wiLCJmbnMiLCJzdHJmbiIsInJ4Zm4iLCJpZ25vcmVDYXNlIiwibXVsdGlsaW5lIiwidW5pY29kZSIsInN0aWNreSIsIlNBRkVfQ0xPU0lORyIsInJpdGVyIiwic2tpcENsb3NpbmciLCJpc1JlZ0V4cCIsImdldE93blByb3BlcnR5U3ltYm9scyIsIklTX0lOQ0xVREVTIiwiZWwiLCJmcm9tSW5kZXgiLCJtb2RlIiwiY29weXJpZ2h0IiwiY29uZGl0aW9uIiwiZm9ybWF0IiwiYXJnSW5kZXgiLCJmcmFtZXNUb1BvcCIsIlNBR0FfVE9PTEJPWEJPWERBVEFfQk9YREFUQV9VUERBVEUiLCJTQUdBX1RPT0xCT1hCT1hEQVRBX0JPWERBVEFfREVMRVRFIiwiU0FHQV9UT09MQk9YQk9YREFUQV9CT1hEQVRBX0NSRUFURSIsIlNhZ2FfVG9vbEJveEJveERhdGFfQm94RGF0YV9VcGRhdGUiLCJTYWdhX1Rvb2xCb3hCb3hEYXRhX0JveERhdGFfRGVsZXRlIiwiU2FnYV9Ub29sQm94Qm94RGF0YV9Cb3hEYXRhX0NyZWF0ZSIsIlNVX0RBTkREX01PVVNFRE9XTiIsIlNVX0RBTkREX01PVVNFVVAiLCJTVV9EQW5kRF9Nb3VzZURvd24iLCJTVV9EQW5kRF9Nb3VzZVVwIiwiU1VfVE9PTEJPWEJPWERBVEFfVVBEQVRFQlVUVE9OX0NMSUNLIiwiU1VfVE9PTEJPWEJPWERBVEFfREVMRVRFQlVUVE9OX0NMSUNLIiwiU1VfVE9PTEJPWEJPWERBVEFfQ1JFQVRFQlVUVE9OX0NMSUNLIiwiU1VfVG9vbEJveEJveERhdGFfVXBkYXRlQnV0dG9uX0NsaWNrIiwiU1VfVG9vbEJveEJveERhdGFfRGVsZXRlQnV0dG9uX0NsaWNrIiwiU1VfVG9vbEJveEJveERhdGFfQ3JlYXRlQnV0dG9uX0NsaWNrIiwiUFJPVE9UWVBFIiwiV1JPTkdfSU5ERVgiLCJJbmZpbml0eSIsIkJhc2VCdWZmZXIiLCJhYnMiLCJwb3ciLCJMTjIiLCIkQlVGRkVSIiwiJExFTkdUSCIsIiRPRkZTRVQiLCJwYWNrSUVFRTc1NCIsIm1MZW4iLCJuQnl0ZXMiLCJlTGVuIiwiZU1heCIsImVCaWFzIiwicnQiLCJ1bnBhY2tJRUVFNzU0IiwibkJpdHMiLCJOYU4iLCJ1bnBhY2tJMzIiLCJieXRlcyIsInBhY2tJOCIsInBhY2tJMTYiLCJwYWNrSTMyIiwicGFja0Y2NCIsInBhY2tGMzIiLCJ2aWV3IiwiaXNMaXR0bGVFbmRpYW4iLCJpbnRJbmRleCIsIl9iIiwicGFjayIsImNvbnZlcnNpb24iLCJBcnJheUJ1ZmZlclByb3RvIiwiaiIsIiRzZXRJbnQ4Iiwic2V0SW50OCIsImdldEludDgiLCJzZXRVaW50OCIsImJ1ZmZlckxlbmd0aCIsImdldFVpbnQ4IiwiZ2V0SW50MTYiLCJnZXRVaW50MTYiLCJnZXRJbnQzMiIsImdldFVpbnQzMiIsImdldEZsb2F0MzIiLCJnZXRGbG9hdDY0Iiwic2V0SW50MTYiLCJzZXRVaW50MTYiLCJzZXRJbnQzMiIsInNldFVpbnQzMiIsInNldEZsb2F0MzIiLCJzZXRGbG9hdDY0IiwiJCRyZXNvbHZlIiwiJCRyZWplY3QiLCJtYWNyb3Rhc2siLCJPYnNlcnZlciIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJXZWJLaXRNdXRhdGlvbk9ic2VydmVyIiwicHJvY2VzcyIsImlzTm9kZSIsImhlYWQiLCJsYXN0IiwicGFyZW50IiwiZG9tYWluIiwiZXhpdCIsImVudGVyIiwibmV4dFRpY2siLCJzdGFuZGFsb25lIiwidG9nZ2xlIiwibm9kZSIsImNyZWF0ZVRleHROb2RlIiwib2JzZXJ2ZSIsImNoYXJhY3RlckRhdGEiLCJkZWZlciIsInBvcnQiLCJpbnZva2UiLCJodG1sIiwiY2VsIiwic2V0SW1tZWRpYXRlIiwiY2xlYXJUYXNrIiwiY2xlYXJJbW1lZGlhdGUiLCJNZXNzYWdlQ2hhbm5lbCIsIkRpc3BhdGNoIiwiY291bnRlciIsImV2ZW50Iiwibm93IiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImltcG9ydFNjcmlwdHMiLCJyZW1vdmVDaGlsZCIsImFkZFRvVW5zY29wYWJsZXMiLCJpdGVyYXRlZCIsImtpbmQiLCJfaSIsIl9rIiwiQXJndW1lbnRzIiwiZW5kUG9zIiwib3JpZ2luYWwiLCJnZXRJdGVyYXRvck1ldGhvZCIsIiRkZWZpbmVQcm9wZXJ0eSIsInJlIiwic2VhcmNoU3RyaW5nIiwiZGVzY3JpcHRvciIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiJGl0ZXJDcmVhdGUiLCJCVUdHWSIsInJldHVyblRoaXMiLCJERUZBVUxUIiwiSVNfU0VUIiwiZ2V0TWV0aG9kIiwiREVGX1ZBTFVFUyIsIlZBTFVFU19CVUciLCIkbmF0aXZlIiwiJGRlZmF1bHQiLCIkZW50cmllcyIsIiRhbnlOYXRpdmUiLCJUT19TVFJJTkciLCJwb3MiLCJjaGFyQ29kZUF0IiwiY2hhckF0IiwiJGV4cG0xIiwiZXhwbTEiLCJzaWduIiwiY291bnQiLCJzdHIiLCJidWdneSIsIndrc0V4dCIsIiRTeW1ib2wiLCJjcmVhdGVFbGVtZW50IiwibWFrZUVtcHR5RnVuY3Rpb24iLCJlbXB0eUZ1bmN0aW9uIiwidGhhdFJldHVybnMiLCJ0aGF0UmV0dXJuc0ZhbHNlIiwidGhhdFJldHVybnNUcnVlIiwidGhhdFJldHVybnNOdWxsIiwidGhhdFJldHVybnNUaGlzIiwidGhhdFJldHVybnNBcmd1bWVudCIsInZhbGlkYXRlRm9ybWF0IiwicmF3QXNhcCIsImZyZWVUYXNrcyIsInBlbmRpbmdFcnJvcnMiLCJyZXF1ZXN0RXJyb3JUaHJvdyIsIm1ha2VSZXF1ZXN0Q2FsbEZyb21UaW1lciIsInJhd1Rhc2siLCJwb3AiLCJSYXdUYXNrIiwib25lcnJvciIsInByZWZpeE1hcCIsInBsdWdpbnMiLCJwcmVmaXhBbGwiLCJfaXNPYmplY3QyIiwiY29tYmluZWRWYWx1ZSIsInByb2Nlc3NlZFZhbHVlIiwiX3ByZWZpeFZhbHVlMiIsIl9hZGROZXdWYWx1ZXNPbmx5MiIsIl9wcm9jZXNzZWRWYWx1ZSIsIl9wcmVmaXhQcm9wZXJ0eTIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicHJvcGVydHlQcmVmaXhNYXAiLCJwcm9wZXJ0aWVzIiwib3V0cHV0VmFsdWUiLCJfaXNQcmVmaXhlZFZhbHVlMiIsIm11bHRpcGxlVmFsdWVzIiwic2luZ2xlVmFsdWUiLCJkYXNoQ2FzZVByb3BlcnR5IiwiX2h5cGhlbmF0ZVByb3BlcnR5MiIsInByZWZpeGVzIiwicExlbiIsInVuc2hpZnQiLCJwcmVmaXhNYXBwaW5nIiwicHJlZml4VmFsdWUiLCJ3ZWJraXRPdXRwdXQiLCJtb3pPdXRwdXQiLCJfY2FwaXRhbGl6ZVN0cmluZzIiLCJ0cmFuc2l0aW9uIiwidHJhbnNpdGlvblByb3BlcnR5IiwiV2Via2l0VHJhbnNpdGlvbiIsIldlYmtpdFRyYW5zaXRpb25Qcm9wZXJ0eSIsIk1velRyYW5zaXRpb24iLCJNb3pUcmFuc2l0aW9uUHJvcGVydHkiLCJXZWJraXQiLCJNb3oiLCJwcmVmaXgiLCJtYXhIZWlnaHQiLCJtYXhXaWR0aCIsImNvbHVtbldpZHRoIiwibWluV2lkdGgiLCJtaW5IZWlnaHQiLCJtaW4tY29udGVudCIsIm1heC1jb250ZW50IiwiZmlsbC1hdmFpbGFibGUiLCJmaXQtY29udGVudCIsImNvbnRhaW4tZmxvYXRzIiwiX2lzUHJlZml4ZWRWYWx1ZSIsImdyYWQiLCJXZWJraXRCb3hPcmllbnQiLCJXZWJraXRCb3hEaXJlY3Rpb24iLCJhbHRlcm5hdGl2ZVByb3BzIiwiYWx0ZXJuYXRpdmVWYWx1ZXMiLCJzcGFjZS1hcm91bmQiLCJzcGFjZS1iZXR3ZWVuIiwiZmxleC1zdGFydCIsImZsZXgtZW5kIiwid3JhcC1yZXZlcnNlIiwiZmxleCIsImlubGluZS1mbGV4IiwiYWxpZ25JdGVtcyIsImp1c3RpZnlDb250ZW50IiwiZmxleFdyYXAiLCJmbGV4R3JvdyIsImFsaWduQ29udGVudCIsImFsaWduU2VsZiIsIm9yZGVyIiwiZmxleFNocmluayIsImZsZXhCYXNpcyIsInpvb20taW4iLCJ6b29tLW91dCIsImdyYWIiLCJncmFiYmluZyIsImhhc2giLCJBY3Rpb25UeXBlcyIsIklOSVQiLCJzdWJzdHJpbmciLCJSRVBMQUNFIiwiaXNQbGFpbk9iamVjdCIsImNyZWF0ZVN0b3JlIiwicmVkdWNlciIsInByZWxvYWRlZFN0YXRlIiwiZW5oYW5jZXIiLCJjdXJyZW50UmVkdWNlciIsImN1cnJlbnRTdGF0ZSIsImN1cnJlbnRMaXN0ZW5lcnMiLCJuZXh0TGlzdGVuZXJzIiwiaXNEaXNwYXRjaGluZyIsImVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMiLCJyZXBsYWNlUmVkdWNlciIsIm5leHRSZWR1Y2VyIiwic3ltYm9sX29ic2VydmFibGVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsIm91dGVyU3Vic2NyaWJlIiwib2JzZXJ2ZXIiLCJvYnNlcnZlU3RhdGUiLCJnZXRVbmRlZmluZWRTdGF0ZUVycm9yTWVzc2FnZSIsImFjdGlvblR5cGUiLCJjb21iaW5lUmVkdWNlcnMiLCJyZWR1Y2VycyIsInJlZHVjZXJLZXlzIiwiZmluYWxSZWR1Y2VycyIsImZpbmFsUmVkdWNlcktleXMiLCJzaGFwZUFzc2VydGlvbkVycm9yIiwiYXNzZXJ0UmVkdWNlclNoYXBlIiwiaGFzQ2hhbmdlZCIsInByZXZpb3VzU3RhdGVGb3JLZXkiLCJuZXh0U3RhdGVGb3JLZXkiLCJlcnJvck1lc3NhZ2UiLCJiaW5kQWN0aW9uQ3JlYXRvciIsImFjdGlvbkNyZWF0b3IiLCJiaW5kQWN0aW9uQ3JlYXRvcnMiLCJhY3Rpb25DcmVhdG9ycyIsImJvdW5kQWN0aW9uQ3JlYXRvcnMiLCJjb21wb3NlIiwiZnVuY3MiLCJhcHBseU1pZGRsZXdhcmUiLCJtaWRkbGV3YXJlcyIsIl9kaXNwYXRjaCIsIm1pZGRsZXdhcmVBUEkiLCJjaGFpbiIsIm1pZGRsZXdhcmUiLCJyb290IiwiX3BvbnlmaWxsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJMaW5rIiwiZ2V0U296YWlJZCIsImdldFNvemFpSWRGcm9tQm94SWQiLCJnZXRHcm91cEZyb21Tb3phaUlkIiwiU0FHQV9EQU5ERF9NT1VTRURPV04iLCJTQUdBX0RBTkREX01PVVNFVVAiLCJTYWdhX0RBbmREX01vdXNlRG93biIsIlNhZ2FfREFuZERfTW91c2VVcCIsImNyZWF0ZU1vamlPYmpBcnkiLCJtb2ppb2JqYXJ5IiwibW9qaW9iaiIsIm1vamkiLCJzdWJzdHIiLCJnZXRKaWR1bWVNb2ppTmFnYXNoaUluZGV4IiwicGFkZGluZ19zIiwicGFkZGluZ19lIiwiZGVmYXVsdFNpemUiLCJwb2ludGVyIiwic2l6ZSIsIm5vcm1hbGd5byIsImdldEppZHVtZUFyeSIsImluZGV4X3MiLCJpbmRleF9lIiwiYXJlYXNpemUiLCJtb2ppc3UiLCJtb2ppbGVuIiwibWFyZ2luIiwiZ2V0SmlkdW1lQXJ5U29yb2VOYXNoaSIsImdldFplbkd5b0luZGV4QXJ5IiwiaW5kZXhBcnkiLCJpbmRleE9iaiIsIl9UZXh0JGdldEppZHVtZU1vamlOYSIsIl9UZXh0JGdldEppZHVtZU1vamlOYTIiLCJtYXhTaXplR3lvT2t1cmkiLCJnZXRHeW9va3VyaUFyeSIsIm1heF93aWR0aCIsImd5b0luZGV4QXJ5IiwiemVuR3lvSW5kZXhBcnkiLCJneW9va3VyaUFyeSIsImppZHVtZUFyeSIsInplbkd5b0luZGV4QXJ5TGVuIiwiZ3lvb2t1cmlBcnlMZW4iLCJuYWdhc2hpQXJ5IiwibW9qaV9pIiwiU0FHQV9UT09MQk9YX01PVkVFTkQiLCJTYWdhX1Rvb2xCb3hfTW92ZUVuZCIsInRvb2xib3hfaWQiLCJTQUdBX1RPT0xCT1hURVhUREFUQV9URVhUREFUQV9VUERBVEUiLCJTYWdhX1Rvb2xCb3hUZXh0RGF0YV9UZXh0RGF0YV9VcGRhdGUiLCJUZXh0R3JpZCIsImdldFRleHRHcmlkQXJ5IiwiZ3JpZGFyeSIsImdldEd5b29rdXJpR3JpZEFyeSIsImdldEppZHVtZUdyaWRBcnkiLCJncmlkc3UiLCJTQUdBX1NDQUxFX0NIQU5HRSIsIlNhZ2FfU2NhbGVfQ2hhbmdlIiwiU1VfVE9PTEJPWFBSRVNFTl9MQVlPVVRDQUxMQlVUVE9OX0NMSUNLIiwiU1VfVE9PTEJPWFBSRVNFTl9TT1pBSUNBTExCVVRUT05fQ0xJQ0siLCJTVV9UT09MQk9YUFJFU0VOX0xJTktDQUxMQlVUVE9OX0NMSUNLIiwiU1VfVE9PTEJPWFBSRVNFTl9FRElUT05PRkZCVVRUT05fQ0xJQ0siLCJTVV9Ub29sQm94UHJlc2VuX0xheW91dENhbGxCdXR0b25fQ2xpY2siLCJTVV9Ub29sQm94UHJlc2VuX1NvemFpQ2FsbEJ1dHRvbl9DbGljayIsIlNVX1Rvb2xCb3hQcmVzZW5fTGlua0NhbGxCdXR0b25fQ2xpY2siLCJTVV9Ub29sQm94UHJlc2VuX0VkaXRPbk9mZkJ1dHRvbl9DbGljayIsIlNVX1RPT0xCT1hTT1pBSV9VUERBVEVCVVRUT05fQ0xJQ0siLCJTVV9UT09MQk9YU09aQUlfREVMRVRFQlVUVE9OX0NMSUNLIiwiU1VfVE9PTEJPWFNPWkFJX0NSRUFURUJVVFRPTl9DTElDSyIsIlNVX1RPT0xCT1hTT1pBSV9TT1pBSV9TRUxFQ1QiLCJTVV9UT09MQk9YU09aQUlfU09aQUlfVE9HR0xFIiwiU1VfVG9vbEJveFNvemFpX1VwZGF0ZUJ1dHRvbl9DbGljayIsIlNVX1Rvb2xCb3hTb3phaV9EZWxldGVCdXR0b25fQ2xpY2siLCJTVV9Ub29sQm94U296YWlfQ3JlYXRlQnV0dG9uX0NsaWNrIiwiU1VfVG9vbEJveFNvemFpX1NvemFpX1NlbGVjdCIsIlNVX1Rvb2xCb3hTb3phaV9Tb3phaV9Ub2dnbGUiLCJTVV9UT09MQk9YVEVYVERBVEFfVVBEQVRFQlVUVE9OX0NMSUNLIiwiU1VfVG9vbEJveFRleHREYXRhX1VwZGF0ZUJ1dHRvbl9DbGljayIsIlNVX1RPT0xCT1hTQ0FMRV9NSU5CVVRUT05fQ0xJQ0siLCJTVV9UT09MQk9YU0NBTEVfTUFYQlVUVE9OX0NMSUNLIiwiU1VfVE9PTEJPWFNDQUxFXzEwMFBFUkJVVFRPTl9DTElDSyIsIlNVX1Rvb2xCb3hTY2FsZV9NaW5CdXR0b25fQ2xpY2siLCJTVV9Ub29sQm94U2NhbGVfTWF4QnV0dG9uX0NsaWNrIiwiU1VfVG9vbEJveFNjYWxlXzEwMFBlckJ1dHRvbl9DbGljayIsIlNVX1RPT0xCT1hfTU9WRUVORCIsIlNVX1Rvb2xCb3hfTW92ZUVuZCIsInRvVXBwZXJDYXNlIiwiaW5Mb3ciLCJpbkhpZ2giLCJvdXRMb3ciLCJvdXRIaWdoIiwiZ2V0S2V5cyIsImlzRW51bSIsImlzRW50cmllcyIsInJlcGVhdCIsIm1heExlbmd0aCIsImZpbGxTdHJpbmciLCJzdHJpbmdMZW5ndGgiLCJmaWxsU3RyIiwiaW50TWF4TGVuZ3RoIiwiZmlsbExlbiIsInN0cmluZ0ZpbGxlciIsIklTX0NPTkNBVF9TUFJFQURBQkxFIiwiZmxhdHRlbkludG9BcnJheSIsInNvdXJjZUxlbiIsImRlcHRoIiwibWFwcGVyIiwidGhpc0FyZyIsInNwcmVhZGFibGUiLCJ0YXJnZXRJbmRleCIsInNvdXJjZUluZGV4IiwiZ09QUyIsIlJlZmxlY3QiLCJvd25LZXlzIiwiZ2V0U3ltYm9scyIsIiRoYXMiLCJ1bmNhdWdodEZyb3plblN0b3JlIiwiX2wiLCJVbmNhdWdodEZyb3plblN0b3JlIiwiZmluZFVuY2F1Z2h0RnJvemVuIiwiZGVsZXRlIiwidWZzdG9yZSIsIkludGVybmFsTWFwIiwiZWFjaCIsIndlYWsiLCJ0bXAiLCIkV2Vha01hcCIsImZyZWV6ZSIsIl9mIiwic3Ryb25nIiwiYWRkIiwiJGl0ZXJEZWZpbmUiLCJTSVpFIiwiZ2V0RW50cnkiLCJrIiwibmV3UHJvbWlzZUNhcGFiaWxpdHkiLCJwcm9taXNlQ2FwYWJpbGl0eSIsImZsYWdzIiwidG8iLCJpbmMiLCJtZW1vIiwiaXNSaWdodCIsInJldCIsIkVQU0lMT04iLCJFUFNJTE9OMzIiLCJNQVgzMiIsIk1JTjMyIiwiZnJvdW5kIiwiJGFicyIsIiRzaWduIiwibG9nMXAiLCJpc0Zpbml0ZSIsIm1zZyIsIiRwYXJzZUZsb2F0IiwicGFyc2VGbG9hdCIsIiR0cmltIiwiJHBhcnNlSW50Iiwid3MiLCJoZXgiLCJyYWRpeCIsInVuIiwicGFydEFyZ3MiLCJib3VuZCIsImNvbnN0cnVjdCIsIiRhc3NpZ24iLCJ3aW5kb3dOYW1lcyIsImdldFdpbmRvd05hbWVzIiwiZGVmaW5lUHJvcGVydGllcyIsIm5hbWVzIiwicHJvcElzRW51bWVyYWJsZSIsInRlc3QxIiwidGVzdDIiLCJmcm9tQ2hhckNvZGUiLCJ0ZXN0MyIsImxldHRlciIsInNob3VsZFVzZU5hdGl2ZSIsInN5bWJvbHMiLCJSRUFDVF9TVEFUSUNTIiwiZGVmYXVsdFByb3BzIiwiZ2V0RGVmYXVsdFByb3BzIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwibWl4aW5zIiwiS05PV05fU1RBVElDUyIsImNhbGxlciIsImFyaXR5Iiwib2JqZWN0UHJvdG90eXBlIiwiaG9pc3ROb25SZWFjdFN0YXRpY3MiLCJ0YXJnZXRDb21wb25lbnQiLCJzb3VyY2VDb21wb25lbnQiLCJibGFja2xpc3QiLCJpbmhlcml0ZWRDb21wb25lbnQiLCJmYWN0b3J5Iiwic3ltYm9sT2JzZXJ2YWJsZVBvbnlmaWxsIiwiVVBQRVJDQVNFX1JFIiwiVVBQRVJDQVNFX1JFX1RPX0tFQkFCIiwiaXNVbml0bGVzc051bWJlciIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5Db3VudCIsImZsZXhQb3NpdGl2ZSIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRSb3ciLCJncmlkQ29sdW1uIiwiZm9udFdlaWdodCIsImxpbmVDbGFtcCIsImxpbmVIZWlnaHQiLCJvcGFjaXR5Iiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwicHJlZml4S2V5Iiwic3RyaW5naWZ5VmFsdWUiLCJzdHJpbmdpZnlBbmRJbXBvcnRhbnRpZnlWYWx1ZSIsImltcG9ydGFudGlmeSIsImNodW5rX2M0ZTM3Mzg3X2hhc2hTdHJpbmciLCJzdHJpbmdfaGFzaF9kZWZhdWx0IiwiaGFzaE9iamVjdCIsIl9jcmVhdGVDbGFzcyIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIk1BUF9FWElTVFMiLCJPcmRlcmVkRWxlbWVudHMiLCJlbGVtZW50cyIsImtleU9yZGVyIiwiY2FsbGJhY2siLCJzaG91bGRSZW9yZGVyIiwibmVzdGVkIiwiX25lc3RlZCIsInN0eWxlVHlwZSIsIndtIiwid21zIiwid21tcyIsInN0YXRpY1ByZWZpeERhdGEiLCJjYWxjX2RlZmF1bHQiLCJjcm9zc0ZhZGVfZGVmYXVsdCIsImN1cnNvcl9kZWZhdWx0IiwiZmlsdGVyX2RlZmF1bHQiLCJmbGV4X2RlZmF1bHQiLCJmbGV4Ym94SUVfZGVmYXVsdCIsImZsZXhib3hPbGRfZGVmYXVsdCIsImdyYWRpZW50X2RlZmF1bHQiLCJpbWFnZVNldF9kZWZhdWx0IiwicG9zaXRpb25fZGVmYXVsdCIsInNpemluZ19kZWZhdWx0IiwidHJhbnNpdGlvbl9kZWZhdWx0IiwidHJhbnNmb3JtIiwidHJhbnNmb3JtT3JpZ2luIiwidHJhbnNmb3JtT3JpZ2luWCIsInRyYW5zZm9ybU9yaWdpblkiLCJiYWNrZmFjZVZpc2liaWxpdHkiLCJwZXJzcGVjdGl2ZSIsInBlcnNwZWN0aXZlT3JpZ2luIiwidHJhbnNmb3JtU3R5bGUiLCJ0cmFuc2Zvcm1PcmlnaW5aIiwiYW5pbWF0aW9uIiwiYW5pbWF0aW9uRGVsYXkiLCJhbmltYXRpb25EaXJlY3Rpb24iLCJhbmltYXRpb25GaWxsTW9kZSIsImFuaW1hdGlvbkR1cmF0aW9uIiwiYW5pbWF0aW9uTmFtZSIsImFuaW1hdGlvblBsYXlTdGF0ZSIsImFuaW1hdGlvblRpbWluZ0Z1bmN0aW9uIiwiYXBwZWFyYW5jZSIsInVzZXJTZWxlY3QiLCJmb250S2VybmluZyIsInRleHRFbXBoYXNpc1Bvc2l0aW9uIiwidGV4dEVtcGhhc2lzIiwidGV4dEVtcGhhc2lzU3R5bGUiLCJ0ZXh0RW1waGFzaXNDb2xvciIsImJveERlY29yYXRpb25CcmVhayIsImNsaXBQYXRoIiwibWFza0ltYWdlIiwibWFza01vZGUiLCJtYXNrUmVwZWF0IiwibWFza1Bvc2l0aW9uIiwibWFza0NsaXAiLCJtYXNrT3JpZ2luIiwibWFza1NpemUiLCJtYXNrQ29tcG9zaXRlIiwibWFzayIsIm1hc2tCb3JkZXJTb3VyY2UiLCJtYXNrQm9yZGVyTW9kZSIsIm1hc2tCb3JkZXJTbGljZSIsIm1hc2tCb3JkZXJXaWR0aCIsIm1hc2tCb3JkZXJPdXRzZXQiLCJtYXNrQm9yZGVyUmVwZWF0IiwibWFza0JvcmRlciIsIm1hc2tUeXBlIiwidGV4dERlY29yYXRpb25TdHlsZSIsInRleHREZWNvcmF0aW9uU2tpcCIsInRleHREZWNvcmF0aW9uTGluZSIsInRleHREZWNvcmF0aW9uQ29sb3IiLCJmb250RmVhdHVyZVNldHRpbmdzIiwiYnJlYWtBZnRlciIsImJyZWFrQmVmb3JlIiwiYnJlYWtJbnNpZGUiLCJjb2x1bW5GaWxsIiwiY29sdW1uR2FwIiwiY29sdW1uUnVsZSIsImNvbHVtblJ1bGVDb2xvciIsImNvbHVtblJ1bGVTdHlsZSIsImNvbHVtblJ1bGVXaWR0aCIsImNvbHVtbnMiLCJjb2x1bW5TcGFuIiwid3JpdGluZ01vZGUiLCJmbGV4RGlyZWN0aW9uIiwiZmxleEZsb3ciLCJ0cmFuc2l0aW9uRGVsYXkiLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJ0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb24iLCJiYWNrZHJvcEZpbHRlciIsInNjcm9sbFNuYXBUeXBlIiwic2Nyb2xsU25hcFBvaW50c1giLCJzY3JvbGxTbmFwUG9pbnRzWSIsInNjcm9sbFNuYXBEZXN0aW5hdGlvbiIsInNjcm9sbFNuYXBDb29yZGluYXRlIiwic2hhcGVJbWFnZVRocmVzaG9sZCIsInNoYXBlSW1hZ2VNYXJnaW4iLCJzaGFwZUltYWdlT3V0c2lkZSIsImh5cGhlbnMiLCJmbG93SW50byIsImZsb3dGcm9tIiwicmVnaW9uRnJhZ21lbnQiLCJib3hTaXppbmciLCJ0ZXh0QWxpZ25MYXN0Iiwid3JhcEZsb3ciLCJ3cmFwVGhyb3VnaCIsIndyYXBNYXJnaW4iLCJ0b3VjaEFjdGlvbiIsImdyaWRUZW1wbGF0ZUNvbHVtbnMiLCJncmlkVGVtcGxhdGVSb3dzIiwiZ3JpZFRlbXBsYXRlQXJlYXMiLCJncmlkVGVtcGxhdGUiLCJncmlkQXV0b0NvbHVtbnMiLCJncmlkQXV0b1Jvd3MiLCJncmlkQXV0b0Zsb3ciLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uU3RhcnQiLCJncmlkUm93RW5kIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5HYXAiLCJncmlkUm93R2FwIiwiZ3JpZEFyZWEiLCJncmlkR2FwIiwidGV4dFNpemVBZGp1c3QiLCJib3JkZXJJbWFnZSIsImJvcmRlckltYWdlUmVwZWF0IiwiYm9yZGVySW1hZ2VTb3VyY2UiLCJjcmVhdGVQcmVmaXhlcl9kZWZhdWx0IiwiZGVmYXVsdFNlbGVjdG9ySGFuZGxlcnMiLCJiYXNlU2VsZWN0b3IiLCJnZW5lcmF0ZVN1YnRyZWVTdHlsZXMiLCJnZW5lcmF0ZWQiLCJnZW5lcmF0ZUNTUyIsInN0eWxlVHlwZXMiLCJzZWxlY3RvckhhbmRsZXJzIiwic3RyaW5nSGFuZGxlcnMiLCJ1c2VJbXBvcnRhbnQiLCJtZXJnZWQiLCJhZGRTdHlsZVR5cGUiLCJwbGFpbkRlY2xhcmF0aW9ucyIsImdlbmVyYXRlZFN0eWxlcyIsImhhbmRsZXIiLCJuZXdTZWxlY3RvciIsImFycjIiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJ3YXJuIiwiZ2VuZXJhdGVkUnVsZXNldCIsImdlbmVyYXRlQ1NTUnVsZXNldCIsInRyYW5zZm9ybVJ1bGUiLCJ0cmFuc2Zvcm1WYWx1ZSIsImFycmF5VG9PYmplY3RLZXlzUmVkdWNlciIsImFjYyIsImRlY2xhcmF0aW9ucyIsInN0cmluZ0hhbmRsZXJLZXlzIiwicnVuU3RyaW5nSGFuZGxlcnMiLCJvcmlnaW5hbEVsZW1lbnRzIiwicHJlZml4ZWRFbGVtZW50cyIsImVsZW1lbnROYW1lcyIsIm9yaWdpbmFsU3R5bGUiLCJvcmlnaW5hbEluZGV4IiwicnVsZXMiLCJfdHlwZW9mJDEiLCJzdHlsZVRhZyIsImZvbnRGYW1pbHkiLCJuYW1lTWFwIiwiaW5qZWN0U3R5bGVPbmNlIiwiZmluYWxWYWwiLCJ2YWxWYWwiLCJ2YWxLZXkiLCJjaHVua19jNGUzNzM4N19pbmplY3RHZW5lcmF0ZWRDU1NPbmNlIiwiYWxyZWFkeUluamVjdGVkIiwiaW5qZWN0aW9uQnVmZmVyIiwiaXNCdWZmZXJpbmciLCJnZW5lcmF0ZWRDU1MiLCJfaW5qZWN0aW9uQnVmZmVyIiwiYnJvd3Nlcl9hc2FwX2RlZmF1bHQiLCJmbHVzaFRvU3R5bGVUYWciLCJfdG9Db25zdW1hYmxlQXJyYXkkMSIsImRlZmluaXRpb25zIiwiY2h1bmtfYzRlMzczODdfcmVzZXQiLCJzdGFydEJ1ZmZlcmluZyIsImZsdXNoVG9BcnJheSIsImZsdXNoVG9TdHJpbmciLCJjc3NSdWxlcyIsInF1ZXJ5U2VsZWN0b3IiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInNldEF0dHJpYnV0ZSIsInNoZWV0Iiwic3R5bGVTaGVldCIsImluc2VydFJ1bGUiLCJudW1SdWxlcyIsInJ1bGUiLCJpbm5lclRleHQiLCJpbmplY3RTdHlsZVRhZyIsImdldFJlbmRlcmVkQ2xhc3NOYW1lcyIsImFkZFJlbmRlcmVkQ2xhc3NOYW1lcyIsImNsYXNzTmFtZXMiLCJjbGFzc05hbWUiLCJpbmplY3RBbmRHZXRDbGFzc05hbWUiLCJzdHlsZURlZmluaXRpb25zIiwiY2xhc3NOYW1lQml0cyIsImRlZmluaXRpb25CaXRzIiwicHJvY2Vzc1N0eWxlRGVmaW5pdGlvbnMiLCJfbmFtZSIsIl9kZWZpbml0aW9uIiwidW5taW5pZmllZEhhc2hGbiIsImhhc2hGbiIsIlN0eWxlU2hlZXQiLCJzaGVldERlZmluaXRpb24iLCJtYXBwZWRTaGVldERlZmluaXRpb24iLCJzdHJpbmdWYWwiLCJyZWh5ZHJhdGUiLCJyZW5kZXJlZENsYXNzTmFtZXMiLCJTdHlsZVNoZWV0U2VydmVyIiwicmVuZGVyU3RhdGljIiwicmVuZGVyRnVuYyIsImNzcyIsImNvbnRlbnQiLCJTdHlsZVNoZWV0VGVzdFV0aWxzIiwiQXBocm9kaXRlIiwibWFrZUV4cG9ydHMiLCJleHRlbmQiLCJleHRlbnNpb25zIiwiZXh0ZW5zaW9uU2VsZWN0b3JIYW5kbGVycyIsImV4dGVuc2lvbiIsInNlbGVjdG9ySGFuZGxlciIsIm1pbmlmeSIsInNob3VsZE1pbmlmeSIsImVzX1N0eWxlU2hlZXQiLCJlc19TdHlsZVNoZWV0U2VydmVyIiwiZXNfU3R5bGVTaGVldFRlc3RVdGlscyIsImVzX2ZsdXNoVG9TdHlsZVRhZyIsImVzX2luamVjdEFuZEdldENsYXNzTmFtZSIsImVzX2RlZmF1bHRTZWxlY3RvckhhbmRsZXJzIiwiTk9UX0lURVJBVE9SX0VSUk9SIiwiQ0hBTk5FTF9FTkQiLCJUQVNLX0NBTkNFTCIsIm1hdGNoZXJzIiwid2lsZGNhcmQiLCJwYXR0ZXJucyIsIl9wcmVkaWNhdGUiLCJ3cmFwSGVscGVyIiwicHJvYyIsInBhcmVudENvbnRleHQiLCJwYXJlbnRFZmZlY3RJZCIsImNvbnQiLCJydW5QYXJhbGxlbEVmZmVjdCIsInJ1bkFsbEVmZmVjdCIsInNhZ2FNb25pdG9yIiwibG9nZ2VyIiwib25FcnJvciIsImxvZ0Vycm9yIiwic2FnYVN0YWNrIiwidGFza0NvbnRleHQiLCJfcmVmOSIsIl9tdXRhdG9yTWFwIiwiX2RlZmVycmVkRW5kIiwiX2lzUnVubmluZyIsImpvaW5lcnMiLCJpc0NhbmNlbGxlZCIsIl9pc0NhbmNlbGxlZCIsImlzQWJvcnRlZCIsIl9pc0Fib3J0ZWQiLCJkZXNjcyIsIl9kZWZpbmVFbnVtZXJhYmxlUHJvcGVydGllcyIsIm5ld1Rhc2siLCJtYWluVGFzayIsInRhc2tRdWV1ZSIsImNvbXBsZXRlZCIsImFib3J0IiwiY2FuY2VsQWxsIiwiYWRkVGFzayIsImlzRXJyIiwiZ2V0VGFza3MiLCJ0YXNrTmFtZXMiLCJmb3JrUXVldWUiLCJpc01haW5SdW5uaW5nIiwicnVuRWZmZWN0IiwibGFiZWwiLCJlZmZlY3RJZCIsImVmZmVjdFRyaWdnZXJlZCIsImVmZmVjdFNldHRsZWQiLCJjdXJyQ2IiLCJlZmZlY3RSZWplY3RlZCIsImVmZmVjdFJlc29sdmVkIiwiZWZmZWN0Q2FuY2VsbGVkIiwicmVzb2x2ZVByb21pc2UiLCJydW5Gb3JrRWZmZWN0IiwicmVzb2x2ZUl0ZXJhdG9yIiwidGFrZUNiIiwiaW5wIiwicnVuVGFrZUVmZmVjdCIsIl9yZWYzIiwic2NoZWR1bGVyIiwicnVuUHV0RWZmZWN0IiwiY2hpbGRDYnMiLCJjaENiQXRLZXkiLCJfcmVzcG9uc2UiLCJyZXNwb25zZSIsInJ1blJhY2VFZmZlY3QiLCJfcmVmNCIsInJ1bkNhbGxFZmZlY3QiLCJfcmVmNSIsImNwc0NiIiwicnVuQ1BTRWZmZWN0Iiwiam9pbmVyIiwicnVuSm9pbkVmZmVjdCIsInRhc2tUb0NhbmNlbCIsInJ1bkNhbmNlbEVmZmVjdCIsIl9yZWY3IiwicnVuU2VsZWN0RWZmZWN0IiwiX3JlZjgiLCJydW5DaGFubmVsRWZmZWN0IiwicnVuRmx1c2hFZmZlY3QiLCJydW5DYW5jZWxsZWRFZmZlY3QiLCJydW5HZXRDb250ZXh0RWZmZWN0IiwicnVuU2V0Q29udGV4dEVmZmVjdCIsImNhbmNlbFByb21pc2UiLCJfcmVmNiIsInRhc2tJdGVyYXRvciIsInBjIiwiY3JlYXRlVGFza0l0ZXJhdG9yIiwiX3Rhc2siLCJjb21wbGV0ZWRDb3VudCIsInJlc3VsdHMiLCJOT05fR0VORVJBVE9SX0VSUiIsIlJVTl9TQUdBX1NJR05BVFVSRSIsInJ1blNhZ2EiLCJzdG9yZUludGVyZmFjZSIsInNhZ2EiLCJfc3RvcmVJbnRlcmZhY2UiLCJhY3Rpb25EaXNwYXRjaGVkIiwiX3JlZiRjb250ZXh0Iiwic2FnYU1pZGRsZXdhcmUiLCJzYWdhRW1pdHRlciIsImNvbnRleHRtZW51IiwiX2NvbnRleHRtZW51IiwiX2NvbnRleHRtZW51MiIsIl90b29sYm94bGluayIsIl90b29sYm94Ym94ZGF0YSIsIl9kZWZpbmUiLCJfemFoeW8iLCJfY29udGV4dDEyIiwibWFyayIsIl9jYWxsZWUiLCJfY2FsbGVlMiIsIl9jYWxsZWUzIiwiYm94X3dpZHRoIiwiYm94X2hlaWdodCIsInR4IiwidHkiLCJfR3JpZCRjaGFuZ2VJbkFyZWEiLCJfR3JpZCRjaGFuZ2VJbkFyZWEyIiwibmV3X2JveF9pZCIsIm5ld19ncm91cF9pZCIsIl9jYWxsZWU0IiwiX0dyaWQkY2hhbmdlSW5BcmVhMyIsIl9HcmlkJGNoYW5nZUluQXJlYTQiLCJfY2FsbGVlNSIsImZfYm94IiwiZl9ib3hfd2lkdGgiLCJmX2JveF9oZWlnaHQiLCJfR3JpZCRzbmFwNSIsIl9HcmlkJHNuYXA2IiwiX0dyaWQkY2hhbmdlSW5BcmVhNSIsIl9HcmlkJGNoYW5nZUluQXJlYTYiLCJuZXdfZ3JvdXBfbm8iLCJfY2FsbGVlNiIsIl9HcmlkJHNuYXA3IiwiX0dyaWQkc25hcDgiLCJfR3JpZCRjaGFuZ2VJbkFyZWE3IiwiX0dyaWQkY2hhbmdlSW5BcmVhOCIsIl9jb250ZXh0NiIsIl9jYWxsZWU3IiwiX0dyaWQkc25hcDkiLCJfR3JpZCRzbmFwMTAiLCJfR3JpZCRjaGFuZ2VJbkFyZWE5IiwiX0dyaWQkY2hhbmdlSW5BcmVhMTAiLCJfY29udGV4dDciLCJfY2FsbGVlOCIsIl9jb250ZXh0OCIsIl9jYWxsZWU5IiwiX2NvbnRleHQ5IiwiX2NhbGxlZTEwIiwiX2NvbnRleHQxMCIsIl9jYWxsZWUxMSIsIl9jb250ZXh0MTEiLCJfZGFuZGQiLCJfZGFuZGQyIiwiX2xpbmsiLCJfbmFnYXNoaTIiLCJkcm9wWCIsImRyb3BZIiwiZ3BpZCIsIl90b29sYm94c2NhbGUiLCJfdG9vbGJveHNjYWxlMiIsImdldFNjYWxlIiwidG9vbGJveCIsIl90b29sYm94IiwiX3Rvb2xib3gyIiwiX3Rvb2xib3hib3hkYXRhMiIsIl90b29sYm94dGV4dGRhdGEiLCJfdG9vbGJveHRleHRkYXRhMiIsIl90b29sYm94c296YWkiLCJfdG9vbGJveHNvemFpMiIsIl90b29sYm94bGluazIiLCJfdG9vbGJveHByZXNlbiIsIl90b29sYm94cHJlc2VuMiIsIl9zb3phaTIiLCJ0b29sYm94cyIsIl9jb250ZXh0MTYiLCJfcGF5bG9hZDMiLCJfY2FsbGVlMTIiLCJfY2FsbGVlMTMiLCJfY29udGV4dDEzIiwiX2NhbGxlZTE0IiwicGxpbmtsaXN0Iiwic296YWlzIiwibGlua2xpc3QiLCJfaTIiLCJuZXdsaW5rbGlzdCIsImZpcnN0SW5kZXgiLCJfaTQiLCJfY29udGV4dDE0IiwiX2NhbGxlZTE1IiwiX2NvbnRleHQxNSIsInNlbGVjdGJveCIsIl9zZWxlY3Rib3giLCJfc2VsZWN0Ym94MiIsInJvb3RTYWdhIiwiZGFuZGQiLCJvcGVuY2xvc2UiLCJwYXJzZSIsImVkaXRvbm9mZiIsImxpbmVzIiwibGlzdHMiLCJsaW5rIiwiZm9jdXNib3giLCJib3hfbm8iLCJfdGV4dGdyaWQ1IiwibGFzdF9ncm91cF9ubyIsIl9yZWR1eCIsIl9zY2FsZSIsIl9ib3hzIiwiX2ZvY3VzYm94IiwiX3Rvb2xib3hzIiwiX2xpbmtzIiwiX2xpbmVzIiwiX2VkaXRvbm9mZiIsInJvb3RSZWR1Y2VyIiwiX3JlYWN0Iiwic3R5bGVzIiwiY29udGFpbmVyIiwidGV4dEFsaWduIiwiYnV0dG9uIiwibWFyZ2luVG9wIiwiZm9udFNpemUiLCJib3JkZXIiLCJib3JkZXJSYWRpdXMiLCJiYWNrZ3JvdW5kQ29sb3IiLCJjdXJzb3IiLCJidXR0b24yIiwiVG9vbEJveFByZXNlbiIsIlJlYWN0IiwiQ29tcG9uZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJpbm5lckhUTUwiLCJibG9iIiwiQmxvYiIsImhyZWYiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJkb3dubG9hZCIsImNsaWNrIiwiX3RoaXMyIiwiX3JlYWN0MiIsImZsb2F0Iiwib25DbGljayIsIm9uQ2FsbExheW91dCIsIm1hcmdpbkxlZnQiLCJtYXJnaW5SaWdodCIsIm9uRWRpdE9uQ2xpY2siLCJvbkNhbGxTb3phaSIsIm9uRWRpdE9mZkNsaWNrIiwib25DYWxsTGluayIsIl9yZWFjdFJlZHV4IiwiX1Rvb2xCb3hQcmVzZW4iLCJUb29sQm94UHJlc2VuTWFwIiwiY29ubmVjdCIsInBhZGRpbmdUb3AiLCJsaW5lIiwiYm94bGlzdGJveCIsIm92ZXJmbG93WSIsIm91dGxpbmUiLCJzb3phaWxpc3Rib3giLCJsaW5rbGlzdGJveCIsImJvcmRlckJvdHRvbSIsIkNvbG9yIiwiVG9vbEJveExpc3QiLCJnaWQiLCJzaWQiLCJnZXRUeXBlQm94R3JvdXAiLCJnZXRUeXBlU296YWkiLCJvbkNsaWNrQ3JlYXRlQnV0dG9uIiwiYWxlcnQiLCJjb25maXJtIiwib25DbGlja0RlbGV0ZUJ1dHRvbiIsImdyb3VwX2FyeSIsImlzSW5jbHVkZUxpbmtMaXN0R3JvdXAiLCJfbG9vcCIsImJnY29sb3IiLCJjbGlja0JveExpc3QiLCJfdGhpczMiLCJpc0luY2x1ZGVMaW5rTGlzdFNvemFpSWQiLCJfbG9vcDIiLCJjbGlja1NvemFpTGlzdCIsIl90aGlzNCIsIl9sb29wMyIsImNsaWNrRGVsZXRlQnV0dG9uIiwiX3RoaXM1IiwiZ3JvdXBsaXN0Iiwic296YWlsaXN0IiwiY2xpY2tDcmVhdGVCdXR0b24iLCJfVG9vbEJveExpbmsiLCJUb29sQm94TGlua01hcCIsImdyb3VwTm9BcnkiLCJUb29sQm94TGluayIsImxpc3Rib3giLCJ0ZXh0Ym94IiwiaW1hZ2Vib3giLCJ2ZXJ0aWNhbEFsaWduIiwiaW1nIiwiVG9vbEJveFNvemFpIiwiaW5wdXRfaWQiLCJvbkNsaWNrU296YWlMaXN0Iiwib25DbGlja1VwZGF0ZUJ1dHRvbiIsImNoZWNrU296YWlFeGlzdCIsInJlYyIsImNsaWNrTGlzdCIsIm9uTW91c2VEb3duIiwic3RvcFByb3BhZ2F0aW9uIiwicHJldmVudERlZmF1bHQiLCJzb3phaU1vdXNlRG93biIsIm9uQ2hhbmdlIiwiY2xpY2tVcGRhdGVCdXR0b24iLCJtYXJnaW5Cb3R0b20iLCJpZHR5cGUiLCJzb3phaWFyZWEiLCJuZXd1cGRhdGVidXR0b24iLCJfVG9vbEJveFNvemFpIiwiVG9vbEJveFNvemFpTWFwIiwiX3N0cmluZyIsIlRvb2xCb3hUZXh0RGF0YSIsIl9Ub29sQm94VGV4dERhdGEiLCJUb29sQm94VGV4dERhdGFNYXAiLCJ6IiwiZmxnIiwiVG9vbEJveEJveERhdGEiLCJjaGVja0tpem9uSWQiLCJpc1NhbWVHcm91cEFuZE5vIiwiaXNTYW1lR3JvdXAiLCJzaGlua2kiLCJoZW5zaHUiLCJfVG9vbEJveEJveERhdGEiLCJUb29sQm94Qm94RGF0YU1hcCIsInBlciIsIlRvb2xCb3hTY2FsZSIsIm9uQ2xpY2sxMDBQZXJCdXR0b24iLCJvbkNsaWNrTWF4QnV0dG9uIiwib25DbGlja01pbkJ1dHRvbiIsIl9Ub29sQm94U2NhbGUiLCJUb29sQm94U2NhbGVNYXAiLCJwb3NpdGlvbiIsImJveFNoYWRvdyIsInRpdGxlIiwicGFkZGluZyIsImJvZHkiLCJib3JkZXJMZWZ0IiwiYm9yZGVyUmlnaHQiLCJUb29sQm94IiwiYm94b3JncG9zIiwibW91c2Vwb3MiLCJtb3VzZU1vdmUiLCJtb3VzZVVwIiwibW92ZVgiLCJtb3ZlWSIsIl9ib3htb3Zlc3RvcCIsImJveG1vdmVzdG9wIiwiX2JveG1vdmVzdG9wMiIsIm54IiwibnkiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZW5kTW92ZUJveCIsIndpbmRvd193IiwiaW5uZXJXaWR0aCIsIndpbmRvd19oIiwiaW5uZXJIZWlnaHQiLCJtb3VzZURvd24iLCJfVG9vbEJveCIsIlRvb2xCb3hNYXAiLCJFdmVudCIsInRyaWdnZXJFdmVudCIsImNyZWF0ZUV2ZW50IiwiZXZ0IiwiaW5pdEV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsImNyZWF0ZUV2ZW50T2JqZWN0IiwiZmlyZUV2ZW50IiwicmVxdWVzdEZsdXNoIiwiY2FwYWNpdHkiLCJjdXJyZW50SW5kZXgiLCJzY2FuIiwibmV3TGVuZ3RoIiwic2NvcGUiLCJCcm93c2VyTXV0YXRpb25PYnNlcnZlciIsInRpbWVvdXRIYW5kbGUiLCJoYW5kbGVUaW1lciIsImludGVydmFsSGFuZGxlIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwiYWRkSWZOZXciLCJtZXRhRGF0YSIsInByZWZpeFByb3BlcnRpZXMiLCJuZXdTdHlsZSIsInJlcXVpcmVkUHJlZml4ZXMiLCJjYXBpdGFsaXplZFByb3BlcnR5Iiwic3R5bGVQcm9wZXJ0eSIsIl9jYXBpdGFsaXplU3RyaW5nIiwidXBwZXJjYXNlUGF0dGVybiIsIm1zUGF0dGVybiIsImNhY2hlIiwiX2h5cGhlbmF0ZVN0eWxlTmFtZTIiLCJfaHlwaGVuYXRlU3R5bGVOYW1lIiwiX2FwaHJvZGl0ZSIsIl9ldmVudCIsIjpob3ZlciIsImdyYXlvdXQiLCJDb250ZXh0TWVudSIsImNsaWNrRG9jdW1lbnQiLCJjbGlja0Jhc2UiLCJjbGlja05ld0JveFRleHQiLCJjbGlja05ld0JveEltYWdlIiwiY2xpY2tDb3B5Qm94T25Hcm91cCIsImNsaWNrQ29weUJveCIsImNsaWNrU296YWlVbmxpbmsiLCJjbGlja0JveFJlbW92ZSIsImNsaWNrQm94VG9Gcm9udCIsImNsaWNrQm94VG9CYWNrIiwiYWRkRXZlbnQiLCJyZW1vdmVFdmVudCIsImNsb3NlQ29udGV4dE1lbnUiLCJfY2hhbmdlQ3Vyc29yVG9BcmVhIiwiY2hhbmdlQ3Vyc29yVG9BcmVhIiwiX2NoYW5nZUN1cnNvclRvQXJlYTIiLCJuZXdCb3hUZXh0IiwiX2NoYW5nZUN1cnNvclRvQXJlYTMiLCJfY2hhbmdlQ3Vyc29yVG9BcmVhNCIsIm5ld0JveEltYWdlIiwiX2NoYW5nZUN1cnNvclRvQXJlYTUiLCJfY2hhbmdlQ3Vyc29yVG9BcmVhNiIsImNvcHlCb3hUZXh0T25Hcm91cCIsIl9jaGFuZ2VDdXJzb3JUb0FyZWE3IiwiX2NoYW5nZUN1cnNvclRvQXJlYTgiLCJjb3B5Qm94VGV4dCIsImNvcHlCb3hJbWFnZSIsIl9DdXJzb3IkY3VyRWxlbVNjYWxlUyIsIl9DdXJzb3IkY3VyRWxlbVNjYWxlUzIiLCJzb3phaVVubGluayIsImJveFJlbW92ZSIsImJveFRvRnJvbnQiLCJib3hUb0JhY2siLCJfQ29udGV4dE1lbnUiLCJDb250ZXh0TWVudU1hcCIsIlNlbGVjdFNvbm90YUJveCIsImJveENsaWNrIiwib25DbGlja0JveCIsInN0cm9rZSIsIl9TZWxlY3RTb25vdGFCb3giLCJTZWxlY3RTb25vdGFCb3hNYXAiLCJTZWxlY3RHcm91cEJveCIsIl9TZWxlY3RHcm91cEJveCIsIlNlbGVjdEdyb3VwQm94TWFwIiwiSGFuZGxlRCIsImhhbmRsZW9yZ3BvcyIsImhhbmRsZVJlZnJlc2giLCJoYW5kbGVNb3VzZURvd24iLCJfY2hlY2tncmlkMWJsb2NrIiwiY2hlY2tncmlkMWJsb2NrIiwiX2NoZWNrZ3JpZDFibG9jazIiLCJfcHJvcHMkZ3JpZHNuYXAiLCJncmlkc25hcCIsIl9wcm9wcyRncmlkc25hcDIiLCJfcHJvcHMkaGFuZGxlc3RvcCIsImhhbmRsZXN0b3AiLCJfcHJvcHMkaGFuZGxlc3RvcDIiLCJoYW5kbGVNb3ZlIiwiY2FwdHVyZUNsaWNrIiwiaGFuZGxlTW91c2VVcCIsImh3IiwiaGgiLCJfSGFuZGxlRCIsIkhhbmRsZURNYXAiLCJIYW5kbGVSIiwiX0hhbmRsZVIiLCJIYW5kbGVSTWFwIiwiSGFuZGxlTCIsIl9IYW5kbGVMIiwiSGFuZGxlTE1hcCIsIkhhbmRsZVUiLCJfSGFuZGxlVSIsIkhhbmRsZVVNYXAiLCJTZWxlY3RFZGl0Qm94IiwiaGFuZGxlX3JlZnJlc2giLCJiYXNlQ2xpY2siLCJhZGRCYXNlQ2xpY2tFdmVudCIsImtleVByZXNzIiwiYWRkS2V5UHJlc3NFdmVudCIsInJlbW92ZUJhc2VDbGlja0V2ZW50IiwicmVtb3ZlS2V5UHJlc3NFdmVudCIsImtleUNvZGUiLCJzb3phaVJlbW92ZSIsIm9uQ2xpY2tCYXNlIiwiX2dyaWRzbmFwIiwiX2dyaWRzbmFwMiIsIm1pblgiLCJtYXhYIiwibWluWSIsIm1heFkiLCJncmlkX2x4IiwiZ3JpZF9keSIsInJ4IiwicnkiLCJlbmRDaGFuZ2VTaXplQm94IiwiX0hhbmRsZVVNYXAyIiwiX0hhbmRsZUxNYXAyIiwiX0hhbmRsZVJNYXAyIiwiX0hhbmRsZURNYXAyIiwiX1NlbGVjdEVkaXRCb3giLCJTZWxlY3RFZGl0Qm94TWFwIiwiU2VsZWN0Qm94cyIsInNlbGVjdGJveHMiLCJfU2VsZWN0U29ub3RhQm94TWFwMiIsImVkaXRib3giLCJfU2VsZWN0R3JvdXBCb3hNYXAyIiwiX1NlbGVjdEVkaXRCb3hNYXAyIiwic2VsZWN0QWxsU29ub3RhQm94Iiwic2VsZWN0Qm94IiwiX1NlbGVjdEJveHMiLCJTZWxlY3RCb3hzTWFwIiwiTGluZXMiLCJyeiIsImx6IiwiX0xpbmVzIiwiTGluZXNNYXAiLCJJbWFnZUJveCIsInhsaW5rSHJlZiIsInByZXNlcnZlQXNwZWN0UmF0aW8iLCJfSW1hZ2VCb3giLCJJbWFnZUJveE1hcCIsIlRleHRCb3giLCJjaiIsImNnIiwic2l6ZV94Iiwic2l6ZV95IiwiYmFzZXNpemUiLCJyb3RhdGUiLCJfVGV4dEJveCIsIlRleHRCb3hNYXAiLCJCb3hzIiwiX1RleHRCb3hNYXAyIiwiX0ltYWdlQm94TWFwMiIsIl9Cb3hzIiwiQm94c01hcCIsImx3IiwiY29sIiwieW9rb2tlaSIsInRhdGVrZWkiLCJTdmdJbWFnZSIsIl9HcmlkMiIsIl9TZWxlY3RCb3hzTWFwMiIsInhtbG5zIiwieG1sbnNYbGluayIsInZpZXdCb3giLCJfQm94c01hcDIiLCJfTGluZXNNYXAyIiwiX1N2Z0ltYWdlIiwiU3ZnSW1hZ2VNYXAiLCJvdmVyZmxvdyIsIlZpZXdCb3giLCJjb250ZW54dG1lbnVPcGVuQ2xvc2UiLCJjb250ZXh0bWVudVgiLCJjb250ZXh0bWVudVkiLCJjb250ZXh0bWVudU9wZW5DbG9zZSIsIl9Db250ZXh0TWVudU1hcDIiLCJvbkNvbnRleHRNZW51IiwiX1N2Z0ltYWdlTWFwMiIsImNvbnRleHRNZW51IiwiX1ZpZXdCb3giLCJWaWV3Qm94TWFwIiwib25Db250ZXh0TWVudUNsb3NlIiwiZGFuZGRUZXh0Qm94IiwidGV4dE92ZXJmbG93IiwiX2RlZmluZVByb3BlcnR5IiwiX2RhbmRkVGV4dEJveCIsImRhbmRkSW1hZ2VCb3giLCJfZGFuZGRJbWFnZUJveCIsImRhbmRkSW1hZ2UiLCJUb3BTY3JlZW4iLCJkYW5kZE1vdXNlTW92ZSIsImRhbmRkTW91c2VVcCIsIl9DdXJzb3IkY3VyUGFnZUtpdGVuIiwiX0N1cnNvciRjdXJQYWdlS2l0ZW4yIiwiX1Rvb2xCb3hNYXAyIiwiX1Rvb2xCb3hTY2FsZU1hcDIiLCJfVG9vbEJveEJveERhdGFNYXAyIiwiX1Rvb2xCb3hUZXh0RGF0YU1hcDIiLCJfVG9vbEJveFNvemFpTWFwMiIsIl9Ub29sQm94TGlua01hcDIiLCJfVG9vbEJveFByZXNlbk1hcDIiLCJkcm9wb2JqIiwib2Jqc3R5bGUiLCJfVmlld0JveE1hcDIiLCJ0b29sQm94cyIsIl9Ub3BTY3JlZW4iLCJUb3BTY3JlZW5NYXAiLCJzdXBlcl8iLCJ1IiwiTiIsInByZWZpbHRlciIsIm5vcm1hbGl6ZSIsImxocyIsInJocyIsInBhdGgiLCJncm91cENvbGxhcHNlZCIsImdyb3VwIiwiZ3JvdXBFbmQiLCJhY3Rpb25UcmFuc2Zvcm1lciIsInRpdGxlRm9ybWF0dGVyIiwidGltZXN0YW1wIiwiZHVyYXRpb24iLCJ0b0ZpeGVkIiwiY29sbGFwc2VkIiwiY29sb3JzIiwiZGlmZiIsInN0YXJ0ZWQiLCJzdGFydGVkVGltZSIsInByZXZTdGF0ZSIsInRvb2siLCJFIiwiTCIsIk0iLCJzdGF0ZVRyYW5zZm9ybWVyIiwiZXJyb3JUcmFuc2Zvcm1lciIsImxvZ0Vycm9ycyIsImRpZmZQcmVkaWNhdGUiLCJEYXRlIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwiZ2V0U2Vjb25kcyIsImdldE1pbGxpc2Vjb25kcyIsInBlcmZvcm1hbmNlIiwiRGVlcERpZmYiLCJvYnNlcnZhYmxlRGlmZiIsImFwcGx5RGlmZiIsImFwcGx5Q2hhbmdlIiwicmV2ZXJ0Q2hhbmdlIiwiaXNDb25mbGljdCIsIm5vQ29uZmxpY3QiLCJ0cmFuc2Zvcm1lciIsImRlZmF1bHRzIiwiY3JlYXRlTG9nZ2VyIiwiaW52YXJpYW50IiwiUmVhY3RQcm9wVHlwZXNTZWNyZXQiLCJzaGltIiwicHJvcE5hbWUiLCJjb21wb25lbnROYW1lIiwibG9jYXRpb24iLCJwcm9wRnVsbE5hbWUiLCJzZWNyZXQiLCJnZXRTaGltIiwiUmVhY3RQcm9wVHlwZXMiLCJib29sIiwic3ltYm9sIiwiYW55IiwiYXJyYXlPZiIsImluc3RhbmNlT2YiLCJvYmplY3RPZiIsIm9uZU9mIiwib25lT2ZUeXBlIiwiZXhhY3QiLCJjaGVja1Byb3BUeXBlcyIsIlByb3BUeXBlcyIsIm9yaWdpbmFsTW9kdWxlIiwid2VicGFja1BvbHlmaWxsIiwiX3JlZHV4TG9nZ2VyIiwiX3JlZHV4U2FnYTIiLCJfVG9wU2NyZWVuTWFwMiIsInJlZ0V4cCIsInJlcGxhY2VyIiwicGFydCIsIiRyZSIsImVzY2FwZSIsIk9wIiwiaXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRvU3RyaW5nVGFnU3ltYm9sIiwiaW5Nb2R1bGUiLCJydW50aW1lIiwiR2VuU3RhdGVTdXNwZW5kZWRTdGFydCIsIkdlblN0YXRlU3VzcGVuZGVkWWllbGQiLCJHZW5TdGF0ZUV4ZWN1dGluZyIsIkdlblN0YXRlQ29tcGxldGVkIiwiQ29udGludWVTZW50aW5lbCIsImdldFByb3RvIiwiTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUiLCJHcCIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwiR2VuZXJhdG9yIiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJpc0dlbmVyYXRvckZ1bmN0aW9uIiwiZ2VuRnVuIiwiY3RvciIsImF3cmFwIiwiX19hd2FpdCIsImRlZmluZUl0ZXJhdG9yTWV0aG9kcyIsIkFzeW5jSXRlcmF0b3IiLCJhc3luYyIsImlubmVyRm4iLCJvdXRlckZuIiwidHJ5TG9jc0xpc3QiLCJDb250ZXh0IiwicmVzZXQiLCJza2lwVGVtcFJlc2V0IiwiX3NlbnQiLCJkZWxlZ2F0ZSIsInRyeUVudHJpZXMiLCJyZXNldFRyeUVudHJ5Iiwicm9vdFJlY29yZCIsImNvbXBsZXRpb24iLCJydmFsIiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJsb2MiLCJjYXVnaHQiLCJyZWNvcmQiLCJ0cnlMb2MiLCJoYXNDYXRjaCIsImhhc0ZpbmFsbHkiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJmaW5hbGx5RW50cnkiLCJjb21wbGV0ZSIsImFmdGVyTG9jIiwiZmluaXNoIiwiY2F0Y2giLCJ0aHJvd24iLCJkZWxlZ2F0ZVlpZWxkIiwicmVzdWx0TmFtZSIsIm5leHRMb2MiLCJwcm90b0dlbmVyYXRvciIsImdlbmVyYXRvciIsIl9pbnZva2UiLCJkb25lUmVzdWx0IiwiZGVsZWdhdGVSZXN1bHQiLCJtYXliZUludm9rZURlbGVnYXRlIiwidHJ5Q2F0Y2giLCJtYWtlSW52b2tlTWV0aG9kIiwidW53cmFwcGVkIiwicHJldmlvdXNQcm9taXNlIiwiY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmciLCJpbmZvIiwicHVzaFRyeUVudHJ5IiwibG9jcyIsIml0ZXJhdG9yTWV0aG9kIiwiVE9fU1RSSU5HX1RBRyIsIkFycmF5VmFsdWVzIiwiRE9NSXRlcmFibGVzIiwiQ1NTUnVsZUxpc3QiLCJDU1NTdHlsZURlY2xhcmF0aW9uIiwiQ1NTVmFsdWVMaXN0IiwiQ2xpZW50UmVjdExpc3QiLCJET01SZWN0TGlzdCIsIkRPTVN0cmluZ0xpc3QiLCJET01Ub2tlbkxpc3QiLCJEYXRhVHJhbnNmZXJJdGVtTGlzdCIsIkZpbGVMaXN0IiwiSFRNTEFsbENvbGxlY3Rpb24iLCJIVE1MQ29sbGVjdGlvbiIsIkhUTUxGb3JtRWxlbWVudCIsIkhUTUxTZWxlY3RFbGVtZW50IiwiTWVkaWFMaXN0IiwiTWltZVR5cGVBcnJheSIsIk5hbWVkTm9kZU1hcCIsIk5vZGVMaXN0IiwiUGFpbnRSZXF1ZXN0TGlzdCIsIlBsdWdpbiIsIlBsdWdpbkFycmF5IiwiU1ZHTGVuZ3RoTGlzdCIsIlNWR051bWJlckxpc3QiLCJTVkdQYXRoU2VnTGlzdCIsIlNWR1BvaW50TGlzdCIsIlNWR1N0cmluZ0xpc3QiLCJTVkdUcmFuc2Zvcm1MaXN0IiwiU291cmNlQnVmZmVyTGlzdCIsIlN0eWxlU2hlZXRMaXN0IiwiVGV4dFRyYWNrQ3VlTGlzdCIsIlRleHRUcmFja0xpc3QiLCJUb3VjaExpc3QiLCJjb2xsZWN0aW9ucyIsImV4cGxpY2l0IiwiQ29sbGVjdGlvbiIsIiR0YXNrIiwiTVNJRSIsInRpbWUiLCJib3VuZEFyZ3MiLCJtaWNyb3Rhc2siLCJPQlNFUlZBQkxFIiwiY2xlYW51cFN1YnNjcmlwdGlvbiIsImNsZWFudXAiLCJfYyIsInN1YnNjcmlwdGlvbkNsb3NlZCIsIl9vIiwiY2xvc2VTdWJzY3JpcHRpb24iLCJzdWJzY3JpYmVyIiwiU3Vic2NyaXB0aW9uT2JzZXJ2ZXIiLCJfcyIsIiRPYnNlcnZhYmxlIiwiT2JzZXJ2YWJsZSIsIiRtZXRhZGF0YSIsInRvTWV0YUtleSIsIm9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEiLCJtZXRhZGF0YSIsIm1ldGFkYXRhS2V5IiwibWV0YWRhdGFWYWx1ZSIsIm9yZGluYXJ5SGFzT3duTWV0YWRhdGEiLCJoYXNPd25NZXRhZGF0YSIsIm9yZGluYXJ5SGFzTWV0YWRhdGEiLCJoYXNNZXRhZGF0YSIsIm9yZGluYXJ5T3duTWV0YWRhdGFLZXlzIiwiZ2V0T3duTWV0YWRhdGFLZXlzIiwib3JkaW5hcnlHZXRPd25NZXRhZGF0YSIsImdldE93bk1ldGFkYXRhIiwiU2V0Iiwib3JkaW5hcnlNZXRhZGF0YUtleXMiLCJvS2V5cyIsInBLZXlzIiwiZ2V0TWV0YWRhdGFLZXlzIiwib3JkaW5hcnlHZXRNZXRhZGF0YSIsImdldE1ldGFkYXRhIiwiZGVsZXRlTWV0YWRhdGEiLCJkZWZpbmVNZXRhZGF0YSIsInBlcmZvcm0iLCJ0cnkiLCJwcm9taXNlUmVzb2x2ZSIsImZpbmFsbHkiLCJvbkZpbmFsbHkiLCJzaWduYml0IiwidW11bGgiLCIkdSIsIiR2IiwidTAiLCJ2MCIsInUxIiwidjEiLCJERUdfUEVSX1JBRCIsIlBJIiwicmFkaWFucyIsImRlZ3JlZXMiLCJSQURfUEVSX0RFRyIsImltdWxoIiwiaXN1YmgiLCJ4MCIsInkwIiwiJHgwIiwiJHkwIiwiaWFkZGgiLCJmc2NhbGUiLCJjbGFtcCIsImxvd2VyIiwidXBwZXIiLCJpc0Vycm9yIiwidG9KU09OIiwiX19sb29rdXBTZXR0ZXJfXyIsIl9fbG9va3VwR2V0dGVyX18iLCJfX2RlZmluZUdldHRlcl9fIiwiJHZhbHVlcyIsImNyZWF0ZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImdldERlc2MiLCJnZXRGbGFncyIsIlJlZ0V4cFByb3RvIiwiJFJlZ0V4cFN0cmluZ0l0ZXJhdG9yIiwicmVnZXhwIiwiX3IiLCJtYXRjaEFsbCIsImxhc3RJbmRleCIsIiRwYWQiLCJwYWRFbmQiLCJwYWRTdGFydCIsIiRhdCIsImF0IiwiYXJyYXlTcGVjaWVzQ3JlYXRlIiwiZmxhdHRlbiIsImRlcHRoQXJnIiwiZmxhdE1hcCIsIiRpbmNsdWRlcyIsInNldFByb3RvIiwicHJvcGVydHlLZXkiLCJWIiwiZXhpc3RpbmdEZXNjcmlwdG9yIiwicmVjZWl2ZXIiLCJvd25EZXNjIiwiJHByZXZlbnRFeHRlbnNpb25zIiwiJGlzRXh0ZW5zaWJsZSIsIkVudW1lcmF0ZSIsImVudW1lcmF0ZSIsImRlbGV0ZVByb3BlcnR5IiwiYXR0cmlidXRlcyIsInJDb25zdHJ1Y3QiLCJORVdfVEFSR0VUX0JVRyIsIkFSR1NfQlVHIiwiVGFyZ2V0IiwibmV3VGFyZ2V0IiwiJGFyZ3MiLCJyQXBwbHkiLCJmQXBwbHkiLCJ0aGlzQXJndW1lbnQiLCJhcmd1bWVudHNMaXN0IiwiaW5pdCIsIiRpc1ZpZXciLCJpc1ZpZXciLCJmaXJzdCIsImZpbmFsIiwidmlld1MiLCJ2aWV3VCIsIkludGVybmFsIiwibmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5IiwiT3duUHJvbWlzZUNhcGFiaWxpdHkiLCJXcmFwcGVyIiwibmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUiLCJ2ZXJzaW9ucyIsInY4IiwiJFByb21pc2UiLCJlbXB0eSIsIlVTRV9OQVRJVkUiLCJGYWtlUHJvbWlzZSIsIlByb21pc2VSZWplY3Rpb25FdmVudCIsImlzVGhlbmFibGUiLCJpc1JlamVjdCIsIl9uIiwiX3YiLCJvayIsInJlYWN0aW9uIiwiZXhpdGVkIiwiZmFpbCIsIl9oIiwib25IYW5kbGVVbmhhbmRsZWQiLCJvblVuaGFuZGxlZCIsInVuaGFuZGxlZCIsImlzVW5oYW5kbGVkIiwib251bmhhbmRsZWRyZWplY3Rpb24iLCJyZWFzb24iLCJfYSIsIm9ucmVqZWN0aW9uaGFuZGxlZCIsIiRyZWplY3QiLCJfdyIsIiRyZXNvbHZlIiwiZXhlY3V0b3IiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJjYXBhYmlsaXR5IiwicmVtYWluaW5nIiwiJGluZGV4IiwiYWxyZWFkeUNhbGxlZCIsIlNQTElUIiwiJHNwbGl0IiwiX3NwbGl0IiwiJHB1c2giLCJOUENHIiwic2VwYXJhdG9yMiIsImxhc3RMZW5ndGgiLCJsYXN0TGFzdEluZGV4Iiwic3BsaXRMaW1pdCIsInNlcGFyYXRvckNvcHkiLCJTRUFSQ0giLCIkc2VhcmNoIiwiJHJlcGxhY2UiLCJzZWFyY2hWYWx1ZSIsInJlcGxhY2VWYWx1ZSIsIiRtYXRjaCIsIiRmbGFncyIsImRlZmluZSIsIiRSZWdFeHAiLCJyZTEiLCJyZTIiLCJDT1JSRUNUX05FVyIsInRpUkUiLCJwaVJFIiwiZmlVIiwiJGZpbmQiLCJmb3JjZWQiLCJORUdBVElWRV9aRVJPIiwiJGluZGV4T2YiLCIkcmVkdWNlIiwiJGV2ZXJ5IiwiJHNvbWUiLCIkZmlsdGVyIiwiJGZvckVhY2giLCJTVFJJQ1QiLCIkc29ydCIsInVwVG8iLCJjbG9uZWQiLCJoaW50IiwiVE9fUFJJTUlUSVZFIiwiRGF0ZVByb3RvIiwiZ2V0VGltZSIsIiR0b0lTT1N0cmluZyIsInRvSVNPU3RyaW5nIiwiZ2V0VVRDRnVsbFllYXIiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJnZXRVVENNb250aCIsImdldFVUQ0RhdGUiLCJnZXRVVENIb3VycyIsImdldFVUQ01pbnV0ZXMiLCJnZXRVVENTZWNvbmRzIiwicHYiLCIkc3RhcnRzV2l0aCIsInN0YXJ0c1dpdGgiLCJzZWFyY2giLCIkZW5kc1dpdGgiLCJlbmRzV2l0aCIsImVuZFBvc2l0aW9uIiwiY29kZVBvaW50QXQiLCJwb2ludCIsInJhdyIsImNhbGxTaXRlIiwidHBsIiwiJGZyb21Db2RlUG9pbnQiLCJmcm9tQ29kZVBvaW50IiwiY29kZSIsInRydW5jIiwidGFuaCIsInNpbmgiLCJsb2cyIiwibG9nMTAiLCJMT0cxMEUiLCIkaW11bCIsImltdWwiLCJ4biIsInluIiwieGwiLCJ5bCIsImh5cG90IiwidmFsdWUxIiwidmFsdWUyIiwiZGl2Iiwic3VtIiwibGFyZyIsInNxcnQiLCJjb3NoIiwiY2x6MzIiLCJMT0cyRSIsImNicnQiLCIkYXRhbmgiLCJhdGFuaCIsIiRhc2luaCIsImFzaW5oIiwiJGFjb3NoIiwiYWNvc2giLCJOdW1iZXIiLCJNQVhfVkFMVUUiLCJNSU5fU0FGRV9JTlRFR0VSIiwiTUFYX1NBRkVfSU5URUdFUiIsImlzSW50ZWdlciIsImlzU2FmZUludGVnZXIiLCJfaXNGaW5pdGUiLCIkZmFpbHMiLCJhTnVtYmVyVmFsdWUiLCIkdG9QcmVjaXNpb24iLCJ0b1ByZWNpc2lvbiIsInByZWNpc2lvbiIsIiR0b0ZpeGVkIiwiRVJST1IiLCJtdWx0aXBseSIsImMyIiwiZGl2aWRlIiwibnVtVG9TdHJpbmciLCJmcmFjdGlvbkRpZ2l0cyIsIiROdW1iZXIiLCJCUk9LRU5fQ09GIiwiVFJJTSIsInRvTnVtYmVyIiwiYXJndW1lbnQiLCJ0aGlyZCIsIm1heENvZGUiLCJkaWdpdHMiLCJIQVNfSU5TVEFOQ0UiLCJGdW5jdGlvblByb3RvIiwiRlByb3RvIiwibmFtZVJFIiwiJGlzU2VhbGVkIiwiJGlzRnJvemVuIiwiJHNlYWwiLCIkZnJlZXplIiwiJGdldFByb3RvdHlwZU9mIiwiJGdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIndrc0RlZmluZSIsImVudW1LZXlzIiwiX2NyZWF0ZSIsImdPUE5FeHQiLCIkSlNPTiIsIl9zdHJpbmdpZnkiLCJISURERU4iLCJTeW1ib2xSZWdpc3RyeSIsIkFsbFN5bWJvbHMiLCJPUFN5bWJvbHMiLCJRT2JqZWN0IiwiZmluZENoaWxkIiwic2V0U3ltYm9sRGVzYyIsInByb3RvRGVzYyIsImlzU3ltYm9sIiwiJGRlZmluZVByb3BlcnRpZXMiLCIkcHJvcGVydHlJc0VudW1lcmFibGUiLCIkZ2V0T3duUHJvcGVydHlOYW1lcyIsIiRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJJU19PUCIsImVzNlN5bWJvbHMiLCJ3ZWxsS25vd25TeW1ib2xzIiwiZm9yIiwia2V5Rm9yIiwidXNlU2V0dGVyIiwidXNlU2ltcGxlIiwiJHJlcGxhY2VyIiwiX2JhYmVsUG9seWZpbGwiLCJERUZJTkVfUFJPUEVSVFkiLCJkZWZhdWx0VmlldyIsIm93bmVyRG9jdW1lbnQiLCJOb2RlIiwibm9kZVR5cGUiLCJub2RlTmFtZSIsImlzVGV4dE5vZGUiLCJjb250YWluc05vZGUiLCJvdXRlck5vZGUiLCJpbm5lck5vZGUiLCJwYXJlbnROb2RlIiwiY29udGFpbnMiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImRvYyIsImFjdGl2ZUVsZW1lbnQiLCJjYW5Vc2VET00iLCJFeGVjdXRpb25FbnZpcm9ubWVudCIsImNhblVzZVdvcmtlcnMiLCJXb3JrZXIiLCJjYW5Vc2VFdmVudExpc3RlbmVycyIsImF0dGFjaEV2ZW50IiwiY2FuVXNlVmlld3BvcnQiLCJzY3JlZW4iLCJpc0luV29ya2VyIiwiYmEiLCJlYSIsImZhIiwiaGEiLCJqYSIsImthIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiX2NhdWdodEVycm9yIiwiX2hhc0NhdWdodEVycm9yIiwiX3JldGhyb3dFcnJvciIsIl9oYXNSZXRocm93RXJyb3IiLCJpbnZva2VHdWFyZGVkQ2FsbGJhY2siLCJpbnZva2VHdWFyZGVkQ2FsbGJhY2tBbmRDYXRjaEZpcnN0RXJyb3IiLCJoYXNDYXVnaHRFcnJvciIsImNsZWFyQ2F1Z2h0RXJyb3IiLCJyZXRocm93Q2F1Z2h0RXJyb3IiLCJvYSIsInBhIiwicWEiLCJyYSIsImV4dHJhY3RFdmVudHMiLCJldmVudFR5cGVzIiwic2EiLCJwaGFzZWRSZWdpc3RyYXRpb25OYW1lcyIsInRhIiwicmVnaXN0cmF0aW9uTmFtZSIsInVhIiwidmEiLCJkZXBlbmRlbmNpZXMiLCJ3YSIsInhhIiwiQ2EiLCJldmVudE5hbWVEaXNwYXRjaENvbmZpZ3MiLCJyZWdpc3RyYXRpb25OYW1lTW9kdWxlcyIsInJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXMiLCJwb3NzaWJsZVJlZ2lzdHJhdGlvbk5hbWVzIiwiaW5qZWN0RXZlbnRQbHVnaW5PcmRlciIsImluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSIsIkRhIiwiRWEiLCJGYSIsIkdhIiwiY3VycmVudFRhcmdldCIsIkhhIiwiSWEiLCJKYSIsIkthIiwiX2Rpc3BhdGNoTGlzdGVuZXJzIiwiX2Rpc3BhdGNoSW5zdGFuY2VzIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJpc1BlcnNpc3RlbnQiLCJMYSIsIk1hIiwiTmEiLCJPYSIsInN0YXRlTm9kZSIsImRpc2FibGVkIiwiUGEiLCJRYSIsIlJhIiwiaW5qZWN0aW9uIiwiZ2V0TGlzdGVuZXIiLCJydW5FdmVudHNJbkJhdGNoIiwicnVuRXh0cmFjdGVkRXZlbnRzSW5CYXRjaCIsIlNhIiwiVGEiLCJVYSIsIlZhIiwiWGEiLCJiYiIsInByZWNhY2hlRmliZXJOb2RlIiwiZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUiLCJnZXRJbnN0YW5jZUZyb21Ob2RlIiwiZ2V0Tm9kZUZyb21JbnN0YW5jZSIsImdldEZpYmVyQ3VycmVudFByb3BzRnJvbU5vZGUiLCJ1cGRhdGVGaWJlclByb3BzIiwiZGIiLCJkaXNwYXRjaENvbmZpZyIsImViIiwiX3RhcmdldEluc3QiLCJmYiIsImdiIiwiaGIiLCJpYiIsImpiIiwiYWx0ZXJuYXRlIiwia2IiLCJhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzIiwiYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NraXBUYXJnZXQiLCJhY2N1bXVsYXRlRW50ZXJMZWF2ZURpc3BhdGNoZXMiLCJhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlcyIsImxiIiwibWIiLCJfcm9vdCIsIl9zdGFydFRleHQiLCJfZmFsbGJhY2tUZXh0IiwibmIiLCJwYiIsInFiIiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwiZGVmYXVsdFByZXZlbnRlZCIsImlzVHJ1c3RlZCIsIm5hdGl2ZUV2ZW50IiwiSW50ZXJmYWNlIiwiaXNEZWZhdWx0UHJldmVudGVkIiwicmV0dXJuVmFsdWUiLCJzYiIsImV2ZW50UG9vbCIsInRiIiwiZGVzdHJ1Y3RvciIsInJiIiwiZ2V0UG9vbGVkIiwiY2FuY2VsQnViYmxlIiwicGVyc2lzdCIsInViIiwidmIiLCJ3YiIsInhiIiwieWIiLCJkb2N1bWVudE1vZGUiLCJ6YiIsIkFiIiwiQmIiLCJLYiIsImJlZm9yZUlucHV0IiwiYnViYmxlZCIsImNhcHR1cmVkIiwiY29tcG9zaXRpb25FbmQiLCJjb21wb3NpdGlvblN0YXJ0IiwiY29tcG9zaXRpb25VcGRhdGUiLCJMYiIsIk1iIiwiTmIiLCJkZXRhaWwiLCJPYiIsIlJiIiwid2hpY2giLCJQYiIsImN0cmxLZXkiLCJhbHRLZXkiLCJtZXRhS2V5IiwiY2hhciIsIlFiIiwiU2IiLCJUYiIsImluamVjdEZpYmVyQ29udHJvbGxlZEhvc3RDb21wb25lbnQiLCJVYiIsIlZiIiwiV2IiLCJyZXN0b3JlQ29udHJvbGxlZFN0YXRlIiwiWGIiLCJZYiIsIlpiIiwiJGIiLCJlbnF1ZXVlU3RhdGVSZXN0b3JlIiwibmVlZHNTdGF0ZVJlc3RvcmUiLCJyZXN0b3JlU3RhdGVJZk5lZWRlZCIsImJjIiwiY2MiLCJkYyIsImVjIiwiZmMiLCJkYXRlIiwiZGF0ZXRpbWUiLCJkYXRldGltZS1sb2NhbCIsImVtYWlsIiwibW9udGgiLCJwYXNzd29yZCIsInJhbmdlIiwidGVsIiwid2VlayIsImdjIiwiaGMiLCJjb3JyZXNwb25kaW5nVXNlRWxlbWVudCIsImljIiwiamMiLCJsYyIsIl92YWx1ZVRyYWNrZXIiLCJnZXRWYWx1ZSIsInNldFZhbHVlIiwic3RvcFRyYWNraW5nIiwia2MiLCJtYyIsImNoZWNrZWQiLCJuYyIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwiUmVhY3RDdXJyZW50T3duZXIiLCJvYyIsInFjIiwicmMiLCJzYyIsInRjIiwidWMiLCJ2YyIsIndjIiwieGMiLCJ5YyIsInpjIiwiQWMiLCIkJHR5cGVvZiIsIkJjIiwiX2RlYnVnT3duZXIiLCJfZGVidWdTb3VyY2UiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJDYyIsIkRjIiwiRWMiLCJhY2NlcHRzQm9vbGVhbnMiLCJhdHRyaWJ1dGVOYW1lIiwiYXR0cmlidXRlTmFtZXNwYWNlIiwibXVzdFVzZVByb3BlcnR5IiwicHJvcGVydHlOYW1lIiwiU2MiLCJUYyIsIlVjIiwiR2MiLCJIYyIsIkZjIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlTlMiLCJWYyIsImRlZmF1bHRDaGVja2VkIiwiZGVmYXVsdFZhbHVlIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxDaGVja2VkIiwiV2MiLCJYYyIsImluaXRpYWxWYWx1ZSIsImNvbnRyb2xsZWQiLCJZYyIsIlpjIiwiJGMiLCJhZCIsInRhYkluZGV4IiwiYmQiLCJjaGFuZ2UiLCJjZCIsImRkIiwiZWQiLCJmZCIsImdkIiwiaGQiLCJqZCIsImRldGFjaEV2ZW50Iiwia2QiLCJsZCIsIm1kIiwibmQiLCJvZCIsInBkIiwiX2lzSW5wdXRFdmVudFN1cHBvcnRlZCIsInFkIiwicmQiLCJBbHQiLCJDb250cm9sIiwiTWV0YSIsIlNoaWZ0Iiwic2QiLCJnZXRNb2RpZmllclN0YXRlIiwidGQiLCJ1ZCIsInNjcmVlblgiLCJzY3JlZW5ZIiwiY2xpZW50WCIsImNsaWVudFkiLCJzaGlmdEtleSIsImJ1dHRvbnMiLCJyZWxhdGVkVGFyZ2V0IiwiZnJvbUVsZW1lbnQiLCJzcmNFbGVtZW50IiwidG9FbGVtZW50IiwidmQiLCJtb3VzZUVudGVyIiwibW91c2VMZWF2ZSIsIndkIiwicGFyZW50V2luZG93IiwieGQiLCJlZmZlY3RUYWciLCJ5ZCIsIl9yZWFjdEludGVybmFsRmliZXIiLCJ6ZCIsIkFkIiwiY2hpbGQiLCJzaWJsaW5nIiwiQmQiLCJEZCIsImVsYXBzZWRUaW1lIiwicHNldWRvRWxlbWVudCIsIkVkIiwiY2xpcGJvYXJkRGF0YSIsIkZkIiwiR2QiLCJjaGFyQ29kZSIsIkhkIiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsIklkIiwiOCIsIjkiLCIxMiIsIjEzIiwiMTYiLCIxNyIsIjE4IiwiMTkiLCIyMCIsIjI3IiwiMzIiLCIzMyIsIjM0IiwiMzUiLCIzNiIsIjM3IiwiMzgiLCIzOSIsIjQwIiwiNDUiLCI0NiIsIjExMiIsIjExMyIsIjExNCIsIjExNSIsIjExNiIsIjExNyIsIjExOCIsIjExOSIsIjEyMCIsIjEyMSIsIjEyMiIsIjEyMyIsIjE0NCIsIjE0NSIsIjIyNCIsIkpkIiwibG9jYWxlIiwiS2QiLCJkYXRhVHJhbnNmZXIiLCJMZCIsInRvdWNoZXMiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJNZCIsIk5kIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCJPZCIsIlBkIiwiUWQiLCJpc0ludGVyYWN0aXZlIiwiUmQiLCJpc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGUiLCJTZCIsIlRkIiwiVWQiLCJ0YXJnZXRJbnN0IiwiYW5jZXN0b3JzIiwiY29udGFpbmVySW5mbyIsInRvcExldmVsVHlwZSIsIlZkIiwiV2QiLCJYZCIsIllkIiwiWmQiLCIkZCIsIl9lbmFibGVkIiwic2V0RW5hYmxlZCIsImlzRW5hYmxlZCIsInRyYXBCdWJibGVkRXZlbnQiLCJ0cmFwQ2FwdHVyZWRFdmVudCIsImFlIiwiYmUiLCJhbmltYXRpb25lbmQiLCJhbmltYXRpb25pdGVyYXRpb24iLCJhbmltYXRpb25zdGFydCIsInRyYW5zaXRpb25lbmQiLCJjZSIsImRlIiwiZWUiLCJmZSIsInRvcEFuaW1hdGlvbkVuZCIsInRvcEFuaW1hdGlvbkl0ZXJhdGlvbiIsInRvcEFuaW1hdGlvblN0YXJ0IiwidG9wQmx1ciIsInRvcENhbmNlbCIsInRvcENoYW5nZSIsInRvcENsaWNrIiwidG9wQ2xvc2UiLCJ0b3BDb21wb3NpdGlvbkVuZCIsInRvcENvbXBvc2l0aW9uU3RhcnQiLCJ0b3BDb21wb3NpdGlvblVwZGF0ZSIsInRvcENvbnRleHRNZW51IiwidG9wQ29weSIsInRvcEN1dCIsInRvcERvdWJsZUNsaWNrIiwidG9wRHJhZyIsInRvcERyYWdFbmQiLCJ0b3BEcmFnRW50ZXIiLCJ0b3BEcmFnRXhpdCIsInRvcERyYWdMZWF2ZSIsInRvcERyYWdPdmVyIiwidG9wRHJhZ1N0YXJ0IiwidG9wRHJvcCIsInRvcEZvY3VzIiwidG9wSW5wdXQiLCJ0b3BLZXlEb3duIiwidG9wS2V5UHJlc3MiLCJ0b3BLZXlVcCIsInRvcExvYWQiLCJ0b3BMb2FkU3RhcnQiLCJ0b3BNb3VzZURvd24iLCJ0b3BNb3VzZU1vdmUiLCJ0b3BNb3VzZU91dCIsInRvcE1vdXNlT3ZlciIsInRvcE1vdXNlVXAiLCJ0b3BQYXN0ZSIsInRvcFNjcm9sbCIsInRvcFNlbGVjdGlvbkNoYW5nZSIsInRvcFRleHRJbnB1dCIsInRvcFRvZ2dsZSIsInRvcFRvdWNoQ2FuY2VsIiwidG9wVG91Y2hFbmQiLCJ0b3BUb3VjaE1vdmUiLCJ0b3BUb3VjaFN0YXJ0IiwidG9wVHJhbnNpdGlvbkVuZCIsInRvcFdoZWVsIiwiZ2UiLCJ0b3BBYm9ydCIsInRvcENhblBsYXkiLCJ0b3BDYW5QbGF5VGhyb3VnaCIsInRvcER1cmF0aW9uQ2hhbmdlIiwidG9wRW1wdGllZCIsInRvcEVuY3J5cHRlZCIsInRvcEVuZGVkIiwidG9wRXJyb3IiLCJ0b3BMb2FkZWREYXRhIiwidG9wTG9hZGVkTWV0YWRhdGEiLCJ0b3BQYXVzZSIsInRvcFBsYXkiLCJ0b3BQbGF5aW5nIiwidG9wUHJvZ3Jlc3MiLCJ0b3BSYXRlQ2hhbmdlIiwidG9wU2Vla2VkIiwidG9wU2Vla2luZyIsInRvcFN0YWxsZWQiLCJ0b3BTdXNwZW5kIiwidG9wVGltZVVwZGF0ZSIsInRvcFZvbHVtZUNoYW5nZSIsInRvcFdhaXRpbmciLCJoZSIsImllIiwiamUiLCJrZSIsImxlIiwiZmlyc3RDaGlsZCIsIm1lIiwidGV4dENvbnRlbnQiLCJuZXh0U2libGluZyIsIm5lIiwiY29udGVudEVkaXRhYmxlIiwib2UiLCJwZSIsInFlIiwic2UiLCJ0ZSIsInVlIiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJnZXRTZWxlY3Rpb24iLCJhbmNob3JOb2RlIiwiYW5jaG9yT2Zmc2V0IiwiZm9jdXNOb2RlIiwiZm9jdXNPZmZzZXQiLCJ2ZSIsIm9uU2VsZWN0IiwieGUiLCJwZW5kaW5nUHJvcHMiLCJtZW1vaXplZFN0YXRlIiwidXBkYXRlUXVldWUiLCJtZW1vaXplZFByb3BzIiwibGFzdEVmZmVjdCIsImZpcnN0RWZmZWN0IiwibmV4dEVmZmVjdCIsImV4cGlyYXRpb25UaW1lIiwiemUiLCJBZSIsImlzUmVhY3RDb21wb25lbnQiLCJCZSIsIkNlIiwiRGUiLCJwZW5kaW5nQ2hpbGRyZW4iLCJpbXBsZW1lbnRhdGlvbiIsIlNpbXBsZUV2ZW50UGx1Z2luIiwiRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIiwiQ2hhbmdlRXZlbnRQbHVnaW4iLCJTZWxlY3RFdmVudFBsdWdpbiIsIkJlZm9yZUlucHV0RXZlbnRQbHVnaW4iLCJFZSIsIkZlIiwiR2UiLCJJZSIsIkplIiwiS2UiLCJiYXNlU3RhdGUiLCJjYWxsYmFja0xpc3QiLCJoYXNGb3JjZVVwZGF0ZSIsImlzSW5pdGlhbGl6ZWQiLCJjYXB0dXJlZFZhbHVlcyIsIkxlIiwiTWUiLCJOZSIsIk9lIiwiUGUiLCJRZSIsInBhcnRpYWxTdGF0ZSIsIlJlIiwiaXNSZXBsYWNlIiwiaXNGb3JjZWQiLCJjYXB0dXJlZFZhbHVlIiwiU2UiLCJVZSIsIlZlIiwiX293bmVyIiwiX3N0cmluZ1JlZiIsInJlZnMiLCJXZSIsIlhlIiwiUSIsIkgiLCJZZSIsIlplIiwiJGUiLCJwZW5kaW5nQ29udGV4dCIsIlkiLCJzaG91bGRTZXRUZXh0Q29udGVudCIsInNob3VsZERlcHJpb3JpdGl6ZVN1YnRyZWUiLCJwdXNoSG9zdENvbnRleHQiLCJwdXNoSG9zdENvbnRhaW5lciIsInB1c2hQcm92aWRlciIsImdldE1hc2tlZENvbnRleHQiLCJnZXRVbm1hc2tlZENvbnRleHQiLCJoYXNDb250ZXh0Q2hhbmdlZCIsInB1c2hDb250ZXh0UHJvdmlkZXIiLCJwdXNoVG9wTGV2ZWxDb250ZXh0T2JqZWN0IiwiaW52YWxpZGF0ZUNvbnRleHRQcm92aWRlciIsImVudGVySHlkcmF0aW9uU3RhdGUiLCJXYSIsInJlc2V0SHlkcmF0aW9uU3RhdGUiLCJDYiIsInRyeVRvQ2xhaW1OZXh0SHlkcmF0YWJsZUluc3RhbmNlIiwiSmMiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsInVwZGF0ZXIiLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJjYWNoZUNvbnRleHQiLCJpc0NvbnRleHRDb25zdW1lciIsImlzTW91bnRlZCIsImVucXVldWVTZXRTdGF0ZSIsImVucXVldWVGb3JjZVVwZGF0ZSIsImFkb3B0Q2xhc3NJbnN0YW5jZSIsImNhbGxHZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJjb25zdHJ1Y3RDbGFzc0luc3RhbmNlIiwibW91bnRDbGFzc0luc3RhbmNlIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbE1vdW50IiwicmVzdW1lTW91bnRDbGFzc0luc3RhbmNlIiwidXBkYXRlQ2xhc3NJbnN0YW5jZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsIlRlIiwiS2MiLCJMYyIsIkRiIiwiTWMiLCJFYiIsImJlZ2luV29yayIsImh5ZHJhdGUiLCJfY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJfY3VycmVudFZhbHVlIiwiX2NoYW5nZWRCaXRzIiwidW5zdGFibGVfb2JzZXJ2ZWRCaXRzIiwiY2YiLCJzdXBwcmVzc1JlYWN0RXJyb3JMb2dnaW5nIiwiZWYiLCJsZiIsIkkiLCJZYSIsIloiLCJOYyIsInlhIiwiY2EiLCJwZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWUiLCJPYyIsIlphIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUNhdGNoIiwiY29tcG9uZW50RGlkQ2F0Y2giLCJpYSIsInphIiwiZGEiLCJGYiIsInhnIiwieWUiLCJJYyIsIlBjIiwiR2IiLCJtZyIsIlFjIiwibGciLCJ0aW1lb3V0IiwibmV4dFNjaGVkdWxlZFJvb3QiLCJyZW1haW5pbmdFeHBpcmF0aW9uVGltZSIsImxhIiwiSiIsIkhiIiwiYWEiLCIkYSIsIkliIiwiQWEiLCJfb25Db21wbGV0ZSIsIndnIiwiQmEiLCJKYiIsImZpbmlzaGVkV29yayIsImZpcnN0QmF0Y2giLCJfZXhwaXJhdGlvblRpbWUiLCJfZGVmZXIiLCJ6ZyIsImFiIiwia2ciLCJ3ZSIsImdnIiwiQWciLCJoZyIsImlnIiwiamciLCJ0aW1lUmVtYWluaW5nIiwiQmciLCJjcmVhdGVDdXJzb3IiLCJjaGVja1RoYXRTdGFja0lzRW1wdHkiLCJyZXNldFN0YWNrQWZ0ZXJGYXRhbEVycm9ySW5EZXYiLCJrZiIsImdldENoaWxkSG9zdENvbnRleHQiLCJnZXRSb290SG9zdENvbnRleHQiLCJnZXRIb3N0Q29udGV4dCIsImdldFJvb3RIb3N0Q29udGFpbmVyIiwicG9wSG9zdENvbnRhaW5lciIsInBvcEhvc3RDb250ZXh0IiwiZmYiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJpc0NvbnRleHRQcm92aWRlciIsInBvcENvbnRleHRQcm92aWRlciIsInBvcFRvcExldmVsQ29udGV4dE9iamVjdCIsInByb2Nlc3NDaGlsZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsImZpbmRDdXJyZW50VW5tYXNrZWRDb250ZXh0IiwiaGYiLCJwb3BQcm92aWRlciIsImpmIiwiaHlkcmF0aW9uIiwicHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZSIsInByZXBhcmVUb0h5ZHJhdGVIb3N0VGV4dEluc3RhbmNlIiwicG9wSHlkcmF0aW9uU3RhdGUiLCJjYW5IeWRyYXRlSW5zdGFuY2UiLCJjYW5IeWRyYXRlVGV4dEluc3RhbmNlIiwiZ2V0TmV4dEh5ZHJhdGFibGVTaWJsaW5nIiwiZ2V0Rmlyc3RIeWRyYXRhYmxlQ2hpbGQiLCJoeWRyYXRlSW5zdGFuY2UiLCJoeWRyYXRlVGV4dEluc3RhbmNlIiwiZ2YiLCJjcmVhdGVJbnN0YW5jZSIsImNyZWF0ZVRleHRJbnN0YW5jZSIsImFwcGVuZEluaXRpYWxDaGlsZCIsImZpbmFsaXplSW5pdGlhbENoaWxkcmVuIiwicHJlcGFyZVVwZGF0ZSIsInBlcnNpc3RlbmNlIiwibXV0YXRpb24iLCJjb21wbGV0ZVdvcmsiLCJhZiIsInRocm93RXhjZXB0aW9uIiwidW53aW5kV29yayIsInVud2luZEludGVycnVwdGVkV29yayIsImJmIiwiZ2V0UHVibGljSW5zdGFuY2UiLCJjb21taXRNb3VudCIsImNvbW1pdFVwZGF0ZSIsInJlc2V0VGV4dENvbnRlbnQiLCJjb21taXRUZXh0VXBkYXRlIiwiYXBwZW5kQ2hpbGRUb0NvbnRhaW5lciIsImluc2VydEJlZm9yZSIsImluc2VydEluQ29udGFpbmVyQmVmb3JlIiwicmVtb3ZlQ2hpbGRGcm9tQ29udGFpbmVyIiwiY29tbWl0QmVmb3JlTXV0YXRpb25MaWZlQ3ljbGVzIiwiX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUiLCJjb21taXRSZXNldFRleHRDb250ZW50IiwiY29tbWl0UGxhY2VtZW50IiwiY29tbWl0RGVsZXRpb24iLCJjb21taXRXb3JrIiwiY29tbWl0TGlmZUN5Y2xlcyIsImNvbW1pdEVycm9yTG9nZ2luZyIsImNvbXBvbmVudFN0YWNrIiwiY29tbWl0QXR0YWNoUmVmIiwiY29tbWl0RGV0YWNoUmVmIiwiZGYiLCJzY2hlZHVsZURlZmVycmVkQ2FsbGJhY2siLCJjYW5jZWxEZWZlcnJlZENhbGxiYWNrIiwicHJlcGFyZUZvckNvbW1pdCIsInJlc2V0QWZ0ZXJDb21taXQiLCJSYyIsInJlY2FsY3VsYXRlQ3VycmVudFRpbWUiLCJjb21wdXRlRXhwaXJhdGlvbkZvckZpYmVyIiwic2NoZWR1bGVXb3JrIiwicmVxdWVzdFdvcmsiLCJmbHVzaFJvb3QiLCJiYXRjaGVkVXBkYXRlcyIsInVuYmF0Y2hlZFVwZGF0ZXMiLCJmbHVzaFN5bmMiLCJmbHVzaENvbnRyb2xsZWQiLCJkZWZlcnJlZFVwZGF0ZXMiLCJzeW5jVXBkYXRlcyIsImludGVyYWN0aXZlVXBkYXRlcyIsImZsdXNoSW50ZXJhY3RpdmVVcGRhdGVzIiwiY29tcHV0ZVVuaXF1ZUFzeW5jRXhwaXJhdGlvbiIsImxlZ2FjeUNvbnRleHQiLCJtZiIsImNyZWF0ZUNvbnRhaW5lciIsInVwZGF0ZUNvbnRhaW5lciIsInVwZGF0ZUNvbnRhaW5lckF0RXhwaXJhdGlvblRpbWUiLCJnZXRQdWJsaWNSb290SW5zdGFuY2UiLCJmaW5kSG9zdEluc3RhbmNlIiwiZmluZEhvc3RJbnN0YW5jZVdpdGhOb1BvcnRhbHMiLCJDZCIsImluamVjdEludG9EZXZUb29scyIsImZpbmRGaWJlckJ5SG9zdEluc3RhbmNlIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJpbmplY3QiLCJvbkNvbW1pdEZpYmVyUm9vdCIsIm9uQ29tbWl0RmliZXJVbm1vdW50IiwiSGUiLCJmaW5kSG9zdEluc3RhbmNlQnlGaWJlciIsIm5mIiwicGYiLCJyZiIsInNmIiwidGYiLCJ1ZiIsInJlcXVlc3RJZGxlQ2FsbGJhY2siLCJjYW5jZWxJZGxlQ2FsbGJhY2siLCJ2ZiIsIndmIiwieGYiLCJ5ZiIsInpmIiwiQWYiLCJCZiIsIkNmIiwiZGlkVGltZW91dCIsIkRmIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiRWYiLCJHZiIsIkNoaWxkcmVuIiwiRmYiLCJIZiIsInNlbGVjdGVkIiwiZGVmYXVsdFNlbGVjdGVkIiwiSWYiLCJ3YXNNdWx0aXBsZSIsIm11bHRpcGxlIiwiSmYiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsIktmIiwiTGYiLCJNZiIsIk5mIiwibWF0aG1sIiwic3ZnIiwiT2YiLCJQZiIsIlFmIiwiUmYiLCJuYW1lc3BhY2VVUkkiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwiU2YiLCJsYXN0Q2hpbGQiLCJub2RlVmFsdWUiLCJUZiIsImdyaWRSb3dTcGFuIiwiZ3JpZENvbHVtblNwYW4iLCJVZiIsIlZmIiwic2V0UHJvcGVydHkiLCJXZiIsIm1lbnVpdGVtIiwiYmFzZSIsImJyIiwiZW1iZWQiLCJociIsImtleWdlbiIsInBhcmFtIiwidHJhY2siLCJ3YnIiLCJYZiIsIllmIiwiWmYiLCIkZiIsImFnIiwiY3JlYXRlRWxlbWVudE5TIiwiYmciLCJfX2h0bWwiLCJvbmNsaWNrIiwiZGciLCJlZyIsImZnIiwibmciLCJvZyIsInNldEluaXRpYWxQcm9wZXJ0aWVzIiwiZGlmZlByb3BlcnRpZXMiLCJ1cGRhdGVQcm9wZXJ0aWVzIiwiZGlmZkh5ZHJhdGVkUHJvcGVydGllcyIsImRpZmZIeWRyYXRlZFRleHQiLCJ3YXJuRm9yVW5tYXRjaGVkVGV4dCIsIndhcm5Gb3JEZWxldGVkSHlkcmF0YWJsZUVsZW1lbnQiLCJ3YXJuRm9yRGVsZXRlZEh5ZHJhdGFibGVUZXh0Iiwid2FybkZvckluc2VydGVkSHlkcmF0ZWRFbGVtZW50Iiwid2FybkZvckluc2VydGVkSHlkcmF0ZWRUZXh0IiwicXVlcnlTZWxlY3RvckFsbCIsImZvcm0iLCJwZyIsInFnIiwicmciLCJYIiwiX2NhbGxiYWNrcyIsIl9uZXh0IiwiX2hhc0NoaWxkcmVuIiwiX2RpZENvbXBsZXRlIiwiX2NoaWxkcmVuIiwic2ciLCJfZGlkQ29tbWl0IiwiX29uQ29tbWl0IiwidGciLCJfaW50ZXJuYWxSb290IiwidWciLCJ2ZyIsImF1dG9Gb2N1cyIsImNvbW1pdCIsInVubW91bnQiLCJsZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJjcmVhdGVCYXRjaCIsInRhZ05hbWUiLCJyYW5nZUNvdW50IiwiZm9jdXNlZEVsZW0iLCJzZWxlY3Rpb25SYW5nZSIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnQiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsInNldEVuZCIsImZvY3VzIiwiaGlkZGVuIiwiZGlkTm90TWF0Y2hIeWRyYXRlZENvbnRhaW5lclRleHRJbnN0YW5jZSIsImRpZE5vdE1hdGNoSHlkcmF0ZWRUZXh0SW5zdGFuY2UiLCJkaWROb3RIeWRyYXRlQ29udGFpbmVySW5zdGFuY2UiLCJkaWROb3RIeWRyYXRlSW5zdGFuY2UiLCJkaWROb3RGaW5kSHlkcmF0YWJsZUNvbnRhaW5lckluc3RhbmNlIiwiZGlkTm90RmluZEh5ZHJhdGFibGVDb250YWluZXJUZXh0SW5zdGFuY2UiLCJkaWROb3RGaW5kSHlkcmF0YWJsZUluc3RhbmNlIiwiZGlkTm90RmluZEh5ZHJhdGFibGVUZXh0SW5zdGFuY2UiLCJDZyIsIkVnIiwiX3JlYWN0Um9vdENvbnRhaW5lciIsImhhc0F0dHJpYnV0ZSIsIkRnIiwiRmciLCJxZiIsIkdnIiwiY3JlYXRlUG9ydGFsIiwiZmluZERPTU5vZGUiLCJ1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCJ1bnN0YWJsZV9jcmVhdGVQb3J0YWwiLCJ1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyIsInVuc3RhYmxlX2RlZmVycmVkVXBkYXRlcyIsInVuc3RhYmxlX2ZsdXNoQ29udHJvbGxlZCIsIkV2ZW50UGx1Z2luSHViIiwiRXZlbnRQbHVnaW5SZWdpc3RyeSIsIkV2ZW50UHJvcGFnYXRvcnMiLCJSZWFjdENvbnRyb2xsZWRDb21wb25lbnQiLCJSZWFjdERPTUNvbXBvbmVudFRyZWUiLCJSZWFjdERPTUV2ZW50TGlzdGVuZXIiLCJ1bnN0YWJsZV9jcmVhdGVSb290IiwiYnVuZGxlVHlwZSIsInJlbmRlcmVyUGFja2FnZU5hbWUiLCJIZyIsIklnIiwiY2hlY2tEQ0UiLCJfX3NlbGYiLCJfX3NvdXJjZSIsImtleVByZWZpeCIsIj0iLCI6IiwidG9BcnJheSIsImNyZWF0ZVJlZiIsIlB1cmVDb21wb25lbnQiLCJjcmVhdGVDb250ZXh0IiwiX2RlZmF1bHRWYWx1ZSIsIkNvbnN1bWVyIiwiZm9yd2FyZFJlZiIsIkZyYWdtZW50IiwiU3RyaWN0TW9kZSIsInVuc3RhYmxlX0FzeW5jTW9kZSIsImNsb25lRWxlbWVudCIsImNyZWF0ZUZhY3RvcnkiLCJpc1ZhbGlkRWxlbWVudCIsIkFwcCIsIl9CYXNlMiIsIlJlYWN0RE9NIiwiZnJlZUdsb2JhbCJdLCJtYXBwaW5ncyI6ImFBQ0EsSUFBQUEsS0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUMsUUFHQSxJQUFBQyxFQUFBSixFQUFBRSxJQUNBRyxFQUFBSCxFQUNBSSxHQUFBLEVBQ0FILFlBVUEsT0FOQUksRUFBQUwsR0FBQU0sS0FBQUosRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUYsR0FHQUcsRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQUtBRixFQUFBUSxFQUFBRixFQUdBTixFQUFBUyxFQUFBVixFQUdBQyxFQUFBVSxFQUFBLFNBQUFSLEVBQUFTLEVBQUFDLEdBQ0FaLEVBQUFhLEVBQUFYLEVBQUFTLElBQ0FHLE9BQUFDLGVBQUFiLEVBQUFTLEdBQ0FLLGNBQUEsRUFDQUMsWUFBQSxFQUNBQyxJQUFBTixL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QyxNQUNJQyxTQUFVLE9BQ1ZDLFdBQVksR0FDWkMsV0FBWSxFQUNaQyxXQUFZLEVBQ1pDLFdBQVksR0FDWkMsT0FBUSxHQUNSQyxPQUFRLEdBQ1JDLE9BQVEsRUFDUmxCLEtBQU0sRUFFTkosUUFDQXRXLFVBQ0E2WCxNQUFPLEtBSVhoQixPQUFRLEVBQ1JDLFNBQVUsUUFDVkMsU0FBVSxFQUNWNVQsS0FBTSxPQUNONlQsR0FBSSxJQUNKQyxHQUFJLEdBQ0pDLEdBQUksSUFDSkMsR0FBSSxJQUVKQyxNQUNJQyxTQUFVLE9BQ1ZDLFdBQVksRUFDWkMsV0FBWSxFQUNaQyxXQUFZLEVBQ1pDLFdBQVksRUFDWkMsT0FBUSxFQUNSQyxPQUFRLEdBQ1JDLE9BQVEsRUFDUmxCLEtBQU0sRUFFTkosUUFDQXRXLFVBQ0E2WCxNQUFPLEtBSVhoQixPQUFRLEVBQ1JDLFNBQVUsUUFDVkMsU0FBVSxFQUNWNVQsS0FBTSxPQUNONlQsR0FBSSxJQUNKQyxHQUFJLElBQ0pDLEdBQUksSUFDSkMsR0FBSSxJQUVKQyxNQUNJQyxTQUFVLE9BQ1ZDLFdBQVksRUFDWkMsV0FBWSxFQUNaQyxXQUFZLEVBQ1pDLFdBQVksRUFDWkMsT0FBUSxFQUNSQyxPQUFRLEdBQ1JDLE9BQVEsRUFDUmxCLEtBQU0sRUFFTkosUUFDQXRXLFVBQ0E2WCxNQUFPLEtBSVhoQixPQUFRLEVBQ1JDLFNBQVUsUUFDVkMsU0FBVSxFQUNWNVQsS0FBTSxPQUNONlQsR0FBSSxJQUNKQyxHQUFJLElBQ0pDLEdBQUksSUFDSkMsR0FBSSxJQUVKQyxNQUNJQyxTQUFVLE9BQ1ZDLFdBQVksRUFDWkMsV0FBWSxFQUNaQyxXQUFZLEVBQ1pDLFdBQVksRUFDWkMsT0FBUSxFQUNSQyxPQUFRLEdBQ1JDLE9BQVEsRUFDUmxCLEtBQU0sRUFFTkosUUFDQXRXLFVBQ0E2WCxNQUFPLEtBSVhoQixPQUFRLEVBQ1JDLFNBQVUsUUFDVkMsU0FBVSxFQUNWNVQsS0FBTSxPQUNONlQsR0FBSSxHQUNKQyxHQUFJLElBQ0pDLEdBQUksSUFDSkMsR0FBSSxJQUVKQyxNQUNJQyxTQUFV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S0FBTSxPQUNONlQsR0FBSSxJQUNKQyxHQUFJLElBQ0pDLEdBQUksSUFDSkMsR0FBSSxJQUVKQyxNQUNJQyxTQUFVLE9BQ1ZDLFdBQVksRUFDWkMsV0FBWSxFQUNaQyxXQUFZLEVBQ1pDLFdBQVksRUFDWkMsT0FBUSxFQUNSQyxPQUFRLEdBQ1JDLE9BQVEsRUFDUmxCLEtBQU0sRUFFTkosUUFDQXRXLFVBQ0E2WCxNQUFPLEtBSVhoQixPQUFRLEdBQ1JDLFNBQVUsUUFDVkMsU0FBVSxFQUNWNVQsS0FBTSxPQUNONlQsR0FBSSxJQUNKQyxHQUFJLElBQ0pDLEdBQUksSUFDSkMsR0FBSSxJQUVKQyxNQUNJQyxTQUFVLE9BQ1ZDLFdBQVksRUFDWkMsV0FBWSxFQUNaQyxXQUFZLEVBQ1pDLFdBQVksRUFDWkMsT0FBUSxFQUNSQyxPQUFRLEdBQ1JDLE9BQVEsRUFDUmxCLEtBQU0sRUFFTkosUUFDQXRXLFVBQ0E2WCxNQUFPLEtBSVhoQixPQUFRLEdBQ1JDLFNBQVUsVUFDVkMsU0FBVSxFQUNWNVQsS0FBTSxPQUNONlQsR0FBSSxJQUNKQyxHQUFJLElBQ0pDLEdBQUksSUFDSkMsR0FBSSxJQUVKQyxNQUNJQyxTQUFVLE9BQ1ZDLFdBQVksR0FDWkMsV0FBWSxHQUNaQyxXQUFZLEVBQ1pDLFdBQVksRUFDWkMsT0FBUSxHQUNSQyxPQUFRLEdBQ1JDLE9BQVEsRUFDUmxCLEtBQU0sRUFFTkosUUFDQXRXLFVBQ0E2WCxNQUFPLEtBSVhoQixPQUFRLEdBQ1JDLFNBQVUsVUFDVkMsU0FBVSxFQUNWNVQsS0FBTSxPQUNONlQsR0FBSSxJQUNKQyxHQUFJLElBQ0pDLEdBQUksSUFDSkMsR0FBSSxJQUVKQyxNQUNJQyxTQUFVLE9BQ1ZDLFdBQVksRUFDWkMsV0FBWSxFQUNaQyxXQUFZLEdBQ1pDLFdBQVksR0FDWkMsT0FBUSxHQUNSQyxPQUFRLEdBQ1JDLE9BQVEsRUFDUmxCLEtBQU0sRUFFTkosUUFDQXRXLFVBQ0E2WCxNQUFPLEtBSVhoQixPQUFRLEdBQ1JDLFNBQVUsVUFDVkMsU0FBVSxFQUNWNVQsS0FBTSxPQUNONlQsR0FBSSxJQUNKQyxHQUFJLElBQ0pDLEdBQUksSUFDSkMsR0FBSSxJQUVKQyxNQUNJQyxTQUFVLE9BQ1ZDLFdBQVksR0FDWkMsV0FBWSxFQUNaQyxXQUFZLEVBQ1pDLFdBQVksRUFDWkMsT0FBUSxHQUNSQyxPQUFRLEdBQ1JDLE9BQVEsRUFDUmxCLEtBQU0sRUFFTkosUUFDQXRXLFVBQ0E2WCxNQUFPLEtBSVhoQixPQUFRLEdBQ1JDLFNBQVUsUUFDVkMsU0FBVSxFQUNWNVQsS0FBTSxPQUNONlQsR0FBSSxJQUNKQyxHQUFJLElBQ0pDLEdBQUksSUFDSkMsR0FBSSxJQUVKQyxNQUNJQyxTQUFVLE9BQ1ZDLFdBQVksRUFDWkMsV0FBWSxFQUNaQyxXQUFZLEVBQ1pDLFdBQVksRUFDWkMsT0FBUSxFQUNSQyxPQUFRLEdBQ1JDLE9BQVEsRUFDUmxCLEtBQU0sRUFFTkosUUFDQXRXLFVBQ0E2WCxNQUFPLEtBSVhoQixPQUFRLEdBQ1JDLFNBQVUsUUFDVkMsU0FBVSxFQUNWNVQsS0FBTSxPQUNONlQsR0FBSSxJQUNKQyxHQUFJLElBQ0pDLEdBQUksSUFDSkMsR0FBSSxJQUVKQyxNQUNJQyxTQUFVLE9BQ1ZDLFdBQVksRUFDWkMsV0FBWSxFQUNaQyxXQUFZLEVBQ1pDLFdBQVksRUFDWkMsT0FBUSxFQUNSQyxPQUFRLEdBQ1JDLE9BQVEsRUFDUmxCLEtBQU0sRUFFTkosUUFDQXRXLFVBQ0E2WCxNQUFPLEtBSVhoQixPQUFRLEdBQ1JDLFNBQVUsUUFDVm9CLEdBQUksRUFDSi9VLEtBQU0sT0FDTjZULEdBQUksSUFDSkMsR0FBSSxJQUNKQyxHQUFJLElBQ0pDLEdBQUksSUFFSkMsTUFDSUMsU0FBVSxPQUNWQyxXQUFZLEVBQ1pDLFdBQVksRUFDWkMsV0FBWSxFQUNaQyxXQUFZLEVBQ1pDLE9BQVEsRUFDUkMsT0FBUSxHQUNSQyxPQUFRLEVBQ1JsQixLQUFNLEVBRU5zQixZQUNBQyxjQUNBSixNQUFPLEtBSVhoQixPQUFRLEdBQ1JDLFNBQVUsVUFDVkMsU0FBVSxFQUNWNVQsS0FBTSxPQUNONlQsR0FBSSxJQUNKQyxHQUFJLElBQ0pDLEdBQUksSUFDSkMsR0FBSSxJQUVKQyxNQUNJQyxTQUFVLE9BQ1ZDLFdBQVksRUFDWkMsV0FBWSxFQUNaQyxXQUFZLEVBQ1pDLFdBQVksRUFDWkMsT0FBUSxFQUNSQyxPQUFRLEdBQ1JDLE9BQVEsRUFDUmxCLEtBQU0sRUFFTkosUUFDQXRXLFVBQ0E2WCxNQUFPLEtBSVhoQixPQUFRLEdBQ1JDLFNBQVUsVUFDVkMsU0FBVSxFQUNWNVQsS0FBTSxPQUNONlQsR0FBSSxJQUNKQyxHQUFJLElBQ0pDLEdBQUksSUFDSkMsR0FBSSxJQUVKQyxNQUNJQyxTQUFVLE9BQ1ZDLFdBQVksRUFDWkMsV0FBWSxFQUNaQyxXQUFZLEVBQ1pDLFdBQVksRUFDWkMsT0FBUSxFQUNSQyxPQUFRLEdBQ1JDLE9BQVEsRUFDUmxCLEtBQU0sRUFFTkosUUFDQXRXLFVBQ0E2WCxNQUFPLEtBSVhoQixPQUFRLEdBQ1JDLFNBQVUsVUFDVkMsU0FBVSxFQUNWNVQsS0FBTSxPQUNONlQsR0FBSSxJQUNKQyxHQUFJLElBQ0pDLEdBQUksSUFDSkMsR0FBSSxJQUVKQyxNQUNJQyxTQUFVLE9BQ1ZDLFdBQVksR0FDWkMsV0FBWSxFQUNaQyxXQUFZLEVBQ1pDLFdBQVksRUFDWkMsT0FBUSxFQUNSQyxPQUFRLEVBQ1JDLE9BQVEsRUFDUmxCLEtBQU0sRUFFTkosUUFDQXRXLFVBQ0E2WCxNQUFPLEtBSVhoQixPQUFRLEdBQ1JDLFNBQVUsUUFDVkMsU0FBVSxFQUNWNVQsS0FBTSxPQUNONlQsR0FBSSxJQUNKQyxHQUFJLElBQ0pDLEdBQUksSUFDSkMsR0FBSSxJQUVKQyxNQUNJQyxTQUFVLE9BQ1ZDLFdBQVksRUFDWkMsV0FBWSxFQUNaQyxXQUFZLEVBQ1pDLFdBQVksRUFDWkMsT0FBUSxFQUNSQyxPQUFRLEdBQ1JDLE9BQVEsRUFDUmxCLEtBQU0sRUFFTkosUUFDQXRXLFVBQ0E2WCxNQUFPLEtBSVhoQixPQUFRLEdBQ1JDLFNBQVUsUUFDVkMsU0FBVSxFQUNWNVQsS0FBTSxPQUNONlQsR0FBSSxHQUNKQyxHQUFJLElBQ0pDLEdBQUksSUFDSkMsR0FBSSxJQUVKQyxNQUNJQyxTQUFVLE9BQ1ZDLFdBQVksRUFDWkMsV0FBWSxFQUNaQyxXQUFZLEdBQ1pDLFdBQVksRUFDWkMsT0FBUSxFQUNSQyxPQUFRLEdBQ1JDLE9BQVEsRUFDUmxCLEtBQU0sRUFFTkosUUFDQXRXLFVBQ0E2WCxNQUFPLEtBSVhoQixPQUFRLEdBQ1JDLFNBQVUsUUFDVkMsU0FBVSxFQUNWNVQsS0FBTSxPQUNONlQsR0FBSSxJQUNKQyxHQUFJLElBQ0pDLEdBQUksSUFDSkMsR0FBSSxJQUVKQyxNQUNJQyxTQUFVLE9BQ1ZDLFdBQVksRUFDWkMsV0FBWSxFQUNaQyxXQUFZLEVBQ1pDLFdBQVksRUFDWkMsT0FBUSxFQUNSQyxPQUFRLEdBQ1JDLE9BQVEsRUFDUmxCLEtBQU0sRUFFTkosUUFDQXRXLFVBQ0E2WCxNQUFPLEtBSVhoQixPQUFRLEdBQ1JDLFNBQVUsUUFDVkMsU0FBVSxFQUNWNVQsS0FBTSxRQUNONlQsR0FBSSxJQUNKQyxHQUFJLElBQ0pDLEdBQUksSUFDSkMsR0FBSSxJQUVKVyxPQUNJQyxJQUFLLE1BSVRsQixPQUFRLEdBQ1JDLFNBQVUsU0FDVkMsU0FBVSxFQUNWNVQsS0FBTSxPQUNONlQsR0FBSSxJQUNKQyxHQUFJLElBQ0pDLEdBQUksSUFDSkMsR0FBSSxJQUVKQyxNQUNJQyxTQUFVLE9BQ1ZDLFdBQVksRUFDWkMsV0FBWSxFQUNaQyxXQUFZLEVBQ1pDLFdBQVksRUFDWkMsT0FBUSxHQUNSQyxPQUFRLEdBQ1JDLE9BQVEsRUFDUmxCLEtBQU0sRUFFTkosUUFDQXRXLFVBQ0E2WCxNQUFPLEtBSVhoQixPQUFRLEdBQ1JDLFNBQVUsUUFDVkMsU0FBVSxFQUNWNVQsS0FBTSxRQUNONlQsR0FBSSxHQUNKQyxHQUFJLElBQ0pDLEdBQUksSUFDSkMsR0FBSSxJQUVKVyxPQUNJQyxJQUFLLE1BSVRsQixPQUFRLEdBQ1JDLFNBQVUsVUFDVkMsU0FBVSxFQUNWNVQsS0FBTSxPQUNONlQsR0FBSSxJQUNKQyxHQUFJLElBQ0pDLEdBQUksSUFDSkMsR0FBSSxJQUVKQyxNQUNJQyxTQUFVLE9BQ1ZDLFdBQVksRUFDWkMsV0FBWSxFQUNaQyxXQUFZLEVBQ1pDLFdBQVksRUFDWkMsT0FBUSxHQUNSQyxPQUFRLEdBQ1JDLE9BQVEsRUFDUmxCLEtBQU0sRUFFTkosUUFDQXRXLFVBQ0E2WCxNQUFPLEtBSVhoQixPQUFRLEdBQ1JDLFNBQVUsUUFDVkMsU0FBVSxFQUNWNVQsS0FBTSxPQUNONlQsR0FBSSxJQUNKQyxHQUFJLElBQ0pDLEdBQUksSUFDSkMsR0FBSSxJQUVKQyxNQUNJQyxTQUFVLE9BQ1ZDLFdBQVksRUFDWkMsV0FBWSxFQUNaQyxXQUFZLEdBQ1pDLFdBQVksRUFDWkMsT0FBUSxFQUNSQyxPQUFRLEdBQ1JDLE9BQVEsRUFDUmxCLEtBQU0sRUFFTkosUUFDQXRXLFVBQ0E2WCxNQUFPLEtBSVhoQixPQUFRLEdBQ1JDLFNBQVUsVUFDVkMsU0FBVSxFQUNWNVQsS0FBTSxPQUNONlQsR0FBSSxJQUNKQyxHQUFJLElBQ0pDLEdBQUksSUFDSkMsR0FBSSxJQUVKQyxNQUNJQyxTQUFVLE9BQ1ZDLFdBQVksRUFDWkMsV0FBWSxFQUNaQyxXQUFZLEVBQ1pDLFdBQVksRUFDWkMsT0FBUSxHQUNSQyxPQUFRLEdBQ1JDLE9BQVEsRUFDUmxCLEtBQU0sRUFFTkosUUFDQXRXLFVBQ0E2WCxNQUFPLEtBSVhoQixPQUFRLEdBQ1JDLFNBQVUsUUFDVkMsU0FBVSxFQUNWNVQsS0FBTSxPQUNONlQsR0FBSSxJQUNKQyxHQUFJLElBQ0pDLEdBQUksSUFDSkMsR0FBSSxJQUVKQyxNQUNJQyxTQUFVLE9BQ1ZDLFdBQVksRUFDWkMsV0FBWSxFQUNaQyxXQUFZLEVBQ1pDLFdBQVksRUFDWkMsT0FBUSxFQUNSQyxPQUFRLEdBQ1JDLE9BQVEsRUFDUmxCLEtBQU0sRUFFTkosUUFDQXRXLFVBQ0E2WCxNQUFPLEtBSVhoQixPQUFRLEdBQ1JDLFNBQVUsUUFDVkMsU0FBVSxFQUNWNVQsS0FBTSxRQUNONlQsR0FBSSxJQUNKQyxHQUFJLElBQ0pDLEdBQUksSUFDSkMsR0FBSSxJQUVKVyxPQUNJQyxJQUFL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QUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsSUFDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUcsRUFBQUQsUUFBQUYsRUFBQSwrQ0M1TEEsR0FOQUEsRUFBQSxLQUVBQSxFQUFBLEtBRUFBLEVBQUEsS0FFQXlLLEVBQUEyeUYsZUFDQSxVQUFBeDVGLE1BQUEs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LGNBQUNnbkYsRUFBRCxNQUNBdDRHLFNBQVNnbUQsZUFBZSx1Q0NyQjVCLFNBQUF2OEQsR0FDQSxJQUFBZ3ZILEVBQUEsaUJBQUFodkgsUUFBQTNKLGlCQUFBMkosRUFFQTVJLEVBQUEiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZ2V0dGVyXG4gXHRcdFx0fSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA0ODIpO1xuIiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5leHBvcnQgdmFyIHN5bSA9IGZ1bmN0aW9uIHN5bShpZCkge1xuICByZXR1cm4gJ0BAcmVkdXgtc2FnYS8nICsgaWQ7XG59O1xuXG5leHBvcnQgdmFyIFRBU0sgPSAvKiNfX1BVUkVfXyovc3ltKCdUQVNLJyk7XG5leHBvcnQgdmFyIEhFTFBFUiA9IC8qI19fUFVSRV9fKi9zeW0oJ0hFTFBFUicpO1xuZXhwb3J0IHZhciBNQVRDSCA9IC8qI19fUFVSRV9fKi9zeW0oJ01BVENIJyk7XG5leHBvcnQgdmFyIENBTkNFTCA9IC8qI19fUFVSRV9fKi9zeW0oJ0NBTkNFTF9QUk9NSVNFJyk7XG5leHBvcnQgdmFyIFNBR0FfQUNUSU9OID0gLyojX19QVVJFX18qL3N5bSgnU0FHQV9BQ1RJT04nKTtcbmV4cG9ydCB2YXIgU0VMRl9DQU5DRUxMQVRJT04gPSAvKiNfX1BVUkVfXyovc3ltKCdTRUxGX0NBTkNFTExBVElPTicpO1xuZXhwb3J0IHZhciBrb25zdCA9IGZ1bmN0aW9uIGtvbnN0KHYpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdjtcbiAgfTtcbn07XG5leHBvcnQgdmFyIGtUcnVlID0gLyojX19QVVJFX18qL2tvbnN0KHRydWUpO1xuZXhwb3J0IHZhciBrRmFsc2UgPSAvKiNfX1BVUkVfXyova29uc3QoZmFsc2UpO1xuZXhwb3J0IHZhciBub29wID0gZnVuY3Rpb24gbm9vcCgpIHt9O1xuZXhwb3J0IHZhciBpZGVudCA9IGZ1bmN0aW9uIGlkZW50KHYpIHtcbiAgcmV0dXJuIHY7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gY2hlY2sodmFsdWUsIHByZWRpY2F0ZSwgZXJyb3IpIHtcbiAgaWYgKCFwcmVkaWNhdGUodmFsdWUpKSB7XG4gICAgbG9nKCdlcnJvcicsICd1bmNhdWdodCBhdCBjaGVjaycsIGVycm9yKTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3IpO1xuICB9XG59XG5cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5leHBvcnQgZnVuY3Rpb24gaGFzT3duKG9iamVjdCwgcHJvcGVydHkpIHtcbiAgcmV0dXJuIGlzLm5vdFVuZGVmKG9iamVjdCkgJiYgaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTtcbn1cblxuZXhwb3J0IHZhciBpcyA9IHtcbiAgdW5kZWY6IGZ1bmN0aW9uIHVuZGVmKHYpIHtcbiAgICByZXR1cm4gdiA9PT0gbnVsbCB8fCB2ID09PSB1bmRlZmluZWQ7XG4gIH0sXG4gIG5vdFVuZGVmOiBmdW5jdGlvbiBub3RVbmRlZih2KSB7XG4gICAgcmV0dXJuIHYgIT09IG51bGwgJiYgdiAhPT0gdW5kZWZpbmVkO1xuICB9LFxuICBmdW5jOiBmdW5jdGlvbiBmdW5jKGYpIHtcbiAgICByZXR1cm4gdHlwZW9mIGYgPT09ICdmdW5jdGlvbic7XG4gIH0sXG4gIG51bWJlcjogZnVuY3Rpb24gbnVtYmVyKG4pIHtcbiAgICByZXR1cm4gdHlwZW9mIG4gPT09ICdudW1iZXInO1xuICB9LFxuICBzdHJpbmc6IGZ1bmN0aW9uIHN0cmluZyhzKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBzID09PSAnc3RyaW5nJztcbiAgfSxcbiAgYXJyYXk6IEFycmF5LmlzQXJyYXksXG4gIG9iamVjdDogZnVuY3Rpb24gb2JqZWN0KG9iaikge1xuICAgIHJldHVybiBvYmogJiYgIWlzLmFycmF5KG9iaikgJiYgKHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKG9iaikpID09PSAnb2JqZWN0JztcbiAgfSxcbiAgcHJvbWlzZTogZnVuY3Rpb24gcHJvbWlzZShwKSB7XG4gICAgcmV0dXJuIHAgJiYgaXMuZnVuYyhwLnRoZW4pO1xuICB9LFxuICBpdGVyYXRvcjogZnVuY3Rpb24gaXRlcmF0b3IoaXQpIHtcbiAgICByZXR1cm4gaXQgJiYgaXMuZnVuYyhpdC5uZXh0KSAmJiBpcy5mdW5jKGl0LnRocm93KTtcbiAgfSxcbiAgaXRlcmFibGU6IGZ1bmN0aW9uIGl0ZXJhYmxlKGl0KSB7XG4gICAgcmV0dXJuIGl0ICYmIGlzLmZ1bmMoU3ltYm9sKSA/IGlzLmZ1bmMoaXRbU3ltYm9sLml0ZXJhdG9yXSkgOiBpcy5hcnJheShpdCk7XG4gIH0sXG4gIHRhc2s6IGZ1bmN0aW9uIHRhc2sodCkge1xuICAgIHJldHVybiB0ICYmIHRbVEFTS107XG4gIH0sXG4gIG9ic2VydmFibGU6IGZ1bmN0aW9uIG9ic2VydmFibGUob2IpIHtcbiAgICByZXR1cm4gb2IgJiYgaXMuZnVuYyhvYi5zdWJzY3JpYmUpO1xuICB9LFxuICBidWZmZXI6IGZ1bmN0aW9uIGJ1ZmZlcihidWYpIHtcbiAgICByZXR1cm4gYnVmICYmIGlzLmZ1bmMoYnVmLmlzRW1wdHkpICYmIGlzLmZ1bmMoYnVmLnRha2UpICYmIGlzLmZ1bmMoYnVmLnB1dCk7XG4gIH0sXG4gIHBhdHRlcm46IGZ1bmN0aW9uIHBhdHRlcm4ocGF0KSB7XG4gICAgcmV0dXJuIHBhdCAmJiAoaXMuc3RyaW5nKHBhdCkgfHwgKHR5cGVvZiBwYXQgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHBhdCkpID09PSAnc3ltYm9sJyB8fCBpcy5mdW5jKHBhdCkgfHwgaXMuYXJyYXkocGF0KSk7XG4gIH0sXG4gIGNoYW5uZWw6IGZ1bmN0aW9uIGNoYW5uZWwoY2gpIHtcbiAgICByZXR1cm4gY2ggJiYgaXMuZnVuYyhjaC50YWtlKSAmJiBpcy5mdW5jKGNoLmNsb3NlKTtcbiAgfSxcbiAgaGVscGVyOiBmdW5jdGlvbiBoZWxwZXIoaXQpIHtcbiAgICByZXR1cm4gaXQgJiYgaXRbSEVMUEVSXTtcbiAgfSxcbiAgc3RyaW5nYWJsZUZ1bmM6IGZ1bmN0aW9uIHN0cmluZ2FibGVGdW5jKGYpIHtcbiAgICByZXR1cm4gaXMuZnVuYyhmKSAmJiBoYXNPd24oZiwgJ3RvU3RyaW5nJyk7XG4gIH1cbn07XG5cbmV4cG9ydCB2YXIgb2JqZWN0ID0ge1xuICBhc3NpZ246IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIHNvdXJjZSkge1xuICAgIGZvciAodmFyIGkgaW4gc291cmNlKSB7XG4gICAgICBpZiAoaGFzT3duKHNvdXJjZSwgaSkpIHtcbiAgICAgICAgdGFyZ2V0W2ldID0gc291cmNlW2ldO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZShhcnJheSwgaXRlbSkge1xuICB2YXIgaW5kZXggPSBhcnJheS5pbmRleE9mKGl0ZW0pO1xuICBpZiAoaW5kZXggPj0gMCkge1xuICAgIGFycmF5LnNwbGljZShpbmRleCwgMSk7XG4gIH1cbn1cblxuZXhwb3J0IHZhciBhcnJheSA9IHtcbiAgZnJvbTogZnVuY3Rpb24gZnJvbShvYmopIHtcbiAgICB2YXIgYXJyID0gQXJyYXkob2JqLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSBpbiBvYmopIHtcbiAgICAgIGlmIChoYXNPd24ob2JqLCBpKSkge1xuICAgICAgICBhcnJbaV0gPSBvYmpbaV07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnI7XG4gIH1cbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWZlcnJlZCgpIHtcbiAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICB2YXIgZGVmID0gX2V4dGVuZHMoe30sIHByb3BzKTtcbiAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgZGVmLnJlc29sdmUgPSByZXNvbHZlO1xuICAgIGRlZi5yZWplY3QgPSByZWplY3Q7XG4gIH0pO1xuICBkZWYucHJvbWlzZSA9IHByb21pc2U7XG4gIHJldHVybiBkZWY7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcnJheU9mRGVmZmVyZWQobGVuZ3RoKSB7XG4gIHZhciBhcnIgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIGFyci5wdXNoKGRlZmVycmVkKCkpO1xuICB9XG4gIHJldHVybiBhcnI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWxheShtcykge1xuICB2YXIgdmFsID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0cnVlO1xuXG4gIHZhciB0aW1lb3V0SWQgPSB2b2lkIDA7XG4gIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiByZXNvbHZlKHZhbCk7XG4gICAgfSwgbXMpO1xuICB9KTtcblxuICBwcm9taXNlW0NBTkNFTF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xuICB9O1xuXG4gIHJldHVybiBwcm9taXNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTW9ja1Rhc2soKSB7XG4gIHZhciBfcmVmO1xuXG4gIHZhciBydW5uaW5nID0gdHJ1ZTtcbiAgdmFyIF9yZXN1bHQgPSB2b2lkIDAsXG4gICAgICBfZXJyb3IgPSB2b2lkIDA7XG5cbiAgcmV0dXJuIF9yZWYgPSB7fSwgX3JlZltUQVNLXSA9IHRydWUsIF9yZWYuaXNSdW5uaW5nID0gZnVuY3Rpb24gaXNSdW5uaW5nKCkge1xuICAgIHJldHVybiBydW5uaW5nO1xuICB9LCBfcmVmLnJlc3VsdCA9IGZ1bmN0aW9uIHJlc3VsdCgpIHtcbiAgICByZXR1cm4gX3Jlc3VsdDtcbiAgfSwgX3JlZi5lcnJvciA9IGZ1bmN0aW9uIGVycm9yKCkge1xuICAgIHJldHVybiBfZXJyb3I7XG4gIH0sIF9yZWYuc2V0UnVubmluZyA9IGZ1bmN0aW9uIHNldFJ1bm5pbmcoYikge1xuICAgIHJldHVybiBydW5uaW5nID0gYjtcbiAgfSwgX3JlZi5zZXRSZXN1bHQgPSBmdW5jdGlvbiBzZXRSZXN1bHQocikge1xuICAgIHJldHVybiBfcmVzdWx0ID0gcjtcbiAgfSwgX3JlZi5zZXRFcnJvciA9IGZ1bmN0aW9uIHNldEVycm9yKGUpIHtcbiAgICByZXR1cm4gX2Vycm9yID0gZTtcbiAgfSwgX3JlZjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGF1dG9JbmMoKSB7XG4gIHZhciBzZWVkID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAwO1xuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICsrc2VlZDtcbiAgfTtcbn1cblxuZXhwb3J0IHZhciB1aWQgPSAvKiNfX1BVUkVfXyovYXV0b0luYygpO1xuXG52YXIga1Rocm93ID0gZnVuY3Rpb24ga1Rocm93KGVycikge1xuICB0aHJvdyBlcnI7XG59O1xudmFyIGtSZXR1cm4gPSBmdW5jdGlvbiBrUmV0dXJuKHZhbHVlKSB7XG4gIHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgZG9uZTogdHJ1ZSB9O1xufTtcbmV4cG9ydCBmdW5jdGlvbiBtYWtlSXRlcmF0b3IobmV4dCkge1xuICB2YXIgdGhybyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoga1Rocm93O1xuICB2YXIgbmFtZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogJyc7XG4gIHZhciBpc0hlbHBlciA9IGFyZ3VtZW50c1szXTtcblxuICB2YXIgaXRlcmF0b3IgPSB7IG5hbWU6IG5hbWUsIG5leHQ6IG5leHQsIHRocm93OiB0aHJvLCByZXR1cm46IGtSZXR1cm4gfTtcblxuICBpZiAoaXNIZWxwZXIpIHtcbiAgICBpdGVyYXRvcltIRUxQRVJdID0gdHJ1ZTtcbiAgfVxuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpdGVyYXRvcltTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGl0ZXJhdG9yO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGl0ZXJhdG9yO1xufVxuXG4vKipcbiAgUHJpbnQgZXJyb3IgaW4gYSB1c2VmdWwgd2F5IHdoZXRoZXIgaW4gYSBicm93c2VyIGVudmlyb25tZW50XG4gICh3aXRoIGV4cGFuZGFibGUgZXJyb3Igc3RhY2sgdHJhY2VzKSwgb3IgaW4gYSBub2RlLmpzIGVudmlyb25tZW50XG4gICh0ZXh0LW9ubHkgbG9nIG91dHB1dClcbiAqKi9cbmV4cG9ydCBmdW5jdGlvbiBsb2cobGV2ZWwsIG1lc3NhZ2UpIHtcbiAgdmFyIGVycm9yID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAnJztcblxuICAvKmVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUqL1xuICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjb25zb2xlLmxvZygncmVkdXgtc2FnYSAnICsgbGV2ZWwgKyAnOiAnICsgbWVzc2FnZSArICdcXG4nICsgKGVycm9yICYmIGVycm9yLnN0YWNrIHx8IGVycm9yKSk7XG4gIH0gZWxzZSB7XG4gICAgY29uc29sZVtsZXZlbF0obWVzc2FnZSwgZXJyb3IpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZXByZWNhdGUoZm4sIGRlcHJlY2F0aW9uV2FybmluZykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JykgbG9nKCd3YXJuJywgZGVwcmVjYXRpb25XYXJuaW5nKTtcbiAgICByZXR1cm4gZm4uYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG5leHBvcnQgdmFyIHVwZGF0ZUluY2VudGl2ZSA9IGZ1bmN0aW9uIHVwZGF0ZUluY2VudGl2ZShkZXByZWNhdGVkLCBwcmVmZXJyZWQpIHtcbiAgcmV0dXJuIGRlcHJlY2F0ZWQgKyAnIGhhcyBiZWVuIGRlcHJlY2F0ZWQgaW4gZmF2b3Igb2YgJyArIHByZWZlcnJlZCArICcsIHBsZWFzZSB1cGRhdGUgeW91ciBjb2RlJztcbn07XG5cbmV4cG9ydCB2YXIgaW50ZXJuYWxFcnIgPSBmdW5jdGlvbiBpbnRlcm5hbEVycihlcnIpIHtcbiAgcmV0dXJuIG5ldyBFcnJvcignXFxuICByZWR1eC1zYWdhOiBFcnJvciBjaGVja2luZyBob29rcyBkZXRlY3RlZCBhbiBpbmNvbnNpc3RlbnQgc3RhdGUuIFRoaXMgaXMgbGlrZWx5IGEgYnVnXFxuICBpbiByZWR1eC1zYWdhIGNvZGUgYW5kIG5vdCB5b3Vycy4gVGhhbmtzIGZvciByZXBvcnRpbmcgdGhpcyBpbiB0aGUgcHJvamVjdFxcJ3MgZ2l0aHViIHJlcG8uXFxuICBFcnJvcjogJyArIGVyciArICdcXG4nKTtcbn07XG5cbmV4cG9ydCB2YXIgY3JlYXRlU2V0Q29udGV4dFdhcm5pbmcgPSBmdW5jdGlvbiBjcmVhdGVTZXRDb250ZXh0V2FybmluZyhjdHgsIHByb3BzKSB7XG4gIHJldHVybiAoY3R4ID8gY3R4ICsgJy4nIDogJycpICsgJ3NldENvbnRleHQocHJvcHMpOiBhcmd1bWVudCAnICsgcHJvcHMgKyAnIGlzIG5vdCBhIHBsYWluIG9iamVjdCc7XG59O1xuXG5leHBvcnQgdmFyIHdyYXBTYWdhRGlzcGF0Y2ggPSBmdW5jdGlvbiB3cmFwU2FnYURpc3BhdGNoKGRpc3BhdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoKE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhY3Rpb24sIFNBR0FfQUNUSU9OLCB7IHZhbHVlOiB0cnVlIH0pKTtcbiAgfTtcbn07XG5cbmV4cG9ydCB2YXIgY2xvbmVhYmxlR2VuZXJhdG9yID0gZnVuY3Rpb24gY2xvbmVhYmxlR2VuZXJhdG9yKGdlbmVyYXRvckZ1bmMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICB2YXIgaGlzdG9yeSA9IFtdO1xuICAgIHZhciBnZW4gPSBnZW5lcmF0b3JGdW5jLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5leHQ6IGZ1bmN0aW9uIG5leHQoYXJnKSB7XG4gICAgICAgIGhpc3RvcnkucHVzaChhcmcpO1xuICAgICAgICByZXR1cm4gZ2VuLm5leHQoYXJnKTtcbiAgICAgIH0sXG4gICAgICBjbG9uZTogZnVuY3Rpb24gY2xvbmUoKSB7XG4gICAgICAgIHZhciBjbG9uZWRHZW4gPSBjbG9uZWFibGVHZW5lcmF0b3IoZ2VuZXJhdG9yRnVuYykuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICAgICAgaGlzdG9yeS5mb3JFYWNoKGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgICAgICByZXR1cm4gY2xvbmVkR2VuLm5leHQoYXJnKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjbG9uZWRHZW47XG4gICAgICB9LFxuICAgICAgcmV0dXJuOiBmdW5jdGlvbiBfcmV0dXJuKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBnZW4ucmV0dXJuKHZhbHVlKTtcbiAgICAgIH0sXG4gICAgICB0aHJvdzogZnVuY3Rpb24gX3Rocm93KGV4Y2VwdGlvbikge1xuICAgICAgICByZXR1cm4gZ2VuLnRocm93KGV4Y2VwdGlvbik7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcbn07IiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbnZhciAkZXhwb3J0ID0gZnVuY3Rpb24gKHR5cGUsIG5hbWUsIHNvdXJjZSkge1xuICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRjtcbiAgdmFyIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0Lkc7XG4gIHZhciBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TO1xuICB2YXIgSVNfUFJPVE8gPSB0eXBlICYgJGV4cG9ydC5QO1xuICB2YXIgSVNfQklORCA9IHR5cGUgJiAkZXhwb3J0LkI7XG4gIHZhciB0YXJnZXQgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gfHwgKGdsb2JhbFtuYW1lXSA9IHt9KSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV07XG4gIHZhciBleHBvcnRzID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSk7XG4gIHZhciBleHBQcm90byA9IGV4cG9ydHNbUFJPVE9UWVBFXSB8fCAoZXhwb3J0c1tQUk9UT1RZUEVdID0ge30pO1xuICB2YXIga2V5LCBvd24sIG91dCwgZXhwO1xuICBpZiAoSVNfR0xPQkFMKSBzb3VyY2UgPSBuYW1lO1xuICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG4gICAgb3V0ID0gKG93biA/IHRhcmdldCA6IHNvdXJjZSlba2V5XTtcbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuICAgIGV4cCA9IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0O1xuICAgIC8vIGV4dGVuZCBnbG9iYWxcbiAgICBpZiAodGFyZ2V0KSByZWRlZmluZSh0YXJnZXQsIGtleSwgb3V0LCB0eXBlICYgJGV4cG9ydC5VKTtcbiAgICAvLyBleHBvcnRcbiAgICBpZiAoZXhwb3J0c1trZXldICE9IG91dCkgaGlkZShleHBvcnRzLCBrZXksIGV4cCk7XG4gICAgaWYgKElTX1BST1RPICYmIGV4cFByb3RvW2tleV0gIT0gb3V0KSBleHBQcm90b1trZXldID0gb3V0O1xuICB9XG59O1xuZ2xvYmFsLmNvcmUgPSBjb3JlO1xuLy8gdHlwZSBiaXRtYXBcbiRleHBvcnQuRiA9IDE7ICAgLy8gZm9yY2VkXG4kZXhwb3J0LkcgPSAyOyAgIC8vIGdsb2JhbFxuJGV4cG9ydC5TID0gNDsgICAvLyBzdGF0aWNcbiRleHBvcnQuUCA9IDg7ICAgLy8gcHJvdG9cbiRleHBvcnQuQiA9IDE2OyAgLy8gYmluZFxuJGV4cG9ydC5XID0gMzI7ICAvLyB3cmFwXG4kZXhwb3J0LlUgPSA2NDsgIC8vIHNhZmVcbiRleHBvcnQuUiA9IDEyODsgLy8gcmVhbCBwcm90byBtZXRob2QgZm9yIGBsaWJyYXJ5YFxubW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0O1xuIiwiaW1wb3J0IHsgc3ltLCBpcywgaWRlbnQsIGNoZWNrLCBkZXByZWNhdGUsIHVwZGF0ZUluY2VudGl2ZSwgY3JlYXRlU2V0Q29udGV4dFdhcm5pbmcsIFNFTEZfQ0FOQ0VMTEFUSU9OIH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgeyB0YWtlRXZlcnlIZWxwZXIsIHRha2VMYXRlc3RIZWxwZXIsIHRocm90dGxlSGVscGVyIH0gZnJvbSAnLi9zYWdhSGVscGVycyc7XG5cbnZhciBJTyA9IC8qI19fUFVSRV9fKi9zeW0oJ0lPJyk7XG52YXIgVEFLRSA9ICdUQUtFJztcbnZhciBQVVQgPSAnUFVUJztcbnZhciBBTEwgPSAnQUxMJztcbnZhciBSQUNFID0gJ1JBQ0UnO1xudmFyIENBTEwgPSAnQ0FMTCc7XG52YXIgQ1BTID0gJ0NQUyc7XG52YXIgRk9SSyA9ICdGT1JLJztcbnZhciBKT0lOID0gJ0pPSU4nO1xudmFyIENBTkNFTCA9ICdDQU5DRUwnO1xudmFyIFNFTEVDVCA9ICdTRUxFQ1QnO1xudmFyIEFDVElPTl9DSEFOTkVMID0gJ0FDVElPTl9DSEFOTkVMJztcbnZhciBDQU5DRUxMRUQgPSAnQ0FOQ0VMTEVEJztcbnZhciBGTFVTSCA9ICdGTFVTSCc7XG52YXIgR0VUX0NPTlRFWFQgPSAnR0VUX0NPTlRFWFQnO1xudmFyIFNFVF9DT05URVhUID0gJ1NFVF9DT05URVhUJztcblxudmFyIFRFU1RfSElOVCA9ICdcXG4oSElOVDogaWYgeW91IGFyZSBnZXR0aW5nIHRoaXMgZXJyb3JzIGluIHRlc3RzLCBjb25zaWRlciB1c2luZyBjcmVhdGVNb2NrVGFzayBmcm9tIHJlZHV4LXNhZ2EvdXRpbHMpJztcblxudmFyIGVmZmVjdCA9IGZ1bmN0aW9uIGVmZmVjdCh0eXBlLCBwYXlsb2FkKSB7XG4gIHZhciBfcmVmO1xuXG4gIHJldHVybiBfcmVmID0ge30sIF9yZWZbSU9dID0gdHJ1ZSwgX3JlZlt0eXBlXSA9IHBheWxvYWQsIF9yZWY7XG59O1xuXG5leHBvcnQgdmFyIGRldGFjaCA9IGZ1bmN0aW9uIGRldGFjaChlZmYpIHtcbiAgY2hlY2soYXNFZmZlY3QuZm9yayhlZmYpLCBpcy5vYmplY3QsICdkZXRhY2goZWZmKTogYXJndW1lbnQgbXVzdCBiZSBhIGZvcmsgZWZmZWN0Jyk7XG4gIGVmZltGT1JLXS5kZXRhY2hlZCA9IHRydWU7XG4gIHJldHVybiBlZmY7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gdGFrZSgpIHtcbiAgdmFyIHBhdHRlcm5PckNoYW5uZWwgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6ICcqJztcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgIGNoZWNrKGFyZ3VtZW50c1swXSwgaXMubm90VW5kZWYsICd0YWtlKHBhdHRlcm5PckNoYW5uZWwpOiBwYXR0ZXJuT3JDaGFubmVsIGlzIHVuZGVmaW5lZCcpO1xuICB9XG4gIGlmIChpcy5wYXR0ZXJuKHBhdHRlcm5PckNoYW5uZWwpKSB7XG4gICAgcmV0dXJuIGVmZmVjdChUQUtFLCB7IHBhdHRlcm46IHBhdHRlcm5PckNoYW5uZWwgfSk7XG4gIH1cbiAgaWYgKGlzLmNoYW5uZWwocGF0dGVybk9yQ2hhbm5lbCkpIHtcbiAgICByZXR1cm4gZWZmZWN0KFRBS0UsIHsgY2hhbm5lbDogcGF0dGVybk9yQ2hhbm5lbCB9KTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoJ3Rha2UocGF0dGVybk9yQ2hhbm5lbCk6IGFyZ3VtZW50ICcgKyBTdHJpbmcocGF0dGVybk9yQ2hhbm5lbCkgKyAnIGlzIG5vdCB2YWxpZCBjaGFubmVsIG9yIGEgdmFsaWQgcGF0dGVybicpO1xufVxuXG50YWtlLm1heWJlID0gZnVuY3Rpb24gKCkge1xuICB2YXIgZWZmID0gdGFrZS5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cyk7XG4gIGVmZltUQUtFXS5tYXliZSA9IHRydWU7XG4gIHJldHVybiBlZmY7XG59O1xuXG5leHBvcnQgdmFyIHRha2VtID0gLyojX19QVVJFX18qL2RlcHJlY2F0ZSh0YWtlLm1heWJlLCAvKiNfX1BVUkVfXyovdXBkYXRlSW5jZW50aXZlKCd0YWtlbScsICd0YWtlLm1heWJlJykpO1xuXG5leHBvcnQgZnVuY3Rpb24gcHV0KGNoYW5uZWwsIGFjdGlvbikge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICBjaGVjayhjaGFubmVsLCBpcy5ub3RVbmRlZiwgJ3B1dChjaGFubmVsLCBhY3Rpb24pOiBhcmd1bWVudCBjaGFubmVsIGlzIHVuZGVmaW5lZCcpO1xuICAgIGNoZWNrKGNoYW5uZWwsIGlzLmNoYW5uZWwsICdwdXQoY2hhbm5lbCwgYWN0aW9uKTogYXJndW1lbnQgJyArIGNoYW5uZWwgKyAnIGlzIG5vdCBhIHZhbGlkIGNoYW5uZWwnKTtcbiAgICBjaGVjayhhY3Rpb24sIGlzLm5vdFVuZGVmLCAncHV0KGNoYW5uZWwsIGFjdGlvbik6IGFyZ3VtZW50IGFjdGlvbiBpcyB1bmRlZmluZWQnKTtcbiAgfSBlbHNlIHtcbiAgICBjaGVjayhjaGFubmVsLCBpcy5ub3RVbmRlZiwgJ3B1dChhY3Rpb24pOiBhcmd1bWVudCBhY3Rpb24gaXMgdW5kZWZpbmVkJyk7XG4gICAgYWN0aW9uID0gY2hhbm5lbDtcbiAgICBjaGFubmVsID0gbnVsbDtcbiAgfVxuICByZXR1cm4gZWZmZWN0KFBVVCwgeyBjaGFubmVsOiBjaGFubmVsLCBhY3Rpb246IGFjdGlvbiB9KTtcbn1cblxucHV0LnJlc29sdmUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBlZmYgPSBwdXQuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICBlZmZbUFVUXS5yZXNvbHZlID0gdHJ1ZTtcbiAgcmV0dXJuIGVmZjtcbn07XG5cbnB1dC5zeW5jID0gLyojX19QVVJFX18qL2RlcHJlY2F0ZShwdXQucmVzb2x2ZSwgLyojX19QVVJFX18qL3VwZGF0ZUluY2VudGl2ZSgncHV0LnN5bmMnLCAncHV0LnJlc29sdmUnKSk7XG5cbmV4cG9ydCBmdW5jdGlvbiBhbGwoZWZmZWN0cykge1xuICByZXR1cm4gZWZmZWN0KEFMTCwgZWZmZWN0cyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByYWNlKGVmZmVjdHMpIHtcbiAgcmV0dXJuIGVmZmVjdChSQUNFLCBlZmZlY3RzKTtcbn1cblxuZnVuY3Rpb24gZ2V0Rm5DYWxsRGVzYyhtZXRoLCBmbiwgYXJncykge1xuICBjaGVjayhmbiwgaXMubm90VW5kZWYsIG1ldGggKyAnOiBhcmd1bWVudCBmbiBpcyB1bmRlZmluZWQnKTtcblxuICB2YXIgY29udGV4dCA9IG51bGw7XG4gIGlmIChpcy5hcnJheShmbikpIHtcbiAgICB2YXIgX2ZuID0gZm47XG4gICAgY29udGV4dCA9IF9mblswXTtcbiAgICBmbiA9IF9mblsxXTtcbiAgfSBlbHNlIGlmIChmbi5mbikge1xuICAgIHZhciBfZm4yID0gZm47XG4gICAgY29udGV4dCA9IF9mbjIuY29udGV4dDtcbiAgICBmbiA9IF9mbjIuZm47XG4gIH1cbiAgaWYgKGNvbnRleHQgJiYgaXMuc3RyaW5nKGZuKSAmJiBpcy5mdW5jKGNvbnRleHRbZm5dKSkge1xuICAgIGZuID0gY29udGV4dFtmbl07XG4gIH1cbiAgY2hlY2soZm4sIGlzLmZ1bmMsIG1ldGggKyAnOiBhcmd1bWVudCAnICsgZm4gKyAnIGlzIG5vdCBhIGZ1bmN0aW9uJyk7XG5cbiAgcmV0dXJuIHsgY29udGV4dDogY29udGV4dCwgZm46IGZuLCBhcmdzOiBhcmdzIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYWxsKGZuKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGVmZmVjdChDQUxMLCBnZXRGbkNhbGxEZXNjKCdjYWxsJywgZm4sIGFyZ3MpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5KGNvbnRleHQsIGZuKSB7XG4gIHZhciBhcmdzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBbXTtcblxuICByZXR1cm4gZWZmZWN0KENBTEwsIGdldEZuQ2FsbERlc2MoJ2FwcGx5JywgeyBjb250ZXh0OiBjb250ZXh0LCBmbjogZm4gfSwgYXJncykpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3BzKGZuKSB7XG4gIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4yID4gMSA/IF9sZW4yIC0gMSA6IDApLCBfa2V5MiA9IDE7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICBhcmdzW19rZXkyIC0gMV0gPSBhcmd1bWVudHNbX2tleTJdO1xuICB9XG5cbiAgcmV0dXJuIGVmZmVjdChDUFMsIGdldEZuQ2FsbERlc2MoJ2NwcycsIGZuLCBhcmdzKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3JrKGZuKSB7XG4gIGZvciAodmFyIF9sZW4zID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4zID4gMSA/IF9sZW4zIC0gMSA6IDApLCBfa2V5MyA9IDE7IF9rZXkzIDwgX2xlbjM7IF9rZXkzKyspIHtcbiAgICBhcmdzW19rZXkzIC0gMV0gPSBhcmd1bWVudHNbX2tleTNdO1xuICB9XG5cbiAgcmV0dXJuIGVmZmVjdChGT1JLLCBnZXRGbkNhbGxEZXNjKCdmb3JrJywgZm4sIGFyZ3MpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNwYXduKGZuKSB7XG4gIGZvciAodmFyIF9sZW40ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW40ID4gMSA/IF9sZW40IC0gMSA6IDApLCBfa2V5NCA9IDE7IF9rZXk0IDwgX2xlbjQ7IF9rZXk0KyspIHtcbiAgICBhcmdzW19rZXk0IC0gMV0gPSBhcmd1bWVudHNbX2tleTRdO1xuICB9XG5cbiAgcmV0dXJuIGRldGFjaChmb3JrLmFwcGx5KHVuZGVmaW5lZCwgW2ZuXS5jb25jYXQoYXJncykpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGpvaW4oKSB7XG4gIGZvciAodmFyIF9sZW41ID0gYXJndW1lbnRzLmxlbmd0aCwgdGFza3MgPSBBcnJheShfbGVuNSksIF9rZXk1ID0gMDsgX2tleTUgPCBfbGVuNTsgX2tleTUrKykge1xuICAgIHRhc2tzW19rZXk1XSA9IGFyZ3VtZW50c1tfa2V5NV07XG4gIH1cblxuICBpZiAodGFza3MubGVuZ3RoID4gMSkge1xuICAgIHJldHVybiBhbGwodGFza3MubWFwKGZ1bmN0aW9uICh0KSB7XG4gICAgICByZXR1cm4gam9pbih0KTtcbiAgICB9KSk7XG4gIH1cbiAgdmFyIHRhc2sgPSB0YXNrc1swXTtcbiAgY2hlY2sodGFzaywgaXMubm90VW5kZWYsICdqb2luKHRhc2spOiBhcmd1bWVudCB0YXNrIGlzIHVuZGVmaW5lZCcpO1xuICBjaGVjayh0YXNrLCBpcy50YXNrLCAnam9pbih0YXNrKTogYXJndW1lbnQgJyArIHRhc2sgKyAnIGlzIG5vdCBhIHZhbGlkIFRhc2sgb2JqZWN0ICcgKyBURVNUX0hJTlQpO1xuICByZXR1cm4gZWZmZWN0KEpPSU4sIHRhc2spO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2FuY2VsKCkge1xuICBmb3IgKHZhciBfbGVuNiA9IGFyZ3VtZW50cy5sZW5ndGgsIHRhc2tzID0gQXJyYXkoX2xlbjYpLCBfa2V5NiA9IDA7IF9rZXk2IDwgX2xlbjY7IF9rZXk2KyspIHtcbiAgICB0YXNrc1tfa2V5Nl0gPSBhcmd1bWVudHNbX2tleTZdO1xuICB9XG5cbiAgaWYgKHRhc2tzLmxlbmd0aCA+IDEpIHtcbiAgICByZXR1cm4gYWxsKHRhc2tzLm1hcChmdW5jdGlvbiAodCkge1xuICAgICAgcmV0dXJuIGNhbmNlbCh0KTtcbiAgICB9KSk7XG4gIH1cbiAgdmFyIHRhc2sgPSB0YXNrc1swXTtcbiAgaWYgKHRhc2tzLmxlbmd0aCA9PT0gMSkge1xuICAgIGNoZWNrKHRhc2ssIGlzLm5vdFVuZGVmLCAnY2FuY2VsKHRhc2spOiBhcmd1bWVudCB0YXNrIGlzIHVuZGVmaW5lZCcpO1xuICAgIGNoZWNrKHRhc2ssIGlzLnRhc2ssICdjYW5jZWwodGFzayk6IGFyZ3VtZW50ICcgKyB0YXNrICsgJyBpcyBub3QgYSB2YWxpZCBUYXNrIG9iamVjdCAnICsgVEVTVF9ISU5UKTtcbiAgfVxuICByZXR1cm4gZWZmZWN0KENBTkNFTCwgdGFzayB8fCBTRUxGX0NBTkNFTExBVElPTik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZWxlY3Qoc2VsZWN0b3IpIHtcbiAgZm9yICh2YXIgX2xlbjcgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjcgPiAxID8gX2xlbjcgLSAxIDogMCksIF9rZXk3ID0gMTsgX2tleTcgPCBfbGVuNzsgX2tleTcrKykge1xuICAgIGFyZ3NbX2tleTcgLSAxXSA9IGFyZ3VtZW50c1tfa2V5N107XG4gIH1cblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgIHNlbGVjdG9yID0gaWRlbnQ7XG4gIH0gZWxzZSB7XG4gICAgY2hlY2soc2VsZWN0b3IsIGlzLm5vdFVuZGVmLCAnc2VsZWN0KHNlbGVjdG9yLFsuLi5dKTogYXJndW1lbnQgc2VsZWN0b3IgaXMgdW5kZWZpbmVkJyk7XG4gICAgY2hlY2soc2VsZWN0b3IsIGlzLmZ1bmMsICdzZWxlY3Qoc2VsZWN0b3IsWy4uLl0pOiBhcmd1bWVudCAnICsgc2VsZWN0b3IgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uJyk7XG4gIH1cbiAgcmV0dXJuIGVmZmVjdChTRUxFQ1QsIHsgc2VsZWN0b3I6IHNlbGVjdG9yLCBhcmdzOiBhcmdzIH0pO1xufVxuXG4vKipcbiAgY2hhbm5lbChwYXR0ZXJuLCBbYnVmZmVyXSkgICAgPT4gY3JlYXRlcyBhbiBldmVudCBjaGFubmVsIGZvciBzdG9yZSBhY3Rpb25zXG4qKi9cbmV4cG9ydCBmdW5jdGlvbiBhY3Rpb25DaGFubmVsKHBhdHRlcm4sIGJ1ZmZlcikge1xuICBjaGVjayhwYXR0ZXJuLCBpcy5ub3RVbmRlZiwgJ2FjdGlvbkNoYW5uZWwocGF0dGVybiwuLi4pOiBhcmd1bWVudCBwYXR0ZXJuIGlzIHVuZGVmaW5lZCcpO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICBjaGVjayhidWZmZXIsIGlzLm5vdFVuZGVmLCAnYWN0aW9uQ2hhbm5lbChwYXR0ZXJuLCBidWZmZXIpOiBhcmd1bWVudCBidWZmZXIgaXMgdW5kZWZpbmVkJyk7XG4gICAgY2hlY2soYnVmZmVyLCBpcy5idWZmZXIsICdhY3Rpb25DaGFubmVsKHBhdHRlcm4sIGJ1ZmZlcik6IGFyZ3VtZW50ICcgKyBidWZmZXIgKyAnIGlzIG5vdCBhIHZhbGlkIGJ1ZmZlcicpO1xuICB9XG4gIHJldHVybiBlZmZlY3QoQUNUSU9OX0NIQU5ORUwsIHsgcGF0dGVybjogcGF0dGVybiwgYnVmZmVyOiBidWZmZXIgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYW5jZWxsZWQoKSB7XG4gIHJldHVybiBlZmZlY3QoQ0FOQ0VMTEVELCB7fSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmbHVzaChjaGFubmVsKSB7XG4gIGNoZWNrKGNoYW5uZWwsIGlzLmNoYW5uZWwsICdmbHVzaChjaGFubmVsKTogYXJndW1lbnQgJyArIGNoYW5uZWwgKyAnIGlzIG5vdCB2YWxpZCBjaGFubmVsJyk7XG4gIHJldHVybiBlZmZlY3QoRkxVU0gsIGNoYW5uZWwpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29udGV4dChwcm9wKSB7XG4gIGNoZWNrKHByb3AsIGlzLnN0cmluZywgJ2dldENvbnRleHQocHJvcCk6IGFyZ3VtZW50ICcgKyBwcm9wICsgJyBpcyBub3QgYSBzdHJpbmcnKTtcbiAgcmV0dXJuIGVmZmVjdChHRVRfQ09OVEVYVCwgcHJvcCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRDb250ZXh0KHByb3BzKSB7XG4gIGNoZWNrKHByb3BzLCBpcy5vYmplY3QsIGNyZWF0ZVNldENvbnRleHRXYXJuaW5nKG51bGwsIHByb3BzKSk7XG4gIHJldHVybiBlZmZlY3QoU0VUX0NPTlRFWFQsIHByb3BzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRha2VFdmVyeShwYXR0ZXJuT3JDaGFubmVsLCB3b3JrZXIpIHtcbiAgZm9yICh2YXIgX2xlbjggPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjggPiAyID8gX2xlbjggLSAyIDogMCksIF9rZXk4ID0gMjsgX2tleTggPCBfbGVuODsgX2tleTgrKykge1xuICAgIGFyZ3NbX2tleTggLSAyXSA9IGFyZ3VtZW50c1tfa2V5OF07XG4gIH1cblxuICByZXR1cm4gZm9yay5hcHBseSh1bmRlZmluZWQsIFt0YWtlRXZlcnlIZWxwZXIsIHBhdHRlcm5PckNoYW5uZWwsIHdvcmtlcl0uY29uY2F0KGFyZ3MpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRha2VMYXRlc3QocGF0dGVybk9yQ2hhbm5lbCwgd29ya2VyKSB7XG4gIGZvciAodmFyIF9sZW45ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW45ID4gMiA/IF9sZW45IC0gMiA6IDApLCBfa2V5OSA9IDI7IF9rZXk5IDwgX2xlbjk7IF9rZXk5KyspIHtcbiAgICBhcmdzW19rZXk5IC0gMl0gPSBhcmd1bWVudHNbX2tleTldO1xuICB9XG5cbiAgcmV0dXJuIGZvcmsuYXBwbHkodW5kZWZpbmVkLCBbdGFrZUxhdGVzdEhlbHBlciwgcGF0dGVybk9yQ2hhbm5lbCwgd29ya2VyXS5jb25jYXQoYXJncykpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGhyb3R0bGUobXMsIHBhdHRlcm4sIHdvcmtlcikge1xuICBmb3IgKHZhciBfbGVuMTAgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjEwID4gMyA/IF9sZW4xMCAtIDMgOiAwKSwgX2tleTEwID0gMzsgX2tleTEwIDwgX2xlbjEwOyBfa2V5MTArKykge1xuICAgIGFyZ3NbX2tleTEwIC0gM10gPSBhcmd1bWVudHNbX2tleTEwXTtcbiAgfVxuXG4gIHJldHVybiBmb3JrLmFwcGx5KHVuZGVmaW5lZCwgW3Rocm90dGxlSGVscGVyLCBtcywgcGF0dGVybiwgd29ya2VyXS5jb25jYXQoYXJncykpO1xufVxuXG52YXIgY3JlYXRlQXNFZmZlY3RUeXBlID0gZnVuY3Rpb24gY3JlYXRlQXNFZmZlY3RUeXBlKHR5cGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChlZmZlY3QpIHtcbiAgICByZXR1cm4gZWZmZWN0ICYmIGVmZmVjdFtJT10gJiYgZWZmZWN0W3R5cGVdO1xuICB9O1xufTtcblxuZXhwb3J0IHZhciBhc0VmZmVjdCA9IHtcbiAgdGFrZTogLyojX19QVVJFX18qL2NyZWF0ZUFzRWZmZWN0VHlwZShUQUtFKSxcbiAgcHV0OiAvKiNfX1BVUkVfXyovY3JlYXRlQXNFZmZlY3RUeXBlKFBVVCksXG4gIGFsbDogLyojX19QVVJFX18qL2NyZWF0ZUFzRWZmZWN0VHlwZShBTEwpLFxuICByYWNlOiAvKiNfX1BVUkVfXyovY3JlYXRlQXNFZmZlY3RUeXBlKFJBQ0UpLFxuICBjYWxsOiAvKiNfX1BVUkVfXyovY3JlYXRlQXNFZmZlY3RUeXBlKENBTEwpLFxuICBjcHM6IC8qI19fUFVSRV9fKi9jcmVhdGVBc0VmZmVjdFR5cGUoQ1BTKSxcbiAgZm9yazogLyojX19QVVJFX18qL2NyZWF0ZUFzRWZmZWN0VHlwZShGT1JLKSxcbiAgam9pbjogLyojX19QVVJFX18qL2NyZWF0ZUFzRWZmZWN0VHlwZShKT0lOKSxcbiAgY2FuY2VsOiAvKiNfX1BVUkVfXyovY3JlYXRlQXNFZmZlY3RUeXBlKENBTkNFTCksXG4gIHNlbGVjdDogLyojX19QVVJFX18qL2NyZWF0ZUFzRWZmZWN0VHlwZShTRUxFQ1QpLFxuICBhY3Rpb25DaGFubmVsOiAvKiNfX1BVUkVfXyovY3JlYXRlQXNFZmZlY3RUeXBlKEFDVElPTl9DSEFOTkVMKSxcbiAgY2FuY2VsbGVkOiAvKiNfX1BVUkVfXyovY3JlYXRlQXNFZmZlY3RUeXBlKENBTkNFTExFRCksXG4gIGZsdXNoOiAvKiNfX1BVUkVfXyovY3JlYXRlQXNFZmZlY3RUeXBlKEZMVVNIKSxcbiAgZ2V0Q29udGV4dDogLyojX19QVVJFX18qL2NyZWF0ZUFzRWZmZWN0VHlwZShHRVRfQ09OVEVYVCksXG4gIHNldENvbnRleHQ6IC8qI19fUFVSRV9fKi9jcmVhdGVBc0VmZmVjdFR5cGUoU0VUX0NPTlRFWFQpXG59OyIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGFuIG9iamVjdCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG52YXIgZ2xvYmFsID0gbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvdy5NYXRoID09IE1hdGhcbiAgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGZcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gIDogRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbmlmICh0eXBlb2YgX19nID09ICdudW1iZXInKSBfX2cgPSBnbG9iYWw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG4iLCJ2YXIgc3RvcmUgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnd2tzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuU3ltYm9sO1xudmFyIFVTRV9TWU1CT0wgPSB0eXBlb2YgU3ltYm9sID09ICdmdW5jdGlvbic7XG5cbnZhciAkZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIHN0b3JlW25hbWVdIHx8IChzdG9yZVtuYW1lXSA9XG4gICAgVVNFX1NZTUJPTCAmJiBTeW1ib2xbbmFtZV0gfHwgKFVTRV9TWU1CT0wgPyBTeW1ib2wgOiB1aWQpKCdTeW1ib2wuJyArIG5hbWUpKTtcbn07XG5cbiRleHBvcnRzLnN0b3JlID0gc3RvcmU7XG4iLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5leHBvcnQgdmFyIHN1YnNjcmlwdGlvblNoYXBlID0gUHJvcFR5cGVzLnNoYXBlKHtcbiAgdHJ5U3Vic2NyaWJlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB0cnlVbnN1YnNjcmliZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgbm90aWZ5TmVzdGVkU3ViczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgaXNTdWJzY3JpYmVkOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG59KTtcblxuZXhwb3J0IHZhciBzdG9yZVNoYXBlID0gUHJvcFR5cGVzLnNoYXBlKHtcbiAgc3Vic2NyaWJlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBkaXNwYXRjaDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgZ2V0U3RhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbn0pOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBDaGlsZHJlbiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBzdG9yZVNoYXBlLCBzdWJzY3JpcHRpb25TaGFwZSB9IGZyb20gJy4uL3V0aWxzL1Byb3BUeXBlcyc7XG5pbXBvcnQgd2FybmluZyBmcm9tICcuLi91dGlscy93YXJuaW5nJztcblxudmFyIGRpZFdhcm5BYm91dFJlY2VpdmluZ1N0b3JlID0gZmFsc2U7XG5mdW5jdGlvbiB3YXJuQWJvdXRSZWNlaXZpbmdTdG9yZSgpIHtcbiAgaWYgKGRpZFdhcm5BYm91dFJlY2VpdmluZ1N0b3JlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGRpZFdhcm5BYm91dFJlY2VpdmluZ1N0b3JlID0gdHJ1ZTtcblxuICB3YXJuaW5nKCc8UHJvdmlkZXI+IGRvZXMgbm90IHN1cHBvcnQgY2hhbmdpbmcgYHN0b3JlYCBvbiB0aGUgZmx5LiAnICsgJ0l0IGlzIG1vc3QgbGlrZWx5IHRoYXQgeW91IHNlZSB0aGlzIGVycm9yIGJlY2F1c2UgeW91IHVwZGF0ZWQgdG8gJyArICdSZWR1eCAyLnggYW5kIFJlYWN0IFJlZHV4IDIueCB3aGljaCBubyBsb25nZXIgaG90IHJlbG9hZCByZWR1Y2VycyAnICsgJ2F1dG9tYXRpY2FsbHkuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC1yZWR1eC9yZWxlYXNlcy8nICsgJ3RhZy92Mi4wLjAgZm9yIHRoZSBtaWdyYXRpb24gaW5zdHJ1Y3Rpb25zLicpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUHJvdmlkZXIoKSB7XG4gIHZhciBfUHJvdmlkZXIkY2hpbGRDb250ZXg7XG5cbiAgdmFyIHN0b3JlS2V5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAnc3RvcmUnO1xuICB2YXIgc3ViS2V5ID0gYXJndW1lbnRzWzFdO1xuXG4gIHZhciBzdWJzY3JpcHRpb25LZXkgPSBzdWJLZXkgfHwgc3RvcmVLZXkgKyAnU3Vic2NyaXB0aW9uJztcblxuICB2YXIgUHJvdmlkZXIgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhQcm92aWRlciwgX0NvbXBvbmVudCk7XG5cbiAgICBQcm92aWRlci5wcm90b3R5cGUuZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIHJldHVybiBfcmVmID0ge30sIF9yZWZbc3RvcmVLZXldID0gdGhpc1tzdG9yZUtleV0sIF9yZWZbc3Vic2NyaXB0aW9uS2V5XSA9IG51bGwsIF9yZWY7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIFByb3ZpZGVyKHByb3BzLCBjb250ZXh0KSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUHJvdmlkZXIpO1xuXG4gICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpKTtcblxuICAgICAgX3RoaXNbc3RvcmVLZXldID0gcHJvcHMuc3RvcmU7XG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgUHJvdmlkZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBDaGlsZHJlbi5vbmx5KHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICAgIH07XG5cbiAgICByZXR1cm4gUHJvdmlkZXI7XG4gIH0oQ29tcG9uZW50KTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIFByb3ZpZGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gKG5leHRQcm9wcykge1xuICAgICAgaWYgKHRoaXNbc3RvcmVLZXldICE9PSBuZXh0UHJvcHMuc3RvcmUpIHtcbiAgICAgICAgd2FybkFib3V0UmVjZWl2aW5nU3RvcmUoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgUHJvdmlkZXIucHJvcFR5cGVzID0ge1xuICAgIHN0b3JlOiBzdG9yZVNoYXBlLmlzUmVxdWlyZWQsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5lbGVtZW50LmlzUmVxdWlyZWRcbiAgfTtcbiAgUHJvdmlkZXIuY2hpbGRDb250ZXh0VHlwZXMgPSAoX1Byb3ZpZGVyJGNoaWxkQ29udGV4ID0ge30sIF9Qcm92aWRlciRjaGlsZENvbnRleFtzdG9yZUtleV0gPSBzdG9yZVNoYXBlLmlzUmVxdWlyZWQsIF9Qcm92aWRlciRjaGlsZENvbnRleFtzdWJzY3JpcHRpb25LZXldID0gc3Vic2NyaXB0aW9uU2hhcGUsIF9Qcm92aWRlciRjaGlsZENvbnRleCk7XG5cbiAgcmV0dXJuIFByb3ZpZGVyO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVQcm92aWRlcigpOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbi8vIGVuY2Fwc3VsYXRlcyB0aGUgc3Vic2NyaXB0aW9uIGxvZ2ljIGZvciBjb25uZWN0aW5nIGEgY29tcG9uZW50IHRvIHRoZSByZWR1eCBzdG9yZSwgYXNcbi8vIHdlbGwgYXMgbmVzdGluZyBzdWJzY3JpcHRpb25zIG9mIGRlc2NlbmRhbnQgY29tcG9uZW50cywgc28gdGhhdCB3ZSBjYW4gZW5zdXJlIHRoZVxuLy8gYW5jZXN0b3IgY29tcG9uZW50cyByZS1yZW5kZXIgYmVmb3JlIGRlc2NlbmRhbnRzXG5cbnZhciBDTEVBUkVEID0gbnVsbDtcbnZhciBudWxsTGlzdGVuZXJzID0ge1xuICBub3RpZnk6IGZ1bmN0aW9uIG5vdGlmeSgpIHt9XG59O1xuXG5mdW5jdGlvbiBjcmVhdGVMaXN0ZW5lckNvbGxlY3Rpb24oKSB7XG4gIC8vIHRoZSBjdXJyZW50L25leHQgcGF0dGVybiBpcyBjb3BpZWQgZnJvbSByZWR1eCdzIGNyZWF0ZVN0b3JlIGNvZGUuXG4gIC8vIFRPRE86IHJlZmFjdG9yK2V4cG9zZSB0aGF0IGNvZGUgdG8gYmUgcmV1c2FibGUgaGVyZT9cbiAgdmFyIGN1cnJlbnQgPSBbXTtcbiAgdmFyIG5leHQgPSBbXTtcblxuICByZXR1cm4ge1xuICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgIG5leHQgPSBDTEVBUkVEO1xuICAgICAgY3VycmVudCA9IENMRUFSRUQ7XG4gICAgfSxcbiAgICBub3RpZnk6IGZ1bmN0aW9uIG5vdGlmeSgpIHtcbiAgICAgIHZhciBsaXN0ZW5lcnMgPSBjdXJyZW50ID0gbmV4dDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxpc3RlbmVyc1tpXSgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9LFxuICAgIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgICB2YXIgaXNTdWJzY3JpYmVkID0gdHJ1ZTtcbiAgICAgIGlmIChuZXh0ID09PSBjdXJyZW50KSBuZXh0ID0gY3VycmVudC5zbGljZSgpO1xuICAgICAgbmV4dC5wdXNoKGxpc3RlbmVyKTtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgICBpZiAoIWlzU3Vic2NyaWJlZCB8fCBjdXJyZW50ID09PSBDTEVBUkVEKSByZXR1cm47XG4gICAgICAgIGlzU3Vic2NyaWJlZCA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChuZXh0ID09PSBjdXJyZW50KSBuZXh0ID0gY3VycmVudC5zbGljZSgpO1xuICAgICAgICBuZXh0LnNwbGljZShuZXh0LmluZGV4T2YobGlzdGVuZXIpLCAxKTtcbiAgICAgIH07XG4gICAgfVxuICB9O1xufVxuXG52YXIgU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTdWJzY3JpcHRpb24oc3RvcmUsIHBhcmVudFN1Yiwgb25TdGF0ZUNoYW5nZSkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTdWJzY3JpcHRpb24pO1xuXG4gICAgdGhpcy5zdG9yZSA9IHN0b3JlO1xuICAgIHRoaXMucGFyZW50U3ViID0gcGFyZW50U3ViO1xuICAgIHRoaXMub25TdGF0ZUNoYW5nZSA9IG9uU3RhdGVDaGFuZ2U7XG4gICAgdGhpcy51bnN1YnNjcmliZSA9IG51bGw7XG4gICAgdGhpcy5saXN0ZW5lcnMgPSBudWxsTGlzdGVuZXJzO1xuICB9XG5cbiAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5hZGROZXN0ZWRTdWIgPSBmdW5jdGlvbiBhZGROZXN0ZWRTdWIobGlzdGVuZXIpIHtcbiAgICB0aGlzLnRyeVN1YnNjcmliZSgpO1xuICAgIHJldHVybiB0aGlzLmxpc3RlbmVycy5zdWJzY3JpYmUobGlzdGVuZXIpO1xuICB9O1xuXG4gIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUubm90aWZ5TmVzdGVkU3VicyA9IGZ1bmN0aW9uIG5vdGlmeU5lc3RlZFN1YnMoKSB7XG4gICAgdGhpcy5saXN0ZW5lcnMubm90aWZ5KCk7XG4gIH07XG5cbiAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5pc1N1YnNjcmliZWQgPSBmdW5jdGlvbiBpc1N1YnNjcmliZWQoKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4odGhpcy51bnN1YnNjcmliZSk7XG4gIH07XG5cbiAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS50cnlTdWJzY3JpYmUgPSBmdW5jdGlvbiB0cnlTdWJzY3JpYmUoKSB7XG4gICAgaWYgKCF0aGlzLnVuc3Vic2NyaWJlKSB7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlID0gdGhpcy5wYXJlbnRTdWIgPyB0aGlzLnBhcmVudFN1Yi5hZGROZXN0ZWRTdWIodGhpcy5vblN0YXRlQ2hhbmdlKSA6IHRoaXMuc3RvcmUuc3Vic2NyaWJlKHRoaXMub25TdGF0ZUNoYW5nZSk7XG5cbiAgICAgIHRoaXMubGlzdGVuZXJzID0gY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uKCk7XG4gICAgfVxuICB9O1xuXG4gIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUudHJ5VW5zdWJzY3JpYmUgPSBmdW5jdGlvbiB0cnlVbnN1YnNjcmliZSgpIHtcbiAgICBpZiAodGhpcy51bnN1YnNjcmliZSkge1xuICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgdGhpcy51bnN1YnNjcmliZSA9IG51bGw7XG4gICAgICB0aGlzLmxpc3RlbmVycy5jbGVhcigpO1xuICAgICAgdGhpcy5saXN0ZW5lcnMgPSBudWxsTGlzdGVuZXJzO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gU3Vic2NyaXB0aW9uO1xufSgpO1xuXG5leHBvcnQgeyBTdWJzY3JpcHRpb24gYXMgZGVmYXVsdCB9OyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5pbXBvcnQgaG9pc3RTdGF0aWNzIGZyb20gJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCB7IENvbXBvbmVudCwgY3JlYXRlRWxlbWVudCB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IFN1YnNjcmlwdGlvbiBmcm9tICcuLi91dGlscy9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgc3RvcmVTaGFwZSwgc3Vic2NyaXB0aW9uU2hhcGUgfSBmcm9tICcuLi91dGlscy9Qcm9wVHlwZXMnO1xuXG52YXIgaG90UmVsb2FkaW5nVmVyc2lvbiA9IDA7XG52YXIgZHVtbXlTdGF0ZSA9IHt9O1xuZnVuY3Rpb24gbm9vcCgpIHt9XG5mdW5jdGlvbiBtYWtlU2VsZWN0b3JTdGF0ZWZ1bChzb3VyY2VTZWxlY3Rvciwgc3RvcmUpIHtcbiAgLy8gd3JhcCB0aGUgc2VsZWN0b3IgaW4gYW4gb2JqZWN0IHRoYXQgdHJhY2tzIGl0cyByZXN1bHRzIGJldHdlZW4gcnVucy5cbiAgdmFyIHNlbGVjdG9yID0ge1xuICAgIHJ1bjogZnVuY3Rpb24gcnVuQ29tcG9uZW50U2VsZWN0b3IocHJvcHMpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBuZXh0UHJvcHMgPSBzb3VyY2VTZWxlY3RvcihzdG9yZS5nZXRTdGF0ZSgpLCBwcm9wcyk7XG4gICAgICAgIGlmIChuZXh0UHJvcHMgIT09IHNlbGVjdG9yLnByb3BzIHx8IHNlbGVjdG9yLmVycm9yKSB7XG4gICAgICAgICAgc2VsZWN0b3Iuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgICBzZWxlY3Rvci5wcm9wcyA9IG5leHRQcm9wcztcbiAgICAgICAgICBzZWxlY3Rvci5lcnJvciA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IHRydWU7XG4gICAgICAgIHNlbGVjdG9yLmVycm9yID0gZXJyb3I7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBzZWxlY3Rvcjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29ubmVjdEFkdmFuY2VkKFxuLypcbiAgc2VsZWN0b3JGYWN0b3J5IGlzIGEgZnVuYyB0aGF0IGlzIHJlc3BvbnNpYmxlIGZvciByZXR1cm5pbmcgdGhlIHNlbGVjdG9yIGZ1bmN0aW9uIHVzZWQgdG9cbiAgY29tcHV0ZSBuZXcgcHJvcHMgZnJvbSBzdGF0ZSwgcHJvcHMsIGFuZCBkaXNwYXRjaC4gRm9yIGV4YW1wbGU6XG4gICAgIGV4cG9ydCBkZWZhdWx0IGNvbm5lY3RBZHZhbmNlZCgoZGlzcGF0Y2gsIG9wdGlvbnMpID0+IChzdGF0ZSwgcHJvcHMpID0+ICh7XG4gICAgICB0aGluZzogc3RhdGUudGhpbmdzW3Byb3BzLnRoaW5nSWRdLFxuICAgICAgc2F2ZVRoaW5nOiBmaWVsZHMgPT4gZGlzcGF0Y2goYWN0aW9uQ3JlYXRvcnMuc2F2ZVRoaW5nKHByb3BzLnRoaW5nSWQsIGZpZWxkcykpLFxuICAgIH0pKShZb3VyQ29tcG9uZW50KVxuICAgQWNjZXNzIHRvIGRpc3BhdGNoIGlzIHByb3ZpZGVkIHRvIHRoZSBmYWN0b3J5IHNvIHNlbGVjdG9yRmFjdG9yaWVzIGNhbiBiaW5kIGFjdGlvbkNyZWF0b3JzXG4gIG91dHNpZGUgb2YgdGhlaXIgc2VsZWN0b3IgYXMgYW4gb3B0aW1pemF0aW9uLiBPcHRpb25zIHBhc3NlZCB0byBjb25uZWN0QWR2YW5jZWQgYXJlIHBhc3NlZCB0b1xuICB0aGUgc2VsZWN0b3JGYWN0b3J5LCBhbG9uZyB3aXRoIGRpc3BsYXlOYW1lIGFuZCBXcmFwcGVkQ29tcG9uZW50LCBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50LlxuICAgTm90ZSB0aGF0IHNlbGVjdG9yRmFjdG9yeSBpcyByZXNwb25zaWJsZSBmb3IgYWxsIGNhY2hpbmcvbWVtb2l6YXRpb24gb2YgaW5ib3VuZCBhbmQgb3V0Ym91bmRcbiAgcHJvcHMuIERvIG5vdCB1c2UgY29ubmVjdEFkdmFuY2VkIGRpcmVjdGx5IHdpdGhvdXQgbWVtb2l6aW5nIHJlc3VsdHMgYmV0d2VlbiBjYWxscyB0byB5b3VyXG4gIHNlbGVjdG9yLCBvdGhlcndpc2UgdGhlIENvbm5lY3QgY29tcG9uZW50IHdpbGwgcmUtcmVuZGVyIG9uIGV2ZXJ5IHN0YXRlIG9yIHByb3BzIGNoYW5nZS5cbiovXG5zZWxlY3RvckZhY3RvcnkpIHtcbiAgdmFyIF9jb250ZXh0VHlwZXMsIF9jaGlsZENvbnRleHRUeXBlcztcblxuICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge30sXG4gICAgICBfcmVmJGdldERpc3BsYXlOYW1lID0gX3JlZi5nZXREaXNwbGF5TmFtZSxcbiAgICAgIGdldERpc3BsYXlOYW1lID0gX3JlZiRnZXREaXNwbGF5TmFtZSA9PT0gdW5kZWZpbmVkID8gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gJ0Nvbm5lY3RBZHZhbmNlZCgnICsgbmFtZSArICcpJztcbiAgfSA6IF9yZWYkZ2V0RGlzcGxheU5hbWUsXG4gICAgICBfcmVmJG1ldGhvZE5hbWUgPSBfcmVmLm1ldGhvZE5hbWUsXG4gICAgICBtZXRob2ROYW1lID0gX3JlZiRtZXRob2ROYW1lID09PSB1bmRlZmluZWQgPyAnY29ubmVjdEFkdmFuY2VkJyA6IF9yZWYkbWV0aG9kTmFtZSxcbiAgICAgIF9yZWYkcmVuZGVyQ291bnRQcm9wID0gX3JlZi5yZW5kZXJDb3VudFByb3AsXG4gICAgICByZW5kZXJDb3VudFByb3AgPSBfcmVmJHJlbmRlckNvdW50UHJvcCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogX3JlZiRyZW5kZXJDb3VudFByb3AsXG4gICAgICBfcmVmJHNob3VsZEhhbmRsZVN0YXQgPSBfcmVmLnNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyxcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyA9IF9yZWYkc2hvdWxkSGFuZGxlU3RhdCA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IF9yZWYkc2hvdWxkSGFuZGxlU3RhdCxcbiAgICAgIF9yZWYkc3RvcmVLZXkgPSBfcmVmLnN0b3JlS2V5LFxuICAgICAgc3RvcmVLZXkgPSBfcmVmJHN0b3JlS2V5ID09PSB1bmRlZmluZWQgPyAnc3RvcmUnIDogX3JlZiRzdG9yZUtleSxcbiAgICAgIF9yZWYkd2l0aFJlZiA9IF9yZWYud2l0aFJlZixcbiAgICAgIHdpdGhSZWYgPSBfcmVmJHdpdGhSZWYgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX3JlZiR3aXRoUmVmLFxuICAgICAgY29ubmVjdE9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgWydnZXREaXNwbGF5TmFtZScsICdtZXRob2ROYW1lJywgJ3JlbmRlckNvdW50UHJvcCcsICdzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMnLCAnc3RvcmVLZXknLCAnd2l0aFJlZiddKTtcblxuICB2YXIgc3Vic2NyaXB0aW9uS2V5ID0gc3RvcmVLZXkgKyAnU3Vic2NyaXB0aW9uJztcbiAgdmFyIHZlcnNpb24gPSBob3RSZWxvYWRpbmdWZXJzaW9uKys7XG5cbiAgdmFyIGNvbnRleHRUeXBlcyA9IChfY29udGV4dFR5cGVzID0ge30sIF9jb250ZXh0VHlwZXNbc3RvcmVLZXldID0gc3RvcmVTaGFwZSwgX2NvbnRleHRUeXBlc1tzdWJzY3JpcHRpb25LZXldID0gc3Vic2NyaXB0aW9uU2hhcGUsIF9jb250ZXh0VHlwZXMpO1xuICB2YXIgY2hpbGRDb250ZXh0VHlwZXMgPSAoX2NoaWxkQ29udGV4dFR5cGVzID0ge30sIF9jaGlsZENvbnRleHRUeXBlc1tzdWJzY3JpcHRpb25LZXldID0gc3Vic2NyaXB0aW9uU2hhcGUsIF9jaGlsZENvbnRleHRUeXBlcyk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXBXaXRoQ29ubmVjdChXcmFwcGVkQ29tcG9uZW50KSB7XG4gICAgaW52YXJpYW50KHR5cGVvZiBXcmFwcGVkQ29tcG9uZW50ID09ICdmdW5jdGlvbicsICdZb3UgbXVzdCBwYXNzIGEgY29tcG9uZW50IHRvIHRoZSBmdW5jdGlvbiByZXR1cm5lZCBieSAnICsgKG1ldGhvZE5hbWUgKyAnLiBJbnN0ZWFkIHJlY2VpdmVkICcgKyBKU09OLnN0cmluZ2lmeShXcmFwcGVkQ29tcG9uZW50KSkpO1xuXG4gICAgdmFyIHdyYXBwZWRDb21wb25lbnROYW1lID0gV3JhcHBlZENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBXcmFwcGVkQ29tcG9uZW50Lm5hbWUgfHwgJ0NvbXBvbmVudCc7XG5cbiAgICB2YXIgZGlzcGxheU5hbWUgPSBnZXREaXNwbGF5TmFtZSh3cmFwcGVkQ29tcG9uZW50TmFtZSk7XG5cbiAgICB2YXIgc2VsZWN0b3JGYWN0b3J5T3B0aW9ucyA9IF9leHRlbmRzKHt9LCBjb25uZWN0T3B0aW9ucywge1xuICAgICAgZ2V0RGlzcGxheU5hbWU6IGdldERpc3BsYXlOYW1lLFxuICAgICAgbWV0aG9kTmFtZTogbWV0aG9kTmFtZSxcbiAgICAgIHJlbmRlckNvdW50UHJvcDogcmVuZGVyQ291bnRQcm9wLFxuICAgICAgc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzOiBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsXG4gICAgICBzdG9yZUtleTogc3RvcmVLZXksXG4gICAgICB3aXRoUmVmOiB3aXRoUmVmLFxuICAgICAgZGlzcGxheU5hbWU6IGRpc3BsYXlOYW1lLFxuICAgICAgd3JhcHBlZENvbXBvbmVudE5hbWU6IHdyYXBwZWRDb21wb25lbnROYW1lLFxuICAgICAgV3JhcHBlZENvbXBvbmVudDogV3JhcHBlZENvbXBvbmVudFxuICAgIH0pO1xuXG4gICAgdmFyIENvbm5lY3QgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgICAgX2luaGVyaXRzKENvbm5lY3QsIF9Db21wb25lbnQpO1xuXG4gICAgICBmdW5jdGlvbiBDb25uZWN0KHByb3BzLCBjb250ZXh0KSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb25uZWN0KTtcblxuICAgICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpKTtcblxuICAgICAgICBfdGhpcy52ZXJzaW9uID0gdmVyc2lvbjtcbiAgICAgICAgX3RoaXMuc3RhdGUgPSB7fTtcbiAgICAgICAgX3RoaXMucmVuZGVyQ291bnQgPSAwO1xuICAgICAgICBfdGhpcy5zdG9yZSA9IHByb3BzW3N0b3JlS2V5XSB8fCBjb250ZXh0W3N0b3JlS2V5XTtcbiAgICAgICAgX3RoaXMucHJvcHNNb2RlID0gQm9vbGVhbihwcm9wc1tzdG9yZUtleV0pO1xuICAgICAgICBfdGhpcy5zZXRXcmFwcGVkSW5zdGFuY2UgPSBfdGhpcy5zZXRXcmFwcGVkSW5zdGFuY2UuYmluZChfdGhpcyk7XG5cbiAgICAgICAgaW52YXJpYW50KF90aGlzLnN0b3JlLCAnQ291bGQgbm90IGZpbmQgXCInICsgc3RvcmVLZXkgKyAnXCIgaW4gZWl0aGVyIHRoZSBjb250ZXh0IG9yIHByb3BzIG9mICcgKyAoJ1wiJyArIGRpc3BsYXlOYW1lICsgJ1wiLiBFaXRoZXIgd3JhcCB0aGUgcm9vdCBjb21wb25lbnQgaW4gYSA8UHJvdmlkZXI+LCAnKSArICgnb3IgZXhwbGljaXRseSBwYXNzIFwiJyArIHN0b3JlS2V5ICsgJ1wiIGFzIGEgcHJvcCB0byBcIicgKyBkaXNwbGF5TmFtZSArICdcIi4nKSk7XG5cbiAgICAgICAgX3RoaXMuaW5pdFNlbGVjdG9yKCk7XG4gICAgICAgIF90aGlzLmluaXRTdWJzY3JpcHRpb24oKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgICAgfVxuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgICAgIHZhciBfcmVmMjtcblxuICAgICAgICAvLyBJZiB0aGlzIGNvbXBvbmVudCByZWNlaXZlZCBzdG9yZSBmcm9tIHByb3BzLCBpdHMgc3Vic2NyaXB0aW9uIHNob3VsZCBiZSB0cmFuc3BhcmVudFxuICAgICAgICAvLyB0byBhbnkgZGVzY2VuZGFudHMgcmVjZWl2aW5nIHN0b3JlK3N1YnNjcmlwdGlvbiBmcm9tIGNvbnRleHQ7IGl0IHBhc3NlcyBhbG9uZ1xuICAgICAgICAvLyBzdWJzY3JpcHRpb24gcGFzc2VkIHRvIGl0LiBPdGhlcndpc2UsIGl0IHNoYWRvd3MgdGhlIHBhcmVudCBzdWJzY3JpcHRpb24sIHdoaWNoIGFsbG93c1xuICAgICAgICAvLyBDb25uZWN0IHRvIGNvbnRyb2wgb3JkZXJpbmcgb2Ygbm90aWZpY2F0aW9ucyB0byBmbG93IHRvcC1kb3duLlxuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5wcm9wc01vZGUgPyBudWxsIDogdGhpcy5zdWJzY3JpcHRpb247XG4gICAgICAgIHJldHVybiBfcmVmMiA9IHt9LCBfcmVmMltzdWJzY3JpcHRpb25LZXldID0gc3Vic2NyaXB0aW9uIHx8IHRoaXMuY29udGV4dFtzdWJzY3JpcHRpb25LZXldLCBfcmVmMjtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgIGlmICghc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSByZXR1cm47XG5cbiAgICAgICAgLy8gY29tcG9uZW50V2lsbE1vdW50IGZpcmVzIGR1cmluZyBzZXJ2ZXIgc2lkZSByZW5kZXJpbmcsIGJ1dCBjb21wb25lbnREaWRNb3VudCBhbmRcbiAgICAgICAgLy8gY29tcG9uZW50V2lsbFVubW91bnQgZG8gbm90LiBCZWNhdXNlIG9mIHRoaXMsIHRyeVN1YnNjcmliZSBoYXBwZW5zIGR1cmluZyAuLi5kaWRNb3VudC5cbiAgICAgICAgLy8gT3RoZXJ3aXNlLCB1bnN1YnNjcmlwdGlvbiB3b3VsZCBuZXZlciB0YWtlIHBsYWNlIGR1cmluZyBTU1IsIGNhdXNpbmcgYSBtZW1vcnkgbGVhay5cbiAgICAgICAgLy8gVG8gaGFuZGxlIHRoZSBjYXNlIHdoZXJlIGEgY2hpbGQgY29tcG9uZW50IG1heSBoYXZlIHRyaWdnZXJlZCBhIHN0YXRlIGNoYW5nZSBieVxuICAgICAgICAvLyBkaXNwYXRjaGluZyBhbiBhY3Rpb24gaW4gaXRzIGNvbXBvbmVudFdpbGxNb3VudCwgd2UgaGF2ZSB0byByZS1ydW4gdGhlIHNlbGVjdCBhbmQgbWF5YmVcbiAgICAgICAgLy8gcmUtcmVuZGVyLlxuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbi50cnlTdWJzY3JpYmUoKTtcbiAgICAgICAgdGhpcy5zZWxlY3Rvci5ydW4odGhpcy5wcm9wcyk7XG4gICAgICAgIGlmICh0aGlzLnNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZSkgdGhpcy5mb3JjZVVwZGF0ZSgpO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0b3IucnVuKG5leHRQcm9wcyk7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5zaG91bGRDb21wb25lbnRVcGRhdGUgPSBmdW5jdGlvbiBzaG91bGRDb21wb25lbnRVcGRhdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZTtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAgIGlmICh0aGlzLnN1YnNjcmlwdGlvbikgdGhpcy5zdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb24gPSBudWxsO1xuICAgICAgICB0aGlzLm5vdGlmeU5lc3RlZFN1YnMgPSBub29wO1xuICAgICAgICB0aGlzLnN0b3JlID0gbnVsbDtcbiAgICAgICAgdGhpcy5zZWxlY3Rvci5ydW4gPSBub29wO1xuICAgICAgICB0aGlzLnNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IGZhbHNlO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuZ2V0V3JhcHBlZEluc3RhbmNlID0gZnVuY3Rpb24gZ2V0V3JhcHBlZEluc3RhbmNlKCkge1xuICAgICAgICBpbnZhcmlhbnQod2l0aFJlZiwgJ1RvIGFjY2VzcyB0aGUgd3JhcHBlZCBpbnN0YW5jZSwgeW91IG5lZWQgdG8gc3BlY2lmeSAnICsgKCd7IHdpdGhSZWY6IHRydWUgfSBpbiB0aGUgb3B0aW9ucyBhcmd1bWVudCBvZiB0aGUgJyArIG1ldGhvZE5hbWUgKyAnKCkgY2FsbC4nKSk7XG4gICAgICAgIHJldHVybiB0aGlzLndyYXBwZWRJbnN0YW5jZTtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLnNldFdyYXBwZWRJbnN0YW5jZSA9IGZ1bmN0aW9uIHNldFdyYXBwZWRJbnN0YW5jZShyZWYpIHtcbiAgICAgICAgdGhpcy53cmFwcGVkSW5zdGFuY2UgPSByZWY7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5pbml0U2VsZWN0b3IgPSBmdW5jdGlvbiBpbml0U2VsZWN0b3IoKSB7XG4gICAgICAgIHZhciBzb3VyY2VTZWxlY3RvciA9IHNlbGVjdG9yRmFjdG9yeSh0aGlzLnN0b3JlLmRpc3BhdGNoLCBzZWxlY3RvckZhY3RvcnlPcHRpb25zKTtcbiAgICAgICAgdGhpcy5zZWxlY3RvciA9IG1ha2VTZWxlY3RvclN0YXRlZnVsKHNvdXJjZVNlbGVjdG9yLCB0aGlzLnN0b3JlKTtcbiAgICAgICAgdGhpcy5zZWxlY3Rvci5ydW4odGhpcy5wcm9wcyk7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5pbml0U3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gaW5pdFN1YnNjcmlwdGlvbigpIHtcbiAgICAgICAgaWYgKCFzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHJldHVybjtcblxuICAgICAgICAvLyBwYXJlbnRTdWIncyBzb3VyY2Ugc2hvdWxkIG1hdGNoIHdoZXJlIHN0b3JlIGNhbWUgZnJvbTogcHJvcHMgdnMuIGNvbnRleHQuIEEgY29tcG9uZW50XG4gICAgICAgIC8vIGNvbm5lY3RlZCB0byB0aGUgc3RvcmUgdmlhIHByb3BzIHNob3VsZG4ndCB1c2Ugc3Vic2NyaXB0aW9uIGZyb20gY29udGV4dCwgb3IgdmljZSB2ZXJzYS5cbiAgICAgICAgdmFyIHBhcmVudFN1YiA9ICh0aGlzLnByb3BzTW9kZSA/IHRoaXMucHJvcHMgOiB0aGlzLmNvbnRleHQpW3N1YnNjcmlwdGlvbktleV07XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbih0aGlzLnN0b3JlLCBwYXJlbnRTdWIsIHRoaXMub25TdGF0ZUNoYW5nZS5iaW5kKHRoaXMpKTtcblxuICAgICAgICAvLyBgbm90aWZ5TmVzdGVkU3Vic2AgaXMgZHVwbGljYXRlZCB0byBoYW5kbGUgdGhlIGNhc2Ugd2hlcmUgdGhlIGNvbXBvbmVudCBpcyAgdW5tb3VudGVkIGluXG4gICAgICAgIC8vIHRoZSBtaWRkbGUgb2YgdGhlIG5vdGlmaWNhdGlvbiBsb29wLCB3aGVyZSBgdGhpcy5zdWJzY3JpcHRpb25gIHdpbGwgdGhlbiBiZSBudWxsLiBBblxuICAgICAgICAvLyBleHRyYSBudWxsIGNoZWNrIGV2ZXJ5IGNoYW5nZSBjYW4gYmUgYXZvaWRlZCBieSBjb3B5aW5nIHRoZSBtZXRob2Qgb250byBgdGhpc2AgYW5kIHRoZW5cbiAgICAgICAgLy8gcmVwbGFjaW5nIGl0IHdpdGggYSBuby1vcCBvbiB1bm1vdW50LiBUaGlzIGNhbiBwcm9iYWJseSBiZSBhdm9pZGVkIGlmIFN1YnNjcmlwdGlvbidzXG4gICAgICAgIC8vIGxpc3RlbmVycyBsb2dpYyBpcyBjaGFuZ2VkIHRvIG5vdCBjYWxsIGxpc3RlbmVycyB0aGF0IGhhdmUgYmVlbiB1bnN1YnNjcmliZWQgaW4gdGhlXG4gICAgICAgIC8vIG1pZGRsZSBvZiB0aGUgbm90aWZpY2F0aW9uIGxvb3AuXG4gICAgICAgIHRoaXMubm90aWZ5TmVzdGVkU3VicyA9IHRoaXMuc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnMuYmluZCh0aGlzLnN1YnNjcmlwdGlvbik7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5vblN0YXRlQ2hhbmdlID0gZnVuY3Rpb24gb25TdGF0ZUNoYW5nZSgpIHtcbiAgICAgICAgdGhpcy5zZWxlY3Rvci5ydW4odGhpcy5wcm9wcyk7XG5cbiAgICAgICAgaWYgKCF0aGlzLnNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZSkge1xuICAgICAgICAgIHRoaXMubm90aWZ5TmVzdGVkU3VicygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuY29tcG9uZW50RGlkVXBkYXRlID0gdGhpcy5ub3RpZnlOZXN0ZWRTdWJzT25Db21wb25lbnREaWRVcGRhdGU7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZShkdW1teVN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUubm90aWZ5TmVzdGVkU3Vic09uQ29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gbm90aWZ5TmVzdGVkU3Vic09uQ29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgICAgICAvLyBgY29tcG9uZW50RGlkVXBkYXRlYCBpcyBjb25kaXRpb25hbGx5IGltcGxlbWVudGVkIHdoZW4gYG9uU3RhdGVDaGFuZ2VgIGRldGVybWluZXMgaXRcbiAgICAgICAgLy8gbmVlZHMgdG8gbm90aWZ5IG5lc3RlZCBzdWJzLiBPbmNlIGNhbGxlZCwgaXQgdW5pbXBsZW1lbnRzIGl0c2VsZiB1bnRpbCBmdXJ0aGVyIHN0YXRlXG4gICAgICAgIC8vIGNoYW5nZXMgb2NjdXIuIERvaW5nIGl0IHRoaXMgd2F5IHZzIGhhdmluZyBhIHBlcm1hbmVudCBgY29tcG9uZW50RGlkVXBkYXRlYCB0aGF0IGRvZXNcbiAgICAgICAgLy8gYSBib29sZWFuIGNoZWNrIGV2ZXJ5IHRpbWUgYXZvaWRzIGFuIGV4dHJhIG1ldGhvZCBjYWxsIG1vc3Qgb2YgdGhlIHRpbWUsIHJlc3VsdGluZ1xuICAgICAgICAvLyBpbiBzb21lIHBlcmYgYm9vc3QuXG4gICAgICAgIHRoaXMuY29tcG9uZW50RGlkVXBkYXRlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLm5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmlzU3Vic2NyaWJlZCA9IGZ1bmN0aW9uIGlzU3Vic2NyaWJlZCgpIHtcbiAgICAgICAgcmV0dXJuIEJvb2xlYW4odGhpcy5zdWJzY3JpcHRpb24pICYmIHRoaXMuc3Vic2NyaXB0aW9uLmlzU3Vic2NyaWJlZCgpO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuYWRkRXh0cmFQcm9wcyA9IGZ1bmN0aW9uIGFkZEV4dHJhUHJvcHMocHJvcHMpIHtcbiAgICAgICAgaWYgKCF3aXRoUmVmICYmICFyZW5kZXJDb3VudFByb3AgJiYgISh0aGlzLnByb3BzTW9kZSAmJiB0aGlzLnN1YnNjcmlwdGlvbikpIHJldHVybiBwcm9wcztcbiAgICAgICAgLy8gbWFrZSBhIHNoYWxsb3cgY29weSBzbyB0aGF0IGZpZWxkcyBhZGRlZCBkb24ndCBsZWFrIHRvIHRoZSBvcmlnaW5hbCBzZWxlY3Rvci5cbiAgICAgICAgLy8gdGhpcyBpcyBlc3BlY2lhbGx5IGltcG9ydGFudCBmb3IgJ3JlZicgc2luY2UgdGhhdCdzIGEgcmVmZXJlbmNlIGJhY2sgdG8gdGhlIGNvbXBvbmVudFxuICAgICAgICAvLyBpbnN0YW5jZS4gYSBzaW5nbGV0b24gbWVtb2l6ZWQgc2VsZWN0b3Igd291bGQgdGhlbiBiZSBob2xkaW5nIGEgcmVmZXJlbmNlIHRvIHRoZVxuICAgICAgICAvLyBpbnN0YW5jZSwgcHJldmVudGluZyB0aGUgaW5zdGFuY2UgZnJvbSBiZWluZyBnYXJiYWdlIGNvbGxlY3RlZCwgYW5kIHRoYXQgd291bGQgYmUgYmFkXG4gICAgICAgIHZhciB3aXRoRXh0cmFzID0gX2V4dGVuZHMoe30sIHByb3BzKTtcbiAgICAgICAgaWYgKHdpdGhSZWYpIHdpdGhFeHRyYXMucmVmID0gdGhpcy5zZXRXcmFwcGVkSW5zdGFuY2U7XG4gICAgICAgIGlmIChyZW5kZXJDb3VudFByb3ApIHdpdGhFeHRyYXNbcmVuZGVyQ291bnRQcm9wXSA9IHRoaXMucmVuZGVyQ291bnQrKztcbiAgICAgICAgaWYgKHRoaXMucHJvcHNNb2RlICYmIHRoaXMuc3Vic2NyaXB0aW9uKSB3aXRoRXh0cmFzW3N1YnNjcmlwdGlvbktleV0gPSB0aGlzLnN1YnNjcmlwdGlvbjtcbiAgICAgICAgcmV0dXJuIHdpdGhFeHRyYXM7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHZhciBzZWxlY3RvciA9IHRoaXMuc2VsZWN0b3I7XG4gICAgICAgIHNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChzZWxlY3Rvci5lcnJvcikge1xuICAgICAgICAgIHRocm93IHNlbGVjdG9yLmVycm9yO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBjcmVhdGVFbGVtZW50KFdyYXBwZWRDb21wb25lbnQsIHRoaXMuYWRkRXh0cmFQcm9wcyhzZWxlY3Rvci5wcm9wcykpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gQ29ubmVjdDtcbiAgICB9KENvbXBvbmVudCk7XG5cbiAgICBDb25uZWN0LldyYXBwZWRDb21wb25lbnQgPSBXcmFwcGVkQ29tcG9uZW50O1xuICAgIENvbm5lY3QuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcbiAgICBDb25uZWN0LmNoaWxkQ29udGV4dFR5cGVzID0gY2hpbGRDb250ZXh0VHlwZXM7XG4gICAgQ29ubmVjdC5jb250ZXh0VHlwZXMgPSBjb250ZXh0VHlwZXM7XG4gICAgQ29ubmVjdC5wcm9wVHlwZXMgPSBjb250ZXh0VHlwZXM7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVcGRhdGUoKSB7XG4gICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgIC8vIFdlIGFyZSBob3QgcmVsb2FkaW5nIVxuICAgICAgICBpZiAodGhpcy52ZXJzaW9uICE9PSB2ZXJzaW9uKSB7XG4gICAgICAgICAgdGhpcy52ZXJzaW9uID0gdmVyc2lvbjtcbiAgICAgICAgICB0aGlzLmluaXRTZWxlY3RvcigpO1xuXG4gICAgICAgICAgLy8gSWYgYW55IGNvbm5lY3RlZCBkZXNjZW5kYW50cyBkb24ndCBob3QgcmVsb2FkIChhbmQgcmVzdWJzY3JpYmUgaW4gdGhlIHByb2Nlc3MpLCB0aGVpclxuICAgICAgICAgIC8vIGxpc3RlbmVycyB3aWxsIGJlIGxvc3Qgd2hlbiB3ZSB1bnN1YnNjcmliZS4gVW5mb3J0dW5hdGVseSwgYnkgY29weWluZyBvdmVyIGFsbFxuICAgICAgICAgIC8vIGxpc3RlbmVycywgdGhpcyBkb2VzIG1lYW4gdGhhdCB0aGUgb2xkIHZlcnNpb25zIG9mIGNvbm5lY3RlZCBkZXNjZW5kYW50cyB3aWxsIHN0aWxsIGJlXG4gICAgICAgICAgLy8gbm90aWZpZWQgb2Ygc3RhdGUgY2hhbmdlczsgaG93ZXZlciwgdGhlaXIgb25TdGF0ZUNoYW5nZSBmdW5jdGlvbiBpcyBhIG5vLW9wIHNvIHRoaXNcbiAgICAgICAgICAvLyBpc24ndCBhIGh1Z2UgZGVhbC5cbiAgICAgICAgICB2YXIgb2xkTGlzdGVuZXJzID0gW107XG5cbiAgICAgICAgICBpZiAodGhpcy5zdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIG9sZExpc3RlbmVycyA9IHRoaXMuc3Vic2NyaXB0aW9uLmxpc3RlbmVycy5nZXQoKTtcbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLnRyeVVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuaW5pdFN1YnNjcmlwdGlvbigpO1xuICAgICAgICAgIGlmIChzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHtcbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLnRyeVN1YnNjcmliZSgpO1xuICAgICAgICAgICAgb2xkTGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICAgICAgICAgIHJldHVybiBfdGhpczIuc3Vic2NyaXB0aW9uLmxpc3RlbmVycy5zdWJzY3JpYmUobGlzdGVuZXIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBob2lzdFN0YXRpY3MoQ29ubmVjdCwgV3JhcHBlZENvbXBvbmVudCk7XG4gIH07XG59IiwidmFyIGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbmZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgaWYgKHggPT09IHkpIHtcbiAgICByZXR1cm4geCAhPT0gMCB8fCB5ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCKSB7XG4gIGlmIChpcyhvYmpBLCBvYmpCKSkgcmV0dXJuIHRydWU7XG5cbiAgaWYgKHR5cGVvZiBvYmpBICE9PSAnb2JqZWN0JyB8fCBvYmpBID09PSBudWxsIHx8IHR5cGVvZiBvYmpCICE9PSAnb2JqZWN0JyB8fCBvYmpCID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKG9iakIpO1xuXG4gIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXNCLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5c0EubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIWhhc093bi5jYWxsKG9iakIsIGtleXNBW2ldKSB8fCAhaXMob2JqQVtrZXlzQVtpXV0sIG9iakJba2V5c0FbaV1dKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufSIsImltcG9ydCBmcmVlR2xvYmFsIGZyb20gJy4vX2ZyZWVHbG9iYWwuanMnO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xudmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG5cbi8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xudmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbmV4cG9ydCBkZWZhdWx0IHJvb3Q7XG4iLCJpbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cbmV4cG9ydCBkZWZhdWx0IFN5bWJvbDtcbiIsImltcG9ydCBTeW1ib2wgZnJvbSAnLi9fU3ltYm9sLmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUdldFRhZ2Agd2hpY2ggaWdub3JlcyBgU3ltYm9sLnRvU3RyaW5nVGFnYCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmF3IGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGdldFJhd1RhZyh2YWx1ZSkge1xuICB2YXIgaXNPd24gPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBzeW1Ub1N0cmluZ1RhZyksXG4gICAgICB0YWcgPSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG5cbiAgdHJ5IHtcbiAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB1bmRlZmluZWQ7XG4gICAgdmFyIHVubWFza2VkID0gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge31cblxuICB2YXIgcmVzdWx0ID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIGlmICh1bm1hc2tlZCkge1xuICAgIGlmIChpc093bikge1xuICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdGFnO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGUgdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXRSYXdUYWc7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgb2JqZWN0VG9TdHJpbmc7XG4iLCJpbXBvcnQgU3ltYm9sIGZyb20gJy4vX1N5bWJvbC5qcyc7XG5pbXBvcnQgZ2V0UmF3VGFnIGZyb20gJy4vX2dldFJhd1RhZy5qcyc7XG5pbXBvcnQgb2JqZWN0VG9TdHJpbmcgZnJvbSAnLi9fb2JqZWN0VG9TdHJpbmcuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbnVsbFRhZyA9ICdbb2JqZWN0IE51bGxdJyxcbiAgICB1bmRlZmluZWRUYWcgPSAnW29iamVjdCBVbmRlZmluZWRdJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldFRhZ2Agd2l0aG91dCBmYWxsYmFja3MgZm9yIGJ1Z2d5IGVudmlyb25tZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0VGFnKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWRUYWcgOiBudWxsVGFnO1xuICB9XG4gIHJldHVybiAoc3ltVG9TdHJpbmdUYWcgJiYgc3ltVG9TdHJpbmdUYWcgaW4gT2JqZWN0KHZhbHVlKSlcbiAgICA/IGdldFJhd1RhZyh2YWx1ZSlcbiAgICA6IG9iamVjdFRvU3RyaW5nKHZhbHVlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUdldFRhZztcbiIsImltcG9ydCBvdmVyQXJnIGZyb20gJy4vX292ZXJBcmcuanMnO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBnZXRQcm90b3R5cGUgPSBvdmVyQXJnKE9iamVjdC5nZXRQcm90b3R5cGVPZiwgT2JqZWN0KTtcblxuZXhwb3J0IGRlZmF1bHQgZ2V0UHJvdG90eXBlO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzT2JqZWN0TGlrZTtcbiIsImltcG9ydCBiYXNlR2V0VGFnIGZyb20gJy4vX2Jhc2VHZXRUYWcuanMnO1xuaW1wb3J0IGdldFByb3RvdHlwZSBmcm9tICcuL19nZXRQcm90b3R5cGUuanMnO1xuaW1wb3J0IGlzT2JqZWN0TGlrZSBmcm9tICcuL2lzT2JqZWN0TGlrZS5qcyc7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZSxcbiAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKiBVc2VkIHRvIGluZmVyIHRoZSBgT2JqZWN0YCBjb25zdHJ1Y3Rvci4gKi9cbnZhciBvYmplY3RDdG9yU3RyaW5nID0gZnVuY1RvU3RyaW5nLmNhbGwoT2JqZWN0KTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgdGhhdCBpcywgYW4gb2JqZWN0IGNyZWF0ZWQgYnkgdGhlXG4gKiBgT2JqZWN0YCBjb25zdHJ1Y3RvciBvciBvbmUgd2l0aCBhIGBbW1Byb3RvdHlwZV1dYCBvZiBgbnVsbGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjguMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogfVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChuZXcgRm9vKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc1BsYWluT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdCh7ICd4JzogMCwgJ3knOiAwIH0pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkgfHwgYmFzZUdldFRhZyh2YWx1ZSkgIT0gb2JqZWN0VGFnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBwcm90byA9IGdldFByb3RvdHlwZSh2YWx1ZSk7XG4gIGlmIChwcm90byA9PT0gbnVsbCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHZhciBDdG9yID0gaGFzT3duUHJvcGVydHkuY2FsbChwcm90bywgJ2NvbnN0cnVjdG9yJykgJiYgcHJvdG8uY29uc3RydWN0b3I7XG4gIHJldHVybiB0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IgaW5zdGFuY2VvZiBDdG9yICYmXG4gICAgZnVuY1RvU3RyaW5nLmNhbGwoQ3RvcikgPT0gb2JqZWN0Q3RvclN0cmluZztcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNQbGFpbk9iamVjdDtcbiIsImltcG9ydCB2ZXJpZnlQbGFpbk9iamVjdCBmcm9tICcuLi91dGlscy92ZXJpZnlQbGFpbk9iamVjdCc7XG5cbmV4cG9ydCBmdW5jdGlvbiB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGdldENvbnN0YW50KSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0Q29uc3RhbnRTZWxlY3RvcihkaXNwYXRjaCwgb3B0aW9ucykge1xuICAgIHZhciBjb25zdGFudCA9IGdldENvbnN0YW50KGRpc3BhdGNoLCBvcHRpb25zKTtcblxuICAgIGZ1bmN0aW9uIGNvbnN0YW50U2VsZWN0b3IoKSB7XG4gICAgICByZXR1cm4gY29uc3RhbnQ7XG4gICAgfVxuICAgIGNvbnN0YW50U2VsZWN0b3IuZGVwZW5kc09uT3duUHJvcHMgPSBmYWxzZTtcbiAgICByZXR1cm4gY29uc3RhbnRTZWxlY3RvcjtcbiAgfTtcbn1cblxuLy8gZGVwZW5kc09uT3duUHJvcHMgaXMgdXNlZCBieSBjcmVhdGVNYXBUb1Byb3BzUHJveHkgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgdG8gcGFzcyBwcm9wcyBhcyBhcmdzXG4vLyB0byB0aGUgbWFwVG9Qcm9wcyBmdW5jdGlvbiBiZWluZyB3cmFwcGVkLiBJdCBpcyBhbHNvIHVzZWQgYnkgbWFrZVB1cmVQcm9wc1NlbGVjdG9yIHRvIGRldGVybWluZVxuLy8gd2hldGhlciBtYXBUb1Byb3BzIG5lZWRzIHRvIGJlIGludm9rZWQgd2hlbiBwcm9wcyBoYXZlIGNoYW5nZWQuXG4vLyBcbi8vIEEgbGVuZ3RoIG9mIG9uZSBzaWduYWxzIHRoYXQgbWFwVG9Qcm9wcyBkb2VzIG5vdCBkZXBlbmQgb24gcHJvcHMgZnJvbSB0aGUgcGFyZW50IGNvbXBvbmVudC5cbi8vIEEgbGVuZ3RoIG9mIHplcm8gaXMgYXNzdW1lZCB0byBtZWFuIG1hcFRvUHJvcHMgaXMgZ2V0dGluZyBhcmdzIHZpYSBhcmd1bWVudHMgb3IgLi4uYXJncyBhbmRcbi8vIHRoZXJlZm9yZSBub3QgcmVwb3J0aW5nIGl0cyBsZW5ndGggYWNjdXJhdGVseS4uXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVwZW5kc09uT3duUHJvcHMobWFwVG9Qcm9wcykge1xuICByZXR1cm4gbWFwVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcyAhPT0gbnVsbCAmJiBtYXBUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzICE9PSB1bmRlZmluZWQgPyBCb29sZWFuKG1hcFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIDogbWFwVG9Qcm9wcy5sZW5ndGggIT09IDE7XG59XG5cbi8vIFVzZWQgYnkgd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24gYW5kIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uLFxuLy8gdGhpcyBmdW5jdGlvbiB3cmFwcyBtYXBUb1Byb3BzIGluIGEgcHJveHkgZnVuY3Rpb24gd2hpY2ggZG9lcyBzZXZlcmFsIHRoaW5nczpcbi8vIFxuLy8gICogRGV0ZWN0cyB3aGV0aGVyIHRoZSBtYXBUb1Byb3BzIGZ1bmN0aW9uIGJlaW5nIGNhbGxlZCBkZXBlbmRzIG9uIHByb3BzLCB3aGljaFxuLy8gICAgaXMgdXNlZCBieSBzZWxlY3RvckZhY3RvcnkgdG8gZGVjaWRlIGlmIGl0IHNob3VsZCByZWludm9rZSBvbiBwcm9wcyBjaGFuZ2VzLlxuLy8gICAgXG4vLyAgKiBPbiBmaXJzdCBjYWxsLCBoYW5kbGVzIG1hcFRvUHJvcHMgaWYgcmV0dXJucyBhbm90aGVyIGZ1bmN0aW9uLCBhbmQgdHJlYXRzIHRoYXRcbi8vICAgIG5ldyBmdW5jdGlvbiBhcyB0aGUgdHJ1ZSBtYXBUb1Byb3BzIGZvciBzdWJzZXF1ZW50IGNhbGxzLlxuLy8gICAgXG4vLyAgKiBPbiBmaXJzdCBjYWxsLCB2ZXJpZmllcyB0aGUgZmlyc3QgcmVzdWx0IGlzIGEgcGxhaW4gb2JqZWN0LCBpbiBvcmRlciB0byB3YXJuXG4vLyAgICB0aGUgZGV2ZWxvcGVyIHRoYXQgdGhlaXIgbWFwVG9Qcm9wcyBmdW5jdGlvbiBpcyBub3QgcmV0dXJuaW5nIGEgdmFsaWQgcmVzdWx0LlxuLy8gICAgXG5leHBvcnQgZnVuY3Rpb24gd3JhcE1hcFRvUHJvcHNGdW5jKG1hcFRvUHJvcHMsIG1ldGhvZE5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGluaXRQcm94eVNlbGVjdG9yKGRpc3BhdGNoLCBfcmVmKSB7XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gX3JlZi5kaXNwbGF5TmFtZTtcblxuICAgIHZhciBwcm94eSA9IGZ1bmN0aW9uIG1hcFRvUHJvcHNQcm94eShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSB7XG4gICAgICByZXR1cm4gcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPyBwcm94eS5tYXBUb1Byb3BzKHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpIDogcHJveHkubWFwVG9Qcm9wcyhzdGF0ZU9yRGlzcGF0Y2gpO1xuICAgIH07XG5cbiAgICAvLyBhbGxvdyBkZXRlY3RGYWN0b3J5QW5kVmVyaWZ5IHRvIGdldCBvd25Qcm9wc1xuICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gdHJ1ZTtcblxuICAgIHByb3h5Lm1hcFRvUHJvcHMgPSBmdW5jdGlvbiBkZXRlY3RGYWN0b3J5QW5kVmVyaWZ5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpIHtcbiAgICAgIHByb3h5Lm1hcFRvUHJvcHMgPSBtYXBUb1Byb3BzO1xuICAgICAgcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPSBnZXREZXBlbmRzT25Pd25Qcm9wcyhtYXBUb1Byb3BzKTtcbiAgICAgIHZhciBwcm9wcyA9IHByb3h5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpO1xuXG4gICAgICBpZiAodHlwZW9mIHByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHByb3h5Lm1hcFRvUHJvcHMgPSBwcm9wcztcbiAgICAgICAgcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPSBnZXREZXBlbmRzT25Pd25Qcm9wcyhwcm9wcyk7XG4gICAgICAgIHByb3BzID0gcHJveHkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB2ZXJpZnlQbGFpbk9iamVjdChwcm9wcywgZGlzcGxheU5hbWUsIG1ldGhvZE5hbWUpO1xuXG4gICAgICByZXR1cm4gcHJvcHM7XG4gICAgfTtcblxuICAgIHJldHVybiBwcm94eTtcbiAgfTtcbn0iLCJpbXBvcnQgeyBiaW5kQWN0aW9uQ3JlYXRvcnMgfSBmcm9tICdyZWR1eCc7XG5pbXBvcnQgeyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50LCB3cmFwTWFwVG9Qcm9wc0Z1bmMgfSBmcm9tICcuL3dyYXBNYXBUb1Byb3BzJztcblxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uKG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gdHlwZW9mIG1hcERpc3BhdGNoVG9Qcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/IHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBEaXNwYXRjaFRvUHJvcHMsICdtYXBEaXNwYXRjaFRvUHJvcHMnKSA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc01pc3NpbmcobWFwRGlzcGF0Y2hUb1Byb3BzKSB7XG4gIHJldHVybiAhbWFwRGlzcGF0Y2hUb1Byb3BzID8gd3JhcE1hcFRvUHJvcHNDb25zdGFudChmdW5jdGlvbiAoZGlzcGF0Y2gpIHtcbiAgICByZXR1cm4geyBkaXNwYXRjaDogZGlzcGF0Y2ggfTtcbiAgfSkgOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNPYmplY3QobWFwRGlzcGF0Y2hUb1Byb3BzKSB7XG4gIHJldHVybiBtYXBEaXNwYXRjaFRvUHJvcHMgJiYgdHlwZW9mIG1hcERpc3BhdGNoVG9Qcm9wcyA9PT0gJ29iamVjdCcgPyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGZ1bmN0aW9uIChkaXNwYXRjaCkge1xuICAgIHJldHVybiBiaW5kQWN0aW9uQ3JlYXRvcnMobWFwRGlzcGF0Y2hUb1Byb3BzLCBkaXNwYXRjaCk7XG4gIH0pIDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBbd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzRnVuY3Rpb24sIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc01pc3NpbmcsIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc09iamVjdF07IiwiaW1wb3J0IHsgd3JhcE1hcFRvUHJvcHNDb25zdGFudCwgd3JhcE1hcFRvUHJvcHNGdW5jIH0gZnJvbSAnLi93cmFwTWFwVG9Qcm9wcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwU3RhdGVUb1Byb3BzSXNGdW5jdGlvbihtYXBTdGF0ZVRvUHJvcHMpIHtcbiAgcmV0dXJuIHR5cGVvZiBtYXBTdGF0ZVRvUHJvcHMgPT09ICdmdW5jdGlvbicgPyB3cmFwTWFwVG9Qcm9wc0Z1bmMobWFwU3RhdGVUb1Byb3BzLCAnbWFwU3RhdGVUb1Byb3BzJykgOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwU3RhdGVUb1Byb3BzSXNNaXNzaW5nKG1hcFN0YXRlVG9Qcm9wcykge1xuICByZXR1cm4gIW1hcFN0YXRlVG9Qcm9wcyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7fTtcbiAgfSkgOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFt3aGVuTWFwU3RhdGVUb1Byb3BzSXNGdW5jdGlvbiwgd2hlbk1hcFN0YXRlVG9Qcm9wc0lzTWlzc2luZ107IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuaW1wb3J0IHZlcmlmeVBsYWluT2JqZWN0IGZyb20gJy4uL3V0aWxzL3ZlcmlmeVBsYWluT2JqZWN0JztcblxuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRNZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKSB7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgb3duUHJvcHMsIHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd3JhcE1lcmdlUHJvcHNGdW5jKG1lcmdlUHJvcHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGluaXRNZXJnZVByb3BzUHJveHkoZGlzcGF0Y2gsIF9yZWYpIHtcbiAgICB2YXIgZGlzcGxheU5hbWUgPSBfcmVmLmRpc3BsYXlOYW1lLFxuICAgICAgICBwdXJlID0gX3JlZi5wdXJlLFxuICAgICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsID0gX3JlZi5hcmVNZXJnZWRQcm9wc0VxdWFsO1xuXG4gICAgdmFyIGhhc1J1bk9uY2UgPSBmYWxzZTtcbiAgICB2YXIgbWVyZ2VkUHJvcHMgPSB2b2lkIDA7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VQcm9wc1Byb3h5KHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKSB7XG4gICAgICB2YXIgbmV4dE1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG5cbiAgICAgIGlmIChoYXNSdW5PbmNlKSB7XG4gICAgICAgIGlmICghcHVyZSB8fCAhYXJlTWVyZ2VkUHJvcHNFcXVhbChuZXh0TWVyZ2VkUHJvcHMsIG1lcmdlZFByb3BzKSkgbWVyZ2VkUHJvcHMgPSBuZXh0TWVyZ2VkUHJvcHM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBoYXNSdW5PbmNlID0gdHJ1ZTtcbiAgICAgICAgbWVyZ2VkUHJvcHMgPSBuZXh0TWVyZ2VkUHJvcHM7XG5cbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHZlcmlmeVBsYWluT2JqZWN0KG1lcmdlZFByb3BzLCBkaXNwbGF5TmFtZSwgJ21lcmdlUHJvcHMnKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICAgIH07XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWVyZ2VQcm9wc0lzRnVuY3Rpb24obWVyZ2VQcm9wcykge1xuICByZXR1cm4gdHlwZW9mIG1lcmdlUHJvcHMgPT09ICdmdW5jdGlvbicgPyB3cmFwTWVyZ2VQcm9wc0Z1bmMobWVyZ2VQcm9wcykgOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWVyZ2VQcm9wc0lzT21pdHRlZChtZXJnZVByb3BzKSB7XG4gIHJldHVybiAhbWVyZ2VQcm9wcyA/IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZGVmYXVsdE1lcmdlUHJvcHM7XG4gIH0gOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFt3aGVuTWVyZ2VQcm9wc0lzRnVuY3Rpb24sIHdoZW5NZXJnZVByb3BzSXNPbWl0dGVkXTsiLCJmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmltcG9ydCB2ZXJpZnlTdWJzZWxlY3RvcnMgZnJvbSAnLi92ZXJpZnlTdWJzZWxlY3RvcnMnO1xuXG5leHBvcnQgZnVuY3Rpb24gaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeShtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgZGlzcGF0Y2gpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGltcHVyZUZpbmFsUHJvcHNTZWxlY3RvcihzdGF0ZSwgb3duUHJvcHMpIHtcbiAgICByZXR1cm4gbWVyZ2VQcm9wcyhtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKSwgbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyksIG93blByb3BzKTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBkaXNwYXRjaCwgX3JlZikge1xuICB2YXIgYXJlU3RhdGVzRXF1YWwgPSBfcmVmLmFyZVN0YXRlc0VxdWFsLFxuICAgICAgYXJlT3duUHJvcHNFcXVhbCA9IF9yZWYuYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbCA9IF9yZWYuYXJlU3RhdGVQcm9wc0VxdWFsO1xuXG4gIHZhciBoYXNSdW5BdExlYXN0T25jZSA9IGZhbHNlO1xuICB2YXIgc3RhdGUgPSB2b2lkIDA7XG4gIHZhciBvd25Qcm9wcyA9IHZvaWQgMDtcbiAgdmFyIHN0YXRlUHJvcHMgPSB2b2lkIDA7XG4gIHZhciBkaXNwYXRjaFByb3BzID0gdm9pZCAwO1xuICB2YXIgbWVyZ2VkUHJvcHMgPSB2b2lkIDA7XG5cbiAgZnVuY3Rpb24gaGFuZGxlRmlyc3RDYWxsKGZpcnN0U3RhdGUsIGZpcnN0T3duUHJvcHMpIHtcbiAgICBzdGF0ZSA9IGZpcnN0U3RhdGU7XG4gICAgb3duUHJvcHMgPSBmaXJzdE93blByb3BzO1xuICAgIHN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICBkaXNwYXRjaFByb3BzID0gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICBoYXNSdW5BdExlYXN0T25jZSA9IHRydWU7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlTmV3UHJvcHNBbmROZXdTdGF0ZSgpIHtcbiAgICBzdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG5cbiAgICBpZiAobWFwRGlzcGF0Y2hUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSBkaXNwYXRjaFByb3BzID0gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyk7XG5cbiAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1Byb3BzKCkge1xuICAgIGlmIChtYXBTdGF0ZVRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIHN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcblxuICAgIGlmIChtYXBEaXNwYXRjaFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIGRpc3BhdGNoUHJvcHMgPSBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKTtcblxuICAgIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlTmV3U3RhdGUoKSB7XG4gICAgdmFyIG5leHRTdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG4gICAgdmFyIHN0YXRlUHJvcHNDaGFuZ2VkID0gIWFyZVN0YXRlUHJvcHNFcXVhbChuZXh0U3RhdGVQcm9wcywgc3RhdGVQcm9wcyk7XG4gICAgc3RhdGVQcm9wcyA9IG5leHRTdGF0ZVByb3BzO1xuXG4gICAgaWYgKHN0YXRlUHJvcHNDaGFuZ2VkKSBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuXG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlU3Vic2VxdWVudENhbGxzKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSB7XG4gICAgdmFyIHByb3BzQ2hhbmdlZCA9ICFhcmVPd25Qcm9wc0VxdWFsKG5leHRPd25Qcm9wcywgb3duUHJvcHMpO1xuICAgIHZhciBzdGF0ZUNoYW5nZWQgPSAhYXJlU3RhdGVzRXF1YWwobmV4dFN0YXRlLCBzdGF0ZSk7XG4gICAgc3RhdGUgPSBuZXh0U3RhdGU7XG4gICAgb3duUHJvcHMgPSBuZXh0T3duUHJvcHM7XG5cbiAgICBpZiAocHJvcHNDaGFuZ2VkICYmIHN0YXRlQ2hhbmdlZCkgcmV0dXJuIGhhbmRsZU5ld1Byb3BzQW5kTmV3U3RhdGUoKTtcbiAgICBpZiAocHJvcHNDaGFuZ2VkKSByZXR1cm4gaGFuZGxlTmV3UHJvcHMoKTtcbiAgICBpZiAoc3RhdGVDaGFuZ2VkKSByZXR1cm4gaGFuZGxlTmV3U3RhdGUoKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gcHVyZUZpbmFsUHJvcHNTZWxlY3RvcihuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykge1xuICAgIHJldHVybiBoYXNSdW5BdExlYXN0T25jZSA/IGhhbmRsZVN1YnNlcXVlbnRDYWxscyhuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykgOiBoYW5kbGVGaXJzdENhbGwobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpO1xuICB9O1xufVxuXG4vLyBUT0RPOiBBZGQgbW9yZSBjb21tZW50c1xuXG4vLyBJZiBwdXJlIGlzIHRydWUsIHRoZSBzZWxlY3RvciByZXR1cm5lZCBieSBzZWxlY3RvckZhY3Rvcnkgd2lsbCBtZW1vaXplIGl0cyByZXN1bHRzLFxuLy8gYWxsb3dpbmcgY29ubmVjdEFkdmFuY2VkJ3Mgc2hvdWxkQ29tcG9uZW50VXBkYXRlIHRvIHJldHVybiBmYWxzZSBpZiBmaW5hbFxuLy8gcHJvcHMgaGF2ZSBub3QgY2hhbmdlZC4gSWYgZmFsc2UsIHRoZSBzZWxlY3RvciB3aWxsIGFsd2F5cyByZXR1cm4gYSBuZXdcbi8vIG9iamVjdCBhbmQgc2hvdWxkQ29tcG9uZW50VXBkYXRlIHdpbGwgYWx3YXlzIHJldHVybiB0cnVlLlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KGRpc3BhdGNoLCBfcmVmMikge1xuICB2YXIgaW5pdE1hcFN0YXRlVG9Qcm9wcyA9IF9yZWYyLmluaXRNYXBTdGF0ZVRvUHJvcHMsXG4gICAgICBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzID0gX3JlZjIuaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyxcbiAgICAgIGluaXRNZXJnZVByb3BzID0gX3JlZjIuaW5pdE1lcmdlUHJvcHMsXG4gICAgICBvcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYyLCBbJ2luaXRNYXBTdGF0ZVRvUHJvcHMnLCAnaW5pdE1hcERpc3BhdGNoVG9Qcm9wcycsICdpbml0TWVyZ2VQcm9wcyddKTtcblxuICB2YXIgbWFwU3RhdGVUb1Byb3BzID0gaW5pdE1hcFN0YXRlVG9Qcm9wcyhkaXNwYXRjaCwgb3B0aW9ucyk7XG4gIHZhciBtYXBEaXNwYXRjaFRvUHJvcHMgPSBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvcHRpb25zKTtcbiAgdmFyIG1lcmdlUHJvcHMgPSBpbml0TWVyZ2VQcm9wcyhkaXNwYXRjaCwgb3B0aW9ucyk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB2ZXJpZnlTdWJzZWxlY3RvcnMobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIG9wdGlvbnMuZGlzcGxheU5hbWUpO1xuICB9XG5cbiAgdmFyIHNlbGVjdG9yRmFjdG9yeSA9IG9wdGlvbnMucHVyZSA/IHB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IDogaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeTtcblxuICByZXR1cm4gc2VsZWN0b3JGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBkaXNwYXRjaCwgb3B0aW9ucyk7XG59IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5pbXBvcnQgY29ubmVjdEFkdmFuY2VkIGZyb20gJy4uL2NvbXBvbmVudHMvY29ubmVjdEFkdmFuY2VkJztcbmltcG9ydCBzaGFsbG93RXF1YWwgZnJvbSAnLi4vdXRpbHMvc2hhbGxvd0VxdWFsJztcbmltcG9ydCBkZWZhdWx0TWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzIGZyb20gJy4vbWFwRGlzcGF0Y2hUb1Byb3BzJztcbmltcG9ydCBkZWZhdWx0TWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzIGZyb20gJy4vbWFwU3RhdGVUb1Byb3BzJztcbmltcG9ydCBkZWZhdWx0TWVyZ2VQcm9wc0ZhY3RvcmllcyBmcm9tICcuL21lcmdlUHJvcHMnO1xuaW1wb3J0IGRlZmF1bHRTZWxlY3RvckZhY3RvcnkgZnJvbSAnLi9zZWxlY3RvckZhY3RvcnknO1xuXG4vKlxuICBjb25uZWN0IGlzIGEgZmFjYWRlIG92ZXIgY29ubmVjdEFkdmFuY2VkLiBJdCB0dXJucyBpdHMgYXJncyBpbnRvIGEgY29tcGF0aWJsZVxuICBzZWxlY3RvckZhY3RvcnksIHdoaWNoIGhhcyB0aGUgc2lnbmF0dXJlOlxuXG4gICAgKGRpc3BhdGNoLCBvcHRpb25zKSA9PiAobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpID0+IG5leHRGaW5hbFByb3BzXG4gIFxuICBjb25uZWN0IHBhc3NlcyBpdHMgYXJncyB0byBjb25uZWN0QWR2YW5jZWQgYXMgb3B0aW9ucywgd2hpY2ggd2lsbCBpbiB0dXJuIHBhc3MgdGhlbSB0b1xuICBzZWxlY3RvckZhY3RvcnkgZWFjaCB0aW1lIGEgQ29ubmVjdCBjb21wb25lbnQgaW5zdGFuY2UgaXMgaW5zdGFudGlhdGVkIG9yIGhvdCByZWxvYWRlZC5cblxuICBzZWxlY3RvckZhY3RvcnkgcmV0dXJucyBhIGZpbmFsIHByb3BzIHNlbGVjdG9yIGZyb20gaXRzIG1hcFN0YXRlVG9Qcm9wcyxcbiAgbWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcywgbWVyZ2VQcm9wcyxcbiAgbWVyZ2VQcm9wc0ZhY3RvcmllcywgYW5kIHB1cmUgYXJncy5cblxuICBUaGUgcmVzdWx0aW5nIGZpbmFsIHByb3BzIHNlbGVjdG9yIGlzIGNhbGxlZCBieSB0aGUgQ29ubmVjdCBjb21wb25lbnQgaW5zdGFuY2Ugd2hlbmV2ZXJcbiAgaXQgcmVjZWl2ZXMgbmV3IHByb3BzIG9yIHN0b3JlIHN0YXRlLlxuICovXG5cbmZ1bmN0aW9uIG1hdGNoKGFyZywgZmFjdG9yaWVzLCBuYW1lKSB7XG4gIGZvciAodmFyIGkgPSBmYWN0b3JpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgcmVzdWx0ID0gZmFjdG9yaWVzW2ldKGFyZyk7XG4gICAgaWYgKHJlc3VsdCkgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoZGlzcGF0Y2gsIG9wdGlvbnMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdmFsdWUgb2YgdHlwZSAnICsgdHlwZW9mIGFyZyArICcgZm9yICcgKyBuYW1lICsgJyBhcmd1bWVudCB3aGVuIGNvbm5lY3RpbmcgY29tcG9uZW50ICcgKyBvcHRpb25zLndyYXBwZWRDb21wb25lbnROYW1lICsgJy4nKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3RyaWN0RXF1YWwoYSwgYikge1xuICByZXR1cm4gYSA9PT0gYjtcbn1cblxuLy8gY3JlYXRlQ29ubmVjdCB3aXRoIGRlZmF1bHQgYXJncyBidWlsZHMgdGhlICdvZmZpY2lhbCcgY29ubmVjdCBiZWhhdmlvci4gQ2FsbGluZyBpdCB3aXRoXG4vLyBkaWZmZXJlbnQgb3B0aW9ucyBvcGVucyB1cCBzb21lIHRlc3RpbmcgYW5kIGV4dGVuc2liaWxpdHkgc2NlbmFyaW9zXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29ubmVjdCgpIHtcbiAgdmFyIF9yZWYgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9LFxuICAgICAgX3JlZiRjb25uZWN0SE9DID0gX3JlZi5jb25uZWN0SE9DLFxuICAgICAgY29ubmVjdEhPQyA9IF9yZWYkY29ubmVjdEhPQyA9PT0gdW5kZWZpbmVkID8gY29ubmVjdEFkdmFuY2VkIDogX3JlZiRjb25uZWN0SE9DLFxuICAgICAgX3JlZiRtYXBTdGF0ZVRvUHJvcHNGID0gX3JlZi5tYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMsXG4gICAgICBtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMgPSBfcmVmJG1hcFN0YXRlVG9Qcm9wc0YgPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRNYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMgOiBfcmVmJG1hcFN0YXRlVG9Qcm9wc0YsXG4gICAgICBfcmVmJG1hcERpc3BhdGNoVG9Qcm8gPSBfcmVmLm1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyxcbiAgICAgIG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyA9IF9yZWYkbWFwRGlzcGF0Y2hUb1BybyA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdE1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyA6IF9yZWYkbWFwRGlzcGF0Y2hUb1BybyxcbiAgICAgIF9yZWYkbWVyZ2VQcm9wc0ZhY3RvciA9IF9yZWYubWVyZ2VQcm9wc0ZhY3RvcmllcyxcbiAgICAgIG1lcmdlUHJvcHNGYWN0b3JpZXMgPSBfcmVmJG1lcmdlUHJvcHNGYWN0b3IgPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRNZXJnZVByb3BzRmFjdG9yaWVzIDogX3JlZiRtZXJnZVByb3BzRmFjdG9yLFxuICAgICAgX3JlZiRzZWxlY3RvckZhY3RvcnkgPSBfcmVmLnNlbGVjdG9yRmFjdG9yeSxcbiAgICAgIHNlbGVjdG9yRmFjdG9yeSA9IF9yZWYkc2VsZWN0b3JGYWN0b3J5ID09PSB1bmRlZmluZWQgPyBkZWZhdWx0U2VsZWN0b3JGYWN0b3J5IDogX3JlZiRzZWxlY3RvckZhY3Rvcnk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMpIHtcbiAgICB2YXIgX3JlZjIgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IHt9LFxuICAgICAgICBfcmVmMiRwdXJlID0gX3JlZjIucHVyZSxcbiAgICAgICAgcHVyZSA9IF9yZWYyJHB1cmUgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBfcmVmMiRwdXJlLFxuICAgICAgICBfcmVmMiRhcmVTdGF0ZXNFcXVhbCA9IF9yZWYyLmFyZVN0YXRlc0VxdWFsLFxuICAgICAgICBhcmVTdGF0ZXNFcXVhbCA9IF9yZWYyJGFyZVN0YXRlc0VxdWFsID09PSB1bmRlZmluZWQgPyBzdHJpY3RFcXVhbCA6IF9yZWYyJGFyZVN0YXRlc0VxdWFsLFxuICAgICAgICBfcmVmMiRhcmVPd25Qcm9wc0VxdWEgPSBfcmVmMi5hcmVPd25Qcm9wc0VxdWFsLFxuICAgICAgICBhcmVPd25Qcm9wc0VxdWFsID0gX3JlZjIkYXJlT3duUHJvcHNFcXVhID09PSB1bmRlZmluZWQgPyBzaGFsbG93RXF1YWwgOiBfcmVmMiRhcmVPd25Qcm9wc0VxdWEsXG4gICAgICAgIF9yZWYyJGFyZVN0YXRlUHJvcHNFcSA9IF9yZWYyLmFyZVN0YXRlUHJvcHNFcXVhbCxcbiAgICAgICAgYXJlU3RhdGVQcm9wc0VxdWFsID0gX3JlZjIkYXJlU3RhdGVQcm9wc0VxID09PSB1bmRlZmluZWQgPyBzaGFsbG93RXF1YWwgOiBfcmVmMiRhcmVTdGF0ZVByb3BzRXEsXG4gICAgICAgIF9yZWYyJGFyZU1lcmdlZFByb3BzRSA9IF9yZWYyLmFyZU1lcmdlZFByb3BzRXF1YWwsXG4gICAgICAgIGFyZU1lcmdlZFByb3BzRXF1YWwgPSBfcmVmMiRhcmVNZXJnZWRQcm9wc0UgPT09IHVuZGVmaW5lZCA/IHNoYWxsb3dFcXVhbCA6IF9yZWYyJGFyZU1lcmdlZFByb3BzRSxcbiAgICAgICAgZXh0cmFPcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYyLCBbJ3B1cmUnLCAnYXJlU3RhdGVzRXF1YWwnLCAnYXJlT3duUHJvcHNFcXVhbCcsICdhcmVTdGF0ZVByb3BzRXF1YWwnLCAnYXJlTWVyZ2VkUHJvcHNFcXVhbCddKTtcblxuICAgIHZhciBpbml0TWFwU3RhdGVUb1Byb3BzID0gbWF0Y2gobWFwU3RhdGVUb1Byb3BzLCBtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMsICdtYXBTdGF0ZVRvUHJvcHMnKTtcbiAgICB2YXIgaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyA9IG1hdGNoKG1hcERpc3BhdGNoVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzLCAnbWFwRGlzcGF0Y2hUb1Byb3BzJyk7XG4gICAgdmFyIGluaXRNZXJnZVByb3BzID0gbWF0Y2gobWVyZ2VQcm9wcywgbWVyZ2VQcm9wc0ZhY3RvcmllcywgJ21lcmdlUHJvcHMnKTtcblxuICAgIHJldHVybiBjb25uZWN0SE9DKHNlbGVjdG9yRmFjdG9yeSwgX2V4dGVuZHMoe1xuICAgICAgLy8gdXNlZCBpbiBlcnJvciBtZXNzYWdlc1xuICAgICAgbWV0aG9kTmFtZTogJ2Nvbm5lY3QnLFxuXG4gICAgICAvLyB1c2VkIHRvIGNvbXB1dGUgQ29ubmVjdCdzIGRpc3BsYXlOYW1lIGZyb20gdGhlIHdyYXBwZWQgY29tcG9uZW50J3MgZGlzcGxheU5hbWUuXG4gICAgICBnZXREaXNwbGF5TmFtZTogZnVuY3Rpb24gZ2V0RGlzcGxheU5hbWUobmFtZSkge1xuICAgICAgICByZXR1cm4gJ0Nvbm5lY3QoJyArIG5hbWUgKyAnKSc7XG4gICAgICB9LFxuXG4gICAgICAvLyBpZiBtYXBTdGF0ZVRvUHJvcHMgaXMgZmFsc3ksIHRoZSBDb25uZWN0IGNvbXBvbmVudCBkb2Vzbid0IHN1YnNjcmliZSB0byBzdG9yZSBzdGF0ZSBjaGFuZ2VzXG4gICAgICBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXM6IEJvb2xlYW4obWFwU3RhdGVUb1Byb3BzKSxcblxuICAgICAgLy8gcGFzc2VkIHRocm91Z2ggdG8gc2VsZWN0b3JGYWN0b3J5XG4gICAgICBpbml0TWFwU3RhdGVUb1Byb3BzOiBpbml0TWFwU3RhdGVUb1Byb3BzLFxuICAgICAgaW5pdE1hcERpc3BhdGNoVG9Qcm9wczogaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyxcbiAgICAgIGluaXRNZXJnZVByb3BzOiBpbml0TWVyZ2VQcm9wcyxcbiAgICAgIHB1cmU6IHB1cmUsXG4gICAgICBhcmVTdGF0ZXNFcXVhbDogYXJlU3RhdGVzRXF1YWwsXG4gICAgICBhcmVPd25Qcm9wc0VxdWFsOiBhcmVPd25Qcm9wc0VxdWFsLFxuICAgICAgYXJlU3RhdGVQcm9wc0VxdWFsOiBhcmVTdGF0ZVByb3BzRXF1YWwsXG4gICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsOiBhcmVNZXJnZWRQcm9wc0VxdWFsXG5cbiAgICB9LCBleHRyYU9wdGlvbnMpKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQ29ubmVjdCgpOyIsIi8vXHJcbi8vIOODh+ODleOCoeOCpOODs+Wumue+qVxyXG4vL1xyXG5cclxuZXhwb3J0IGNvbnN0IERlZmluZSA9IHtcclxuICAgIC8vIOODmeODvOOCuVNWR+OCpOODoeODvOOCuOOCteOCpOOCulxyXG4gICAgc3ZnaW1hZ2VzaXplOiB7XHJcbiAgICAgICAgd2lkdGg6ICA4NDIsXHJcbiAgICAgICAgaGVpZ2h0OiAxMTkyLFxyXG4gICAgfSxcclxuXHJcbiAgICAvLyDjgrDjg6rjg4Pjg4njgrXjgqTjgrpcclxuICAgIGdyaWQ6IHtcclxuICAgICAgICB3aWR0aDogMTAsXHJcbiAgICAgICAgaGVpZ2h0OiAxMCxcclxuICAgIH0sXHJcblxyXG4gICAgLy8g44OP44Oz44OJ44Or44K144Kk44K6XHJcbiAgICBoYW5kbGU6IHtcclxuICAgICAgICB3aWR0aDogMTAsXHJcbiAgICAgICAgaGVpZ2h0OiAxMCxcclxuICAgIH0sXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgRm9udCA9IHtcclxuICAgIGZvbnRmYWNlOiBgXHJcbiAgICAgICAgQGZvbnQtZmFjZSB7XHJcbiAgICAgICAgICAgIGZvbnQtZmFtaWx5OiBcIm1haVNNSFdlYlwiO1xyXG4gICAgICAgICAgICBzcmM6IHVybChmb250L21haVNNSFdlYi5lb3QpIGZvcm1hdChcImVvdFwiKSwgdXJsKGZvbnQvbWFpU01IV2ViLndvZmYpIGZvcm1hdChcIndvZmZcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIEBmb250LWZhY2Uge1xyXG4gICAgICAgICAgICBmb250LWZhbWlseTogXCJtYWlTTUJXZWJcIjtcclxuICAgICAgICAgICAgc3JjOiB1cmwoZm9udC9tYWlTTUJXZWIuZW90KSBmb3JtYXQoXCJlb3RcIiksIHVybChmb250L21haVNNQldlYi53b2ZmKSBmb3JtYXQoXCJ3b2ZmXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBAZm9udC1mYWNlIHtcclxuICAgICAgICAgICAgZm9udC1mYW1pbHk6IFwibWFpU0dIV2ViXCI7XHJcbiAgICAgICAgICAgIHNyYzogdXJsKGZvbnQvbWFpU0dIV2ViLmVvdCkgZm9ybWF0KFwiZW90XCIpLCB1cmwoZm9udC9tYWlTR0hXZWIud29mZikgZm9ybWF0KFwid29mZlwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgQGZvbnQtZmFjZSB7XHJcbiAgICAgICAgICAgIGZvbnQtZmFtaWx5OiBcIm1haVNHQldlYlwiO1xyXG4gICAgICAgICAgICBzcmM6IHVybChmb250L21haVNHQldlYi5lb3QpIGZvcm1hdChcImVvdFwiKSwgdXJsKGZvbnQvbWFpU0dCV2ViLndvZmYpIGZvcm1hdChcIndvZmZcIik7XHJcbiAgICAgICAgfVxyXG4gICAgYCxcclxuICAgIGZvbnQ6IFtcclxuICAgICAgICAnbWFpU01IV2ViJyxcclxuICAgICAgICAnbWFpU01CV2ViJyxcclxuICAgICAgICAnbWFpU0dIV2ViJyxcclxuICAgICAgICAnbWFpU0dCV2ViJ1xyXG4gICAgXSxcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFByZXNlbkJveCA9IHtcclxuICAgIEE6IFtcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGJveF9pZDogMSxcclxuICAgICAgICAgICAgZ3JvdXBfaWQ6ICfjg4bjgq3jgrnjg4jjg4bjgrnjg4gnLFxyXG4gICAgICAgICAgICBncm91cF9ubzogMSxcclxuICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxyXG4gICAgICAgICAgICB4MTogNDAwLFxyXG4gICAgICAgICAgICB5MTogMTAwLFxyXG4gICAgICAgICAgICB4MjogNzAwLFxyXG4gICAgICAgICAgICB5MjogMzAwLFxyXG4gICAgXHJcbiAgICAgICAgICAgIHRleHQ6IHtcclxuICAgICAgICAgICAgICAgIGt1bWlob2tvOiAndGF0ZScsXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX2pzOiAxMCxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfamU6IDEwLFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19nczogMTAsXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX2dlOiAxMCxcclxuICAgICAgICAgICAgICAgIHNpemVfajogMjAsXHJcbiAgICAgICAgICAgICAgICBzaXplX2c6IDIwLFxyXG4gICAgICAgICAgICAgICAgZ3lva2FuOiA1LFxyXG4gICAgICAgICAgICAgICAgZm9udDogMSxcclxuXHJcbiAgICAgICAgICAgICAgICBncmlkOiBbXSxcclxuICAgICAgICAgICAgICAgIHJlc3VsdDogW10sXHJcbiAgICAgICAgICAgICAgICBhZnVyZTogMCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgYm94X2lkOiAyLFxyXG4gICAgICAgICAgICBncm91cF9pZDogJ+ODhuOCreOCueODiOODhuOCueODiCcsXHJcbiAgICAgICAgICAgIGdyb3VwX25vOiAyLFxyXG4gICAgICAgICAgICB0eXBlOiAndGV4dCcsXHJcbiAgICAgICAgICAgIHgxOiA0MDAsXHJcbiAgICAgICAgICAgIHkxOiAzNTAsXHJcbiAgICAgICAgICAgIHgyOiA3MDAsXHJcbiAgICAgICAgICAgIHkyOiA1NTAsXHJcbiAgICBcclxuICAgICAgICAgICAgdGV4dDoge1xyXG4gICAgICAgICAgICAgICAga3VtaWhva286ICd0YXRlJyxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfanM6IDEwLFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19qZTogMTAsXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX2dzOiAxMCxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfZ2U6IDEwLFxyXG4gICAgICAgICAgICAgICAgc2l6ZV9qOiAyMCxcclxuICAgICAgICAgICAgICAgIHNpemVfZzogMjAsXHJcbiAgICAgICAgICAgICAgICBneW9rYW46IDUsXHJcbiAgICAgICAgICAgICAgICBmb250OiAxLFxyXG5cclxuICAgICAgICAgICAgICAgIGdyaWQ6IFtdLFxyXG4gICAgICAgICAgICAgICAgcmVzdWx0OiBbXSxcclxuICAgICAgICAgICAgICAgIGFmdXJlOiAwLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBib3hfaWQ6IDMsXHJcbiAgICAgICAgICAgIGdyb3VwX2lkOiAn44OG44Kt44K544OI44OG44K544OIJyxcclxuICAgICAgICAgICAgZ3JvdXBfbm86IDMsXHJcbiAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcclxuICAgICAgICAgICAgeDE6IDQwMCxcclxuICAgICAgICAgICAgeTE6IDYwMCxcclxuICAgICAgICAgICAgeDI6IDcwMCxcclxuICAgICAgICAgICAgeTI6IDgwMCxcclxuICAgIFxyXG4gICAgICAgICAgICB0ZXh0OiB7XHJcbiAgICAgICAgICAgICAgICBrdW1paG9rbzogJ3RhdGUnLFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19qczogMTAsXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX2plOiAxMCxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfZ3M6IDEwLFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19nZTogMTAsXHJcbiAgICAgICAgICAgICAgICBzaXplX2o6IDIwLFxyXG4gICAgICAgICAgICAgICAgc2l6ZV9nOiAyMCxcclxuICAgICAgICAgICAgICAgIGd5b2thbjogNSxcclxuICAgICAgICAgICAgICAgIGZvbnQ6IDEsXHJcblxyXG4gICAgICAgICAgICAgICAgZ3JpZDogW10sXHJcbiAgICAgICAgICAgICAgICByZXN1bHQ6IFtdLFxyXG4gICAgICAgICAgICAgICAgYWZ1cmU6IDAsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuICAgIFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgYm94X2lkOiA0LFxyXG4gICAgICAgICAgICBncm91cF9pZDogJ+eUu+WDj+ODhuOCueODiCcsXHJcbiAgICAgICAgICAgIGdyb3VwX25vOiAxLFxyXG4gICAgICAgICAgICB0eXBlOiAnaW1hZ2UnLFxyXG4gICAgICAgICAgICB4MTogMTAwLFxyXG4gICAgICAgICAgICB5MTogMTAwLFxyXG4gICAgICAgICAgICB4MjogMzUwLFxyXG4gICAgICAgICAgICB5MjogMzAwLFxyXG5cclxuICAgICAgICAgICAgaW1hZ2U6IHtcclxuICAgICAgICAgICAgICAgIHVybDogJycsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuICAgIF0sXHJcblxyXG4gICAgQjogW1xyXG4gICAgICAgIHsgLy8g44Ki44Oe44K+44Oz44K444Oj44OR44OzXHJcbiAgICAgICAgICAgIGJveF9pZDogMSxcclxuICAgICAgICAgICAgZ3JvdXBfaWQ6ICdLMDHjgr/jgqTjg4jjg6snLFxyXG4gICAgICAgICAgICBncm91cF9ubzogMSxcclxuICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxyXG4gICAgICAgICAgICB4MTogNzAsXHJcbiAgICAgICAgICAgIHkxOiA3MCxcclxuICAgICAgICAgICAgeDI6IDE1MCxcclxuICAgICAgICAgICAgeTI6IDEwMCxcclxuICAgIFxyXG4gICAgICAgICAgICB0ZXh0OiB7XHJcbiAgICAgICAgICAgICAgICBrdW1paG9rbzogJ3lva28nLFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19qczogNCxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfamU6IDQsXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX2dzOiAxMCxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfZ2U6IDEwLFxyXG4gICAgICAgICAgICAgICAgc2l6ZV9qOiA5LFxyXG4gICAgICAgICAgICAgICAgc2l6ZV9nOiA5LFxyXG4gICAgICAgICAgICAgICAgZ3lva2FuOiA1LFxyXG4gICAgICAgICAgICAgICAgZm9udDogNCxcclxuXHJcbiAgICAgICAgICAgICAgICBncmlkOiBbXSxcclxuICAgICAgICAgICAgICAgIHJlc3VsdDogW10sXHJcbiAgICAgICAgICAgICAgICBhZnVyZTogMCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHsgLy8gMTAwMOS6uuOBruaWsOimj+aOoeeUqCBcclxuICAgICAgICAgICAgYm94X2lkOiAyLFxyXG4gICAgICAgICAgICBncm91cF9pZDogJ0swMeOCv+OCpOODiOODqycsXHJcbiAgICAgICAgICAgIGdyb3VwX25vOiAyLFxyXG4gICAgICAgICAgICB0eXBlOiAndGV4dCcsXHJcbiAgICAgICAgICAgIHgxOiA3MCxcclxuICAgICAgICAgICAgeTE6IDEwMCxcclxuICAgICAgICAgICAgeDI6IDEyMCxcclxuICAgICAgICAgICAgeTI6IDM3MCxcclxuICAgIFxyXG4gICAgICAgICAgICB0ZXh0OiB7XHJcbiAgICAgICAgICAgICAgICBrdW1paG9rbzogJ3RhdGUnLFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19qczogMCxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfamU6IDE1LFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19nczogMTAsXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX2dlOiAxMCxcclxuICAgICAgICAgICAgICAgIHNpemVfajogMjUsXHJcbiAgICAgICAgICAgICAgICBzaXplX2c6IDI4LFxyXG4gICAgICAgICAgICAgICAgZ3lva2FuOiA1LFxyXG4gICAgICAgICAgICAgICAgZm9udDogMixcclxuXHJcbiAgICAgICAgICAgICAgICBncmlkOiBbXSxcclxuICAgICAgICAgICAgICAgIHJlc3VsdDogW10sXHJcbiAgICAgICAgICAgICAgICBhZnVyZTogMCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHsgLy8g5pyJ5paZ5Lya5ZOh5aKX5Yqg44KE44K144O844OT44K55ouh5by144GnIFxyXG4gICAgICAgICAgICBib3hfaWQ6IDMsXHJcbiAgICAgICAgICAgIGdyb3VwX2lkOiAnSzAx44K/44Kk44OI44OrJyxcclxuICAgICAgICAgICAgZ3JvdXBfbm86IDMsXHJcbiAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcclxuICAgICAgICAgICAgeDE6IDEyMCxcclxuICAgICAgICAgICAgeTE6IDEwMCxcclxuICAgICAgICAgICAgeDI6IDE1MCxcclxuICAgICAgICAgICAgeTI6IDM3MCxcclxuICAgIFxyXG4gICAgICAgICAgICB0ZXh0OiB7XHJcbiAgICAgICAgICAgICAgICBrdW1paG9rbzogJ3RhdGUnLFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19qczogMjAsXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX2plOiA1LFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19nczogMCxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfZ2U6IDEwLFxyXG4gICAgICAgICAgICAgICAgc2l6ZV9qOiAxNyxcclxuICAgICAgICAgICAgICAgIHNpemVfZzogMTcsXHJcbiAgICAgICAgICAgICAgICBneW9rYW46IDUsXHJcbiAgICAgICAgICAgICAgICBmb250OiAyLFxyXG5cclxuICAgICAgICAgICAgICAgIGdyaWQ6IFtdLFxyXG4gICAgICAgICAgICAgICAgcmVzdWx0OiBbXSxcclxuICAgICAgICAgICAgICAgIGFmdXJlOiAwLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgeyAvLyDoqJjkuoswMSDjga7mnKzmlocwMSBcclxuICAgICAgICAgICAgYm94X2lkOiA0LFxyXG4gICAgICAgICAgICBncm91cF9pZDogJ0swMeacrOaWhycsXHJcbiAgICAgICAgICAgIGdyb3VwX25vOiAxLFxyXG4gICAgICAgICAgICB0eXBlOiAndGV4dCcsXHJcbiAgICAgICAgICAgIHgxOiAxNTAsXHJcbiAgICAgICAgICAgIHkxOiA3MCxcclxuICAgICAgICAgICAgeDI6IDI1MCxcclxuICAgICAgICAgICAgeTI6IDE3MCxcclxuICAgIFxyXG4gICAgICAgICAgICB0ZXh0OiB7XHJcbiAgICAgICAgICAgICAgICBrdW1paG9rbzogJ3RhdGUnLFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19qczogNSxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfamU6IDUsXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX2dzOiA1LFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19nZTogNSxcclxuICAgICAgICAgICAgICAgIHNpemVfajogOSxcclxuICAgICAgICAgICAgICAgIHNpemVfZzogMTAsXHJcbiAgICAgICAgICAgICAgICBneW9rYW46IDUsXHJcbiAgICAgICAgICAgICAgICBmb250OiAxLFxyXG5cclxuICAgICAgICAgICAgICAgIGdyaWQ6IFtdLFxyXG4gICAgICAgICAgICAgICAgcmVzdWx0OiBbXSxcclxuICAgICAgICAgICAgICAgIGFmdXJlOiAwLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgeyAvLyDoqJjkuoswMSDjga7mnKzmlocwMiBcclxuICAgICAgICAgICAgYm94X2lkOiA1LFxyXG4gICAgICAgICAgICBncm91cF9pZDogJ0swMeacrOaWhycsXHJcbiAgICAgICAgICAgIGdyb3VwX25vOiAyLFxyXG4gICAgICAgICAgICB0eXBlOiAndGV4dCcsXHJcbiAgICAgICAgICAgIHgxOiAxNTAsXHJcbiAgICAgICAgICAgIHkxOiAxNzAsXHJcbiAgICAgICAgICAgIHgyOiAyNTAsXHJcbiAgICAgICAgICAgIHkyOiAyNzAsXHJcbiAgICBcclxuICAgICAgICAgICAgdGV4dDoge1xyXG4gICAgICAgICAgICAgICAga3VtaWhva286ICd0YXRlJyxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfanM6IDUsXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX2plOiA1LFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19nczogNSxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfZ2U6IDUsXHJcbiAgICAgICAgICAgICAgICBzaXplX2o6IDksXHJcbiAgICAgICAgICAgICAgICBzaXplX2c6IDEwLFxyXG4gICAgICAgICAgICAgICAgZ3lva2FuOiA1LFxyXG4gICAgICAgICAgICAgICAgZm9udDogMSxcclxuXHJcbiAgICAgICAgICAgICAgICBncmlkOiBbXSxcclxuICAgICAgICAgICAgICAgIHJlc3VsdDogW10sXHJcbiAgICAgICAgICAgICAgICBhZnVyZTogMCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHsgLy8g6KiY5LqLMDEg44Gu5pys5paHMDMgXHJcbiAgICAgICAgICAgIGJveF9pZDogNixcclxuICAgICAgICAgICAgZ3JvdXBfaWQ6ICdLMDHmnKzmlocnLFxyXG4gICAgICAgICAgICBncm91cF9ubzogMyxcclxuICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxyXG4gICAgICAgICAgICB4MTogMTUwLFxyXG4gICAgICAgICAgICB5MTogMjcwLFxyXG4gICAgICAgICAgICB4MjogMzQwLFxyXG4gICAgICAgICAgICB5MjogMzcwLFxyXG4gICAgXHJcbiAgICAgICAgICAgIHRleHQ6IHtcclxuICAgICAgICAgICAgICAgIGt1bWlob2tvOiAndGF0ZScsXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX2pzOiA1LFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19qZTogNSxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfZ3M6IDUsXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX2dlOiA1LFxyXG4gICAgICAgICAgICAgICAgc2l6ZV9qOiA5LFxyXG4gICAgICAgICAgICAgICAgc2l6ZV9nOiAxMCxcclxuICAgICAgICAgICAgICAgIGd5b2thbjogNSxcclxuICAgICAgICAgICAgICAgIGZvbnQ6IDEsXHJcblxyXG4gICAgICAgICAgICAgICAgZ3JpZDogW10sXHJcbiAgICAgICAgICAgICAgICByZXN1bHQ6IFtdLFxyXG4gICAgICAgICAgICAgICAgYWZ1cmU6IDAsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7IC8vIOiomOS6izAxIOOBruacrOaWhzA0IFxyXG4gICAgICAgICAgICBib3hfaWQ6IDcsXHJcbiAgICAgICAgICAgIGdyb3VwX2lkOiAnSzAx5pys5paHJyxcclxuICAgICAgICAgICAgZ3JvdXBfbm86IDQsXHJcbiAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcclxuICAgICAgICAgICAgeDE6IDcwLFxyXG4gICAgICAgICAgICB5MTogMzcwLFxyXG4gICAgICAgICAgICB4MjogMzQwLFxyXG4gICAgICAgICAgICB5MjogNDcwLFxyXG4gICAgXHJcbiAgICAgICAgICAgIHRleHQ6IHtcclxuICAgICAgICAgICAgICAgIGt1bWlob2tvOiAndGF0ZScsXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX2pzOiA1LFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19qZTogNSxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfZ3M6IDEwLFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19nZTogNSxcclxuICAgICAgICAgICAgICAgIHNpemVfajogOSxcclxuICAgICAgICAgICAgICAgIHNpemVfZzogMTAsXHJcbiAgICAgICAgICAgICAgICBneW9rYW46IDUsXHJcbiAgICAgICAgICAgICAgICBmb250OiAxLFxyXG5cclxuICAgICAgICAgICAgICAgIGdyaWQ6IFtdLFxyXG4gICAgICAgICAgICAgICAgcmVzdWx0OiBbXSxcclxuICAgICAgICAgICAgICAgIGFmdXJlOiAwLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgeyAvLyDoqJjkuoswMSDjga7mnKzmlocwNSBcclxuICAgICAgICAgICAgYm94X2lkOiA4LFxyXG4gICAgICAgICAgICBncm91cF9pZDogJ0swMeacrOaWhycsXHJcbiAgICAgICAgICAgIGdyb3VwX25vOiA1LFxyXG4gICAgICAgICAgICB0eXBlOiAndGV4dCcsXHJcbiAgICAgICAgICAgIHgxOiA3MCxcclxuICAgICAgICAgICAgeTE6IDQ3MCxcclxuICAgICAgICAgICAgeDI6IDEzMCxcclxuICAgICAgICAgICAgeTI6IDU3MCxcclxuICAgIFxyXG4gICAgICAgICAgICB0ZXh0OiB7XHJcbiAgICAgICAgICAgICAgICBrdW1paG9rbzogJ3RhdGUnLFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19qczogNSxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfamU6IDUsXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX2dzOiAxMCxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfZ2U6IDAsXHJcbiAgICAgICAgICAgICAgICBzaXplX2o6IDksXHJcbiAgICAgICAgICAgICAgICBzaXplX2c6IDEwLFxyXG4gICAgICAgICAgICAgICAgZ3lva2FuOiA1LFxyXG4gICAgICAgICAgICAgICAgZm9udDogMSxcclxuXHJcbiAgICAgICAgICAgICAgICBncmlkOiBbXSxcclxuICAgICAgICAgICAgICAgIHJlc3VsdDogW10sXHJcbiAgICAgICAgICAgICAgICBhZnVyZTogMCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHsgLy8g6KiY5LqLMDEg44Gu5pys5paHMDYgXHJcbiAgICAgICAgICAgIGJveF9pZDogOSxcclxuICAgICAgICAgICAgZ3JvdXBfaWQ6ICdLMDHmnKzmlocnLFxyXG4gICAgICAgICAgICBncm91cF9ubzogNixcclxuICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxyXG4gICAgICAgICAgICB4MTogNzAsXHJcbiAgICAgICAgICAgIHkxOiA1NzAsXHJcbiAgICAgICAgICAgIHgyOiAxMzAsXHJcbiAgICAgICAgICAgIHkyOiA2NzAsXHJcbiAgICBcclxuICAgICAgICAgICAgdGV4dDoge1xyXG4gICAgICAgICAgICAgICAga3VtaWhva286ICd0YXRlJyxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfanM6IDUsXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX2plOiA1LFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19nczogMTAsXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX2dlOiAwLFxyXG4gICAgICAgICAgICAgICAgc2l6ZV9qOiA5LFxyXG4gICAgICAgICAgICAgICAgc2l6ZV9nOiAxMCxcclxuICAgICAgICAgICAgICAgIGd5b2thbjogNSxcclxuICAgICAgICAgICAgICAgIGZvbnQ6IDEsXHJcblxyXG4gICAgICAgICAgICAgICAgZ3JpZDogW10sXHJcbiAgICAgICAgICAgICAgICByZXN1bHQ6IFtdLFxyXG4gICAgICAgICAgICAgICAgYWZ1cmU6IDAsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7IC8vIOiomOS6izAxIOOBrueUu+WDjyBcclxuICAgICAgICAgICAgYm94X2lkOiAxMCxcclxuICAgICAgICAgICAgZ3JvdXBfaWQ6ICdLMDHnlLvlg48nLFxyXG4gICAgICAgICAgICBncm91cF9ubzogMSxcclxuICAgICAgICAgICAgdHlwZTogJ2ltYWdlJyxcclxuICAgICAgICAgICAgeDE6IDI1NSxcclxuICAgICAgICAgICAgeTE6IDc1LFxyXG4gICAgICAgICAgICB4MjogMzk1LFxyXG4gICAgICAgICAgICB5MjogMjY1LFxyXG4gICAgXHJcbiAgICAgICAgICAgIGltYWdlOiB7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICcnLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgeyAvLyDoqJjkuoswMSDjga7jgq3jg6Pjg5fjgrfjg6fjg7MgXHJcbiAgICAgICAgICAgIGJveF9pZDogMTEsXHJcbiAgICAgICAgICAgIGdyb3VwX2lkOiAnSzAx57W16Kej44GNJyxcclxuICAgICAgICAgICAgZ3JvdXBfbm86IDEsXHJcbiAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcclxuICAgICAgICAgICAgeDE6IDQwMCxcclxuICAgICAgICAgICAgeTE6IDcwLFxyXG4gICAgICAgICAgICB4MjogNDQwLFxyXG4gICAgICAgICAgICB5MjogMjcwLFxyXG4gICAgXHJcbiAgICAgICAgICAgIHRleHQ6IHtcclxuICAgICAgICAgICAgICAgIGt1bWlob2tvOiAndGF0ZScsXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX2pzOiAxNSxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfamU6IDE1LFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19nczogNyxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfZ2U6IDAsXHJcbiAgICAgICAgICAgICAgICBzaXplX2o6IDEwLFxyXG4gICAgICAgICAgICAgICAgc2l6ZV9nOiAxMCxcclxuICAgICAgICAgICAgICAgIGd5b2thbjogNSxcclxuICAgICAgICAgICAgICAgIGZvbnQ6IDMsXHJcblxyXG4gICAgICAgICAgICAgICAgdGV4dGdyaWQ6IFtdLFxyXG4gICAgICAgICAgICAgICAgdGV4dFJlc3VsdDogW10sXHJcbiAgICAgICAgICAgICAgICBhZnVyZTogMCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHsgLy8g6KiY5LqLMDIg44Gu6KaL5Ye644GXMDEg44Kq44Kk44K344OD44Kv44K544O744Op44O75aSn5ZywICDntYzllrbntbHlkIjjgbjjgavmlrDnpL7lkI3lpInmm7RcclxuICAgICAgICAgICAgYm94X2lkOiAxMixcclxuICAgICAgICAgICAgZ3JvdXBfaWQ6ICdLMDLjgr/jgqTjg4jjg6snLFxyXG4gICAgICAgICAgICBncm91cF9ubzogMSxcclxuICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxyXG4gICAgICAgICAgICB4MTogMTQwLFxyXG4gICAgICAgICAgICB5MTogNDcwLFxyXG4gICAgICAgICAgICB4MjogMTkwLFxyXG4gICAgICAgICAgICB5MjogNTcwLFxyXG4gICAgXHJcbiAgICAgICAgICAgIHRleHQ6IHtcclxuICAgICAgICAgICAgICAgIGt1bWlob2tvOiAndGF0ZScsXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX2pzOiA1LFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19qZTogNSxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfZ3M6IDEwLFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19nZTogMCxcclxuICAgICAgICAgICAgICAgIHNpemVfajogOCxcclxuICAgICAgICAgICAgICAgIHNpemVfZzogMTIsXHJcbiAgICAgICAgICAgICAgICBneW9rYW46IDgsXHJcbiAgICAgICAgICAgICAgICBmb250OiA0LFxyXG5cclxuICAgICAgICAgICAgICAgIGdyaWQ6IFtdLFxyXG4gICAgICAgICAgICAgICAgcmVzdWx0OiBbXSxcclxuICAgICAgICAgICAgICAgIGFmdXJlOiAwLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgeyAvLyDoqJjkuoswMiDjga7opovlh7rjgZcwMSDjgqrjgqTjgrfjg4Pjgq/jgrnjg4njg4Pjg4jlpKflnLBcclxuICAgICAgICAgICAgYm94X2lkOiAxMyxcclxuICAgICAgICAgICAgZ3JvdXBfaWQ6ICdLMDLjgr/jgqTjg4jjg6snLFxyXG4gICAgICAgICAgICBncm91cF9ubzogMixcclxuICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxyXG4gICAgICAgICAgICB4MTogMTkwLFxyXG4gICAgICAgICAgICB5MTogNDcwLFxyXG4gICAgICAgICAgICB4MjogMjAwLFxyXG4gICAgICAgICAgICB5MjogNTcwLFxyXG4gICAgXHJcbiAgICAgICAgICAgIHRleHQ6IHtcclxuICAgICAgICAgICAgICAgIGt1bWlob2tvOiAndGF0ZScsXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX2pzOiAxNyxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfamU6IDUsXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX2dzOiAwLFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19nZTogMCxcclxuICAgICAgICAgICAgICAgIHNpemVfajogNyxcclxuICAgICAgICAgICAgICAgIHNpemVfZzogNyxcclxuICAgICAgICAgICAgICAgIGd5b2thbjogMTAsXHJcbiAgICAgICAgICAgICAgICBmb250OiA0LFxyXG5cclxuICAgICAgICAgICAgICAgIGdyaWQ6IFtdLFxyXG4gICAgICAgICAgICAgICAgcmVzdWx0OiBbXSxcclxuICAgICAgICAgICAgICAgIGFmdXJlOiAwLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgeyAvLyDoqJjkuoswMiDjga7mnKzmlocwMVxyXG4gICAgICAgICAgICBib3hfaWQ6IDE0LFxyXG4gICAgICAgICAgICBncm91cF9pZDogJ0swMuacrOaWhycsXHJcbiAgICAgICAgICAgIGdyb3VwX25vOiAxLFxyXG4gICAgICAgICAgICB0eXBlOiAndGV4dCcsXHJcbiAgICAgICAgICAgIHgxOiAyMDAsXHJcbiAgICAgICAgICAgIHkxOiA0NzAsXHJcbiAgICAgICAgICAgIHgyOiAzNDAsXHJcbiAgICAgICAgICAgIHkyOiA1NzAsXHJcbiAgICBcclxuICAgICAgICAgICAgdGV4dDoge1xyXG4gICAgICAgICAgICAgICAga3VtaWhva286ICd0YXRlJyxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfanM6IDUsXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX2plOiA1LFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19nczogMTUsXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX2dlOiA1LFxyXG4gICAgICAgICAgICAgICAgc2l6ZV9qOiA5LFxyXG4gICAgICAgICAgICAgICAgc2l6ZV9nOiAxMCxcclxuICAgICAgICAgICAgICAgIGd5b2thbjogNSxcclxuICAgICAgICAgICAgICAgIGZvbnQ6IDEsXHJcblxyXG4gICAgICAgICAgICAgICAgdGV4dGdyaWQ6IFtdLFxyXG4gICAgICAgICAgICAgICAgdGV4dFJlc3VsdDogW10sXHJcbiAgICAgICAgICAgICAgICBhZnVyZTogMCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHsgLy8g6KiY5LqLMDIg44Gu5pys5paHMDFcclxuICAgICAgICAgICAgYm94X2lkOiAxNSxcclxuICAgICAgICAgICAgZ3JvdXBfaWQ6ICdLMDLmnKzmlocnLFxyXG4gICAgICAgICAgICBncm91cF9ubzogMixcclxuICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxyXG4gICAgICAgICAgICB4MTogMTQwLFxyXG4gICAgICAgICAgICB5MTogNTcwLFxyXG4gICAgICAgICAgICB4MjogMjUwLFxyXG4gICAgICAgICAgICB5MjogNjcwLFxyXG4gICAgXHJcbiAgICAgICAgICAgIHRleHQ6IHtcclxuICAgICAgICAgICAgICAgIGt1bWlob2tvOiAndGF0ZScsXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX2pzOiA1LFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19qZTogNSxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfZ3M6IDE1LFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19nZTogNSxcclxuICAgICAgICAgICAgICAgIHNpemVfajogOSxcclxuICAgICAgICAgICAgICAgIHNpemVfZzogMTAsXHJcbiAgICAgICAgICAgICAgICBneW9rYW46IDUsXHJcbiAgICAgICAgICAgICAgICBmb250OiAxLFxyXG5cclxuICAgICAgICAgICAgICAgIHRleHRncmlkOiBbXSxcclxuICAgICAgICAgICAgICAgIHRleHRSZXN1bHQ6IFtdLFxyXG4gICAgICAgICAgICAgICAgYWZ1cmU6IDAsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7IC8vIOiomOS6izAzIOOBruimi+WHuuOBlzAxICDmpb3lpKlcclxuICAgICAgICAgICAgYm94X2lkOiAxNixcclxuICAgICAgICAgICAgZ3JvdXBfaWQ6ICdLMDPjgr/jgqTjg4jjg6snLFxyXG4gICAgICAgICAgICBncm91cF9ubzogMSxcclxuICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxyXG4gICAgICAgICAgICB4MTogNDYwLFxyXG4gICAgICAgICAgICB5MTogNzAsXHJcbiAgICAgICAgICAgIHgyOiA2NDAsXHJcbiAgICAgICAgICAgIHkyOiAxMDAsXHJcbiAgICBcclxuICAgICAgICAgICAgdGV4dDoge1xyXG4gICAgICAgICAgICAgICAga3VtaWhva286ICd5b2tvJyxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfanM6IDU1LFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19qZTogNTUsXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX2dzOiA4LFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19nZTogOCxcclxuICAgICAgICAgICAgICAgIHNpemVfajogMTQsXHJcbiAgICAgICAgICAgICAgICBzaXplX2c6IDE0LFxyXG4gICAgICAgICAgICAgICAgZ3lva2FuOiA1LFxyXG4gICAgICAgICAgICAgICAgZm9udDogMyxcclxuXHJcbiAgICAgICAgICAgICAgICB0ZXh0Z3JpZDogW10sXHJcbiAgICAgICAgICAgICAgICB0ZXh0UmVzdWx0OiBbXSxcclxuICAgICAgICAgICAgICAgIGFmdXJlOiAwLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgeyAvLyDoqJjkuoswMyDjga7opovlh7rjgZcwMSAg44CM5qW95aSp44Ki44Kk44Oq44K544CN44KS6ZaL55m6XHJcbiAgICAgICAgICAgIGJveF9pZDogMTcsXHJcbiAgICAgICAgICAgIGdyb3VwX2lkOiAnSzAz44K/44Kk44OI44OrJyxcclxuICAgICAgICAgICAgZ3JvdXBfbm86IDIsXHJcbiAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcclxuICAgICAgICAgICAgeDE6IDQ2MCxcclxuICAgICAgICAgICAgeTE6IDEwMCxcclxuICAgICAgICAgICAgeDI6IDY0MCxcclxuICAgICAgICAgICAgeTI6IDE0MCxcclxuICAgIFxyXG4gICAgICAgICAgICB0ZXh0OiB7XHJcbiAgICAgICAgICAgICAgICBrdW1paG9rbzogJ3lva28nLFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19qczogMCxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfamU6IDAsXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX2dzOiA1LFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19nZTogMTUsXHJcbiAgICAgICAgICAgICAgICBzaXplX2o6IDE2LFxyXG4gICAgICAgICAgICAgICAgc2l6ZV9nOiAyMCxcclxuICAgICAgICAgICAgICAgIGd5b2thbjogNSxcclxuICAgICAgICAgICAgICAgIGZvbnQ6IDIsXHJcblxyXG4gICAgICAgICAgICAgICAgdGV4dGdyaWQ6IFtdLFxyXG4gICAgICAgICAgICAgICAgdGV4dFJlc3VsdDogW10sXHJcbiAgICAgICAgICAgICAgICBhZnVyZTogMCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHsgLy8g6KiY5LqLMDMg44Gu6KaL5Ye644GXMDEgIOODk+ODg+OCsOODh+ODvOOCv+OCkuWIhuaekOa0u+eUqFxyXG4gICAgICAgICAgICBib3hfaWQ6IDE4LFxyXG4gICAgICAgICAgICBncm91cF9pZDogJ0swM+OCv+OCpOODiOODqycsXHJcbiAgICAgICAgICAgIGdyb3VwX25vOiAzLFxyXG4gICAgICAgICAgICB0eXBlOiAndGV4dCcsXHJcbiAgICAgICAgICAgIHgxOiA0NjAsXHJcbiAgICAgICAgICAgIHkxOiAxNDAsXHJcbiAgICAgICAgICAgIHgyOiA2NDAsXHJcbiAgICAgICAgICAgIHkyOiAxNzAsXHJcbiAgICBcclxuICAgICAgICAgICAgdGV4dDoge1xyXG4gICAgICAgICAgICAgICAga3VtaWhva286ICd5b2tvJyxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfanM6IDcsXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX2plOiA4LFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19nczogMCxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfZ2U6IDE1LFxyXG4gICAgICAgICAgICAgICAgc2l6ZV9qOiAxNSxcclxuICAgICAgICAgICAgICAgIHNpemVfZzogMTUsXHJcbiAgICAgICAgICAgICAgICBneW9rYW46IDUsXHJcbiAgICAgICAgICAgICAgICBmb250OiAxLFxyXG5cclxuICAgICAgICAgICAgICAgIHRleHRncmlkOiBbXSxcclxuICAgICAgICAgICAgICAgIHRleHRSZXN1bHQ6IFtdLFxyXG4gICAgICAgICAgICAgICAgYWZ1cmU6IDAsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7IC8vIOiomOS6izAzIOOBruacrOaWhzAxXHJcbiAgICAgICAgICAgIGJveF9pZDogMTksXHJcbiAgICAgICAgICAgIGdyb3VwX2lkOiAnSzAz5pys5paHJyxcclxuICAgICAgICAgICAgZ3JvdXBfbm86IDEsXHJcbiAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcclxuICAgICAgICAgICAgeDE6IDY0MCxcclxuICAgICAgICAgICAgeTE6IDcwLFxyXG4gICAgICAgICAgICB4MjogNzcwLFxyXG4gICAgICAgICAgICB5MjogMTcwLFxyXG4gICAgXHJcbiAgICAgICAgICAgIHRleHQ6IHtcclxuICAgICAgICAgICAgICAgIGt1bWlob2tvOiAndGF0ZScsXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX2pzOiA1LFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19qZTogNSxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfZ3M6IDEwLFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19nZTogNSxcclxuICAgICAgICAgICAgICAgIHNpemVfajogOSxcclxuICAgICAgICAgICAgICAgIHNpemVfZzogMTAsXHJcbiAgICAgICAgICAgICAgICBneW9rYW46IDUsXHJcbiAgICAgICAgICAgICAgICBmb250OiAxLFxyXG5cclxuICAgICAgICAgICAgICAgIGdyaWQ6IFtdLFxyXG4gICAgICAgICAgICAgICAgcmVzdWx0OiBbXSxcclxuICAgICAgICAgICAgICAgIGFmdXJlOiAwLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgeyAvLyDoqJjkuoswMyDjga7mnKzmlocwMVxyXG4gICAgICAgICAgICBib3hfaWQ6IDIwLFxyXG4gICAgICAgICAgICBncm91cF9pZDogJ0swM+acrOaWhycsXHJcbiAgICAgICAgICAgIGdyb3VwX25vOiAyLFxyXG4gICAgICAgICAgICB0eXBlOiAndGV4dCcsXHJcbiAgICAgICAgICAgIHgxOiA0NTAsXHJcbiAgICAgICAgICAgIHkxOiAxNzAsXHJcbiAgICAgICAgICAgIHgyOiA3NzAsXHJcbiAgICAgICAgICAgIHkyOiAyNzAsXHJcbiAgICBcclxuICAgICAgICAgICAgdGV4dDoge1xyXG4gICAgICAgICAgICAgICAga3VtaWhva286ICd0YXRlJyxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfanM6IDUsXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX2plOiA1LFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19nczogNSxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfZ2U6IDUsXHJcbiAgICAgICAgICAgICAgICBzaXplX2o6IDksXHJcbiAgICAgICAgICAgICAgICBzaXplX2c6IDEwLFxyXG4gICAgICAgICAgICAgICAgZ3lva2FuOiA1LFxyXG4gICAgICAgICAgICAgICAgZm9udDogMSxcclxuXHJcbiAgICAgICAgICAgICAgICBncmlkOiBbXSxcclxuICAgICAgICAgICAgICAgIHJlc3VsdDogW10sXHJcbiAgICAgICAgICAgICAgICBhZnVyZTogMCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHsgLy8g6KiY5LqLMDMg44Gu5pys5paHMDFcclxuICAgICAgICAgICAgYm94X2lkOiAyMSxcclxuICAgICAgICAgICAgZ3JvdXBfaWQ6ICdLMDPmnKzmlocnLFxyXG4gICAgICAgICAgICBncm91cF9ubzogMyxcclxuICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxyXG4gICAgICAgICAgICB4MTogNDUwLFxyXG4gICAgICAgICAgICB5MTogMjcwLFxyXG4gICAgICAgICAgICB4MjogNzcwLFxyXG4gICAgICAgICAgICB5MjogMzcwLFxyXG4gICAgXHJcbiAgICAgICAgICAgIHRleHQ6IHtcclxuICAgICAgICAgICAgICAgIGt1bWlob2tvOiAndGF0ZScsXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX2pzOiA1LFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19qZTogNSxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfZ3M6IDUsXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX2dlOiA1LFxyXG4gICAgICAgICAgICAgICAgc2l6ZV9qOiA5LFxyXG4gICAgICAgICAgICAgICAgc2l6ZV9nOiAxMCxcclxuICAgICAgICAgICAgICAgIGd5b2thbjogNSxcclxuICAgICAgICAgICAgICAgIGZvbnQ6IDEsXHJcblxyXG4gICAgICAgICAgICAgICAgZ3JpZDogW10sXHJcbiAgICAgICAgICAgICAgICByZXN1bHQ6IFtdLFxyXG4gICAgICAgICAgICAgICAgYWZ1cmU6IDAsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7IC8vIOiomOS6izA0IOOBruimi+WHuuOBlzAxIOOCquODq+ODk+OCuVxyXG4gICAgICAgICAgICBib3hfaWQ6IDIyLFxyXG4gICAgICAgICAgICBncm91cF9pZDogJ0swNOOCv+OCpOODiOODqycsXHJcbiAgICAgICAgICAgIGdyb3VwX25vOiAxLFxyXG4gICAgICAgICAgICB0eXBlOiAndGV4dCcsXHJcbiAgICAgICAgICAgIHgxOiAzNTAsXHJcbiAgICAgICAgICAgIHkxOiAyNzAsXHJcbiAgICAgICAgICAgIHgyOiA0MjAsXHJcbiAgICAgICAgICAgIHkyOiAyOTAsXHJcbiAgICBcclxuICAgICAgICAgICAgdGV4dDoge1xyXG4gICAgICAgICAgICAgICAga3VtaWhva286ICd5b2tvJyxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfanM6IDE1LFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19qZTogMTUsXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX2dzOiA1LFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19nZTogNSxcclxuICAgICAgICAgICAgICAgIHNpemVfajogMTAsXHJcbiAgICAgICAgICAgICAgICBzaXplX2c6IDEwLFxyXG4gICAgICAgICAgICAgICAgZ3lva2FuOiA1LFxyXG4gICAgICAgICAgICAgICAgZm9udDogNCxcclxuXHJcbiAgICAgICAgICAgICAgICBncmlkOiBbXSxcclxuICAgICAgICAgICAgICAgIHJlc3VsdDogW10sXHJcbiAgICAgICAgICAgICAgICBhZnVyZTogMCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHsgLy8g6KiY5LqLMDQg44Gu6KaL5Ye644GXMDEg5paw44K544Oe44Ob44Ki44OX44Oq6YWN5L+hXHJcbiAgICAgICAgICAgIGJveF9pZDogMjMsXHJcbiAgICAgICAgICAgIGdyb3VwX2lkOiAnSzA044K/44Kk44OI44OrJyxcclxuICAgICAgICAgICAgZ3JvdXBfbm86IDIsXHJcbiAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcclxuICAgICAgICAgICAgeDE6IDM1MCxcclxuICAgICAgICAgICAgeTE6IDI5MCxcclxuICAgICAgICAgICAgeDI6IDM5MCxcclxuICAgICAgICAgICAgeTI6IDQ3MCxcclxuICAgIFxyXG4gICAgICAgICAgICB0ZXh0OiB7XHJcbiAgICAgICAgICAgICAgICBrdW1paG9rbzogJ3RhdGUnLFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19qczogOSxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfamU6IDksXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX2dzOiAxMCxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfZ2U6IDEwLFxyXG4gICAgICAgICAgICAgICAgc2l6ZV9qOiAxOCxcclxuICAgICAgICAgICAgICAgIHNpemVfZzogMjAsXHJcbiAgICAgICAgICAgICAgICBneW9rYW46IDUsXHJcbiAgICAgICAgICAgICAgICBmb250OiAyLFxyXG5cclxuICAgICAgICAgICAgICAgIGdyaWQ6IFtdLFxyXG4gICAgICAgICAgICAgICAgcmVzdWx0OiBbXSxcclxuICAgICAgICAgICAgICAgIGFmdXJlOiAwLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgeyAvLyDoqJjkuoswNCDjga7opovlh7rjgZcwMSDphY3pgIHnorroqo3jgoTjgrPjg7Pjg5Pjg4vmlK/miZXjgYTjgoJcclxuICAgICAgICAgICAgYm94X2lkOiAyNCxcclxuICAgICAgICAgICAgZ3JvdXBfaWQ6ICdLMDTjgr/jgqTjg4jjg6snLFxyXG4gICAgICAgICAgICBncm91cF9ubzogMyxcclxuICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxyXG4gICAgICAgICAgICB4MTogMzkwLFxyXG4gICAgICAgICAgICB5MTogMjkwLFxyXG4gICAgICAgICAgICB4MjogNDIwLFxyXG4gICAgICAgICAgICB5MjogNDcwLFxyXG4gICAgXHJcbiAgICAgICAgICAgIHRleHQ6IHtcclxuICAgICAgICAgICAgICAgIGt1bWlob2tvOiAndGF0ZScsXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX2pzOiAxNSxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfamU6IDksXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX2dzOiA5LFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19nZTogOSxcclxuICAgICAgICAgICAgICAgIHNpemVfajogMTIsXHJcbiAgICAgICAgICAgICAgICBzaXplX2c6IDEyLFxyXG4gICAgICAgICAgICAgICAgZ3lva2FuOiA1LFxyXG4gICAgICAgICAgICAgICAgZm9udDogNCxcclxuXHJcbiAgICAgICAgICAgICAgICBncmlkOiBbXSxcclxuICAgICAgICAgICAgICAgIHJlc3VsdDogW10sXHJcbiAgICAgICAgICAgICAgICBhZnVyZTogMCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHsgLy8g6KiY5LqLMDQg44Gu5pys5paHMDFcclxuICAgICAgICAgICAgYm94X2lkOiAyNSxcclxuICAgICAgICAgICAgZ3JvdXBfaWQ6ICdLMDTmnKzmlocnLFxyXG4gICAgICAgICAgICBncm91cF9ubzogMSxcclxuICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxyXG4gICAgICAgICAgICB4MTogNDIwLFxyXG4gICAgICAgICAgICB5MTogMjcwLFxyXG4gICAgICAgICAgICB4MjogNDQwLFxyXG4gICAgICAgICAgICB5MjogMzcwLFxyXG4gICAgXHJcbiAgICAgICAgICAgIHRleHQ6IHtcclxuICAgICAgICAgICAgICAgIGt1bWlob2tvOiAndGF0ZScsXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX2pzOiA1LFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19qZTogNSxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfZ3M6IDUsXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX2dlOiA1LFxyXG4gICAgICAgICAgICAgICAgc2l6ZV9qOiA5LFxyXG4gICAgICAgICAgICAgICAgc2l6ZV9nOiAxMCxcclxuICAgICAgICAgICAgICAgIGd5b2thbjogNSxcclxuICAgICAgICAgICAgICAgIGZvbnQ6IDEsXHJcblxyXG4gICAgICAgICAgICAgICAgZ3JpZDogW10sXHJcbiAgICAgICAgICAgICAgICByZXN1bHQ6IFtdLFxyXG4gICAgICAgICAgICAgICAgYWZ1cmU6IDAsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7IC8vIOiomOS6izA0IOOBruacrOaWhzAxXHJcbiAgICAgICAgICAgIGJveF9pZDogMjYsXHJcbiAgICAgICAgICAgIGdyb3VwX2lkOiAnSzA05pys5paHJyxcclxuICAgICAgICAgICAgZ3JvdXBfbm86IDIsXHJcbiAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcclxuICAgICAgICAgICAgeDE6IDQyMCxcclxuICAgICAgICAgICAgeTE6IDM3MCxcclxuICAgICAgICAgICAgeDI6IDc3MCxcclxuICAgICAgICAgICAgeTI6IDQ3MCxcclxuICAgIFxyXG4gICAgICAgICAgICB0ZXh0OiB7XHJcbiAgICAgICAgICAgICAgICBrdW1paG9rbzogJ3RhdGUnLFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19qczogNSxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfamU6IDUsXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX2dzOiA1LFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19nZTogNSxcclxuICAgICAgICAgICAgICAgIHNpemVfajogOSxcclxuICAgICAgICAgICAgICAgIHNpemVfZzogMTAsXHJcbiAgICAgICAgICAgICAgICBneW9rYW46IDUsXHJcbiAgICAgICAgICAgICAgICBmb250OiAxLFxyXG5cclxuICAgICAgICAgICAgICAgIGdyaWQ6IFtdLFxyXG4gICAgICAgICAgICAgICAgcmVzdWx0OiBbXSxcclxuICAgICAgICAgICAgICAgIGFmdXJlOiAwLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgeyAvLyDoqJjkuoswNCDjga7mnKzmlocwMVxyXG4gICAgICAgICAgICBib3hfaWQ6IDI3LFxyXG4gICAgICAgICAgICBncm91cF9pZDogJ0swNOacrOaWhycsXHJcbiAgICAgICAgICAgIG5vOiAzLFxyXG4gICAgICAgICAgICB0eXBlOiAndGV4dCcsXHJcbiAgICAgICAgICAgIHgxOiAzNTAsXHJcbiAgICAgICAgICAgIHkxOiA0NzAsXHJcbiAgICAgICAgICAgIHgyOiA3NzAsXHJcbiAgICAgICAgICAgIHkyOiA1NzAsXHJcbiAgICBcclxuICAgICAgICAgICAgdGV4dDoge1xyXG4gICAgICAgICAgICAgICAga3VtaWhva286ICd0YXRlJyxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfanM6IDUsXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX2plOiA1LFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19nczogMCxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfZ2U6IDUsXHJcbiAgICAgICAgICAgICAgICBzaXplX2o6IDksXHJcbiAgICAgICAgICAgICAgICBzaXplX2c6IDEwLFxyXG4gICAgICAgICAgICAgICAgZ3lva2FuOiA1LFxyXG4gICAgICAgICAgICAgICAgZm9udDogMSxcclxuXHJcbiAgICAgICAgICAgICAgICB0ZXh0Z3JpZDogW10sXHJcbiAgICAgICAgICAgICAgICB0ZXh0UmVzdWx0OiBbXSxcclxuICAgICAgICAgICAgICAgIGFmdXJlOiAwLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgeyAvLyDoqJjkuoswNSDjga7opovlh7rjgZcwMSAg44OZ44ON44OV44Kj44OD44OI44Ov44Oz5ZCR44GRXHJcbiAgICAgICAgICAgIGJveF9pZDogMjgsXHJcbiAgICAgICAgICAgIGdyb3VwX2lkOiAnSzA144K/44Kk44OI44OrJyxcclxuICAgICAgICAgICAgZ3JvdXBfbm86IDEsXHJcbiAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcclxuICAgICAgICAgICAgeDE6IDI2MCxcclxuICAgICAgICAgICAgeTE6IDU3MCxcclxuICAgICAgICAgICAgeDI6IDI4MCxcclxuICAgICAgICAgICAgeTI6IDY3MCxcclxuICAgIFxyXG4gICAgICAgICAgICB0ZXh0OiB7XHJcbiAgICAgICAgICAgICAgICBrdW1paG9rbzogJ3RhdGUnLFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19qczogNSxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfamU6IDUsXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX2dzOiAzLFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19nZTogMyxcclxuICAgICAgICAgICAgICAgIHNpemVfajogOSxcclxuICAgICAgICAgICAgICAgIHNpemVfZzogMTQsXHJcbiAgICAgICAgICAgICAgICBneW9rYW46IDUsXHJcbiAgICAgICAgICAgICAgICBmb250OiA0LFxyXG5cclxuICAgICAgICAgICAgICAgIGdyaWQ6IFtdLFxyXG4gICAgICAgICAgICAgICAgcmVzdWx0OiBbXSxcclxuICAgICAgICAgICAgICAgIGFmdXJlOiAwLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgeyAvLyDoqJjkuoswNSDjga7opovlh7rjgZcwMSAg54qs55So44GK44KE44Gk44KS6LKp5aOy6ZaL5aeLXHJcbiAgICAgICAgICAgIGJveF9pZDogMjksXHJcbiAgICAgICAgICAgIGdyb3VwX2lkOiAnSzA144K/44Kk44OI44OrJyxcclxuICAgICAgICAgICAgZ3JvdXBfbm86IDIsXHJcbiAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcclxuICAgICAgICAgICAgeDE6IDI4MCxcclxuICAgICAgICAgICAgeTE6IDU3MCxcclxuICAgICAgICAgICAgeDI6IDMwMCxcclxuICAgICAgICAgICAgeTI6IDY3MCxcclxuICAgIFxyXG4gICAgICAgICAgICB0ZXh0OiB7XHJcbiAgICAgICAgICAgICAgICBrdW1paG9rbzogJ3RhdGUnLFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19qczogNSxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfamU6IDUsXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX2dzOiAzLFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19nZTogMyxcclxuICAgICAgICAgICAgICAgIHNpemVfajogOSxcclxuICAgICAgICAgICAgICAgIHNpemVfZzogMTQsXHJcbiAgICAgICAgICAgICAgICBneW9rYW46IDUsXHJcbiAgICAgICAgICAgICAgICBmb250OiA0LFxyXG5cclxuICAgICAgICAgICAgICAgIGdyaWQ6IFtdLFxyXG4gICAgICAgICAgICAgICAgcmVzdWx0OiBbXSxcclxuICAgICAgICAgICAgICAgIGFmdXJlOiAwLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgeyAvLyDoqJjkuoswNSDjga7opovlh7rjgZcwMSAg77yl77yj44Ob44O844Or44OH44Kj44Oz44Kw44K5XHJcbiAgICAgICAgICAgIGJveF9pZDogMzAsXHJcbiAgICAgICAgICAgIGdyb3VwX2lkOiAnSzA144K/44Kk44OI44OrJyxcclxuICAgICAgICAgICAgZ3JvdXBfbm86IDMsXHJcbiAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcclxuICAgICAgICAgICAgeDE6IDMwMCxcclxuICAgICAgICAgICAgeTE6IDU3MCxcclxuICAgICAgICAgICAgeDI6IDMyMCxcclxuICAgICAgICAgICAgeTI6IDY3MCxcclxuICAgIFxyXG4gICAgICAgICAgICB0ZXh0OiB7XHJcbiAgICAgICAgICAgICAgICBrdW1paG9rbzogJ3RhdGUnLFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19qczogMTUsXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX2plOiA1LFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19nczogNixcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfZ2U6IDYsXHJcbiAgICAgICAgICAgICAgICBzaXplX2o6IDgsXHJcbiAgICAgICAgICAgICAgICBzaXplX2c6IDgsXHJcbiAgICAgICAgICAgICAgICBneW9rYW46IDUsXHJcbiAgICAgICAgICAgICAgICBmb250OiAzLFxyXG5cclxuICAgICAgICAgICAgICAgIGdyaWQ6IFtdLFxyXG4gICAgICAgICAgICAgICAgcmVzdWx0OiBbXSxcclxuICAgICAgICAgICAgICAgIGFmdXJlOiAwLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgeyAvLyDoqJjkuoswNSDjga7mnKzmlocwMVxyXG4gICAgICAgICAgICBib3hfaWQ6IDMxLFxyXG4gICAgICAgICAgICBncm91cF9pZDogJ0swNeacrOaWhycsXHJcbiAgICAgICAgICAgIGdyb3VwX25vOiAxLFxyXG4gICAgICAgICAgICB0eXBlOiAndGV4dCcsXHJcbiAgICAgICAgICAgIHgxOiAzMjAsXHJcbiAgICAgICAgICAgIHkxOiA1NzAsXHJcbiAgICAgICAgICAgIHgyOiAzNjAsXHJcbiAgICAgICAgICAgIHkyOiA2NzAsXHJcbiAgICBcclxuICAgICAgICAgICAgdGV4dDoge1xyXG4gICAgICAgICAgICAgICAga3VtaWhva286ICd0YXRlJyxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfanM6IDUsXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX2plOiA1LFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19nczogMCxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfZ2U6IDAsXHJcbiAgICAgICAgICAgICAgICBzaXplX2o6IDksXHJcbiAgICAgICAgICAgICAgICBzaXplX2c6IDEwLFxyXG4gICAgICAgICAgICAgICAgZ3lva2FuOiA1LFxyXG4gICAgICAgICAgICAgICAgZm9udDogMSxcclxuXHJcbiAgICAgICAgICAgICAgICBncmlkOiBbXSxcclxuICAgICAgICAgICAgICAgIHJlc3VsdDogW10sXHJcbiAgICAgICAgICAgICAgICBhZnVyZTogMCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHsgLy8g6KiY5LqLMDUg5pys5paHXHJcbiAgICAgICAgICAgIGJveF9pZDogMzIsXHJcbiAgICAgICAgICAgIGdyb3VwX2lkOiAnSzA15pys5paHJyxcclxuICAgICAgICAgICAgZ3JvdXBfbm86IDIsXHJcbiAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcclxuICAgICAgICAgICAgeDE6IDcwLFxyXG4gICAgICAgICAgICB5MTogNjcwLFxyXG4gICAgICAgICAgICB4MjogMzYwLFxyXG4gICAgICAgICAgICB5MjogNzcwLFxyXG4gICAgXHJcbiAgICAgICAgICAgIHRleHQ6IHtcclxuICAgICAgICAgICAgICAgIGt1bWlob2tvOiAndGF0ZScsXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX2pzOiA1LFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19qZTogNSxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfZ3M6IDEwLFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19nZTogMCxcclxuICAgICAgICAgICAgICAgIHNpemVfajogOSxcclxuICAgICAgICAgICAgICAgIHNpemVfZzogMTAsXHJcbiAgICAgICAgICAgICAgICBneW9rYW46IDUsXHJcbiAgICAgICAgICAgICAgICBmb250OiAxLFxyXG5cclxuICAgICAgICAgICAgICAgIGdyaWQ6IFtdLFxyXG4gICAgICAgICAgICAgICAgcmVzdWx0OiBbXSxcclxuICAgICAgICAgICAgICAgIGFmdXJlOiAwLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgeyAvLyDoqJjkuoswNSDmnKzmlodcclxuICAgICAgICAgICAgYm94X2lkOiAzMyxcclxuICAgICAgICAgICAgZ3JvdXBfaWQ6ICdLMDXmnKzmlocnLFxyXG4gICAgICAgICAgICBncm91cF9ubzogMyxcclxuICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxyXG4gICAgICAgICAgICB4MTogMzYwLFxyXG4gICAgICAgICAgICB5MTogNzIwLFxyXG4gICAgICAgICAgICB4MjogNTkwLFxyXG4gICAgICAgICAgICB5MjogNzcwLFxyXG4gICAgXHJcbiAgICAgICAgICAgIHRleHQ6IHtcclxuICAgICAgICAgICAgICAgIGt1bWlob2tvOiAndGF0ZScsXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX2pzOiA1LFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19qZTogNSxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfZ3M6IDUsXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX2dlOiA1LFxyXG4gICAgICAgICAgICAgICAgc2l6ZV9qOiA5LFxyXG4gICAgICAgICAgICAgICAgc2l6ZV9nOiAxMCxcclxuICAgICAgICAgICAgICAgIGd5b2thbjogNSxcclxuICAgICAgICAgICAgICAgIGZvbnQ6IDEsXHJcblxyXG4gICAgICAgICAgICAgICAgZ3JpZDogW10sXHJcbiAgICAgICAgICAgICAgICByZXN1bHQ6IFtdLFxyXG4gICAgICAgICAgICAgICAgYWZ1cmU6IDAsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7IC8vIOiomOS6izA1IOeUu+WDjyBcclxuICAgICAgICAgICAgYm94X2lkOiAzNCxcclxuICAgICAgICAgICAgZ3JvdXBfaWQ6ICdLMDXnlLvlg48nLFxyXG4gICAgICAgICAgICBncm91cF9ubzogMSxcclxuICAgICAgICAgICAgdHlwZTogJ2ltYWdlJyxcclxuICAgICAgICAgICAgeDE6IDM2NSxcclxuICAgICAgICAgICAgeTE6IDU3NSxcclxuICAgICAgICAgICAgeDI6IDUyMCxcclxuICAgICAgICAgICAgeTI6IDcxNSxcclxuICAgIFxyXG4gICAgICAgICAgICBpbWFnZToge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHsgLy8g6KiY5LqLMDUg57W16Kej44GNXHJcbiAgICAgICAgICAgIGJveF9pZDogMzUsXHJcbiAgICAgICAgICAgIGdyb3VwX2lkOiAnSzA157W16Kej44GNJyxcclxuICAgICAgICAgICAgZ3JvdXBfbm86IDEsXHJcbiAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcclxuICAgICAgICAgICAgeDE6IDUyMCxcclxuICAgICAgICAgICAgeTE6IDU3MCxcclxuICAgICAgICAgICAgeDI6IDU5MCxcclxuICAgICAgICAgICAgeTI6IDcyMCxcclxuICAgIFxyXG4gICAgICAgICAgICB0ZXh0OiB7XHJcbiAgICAgICAgICAgICAgICBrdW1paG9rbzogJ3RhdGUnLFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19qczogOSxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfamU6IDksXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX2dzOiA1LFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19nZTogNixcclxuICAgICAgICAgICAgICAgIHNpemVfajogMTEsXHJcbiAgICAgICAgICAgICAgICBzaXplX2c6IDExLFxyXG4gICAgICAgICAgICAgICAgZ3lva2FuOiA1LFxyXG4gICAgICAgICAgICAgICAgZm9udDogMyxcclxuXHJcbiAgICAgICAgICAgICAgICBncmlkOiBbXSxcclxuICAgICAgICAgICAgICAgIHJlc3VsdDogW10sXHJcbiAgICAgICAgICAgICAgICBhZnVyZTogMCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHsgLy8g6KiY5LqLMDYg55S75YOP77yI44Kr44OD44OI77yJIFxyXG4gICAgICAgICAgICBib3hfaWQ6IDM2LFxyXG4gICAgICAgICAgICBncm91cF9pZDogJ0swNueUu+WDjycsXHJcbiAgICAgICAgICAgIGdyb3VwX25vOiAxLFxyXG4gICAgICAgICAgICB0eXBlOiAnaW1hZ2UnLFxyXG4gICAgICAgICAgICB4MTogNzAsXHJcbiAgICAgICAgICAgIHkxOiA3NzAsXHJcbiAgICAgICAgICAgIHgyOiAxMTAsXHJcbiAgICAgICAgICAgIHkyOiA4NzAsXHJcbiAgICBcclxuICAgICAgICAgICAgaW1hZ2U6IHtcclxuICAgICAgICAgICAgICAgIHVybDogJycsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7IC8vIOiomOS6izA2IOOCv+OCpOODiOODqyAg5pyf5pyr6YWN5b2T6YeR44Gv77yV5YaGXHJcbiAgICAgICAgICAgIGJveF9pZDogMzcsXHJcbiAgICAgICAgICAgIGdyb3VwX2lkOiAnSzA244K/44Kk44OI44OrJyxcclxuICAgICAgICAgICAgZ3JvdXBfbm86IDEsXHJcbiAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcclxuICAgICAgICAgICAgeDE6IDExMCxcclxuICAgICAgICAgICAgeTE6IDc3MCxcclxuICAgICAgICAgICAgeDI6IDEzMCxcclxuICAgICAgICAgICAgeTI6IDg3MCxcclxuICAgIFxyXG4gICAgICAgICAgICB0ZXh0OiB7XHJcbiAgICAgICAgICAgICAgICBrdW1paG9rbzogJ3RhdGUnLFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19qczogNixcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfamU6IDYsXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX2dzOiA4LFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19nZTogMCxcclxuICAgICAgICAgICAgICAgIHNpemVfajogMTEsXHJcbiAgICAgICAgICAgICAgICBzaXplX2c6IDEyLFxyXG4gICAgICAgICAgICAgICAgZ3lva2FuOiA1LFxyXG4gICAgICAgICAgICAgICAgZm9udDogMixcclxuXHJcbiAgICAgICAgICAgICAgICBncmlkOiBbXSxcclxuICAgICAgICAgICAgICAgIHJlc3VsdDogW10sXHJcbiAgICAgICAgICAgICAgICBhZnVyZTogMCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHsgLy8g6KiY5LqLMDYg5pys5paHXHJcbiAgICAgICAgICAgIGJveF9pZDogMzgsXHJcbiAgICAgICAgICAgIGdyb3VwX2lkOiAnSzA25pys5paHJyxcclxuICAgICAgICAgICAgZ3JvdXBfbm86IDEsXHJcbiAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcclxuICAgICAgICAgICAgeDE6IDEzMCxcclxuICAgICAgICAgICAgeTE6IDc3MCxcclxuICAgICAgICAgICAgeDI6IDM0MCxcclxuICAgICAgICAgICAgeTI6IDg3MCxcclxuICAgIFxyXG4gICAgICAgICAgICB0ZXh0OiB7XHJcbiAgICAgICAgICAgICAgICBrdW1paG9rbzogJ3RhdGUnLFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19qczogNSxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfamU6IDUsXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX2dzOiAxMCxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfZ2U6IDUsXHJcbiAgICAgICAgICAgICAgICBzaXplX2o6IDksXHJcbiAgICAgICAgICAgICAgICBzaXplX2c6IDEwLFxyXG4gICAgICAgICAgICAgICAgZ3lva2FuOiA1LFxyXG4gICAgICAgICAgICAgICAgZm9udDogMSxcclxuXHJcbiAgICAgICAgICAgICAgICBncmlkOiBbXSxcclxuICAgICAgICAgICAgICAgIHJlc3VsdDogW10sXHJcbiAgICAgICAgICAgICAgICBhZnVyZTogMCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHsgLy8g6KiY5LqLMDcg44K/44Kk44OI44OrICDjgrfjg6rjgqvjgrXjg5fjg6rliLfmlrBcclxuICAgICAgICAgICAgYm94X2lkOiAzOSxcclxuICAgICAgICAgICAgZ3JvdXBfaWQ6ICdLMDfjgr/jgqTjg4jjg6snLFxyXG4gICAgICAgICAgICBncm91cF9ubzogMSxcclxuICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxyXG4gICAgICAgICAgICB4MTogMzQwLFxyXG4gICAgICAgICAgICB5MTogNzcwLFxyXG4gICAgICAgICAgICB4MjogMzYwLFxyXG4gICAgICAgICAgICB5MjogODcwLFxyXG4gICAgXHJcbiAgICAgICAgICAgIHRleHQ6IHtcclxuICAgICAgICAgICAgICAgIGt1bWlob2tvOiAndGF0ZScsXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX2pzOiA2LFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19qZTogNixcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfZ3M6IDQsXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX2dlOiA0LFxyXG4gICAgICAgICAgICAgICAgc2l6ZV9qOiAxMSxcclxuICAgICAgICAgICAgICAgIHNpemVfZzogMTIsXHJcbiAgICAgICAgICAgICAgICBneW9rYW46IDUsXHJcbiAgICAgICAgICAgICAgICBmb250OiAyLFxyXG5cclxuICAgICAgICAgICAgICAgIGdyaWQ6IFtdLFxyXG4gICAgICAgICAgICAgICAgcmVzdWx0OiBbXSxcclxuICAgICAgICAgICAgICAgIGFmdXJlOiAwLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgeyAvLyDoqJjkuoswNyDmnKzmlodcclxuICAgICAgICAgICAgYm94X2lkOiA0MCxcclxuICAgICAgICAgICAgZ3JvdXBfaWQ6ICdLMDfmnKzmlocnLFxyXG4gICAgICAgICAgICBncm91cF9ubzogMSxcclxuICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxyXG4gICAgICAgICAgICB4MTogMzYwLFxyXG4gICAgICAgICAgICB5MTogNzcwLFxyXG4gICAgICAgICAgICB4MjogNTkwLFxyXG4gICAgICAgICAgICB5MjogODcwLFxyXG4gICAgXHJcbiAgICAgICAgICAgIHRleHQ6IHtcclxuICAgICAgICAgICAgICAgIGt1bWlob2tvOiAndGF0ZScsXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX2pzOiA1LFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19qZTogNSxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfZ3M6IDUsXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX2dlOiA1LFxyXG4gICAgICAgICAgICAgICAgc2l6ZV9qOiA5LFxyXG4gICAgICAgICAgICAgICAgc2l6ZV9nOiAxMCxcclxuICAgICAgICAgICAgICAgIGd5b2thbjogNSxcclxuICAgICAgICAgICAgICAgIGZvbnQ6IDEsXHJcblxyXG4gICAgICAgICAgICAgICAgZ3JpZDogW10sXHJcbiAgICAgICAgICAgICAgICByZXN1bHQ6IFtdLFxyXG4gICAgICAgICAgICAgICAgYWZ1cmU6IDAsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7IC8vIOiomOS6izA4IOeUu+WDj++8iOihqO+8iSBcclxuICAgICAgICAgICAgYm94X2lkOiA0MSxcclxuICAgICAgICAgICAgZ3JvdXBfaWQ6ICdLMDjnlLvlg48nLFxyXG4gICAgICAgICAgICBncm91cF9ubzogMSxcclxuICAgICAgICAgICAgdHlwZTogJ2ltYWdlJyxcclxuICAgICAgICAgICAgeDE6IDYwMCxcclxuICAgICAgICAgICAgeTE6IDU3MCxcclxuICAgICAgICAgICAgeDI6IDc3MCxcclxuICAgICAgICAgICAgeTI6IDg3MCxcclxuICAgIFxyXG4gICAgICAgICAgICBpbWFnZToge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHsgLy8g6KiY5LqLMDkg55S75YOP77yI5bqD5ZGK77yJIFxyXG4gICAgICAgICAgICBib3hfaWQ6IDQyLFxyXG4gICAgICAgICAgICBncm91cF9pZDogJ0swOeeUu+WDjycsXHJcbiAgICAgICAgICAgIGdyb3VwX25vOiAxLFxyXG4gICAgICAgICAgICB0eXBlOiAnaW1hZ2UnLFxyXG4gICAgICAgICAgICB4MTogNzAsXHJcbiAgICAgICAgICAgIHkxOiA4NzUsXHJcbiAgICAgICAgICAgIHgyOiA3NzAsXHJcbiAgICAgICAgICAgIHkyOiAxMTMwLFxyXG4gICAgXHJcbiAgICAgICAgICAgIGltYWdlOiB7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICcnLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICBdLFxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IFByZXNlblNvemFpID0ge1xyXG4gICAgQTogW1xyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc296YWlfaWQ6ICfmnKzmlofjg4bjgrnjg4jnlKgnLFxyXG4gICAgICAgICAgICB0eXBlOiAndGV4dCcsXHJcbiAgICAgICAgICAgIHRleHQ6ICfjgIDnlJ/nlKPlubTpvaLkurrlj6Pjga7muJvlsJHjgoTnrKzvvJTmrKHnlKPmpa3pnanlkb3jgbjjga7lr77lv5zjgarjganjgIHlu7roqK3mpa3jga/lpKfjgY3jgarou6Lmj5vmnJ/jgpLov47jgYjjgabjgYTjgovjgILvvJPmnIjjgavoqK3nq4vvvJfvvJDlkajlubTjgpLov47jgYjjgZ/lhajlm73lu7roqK3mpa3ljZTkvJrjga7ov5Hol6TmmbTosp7kvJrplbfjga/jgIHlnLDln5/lu7roqK3mpa3jgYzlvbnlibLjgpLmnpzjgZ/jgZfntprjgZHjgovjgZ/jgoHjgavjgIHjgIzlg43jgY3mlrnmlLnpnanjgajnlJ/nlKPmgKflkJHkuIrjgavmnpzmlaLjgavmjJHmiKbjgZfjgarjgZHjgozjgbDjgarjgonjgarjgYTjgI3jgajjgZfjgIHjgIzoh6rjgonmlLnpnanjgpLpgLLjgoHjgabjgYTjgY/jgZPjgajjgoLph43opoHjgavjgarjgovjgI3jgajlvLfoqr/jgZnjgovjgILvvJfvvJDlkajlubTjgpLlpZHmqZ/jgavnrZblrprjgZfjgZ/jgIzlnLDln5/lu7roqK3mpa3lsIbmnaXlsZXmnJvjgI3jgavjga/jgIHou6Lmj5vmnJ/jgpLlpInpnanjga7lpb3mqZ/jgavlpInjgYjjgovjgZ/jgoHjga7jgq3jg7zjg6/jg7zjg4njgpLnm5vjgorovrzjgpPjgaDjgILlnLDln5/lu7roqK3mpa3jga7pgLLljJbjgpLlvozmirzjgZfjgZnjgovjgZ/jgoHjgIHlhajlu7rjga/ku4rlvozjgoLlkITlu7roqK3mpa3ljZTkvJrjga7mtLvouo3jgpLlvLflipvjgavmjqjpgLLjgZnjgovjgqjjg7Pjgrjjg7PjgafjgYLjgorntprjgZHjgovjgIJcXG7jgIDov5Hol6TkvJrplbfjga/jgIHlnLDln5/lu7roqK3mpa3jgavmsYLjgoHjgonjgozjgovlvbnlibLjgavjgaTjgYTjgabjgIHjgIzlronlhajjg7vlronlv4Pjga7norrkv53jgaDjgZHjgafjga/jgarjgY/jgIHkvY/msJHjga7liKnkvr/mgKflkJHkuIrjgoTlnLDln5/ntYzmuIjjga7mtLvmgKfljJbjgarjganlpJrlspDjgavjgo/jgZ/jgovjgI3jgajjgZfjgZ/kuIrjgafjgIHjgIzlronlhajjg7vlronlv4Pjga7norrkv53jgajjgYTjgYbliIfjgorlj6PjgaDjgZHjgafjgarjgY/jgIHlsIbmnaXjga7lnLDln5/lu7roqK3mpa3jga7jgYLjgovjgbnjgY3lp7/jgpLorbDoq5bjgZfjgabjgYTjgYvjgarjgZHjgozjgbDjgarjgonjgarjgYTjgI3jgajmjIfmkZjjgZnjgovjgIJcXG7jgIDlsIbmnaXlsZXmnJvjgafjga/jgIHlvLfjgb/jgafjgYLjgovjgIzlnLDln5/lu7roqK3kvIHmpa3lipvjgI3jgpLnlJ/jgYvjgZfjgZ/mlrDmmYLku6Pjga7mp4vnr4njgpLmiZPjgaHlh7rjgZfjgIHjgqTjg7Pjg5Xjg6nogIHmnL3ljJblr77nrZbjgafjga7lt53kuIrmrrXpmo7jgYvjgonjga7lj4LnlLvjgarjganjgIHnqY3mpbXnmoTjgarkuovmpa3mj5DmoYjjgbjjga7lj5bjgorntYTjgb/jgpLvvJHjgaTjga7mlrnlkJHmgKfjgajjgZfjgabnpLrjgZfjgabjgYTjgovjgIJcXG7jgIDoppbnt5rjga7lhYjjgavjgYLjgovjga7jga/jgIHlnLDln5/lu7roqK3mpa3jga7mjIHntprnmoTjgarnmbrlsZXjgafjgYLjgorjgIHov5Hol6TkvJrplbfjga/jgIzoi6XogIXjgYzlhYjjgpLopovpgJrjgZnjgZPjgajjgYzjgafjgY3jgovnkrDlooPjgaXjgY/jgorjga7ln7rnm6TjgpLjgIHlubTphY3jga7mlrnjgIXjgYzjgaTjgY/jgovjgI3jgajjgYTjgYbogIPjgYjjgYzjg5njg7zjgrnjgavjgarjgaPjgabjgYTjgovjgajoqqzmmI7jgZnjgovjgIJcXG7jgIDjgajjga/jgYTjgYjjgIHjgZXjgb7jgZbjgb7jgarmlr3nrZbjgYznq4vmoYjjgZXjgozjgabjgoLjgIHntYzllrbjga7lgaXlhajljJbjgYzjgarjgZHjgozjgbDlrp/nj77jga/pm6PjgZfjgYTjgILlg43jgY3mlrnmlLnpnanjgoTnlJ/nlKPmgKflkJHkuIrjga7ljp/os4fjgajjgarjgovjgIzlgaXlhajjgarntYzllrbjga7ntpnntprjgI3jga7jgZ/jgoHjgavjga/jgIHjgIzku5XkuovjgYzjgYLjgorjgIHku5XkuovjgpLjgZPjgarjgZnkurrjgYzjgYTjgabjgIHliKnmvaTjgYzlh7rjgovjgajjgYTjgYbku5XntYTjgb/jgaXjgY/jgorjgpLjgZfjgarjgZHjgozjgbDjgarjgonjgarjgYTjgI3jgajlvLfoqr/jgZnjgovjgIJcXG7jgIDlhazlhbHkuovmpa3kuojnrpfjga/kuIvjgZLmraLjgb7jgorjga7lgr7lkJHjgYzopovjgonjgozjgabjgYTjgovjgYzjgIHku4rlvozjgoLlv4XopoHjgarku5Xkuovph4/jgpLnorrkv53jgafjgY3jgovjgYvjganjgYbjgYvjgYzlnLDln5/jgZTjgajjgavnlbDjgarjgovnirbms4HkuIvjgafjgIHjgIzjgrfjgrnjg4bjg6Djgarjganjga7jgrXjg53jg7zjg4jjgYzjgarjgZHjgozjgbDjgafjgY3jgarjgYTpg6jliIbjgoLjgYLjgovjgYzjgIHoh6rjgonku5Xkuovph4/jgpLnorrkv53jgZfjgabjgYTjgY/jgajjgYTjgYblj5bjgorntYTjgb/jgoLogIPjgYjjgabjgYTjgY/lv4XopoHjgYzjgYLjgovjgI3jgajjgIHnqY3mpbXmnpzmlaLjgarjg4Hjg6Pjg6zjg7PjgrjjgpLnlJ/jgY3mrovjgorjga7ph43opoHjgaropoHntKDjgavmjJnjgZLjgovjgIJcXG7jgIDlnLDln5/lu7roqK3mpa3jgYzmlrDmmYLku6PjgpLliIfjgorplovjgY/jgZ/jgoHjgavjga/jgIHlhazlhbHkuovmpa3kuojnrpfjga7mjIHntprnmoTjg7vlronlrprnmoTjgarnorrkv53jgYzph43opoHjgarlvbnlibLjgpLmnpzjgZ/jgZnjgYzjgIHjgIzkuojnrpfjga7phY3liIbjgYzkuIDnlarlpKfjgY3jgaroqrLpoYzjgavjgarjgovjgI3jgajjgZfjgIHlnLDln5/lu7roqK3mpa3jgIHkuK3lsI/kvIHmpa3lkJHjgZHjga7kuojnrpfnorrkv53jgavlkJHjgZHjgZ/mtLvli5XjgpLlvJXjgY3ntprjgY3lsZXplovjgZnjgovjgIJcXG7jgIDlg43jgY3mlrnmlLnpnanjgafjga/jgIHkvJrlk6HjgYznj77ooYzjga7kvJHml6Xlrp/nuL7jgpLvvJHml6XlopfjgoTjgZnjgIzkvJHml6XmnIjvvJHvvIvvvIjjg4Tjgq3jgqTjg4Hjg5fjg6njgrnvvInjgI3pgYvli5XjgpLlsZXplovjgZnjgovjgbvjgYvjgIHjgIzljZjkvqHlvJXjgY3kuIrjgZLliIbjgqLjg4Pjg5flrqPoqIDjgI3jgavln7rjgaXjgY3jgIHlhazlhbHlt6XkuovoqK3oqIjlirTli5nljZjkvqHjga7mlLnlrprliIbjgpLkuIvoq4vjgavlj43mmKDjgZnjgovjgZ/jgoHjga7lj5bjgorntYTjgb/jgoLlvrnlupXjgZnjgovjgIJcXG7jgIDlu7roqK3jgq3jg6Pjg6rjgqLjgqLjg4Pjg5fjgrfjgrnjg4bjg6Djgavlr77jgZfjgabjga/jgIHjgIzmioDog73ogIXjga7kv53mnInos4fmoLzjgoTlsLHlirTlrp/nuL7jgpLok4TnqY3jgZnjgovjgZPjgajjgaflh6bpgYfjga7mlLnlloTjgIHmioDog73jga7noJTjgZXjgpPjgavjgaTjgarjgYzjgovjgILlg43jgY3mlrnmlLnpnanjgIHkuK3plbfmnJ/nmoTjgarmi4XjgYTmiYvnorrkv53jga7pnaLjgafjgIHoia/jgYTku5XntYTjgb/jgaDjgajmgJ3jgYbjgI3jgajmnJ/lvoXjgpLlr4TjgZvjgovjgIJcXG7jgIDmlrDjgZ/jgarkuIDmranjgpLouI/jgb/lh7rjgZfjgZ/lhajlu7rjga7ku4rlvozjga7lvbnlibLjgajjgZfjgabov5Hol6TkvJrplbfjga/jgIHlkITlu7rljZTjgajkvJrlk6HkvIHmpa3jgYzmtLvli5XjgZfjgoTjgZnjgYTnkrDlooPjgaXjgY/jgorjgoTjgIHlnLDln5/lu7roqK3mpa3jga7prYXlipvnmbrkv6HjgarjganjgpLmjJnjgZLjgovjgILjgIzlkITlu7rljZTljZjni6zjgafjga/lj5bjgorntYTjgb/jgYzpm6PjgZfjgYTjg4bjg7zjg57jgoToqrLpoYzjgoLjgIHlhajlu7rjgafpm4bntITjgZnjgozjgbDlhajlm73jga7lo7DjgajjgZfjgabnmbrkv6HjgZnjgovjgZPjgajjgYzjgafjgY3jgovjgI3jgajjgZfjgIHlvJXjgY3ntprjgY3jgIzlnLDln5/lu7roqK3mpa3jga7lnLDkvY3lkJHkuIrjgajnmbrlsZXjgavlr4TkuI7jgZfntprjgZHjgabjgYTjgY3jgZ/jgYTjgI3jgajlipvjgpLovrzjgoHjgovjgIInLFxyXG4gICAgICAgICAgICBtb2ppT2JqQXJ5OiBbXSxcclxuICAgICAgICAgICAgaW1hZ2VVcmw6ICcnLFxyXG4gICAgXHJcbiAgICAgICAgICAgIHNlbGVjdDogJycsXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHNvemFpX2lkOiAn55S75YOP44OG44K544OI55SoJyxcclxuICAgICAgICAgICAgdHlwZTogJ2ltYWdlJyxcclxuICAgICAgICAgICAgdGV4dDogJycsXHJcbiAgICAgICAgICAgIG1vamlPYmpBcnk6IFtdLFxyXG4gICAgICAgICAgICBpbWFnZVVybDogJ2ltYWdlL2xheW91dEEuanBnJyxcclxuICAgICAgICB9LFxyXG4gICAgXSxcclxuXHJcbiAgICBCOiBbXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzb3phaV9pZDogJ0swMeOCv+OCpOODiOODqycsXHJcbiAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcclxuICAgICAgICAgICAgdGV4dDogJ+OCouODnuOCvuODs+OCuOODo+ODkeODs1xcbu+8ke+8kO+8kO+8kOS6uuOBruaWsOimj+aOoeeUqFxcbuacieaWmeS8muWToeWil+WKoOOChOOCteODvOODk+OCueaLoeW8teOBpycsXHJcbiAgICAgICAgICAgIG1vamlPYmpBcnk6IFtdLFxyXG4gICAgICAgICAgICBpbWFnZVVybDogJycsXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHNvemFpX2lkOiAnSzAx5pys5paHJyxcclxuICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxyXG4gICAgICAgICAgICB0ZXh0OiAn44CA44Ki44Oe44K+44Oz44K444Oj44OR44Oz44Gv77yV5pyI77yS5pel44CB44Kz44O844Od44Os44O844OI6IG344KE5oqA6KGT6IG344Gq44Gp44Gu6IG356iu44Gr44Gk44GE44Gm44CB5YWo5Zu944Gn77yR77yQ77yQ77yQ5Lq66KaP5qih44Gu5paw6KaP5o6h55So44KS6KGM44GG44Go55m66KGo44GX44Gf44CC77yh772N772B772a772P772O44Gu5pyJ5paZ5Lya5ZOh44Gn44GC44KL44OX44Op44Kk44Og5Lya5ZOh44Gu5aKX5Yqg44KE44CB6Ieq5YuV6Z+z5aOw44K144O844OT44K544CM77yh772M772F772Y772B77yI44Ki44Os44Kv44K177yJ44CN44Gq44Gp44Gu44K144O844OT44K544Gu5ouh5by144Gq44Gp44KS6IOM5pmv44Gr44CB5a++5b+c44GZ44KL5Lq65ZOh44Gu56K65L+d44Gr5LmX44KK5Ye644GZ44CC5o6h55So44Gu5by35YyW44Gr5Ly044GE44CB5p2x5Lqs44O755uu6buS44Gu6aeF5YmN44OT44Or5YaF44Gr44CB44Kq44OV44Kj44K544KS5paw6Kit44GZ44KL44CCXFxu44CA5paw6KaP5o6h55So44Gv44CB77yR77yZ5bm044Gr44GL44GR44Gm6KGM44GG44CC5Lit6YCU5o6h55So44Gu44G744GL44CB5aSn5a2m5Y2S44KE5bCC6ZaA5a2m5qCh5Y2S44KS5a++6LGh44Go44GX44Gf5paw5Y2S5o6h55So44KC6KGM44GG44CC5o6h55So44GZ44KL44Gu44Gv44CB44Kv44Op44Km44OJ44Kz44Oz44OU44Ol44O844OG44Kj44Oz44Kw44Gq44Gp44Gr6YCa44GY44Gf5oqA6KGT6IG344KE44CB44Oe44O844Kx44OG44Kj44Oz44Kw44O76LKh5YuZ44KS5ouF44GG6IG356iu44GM5a++6LGh44Gg44CCXFxu44CA5p2x5Lqs44O755uu6buS44Gr5paw6Kit44GZ44KL44Kq44OV44Kj44K544Gn44Gv44CB44Gd44Gu5pel44Gu5qWt5YuZ5YaF5a6544Gr5ZCI44KP44Gb44Gm5YON44GP5aC05omA44KS6YG45oqe44Gn44GN44KL44KI44GG44Gr44GZ44KL44CC5qmf5a+G5oCn44Gu6auY44GE5ZWG6KuH44Gq44Gp44KC6KGM44GI44KL44KI44GG44CB44OX44Op44Kk44OZ44O844OI44OW44O844K544KC6Kit44GR44KL44CC44Kq44O844Or44K444Kn44Oz44OA44O85ZCR44GR44Gu44OI44Kk44Os44KE44K344Oj44Ov44O844Or44O844Og44CB56S85oud5a6k44KC5YKZ44GI44KL5LqI5a6a44CC5aSa5qeY44Gq5Lq65p2Q44KS5a++6LGh44Gr5o6h55So44KS6YCy44KB44KL44Go44G/44KJ44KM44KL44CCXFxu44CA44Ki44Oe44K+44Oz44K444Oj44OR44Oz44Gu44K444Oj44K544OR44O844O744OB44Oj44Oz56S+6ZW344Gv44CB44CM5pel5pys44Gv77yh772N772B772a772P772O44Gr44Go44Gj44Gm5LiW55WM44Gn44KC5oim55Wl55qE44Gr6YeN6KaB44Gq5Zu944Gu5LiA44Gk44CC55Sf55Sj5oCn44Gu5ZCR5LiK44KE5YON44GN5pa55pS56Z2p44CB44OA44Kk44OQ44O844K344OG44Kj44O844Gu5o6o6YCy44Gr5Y+W44KK57WE44KT44Gn44GE44GP44CN44Go44GX44Gm44GE44KL44CCJyxcclxuICAgICAgICAgICAgbW9qaU9iakFyeTogW10sXHJcbiAgICAgICAgICAgIGltYWdlVXJsOiAnJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc296YWlfaWQ6ICdLMDHnlLvlg48nLFxyXG4gICAgICAgICAgICB0eXBlOiAnaW1hZ2UnLFxyXG4gICAgICAgICAgICB0ZXh0OiAnJyxcclxuICAgICAgICAgICAgbW9qaU9iakFyeTogW10sXHJcbiAgICAgICAgICAgIGltYWdlVXJsOiAnaW1hZ2UvSzFJMS5qcGcnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzb3phaV9pZDogJ0swMee1teino+OBjScsXHJcbiAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcclxuICAgICAgICAgICAgdGV4dDogJ+aWsOOCquODleOCo+OCueOBjOWFpeWxheOBmeOCi+ebrum7kuOCu+ODs+ODiOODqeODq+OCueOCr+OCqOOCoicsXHJcbiAgICAgICAgICAgIG1vamlPYmpBcnk6IFtdLFxyXG4gICAgICAgICAgICBpbWFnZVVybDogJycsXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHNvemFpX2lkOiAnSzAy44K/44Kk44OI44OrJyxcclxuICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxyXG4gICAgICAgICAgICB0ZXh0OiAn44Kq44Kk44K344OD44Kv44K544O744Op44O75aSn5ZywXFxu57WM5Za257Wx5ZCI44G444Gr5paw56S+5ZCN5aSJ5pu0XFxu44Kq44Kk44K344OD44Kv44K544OJ44OD44OI5aSn5ZywJyxcclxuICAgICAgICAgICAgbW9qaU9iakFyeTogW10sXHJcbiAgICAgICAgICAgIGltYWdlVXJsOiAnJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc296YWlfaWQ6ICdLMDLmnKzmlocnLFxyXG4gICAgICAgICAgICB0eXBlOiAndGV4dCcsXHJcbiAgICAgICAgICAgIHRleHQ6ICfjgIDjgqrjgqTjgrfjg4Pjgq/jgrnjg4njg4Pjg4jlpKflnLDjga/jgIHvvJHvvJDmnIjjgavkuojlrprjgZfjgabjgYTjgovjgonjgafjgYPjgaPjgZfjgoXjgbzjg7zjgoTvvIjmnKznpL7mnbHkuqzpg73jgIHpq5jls7blro/lubPnpL7plbfvvInjgajjga7ntYzllrbntbHlkIjjgbjlkJHjgZHjgIHmlrDnpL7lkI3jgpLjgIzjgqrjgqTjgrfjg4Pjgq/jgrnjg7vjg6njg7vlpKflnLDmoKrlvI/kvJrnpL7jgI3jgavjgZnjgovjgZPjgajjgpLmsbrjgoHjgZ/jgIJcXG7jgIDntYzllrbntbHlkIjjgavlhYjpp4bjgZHjgabvvJfmnIjvvJHml6Xku5jjgafnpL7lkI3jgpLlpInmm7TjgILvvJHvvJDmnIjvvJnml6XjgavjgonjgafjgYPjgaPjgZfjgoXjgbzjg7zjgoTnpL7lk6Hjga/jgqrjgqTjgrfjg4Pjgq/jgrnjg7vjg6njg7vlpKflnLDjga7mnKznpL7vvIjlk4Hlt53ljLrlpKfltI7vvInjgavou6LnsY3jgZnjgovjgIInLFxyXG4gICAgICAgICAgICBtb2ppT2JqQXJ5OiBbXSxcclxuICAgICAgICAgICAgaW1hZ2VVcmw6ICcnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzb3phaV9pZDogJ0swM+OCv+OCpOODiOODqycsXHJcbiAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcclxuICAgICAgICAgICAgdGV4dDogJ+alveOAgOOAgOOAgOWkqVxcbuOAjOalveWkqeOCouOCpOODquOCueOAjeOCkumWi+eZulxcbuODk+ODg+OCsOODh+ODvOOCv+OCkuWIhuaekOa0u+eUqCcsXHJcbiAgICAgICAgICAgIG1vamlPYmpBcnk6IFtdLFxyXG4gICAgICAgICAgICBpbWFnZVVybDogJycsXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHNvemFpX2lkOiAnSzAz5pys5paHJyxcclxuICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxyXG4gICAgICAgICAgICB0ZXh0OiAn44CA5qW95aSp44Gv44GT44Gu44G744Gp44CB44OT44OD44Kw44OH44O844K/44KS5YiG5p6Q44GX44Gm5raI6LK76KGM5YuV44KS55CG6Kej44GX44CB44Oe44O844Kx44OG44Kj44Oz44Kw44K944Oq44Ol44O844K344On44Oz44Gr5rS755So44GZ44KL77yh77yp44Ko44O844K444Kn44Oz44OI44CM77yy772B772L772V772U772F772O44CA77yh77yp772S772J772T77yI5qW95aSp44Ki44Kk44Oq44K577yJ44CN44KS6ZaL55m644GX44Gf44CCXFxu44CA44CM5qW95aSp44Ki44Kk44Oq44K544CN44Gv44CB57SE77yZ77yX77yQ77yQ5LiH44Gu5qW95aSp77yp77yk44Go44Gd44KM44Gr5Z+644Gl44GP5raI6LK76KGM5YuV5YiG5p6Q44OH44O844K/44KS44Oe44O844Kx44OG44Kj44Oz44Kw44K944Oq44Ol44O844K344On44Oz44Gr5rS755So44GZ44KL44Gf44KB44CB5qW95aSp5oqA6KGT56CU56m25omA77yI5omA5Zyo5Zyw5p2x5Lqs6YO944CB5qOu5q2j5byl5Luj6KGo77yJ44KE44CB5qW95aSp44Gu44OH44O844K/44K144Kk44Ko44Oz44K56YOo44CB5bqD5ZGK5LqL5qWt44OH44Kj44OT44K444On44Oz44GM5YWx5ZCM44Gn6ZaL55m644GX44Gf44K344K544OG44Og44CCXFxu44CA44CM44Ki44Kk44Oq44K544CN44Gv44CM77yh77yp44CN77yI5Lq65bel55+l6IO977yJ44Go44CB6Iux6Kqe44Gn44CM6Jm55b2p44CN44KS5oSP5ZGz44GZ44KL44CM77yp772S772J772T44CN44KS57WE44G/5ZCI44KP44Gb44Gf6YCg6Kqe44CC5qmf5qKw5a2m57+S44KS55So44GE44Gf54us6Ieq44Gu44Ki44Or44K044Oq44K644Og44Gn5raI6LK76KGM5YuV44KS6Kej5p6Q44GZ44KL44GT44Go44Gn44CB6LO86LK344Gu6KaL6L6844G/44GM44GC44KL44Om44O844K244O844KS5oq95Ye644GZ44KL44GT44Go44GM44Gn44GN44KL54us6Ieq5qmf6IO944KS5pyJ44GX44Gm44GE44KL44CCXFxu44CA5a++6LGh5ZWG5ZOB44Gu6LO86LK35a6f57i+44GM44GC44KL44Om44O844K244O85bGk44Gu5bGe5oCn44OH44O844K/44KE6LO86LK35YK+5ZCR44CB5L6h5qC85YK+5ZCR44CB5qW95aSp44Kw44Or44O844OX44K144O844OT44K55Yip55So5YK+5ZCR44Gq44Gp77yZ77yS77yQ6aCF55uu44Gr5LiK44KL44OH44O844K/44KS5YiG5p6Q44GX44Gm44K544Kz44Ki5YyW44CCXFxu44CA44Oe44OD44OU44Oz44Kw44GZ44KL44GT44Go44Gn44CB6LO86LK35a6f57i+44Gu44Gq44GE44Om44O844K244O844Gn44KC44CM6LO86LK36KaL6L6844G/44Om44O844K244O844CN44Go44GX44Gm5LqI5ris44GX44CB5bqD5ZGK6YWN5L+h44Gr44GK44GE44Gm57K+5bqm44Gu6auY44GE5ouh5by144K/44O844Ky44OG44Kj44Oz44Kw44KS6KGM44GG44GT44Go44GM44Gn44GN44KL44CCJyxcclxuICAgICAgICAgICAgbW9qaU9iakFyeTogW10sXHJcbiAgICAgICAgICAgIGltYWdlVXJsOiAnJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc296YWlfaWQ6ICdLMDTjgr/jgqTjg4jjg6snLFxyXG4gICAgICAgICAgICB0eXBlOiAndGV4dCcsXHJcbiAgICAgICAgICAgIHRleHQ6ICfjgqrjg6vjg5PjgrlcXG7mlrDjgrnjg57jg5vjgqLjg5fjg6rphY3kv6FcXG7phY3pgIHnorroqo3jgoTjgrPjg7Pjg5Pjg4vmlK/miZXjgYTjgoInLFxyXG4gICAgICAgICAgICBtb2ppT2JqQXJ5OiBbXSxcclxuICAgICAgICAgICAgaW1hZ2VVcmw6ICcnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzb3phaV9pZDogJ0swNOacrOaWhycsXHJcbiAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcclxuICAgICAgICAgICAgdGV4dDogJ+OAgOWMlueyp+WTgemAmuiyqeOBruOCquODq+ODk+OCue+8iOacrOekvuadseS6rOmDveOAgeWwj+ael+eQouejqOekvumVt++8ieOBr++8luaciO+8keaXpeOAgeaWsOOBn+OBquOCueODnuODm+OCouODl+ODquOCkueEoeaWmeOBp+mFjeS/oeOBmeOCi+OAguW+k+adpeOBruOCouODl+ODquOBp+S9v+OBiOOCi+ODneOCpOODs+ODiOiThOepjeODu+WIqeeUqOapn+iDveOBq+WKoOOBiOOAgemAmuiyqeOBp+izvOWFpeOBl+OBn+mFjemAgeeKtuazgeOBrueiuuiqjeOChOOAgeOCs+ODs+ODk+ODi+aUr+aJleOBhOOBjOOBp+OBjeOCi+apn+iDveOCkuaQrei8ieOBl+OBn+OAguizvOWFpeOBq+S+v+WIqeOBquapn+iDveOCkuWKoOOBiOOCi+OBk+OBqOOBp+OAgemhp+WuouOBruWIqeS+v+aAp+OCkumrmOOCgeOAgeWjsuOCiuS4iuOBkuWQkeS4iuOCkuWbs+OCiuOBn+OBhOiAg+OBiOOBoOOAglxcbuOAgOOAjO+8r++8su+8ou+8qe+8s+OCouODl+ODquOAjeOBr+OAgemFjemAgeeKtuazgeOBrueiuuiqjeOChOWGjemFjemBlOOBjOS+nemgvOOBp+OBjeOCi+OCouODl+ODquOAjOOCpuOCseODiOODq+OAjeOBqOOAgeOCs+ODs+ODk+ODi+aUr+aJleOBhOOBjOOBp+OBjeOCi+OCouODl+ODquOAjO+8sO+8oe+8ue+8s++8rO+8pe+8iOODmuOCpOOCueODq++8ieOAjeOBruOCteODvOODk+OCueOCkuaQrei8ieOBl+OBpuOBhOOCi+OAglxcbuOAgOOCueODnuODm+OBp+WVhuWTgeOBrumFjemAgeeKtuazgeOBjOeiuuiqjeOBp+OBjeOAgeWVhuWTgeS7o+mHkeOBruaUr+aJleOBhOOBjOihjOOBiOOCi+OAguazqOaWh+OBl+OBn+WVhuWTgeOCkuOCs+ODs+ODk+ODi+OBp+WPl+OBkeWPluOCi+WgtOWQiOOAgembu+WtkOODkOODvOOCs+ODvOODieOCkuOCueODnuODm+OBq+ihqOekuuOBl+OBpuOAgeOCs+ODs+ODk+ODi+W6l+mgreOBp+axuua4iOOBp+OBjeOCi+OAglxcbuOAgOOCs+ODs+ODk+ODi+axuua4iOOBjOOBp+OBjeOCi+OBruOBr++8luaciO+8keaXpeOBi+OCieOBp+OAgeWbveWGheOBruOAjOODn+ODi+OCueODiOODg+ODl+OAje+8iO+8lOaciOacq+ePvuWcqOOBp++8ku+8ku+8lO+8l+W6l++8ieOAgeOAjOOCu+OCpOOCs+ODvOODnuODvOODiOOAje+8iOWQjO+8ke+8ke+8me+8leW6l++8ieOBp+WFiOihjOOBl+OBpuOCteODvOODk+OCueOCkumWi+Wni+OBmeOCi+OAguOBneOBruS7luWkp+aJi+OCs+ODs+ODk+ODi+OBuOOCguWwjuWFpeOBmeOCi+S6iOWumuOBqOOBl+OBpuOBhOOCi+OAglxcbuOAgOOCouODl+ODquOBp+OBr+OBk+OBruOBu+OBi+OAgeWVhuWTgeOCkuaOouOBl+OBpuewoeWNmOOBquOCueODhuODg+ODl+OBp+azqOaWh+OBl+OBn+OCiuOAgee+juWuueeJuembhuiomOS6i+OCkumWsuimp+OBmeOCi+OBk+OBqOOCguWPr+iDveOAguW+k+adpeOBruOCouODl+ODquOBqOWQjOanmOOAgeOCquODq+ODk+ODq+OBruODneOCpOODs+ODiOOCkuOBn+OCgeOBn+OCiuOAgeS9v+eUqOOBl+OBn+OCiuOBmeOCi+OBk+OBqOOCguOBp+OBjeOCi+OAgicsXHJcbiAgICAgICAgICAgIG1vamlPYmpBcnk6IFtdLFxyXG4gICAgICAgICAgICBpbWFnZVVybDogJycsXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHNvemFpX2lkOiAnSzA144K/44Kk44OI44OrJyxcclxuICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxyXG4gICAgICAgICAgICB0ZXh0OiAn44OZ44ON44OV44Kj44OD44OI44Ov44Oz5ZCR44GRXFxu54qs55So44GK44KE44Gk44KS6LKp5aOy6ZaL5aeLXFxu77yl77yj44Ob44O844Or44OH44Kj44Oz44Kw44K5JyxcclxuICAgICAgICAgICAgbW9qaU9iakFyeTogW10sXHJcbiAgICAgICAgICAgIGltYWdlVXJsOiAnJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc296YWlfaWQ6ICdLMDXmnKzmlocnLFxyXG4gICAgICAgICAgICB0eXBlOiAndGV4dCcsXHJcbiAgICAgICAgICAgIHRleHQ6ICfjgIDvvKXvvKPpgYvllrbjgIHpgYvllrbmlK/mj7TjgpLooYzjgYbvvKXvvKPjg5vjg7zjg6vjg4fjgqPjg7PjgrDjgrnvvIjmnKznpL7mnbHkuqzpg73jgIHkupXplqLosrTljZrnpL7plbfvvInjga/vvJXmnIjvvJHvvJDml6XjgIHjg5njg43jg5XjgqPjg4Pjg4jjg7vjg6/jg7PjgYzpgYvllrbjgZnjgovkvJrlk6HliLblhKrlvoXjgrXjg7zjg5PjgrnjgIzjg5njg43jg5XjgqPjg4Pjg4jjg7vjgrnjg4bjg7zjgrfjg6fjg7PjgI3jga7kvJrlk6HlkJHjgZHvvKXvvKPjgrXjgqTjg4jjgIzjg5njg43pgJrosqnjgI3jgafjgIHniqznlKjjgYrjgoTjgaTjg7vjgrXjg5fjg6rjg6Hjg7Pjg4jjg5bjg6njg7Pjg4njgIzvvKPvvYjvvYXvvZLvvYnjgIDvvLfvvKHvvK7jgI3jga7llYblk4Hjga7osqnlo7LjgpLlp4vjgoHjgZ/jgIJcXG7jgIDljp/mnZDmlpnjgoTlm73nlKPjgIHnhKHmt7vliqDjgavjgZPjgaDjgo/jgaPjgZ/niqznlKjoj5PlrZDjgaXjgY/jgorjgajjgrXjg5fjg6rjg6Hjg7Pjg4jjgajjgarjgaPjgabjgYTjgovjgIJcXG7jgIDosqnlo7LllYblk4Hjga/jgIzvvKPvvYjvvYXvvZLvvYnjgIDvvLfvvKHvvK7jgIDvvLDvvKzvvKHvvKPvvKXvvK7vvLTvvKHjgIDvvLfvvKHvvK7vvJPnqK7vvIbnsbPnsonjg5Hjg7PjgrHjg7zjgq3jg5/jg4Pjgq/jgrnjgrvjg4Pjg4jjgI3jgafjgIHpto/jgrXjgrXjg5/jgoTjgr/jg6njgarjganvvJPnqK7jgavliqDjgYjjgabnsbPnsonjg5Hjg7PjgrHjg7zjgq3jg5/jg4Pjgq/jgrnjgYzjgrvjg4Pjg4jjgafjgIHkvqHmoLzjga/vvJPvvJHvvJTvvJDlhobvvIjnqI7mipzvvInjgILkvJrlk6HkvqHmoLzvvJLvvJXvvJLvvJjlhobvvIjnqI7mipzvvInjgIInLFxyXG4gICAgICAgICAgICBtb2ppT2JqQXJ5OiBbXSxcclxuICAgICAgICAgICAgaW1hZ2VVcmw6ICcnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzb3phaV9pZDogJ0swNeeUu+WDjycsXHJcbiAgICAgICAgICAgIHR5cGU6ICdpbWFnZScsXHJcbiAgICAgICAgICAgIHRleHQ6ICcnLFxyXG4gICAgICAgICAgICBtb2ppT2JqQXJ5OiBbXSxcclxuICAgICAgICAgICAgaW1hZ2VVcmw6ICdpbWFnZS9LNUkxLmpwZycsXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHNvemFpX2lkOiAnSzA157W16Kej44GNJyxcclxuICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxyXG4gICAgICAgICAgICB0ZXh0OiAn44CM77yj772I772F772S772J44CA77y377yh77yu44CA77yw77ys77yh77yj77yl77yt77y077yh44CA77y377yh77yu77yT56iu77yG57Gz57KJ44OR44Oz44Kx44O844Kt44Of44OD44Kv44K544K744OD44OI44CNJyxcclxuICAgICAgICAgICAgbW9qaU9iakFyeTogW10sXHJcbiAgICAgICAgICAgIGltYWdlVXJsOiAnJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc296YWlfaWQ6ICdLMDbnlLvlg48nLFxyXG4gICAgICAgICAgICB0eXBlOiAnaW1hZ2UnLFxyXG4gICAgICAgICAgICB0ZXh0OiAnJyxcclxuICAgICAgICAgICAgbW9qaU9iakFyeTogW10sXHJcbiAgICAgICAgICAgIGltYWdlVXJsOiAnaW1hZ2UvSzZJMS5naWYnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzb3phaV9pZDogJ0swNuOCv+OCpOODiOODqycsXHJcbiAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcclxuICAgICAgICAgICAgdGV4dDogJ+acn+acq+mFjeW9k+mHkeOBr++8leWGhicsXHJcbiAgICAgICAgICAgIG1vamlPYmpBcnk6IFtdLFxyXG4gICAgICAgICAgICBpbWFnZVVybDogJycsXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHNvemFpX2lkOiAnSzA25pys5paHJyxcclxuICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxyXG4gICAgICAgICAgICB0ZXh0OiAn4pag77yq77yh77ys77y177y444Gv77yV5pyI77yR77yW5pel44CB77yS77yQ77yR77yY5bm077yT5pyI5pyf44Gu5pyf5pyr6YWN5b2T6YeR44Gr44Gk44GN44CB5bm077yV5YaG5aKX6YWN44GX44CB77yR5qCq77yV77yV5YaG44KS6YWN5b2T44GZ44KL44Go55m66KGo44GX44Gf44CC77yW5pyI77yR77yV5pel6ZaL5YKs44Gu5qCq5Li757eP5Lya44Gr5LuY6K2w44GZ44KL5LqI5a6a44CC44Kk44Oz44OQ44Km44Oz44OJ44Gu5aKX5Yqg44KS6IOM5pmv44Gr44CB5YWI44GU44KN5YWs6KGo44GX44Gf77yR77yY5bm077yT5pyI5pyf44Gu5qWt57i+44GM5aKX5Y+O5aKX55uK44Go5aW96Kq/44Gg44Gj44Gf44GT44Go44GL44KJ5aKX6YWN44Gr6LiP44G/5YiH44Gj44Gf44CC44Gq44GK44CB5b6T5p2l44Gu6YWN5b2T44Gv77yV77yQ5YaG44CCJyxcclxuICAgICAgICAgICAgbW9qaU9iakFyeTogW10sXHJcbiAgICAgICAgICAgIGltYWdlVXJsOiAnJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc296YWlfaWQ6ICdLMDfjgr/jgqTjg4jjg6snLFxyXG4gICAgICAgICAgICB0eXBlOiAndGV4dCcsXHJcbiAgICAgICAgICAgIHRleHQ6ICfjgrfjg6rjgqvjgrXjg5fjg6rliLfmlrAnLFxyXG4gICAgICAgICAgICBtb2ppT2JqQXJ5OiBbXSxcclxuICAgICAgICAgICAgaW1hZ2VVcmw6ICcnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzb3phaV9pZDogJ0swN+acrOaWhycsXHJcbiAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcclxuICAgICAgICAgICAgdGV4dDogJ+KWoOiHqueEtumjn+WTgeOBru+8pe+8o+OCteOCpOODiOOAjOODj+ODg+ODlOODvOODiuODgeODpeODqeODq+OAjeOBquOBqeOCkumBi+WWtuOBmeOCi+ODiuOCq+ODpOODnuOBr++8luaciO+8keaXpeOAgeOCt+ODquOCq++8iOOCseOCpOe0oO+8ieOCkueUqOOBhOOBn+OCteODl+ODquOAjOODj+ODg+ODlOODvOOCt+ODquOCq+OAjeOCkuODquODi+ODpeODvOOCouODq+eZuuWjsuOBmeOCi+OAguacqOadkeW8j+i+suazleexs+OBruOCguOBv+auu+OBi+OCieWPluOCjOOCi+OCt+ODquOCq+OCkuS9v+eUqOOBl+OBpuOBhOOCi+OAgu+8l++8leeorumhnuOBruakjeeJqemFtee0oOOCkuWQjOaZguOBq+aRguWPluOBp+OBjeOCi+OCuOODpeODrOOCv+OCpOODl+OBq+S7leS4iuOBkuOBn+OAguS+oeagvOOBr++8leOCsOODqeODoMOX77yR77yU5YyF5YWl44KK44GM77yT5pys44Gn56iO5Yil77yR5LiH77yS77yQ77yQ77yQ5YaG44CCJyxcclxuICAgICAgICAgICAgbW9qaU9iakFyeTogW10sXHJcbiAgICAgICAgICAgIGltYWdlVXJsOiAnJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc296YWlfaWQ6ICdLMDjnlLvlg48nLFxyXG4gICAgICAgICAgICB0eXBlOiAnaW1hZ2UnLFxyXG4gICAgICAgICAgICB0ZXh0OiAnJyxcclxuICAgICAgICAgICAgbW9qaU9iakFyeTogW10sXHJcbiAgICAgICAgICAgIGltYWdlVXJsOiAnaW1hZ2UvSzhJMS5qcGcnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzb3phaV9pZDogJ0swOeeUu+WDjycsXHJcbiAgICAgICAgICAgIHR5cGU6ICdpbWFnZScsXHJcbiAgICAgICAgICAgIHRleHQ6ICcnLFxyXG4gICAgICAgICAgICBtb2ppT2JqQXJ5OiBbXSxcclxuICAgICAgICAgICAgaW1hZ2VVcmw6ICdpbWFnZS9LOUkxLmpwZycsXHJcbiAgICAgICAgfSxcclxuICAgIF0sXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgUHJlc2VuTGluZSA9IHtcclxuICAgIEE6IFtcclxuXHJcbiAgICBdLFxyXG5cclxuICAgIEI6IFtcclxuICAgICAgICB7IC8vIOaeoFxyXG4gICAgICAgICAgICBpZDogJ2xpbmUwMDEnLFxyXG4gICAgICAgICAgICB0eXBlOiAncmVjdCcsXHJcbiAgICAgICAgICAgIHgxOiA2NSxcclxuICAgICAgICAgICAgeTE6IDY1LFxyXG4gICAgICAgICAgICB4MjogNzc1LFxyXG4gICAgICAgICAgICB5MjogMTE0MixcclxuICAgIFxyXG4gICAgICAgICAgICB3aWR0aDogMC41LFxyXG4gICAgICAgICAgICBjb2xvcjogJyMwMDAwMDAnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgeyAvLyDjgZPjgZPjgYvjgonnuKbnt5pcclxuICAgICAgICAgICAgaWQ6ICdsaW5lMDAyJyxcclxuICAgICAgICAgICAgdHlwZTogJ2xpbmUnLFxyXG4gICAgICAgICAgICB4MTogNDQ1LFxyXG4gICAgICAgICAgICB5MTogODAsXHJcbiAgICAgICAgICAgIHgyOiA0NDUsXHJcbiAgICAgICAgICAgIHkyOiAzNjAsXHJcbiAgICBcclxuICAgICAgICAgICAgd2lkdGg6IDEsXHJcbiAgICAgICAgICAgIGNvbG9yOiAnIzAwMDAwMCcsXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAnbGluZTAwMycsXHJcbiAgICAgICAgICAgIHR5cGU6ICdsaW5lJyxcclxuICAgICAgICAgICAgeDE6IDM0MCxcclxuICAgICAgICAgICAgeTE6IDI4MCxcclxuICAgICAgICAgICAgeDI6IDM0MCxcclxuICAgICAgICAgICAgeTI6IDU2MCxcclxuICAgIFxyXG4gICAgICAgICAgICB3aWR0aDogMSxcclxuICAgICAgICAgICAgY29sb3I6ICcjMDAwMDAwJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6ICdsaW5lMDA0JyxcclxuICAgICAgICAgICAgdHlwZTogJ2xpbmUnLFxyXG4gICAgICAgICAgICB4MTogMTM1LFxyXG4gICAgICAgICAgICB5MTogNDgwLFxyXG4gICAgICAgICAgICB4MjogMTM1LFxyXG4gICAgICAgICAgICB5MjogNjYwLFxyXG4gICAgXHJcbiAgICAgICAgICAgIHdpZHRoOiAwLjUsXHJcbiAgICAgICAgICAgIGNvbG9yOiAnIzAwMDAwMCcsXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAnbGluZTAwNScsXHJcbiAgICAgICAgICAgIHR5cGU6ICdsaW5lJyxcclxuICAgICAgICAgICAgeDE6IDI1MCxcclxuICAgICAgICAgICAgeTE6IDU4MCxcclxuICAgICAgICAgICAgeDI6IDI1MCxcclxuICAgICAgICAgICAgeTI6IDY2MCxcclxuICAgIFxyXG4gICAgICAgICAgICB3aWR0aDogMC41LFxyXG4gICAgICAgICAgICBjb2xvcjogJyMwMDAwMDAnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogJ2xpbmUwMDYnLFxyXG4gICAgICAgICAgICB0eXBlOiAnbGluZScsXHJcbiAgICAgICAgICAgIHgxOiA1OTAsXHJcbiAgICAgICAgICAgIHkxOiA1ODAsXHJcbiAgICAgICAgICAgIHgyOiA1OTAsXHJcbiAgICAgICAgICAgIHkyOiA4NjAsXHJcbiAgICBcclxuICAgICAgICAgICAgd2lkdGg6IDAuNSxcclxuICAgICAgICAgICAgY29sb3I6ICcjMDAwMDAwJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6ICdsaW5lMDA3JyxcclxuICAgICAgICAgICAgdHlwZTogJ2xpbmUnLFxyXG4gICAgICAgICAgICB4MTogNTkzLFxyXG4gICAgICAgICAgICB5MTogNTgwLFxyXG4gICAgICAgICAgICB4MjogNTkzLFxyXG4gICAgICAgICAgICB5MjogODYwLFxyXG4gICAgXHJcbiAgICAgICAgICAgIHdpZHRoOiAwLjUsXHJcbiAgICAgICAgICAgIGNvbG9yOiAnIzAwMDAwMCcsXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7IC8vIOOBk+OBk+OBi+OCieaoque3mlxyXG4gICAgICAgICAgICBpZDogJ2xpbmUwMDgnLFxyXG4gICAgICAgICAgICB0eXBlOiAnbGluZScsXHJcbiAgICAgICAgICAgIHgxOiAxNTUsXHJcbiAgICAgICAgICAgIHkxOiAxNzAsXHJcbiAgICAgICAgICAgIHgyOiAyNDAsXHJcbiAgICAgICAgICAgIHkyOiAxNzAsXHJcbiAgICBcclxuICAgICAgICAgICAgd2lkdGg6IDAuNSxcclxuICAgICAgICAgICAgY29sb3I6ICcjMDAwMDAwJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6ICdsaW5lMDA5JyxcclxuICAgICAgICAgICAgdHlwZTogJ2xpbmUnLFxyXG4gICAgICAgICAgICB4MTogNDU1LFxyXG4gICAgICAgICAgICB5MTogMTcwLFxyXG4gICAgICAgICAgICB4MjogNzY1LFxyXG4gICAgICAgICAgICB5MjogMTcwLFxyXG4gICAgXHJcbiAgICAgICAgICAgIHdpZHRoOiAwLjUsXHJcbiAgICAgICAgICAgIGNvbG9yOiAnIzAwMDAwMCcsXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAnbGluZTAxMCcsXHJcbiAgICAgICAgICAgIHR5cGU6ICdsaW5lJyxcclxuICAgICAgICAgICAgeDE6IDE1NSxcclxuICAgICAgICAgICAgeTE6IDI3MCxcclxuICAgICAgICAgICAgeDI6IDQzNSxcclxuICAgICAgICAgICAgeTI6IDI3MCxcclxuICAgIFxyXG4gICAgICAgICAgICB3aWR0aDogMC41LFxyXG4gICAgICAgICAgICBjb2xvcjogJyMwMDAwMDAnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogJ2xpbmUwMTEnLFxyXG4gICAgICAgICAgICB0eXBlOiAnbGluZScsXHJcbiAgICAgICAgICAgIHgxOiA0NTUsXHJcbiAgICAgICAgICAgIHkxOiAyNzAsXHJcbiAgICAgICAgICAgIHgyOiA3NjUsXHJcbiAgICAgICAgICAgIHkyOiAyNzAsXHJcbiAgICBcclxuICAgICAgICAgICAgd2lkdGg6IDAuNSxcclxuICAgICAgICAgICAgY29sb3I6ICcjMDAwMDAwJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6ICdsaW5lMDEyJyxcclxuICAgICAgICAgICAgdHlwZTogJ2xpbmUnLFxyXG4gICAgICAgICAgICB4MTogODAsXHJcbiAgICAgICAgICAgIHkxOiAzNzAsXHJcbiAgICAgICAgICAgIHgyOiAzMzAsXHJcbiAgICAgICAgICAgIHkyOiAzNzAsXHJcbiAgICBcclxuICAgICAgICAgICAgd2lkdGg6IDAuNSxcclxuICAgICAgICAgICAgY29sb3I6ICcjMDAwMDAwJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6ICdsaW5lMDEzJyxcclxuICAgICAgICAgICAgdHlwZTogJ2xpbmUnLFxyXG4gICAgICAgICAgICB4MTogNDI1LFxyXG4gICAgICAgICAgICB5MTogMzcwLFxyXG4gICAgICAgICAgICB4MjogNzY1LFxyXG4gICAgICAgICAgICB5MjogMzcwLFxyXG4gICAgXHJcbiAgICAgICAgICAgIHdpZHRoOiAwLjUsXHJcbiAgICAgICAgICAgIGNvbG9yOiAnIzAwMDAwMCcsXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAnbGluZTAxNCcsXHJcbiAgICAgICAgICAgIHR5cGU6ICdsaW5lJyxcclxuICAgICAgICAgICAgeDE6IDgwLFxyXG4gICAgICAgICAgICB5MTogNDcwLFxyXG4gICAgICAgICAgICB4MjogMzMwLFxyXG4gICAgICAgICAgICB5MjogNDcwLFxyXG4gICAgXHJcbiAgICAgICAgICAgIHdpZHRoOiAwLjUsXHJcbiAgICAgICAgICAgIGNvbG9yOiAnIzAwMDAwMCcsXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAnbGluZTAxNScsXHJcbiAgICAgICAgICAgIHR5cGU6ICdsaW5lJyxcclxuICAgICAgICAgICAgeDE6IDM1MCxcclxuICAgICAgICAgICAgeTE6IDQ3MCxcclxuICAgICAgICAgICAgeDI6IDc2NSxcclxuICAgICAgICAgICAgeTI6IDQ3MCxcclxuICAgIFxyXG4gICAgICAgICAgICB3aWR0aDogMC41LFxyXG4gICAgICAgICAgICBjb2xvcjogJyMwMDAwMDAnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogJ2xpbmUwMTYnLFxyXG4gICAgICAgICAgICB0eXBlOiAnbGluZScsXHJcbiAgICAgICAgICAgIHgxOiA4MCxcclxuICAgICAgICAgICAgeTE6IDU3MCxcclxuICAgICAgICAgICAgeDI6IDEyMCxcclxuICAgICAgICAgICAgeTI6IDU3MCxcclxuICAgIFxyXG4gICAgICAgICAgICB3aWR0aDogMC41LFxyXG4gICAgICAgICAgICBjb2xvcjogJyMwMDAwMDAnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogJ2xpbmUwMTcnLFxyXG4gICAgICAgICAgICB0eXBlOiAnbGluZScsXHJcbiAgICAgICAgICAgIHgxOiAxNTAsXHJcbiAgICAgICAgICAgIHkxOiA1NzAsXHJcbiAgICAgICAgICAgIHgyOiA3NjUsXHJcbiAgICAgICAgICAgIHkyOiA1NzAsXHJcbiAgICBcclxuICAgICAgICAgICAgd2lkdGg6IDAuNSxcclxuICAgICAgICAgICAgY29sb3I6ICcjMDAwMDAwJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6ICdsaW5lMDE4JyxcclxuICAgICAgICAgICAgdHlwZTogJ2xpbmUnLFxyXG4gICAgICAgICAgICB4MTogODAsXHJcbiAgICAgICAgICAgIHkxOiA2NzAsXHJcbiAgICAgICAgICAgIHgyOiAzNjAsXHJcbiAgICAgICAgICAgIHkyOiA2NzAsXHJcbiAgICBcclxuICAgICAgICAgICAgd2lkdGg6IDAuNSxcclxuICAgICAgICAgICAgY29sb3I6ICcjMDAwMDAwJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6ICdsaW5lMDE5JyxcclxuICAgICAgICAgICAgdHlwZTogJ2xpbmUnLFxyXG4gICAgICAgICAgICB4MTogODAsXHJcbiAgICAgICAgICAgIHkxOiA3NzAsXHJcbiAgICAgICAgICAgIHgyOiA1ODUsXHJcbiAgICAgICAgICAgIHkyOiA3NzAsXHJcbiAgICBcclxuICAgICAgICAgICAgd2lkdGg6IDAuNSxcclxuICAgICAgICAgICAgY29sb3I6ICcjMDAwMDAwJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6ICdsaW5lMDIwJyxcclxuICAgICAgICAgICAgdHlwZTogJ2xpbmUnLFxyXG4gICAgICAgICAgICB4MTogODAsXHJcbiAgICAgICAgICAgIHkxOiA4NzAsXHJcbiAgICAgICAgICAgIHgyOiA3NjUsXHJcbiAgICAgICAgICAgIHkyOiA4NzAsXHJcbiAgICBcclxuICAgICAgICAgICAgd2lkdGg6IDAuNSxcclxuICAgICAgICAgICAgY29sb3I6ICcjMDAwMDAwJyxcclxuICAgICAgICB9LFxyXG4gICAgXSxcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBQcmVzZW5MaW5rID0ge1xyXG4gICAgQjogW1xyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ3JvdXBfaWQ6ICdLMDHjgr/jgqTjg4jjg6snLFxyXG4gICAgICAgICAgICBzb3phaV9pZDogJ0swMeOCv+OCpOODiOODqycsXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdyb3VwX2lkOiAnSzAx5pys5paHJyxcclxuICAgICAgICAgICAgc296YWlfaWQ6ICdLMDHmnKzmlocnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBncm91cF9pZDogJ0swMeeUu+WDjycsXHJcbiAgICAgICAgICAgIHNvemFpX2lkOiAnSzAx55S75YOPJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ3JvdXBfaWQ6ICdLMDHntbXop6PjgY0nLFxyXG4gICAgICAgICAgICBzb3phaV9pZDogJ0swMee1teino+OBjScsXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBncm91cF9pZDogJ0swMuOCv+OCpOODiOODqycsXHJcbiAgICAgICAgICAgIHNvemFpX2lkOiAnSzAy44K/44Kk44OI44OrJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ3JvdXBfaWQ6ICdLMDLmnKzmlocnLFxyXG4gICAgICAgICAgICBzb3phaV9pZDogJ0swMuacrOaWhycsXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdyb3VwX2lkOiAnSzAy55S75YOPJyxcclxuICAgICAgICAgICAgc296YWlfaWQ6ICdLMDLnlLvlg48nLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBncm91cF9pZDogJ0swMue1teino+OBjScsXHJcbiAgICAgICAgICAgIHNvemFpX2lkOiAnSzAy57W16Kej44GNJyxcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdyb3VwX2lkOiAnSzAz44K/44Kk44OI44OrJyxcclxuICAgICAgICAgICAgc296YWlfaWQ6ICdLMDPjgr/jgqTjg4jjg6snLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBncm91cF9pZDogJ0swM+acrOaWhycsXHJcbiAgICAgICAgICAgIHNvemFpX2lkOiAnSzAz5pys5paHJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ3JvdXBfaWQ6ICdLMDPnlLvlg48nLFxyXG4gICAgICAgICAgICBzb3phaV9pZDogJ0swM+eUu+WDjycsXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdyb3VwX2lkOiAnSzAz57W16Kej44GNJyxcclxuICAgICAgICAgICAgc296YWlfaWQ6ICdLMDPntbXop6PjgY0nLFxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ3JvdXBfaWQ6ICdLMDTjgr/jgqTjg4jjg6snLFxyXG4gICAgICAgICAgICBzb3phaV9pZDogJ0swNOOCv+OCpOODiOODqycsXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdyb3VwX2lkOiAnSzA05pys5paHJyxcclxuICAgICAgICAgICAgc296YWlfaWQ6ICdLMDTmnKzmlocnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBncm91cF9pZDogJ0swNOeUu+WDjycsXHJcbiAgICAgICAgICAgIHNvemFpX2lkOiAnSzA055S75YOPJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ3JvdXBfaWQ6ICdLMDTntbXop6PjgY0nLFxyXG4gICAgICAgICAgICBzb3phaV9pZDogJ0swNOe1teino+OBjScsXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBncm91cF9pZDogJ0swNeOCv+OCpOODiOODqycsXHJcbiAgICAgICAgICAgIHNvemFpX2lkOiAnSzA144K/44Kk44OI44OrJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ3JvdXBfaWQ6ICdLMDXmnKzmlocnLFxyXG4gICAgICAgICAgICBzb3phaV9pZDogJ0swNeacrOaWhycsXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdyb3VwX2lkOiAnSzA155S75YOPJyxcclxuICAgICAgICAgICAgc296YWlfaWQ6ICdLMDXnlLvlg48nLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBncm91cF9pZDogJ0swNee1teino+OBjScsXHJcbiAgICAgICAgICAgIHNvemFpX2lkOiAnSzA157W16Kej44GNJyxcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdyb3VwX2lkOiAnSzA244K/44Kk44OI44OrJyxcclxuICAgICAgICAgICAgc296YWlfaWQ6ICdLMDbjgr/jgqTjg4jjg6snLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBncm91cF9pZDogJ0swNuacrOaWhycsXHJcbiAgICAgICAgICAgIHNvemFpX2lkOiAnSzA25pys5paHJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ3JvdXBfaWQ6ICdLMDbnlLvlg48nLFxyXG4gICAgICAgICAgICBzb3phaV9pZDogJ0swNueUu+WDjycsXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdyb3VwX2lkOiAnSzA257W16Kej44GNJyxcclxuICAgICAgICAgICAgc296YWlfaWQ6ICdLMDbntbXop6PjgY0nLFxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ3JvdXBfaWQ6ICdLMDfjgr/jgqTjg4jjg6snLFxyXG4gICAgICAgICAgICBzb3phaV9pZDogJ0swN+OCv+OCpOODiOODqycsXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdyb3VwX2lkOiAnSzA35pys5paHJyxcclxuICAgICAgICAgICAgc296YWlfaWQ6ICdLMDfmnKzmlocnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBncm91cF9pZDogJ0swN+eUu+WDjycsXHJcbiAgICAgICAgICAgIHNvemFpX2lkOiAnSzA355S75YOPJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ3JvdXBfaWQ6ICdLMDfntbXop6PjgY0nLFxyXG4gICAgICAgICAgICBzb3phaV9pZDogJ0swN+e1teino+OBjScsXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBncm91cF9pZDogJ0swOOOCv+OCpOODiOODqycsXHJcbiAgICAgICAgICAgIHNvemFpX2lkOiAnSzA444K/44Kk44OI44OrJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ3JvdXBfaWQ6ICdLMDjmnKzmlocnLFxyXG4gICAgICAgICAgICBzb3phaV9pZDogJ0swOOacrOaWhycsXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdyb3VwX2lkOiAnSzA455S75YOPJyxcclxuICAgICAgICAgICAgc296YWlfaWQ6ICdLMDjnlLvlg48nLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBncm91cF9pZDogJ0swOOe1teino+OBjScsXHJcbiAgICAgICAgICAgIHNvemFpX2lkOiAnSzA457W16Kej44GNJyxcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdyb3VwX2lkOiAnSzA544K/44Kk44OI44OrJyxcclxuICAgICAgICAgICAgc296YWlfaWQ6ICdLMDnjgr/jgqTjg4jjg6snLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBncm91cF9pZDogJ0swOeacrOaWhycsXHJcbiAgICAgICAgICAgIHNvemFpX2lkOiAnSzA55pys5paHJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ3JvdXBfaWQ6ICdLMDnnlLvlg48nLFxyXG4gICAgICAgICAgICBzb3phaV9pZDogJ0swOeeUu+WDjycsXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdyb3VwX2lkOiAnSzA557W16Kej44GNJyxcclxuICAgICAgICAgICAgc296YWlfaWQ6ICdLMDnntbXop6PjgY0nLFxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgXSxcclxufTtcclxuIiwiLy8gNy4xLjE1IFRvTGVuZ3RoXG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID4gMCA/IG1pbih0b0ludGVnZXIoaXQpLCAweDFmZmZmZmZmZmZmZmZmKSA6IDA7IC8vIHBvdygyLCA1MykgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBkUCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZFAoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkIScpO1xuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwiLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCIvLyDluqfmqJnns7vjga7jg6njgqTjg5bjg6njg6pcclxuXHJcbmV4cG9ydCBjb25zdCBaYWh5byA9IHtcclxuICAgIC8vIOOCpuOCo+ODs+ODieOCpuOCteOCpOOCuu+8iOW5heOAgemrmOOBle+8ieOCkui/lOOBmVxyXG4gICAgd2luZG93QXJlYTogKCkgPT4ge1xyXG4gICAgICAgIGxldCByZXQ7XHJcblxyXG4gICAgICAgIHJldCA9IHtcclxuICAgICAgICAgICAgdzogZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoLFxyXG4gICAgICAgICAgICBoOiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0LFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiByZXQ7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIOW3puS4iuOCkuWfuueCueOBqOOBmeOCi+W6p+aomVjjgYzjgIHlj7PkuIrjgpLln7rngrnjgajjgZfjgZ/loLTlkIjjgYTjgY/jgaTjgavjgarjgovjgYvjgpLov5TjgZlcclxuICAgIGx1VG9ydVg6ICh4LCBrdykgPT4ge1xyXG4gICAgICAgIHJldHVybiBrdyAtIHg7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIOW3puS4iuOCkuWfuueCueOBqOOBmeOCi+W6p+aomVnjgYzjgIHlj7PkuIrjgpLln7rngrnjgajjgZfjgZ/loLTlkIjjgYTjgY/jgaTjgavjgarjgovjgYvjgpLov5TjgZlcclxuICAgIGx1VG9ydVk6ICh5LCBraCkgPT4ge1xyXG4gICAgICAgIHJldHVybiB5O1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyDlj7PkuIrjgpLln7rngrnjgajjgZnjgovluqfmqJlY44GM44CB5bem5LiK44KS5Z+654K544Go44GX44Gf5aC05ZCI44GE44GP44Gk44Gr44Gq44KL44GL44KS6L+U44GZXHJcbiAgICBydVRvbHVYOiAoeCwga3cpID0+IHtcclxuICAgICAgICByZXR1cm4ga3cgLSB4O1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyDlj7PkuIrjgpLln7rngrnjgajjgZnjgovluqfmqJlZ44GM44CB5bem5LiK44KS5Z+654K544Go44GX44Gf5aC05ZCI44GE44GP44Gk44Gr44Gq44KL44GL44KS6L+U44GZXHJcbiAgICBydVRvbHVZOiAoeSwga2gpID0+IHtcclxuICAgICAgICByZXR1cm4geTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8g5bem5LiK5bqn5qiZ44Go5Y+z5LiL5bqn5qiZ77yI5bem5LiK5Z+654K544Gu5aC05ZCI77yJ44G+44Gf44Gv5Y+z5LiK5bqn5qiZ44Go5bem5LiL5bqn5qiZ77yI5Y+z5LiK5Z+654K544Gu5aC05ZCI77yJXHJcbiAgICAvLyDjgpLjgIHln7rngrlYWeOBqOW5heODu+mrmOOBleOBq+WkieaPm+OBl+OBpui/lOOBmVxyXG4gICAgY2hhbmdlUmVjdFRvQXJlYTogKHgxLCB5MSwgeDIsIHkyKSA9PiB7XHJcbiAgICAgICAgbGV0IHJlY3QgPSB7fTtcclxuXHJcbiAgICAgICAgcmVjdC54ID0geDE7XHJcbiAgICAgICAgcmVjdC55ID0geTE7XHJcbiAgICAgICAgcmVjdC53ID0geDIgLSB4MTtcclxuICAgICAgICByZWN0LmggPSB5MiAtIHkxO1xyXG5cclxuICAgICAgICByZXR1cm4gcmVjdDtcclxuICAgIH0sXHJcblxyXG4gICAgLy8g5bem5LiK5bqn5qiZ77yI5bem5LiK5Z+654K544Gu5aC05ZCI77yJ44G+44Gf44Gv5Y+z5LiK5bqn5qiZ77yI5Y+z5LiK5Z+654K544Gu5aC05ZCI77yJ44Go5bmF44O76auY44GVXHJcbiAgICAvLyDjgpLjgIHlt6bkuIrluqfmqJnjgajlj7PkuIvluqfmqJnvvIjlt6bkuIrln7rngrnjga7loLTlkIjvvInjgb7jgZ/jga/lj7PkuIrluqfmqJnjgajlt6bkuIvluqfmqJnvvIjlj7PkuIrln7rngrnjga7loLTlkIjvvInjgatcclxuICAgIC8vIOWkieaPm+OBl+OBpui/lOOBmVxyXG4gICAgY2hhbmdlQXJlYVRvUmVjdDogKHgsIHksIHcsIGgpID0+IHtcclxuICAgICAgICBsZXQgcmVjdCA9IHt9O1xyXG5cclxuICAgICAgICByZWN0LngxID0geDtcclxuICAgICAgICByZWN0LnkxID0geTtcclxuICAgICAgICByZWN0LngyID0geCArIHc7XHJcbiAgICAgICAgcmVjdC55MiA9IHkgKyBoO1xyXG5cclxuICAgICAgICByZXR1cm4gcmVjdDtcclxuICAgIH0sXHJcblxyXG4gICAgLy8g5bem5LiK44KS5Z+654K544Go44GZ44KL5bem5LiK5bqn5qiZ44Go5Y+z5LiL5bqn5qiZ44KS44CB5Y+z5LiK44KS5Z+654K544Go44GZ44KL5Y+z5LiK5bqn5qiZ44Go5bem5LiL5bqn5qiZ44Gr5aSJ5o+b44GZ44KLXHJcbiAgICBsdVRvcnVSZWN0OiAoeDEsIHkxLCB4MiwgeTIsIGt3LCBraCkgPT4ge1xyXG4gICAgICAgIGxldCByZWN0ID0ge31cclxuXHJcbiAgICAgICAgcmVjdC54MSA9IFphaHlvLmx1VG9ydVgoeDIsIGt3KTtcclxuICAgICAgICByZWN0LnkxID0gWmFoeW8ubHVUb3J1WSh5MSwga2gpO1xyXG4gICAgICAgIHJlY3QueDIgPSBaYWh5by5sdVRvcnVYKHgxLCBrdyk7XHJcbiAgICAgICAgcmVjdC55MiA9IFphaHlvLmx1VG9ydVgoeTIsIGtoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHJlY3Q7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIOWPs+S4iuOCkuWfuueCueOBqOOBmeOCi+WPs+S4iuW6p+aomeOBqOW3puS4i+W6p+aomeOCkuOAgeW3puS4iuWfuueCueOBqOOBmeOCi+W3puS4iuW6p+aomeOBqOWPs+S4i+W6p+aomeOBq+WkieaPm+OBmeOCi1xyXG4gICAgcnVUb2x1UmVjdDogKHgxLCB5MSwgeDIsIHkyLCBrdywga2gpID0+IHtcclxuICAgICAgICBsZXQgcmVjdCA9IHt9O1xyXG5cclxuICAgICAgICByZWN0LngxID0gWmFoeW8ucnVUb2x1WCh4Miwga3cpO1xyXG4gICAgICAgIHJlY3QueTEgPSBaYWh5by5ydVRvbHVZKHkxLCBraCk7XHJcbiAgICAgICAgcmVjdC54MiA9IFphaHlvLnJ1VG9sdVgoeDEsIGt3KTtcclxuICAgICAgICByZWN0LnkyID0gWmFoeW8ucnVUb2x1WSh5Miwga2gpO1xyXG5cclxuICAgICAgICByZXR1cm4gcmVjdDtcclxuICAgIH0sXHJcblxyXG4gICAgLy8g5bem5LiK44KS5Z+654K544Go44GZ44KL5bem5LiK5bqn5qiZ44Go5bmF44O76auY44GV44KS44CB5Y+z5LiK44KS5Z+654K544Go44GZ44KL5Y+z5LiK5bqn5qiZ44Go5bmF44O76auY44GV44Gr5aSJ5o+b44GZ44KLXHJcbiAgICBsdVRvcnVBcmVhOiAoeCwgeSwgdywgaCwga3csIGtoKSA9PiB7XHJcbiAgICAgICAgbGV0IGFyZWEgPSB7fTtcclxuXHJcbiAgICAgICAgYXJlYS54ID0gWmFoeW8ubHVUb3J1WCh4ICsgdywga3cpO1xyXG4gICAgICAgIGFyZWEueSA9IFphaHlvLmx1VG9ydVkoeSwga2gpO1xyXG4gICAgICAgIGFyZWEudyA9IHc7XHJcbiAgICAgICAgYXJlYS5oID0gaDtcclxuXHJcbiAgICAgICAgcmV0dXJuIGFyZWE7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIOWPs+S4iuOCkuWfuueCueOBqOOBmeOCi+WPs+S4iuW6p+aomeOBqOW5heODu+mrmOOBleOCkuOAgeW3puS4iuOCkuWfuueCueOBqOOBmeOCi+W3puS4iuW6p+aomeOBqOW5heODu+mrmOOBleOBq+WkieaPm+OBmeOCi1xyXG4gICAgcnVUb2x1QXJlYTogKHgsIHksIHcsIGgsIGt3LCBraCkgPT4ge1xyXG4gICAgICAgIGxldCBhcmVhID0ge307XHJcblxyXG4gICAgICAgIGFyZWEueCA9IFphaHlvLnJ1VG9sdVgoeCArIHcsIGt3KTtcclxuICAgICAgICBhcmVhLnkgPSBaYWh5by5ydVRvbHVZKHksIGtoKTtcclxuICAgICAgICBhcmVhLncgPSB3O1xyXG4gICAgICAgIGFyZWEuaCA9IGg7XHJcblxyXG4gICAgICAgIHJldHVybiBhcmVhO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyDlt6bkuIrjgpLln7rngrnjgajjgZnjgovlt6bkuIrluqfmqJnjgajlj7PkuIvluqfmqJnjgpLjgIHlj7PkuIrjgpLln7rngrnjgajjgZnjgovlj7PkuIrluqfmqJnjgajluYXjg7vpq5jjgZXjgavlpInmj5vjgZnjgotcclxuICAgIGx1VG9ydVJlY3RUb0FyZWE6ICh4MSwgeTEsIHgyLCB5Miwga3csIGtoKSA9PiB7XHJcbiAgICAgICAgbGV0IGFyZWEgPSB7fTtcclxuXHJcbiAgICAgICAgYXJlYS54ID0gWmFoeW8ubHVUb3J1WCh4Miwga3cpO1xyXG4gICAgICAgIGFyZWEueSA9IFphaHlvLmx1VG9ydVkoeTEsIGtoKTtcclxuICAgICAgICBhcmVhLncgPSB4MiAtIHgxO1xyXG4gICAgICAgIGFyZWEuaCA9IHkyIC0geTE7XHJcblxyXG4gICAgICAgIHJldHVybiBhcmVhO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyDlj7PkuIrjgpLln7rngrnjgajjgZnjgovlj7PkuIrluqfmqJnjgajlt6bkuIvluqfmqJnjgpLjgIHlt6bkuIrjgpLln7rngrnjgajjgZnjgovlt6bkuIrluqfmqJnjgajluYXjg7vpq5jjgZXjgavlpInmj5vjgZnjgotcclxuICAgIHJ1VG9sdVJlY3RUb0FyZWE6ICh4MSwgeTEsIHgyLCB5Miwga3csIGtoKSA9PiB7XHJcbiAgICAgICAgbGV0IGFyZWEgPSB7fTtcclxuXHJcbiAgICAgICAgYXJlYS54ID0gWmFoeW8ucnVUb2x1WCh4Miwga3cpO1xyXG4gICAgICAgIGFyZWEueSA9IFphaHlvLnJ1VG9sdVkoeTEsIGtoKTtcclxuICAgICAgICBhcmVhLncgPSB4MiAtIHgxO1xyXG4gICAgICAgIGFyZWEuaCA9IHkyIC0geTE7XHJcblxyXG4gICAgICAgIHJldHVybiBhcmVhO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyDlt6bkuIrjgpLln7rngrnjgajjgZnjgovlt6bkuIrluqfmqJnjgajluYXjg7vpq5jjgZXjgpLjgIHlj7PkuIrjgpLln7rngrnjgajjgZnjgovlj7PkuIrluqfmqJnjgajlt6bkuIvluqfmqJnjgavlpInmj5vjgZnjgotcclxuICAgIGx1VG9ydUFyZWFUb1JlY3Q6ICh4LCB5LCB3LCBoLCBrdywga2gpID0+IHtcclxuICAgICAgICBsZXQgcmVjdCA9IHt9O1xyXG5cclxuICAgICAgICByZWN0LngxID0gWmFoeW8ubHVUb3J1WCh4ICsgdywga3cpO1xyXG4gICAgICAgIHJlY3QueTEgPSBaYWh5by5sdVRvcnVZKHksIGtoKTtcclxuICAgICAgICByZWN0LngyID0gWmFoeW8ubHVUb3J1WCh4LCBrdyk7XHJcbiAgICAgICAgcmVjdC55MiA9IFphaHlvLmx1VG9ydVkoeSArIGgsIGtoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHJlY3Q7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIOWPs+S4iuOCkuWfuueCueOBqOOBmeOCi+WPs+S4iuW6p+aomeOBqOW5heODu+mrmOOBleOCkuOAgeW3puS4iuOCkuWfuueCueOBqOOBmeOCi+W3puS4iuW6p+aomeOBqOWPs+S4i+W6p+aomeOBq+WkieaPm+OBmeOCi1xyXG4gICAgcnVUb2x1QXJlYVRvUmVjdDogKHgsIHksIHcsIGgsIGt3LCBraCkgPT4ge1xyXG4gICAgICAgIGxldCByZWN0ID0ge307XHJcblxyXG4gICAgICAgIHJlY3QueDEgPSBaYWh5by5ydVRvbHVYKHggKyB3LCBrdyk7XHJcbiAgICAgICAgcmVjdC55MSA9IFphaHlvLnJ1VG9sdVkoeSwga2gpO1xyXG4gICAgICAgIHJlY3QueDIgPSBaYWh5by5ydVRvbHVYKHgsIGt3KTtcclxuICAgICAgICByZWN0LnkyID0gWmFoeW8ucnVUb2x1WSh5ICsgaCwga2gpO1xyXG5cclxuICAgICAgICByZXR1cm4gcmVjdDtcclxuICAgIH0sXHJcblxyXG4gICAgLy8g5Y+z5LiK44KS5Z+654K544Go44GZ44KL54K5WFnjgYzjgIHjg5zjg4Pjgq/jgrnjga7lhoXpg6jjgavlhaXjgaPjgabjgYTjgozjgbAgdHJ1ZSDjgpLov5TjgZlcclxuICAgIGlzSW5Cb3g6ICh4LCB5LCBib3hfeDEsIGJveF95MSwgYm94X3gyLCBib3hfeTIpID0+IHtcclxuICAgICAgICBpZiAoeCA+PSBib3hfeDEgJiYgeSA+PSBib3hfeTEgJiYgeCA8PSBib3hfeDIgJiYgeSA8PSBib3hfeTIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgQ3Vyc29yID0ge1xyXG4gICAgLy9cclxuICAgIC8vIOOCq+ODvOOCveODq+OBruODmuODvOOCuOOBruW3puS4iui1t+eCueOBi+OCieOBruebuOWvvuW6p+aomeOCkui/lOOBmVxyXG4gICAgLy9cclxuICAgIC8vIFtJTl1cclxuICAgIC8vICAgZTog44Oe44Km44K544Kk44OZ44Oz44OIXHJcbiAgICAvL1xyXG4gICAgLy8gW09VVF1cclxuICAgIC8vICAgIFt4LCB5XTog44Oa44O844K477yI44OW44Op44Km44K26KGo56S644Ko44Oq44Ki77yJ44Gu5bem5LiK44GL44KJ44Gu55u45a++5bqn5qiZXHJcbiAgICAvL1xyXG4gICAgY3VyUGFnZUtpdGVuOiAoZSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHggPSBlLnBhZ2VYO1xyXG4gICAgICAgIGNvbnN0IHkgPSBlLnBhZ2VZO1xyXG5cclxuICAgICAgICByZXR1cm4gW3gsIHldO1xyXG4gICAgfSxcclxuXHJcbiAgICAvL1xyXG4gICAgLy8g44Kr44O844K944Or5L2N572u44Gu44Km44Kj44Oz44OJ44Km44K544Kv44Ot44O844Or44KS6ICD5oWu44GX44Gf44Oa44O844K444Gu5bem5LiK6LW354K544GL44KJ44Gu55u45a++5bqn5qiZ44KS6L+U44GZXHJcbiAgICAvL1xyXG4gICAgLy8gW0lOXVxyXG4gICAgLy8gICB4OiDjg5rjg7zjgrjjga7lt6bkuIrjgYvjgonjga7nm7jlr77luqfmqJkgWFxyXG4gICAgLy8gICB5OiDjg5rjg7zjgrjjga7lt6bkuIrjgYvjgonjga7nm7jlr77luqfmqJkgWVxyXG4gICAgLy9cclxuICAgIC8vIFtPVVRdXHJcbiAgICAvLyAgIFt4LCB5XTog44Oa44O844K477yI44OW44Op44Km44K26KGo56S644Ko44Oq44Ki77yJ44Gu5bem5LiK44GL44KJ44Gu55u45a++5bqn5qiZ77yI44Oa44O844K444K544Kv44Ot44O844Or44KC6ICD5oWu77yJXHJcbiAgICAvL1xyXG4gICAgY3VyUGFnZVNjcm9sbEtpdGVuOiAoeCwgeSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHN4ID0gd2luZG93LnBhZ2VYT2Zmc2V0O1xyXG4gICAgICAgIGNvbnN0IHN5ID0gd2luZG93LnBhZ2VZT2Zmc2V0O1xyXG5cclxuICAgICAgICByZXR1cm4gW3N4ICsgeCwgc3kgKyB5XTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gXHJcbiAgICAvLyDmjIflrpropoHntKDjga7lt6bkuIrotbfngrnjgYzjgIHjg5rjg7zjgrjjga7lt6bkuIrotbfngrnjgYvjgonjga7luqfmqJnjgpLov5TjgZlcclxuICAgIC8vXHJcbiAgICAvLyBbSU5dXHJcbiAgICAvLyAgIGVsZW06IOimgee0oO+8iOOCqOODrOODoeODs+ODiO+8iVxyXG4gICAgLy9cclxuICAgIC8vIFtPVVRdXHJcbiAgICAvLyAgIFt4LCB5XTog5oyH5a6a6KaB57Sg44Gu5bem5LiK6LW354K544GM44CB44Oa44O844K477yI44OW44Op44Km44K26KGo56S644Ko44Oq44Ki77yJ44Gu5bem5LiK44GL44KJ44Gu55u45a++5bqn5qiZXHJcbiAgICAvL1xyXG4gICAgZWxlbVBhZ2VLaXRlbjogKGVsZW0pID0+IHtcclxuICAgICAgICBjb25zdCBlbSA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcblxyXG4gICAgICAgIHJldHVybiBbZW0ubGVmdCwgZW0udG9wXTtcclxuICAgIH0sXHJcblxyXG4gICAgLy9cclxuICAgIC8vIOaMh+Wumuimgee0oOOBruW3puS4iui1t+eCueOBjOOAgeOCueOCr+ODreODvOODq+OCkuiAg+aFruOBl+OBn+ODmuODvOOCuOOBruW3puS4iui1t+eCueOBi+OCieOBruebuOWvvuW6p+aomeOCkui/lOOBmVxyXG4gICAgLy9cclxuICAgIC8vIFtJTl1cclxuICAgIC8vICAgZWxlbTog6KaB57Sg77yI44Ko44Os44Oh44Oz44OI77yJXHJcbiAgICAvL1xyXG4gICAgLy8gW09VVF1cclxuICAgIC8vICAgW3gsIHldOiDmjIflrpropoHntKDjga7lt6bkuIrotbfngrnjgYzjgIHjg5rjg7zjgrjvvIjjg5bjg6njgqbjgrbooajnpLrjgqjjg6rjgqLvvInjga7lt6bkuIrjgYvjgonjga7nm7jlr77luqfmqJnvvIjjg5rjg7zjgrjjgrnjgq/jg63jg7zjg6vjgoLogIPmha7vvIlcclxuICAgIC8vXHJcbiAgICBlbGVtUGFnZVNjcm9sbEtpdGVuOiAoZWxlbSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHN4ID0gd2luZG93LnBhZ2VYT2Zmc2V0O1xyXG4gICAgICAgIGNvbnN0IHN5ID0gd2luZG93LnBhZ2VZT2Zmc2V0O1xyXG5cclxuICAgICAgICBjb25zdCBbeCwgeV0gPSBDdXJzb3IuZWxlbVBhZ2VLaXRlbihlbGVtKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIFtzeCArIHgsIHN5ICsgeV07XHJcbiAgICB9LFxyXG5cclxuICAgIC8vXHJcbiAgICAvLyDjgqvjg7zjgr3jg6vkvY3nva7jga7mjIflrpropoHntKDjga7lt6bkuIrotbfngrnjgYvjgonjga7nm7jlr77luqfmqJnjgpLov5TjgZlcclxuICAgIC8vXHJcbiAgICAvLyBbSU5dXHJcbiAgICAvLyAgIHg6IOODmuODvOOCuOOBruW3puS4iuOBi+OCieOBruebuOWvvuW6p+aomSBYXHJcbiAgICAvLyAgIHk6IOODmuODvOOCuOOBruW3puS4iuOBi+OCieOBruebuOWvvuW6p+aomSBZXHJcbiAgICAvLyAgIGVsZW06IOimgee0oO+8iOOCqOODrOODoeODs+ODiO+8iVxyXG4gICAgLy9cclxuICAgIC8vIFtPVVRdXHJcbiAgICAvLyAgIFt4LCB5XTog44Kr44O844K944Or5L2N572u44Gu5oyH5a6a6KaB57Sg44Gu5bem5LiK6LW354K544GL44KJ44Gu55u45a++5bqn5qiZXHJcbiAgICAvL1xyXG4gICAgY3VyRWxlbUtpdGVuOiAoeCwgeSwgZWxlbSkgPT4ge1xyXG4gICAgICAgIC8vIOimgee0oOOBruW3puS4iui1t+eCueOCkuW+l+OCi1xyXG4gICAgICAgIGNvbnN0IFtlbXgsIGVteV0gPSBDdXJzb3IuZWxlbVBhZ2VTY3JvbGxLaXRlbihlbGVtKTtcclxuXHJcbiAgICAgICAgLy8g44Kr44O844K944Or44Gu5bqn5qiZ44KS5b6X44KLXHJcbiAgICAgICAgY29uc3QgW2N4LCBjeV0gPSBDdXJzb3IuY3VyUGFnZVNjcm9sbEtpdGVuKHgsIHkpO1xyXG5cclxuICAgICAgICByZXR1cm4gW2N4IC0gZW14LCBjeSAtIGVteV07XHJcbiAgICB9LFxyXG5cclxuICAgIC8vXHJcbiAgICAvLyDjgqvjg7zjgr3jg6vjga7mjIflrpropoHntKDjga7jgrnjgq/jg63jg7zjg6vjgpLogIPmha7jgZfjgZ/lt6bkuIrotbfngrnjgYvjgonjga7nm7jlr77luqfmqJlcclxuICAgIC8vXHJcbiAgICAvLyBbSU5dXHJcbiAgICAvLyAgIHg6IOODmuODvOOCuOOBruW3puS4iuOBi+OCieOBruebuOWvvuW6p+aomSBYXHJcbiAgICAvLyAgIHk6IOODmuODvOOCuOOBruW3puS4iuOBi+OCieOBruebuOWvvuW6p+aomSBZXHJcbiAgICAvLyAgIGVsZW06IOimgee0oO+8iOOCqOODrOODoeODs+ODiO+8iVxyXG4gICAgLy9cclxuICAgIC8vIFtPVVRdXHJcbiAgICAvLyAgIFt4LCB5XTog44Kr44O844K944Or44Gu5oyH5a6a6KaB57Sg44Gu5bem5LiK6LW354K544GL44KJ44Gu55u45a++5bqn5qiZ77yI5oyH5a6a6KaB57Sg44Gu44K544Kv44Ot44O844Or44KC6ICD5oWu77yJXHJcbiAgICAvL1xyXG4gICAgY3VyRWxlbVNjcm9sbEtpdGVuOiAoeCwgeSwgZWxlbSkgPT4ge1xyXG4gICAgICAgIC8vIOimgee0oOOBruW3puS4iui1t+eCueOCkuW+l+OCi1xyXG4gICAgICAgIGNvbnN0IFtlbXgsIGVteV0gPSBDdXJzb3IuZWxlbVBhZ2VTY3JvbGxLaXRlbihlbGVtKTtcclxuXHJcbiAgICAgICAgLy8g44Kr44O844K944Or44Gu5bqn5qiZ44KS5b6X44KLXHJcbiAgICAgICAgY29uc3QgW2N4LCBjeV0gPSBDdXJzb3IuY3VyUGFnZVNjcm9sbEtpdGVuKHgsIHkpO1xyXG5cclxuICAgICAgICAvLyDopoHntKDjga7jgrnjgq/jg63jg7zjg6vph4/jgpLlvpfjgotcclxuICAgICAgICBjb25zdCBlc3ggPSBlbGVtLnNjcm9sbExlZnQ7XHJcbiAgICAgICAgY29uc3QgZXN5ID0gZWxlbS5zY3JvbGxUb3A7XHJcblxyXG4gICAgICAgIHJldHVybiBbY3ggLSBlbXggKyBlc3gsIGN5IC0gZW15ICsgZXN5XTtcclxuICAgIH0sXHJcblxyXG4gICAgLy9cclxuICAgIC8vIOOCq+ODvOOCveODq+OBruaMh+Wumuimgee0oOOBruOCueOCr+ODreODvOODq+OCkuiAg+aFruOBl+OBn+W3puS4iui1t+eCueOBi+OCieOBruebuOWvvuW6p+aome+8iOaMh+Wumuimgee0oOOBruaLoeWkp+e4ruWwj+eOh+OCkuiAg+aFru+8iVxyXG4gICAgLy9cclxuICAgIC8vIFtJTl1cclxuICAgIC8vICAgeDog44Oa44O844K444Gu5bem5LiK44GL44KJ44Gu55u45a++5bqn5qiZIFhcclxuICAgIC8vICAgeTog44Oa44O844K444Gu5bem5LiK44GL44KJ44Gu55u45a++5bqn5qiZIFlcclxuICAgIC8vICAgZWxlbTog6KaB57Sg77yI44Ko44Os44Oh44Oz44OI77yJXHJcbiAgICAvLyAgIHNjYWxlOiDopoHntKDvvIjjgqjjg6zjg6Hjg7Pjg4jvvInjga7mi6HlpKfnuK7lsI/njofvvIgxLjAgPSAxMDAl77yJXHJcbiAgICAvL1xyXG4gICAgLy8gW09VVF1cclxuICAgIC8vICAgW3gsIHldOiDjgqvjg7zjgr3jg6vjga7mjIflrpropoHntKDjga7lt6bkuIrotbfngrnjgYvjgonjga7nm7jlr77luqfmqJnvvIjmjIflrpropoHntKDjga7jgrnjgq/jg63jg7zjg6vjgIHmjIflrpropoHntKDjga7mi6HlpKfnuK7lsI/njofjgpLogIPmha7vvIlcclxuICAgIC8vXHJcbiAgICBjdXJFbGVtU2NhbGVTY3JvbGxLaXRlbjogKHgsIHksIGVsZW0sIHNjYWxlID0gMS4wKSA9PiB7XHJcbiAgICAgICAgLy8g6KaB57Sg44Gu5bem5LiK6LW354K544KS5b6X44KLXHJcbiAgICAgICAgY29uc3QgW2VteCwgZW15XSA9IEN1cnNvci5lbGVtUGFnZVNjcm9sbEtpdGVuKGVsZW0pO1xyXG5cclxuICAgICAgICAvLyDjgqvjg7zjgr3jg6vjga7luqfmqJnjgpLlvpfjgotcclxuICAgICAgICBjb25zdCBbY3gsIGN5XSA9IEN1cnNvci5jdXJQYWdlU2Nyb2xsS2l0ZW4oeCwgeSk7XHJcblxyXG4gICAgICAgIC8vIOimgee0oOOBruOCueOCr+ODreODvOODq+mHj+OCkuW+l+OCi1xyXG4gICAgICAgIGNvbnN0IGVzeCA9IGVsZW0uc2Nyb2xsTGVmdCAvIHNjYWxlO1xyXG4gICAgICAgIGNvbnN0IGVzeSA9IGVsZW0uc2Nyb2xsVG9wICAvIHNjYWxlO1xyXG5cclxuICAgICAgICByZXR1cm4gWyhjeCAtIGVteCkgLyBzY2FsZSArIGVzeCwgKGN5IC0gZW15KSAvIHNjYWxlICsgZXN5XTtcclxuICAgIH0sXHJcbn07XHJcblxyXG5pbXBvcnQgeyBEZWZpbmUgfSBmcm9tICcuLi9kZWZpbmUuanMnO1xyXG5cclxuZXhwb3J0IGNvbnN0IEdyaWQgPSB7XHJcbiAgICAvL1xyXG4gICAgLy8g44Kw44Oq44OD44OJ44Gr44K544OK44OD44OX44GV44Gb44Gf5aC05ZCI44Gu5bqn5qiZ44KS6L+U44GZXHJcbiAgICAvL1xyXG4gICAgLy8gW0lOXVxyXG4gICAgLy8gICB4OiDntJnpnaLluqfmqJnvvIhTVkfjgqTjg6Hjg7zjgrjjga7lj7PkuIrln7rngrnjga7luqfmqJnvvInjga5YXHJcbiAgICAvLyAgIHk6IOe0memdouW6p+aome+8iFNWR+OCpOODoeODvOOCuOOBruWPs+S4iuWfuueCueOBruW6p+aome+8ieOBrllcclxuICAgIC8vICAgYXJlYV93OiDntJnpnaLjgqjjg6rjgqLvvIhTVkfjgqTjg6Hjg7zjgrjvvInjga7luYVcclxuICAgIC8vICAgYXJlYV9oOiDntJnpnaLjgqjjg6rjgqLvvIhTVkfjgqTjg6Hjg7zjgrjvvInjga7pq5jjgZVcclxuICAgIC8vICAgZ3JpZF93OiDjgrDjg6rjg4Pjg4njga7luYVcclxuICAgIC8vICAgZ3JpZF9oOiDjgrDjg6rjg4Pjg4njga7pq5jjgZVcclxuICAgIC8vXHJcbiAgICAvLyBbT1VUXVxyXG4gICAgLy8gICBbeCwgeV0gOiDjgrnjg4rjg4Pjg5flvozjga7ntJnpnaLluqfmqJnvvIhTVkfjgqTjg6Hjg7zjgrjjga7lj7PkuIrln7rngrnjga7luqfmqJnvvIlcclxuICAgIC8vXHJcbiAgICBzbmFwOiAoeCwgeSwgYXJlYV93LCBhcmVhX2gsIGdyaWRfdywgZ3JpZF9oKSA9PiB7XHJcbiAgICAgICAgbGV0IHJ1X3ggPSB4O1xyXG4gICAgICAgIGxldCBydV95ID0geTtcclxuXHJcbiAgICAgICAgLy8gWOW6p+aomeOCkuOCsOODquODg+ODieW5heOBp+WJsuOBo+OBpuOAgeS9meOCiuOBjDDjga7loLTlkIjjga/jgIFY5bqn5qiZ5rG65a6aXHJcbiAgICAgICAgbGV0IGFtYXJpLCBzaG8sIG1pblgsIG1heFg7XHJcbiAgICAgICAgYW1hcmkgPSBydV94ICUgZ3JpZF93O1xyXG4gICAgICAgIGlmIChhbWFyaSA9PSAwKSB7XHJcbiAgICAgICAgICAgIC8vIFjluqfmqJnjga/msbrlrppcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyDjgrDjg6rjg4Pjg4njga7lsI/jgZXjgYTmlrnjga5Y5bqn5qiZ44KS5rGC44KB44KLXHJcbiAgICAgICAgICAgIHNobyA9IE1hdGguZmxvb3IocnVfeCAvIGdyaWRfdyk7XHJcbiAgICAgICAgICAgIG1pblggPSBzaG8gKiBncmlkX3c7XHJcbiAgICAgICAgICAgIC8vIOOCsOODquODg+ODieOBruWkp+OBjeOBhOaWueOBrljluqfmqJnjgpLmsYLjgoHjgotcclxuICAgICAgICAgICAgbWF4WCA9IChzaG8gKyAxKSAqIGdyaWRfdztcclxuXHJcbiAgICAgICAgICAgIC8vIOS9meOCiuOBjOOAgeOCsOODquODg+ODieOBruWNiuWIhuOCiOOCiuWkp+OBjeOBkeOCjOOBsOWkp+OBjeOBhOaWueOAgeWwj+OBleOBkeOCjOOBsOWwj+OBleOBhOaWuVxyXG4gICAgICAgICAgICBpZiAoYW1hcmkgPj0gKGdyaWRfdyAvIDIpKSB7XHJcbiAgICAgICAgICAgICAgICBydV94ID0gbWF4WDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJ1X3ggPSBtaW5YO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBZ5bqn5qiZ44KS44Kw44Oq44OD44OJ6auY44GV44Gn5Ymy44Gj44Gm44CB5L2Z44KK44GMMOOBruWgtOWQiOOBr+OAgVnluqfmqJnmsbrlrppcclxuICAgICAgICBsZXQgbWluWSwgbWF4WTtcclxuICAgICAgICBhbWFyaSA9IHJ1X3kgJSBncmlkX2g7XHJcbiAgICAgICAgaWYgKGFtYXJpID09IDApIHtcclxuICAgICAgICAgICAgLy8gWeW6p+aomeOBr+axuuWumlxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIOOCsOODquODg+ODieOBruWwj+OBleOBhOaWueOBrlnluqfmqJnjgpLmsYLjgoHjgotcclxuICAgICAgICAgICAgc2hvID0gTWF0aC5mbG9vcihydV95IC8gZ3JpZF9oKTtcclxuICAgICAgICAgICAgbWluWSA9IHNobyAqIGdyaWRfaDtcclxuICAgICAgICAgICAgLy8g44Kw44Oq44OD44OJ44Gu5aSn44GN44GE5pa544GuWOW6p+aomeOCkuaxguOCgeOCi1xyXG4gICAgICAgICAgICBtYXhZID0gKHNobyArIDEpICogZ3JpZF9oO1xyXG5cclxuICAgICAgICAgICAgLy8g5L2Z44KK44GM44CB44Kw44Oq44OD44OJ44Gu5Y2K5YiG44KI44KK5aSn44GN44GR44KM44Gw5aSn44GN44GE5pa544CB5bCP44GV44GR44KM44Gw5bCP44GV44GE5pa5XHJcbiAgICAgICAgICAgIGlmIChhbWFyaSA+PSAoZ3JpZF9oIC8gMikpIHtcclxuICAgICAgICAgICAgICAgIHJ1X3kgPSBtYXhZO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcnVfeSA9IG1pblk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIOOCueODiuODg+ODl+W+jOOBruW6p+aomeOBjDDjgojjgorlsI/jgZXjgYTloLTlkIjjga/jgIEw44Gr44GZ44KLXHJcbiAgICAgICAgaWYgKHJ1X3ggPCAwKSB7XHJcbiAgICAgICAgICAgIHJ1X3ggPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocnVfeSA8IDApIHtcclxuICAgICAgICAgICAgcnVfeSA9IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDjgrnjg4rjg4Pjg5flvozjga7luqfmqJnjgYzjgqjjg6rjgqLjga7mnIDlpKfjgrnjg4rjg4Pjg5fluqfmqJnjgojjgorlpKfjgY3jgZHjgozjgbDjgIHmnIDlpKfjgrnjg4rjg4Pjg5fluqfmqJnjgavjgZnjgotcclxuICAgICAgICBzaG8gPSBNYXRoLmZsb29yKGFyZWFfdyAvIGdyaWRfdyk7XHJcbiAgICAgICAgY29uc3QgYXJlYW1heF94ID0gZ3JpZF93ICogc2hvO1xyXG4gICAgICAgIGlmIChydV94ID4gYXJlYW1heF94KSB7XHJcbiAgICAgICAgICAgIHJ1X3ggPSBhcmVhbWF4X3g7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNobyA9IE1hdGguZmxvb3IoYXJlYV9oIC8gZ3JpZF9oKTtcclxuICAgICAgICBjb25zdCBhcmVhbWF4X3kgPSBncmlkX2ggKiBzaG87XHJcbiAgICAgICAgaWYgKHJ1X3kgPiBhcmVhbWF4X3kpIHtcclxuICAgICAgICAgICAgcnVfeSA9IGFyZWFtYXhfeTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBbcnVfeCwgcnVfeV07XHJcbiAgICB9LFxyXG5cclxuICAgIC8vXHJcbiAgICAvLyDntJnpnaLvvIhTVkfjgqTjg6Hjg7zjgrjvvInjgYvjgonjga/jgb/lh7rjgZfjgabjgYTjgovnn6nlvaLjgpLlhoXpg6jjgavlj47jgoHjgotcclxuICAgIC8vXHJcbiAgICAvLyBbSU5dXHJcbiAgICAvLyAgIHgxOiDntJnpnaLluqfmqJnvvIhTVkfjgqTjg6Hjg7zjgrjjga7lj7PkuIrln7rngrnjga7luqfmqJnvvInjga7nn6nlvaLjga7lp4vngrlYXHJcbiAgICAvLyAgIHkxOiDntJnpnaLluqfmqJnvvIhTVkfjgqTjg6Hjg7zjgrjjga7lj7PkuIrln7rngrnjga7luqfmqJnvvInjga7nn6nlvaLjga7lp4vngrlZXHJcbiAgICAvLyAgIHgyOiDntJnpnaLluqfmqJnvvIhTVkfjgqTjg6Hjg7zjgrjjga7lj7PkuIrln7rngrnjga7luqfmqJnvvInjga7nn6nlvaLjga7ntYLngrlYXHJcbiAgICAvLyAgIHkyOiDntJnpnaLluqfmqJnvvIhTVkfjgqTjg6Hjg7zjgrjjga7lj7PkuIrln7rngrnjga7luqfmqJnvvInjga7nn6nlvaLjga7ntYLngrlZXHJcbiAgICAvLyAgIGFyZWFfdzog57SZ6Z2i44Ko44Oq44Ki77yIU1ZH44Kk44Oh44O844K477yJ44Gu5bmFXHJcbiAgICAvLyAgIGFyZWFfaDog57SZ6Z2i44Ko44Oq44Ki77yIU1ZH44Kk44Oh44O844K477yJ44Gu6auY44GVXHJcbiAgICAvLyAgIGdyaWRfdzog44Kw44Oq44OD44OJ44Gu5bmFXHJcbiAgICAvLyAgIGdyaWRfaDog44Kw44Oq44OD44OJ44Gu6auY44GVXHJcbiAgICAvL1xyXG4gICAgLy8gW09VVF1cclxuICAgIC8vICAgW3gxLCB5MSwgeDIsIHkyXSA6IOOBr+OBv+WHuuOBl+OBpuOBquOBhOefqeW9ouOBruWni+eCuee1gueCueW6p+aomVxyXG4gICAgLy9cclxuICAgIGNoYW5nZUluQXJlYTogKHgxLCB5MSwgeDIsIHkyLCBhcmVhX3csIGFyZWFfaCwgZ3JpZF93LCBncmlkX2gpID0+IHtcclxuICAgICAgICAvLyDnn6nlvaLjga7luYXjgajpq5jjgZXjgpLlvpfjgotcclxuICAgICAgICBjb25zdCB3aWR0aCAgPSB4MiAtIHgxO1xyXG4gICAgICAgIGNvbnN0IGhlaWdodCA9IHkyIC0geTE7XHJcblxyXG4gICAgICAgIC8vIOWni+eCueOBjOOCquODvOODkOODvOOBl+OBpuOBhOOBn+OCieOAgeevhOWbsuOBq+WPjuOCgeOCi1xyXG4gICAgICAgIGlmICh4MSA8IDApIHtcclxuICAgICAgICAgICAgeDEgPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoeTEgPCAwKSB7XHJcbiAgICAgICAgICAgIHkxID0gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIOe1gueCueOCkuOCsOODquODg+ODieOBq+OCueODiuODg+ODl+OBleOBm+OCi1xyXG4gICAgICAgIFt4MSwgeTFdID0gR3JpZC5zbmFwKHgxLCB5MSwgYXJlYV93LCBhcmVhX2gsIGdyaWRfdywgZ3JpZF9oKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyDlp4vngrnjgpLmsYLjgoHjgotcclxuICAgICAgICB4MiA9IHgxICsgd2lkdGg7XHJcbiAgICAgICAgeTIgPSB5MSArIGhlaWdodDtcclxuXHJcbiAgICAgICAgLy8g57WC54K544KS44Kw44Oq44OD44OJ44Gr44K544OK44OD44OX44GV44Gb44KLXHJcbiAgICAgICAgW3gyLCB5Ml0gPSBHcmlkLnNuYXAoeDIsIHkyLCBhcmVhX3csIGFyZWFfaCwgZ3JpZF93LCBncmlkX2gpO1xyXG5cclxuICAgICAgICB4MSA9IHgyIC0gd2lkdGg7XHJcbiAgICAgICAgeTEgPSB5MiAtIGhlaWdodDtcclxuICAgICAgICBpZiAoeDEgPCAwKSB7XHJcbiAgICAgICAgICAgIHgxID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHkxIDwgMCkge1xyXG4gICAgICAgICAgICB5MSA9IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gW3gxLCB5MSwgeDIsIHkyXTtcclxuICAgIH0sXHJcbn07XHJcbiIsIi8vIDcuMS4xMyBUb09iamVjdChhcmd1bWVudClcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIE9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuaW1wb3J0IHsgaXMsIGNoZWNrLCByZW1vdmUsIE1BVENILCBpbnRlcm5hbEVyciwgU0FHQV9BQ1RJT04gfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IGJ1ZmZlcnMgfSBmcm9tICcuL2J1ZmZlcnMnO1xuaW1wb3J0IHsgYXNhcCB9IGZyb20gJy4vc2NoZWR1bGVyJztcblxudmFyIENIQU5ORUxfRU5EX1RZUEUgPSAnQEByZWR1eC1zYWdhL0NIQU5ORUxfRU5EJztcbmV4cG9ydCB2YXIgRU5EID0geyB0eXBlOiBDSEFOTkVMX0VORF9UWVBFIH07XG5leHBvcnQgdmFyIGlzRW5kID0gZnVuY3Rpb24gaXNFbmQoYSkge1xuICByZXR1cm4gYSAmJiBhLnR5cGUgPT09IENIQU5ORUxfRU5EX1RZUEU7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gZW1pdHRlcigpIHtcbiAgdmFyIHN1YnNjcmliZXJzID0gW107XG5cbiAgZnVuY3Rpb24gc3Vic2NyaWJlKHN1Yikge1xuICAgIHN1YnNjcmliZXJzLnB1c2goc3ViKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHJlbW92ZShzdWJzY3JpYmVycywgc3ViKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZW1pdChpdGVtKSB7XG4gICAgdmFyIGFyciA9IHN1YnNjcmliZXJzLnNsaWNlKCk7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGFyci5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgYXJyW2ldKGl0ZW0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgc3Vic2NyaWJlOiBzdWJzY3JpYmUsXG4gICAgZW1pdDogZW1pdFxuICB9O1xufVxuXG5leHBvcnQgdmFyIElOVkFMSURfQlVGRkVSID0gJ2ludmFsaWQgYnVmZmVyIHBhc3NlZCB0byBjaGFubmVsIGZhY3RvcnkgZnVuY3Rpb24nO1xuZXhwb3J0IHZhciBVTkRFRklORURfSU5QVVRfRVJST1IgPSAnU2FnYSB3YXMgcHJvdmlkZWQgd2l0aCBhbiB1bmRlZmluZWQgYWN0aW9uJztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgVU5ERUZJTkVEX0lOUFVUX0VSUk9SICs9ICdcXG5IaW50czpcXG4gICAgLSBjaGVjayB0aGF0IHlvdXIgQWN0aW9uIENyZWF0b3IgcmV0dXJucyBhIG5vbi11bmRlZmluZWQgdmFsdWVcXG4gICAgLSBpZiB0aGUgU2FnYSB3YXMgc3RhcnRlZCB1c2luZyBydW5TYWdhLCBjaGVjayB0aGF0IHlvdXIgc3Vic2NyaWJlIHNvdXJjZSBwcm92aWRlcyB0aGUgYWN0aW9uIHRvIGl0cyBsaXN0ZW5lcnNcXG4gICc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGFubmVsKCkge1xuICB2YXIgYnVmZmVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBidWZmZXJzLmZpeGVkKCk7XG5cbiAgdmFyIGNsb3NlZCA9IGZhbHNlO1xuICB2YXIgdGFrZXJzID0gW107XG5cbiAgY2hlY2soYnVmZmVyLCBpcy5idWZmZXIsIElOVkFMSURfQlVGRkVSKTtcblxuICBmdW5jdGlvbiBjaGVja0ZvcmJpZGRlblN0YXRlcygpIHtcbiAgICBpZiAoY2xvc2VkICYmIHRha2Vycy5sZW5ndGgpIHtcbiAgICAgIHRocm93IGludGVybmFsRXJyKCdDYW5ub3QgaGF2ZSBhIGNsb3NlZCBjaGFubmVsIHdpdGggcGVuZGluZyB0YWtlcnMnKTtcbiAgICB9XG4gICAgaWYgKHRha2Vycy5sZW5ndGggJiYgIWJ1ZmZlci5pc0VtcHR5KCkpIHtcbiAgICAgIHRocm93IGludGVybmFsRXJyKCdDYW5ub3QgaGF2ZSBwZW5kaW5nIHRha2VycyB3aXRoIG5vbiBlbXB0eSBidWZmZXInKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwdXQoaW5wdXQpIHtcbiAgICBjaGVja0ZvcmJpZGRlblN0YXRlcygpO1xuICAgIGNoZWNrKGlucHV0LCBpcy5ub3RVbmRlZiwgVU5ERUZJTkVEX0lOUFVUX0VSUk9SKTtcbiAgICBpZiAoY2xvc2VkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghdGFrZXJzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGJ1ZmZlci5wdXQoaW5wdXQpO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRha2Vycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGNiID0gdGFrZXJzW2ldO1xuICAgICAgaWYgKCFjYltNQVRDSF0gfHwgY2JbTUFUQ0hdKGlucHV0KSkge1xuICAgICAgICB0YWtlcnMuc3BsaWNlKGksIDEpO1xuICAgICAgICByZXR1cm4gY2IoaW5wdXQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRha2UoY2IpIHtcbiAgICBjaGVja0ZvcmJpZGRlblN0YXRlcygpO1xuICAgIGNoZWNrKGNiLCBpcy5mdW5jLCBcImNoYW5uZWwudGFrZSdzIGNhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvblwiKTtcblxuICAgIGlmIChjbG9zZWQgJiYgYnVmZmVyLmlzRW1wdHkoKSkge1xuICAgICAgY2IoRU5EKTtcbiAgICB9IGVsc2UgaWYgKCFidWZmZXIuaXNFbXB0eSgpKSB7XG4gICAgICBjYihidWZmZXIudGFrZSgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGFrZXJzLnB1c2goY2IpO1xuICAgICAgY2IuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gcmVtb3ZlKHRha2VycywgY2IpO1xuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBmbHVzaChjYikge1xuICAgIGNoZWNrRm9yYmlkZGVuU3RhdGVzKCk7IC8vIFRPRE86IGNoZWNrIGlmIHNvbWUgbmV3IHN0YXRlIHNob3VsZCBiZSBmb3JiaWRkZW4gbm93XG4gICAgY2hlY2soY2IsIGlzLmZ1bmMsIFwiY2hhbm5lbC5mbHVzaCcgY2FsbGJhY2sgbXVzdCBiZSBhIGZ1bmN0aW9uXCIpO1xuICAgIGlmIChjbG9zZWQgJiYgYnVmZmVyLmlzRW1wdHkoKSkge1xuICAgICAgY2IoRU5EKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY2IoYnVmZmVyLmZsdXNoKCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2xvc2UoKSB7XG4gICAgY2hlY2tGb3JiaWRkZW5TdGF0ZXMoKTtcbiAgICBpZiAoIWNsb3NlZCkge1xuICAgICAgY2xvc2VkID0gdHJ1ZTtcbiAgICAgIGlmICh0YWtlcnMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBhcnIgPSB0YWtlcnM7XG4gICAgICAgIHRha2VycyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gYXJyLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgYXJyW2ldKEVORCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHRha2U6IHRha2UsXG4gICAgcHV0OiBwdXQsXG4gICAgZmx1c2g6IGZsdXNoLFxuICAgIGNsb3NlOiBjbG9zZSxcbiAgICBnZXQgX190YWtlcnNfXygpIHtcbiAgICAgIHJldHVybiB0YWtlcnM7XG4gICAgfSxcbiAgICBnZXQgX19jbG9zZWRfXygpIHtcbiAgICAgIHJldHVybiBjbG9zZWQ7XG4gICAgfVxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXZlbnRDaGFubmVsKHN1YnNjcmliZSkge1xuICB2YXIgYnVmZmVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBidWZmZXJzLm5vbmUoKTtcbiAgdmFyIG1hdGNoZXIgPSBhcmd1bWVudHNbMl07XG5cbiAgLyoqXG4gICAgc2hvdWxkIGJlIGlmKHR5cGVvZiBtYXRjaGVyICE9PSB1bmRlZmluZWQpIGluc3RlYWQ/XG4gICAgc2VlIFBSICMyNzMgZm9yIGEgYmFja2dyb3VuZCBkaXNjdXNzaW9uXG4gICoqL1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDIpIHtcbiAgICBjaGVjayhtYXRjaGVyLCBpcy5mdW5jLCAnSW52YWxpZCBtYXRjaCBmdW5jdGlvbiBwYXNzZWQgdG8gZXZlbnRDaGFubmVsJyk7XG4gIH1cblxuICB2YXIgY2hhbiA9IGNoYW5uZWwoYnVmZmVyKTtcbiAgdmFyIGNsb3NlID0gZnVuY3Rpb24gY2xvc2UoKSB7XG4gICAgaWYgKCFjaGFuLl9fY2xvc2VkX18pIHtcbiAgICAgIGlmICh1bnN1YnNjcmliZSkge1xuICAgICAgICB1bnN1YnNjcmliZSgpO1xuICAgICAgfVxuICAgICAgY2hhbi5jbG9zZSgpO1xuICAgIH1cbiAgfTtcbiAgdmFyIHVuc3Vic2NyaWJlID0gc3Vic2NyaWJlKGZ1bmN0aW9uIChpbnB1dCkge1xuICAgIGlmIChpc0VuZChpbnB1dCkpIHtcbiAgICAgIGNsb3NlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChtYXRjaGVyICYmICFtYXRjaGVyKGlucHV0KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjaGFuLnB1dChpbnB1dCk7XG4gIH0pO1xuICBpZiAoY2hhbi5fX2Nsb3NlZF9fKSB7XG4gICAgdW5zdWJzY3JpYmUoKTtcbiAgfVxuXG4gIGlmICghaXMuZnVuYyh1bnN1YnNjcmliZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2luIGV2ZW50Q2hhbm5lbDogc3Vic2NyaWJlIHNob3VsZCByZXR1cm4gYSBmdW5jdGlvbiB0byB1bnN1YnNjcmliZScpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0YWtlOiBjaGFuLnRha2UsXG4gICAgZmx1c2g6IGNoYW4uZmx1c2gsXG4gICAgY2xvc2U6IGNsb3NlXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdGRDaGFubmVsKHN1YnNjcmliZSkge1xuICB2YXIgY2hhbiA9IGV2ZW50Q2hhbm5lbChmdW5jdGlvbiAoY2IpIHtcbiAgICByZXR1cm4gc3Vic2NyaWJlKGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgaWYgKGlucHV0W1NBR0FfQUNUSU9OXSkge1xuICAgICAgICBjYihpbnB1dCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGFzYXAoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gY2IoaW5wdXQpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgY2hhbiwge1xuICAgIHRha2U6IGZ1bmN0aW9uIHRha2UoY2IsIG1hdGNoZXIpIHtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBjaGVjayhtYXRjaGVyLCBpcy5mdW5jLCBcImNoYW5uZWwudGFrZSdzIG1hdGNoZXIgYXJndW1lbnQgbXVzdCBiZSBhIGZ1bmN0aW9uXCIpO1xuICAgICAgICBjYltNQVRDSF0gPSBtYXRjaGVyO1xuICAgICAgfVxuICAgICAgY2hhbi50YWtlKGNiKTtcbiAgICB9XG4gIH0pO1xufSIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSBmdW5jdGlvbiEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgcXVvdCA9IC9cIi9nO1xuLy8gQi4yLjMuMi4xIENyZWF0ZUhUTUwoc3RyaW5nLCB0YWcsIGF0dHJpYnV0ZSwgdmFsdWUpXG52YXIgY3JlYXRlSFRNTCA9IGZ1bmN0aW9uIChzdHJpbmcsIHRhZywgYXR0cmlidXRlLCB2YWx1ZSkge1xuICB2YXIgUyA9IFN0cmluZyhkZWZpbmVkKHN0cmluZykpO1xuICB2YXIgcDEgPSAnPCcgKyB0YWc7XG4gIGlmIChhdHRyaWJ1dGUgIT09ICcnKSBwMSArPSAnICcgKyBhdHRyaWJ1dGUgKyAnPVwiJyArIFN0cmluZyh2YWx1ZSkucmVwbGFjZShxdW90LCAnJnF1b3Q7JykgKyAnXCInO1xuICByZXR1cm4gcDEgKyAnPicgKyBTICsgJzwvJyArIHRhZyArICc+Jztcbn07XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FLCBleGVjKSB7XG4gIHZhciBPID0ge307XG4gIE9bTkFNRV0gPSBleGVjKGNyZWF0ZUhUTUwpO1xuICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGVzdCA9ICcnW05BTUVdKCdcIicpO1xuICAgIHJldHVybiB0ZXN0ICE9PSB0ZXN0LnRvTG93ZXJDYXNlKCkgfHwgdGVzdC5zcGxpdCgnXCInKS5sZW5ndGggPiAzO1xuICB9KSwgJ1N0cmluZycsIE8pO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFNSQyA9IHJlcXVpcmUoJy4vX3VpZCcpKCdzcmMnKTtcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyICR0b1N0cmluZyA9IEZ1bmN0aW9uW1RPX1NUUklOR107XG52YXIgVFBMID0gKCcnICsgJHRvU3RyaW5nKS5zcGxpdChUT19TVFJJTkcpO1xuXG5yZXF1aXJlKCcuL19jb3JlJykuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gJHRvU3RyaW5nLmNhbGwoaXQpO1xufTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGtleSwgdmFsLCBzYWZlKSB7XG4gIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIHZhbCA9PSAnZnVuY3Rpb24nO1xuICBpZiAoaXNGdW5jdGlvbikgaGFzKHZhbCwgJ25hbWUnKSB8fCBoaWRlKHZhbCwgJ25hbWUnLCBrZXkpO1xuICBpZiAoT1trZXldID09PSB2YWwpIHJldHVybjtcbiAgaWYgKGlzRnVuY3Rpb24pIGhhcyh2YWwsIFNSQykgfHwgaGlkZSh2YWwsIFNSQywgT1trZXldID8gJycgKyBPW2tleV0gOiBUUEwuam9pbihTdHJpbmcoa2V5KSkpO1xuICBpZiAoTyA9PT0gZ2xvYmFsKSB7XG4gICAgT1trZXldID0gdmFsO1xuICB9IGVsc2UgaWYgKCFzYWZlKSB7XG4gICAgZGVsZXRlIE9ba2V5XTtcbiAgICBoaWRlKE8sIGtleSwgdmFsKTtcbiAgfSBlbHNlIGlmIChPW2tleV0pIHtcbiAgICBPW2tleV0gPSB2YWw7XG4gIH0gZWxzZSB7XG4gICAgaGlkZShPLCBrZXksIHZhbCk7XG4gIH1cbi8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZVxufSkoRnVuY3Rpb24ucHJvdG90eXBlLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyAmJiB0aGlzW1NSQ10gfHwgJHRvU3RyaW5nLmNhbGwodGhpcyk7XG59KTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBkUC5mKG9iamVjdCwga2V5LCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG59IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufTtcbiIsIi8vIDE5LjEuMi45IC8gMTUuMi4zLjIgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBPYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmdldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIChPKSB7XG4gIE8gPSB0b09iamVjdChPKTtcbiAgaWYgKGhhcyhPLCBJRV9QUk9UTykpIHJldHVybiBPW0lFX1BST1RPXTtcbiAgaWYgKHR5cGVvZiBPLmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgTyBpbnN0YW5jZW9mIE8uY29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gTy5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIH0gcmV0dXJuIE8gaW5zdGFuY2VvZiBPYmplY3QgPyBPYmplY3RQcm90byA6IG51bGw7XG59O1xuIiwidmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciBnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGdPUEQgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gdG9JT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZ09QRChPLCBQKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChoYXMoTywgUCkpIHJldHVybiBjcmVhdGVEZXNjKCFwSUUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07XG4iLCIvLyB0byBpbmRleGVkIG9iamVjdCwgdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gSU9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJFQUNUX0VMRU1FTlRfVFlQRSA9ICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmXG4gICAgU3ltYm9sLmZvciAmJlxuICAgIFN5bWJvbC5mb3IoJ3JlYWN0LmVsZW1lbnQnKSkgfHxcbiAgICAweGVhYzc7XG5cbiAgdmFyIGlzVmFsaWRFbGVtZW50ID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmXG4gICAgICBvYmplY3QgIT09IG51bGwgJiZcbiAgICAgIG9iamVjdC4kJHR5cGVvZiA9PT0gUkVBQ1RfRUxFTUVOVF9UWVBFO1xuICB9O1xuXG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IGRldmVsb3BtZW50IGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzJykoaXNWYWxpZEVsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpO1xufSBlbHNlIHtcbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgcHJvZHVjdGlvbiBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zJykoKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG1ldGhvZCwgYXJnKSB7XG4gIHJldHVybiAhIW1ldGhvZCAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZWxlc3MtY2FsbFxuICAgIGFyZyA/IG1ldGhvZC5jYWxsKG51bGwsIGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSwgMSkgOiBtZXRob2QuY2FsbChudWxsKTtcbiAgfSk7XG59O1xuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59O1xuIiwiLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIHRoYXQsIGxlbmd0aCkge1xuICBhRnVuY3Rpb24oZm4pO1xuICBpZiAodGhhdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZm47XG4gIHN3aXRjaCAobGVuZ3RoKSB7XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24gKGEpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuICAgIH07XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIpO1xuICAgIH07XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uICgvKiAuLi5hcmdzICovKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuIiwidmFyIGNvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IHsgdmVyc2lvbjogJzIuNS42JyB9O1xuaWYgKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpIF9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsIi8vIDAgLT4gQXJyYXkjZm9yRWFjaFxuLy8gMSAtPiBBcnJheSNtYXBcbi8vIDIgLT4gQXJyYXkjZmlsdGVyXG4vLyAzIC0+IEFycmF5I3NvbWVcbi8vIDQgLT4gQXJyYXkjZXZlcnlcbi8vIDUgLT4gQXJyYXkjZmluZFxuLy8gNiAtPiBBcnJheSNmaW5kSW5kZXhcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBhc2MgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVFlQRSwgJGNyZWF0ZSkge1xuICB2YXIgSVNfTUFQID0gVFlQRSA9PSAxO1xuICB2YXIgSVNfRklMVEVSID0gVFlQRSA9PSAyO1xuICB2YXIgSVNfU09NRSA9IFRZUEUgPT0gMztcbiAgdmFyIElTX0VWRVJZID0gVFlQRSA9PSA0O1xuICB2YXIgSVNfRklORF9JTkRFWCA9IFRZUEUgPT0gNjtcbiAgdmFyIE5PX0hPTEVTID0gVFlQRSA9PSA1IHx8IElTX0ZJTkRfSU5ERVg7XG4gIHZhciBjcmVhdGUgPSAkY3JlYXRlIHx8IGFzYztcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgY2FsbGJhY2tmbiwgdGhhdCkge1xuICAgIHZhciBPID0gdG9PYmplY3QoJHRoaXMpO1xuICAgIHZhciBzZWxmID0gSU9iamVjdChPKTtcbiAgICB2YXIgZiA9IGN0eChjYWxsYmFja2ZuLCB0aGF0LCAzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoc2VsZi5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIHJlc3VsdCA9IElTX01BUCA/IGNyZWF0ZSgkdGhpcywgbGVuZ3RoKSA6IElTX0ZJTFRFUiA/IGNyZWF0ZSgkdGhpcywgMCkgOiB1bmRlZmluZWQ7XG4gICAgdmFyIHZhbCwgcmVzO1xuICAgIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoTk9fSE9MRVMgfHwgaW5kZXggaW4gc2VsZikge1xuICAgICAgdmFsID0gc2VsZltpbmRleF07XG4gICAgICByZXMgPSBmKHZhbCwgaW5kZXgsIE8pO1xuICAgICAgaWYgKFRZUEUpIHtcbiAgICAgICAgaWYgKElTX01BUCkgcmVzdWx0W2luZGV4XSA9IHJlczsgICAvLyBtYXBcbiAgICAgICAgZWxzZSBpZiAocmVzKSBzd2l0Y2ggKFRZUEUpIHtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiB0cnVlOyAgICAgICAgICAgICAvLyBzb21lXG4gICAgICAgICAgY2FzZSA1OiByZXR1cm4gdmFsOyAgICAgICAgICAgICAgLy8gZmluZFxuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIGluZGV4OyAgICAgICAgICAgIC8vIGZpbmRJbmRleFxuICAgICAgICAgIGNhc2UgMjogcmVzdWx0LnB1c2godmFsKTsgICAgICAgIC8vIGZpbHRlclxuICAgICAgICB9IGVsc2UgaWYgKElTX0VWRVJZKSByZXR1cm4gZmFsc2U7IC8vIGV2ZXJ5XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBJU19GSU5EX0lOREVYID8gLTEgOiBJU19TT01FIHx8IElTX0VWRVJZID8gSVNfRVZFUlkgOiByZXN1bHQ7XG4gIH07XG59O1xuIiwiLy8gbW9zdCBPYmplY3QgbWV0aG9kcyBieSBFUzYgc2hvdWxkIGFjY2VwdCBwcmltaXRpdmVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBleGVjKSB7XG4gIHZhciBmbiA9IChjb3JlLk9iamVjdCB8fCB7fSlbS0VZXSB8fCBPYmplY3RbS0VZXTtcbiAgdmFyIGV4cCA9IHt9O1xuICBleHBbS0VZXSA9IGV4ZWMoZm4pO1xuICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHsgZm4oMSk7IH0pLCAnT2JqZWN0JywgZXhwKTtcbn07XG4iLCIvLyA3LjEuNCBUb0ludGVnZXJcbnZhciBjZWlsID0gTWF0aC5jZWlsO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpc05hTihpdCA9ICtpdCkgPyAwIDogKGl0ID4gMCA/IGZsb29yIDogY2VpbCkoaXQpO1xufTtcbiIsIi8vIDcuMi4xIFJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgXCIgKyBpdCk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvLyA3LjEuMSBUb1ByaW1pdGl2ZShpbnB1dCBbLCBQcmVmZXJyZWRUeXBlXSlcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgUykge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIGl0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKFMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICh0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAoIVMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG4iLCJpbXBvcnQgeyBMaWJBcnJheSB9IGZyb20gXCIuL2FycmF5XCI7XHJcblxyXG4vL1xyXG4vLyDjg5zjg4Pjgq/jgrnplqLpgKNcclxuLy9cclxuXHJcbmV4cG9ydCBjb25zdCBCb3ggPSB7XHJcbiAgICAvL1xyXG4gICAgLy8g44Oc44OD44Kv44K5SUTjgYvjgonjgIHjg5zjg4Pjgq/jgrnjg6zjgrPjg7zjg4njgpLov5TjgZlcclxuICAgIC8vXHJcbiAgICAvLyBbSU5dXHJcbiAgICAvLyAgIGJveHM6IOODnOODg+OCr+OCueaDheWgsVxyXG4gICAgLy8gICBib3hfaWQ6IOODnOODg+OCr+OCuUlEXHJcbiAgICAvL1xyXG4gICAgLy8gW09VVF1cclxuICAgIC8vICAgcmVjOiDjg5zjg4Pjgq/jgrnjg6zjgrPjg7zjg4lcclxuICAgIC8vXHJcbiAgICBnZXRCb3g6IChib3hzLCBib3hfaWQpID0+IHtcclxuICAgICAgICBsZXQgYm94ID0gJyc7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYm94cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoYm94c1tpXS5ib3hfaWQgPT0gYm94X2lkKSB7XHJcbiAgICAgICAgICAgICAgICBib3ggPSBib3hzW2ldO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBib3g7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vXHJcbiAgICAvLyDjg5zjg4Pjgq/jgrlJROOBi+OCieOAgeOCsOODq+ODvOODl+WQjeOBqE5v44KS6L+U44GZXHJcbiAgICAvL1xyXG4gICAgLy8gW0lOXVxyXG4gICAgLy8gICBib3hzOiDjg5zjg4Pjgq/jgrnmg4XloLFcclxuICAgIC8vICAgYm94X2lkOiDjg5zjg4Pjgq/jgrlJRFxyXG4gICAgLy9cclxuICAgIC8vIFtPVVRdXHJcbiAgICAvLyAgIFtncm91cCwgbm9dXHJcbiAgICAvL1xyXG4gICAgZ2V0R3JvdXBBbmRObzogKGJveHMsIGJveF9pZCkgPT4ge1xyXG4gICAgICAgIGxldCBncm91cF9pZCA9IDA7XHJcbiAgICAgICAgbGV0IGdyb3VwX25vID0gMDtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBib3hzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChib3hzW2ldLmJveF9pZCA9PSBib3hfaWQpIHtcclxuICAgICAgICAgICAgICAgIGdyb3VwX2lkID0gYm94c1tpXS5ncm91cF9pZDtcclxuICAgICAgICAgICAgICAgIGdyb3VwX25vID0gYm94c1tpXS5ncm91cF9ubztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gW2dyb3VwX2lkLCBncm91cF9ub11cclxuICAgIH0sXHJcblxyXG4gICAgLy9cclxuICAgIC8vIOODnOODg+OCr+OCueODquOCueODiOOBruWFqOOCsOODq+ODvOODl+OBruOCsOODq+ODvOODl0lE6YWN5YiX44KS6L+U44GZXHJcbiAgICAvL1xyXG4gICAgLy8gW0lOXVxyXG4gICAgLy8gICBib3hzOiDjg5zjg4Pjgq/jgrnmg4XloLFcclxuICAgIC8vXHJcbiAgICAvLyBbT1VUXVxyXG4gICAgLy8gICBbZ3JvdXBfaWQsIGdyb3VwX2lkLCBncm91cF9pZCwgLi4uXSAgPC0tLSDjgrDjg6vjg7zjg5dJROOBrumFjeWIl1xyXG4gICAgLy9cclxuICAgIGdldEdyb3VwQXJ5OiAoYm94cykgPT4ge1xyXG4gICAgICAgIGxldCBhcnkgPSBbXTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBib3hzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGFyeSA9IExpYkFycmF5LnNldEFycmF5VW5pcXVlKGFyeSwgYm94c1tpXS5ncm91cF9pZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhcnkuc29ydCgoYSwgYikgPT4gYSAtIGIpO1xyXG5cclxuICAgICAgICByZXR1cm4gYXJ5O1xyXG4gICAgfSxcclxuXHJcbiAgICAvL1xyXG4gICAgLy8g44Kw44Or44O844OXSUTjgYvjgonjgIHjgrDjg6vjg7zjg5dOb+OBruS4gOimp++8iOmFjeWIl++8ieOCkui/lOOBmVxyXG4gICAgLy9cclxuICAgIC8vIFtJTl1cclxuICAgIC8vICAgYm94czog44Oc44OD44Kv44K55oOF5aCxXHJcbiAgICAvLyAgIGdyb3VwX2lkOiDjgrDjg6vjg7zjg5dJRFxyXG4gICAgLy9cclxuICAgIC8vIFtPVVRdXHJcbiAgICAvLyAgIFsgZ3JvdXBfbm8sIGdyb3VwX25vLCBncm91cF9ubywgLi4uIF0gIDwtLS0g44Kw44Or44O844OXTm/jga7phY3liJdcclxuICAgIC8vXHJcbiAgICBnZXRHcm91cE5vQXJ5OiAoYm94cywgZ3JvdXBfaWQpID0+IHtcclxuICAgICAgICBsZXQgYXJ5ID0gW107XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYm94cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoYm94c1tpXS5ncm91cF9pZCA9PSBncm91cF9pZCkge1xyXG4gICAgICAgICAgICAgICAgYXJ5LnB1c2goYm94c1tpXS5ncm91cF9ubyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGFyeS5zb3J0KChhLCBiKSA9PiBhIC0gYik7XHJcblxyXG4gICAgICAgIHJldHVybiBhcnk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vXHJcbiAgICAvLyDjgrDjg6vjg7zjg5dJROOBqOOCsOODq+ODvOODl05v44GL44KJ44CB44Oc44OD44Kv44K5SUTjgpLov5TjgZlcclxuICAgIC8vXHJcbiAgICAvLyBbSU5dXHJcbiAgICAvLyAgIGJveHM6IOODnOODg+OCr+OCueaDheWgsVxyXG4gICAgLy8gICBncm91cF9pZDog44Kw44Or44O844OX5ZCNXHJcbiAgICAvLyAgIGdyb3VwX25vOiDjgrDjg6vjg7zjg5dOb1xyXG4gICAgLy9cclxuICAgIC8vIFtPVVRdXHJcbiAgICAvLyAgIGJveF9pZDog44Oc44OD44Kv44K5SURcclxuICAgIC8vXHJcbiAgICBnZXRCb3hJZDogKGJveHMsIGdyb3VwX2lkLCBncm91cF9ubykgPT4ge1xyXG4gICAgICAgIGxldCBib3hfaWQgPSAnJztcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBib3hzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChib3hzW2ldLmdyb3VwX2lkID09IGdyb3VwX2lkICYmIGJveHNbaV0uZ3JvdXBfbm8gPT0gZ3JvdXBfbm8pIHtcclxuICAgICAgICAgICAgICAgIGJveF9pZCA9IGJveHNbaV0uYm94X2lkO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBib3hfaWQ7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vXHJcbiAgICAvLyDntKDmnZBJROOBqOODquODs+OCr+OBleOCjOOBpuOBhOOCi+ODnOODg+OCr+OCueOCsOODq+ODvOODl0lE44KS6L+U44GZXHJcbiAgICAvL1xyXG4gICAgLy8gW0lOXVxyXG4gICAgLy8gICBib3hzOiDjg5zjg4Pjgq/jgrnmg4XloLFcclxuICAgIC8vICAgbGlua3M6IOODquODs+OCr+aDheWgsVxyXG4gICAgLy8gICBzb3phaV9pZDog57Sg5p2QSURcclxuICAgIC8vXHJcbiAgICAvLyBbT1VUXVxyXG4gICAgLy8gICBncm91cF9pZDog44Kw44Or44O844OXSURcclxuICAgIC8vXHJcbiAgICBnZXRMaW5rR3JvdXA6IChib3hzLCBsaW5rcywgc296YWlfaWQpID0+IHtcclxuICAgICAgICBsZXQgZ3JvdXBfaWQgPSAwO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbmtzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChsaW5rc1tpXS5zb3phaV9pZCA9PSBzb3phaV9pZCkge1xyXG4gICAgICAgICAgICAgICAgZ3JvdXBfaWQgPSBsaW5rc1tpXS5ncm91cF9pZDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZ3JvdXBfaWQ7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vXHJcbiAgICAvLyDmlrDopo/jg5zjg4Pjgq/jgrnjgpLkvZzmiJDjgZnjgovloLTlkIjjga7jg5zjg4Pjgq/jgrlJROOCkui/lOOBmVxyXG4gICAgLy9cclxuICAgIC8vIFtJTl1cclxuICAgIC8vICAgYm94czog44Oc44OD44Kv44K55oOF5aCxXHJcbiAgICAvL1xyXG4gICAgLy8gW09VVF1cclxuICAgIC8vICAgYm94X2lkOiDmlrDopo/jg5zjg4Pjgq/jgrnjga7jg5zjg4Pjgq/jgrlJRFxyXG4gICAgLy9cclxuICAgIGdldE5ld0JveElkOiAoYm94cykgPT4ge1xyXG4gICAgICAgIGxldCBib3hfaWQgPSAwO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJveHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGJveHNbaV0uYm94X2lkID4gYm94X2lkKSB7XHJcbiAgICAgICAgICAgICAgICBib3hfaWQgPSBib3hzW2ldLmJveF9pZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGJveF9pZCArIDE7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vXHJcbiAgICAvLyDmlrDopo/jg5zjg4Pjgq/jgrnjgpLkvZzmiJDjgZnjgovloLTlkIjjga7mlrDopo/jgrDjg6vjg7zjg5dJROOCkui/lOOBmVxyXG4gICAgLy9cclxuICAgIC8vIFtJTl1cclxuICAgIC8vICAgYm94czog44Oc44OD44Kv44K55oOF5aCxXHJcbiAgICAvL1xyXG4gICAgLy8gW09VVF1cclxuICAgIC8vICAgZ3JvdXBfaWQ6IOaWsOimj+ODnOODg+OCr+OCueOBruOCsOODq+ODvOODl0lEXHJcbiAgICAvL1xyXG4gICAgZ2V0TmV3R3JvdXBJZDogKGJveHMpID0+IHtcclxuICAgICAgICBjb25zdCBwcmVmaXggPSAnZ3JvdXAnO1xyXG4gICAgICAgIGxldCBuYW1lO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBudW0gPSAxOyBudW0gPCA5OTk7IG51bSsrKSB7XHJcbiAgICAgICAgICAgIG5hbWUgPSBwcmVmaXggKyBudW1UbzAwMChudW0pO1xyXG5cclxuICAgICAgICAgICAgbGV0IGNoZWNrID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYm94cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGJveHNbaV0uZ3JvdXBfaWQgPT0gbmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoY2hlY2sgPT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBudW1UbzAwMChudW0pIHtcclxuICAgICAgICAgICAgbGV0IHJldDtcclxuICAgICAgICAgICAgbGV0IG51bXN0ciA9IG51bS50b1N0cmluZygxMCk7XHJcblxyXG4gICAgICAgICAgICBpZiAobnVtc3RyLmxlbmd0aCA9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICByZXQgPSAnMDAnICsgbnVtc3RyO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKG51bXN0ci5sZW5ndGggPT0gMikge1xyXG4gICAgICAgICAgICAgICAgcmV0ID0gJzAnICsgbnVtc3RyO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0ID0gbnVtc3RyO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG5hbWU7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vXHJcbiAgICAvLyDjg5zjg4Pjgq/jgrnjga7jgr/jgqTjg5fjgajntKDmnZDjga7jgr/jgqTjg5fjgYzlkIzjgZjjgYvjganjgYbjgYvjgpLov5TjgZlcclxuICAgIC8vXHJcbiAgICAvLyBbSU5dXHJcbiAgICAvLyAgIGJveF90eXBlOiDjg5zjg4Pjgq/jgrnjga7jgr/jgqTjg5dcclxuICAgIC8vICAgc296YWlfdHlwZTog57Sg5p2Q44Gu44K/44Kk44OXXHJcbiAgICAvL1xyXG4gICAgLy8gW09VVF1cclxuICAgIC8vICAgdHJ1ZTogIOWQjOOBmFxyXG4gICAgLy8gICBmYWxzZTog6YGV44GGXHJcbiAgICAvL1xyXG4gICAgaXNTYW1lQm94VHlwZUFuZFNvemFpVHlwZTogKGJveF90eXBlLCBzb3phaV90eXBlKSA9PiB7XHJcbiAgICAgICAgbGV0IGNoZWNrID0gZmFsc2U7XHJcblxyXG4gICAgICAgIHN3aXRjaCAoYm94X3R5cGUpIHtcclxuICAgICAgICBjYXNlICd0ZXh0JzpcclxuICAgICAgICAgICAgc3dpdGNoIChzb3phaV90eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ3RleHQnOlxyXG4gICAgICAgICAgICAgICAgY2hlY2sgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY2FzZSAnaW1hZ2UnOlxyXG4gICAgICAgICAgICBzd2l0Y2ggKHNvemFpX3R5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSAnaW1hZ2UnOlxyXG4gICAgICAgICAgICAgICAgY2hlY2sgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY2FzZSAndGl0bGUnOlxyXG4gICAgICAgICAgICBzd2l0Y2ggKHNvemFpX3R5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSAndGV4dCc6XHJcbiAgICAgICAgICAgICAgICBjaGVjayA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBjaGVjaztcclxuICAgIH0sXHJcbn0iLCJ2YXIgTWFwID0gcmVxdWlyZSgnLi9lczYubWFwJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdtZXRhZGF0YScpO1xudmFyIHN0b3JlID0gc2hhcmVkLnN0b3JlIHx8IChzaGFyZWQuc3RvcmUgPSBuZXcgKHJlcXVpcmUoJy4vZXM2LndlYWstbWFwJykpKCkpO1xuXG52YXIgZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCA9IGZ1bmN0aW9uICh0YXJnZXQsIHRhcmdldEtleSwgY3JlYXRlKSB7XG4gIHZhciB0YXJnZXRNZXRhZGF0YSA9IHN0b3JlLmdldCh0YXJnZXQpO1xuICBpZiAoIXRhcmdldE1ldGFkYXRhKSB7XG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgc3RvcmUuc2V0KHRhcmdldCwgdGFyZ2V0TWV0YWRhdGEgPSBuZXcgTWFwKCkpO1xuICB9XG4gIHZhciBrZXlNZXRhZGF0YSA9IHRhcmdldE1ldGFkYXRhLmdldCh0YXJnZXRLZXkpO1xuICBpZiAoIWtleU1ldGFkYXRhKSB7XG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgdGFyZ2V0TWV0YWRhdGEuc2V0KHRhcmdldEtleSwga2V5TWV0YWRhdGEgPSBuZXcgTWFwKCkpO1xuICB9IHJldHVybiBrZXlNZXRhZGF0YTtcbn07XG52YXIgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IGZ1bmN0aW9uIChNZXRhZGF0YUtleSwgTywgUCkge1xuICB2YXIgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIGZhbHNlKTtcbiAgcmV0dXJuIG1ldGFkYXRhTWFwID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IG1ldGFkYXRhTWFwLmhhcyhNZXRhZGF0YUtleSk7XG59O1xudmFyIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEgPSBmdW5jdGlvbiAoTWV0YWRhdGFLZXksIE8sIFApIHtcbiAgdmFyIG1ldGFkYXRhTWFwID0gZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCBmYWxzZSk7XG4gIHJldHVybiBtZXRhZGF0YU1hcCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogbWV0YWRhdGFNYXAuZ2V0KE1ldGFkYXRhS2V5KTtcbn07XG52YXIgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSA9IGZ1bmN0aW9uIChNZXRhZGF0YUtleSwgTWV0YWRhdGFWYWx1ZSwgTywgUCkge1xuICBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIHRydWUpLnNldChNZXRhZGF0YUtleSwgTWV0YWRhdGFWYWx1ZSk7XG59O1xudmFyIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzID0gZnVuY3Rpb24gKHRhcmdldCwgdGFyZ2V0S2V5KSB7XG4gIHZhciBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAodGFyZ2V0LCB0YXJnZXRLZXksIGZhbHNlKTtcbiAgdmFyIGtleXMgPSBbXTtcbiAgaWYgKG1ldGFkYXRhTWFwKSBtZXRhZGF0YU1hcC5mb3JFYWNoKGZ1bmN0aW9uIChfLCBrZXkpIHsga2V5cy5wdXNoKGtleSk7IH0pO1xuICByZXR1cm4ga2V5cztcbn07XG52YXIgdG9NZXRhS2V5ID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogU3RyaW5nKGl0KTtcbn07XG52YXIgZXhwID0gZnVuY3Rpb24gKE8pIHtcbiAgJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgTyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc3RvcmU6IHN0b3JlLFxuICBtYXA6IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAsXG4gIGhhczogb3JkaW5hcnlIYXNPd25NZXRhZGF0YSxcbiAgZ2V0OiBvcmRpbmFyeUdldE93bk1ldGFkYXRhLFxuICBzZXQ6IG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEsXG4gIGtleXM6IG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzLFxuICBrZXk6IHRvTWV0YUtleSxcbiAgZXhwOiBleHBcbn07XG4iLCIndXNlIHN0cmljdCc7XG5pZiAocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSkge1xuICB2YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbiAgdmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xuICB2YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xuICB2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuICB2YXIgJHR5cGVkID0gcmVxdWlyZSgnLi9fdHlwZWQnKTtcbiAgdmFyICRidWZmZXIgPSByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKTtcbiAgdmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xuICB2YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG4gIHZhciBwcm9wZXJ0eURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG4gIHZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xuICB2YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbiAgdmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbiAgdmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG4gIHZhciB0b0luZGV4ID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKTtcbiAgdmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG4gIHZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xuICB2YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG4gIHZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xuICB2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbiAgdmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG4gIHZhciBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKTtcbiAgdmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbiAgdmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xuICB2YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbiAgdmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG4gIHZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbiAgdmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xuICB2YXIgY3JlYXRlQXJyYXlNZXRob2QgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJyk7XG4gIHZhciBjcmVhdGVBcnJheUluY2x1ZGVzID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKTtcbiAgdmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbiAgdmFyIEFycmF5SXRlcmF0b3JzID0gcmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTtcbiAgdmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xuICB2YXIgJGl0ZXJEZXRlY3QgPSByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpO1xuICB2YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJyk7XG4gIHZhciBhcnJheUZpbGwgPSByZXF1aXJlKCcuL19hcnJheS1maWxsJyk7XG4gIHZhciBhcnJheUNvcHlXaXRoaW4gPSByZXF1aXJlKCcuL19hcnJheS1jb3B5LXdpdGhpbicpO1xuICB2YXIgJERQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG4gIHZhciAkR09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG4gIHZhciBkUCA9ICREUC5mO1xuICB2YXIgZ09QRCA9ICRHT1BELmY7XG4gIHZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG4gIHZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuICB2YXIgVWludDhBcnJheSA9IGdsb2JhbC5VaW50OEFycmF5O1xuICB2YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcbiAgdmFyIFNIQVJFRF9CVUZGRVIgPSAnU2hhcmVkJyArIEFSUkFZX0JVRkZFUjtcbiAgdmFyIEJZVEVTX1BFUl9FTEVNRU5UID0gJ0JZVEVTX1BFUl9FTEVNRU5UJztcbiAgdmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuICB2YXIgQXJyYXlQcm90byA9IEFycmF5W1BST1RPVFlQRV07XG4gIHZhciAkQXJyYXlCdWZmZXIgPSAkYnVmZmVyLkFycmF5QnVmZmVyO1xuICB2YXIgJERhdGFWaWV3ID0gJGJ1ZmZlci5EYXRhVmlldztcbiAgdmFyIGFycmF5Rm9yRWFjaCA9IGNyZWF0ZUFycmF5TWV0aG9kKDApO1xuICB2YXIgYXJyYXlGaWx0ZXIgPSBjcmVhdGVBcnJheU1ldGhvZCgyKTtcbiAgdmFyIGFycmF5U29tZSA9IGNyZWF0ZUFycmF5TWV0aG9kKDMpO1xuICB2YXIgYXJyYXlFdmVyeSA9IGNyZWF0ZUFycmF5TWV0aG9kKDQpO1xuICB2YXIgYXJyYXlGaW5kID0gY3JlYXRlQXJyYXlNZXRob2QoNSk7XG4gIHZhciBhcnJheUZpbmRJbmRleCA9IGNyZWF0ZUFycmF5TWV0aG9kKDYpO1xuICB2YXIgYXJyYXlJbmNsdWRlcyA9IGNyZWF0ZUFycmF5SW5jbHVkZXModHJ1ZSk7XG4gIHZhciBhcnJheUluZGV4T2YgPSBjcmVhdGVBcnJheUluY2x1ZGVzKGZhbHNlKTtcbiAgdmFyIGFycmF5VmFsdWVzID0gQXJyYXlJdGVyYXRvcnMudmFsdWVzO1xuICB2YXIgYXJyYXlLZXlzID0gQXJyYXlJdGVyYXRvcnMua2V5cztcbiAgdmFyIGFycmF5RW50cmllcyA9IEFycmF5SXRlcmF0b3JzLmVudHJpZXM7XG4gIHZhciBhcnJheUxhc3RJbmRleE9mID0gQXJyYXlQcm90by5sYXN0SW5kZXhPZjtcbiAgdmFyIGFycmF5UmVkdWNlID0gQXJyYXlQcm90by5yZWR1Y2U7XG4gIHZhciBhcnJheVJlZHVjZVJpZ2h0ID0gQXJyYXlQcm90by5yZWR1Y2VSaWdodDtcbiAgdmFyIGFycmF5Sm9pbiA9IEFycmF5UHJvdG8uam9pbjtcbiAgdmFyIGFycmF5U29ydCA9IEFycmF5UHJvdG8uc29ydDtcbiAgdmFyIGFycmF5U2xpY2UgPSBBcnJheVByb3RvLnNsaWNlO1xuICB2YXIgYXJyYXlUb1N0cmluZyA9IEFycmF5UHJvdG8udG9TdHJpbmc7XG4gIHZhciBhcnJheVRvTG9jYWxlU3RyaW5nID0gQXJyYXlQcm90by50b0xvY2FsZVN0cmluZztcbiAgdmFyIElURVJBVE9SID0gd2tzKCdpdGVyYXRvcicpO1xuICB2YXIgVEFHID0gd2tzKCd0b1N0cmluZ1RhZycpO1xuICB2YXIgVFlQRURfQ09OU1RSVUNUT1IgPSB1aWQoJ3R5cGVkX2NvbnN0cnVjdG9yJyk7XG4gIHZhciBERUZfQ09OU1RSVUNUT1IgPSB1aWQoJ2RlZl9jb25zdHJ1Y3RvcicpO1xuICB2YXIgQUxMX0NPTlNUUlVDVE9SUyA9ICR0eXBlZC5DT05TVFI7XG4gIHZhciBUWVBFRF9BUlJBWSA9ICR0eXBlZC5UWVBFRDtcbiAgdmFyIFZJRVcgPSAkdHlwZWQuVklFVztcbiAgdmFyIFdST05HX0xFTkdUSCA9ICdXcm9uZyBsZW5ndGghJztcblxuICB2YXIgJG1hcCA9IGNyZWF0ZUFycmF5TWV0aG9kKDEsIGZ1bmN0aW9uIChPLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gYWxsb2NhdGUoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSksIGxlbmd0aCk7XG4gIH0pO1xuXG4gIHZhciBMSVRUTEVfRU5ESUFOID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIHJldHVybiBuZXcgVWludDhBcnJheShuZXcgVWludDE2QXJyYXkoWzFdKS5idWZmZXIpWzBdID09PSAxO1xuICB9KTtcblxuICB2YXIgRk9SQ0VEX1NFVCA9ICEhVWludDhBcnJheSAmJiAhIVVpbnQ4QXJyYXlbUFJPVE9UWVBFXS5zZXQgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyBVaW50OEFycmF5KDEpLnNldCh7fSk7XG4gIH0pO1xuXG4gIHZhciB0b09mZnNldCA9IGZ1bmN0aW9uIChpdCwgQllURVMpIHtcbiAgICB2YXIgb2Zmc2V0ID0gdG9JbnRlZ2VyKGl0KTtcbiAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgJSBCWVRFUykgdGhyb3cgUmFuZ2VFcnJvcignV3Jvbmcgb2Zmc2V0IScpO1xuICAgIHJldHVybiBvZmZzZXQ7XG4gIH07XG5cbiAgdmFyIHZhbGlkYXRlID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgaWYgKGlzT2JqZWN0KGl0KSAmJiBUWVBFRF9BUlJBWSBpbiBpdCkgcmV0dXJuIGl0O1xuICAgIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgdHlwZWQgYXJyYXkhJyk7XG4gIH07XG5cbiAgdmFyIGFsbG9jYXRlID0gZnVuY3Rpb24gKEMsIGxlbmd0aCkge1xuICAgIGlmICghKGlzT2JqZWN0KEMpICYmIFRZUEVEX0NPTlNUUlVDVE9SIGluIEMpKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ0l0IGlzIG5vdCBhIHR5cGVkIGFycmF5IGNvbnN0cnVjdG9yIScpO1xuICAgIH0gcmV0dXJuIG5ldyBDKGxlbmd0aCk7XG4gIH07XG5cbiAgdmFyIHNwZWNpZXNGcm9tTGlzdCA9IGZ1bmN0aW9uIChPLCBsaXN0KSB7XG4gICAgcmV0dXJuIGZyb21MaXN0KHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPW0RFRl9DT05TVFJVQ1RPUl0pLCBsaXN0KTtcbiAgfTtcblxuICB2YXIgZnJvbUxpc3QgPSBmdW5jdGlvbiAoQywgbGlzdCkge1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGxlbmd0aCA9IGxpc3QubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBhbGxvY2F0ZShDLCBsZW5ndGgpO1xuICAgIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGxpc3RbaW5kZXgrK107XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICB2YXIgYWRkR2V0dGVyID0gZnVuY3Rpb24gKGl0LCBrZXksIGludGVybmFsKSB7XG4gICAgZFAoaXQsIGtleSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RbaW50ZXJuYWxdOyB9IH0pO1xuICB9O1xuXG4gIHZhciAkZnJvbSA9IGZ1bmN0aW9uIGZyb20oc291cmNlIC8qICwgbWFwZm4sIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHNvdXJjZSk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBtYXBmbiA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgICB2YXIgaXRlckZuID0gZ2V0SXRlckZuKE8pO1xuICAgIHZhciBpLCBsZW5ndGgsIHZhbHVlcywgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjtcbiAgICBpZiAoaXRlckZuICE9IHVuZGVmaW5lZCAmJiAhaXNBcnJheUl0ZXIoaXRlckZuKSkge1xuICAgICAgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKE8pLCB2YWx1ZXMgPSBbXSwgaSA9IDA7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaSsrKSB7XG4gICAgICAgIHZhbHVlcy5wdXNoKHN0ZXAudmFsdWUpO1xuICAgICAgfSBPID0gdmFsdWVzO1xuICAgIH1cbiAgICBpZiAobWFwcGluZyAmJiBhTGVuID4gMikgbWFwZm4gPSBjdHgobWFwZm4sIGFyZ3VtZW50c1syXSwgMik7XG4gICAgZm9yIChpID0gMCwgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpLCByZXN1bHQgPSBhbGxvY2F0ZSh0aGlzLCBsZW5ndGgpOyBsZW5ndGggPiBpOyBpKyspIHtcbiAgICAgIHJlc3VsdFtpXSA9IG1hcHBpbmcgPyBtYXBmbihPW2ldLCBpKSA6IE9baV07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgdmFyICRvZiA9IGZ1bmN0aW9uIG9mKC8qIC4uLml0ZW1zICovKSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgcmVzdWx0ID0gYWxsb2NhdGUodGhpcywgbGVuZ3RoKTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHJlc3VsdFtpbmRleF0gPSBhcmd1bWVudHNbaW5kZXgrK107XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBpT1MgU2FmYXJpIDYueCBmYWlscyBoZXJlXG4gIHZhciBUT19MT0NBTEVfQlVHID0gISFVaW50OEFycmF5ICYmIGZhaWxzKGZ1bmN0aW9uICgpIHsgYXJyYXlUb0xvY2FsZVN0cmluZy5jYWxsKG5ldyBVaW50OEFycmF5KDEpKTsgfSk7XG5cbiAgdmFyICR0b0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvTG9jYWxlU3RyaW5nKCkge1xuICAgIHJldHVybiBhcnJheVRvTG9jYWxlU3RyaW5nLmFwcGx5KFRPX0xPQ0FMRV9CVUcgPyBhcnJheVNsaWNlLmNhbGwodmFsaWRhdGUodGhpcykpIDogdmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgdmFyIHByb3RvID0ge1xuICAgIGNvcHlXaXRoaW46IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCAvKiAsIGVuZCAqLykge1xuICAgICAgcmV0dXJuIGFycmF5Q29weVdpdGhpbi5jYWxsKHZhbGlkYXRlKHRoaXMpLCB0YXJnZXQsIHN0YXJ0LCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUV2ZXJ5KHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBmaWxsOiBmdW5jdGlvbiBmaWxsKHZhbHVlIC8qICwgc3RhcnQsIGVuZCAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlGaWxsLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcywgYXJyYXlGaWx0ZXIodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sXG4gICAgICAgIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKSk7XG4gICAgfSxcbiAgICBmaW5kOiBmdW5jdGlvbiBmaW5kKHByZWRpY2F0ZSAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUZpbmQodmFsaWRhdGUodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZmluZEluZGV4OiBmdW5jdGlvbiBmaW5kSW5kZXgocHJlZGljYXRlIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5RmluZEluZGV4KHZhbGlkYXRlKHRoaXMpLCBwcmVkaWNhdGUsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIGFycmF5Rm9yRWFjaCh2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlJbmRleE9mKHZhbGlkYXRlKHRoaXMpLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykge1xuICAgICAgcmV0dXJuIGFycmF5SW5jbHVkZXModmFsaWRhdGUodGhpcyksIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUpvaW4uYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBsYXN0SW5kZXhPZjogZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlMYXN0SW5kZXhPZi5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIG1hcDogZnVuY3Rpb24gbWFwKG1hcGZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuICRtYXAodmFsaWRhdGUodGhpcyksIG1hcGZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheVJlZHVjZS5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHJlZHVjZVJpZ2h0OiBmdW5jdGlvbiByZWR1Y2VSaWdodChjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheVJlZHVjZVJpZ2h0LmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgcmV2ZXJzZTogZnVuY3Rpb24gcmV2ZXJzZSgpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHZhciBsZW5ndGggPSB2YWxpZGF0ZSh0aGF0KS5sZW5ndGg7XG4gICAgICB2YXIgbWlkZGxlID0gTWF0aC5mbG9vcihsZW5ndGggLyAyKTtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICB2YXIgdmFsdWU7XG4gICAgICB3aGlsZSAoaW5kZXggPCBtaWRkbGUpIHtcbiAgICAgICAgdmFsdWUgPSB0aGF0W2luZGV4XTtcbiAgICAgICAgdGhhdFtpbmRleCsrXSA9IHRoYXRbLS1sZW5ndGhdO1xuICAgICAgICB0aGF0W2xlbmd0aF0gPSB2YWx1ZTtcbiAgICAgIH0gcmV0dXJuIHRoYXQ7XG4gICAgfSxcbiAgICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlTb21lKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBzb3J0OiBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbikge1xuICAgICAgcmV0dXJuIGFycmF5U29ydC5jYWxsKHZhbGlkYXRlKHRoaXMpLCBjb21wYXJlZm4pO1xuICAgIH0sXG4gICAgc3ViYXJyYXk6IGZ1bmN0aW9uIHN1YmFycmF5KGJlZ2luLCBlbmQpIHtcbiAgICAgIHZhciBPID0gdmFsaWRhdGUodGhpcyk7XG4gICAgICB2YXIgbGVuZ3RoID0gTy5sZW5ndGg7XG4gICAgICB2YXIgJGJlZ2luID0gdG9BYnNvbHV0ZUluZGV4KGJlZ2luLCBsZW5ndGgpO1xuICAgICAgcmV0dXJuIG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSkpKFxuICAgICAgICBPLmJ1ZmZlcixcbiAgICAgICAgTy5ieXRlT2Zmc2V0ICsgJGJlZ2luICogTy5CWVRFU19QRVJfRUxFTUVOVCxcbiAgICAgICAgdG9MZW5ndGgoKGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuZ3RoKSkgLSAkYmVnaW4pXG4gICAgICApO1xuICAgIH1cbiAgfTtcblxuICB2YXIgJHNsaWNlID0gZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcywgYXJyYXlTbGljZS5jYWxsKHZhbGlkYXRlKHRoaXMpLCBzdGFydCwgZW5kKSk7XG4gIH07XG5cbiAgdmFyICRzZXQgPSBmdW5jdGlvbiBzZXQoYXJyYXlMaWtlIC8qICwgb2Zmc2V0ICovKSB7XG4gICAgdmFsaWRhdGUodGhpcyk7XG4gICAgdmFyIG9mZnNldCA9IHRvT2Zmc2V0KGFyZ3VtZW50c1sxXSwgMSk7XG4gICAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuICAgIHZhciBzcmMgPSB0b09iamVjdChhcnJheUxpa2UpO1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aChzcmMubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIGlmIChsZW4gKyBvZmZzZXQgPiBsZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICB3aGlsZSAoaW5kZXggPCBsZW4pIHRoaXNbb2Zmc2V0ICsgaW5kZXhdID0gc3JjW2luZGV4KytdO1xuICB9O1xuXG4gIHZhciAkaXRlcmF0b3JzID0ge1xuICAgIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoKSB7XG4gICAgICByZXR1cm4gYXJyYXlFbnRyaWVzLmNhbGwodmFsaWRhdGUodGhpcykpO1xuICAgIH0sXG4gICAga2V5czogZnVuY3Rpb24ga2V5cygpIHtcbiAgICAgIHJldHVybiBhcnJheUtleXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7XG4gICAgfSxcbiAgICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcygpIHtcbiAgICAgIHJldHVybiBhcnJheVZhbHVlcy5jYWxsKHZhbGlkYXRlKHRoaXMpKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzVEFJbmRleCA9IGZ1bmN0aW9uICh0YXJnZXQsIGtleSkge1xuICAgIHJldHVybiBpc09iamVjdCh0YXJnZXQpXG4gICAgICAmJiB0YXJnZXRbVFlQRURfQVJSQVldXG4gICAgICAmJiB0eXBlb2Yga2V5ICE9ICdzeW1ib2wnXG4gICAgICAmJiBrZXkgaW4gdGFyZ2V0XG4gICAgICAmJiBTdHJpbmcoK2tleSkgPT0gU3RyaW5nKGtleSk7XG4gIH07XG4gIHZhciAkZ2V0RGVzYyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkge1xuICAgIHJldHVybiBpc1RBSW5kZXgodGFyZ2V0LCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKVxuICAgICAgPyBwcm9wZXJ0eURlc2MoMiwgdGFyZ2V0W2tleV0pXG4gICAgICA6IGdPUEQodGFyZ2V0LCBrZXkpO1xuICB9O1xuICB2YXIgJHNldERlc2MgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIGlmIChpc1RBSW5kZXgodGFyZ2V0LCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKVxuICAgICAgJiYgaXNPYmplY3QoZGVzYylcbiAgICAgICYmIGhhcyhkZXNjLCAndmFsdWUnKVxuICAgICAgJiYgIWhhcyhkZXNjLCAnZ2V0JylcbiAgICAgICYmICFoYXMoZGVzYywgJ3NldCcpXG4gICAgICAvLyBUT0RPOiBhZGQgdmFsaWRhdGlvbiBkZXNjcmlwdG9yIHcvbyBjYWxsaW5nIGFjY2Vzc29yc1xuICAgICAgJiYgIWRlc2MuY29uZmlndXJhYmxlXG4gICAgICAmJiAoIWhhcyhkZXNjLCAnd3JpdGFibGUnKSB8fCBkZXNjLndyaXRhYmxlKVxuICAgICAgJiYgKCFoYXMoZGVzYywgJ2VudW1lcmFibGUnKSB8fCBkZXNjLmVudW1lcmFibGUpXG4gICAgKSB7XG4gICAgICB0YXJnZXRba2V5XSA9IGRlc2MudmFsdWU7XG4gICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH0gcmV0dXJuIGRQKHRhcmdldCwga2V5LCBkZXNjKTtcbiAgfTtcblxuICBpZiAoIUFMTF9DT05TVFJVQ1RPUlMpIHtcbiAgICAkR09QRC5mID0gJGdldERlc2M7XG4gICAgJERQLmYgPSAkc2V0RGVzYztcbiAgfVxuXG4gICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIUFMTF9DT05TVFJVQ1RPUlMsICdPYmplY3QnLCB7XG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0RGVzYyxcbiAgICBkZWZpbmVQcm9wZXJ0eTogJHNldERlc2NcbiAgfSk7XG5cbiAgaWYgKGZhaWxzKGZ1bmN0aW9uICgpIHsgYXJyYXlUb1N0cmluZy5jYWxsKHt9KTsgfSkpIHtcbiAgICBhcnJheVRvU3RyaW5nID0gYXJyYXlUb0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgcmV0dXJuIGFycmF5Sm9pbi5jYWxsKHRoaXMpO1xuICAgIH07XG4gIH1cblxuICB2YXIgJFR5cGVkQXJyYXlQcm90b3R5cGUkID0gcmVkZWZpbmVBbGwoe30sIHByb3RvKTtcbiAgcmVkZWZpbmVBbGwoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAkaXRlcmF0b3JzKTtcbiAgaGlkZSgkVHlwZWRBcnJheVByb3RvdHlwZSQsIElURVJBVE9SLCAkaXRlcmF0b3JzLnZhbHVlcyk7XG4gIHJlZGVmaW5lQWxsKCRUeXBlZEFycmF5UHJvdG90eXBlJCwge1xuICAgIHNsaWNlOiAkc2xpY2UsXG4gICAgc2V0OiAkc2V0LFxuICAgIGNvbnN0cnVjdG9yOiBmdW5jdGlvbiAoKSB7IC8qIG5vb3AgKi8gfSxcbiAgICB0b1N0cmluZzogYXJyYXlUb1N0cmluZyxcbiAgICB0b0xvY2FsZVN0cmluZzogJHRvTG9jYWxlU3RyaW5nXG4gIH0pO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnVmZmVyJywgJ2InKTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2J5dGVPZmZzZXQnLCAnbycpO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnl0ZUxlbmd0aCcsICdsJyk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdsZW5ndGgnLCAnZScpO1xuICBkUCgkVHlwZWRBcnJheVByb3RvdHlwZSQsIFRBRywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpc1tUWVBFRF9BUlJBWV07IH1cbiAgfSk7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1zdGF0ZW1lbnRzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgQllURVMsIHdyYXBwZXIsIENMQU1QRUQpIHtcbiAgICBDTEFNUEVEID0gISFDTEFNUEVEO1xuICAgIHZhciBOQU1FID0gS0VZICsgKENMQU1QRUQgPyAnQ2xhbXBlZCcgOiAnJykgKyAnQXJyYXknO1xuICAgIHZhciBHRVRURVIgPSAnZ2V0JyArIEtFWTtcbiAgICB2YXIgU0VUVEVSID0gJ3NldCcgKyBLRVk7XG4gICAgdmFyIFR5cGVkQXJyYXkgPSBnbG9iYWxbTkFNRV07XG4gICAgdmFyIEJhc2UgPSBUeXBlZEFycmF5IHx8IHt9O1xuICAgIHZhciBUQUMgPSBUeXBlZEFycmF5ICYmIGdldFByb3RvdHlwZU9mKFR5cGVkQXJyYXkpO1xuICAgIHZhciBGT1JDRUQgPSAhVHlwZWRBcnJheSB8fCAhJHR5cGVkLkFCVjtcbiAgICB2YXIgTyA9IHt9O1xuICAgIHZhciBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheSAmJiBUeXBlZEFycmF5W1BST1RPVFlQRV07XG4gICAgdmFyIGdldHRlciA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCkge1xuICAgICAgdmFyIGRhdGEgPSB0aGF0Ll9kO1xuICAgICAgcmV0dXJuIGRhdGEudltHRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLm8sIExJVFRMRV9FTkRJQU4pO1xuICAgIH07XG4gICAgdmFyIHNldHRlciA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gdGhhdC5fZDtcbiAgICAgIGlmIChDTEFNUEVEKSB2YWx1ZSA9ICh2YWx1ZSA9IE1hdGgucm91bmQodmFsdWUpKSA8IDAgPyAwIDogdmFsdWUgPiAweGZmID8gMHhmZiA6IHZhbHVlICYgMHhmZjtcbiAgICAgIGRhdGEudltTRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLm8sIHZhbHVlLCBMSVRUTEVfRU5ESUFOKTtcbiAgICB9O1xuICAgIHZhciBhZGRFbGVtZW50ID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4KSB7XG4gICAgICBkUCh0aGF0LCBpbmRleCwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gZ2V0dGVyKHRoaXMsIGluZGV4KTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gc2V0dGVyKHRoaXMsIGluZGV4LCB2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH07XG4gICAgaWYgKEZPUkNFRCkge1xuICAgICAgVHlwZWRBcnJheSA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGRhdGEsICRvZmZzZXQsICRsZW5ndGgpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBUeXBlZEFycmF5LCBOQU1FLCAnX2QnKTtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgdmFyIG9mZnNldCA9IDA7XG4gICAgICAgIHZhciBidWZmZXIsIGJ5dGVMZW5ndGgsIGxlbmd0aCwga2xhc3M7XG4gICAgICAgIGlmICghaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgICAgICBsZW5ndGggPSB0b0luZGV4KGRhdGEpO1xuICAgICAgICAgIGJ5dGVMZW5ndGggPSBsZW5ndGggKiBCWVRFUztcbiAgICAgICAgICBidWZmZXIgPSBuZXcgJEFycmF5QnVmZmVyKGJ5dGVMZW5ndGgpO1xuICAgICAgICB9IGVsc2UgaWYgKGRhdGEgaW5zdGFuY2VvZiAkQXJyYXlCdWZmZXIgfHwgKGtsYXNzID0gY2xhc3NvZihkYXRhKSkgPT0gQVJSQVlfQlVGRkVSIHx8IGtsYXNzID09IFNIQVJFRF9CVUZGRVIpIHtcbiAgICAgICAgICBidWZmZXIgPSBkYXRhO1xuICAgICAgICAgIG9mZnNldCA9IHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKTtcbiAgICAgICAgICB2YXIgJGxlbiA9IGRhdGEuYnl0ZUxlbmd0aDtcbiAgICAgICAgICBpZiAoJGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoJGxlbiAlIEJZVEVTKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gJGxlbiAtIG9mZnNldDtcbiAgICAgICAgICAgIGlmIChieXRlTGVuZ3RoIDwgMCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gdG9MZW5ndGgoJGxlbmd0aCkgKiBCWVRFUztcbiAgICAgICAgICAgIGlmIChieXRlTGVuZ3RoICsgb2Zmc2V0ID4gJGxlbikgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZW5ndGggPSBieXRlTGVuZ3RoIC8gQllURVM7XG4gICAgICAgIH0gZWxzZSBpZiAoVFlQRURfQVJSQVkgaW4gZGF0YSkge1xuICAgICAgICAgIHJldHVybiBmcm9tTGlzdChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gJGZyb20uY2FsbChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBoaWRlKHRoYXQsICdfZCcsIHtcbiAgICAgICAgICBiOiBidWZmZXIsXG4gICAgICAgICAgbzogb2Zmc2V0LFxuICAgICAgICAgIGw6IGJ5dGVMZW5ndGgsXG4gICAgICAgICAgZTogbGVuZ3RoLFxuICAgICAgICAgIHY6IG5ldyAkRGF0YVZpZXcoYnVmZmVyKVxuICAgICAgICB9KTtcbiAgICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSBhZGRFbGVtZW50KHRoYXQsIGluZGV4KyspO1xuICAgICAgfSk7XG4gICAgICBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheVtQUk9UT1RZUEVdID0gY3JlYXRlKCRUeXBlZEFycmF5UHJvdG90eXBlJCk7XG4gICAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsICdjb25zdHJ1Y3RvcicsIFR5cGVkQXJyYXkpO1xuICAgIH0gZWxzZSBpZiAoIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIFR5cGVkQXJyYXkoMSk7XG4gICAgfSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIG5ldyBUeXBlZEFycmF5KC0xKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICB9KSB8fCAhJGl0ZXJEZXRlY3QoZnVuY3Rpb24gKGl0ZXIpIHtcbiAgICAgIG5ldyBUeXBlZEFycmF5KCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVHlwZWRBcnJheShudWxsKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIG5ldyBUeXBlZEFycmF5KDEuNSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVHlwZWRBcnJheShpdGVyKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICB9LCB0cnVlKSkge1xuICAgICAgVHlwZWRBcnJheSA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGRhdGEsICRvZmZzZXQsICRsZW5ndGgpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBUeXBlZEFycmF5LCBOQU1FKTtcbiAgICAgICAgdmFyIGtsYXNzO1xuICAgICAgICAvLyBgd3NgIG1vZHVsZSBidWcsIHRlbXBvcmFyaWx5IHJlbW92ZSB2YWxpZGF0aW9uIGxlbmd0aCBmb3IgVWludDhBcnJheVxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vd2Vic29ja2V0cy93cy9wdWxsLzY0NVxuICAgICAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSByZXR1cm4gbmV3IEJhc2UodG9JbmRleChkYXRhKSk7XG4gICAgICAgIGlmIChkYXRhIGluc3RhbmNlb2YgJEFycmF5QnVmZmVyIHx8IChrbGFzcyA9IGNsYXNzb2YoZGF0YSkpID09IEFSUkFZX0JVRkZFUiB8fCBrbGFzcyA9PSBTSEFSRURfQlVGRkVSKSB7XG4gICAgICAgICAgcmV0dXJuICRsZW5ndGggIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBuZXcgQmFzZShkYXRhLCB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUyksICRsZW5ndGgpXG4gICAgICAgICAgICA6ICRvZmZzZXQgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICA/IG5ldyBCYXNlKGRhdGEsIHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKSlcbiAgICAgICAgICAgICAgOiBuZXcgQmFzZShkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoVFlQRURfQVJSQVkgaW4gZGF0YSkgcmV0dXJuIGZyb21MaXN0KFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgICByZXR1cm4gJGZyb20uY2FsbChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgIH0pO1xuICAgICAgYXJyYXlGb3JFYWNoKFRBQyAhPT0gRnVuY3Rpb24ucHJvdG90eXBlID8gZ09QTihCYXNlKS5jb25jYXQoZ09QTihUQUMpKSA6IGdPUE4oQmFzZSksIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCEoa2V5IGluIFR5cGVkQXJyYXkpKSBoaWRlKFR5cGVkQXJyYXksIGtleSwgQmFzZVtrZXldKTtcbiAgICAgIH0pO1xuICAgICAgVHlwZWRBcnJheVtQUk9UT1RZUEVdID0gVHlwZWRBcnJheVByb3RvdHlwZTtcbiAgICAgIGlmICghTElCUkFSWSkgVHlwZWRBcnJheVByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFR5cGVkQXJyYXk7XG4gICAgfVxuICAgIHZhciAkbmF0aXZlSXRlcmF0b3IgPSBUeXBlZEFycmF5UHJvdG90eXBlW0lURVJBVE9SXTtcbiAgICB2YXIgQ09SUkVDVF9JVEVSX05BTUUgPSAhISRuYXRpdmVJdGVyYXRvclxuICAgICAgJiYgKCRuYXRpdmVJdGVyYXRvci5uYW1lID09ICd2YWx1ZXMnIHx8ICRuYXRpdmVJdGVyYXRvci5uYW1lID09IHVuZGVmaW5lZCk7XG4gICAgdmFyICRpdGVyYXRvciA9ICRpdGVyYXRvcnMudmFsdWVzO1xuICAgIGhpZGUoVHlwZWRBcnJheSwgVFlQRURfQ09OU1RSVUNUT1IsIHRydWUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgVFlQRURfQVJSQVksIE5BTUUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgVklFVywgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBERUZfQ09OU1RSVUNUT1IsIFR5cGVkQXJyYXkpO1xuXG4gICAgaWYgKENMQU1QRUQgPyBuZXcgVHlwZWRBcnJheSgxKVtUQUddICE9IE5BTUUgOiAhKFRBRyBpbiBUeXBlZEFycmF5UHJvdG90eXBlKSkge1xuICAgICAgZFAoVHlwZWRBcnJheVByb3RvdHlwZSwgVEFHLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gTkFNRTsgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgT1tOQU1FXSA9IFR5cGVkQXJyYXk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChUeXBlZEFycmF5ICE9IEJhc2UpLCBPKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5TLCBOQU1FLCB7XG4gICAgICBCWVRFU19QRVJfRUxFTUVOVDogQllURVNcbiAgICB9KTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkgeyBCYXNlLm9mLmNhbGwoVHlwZWRBcnJheSwgMSk7IH0pLCBOQU1FLCB7XG4gICAgICBmcm9tOiAkZnJvbSxcbiAgICAgIG9mOiAkb2ZcbiAgICB9KTtcblxuICAgIGlmICghKEJZVEVTX1BFUl9FTEVNRU5UIGluIFR5cGVkQXJyYXlQcm90b3R5cGUpKSBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIEJZVEVTX1BFUl9FTEVNRU5ULCBCWVRFUyk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCwgTkFNRSwgcHJvdG8pO1xuXG4gICAgc2V0U3BlY2llcyhOQU1FKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogRk9SQ0VEX1NFVCwgTkFNRSwgeyBzZXQ6ICRzZXQgfSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFDT1JSRUNUX0lURVJfTkFNRSwgTkFNRSwgJGl0ZXJhdG9ycyk7XG5cbiAgICBpZiAoIUxJQlJBUlkgJiYgVHlwZWRBcnJheVByb3RvdHlwZS50b1N0cmluZyAhPSBhcnJheVRvU3RyaW5nKSBUeXBlZEFycmF5UHJvdG90eXBlLnRvU3RyaW5nID0gYXJyYXlUb1N0cmluZztcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgbmV3IFR5cGVkQXJyYXkoMSkuc2xpY2UoKTtcbiAgICB9KSwgTkFNRSwgeyBzbGljZTogJHNsaWNlIH0pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIFsxLCAyXS50b0xvY2FsZVN0cmluZygpICE9IG5ldyBUeXBlZEFycmF5KFsxLCAyXSkudG9Mb2NhbGVTdHJpbmcoKTtcbiAgICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgVHlwZWRBcnJheVByb3RvdHlwZS50b0xvY2FsZVN0cmluZy5jYWxsKFsxLCAyXSk7XG4gICAgfSkpLCBOQU1FLCB7IHRvTG9jYWxlU3RyaW5nOiAkdG9Mb2NhbGVTdHJpbmcgfSk7XG5cbiAgICBJdGVyYXRvcnNbTkFNRV0gPSBDT1JSRUNUX0lURVJfTkFNRSA/ICRuYXRpdmVJdGVyYXRvciA6ICRpdGVyYXRvcjtcbiAgICBpZiAoIUxJQlJBUlkgJiYgIUNPUlJFQ1RfSVRFUl9OQU1FKSBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIElURVJBVE9SLCAkaXRlcmF0b3IpO1xuICB9O1xufSBlbHNlIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuIiwiaW1wb3J0IHsga1RydWUsIG5vb3AgfSBmcm9tICcuL3V0aWxzJztcblxuZXhwb3J0IHZhciBCVUZGRVJfT1ZFUkZMT1cgPSBcIkNoYW5uZWwncyBCdWZmZXIgb3ZlcmZsb3chXCI7XG5cbnZhciBPTl9PVkVSRkxPV19USFJPVyA9IDE7XG52YXIgT05fT1ZFUkZMT1dfRFJPUCA9IDI7XG52YXIgT05fT1ZFUkZMT1dfU0xJREUgPSAzO1xudmFyIE9OX09WRVJGTE9XX0VYUEFORCA9IDQ7XG5cbnZhciB6ZXJvQnVmZmVyID0geyBpc0VtcHR5OiBrVHJ1ZSwgcHV0OiBub29wLCB0YWtlOiBub29wIH07XG5cbmZ1bmN0aW9uIHJpbmdCdWZmZXIoKSB7XG4gIHZhciBsaW1pdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMTA7XG4gIHZhciBvdmVyZmxvd0FjdGlvbiA9IGFyZ3VtZW50c1sxXTtcblxuICB2YXIgYXJyID0gbmV3IEFycmF5KGxpbWl0KTtcbiAgdmFyIGxlbmd0aCA9IDA7XG4gIHZhciBwdXNoSW5kZXggPSAwO1xuICB2YXIgcG9wSW5kZXggPSAwO1xuXG4gIHZhciBwdXNoID0gZnVuY3Rpb24gcHVzaChpdCkge1xuICAgIGFycltwdXNoSW5kZXhdID0gaXQ7XG4gICAgcHVzaEluZGV4ID0gKHB1c2hJbmRleCArIDEpICUgbGltaXQ7XG4gICAgbGVuZ3RoKys7XG4gIH07XG5cbiAgdmFyIHRha2UgPSBmdW5jdGlvbiB0YWtlKCkge1xuICAgIGlmIChsZW5ndGggIT0gMCkge1xuICAgICAgdmFyIGl0ID0gYXJyW3BvcEluZGV4XTtcbiAgICAgIGFycltwb3BJbmRleF0gPSBudWxsO1xuICAgICAgbGVuZ3RoLS07XG4gICAgICBwb3BJbmRleCA9IChwb3BJbmRleCArIDEpICUgbGltaXQ7XG4gICAgICByZXR1cm4gaXQ7XG4gICAgfVxuICB9O1xuXG4gIHZhciBmbHVzaCA9IGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgIHZhciBpdGVtcyA9IFtdO1xuICAgIHdoaWxlIChsZW5ndGgpIHtcbiAgICAgIGl0ZW1zLnB1c2godGFrZSgpKTtcbiAgICB9XG4gICAgcmV0dXJuIGl0ZW1zO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgaXNFbXB0eTogZnVuY3Rpb24gaXNFbXB0eSgpIHtcbiAgICAgIHJldHVybiBsZW5ndGggPT0gMDtcbiAgICB9LFxuICAgIHB1dDogZnVuY3Rpb24gcHV0KGl0KSB7XG4gICAgICBpZiAobGVuZ3RoIDwgbGltaXQpIHtcbiAgICAgICAgcHVzaChpdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgZG91YmxlZExpbWl0ID0gdm9pZCAwO1xuICAgICAgICBzd2l0Y2ggKG92ZXJmbG93QWN0aW9uKSB7XG4gICAgICAgICAgY2FzZSBPTl9PVkVSRkxPV19USFJPVzpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihCVUZGRVJfT1ZFUkZMT1cpO1xuICAgICAgICAgIGNhc2UgT05fT1ZFUkZMT1dfU0xJREU6XG4gICAgICAgICAgICBhcnJbcHVzaEluZGV4XSA9IGl0O1xuICAgICAgICAgICAgcHVzaEluZGV4ID0gKHB1c2hJbmRleCArIDEpICUgbGltaXQ7XG4gICAgICAgICAgICBwb3BJbmRleCA9IHB1c2hJbmRleDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgT05fT1ZFUkZMT1dfRVhQQU5EOlxuICAgICAgICAgICAgZG91YmxlZExpbWl0ID0gMiAqIGxpbWl0O1xuXG4gICAgICAgICAgICBhcnIgPSBmbHVzaCgpO1xuXG4gICAgICAgICAgICBsZW5ndGggPSBhcnIubGVuZ3RoO1xuICAgICAgICAgICAgcHVzaEluZGV4ID0gYXJyLmxlbmd0aDtcbiAgICAgICAgICAgIHBvcEluZGV4ID0gMDtcblxuICAgICAgICAgICAgYXJyLmxlbmd0aCA9IGRvdWJsZWRMaW1pdDtcbiAgICAgICAgICAgIGxpbWl0ID0gZG91YmxlZExpbWl0O1xuXG4gICAgICAgICAgICBwdXNoKGl0KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgLy8gRFJPUFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICB0YWtlOiB0YWtlLFxuICAgIGZsdXNoOiBmbHVzaFxuICB9O1xufVxuXG5leHBvcnQgdmFyIGJ1ZmZlcnMgPSB7XG4gIG5vbmU6IGZ1bmN0aW9uIG5vbmUoKSB7XG4gICAgcmV0dXJuIHplcm9CdWZmZXI7XG4gIH0sXG4gIGZpeGVkOiBmdW5jdGlvbiBmaXhlZChsaW1pdCkge1xuICAgIHJldHVybiByaW5nQnVmZmVyKGxpbWl0LCBPTl9PVkVSRkxPV19USFJPVyk7XG4gIH0sXG4gIGRyb3BwaW5nOiBmdW5jdGlvbiBkcm9wcGluZyhsaW1pdCkge1xuICAgIHJldHVybiByaW5nQnVmZmVyKGxpbWl0LCBPTl9PVkVSRkxPV19EUk9QKTtcbiAgfSxcbiAgc2xpZGluZzogZnVuY3Rpb24gc2xpZGluZyhsaW1pdCkge1xuICAgIHJldHVybiByaW5nQnVmZmVyKGxpbWl0LCBPTl9PVkVSRkxPV19TTElERSk7XG4gIH0sXG4gIGV4cGFuZGluZzogZnVuY3Rpb24gZXhwYW5kaW5nKGluaXRpYWxTaXplKSB7XG4gICAgcmV0dXJuIHJpbmdCdWZmZXIoaW5pdGlhbFNpemUsIE9OX09WRVJGTE9XX0VYUEFORCk7XG4gIH1cbn07IiwiLy8gMjIuMS4zLjMxIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxudmFyIFVOU0NPUEFCTEVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3Vuc2NvcGFibGVzJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcbmlmIChBcnJheVByb3RvW1VOU0NPUEFCTEVTXSA9PSB1bmRlZmluZWQpIHJlcXVpcmUoJy4vX2hpZGUnKShBcnJheVByb3RvLCBVTlNDT1BBQkxFUywge30pO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIEFycmF5UHJvdG9bVU5TQ09QQUJMRVNdW2tleV0gPSB0cnVlO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZmFsc2U7XG4iLCJ2YXIgTUVUQSA9IHJlcXVpcmUoJy4vX3VpZCcpKCdtZXRhJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBzZXREZXNjID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBpZCA9IDA7XG52YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZSB8fCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0cnVlO1xufTtcbnZhciBGUkVFWkUgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBpc0V4dGVuc2libGUoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KSk7XG59KTtcbnZhciBzZXRNZXRhID0gZnVuY3Rpb24gKGl0KSB7XG4gIHNldERlc2MoaXQsIE1FVEEsIHsgdmFsdWU6IHtcbiAgICBpOiAnTycgKyArK2lkLCAvLyBvYmplY3QgSURcbiAgICB3OiB7fSAgICAgICAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IH0pO1xufTtcbnZhciBmYXN0S2V5ID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgLy8gcmV0dXJuIHByaW1pdGl2ZSB3aXRoIHByZWZpeFxuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyA/ICdTJyA6ICdQJykgKyBpdDtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiAnRic7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuICdFJztcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gb2JqZWN0IElEXG4gIH0gcmV0dXJuIGl0W01FVEFdLmk7XG59O1xudmFyIGdldFdlYWsgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICBpZiAoIWhhcyhpdCwgTUVUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuIHRydWU7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuIGZhbHNlO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YShpdCk7XG4gIC8vIHJldHVybiBoYXNoIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gcmV0dXJuIGl0W01FVEFdLnc7XG59O1xuLy8gYWRkIG1ldGFkYXRhIG9uIGZyZWV6ZS1mYW1pbHkgbWV0aG9kcyBjYWxsaW5nXG52YXIgb25GcmVlemUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKEZSRUVaRSAmJiBtZXRhLk5FRUQgJiYgaXNFeHRlbnNpYmxlKGl0KSAmJiAhaGFzKGl0LCBNRVRBKSkgc2V0TWV0YShpdCk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgbWV0YSA9IG1vZHVsZS5leHBvcnRzID0ge1xuICBLRVk6IE1FVEEsXG4gIE5FRUQ6IGZhbHNlLFxuICBmYXN0S2V5OiBmYXN0S2V5LFxuICBnZXRXZWFrOiBnZXRXZWFrLFxuICBvbkZyZWV6ZTogb25GcmVlemVcbn07XG4iLCJpbXBvcnQgeyBpcywgbWFrZUl0ZXJhdG9yIH0gZnJvbSAnLi4vdXRpbHMnO1xuXG52YXIgZG9uZSA9IHsgZG9uZTogdHJ1ZSwgdmFsdWU6IHVuZGVmaW5lZCB9O1xuZXhwb3J0IHZhciBxRW5kID0ge307XG5cbmV4cG9ydCBmdW5jdGlvbiBzYWZlTmFtZShwYXR0ZXJuT3JDaGFubmVsKSB7XG4gIGlmIChpcy5jaGFubmVsKHBhdHRlcm5PckNoYW5uZWwpKSB7XG4gICAgcmV0dXJuICdjaGFubmVsJztcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHBhdHRlcm5PckNoYW5uZWwpKSB7XG4gICAgcmV0dXJuIFN0cmluZyhwYXR0ZXJuT3JDaGFubmVsLm1hcChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICAgIHJldHVybiBTdHJpbmcoZW50cnkpO1xuICAgIH0pKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gU3RyaW5nKHBhdHRlcm5PckNoYW5uZWwpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZzbUl0ZXJhdG9yKGZzbSwgcTApIHtcbiAgdmFyIG5hbWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6ICdpdGVyYXRvcic7XG5cbiAgdmFyIHVwZGF0ZVN0YXRlID0gdm9pZCAwLFxuICAgICAgcU5leHQgPSBxMDtcblxuICBmdW5jdGlvbiBuZXh0KGFyZywgZXJyb3IpIHtcbiAgICBpZiAocU5leHQgPT09IHFFbmQpIHtcbiAgICAgIHJldHVybiBkb25lO1xuICAgIH1cblxuICAgIGlmIChlcnJvcikge1xuICAgICAgcU5leHQgPSBxRW5kO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfSBlbHNlIHtcbiAgICAgIHVwZGF0ZVN0YXRlICYmIHVwZGF0ZVN0YXRlKGFyZyk7XG5cbiAgICAgIHZhciBfZnNtJHFOZXh0ID0gZnNtW3FOZXh0XSgpLFxuICAgICAgICAgIHEgPSBfZnNtJHFOZXh0WzBdLFxuICAgICAgICAgIG91dHB1dCA9IF9mc20kcU5leHRbMV0sXG4gICAgICAgICAgX3VwZGF0ZVN0YXRlID0gX2ZzbSRxTmV4dFsyXTtcblxuICAgICAgcU5leHQgPSBxO1xuICAgICAgdXBkYXRlU3RhdGUgPSBfdXBkYXRlU3RhdGU7XG4gICAgICByZXR1cm4gcU5leHQgPT09IHFFbmQgPyBkb25lIDogb3V0cHV0O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtYWtlSXRlcmF0b3IobmV4dCwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgcmV0dXJuIG5leHQobnVsbCwgZXJyb3IpO1xuICB9LCBuYW1lLCB0cnVlKTtcbn0iLCJpbXBvcnQgZnNtSXRlcmF0b3IsIHsgcUVuZCwgc2FmZU5hbWUgfSBmcm9tICcuL2ZzbUl0ZXJhdG9yJztcbmltcG9ydCB7IHRha2UsIGZvcmsgfSBmcm9tICcuLi9pbyc7XG5pbXBvcnQgeyBFTkQgfSBmcm9tICcuLi9jaGFubmVsJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdGFrZUV2ZXJ5KHBhdHRlcm5PckNoYW5uZWwsIHdvcmtlcikge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4gPiAyID8gX2xlbiAtIDIgOiAwKSwgX2tleSA9IDI7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXkgLSAyXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHZhciB5VGFrZSA9IHsgZG9uZTogZmFsc2UsIHZhbHVlOiB0YWtlKHBhdHRlcm5PckNoYW5uZWwpIH07XG4gIHZhciB5Rm9yayA9IGZ1bmN0aW9uIHlGb3JrKGFjKSB7XG4gICAgcmV0dXJuIHsgZG9uZTogZmFsc2UsIHZhbHVlOiBmb3JrLmFwcGx5KHVuZGVmaW5lZCwgW3dvcmtlcl0uY29uY2F0KGFyZ3MsIFthY10pKSB9O1xuICB9O1xuXG4gIHZhciBhY3Rpb24gPSB2b2lkIDAsXG4gICAgICBzZXRBY3Rpb24gPSBmdW5jdGlvbiBzZXRBY3Rpb24oYWMpIHtcbiAgICByZXR1cm4gYWN0aW9uID0gYWM7XG4gIH07XG5cbiAgcmV0dXJuIGZzbUl0ZXJhdG9yKHtcbiAgICBxMTogZnVuY3Rpb24gcTEoKSB7XG4gICAgICByZXR1cm4gWydxMicsIHlUYWtlLCBzZXRBY3Rpb25dO1xuICAgIH0sXG4gICAgcTI6IGZ1bmN0aW9uIHEyKCkge1xuICAgICAgcmV0dXJuIGFjdGlvbiA9PT0gRU5EID8gW3FFbmRdIDogWydxMScsIHlGb3JrKGFjdGlvbildO1xuICAgIH1cbiAgfSwgJ3ExJywgJ3Rha2VFdmVyeSgnICsgc2FmZU5hbWUocGF0dGVybk9yQ2hhbm5lbCkgKyAnLCAnICsgd29ya2VyLm5hbWUgKyAnKScpO1xufSIsImltcG9ydCBmc21JdGVyYXRvciwgeyBxRW5kLCBzYWZlTmFtZSB9IGZyb20gJy4vZnNtSXRlcmF0b3InO1xuaW1wb3J0IHsgY2FuY2VsLCB0YWtlLCBmb3JrIH0gZnJvbSAnLi4vaW8nO1xuaW1wb3J0IHsgRU5EIH0gZnJvbSAnLi4vY2hhbm5lbCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRha2VMYXRlc3QocGF0dGVybk9yQ2hhbm5lbCwgd29ya2VyKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiA+IDIgPyBfbGVuIC0gMiA6IDApLCBfa2V5ID0gMjsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleSAtIDJdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgdmFyIHlUYWtlID0geyBkb25lOiBmYWxzZSwgdmFsdWU6IHRha2UocGF0dGVybk9yQ2hhbm5lbCkgfTtcbiAgdmFyIHlGb3JrID0gZnVuY3Rpb24geUZvcmsoYWMpIHtcbiAgICByZXR1cm4geyBkb25lOiBmYWxzZSwgdmFsdWU6IGZvcmsuYXBwbHkodW5kZWZpbmVkLCBbd29ya2VyXS5jb25jYXQoYXJncywgW2FjXSkpIH07XG4gIH07XG4gIHZhciB5Q2FuY2VsID0gZnVuY3Rpb24geUNhbmNlbCh0YXNrKSB7XG4gICAgcmV0dXJuIHsgZG9uZTogZmFsc2UsIHZhbHVlOiBjYW5jZWwodGFzaykgfTtcbiAgfTtcblxuICB2YXIgdGFzayA9IHZvaWQgMCxcbiAgICAgIGFjdGlvbiA9IHZvaWQgMDtcbiAgdmFyIHNldFRhc2sgPSBmdW5jdGlvbiBzZXRUYXNrKHQpIHtcbiAgICByZXR1cm4gdGFzayA9IHQ7XG4gIH07XG4gIHZhciBzZXRBY3Rpb24gPSBmdW5jdGlvbiBzZXRBY3Rpb24oYWMpIHtcbiAgICByZXR1cm4gYWN0aW9uID0gYWM7XG4gIH07XG5cbiAgcmV0dXJuIGZzbUl0ZXJhdG9yKHtcbiAgICBxMTogZnVuY3Rpb24gcTEoKSB7XG4gICAgICByZXR1cm4gWydxMicsIHlUYWtlLCBzZXRBY3Rpb25dO1xuICAgIH0sXG4gICAgcTI6IGZ1bmN0aW9uIHEyKCkge1xuICAgICAgcmV0dXJuIGFjdGlvbiA9PT0gRU5EID8gW3FFbmRdIDogdGFzayA/IFsncTMnLCB5Q2FuY2VsKHRhc2spXSA6IFsncTEnLCB5Rm9yayhhY3Rpb24pLCBzZXRUYXNrXTtcbiAgICB9LFxuICAgIHEzOiBmdW5jdGlvbiBxMygpIHtcbiAgICAgIHJldHVybiBbJ3ExJywgeUZvcmsoYWN0aW9uKSwgc2V0VGFza107XG4gICAgfVxuICB9LCAncTEnLCAndGFrZUxhdGVzdCgnICsgc2FmZU5hbWUocGF0dGVybk9yQ2hhbm5lbCkgKyAnLCAnICsgd29ya2VyLm5hbWUgKyAnKScpO1xufSIsImltcG9ydCBmc21JdGVyYXRvciwgeyBxRW5kLCBzYWZlTmFtZSB9IGZyb20gJy4vZnNtSXRlcmF0b3InO1xuaW1wb3J0IHsgdGFrZSwgZm9yaywgYWN0aW9uQ2hhbm5lbCwgY2FsbCB9IGZyb20gJy4uL2lvJztcbmltcG9ydCB7IEVORCB9IGZyb20gJy4uL2NoYW5uZWwnO1xuaW1wb3J0IHsgYnVmZmVycyB9IGZyb20gJy4uL2J1ZmZlcnMnO1xuaW1wb3J0IHsgZGVsYXkgfSBmcm9tICcuLi91dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRocm90dGxlKGRlbGF5TGVuZ3RoLCBwYXR0ZXJuLCB3b3JrZXIpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuID4gMyA/IF9sZW4gLSAzIDogMCksIF9rZXkgPSAzOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5IC0gM10gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICB2YXIgYWN0aW9uID0gdm9pZCAwLFxuICAgICAgY2hhbm5lbCA9IHZvaWQgMDtcblxuICB2YXIgeUFjdGlvbkNoYW5uZWwgPSB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogYWN0aW9uQ2hhbm5lbChwYXR0ZXJuLCBidWZmZXJzLnNsaWRpbmcoMSkpIH07XG4gIHZhciB5VGFrZSA9IGZ1bmN0aW9uIHlUYWtlKCkge1xuICAgIHJldHVybiB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogdGFrZShjaGFubmVsKSB9O1xuICB9O1xuICB2YXIgeUZvcmsgPSBmdW5jdGlvbiB5Rm9yayhhYykge1xuICAgIHJldHVybiB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogZm9yay5hcHBseSh1bmRlZmluZWQsIFt3b3JrZXJdLmNvbmNhdChhcmdzLCBbYWNdKSkgfTtcbiAgfTtcbiAgdmFyIHlEZWxheSA9IHsgZG9uZTogZmFsc2UsIHZhbHVlOiBjYWxsKGRlbGF5LCBkZWxheUxlbmd0aCkgfTtcblxuICB2YXIgc2V0QWN0aW9uID0gZnVuY3Rpb24gc2V0QWN0aW9uKGFjKSB7XG4gICAgcmV0dXJuIGFjdGlvbiA9IGFjO1xuICB9O1xuICB2YXIgc2V0Q2hhbm5lbCA9IGZ1bmN0aW9uIHNldENoYW5uZWwoY2gpIHtcbiAgICByZXR1cm4gY2hhbm5lbCA9IGNoO1xuICB9O1xuXG4gIHJldHVybiBmc21JdGVyYXRvcih7XG4gICAgcTE6IGZ1bmN0aW9uIHExKCkge1xuICAgICAgcmV0dXJuIFsncTInLCB5QWN0aW9uQ2hhbm5lbCwgc2V0Q2hhbm5lbF07XG4gICAgfSxcbiAgICBxMjogZnVuY3Rpb24gcTIoKSB7XG4gICAgICByZXR1cm4gWydxMycsIHlUYWtlKCksIHNldEFjdGlvbl07XG4gICAgfSxcbiAgICBxMzogZnVuY3Rpb24gcTMoKSB7XG4gICAgICByZXR1cm4gYWN0aW9uID09PSBFTkQgPyBbcUVuZF0gOiBbJ3E0JywgeUZvcmsoYWN0aW9uKV07XG4gICAgfSxcbiAgICBxNDogZnVuY3Rpb24gcTQoKSB7XG4gICAgICByZXR1cm4gWydxMicsIHlEZWxheV07XG4gICAgfVxuICB9LCAncTEnLCAndGhyb3R0bGUoJyArIHNhZmVOYW1lKHBhdHRlcm4pICsgJywgJyArIHdvcmtlci5uYW1lICsgJyknKTtcbn0iLCJpbXBvcnQgdGFrZUV2ZXJ5SGVscGVyIGZyb20gJy4vdGFrZUV2ZXJ5JztcbmltcG9ydCB0YWtlTGF0ZXN0SGVscGVyIGZyb20gJy4vdGFrZUxhdGVzdCc7XG5pbXBvcnQgdGhyb3R0bGVIZWxwZXIgZnJvbSAnLi90aHJvdHRsZSc7XG5cbmltcG9ydCB7IGRlcHJlY2F0ZSB9IGZyb20gJy4uL3V0aWxzJztcblxudmFyIGRlcHJlY2F0aW9uV2FybmluZyA9IGZ1bmN0aW9uIGRlcHJlY2F0aW9uV2FybmluZyhoZWxwZXJOYW1lKSB7XG4gIHJldHVybiAnaW1wb3J0IHsgJyArIGhlbHBlck5hbWUgKyAnIH0gZnJvbSBcXCdyZWR1eC1zYWdhXFwnIGhhcyBiZWVuIGRlcHJlY2F0ZWQgaW4gZmF2b3Igb2YgaW1wb3J0IHsgJyArIGhlbHBlck5hbWUgKyAnIH0gZnJvbSBcXCdyZWR1eC1zYWdhL2VmZmVjdHNcXCcuXFxuVGhlIGxhdHRlciB3aWxsIG5vdCB3b3JrIHdpdGggeWllbGQqLCBhcyBoZWxwZXIgZWZmZWN0cyBhcmUgd3JhcHBlZCBhdXRvbWF0aWNhbGx5IGZvciB5b3UgaW4gZm9yayBlZmZlY3QuXFxuVGhlcmVmb3JlIHlpZWxkICcgKyBoZWxwZXJOYW1lICsgJyB3aWxsIHJldHVybiB0YXNrIGRlc2NyaXB0b3IgdG8geW91ciBzYWdhIGFuZCBleGVjdXRlIG5leHQgbGluZXMgb2YgY29kZS4nO1xufTtcblxudmFyIHRha2VFdmVyeSA9IC8qI19fUFVSRV9fKi9kZXByZWNhdGUodGFrZUV2ZXJ5SGVscGVyLCAvKiNfX1BVUkVfXyovZGVwcmVjYXRpb25XYXJuaW5nKCd0YWtlRXZlcnknKSk7XG52YXIgdGFrZUxhdGVzdCA9IC8qI19fUFVSRV9fKi9kZXByZWNhdGUodGFrZUxhdGVzdEhlbHBlciwgLyojX19QVVJFX18qL2RlcHJlY2F0aW9uV2FybmluZygndGFrZUxhdGVzdCcpKTtcbnZhciB0aHJvdHRsZSA9IC8qI19fUFVSRV9fKi9kZXByZWNhdGUodGhyb3R0bGVIZWxwZXIsIC8qI19fUFVSRV9fKi9kZXByZWNhdGlvbldhcm5pbmcoJ3Rocm90dGxlJykpO1xuXG5leHBvcnQgeyB0YWtlRXZlcnksIHRha2VMYXRlc3QsIHRocm90dGxlLCB0YWtlRXZlcnlIZWxwZXIsIHRha2VMYXRlc3RIZWxwZXIsIHRocm90dGxlSGVscGVyIH07IiwiZXhwb3J0IGNvbnN0IFNBR0FfTEFZT1VUX0NBTEwgPSAnU0FHQV9MQVlPVVRfQ0FMTCc7XHJcbmV4cG9ydCBjb25zdCBTQUdBX1NPWkFJX0NBTEwgPSAnU0FHQV9TT1pBSV9DQUxMJztcclxuZXhwb3J0IGNvbnN0IFNBR0FfTElOS19DQUxMID0gJ1NBR0FfTElOS19DQUxMJztcclxuXHJcbmV4cG9ydCBjb25zdCBTQUdBX0VESVRPTk9GRl9DSEFOR0UgPSAnU0FHQV9FRElUT05PRkZfQ0hBTkdFJztcclxuXHJcblxyXG5leHBvcnQgY29uc3QgU2FnYV9MYXlvdXRfQ2FsbCA9IChwYXlsb2FkID0ge30pID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdHlwZTogU0FHQV9MQVlPVVRfQ0FMTCxcclxuICAgICAgICBwYXlsb2FkOiB7XHJcbiAgICAgICAgICAgIHBhdHRlcm46IHBheWxvYWQucGF0dGVybixcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFNhZ2FfU296YWlfQ2FsbCA9IChwYXlsb2FkID0ge30pID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdHlwZTogU0FHQV9TT1pBSV9DQUxMLFxyXG4gICAgICAgIHBheWxvYWQ6IHtcclxuICAgICAgICAgICAgcGF0dGVybjogcGF5bG9hZC5wYXR0ZXJuLFxyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgU2FnYV9MaW5rX0NhbGwgPSAocGF5bG9hZCA9IHt9KSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHR5cGU6IFNBR0FfTElOS19DQUxMLFxyXG4gICAgICAgIHBheWxvYWQ6IHtcclxuICAgICAgICAgICAgbGlua3M6IHBheWxvYWQubGlua3MsXHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBTYWdhX0VkaXRPbk9mZl9DaGFuZ2UgPSAocGF5bG9hZCA9IHt9KSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHR5cGU6IFNBR0FfRURJVE9OT0ZGX0NIQU5HRSxcclxuICAgICAgICBwYXlsb2FkOiB7XHJcbiAgICAgICAgICAgIG9ub2ZmOiBwYXlsb2FkLm9ub2ZmLFxyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XHJcbiIsInZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNyYywgc2FmZSkge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSByZWRlZmluZSh0YXJnZXQsIGtleSwgc3JjW2tleV0sIHNhZmUpO1xuICByZXR1cm4gdGFyZ2V0O1xufTtcbiIsInZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi9faXRlci1jYWxsJyk7XG52YXIgaXNBcnJheUl0ZXIgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgQlJFQUsgPSB7fTtcbnZhciBSRVRVUk4gPSB7fTtcbnZhciBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmFibGUsIGVudHJpZXMsIGZuLCB0aGF0LCBJVEVSQVRPUikge1xuICB2YXIgaXRlckZuID0gSVRFUkFUT1IgPyBmdW5jdGlvbiAoKSB7IHJldHVybiBpdGVyYWJsZTsgfSA6IGdldEl0ZXJGbihpdGVyYWJsZSk7XG4gIHZhciBmID0gY3R4KGZuLCB0aGF0LCBlbnRyaWVzID8gMiA6IDEpO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGVuZ3RoLCBzdGVwLCBpdGVyYXRvciwgcmVzdWx0O1xuICBpZiAodHlwZW9mIGl0ZXJGbiAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXRlcmFibGUgKyAnIGlzIG5vdCBpdGVyYWJsZSEnKTtcbiAgLy8gZmFzdCBjYXNlIGZvciBhcnJheXMgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yXG4gIGlmIChpc0FycmF5SXRlcihpdGVyRm4pKSBmb3IgKGxlbmd0aCA9IHRvTGVuZ3RoKGl0ZXJhYmxlLmxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgcmVzdWx0ID0gZW50cmllcyA/IGYoYW5PYmplY3Qoc3RlcCA9IGl0ZXJhYmxlW2luZGV4XSlbMF0sIHN0ZXBbMV0pIDogZihpdGVyYWJsZVtpbmRleF0pO1xuICAgIGlmIChyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKSByZXR1cm4gcmVzdWx0O1xuICB9IGVsc2UgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKGl0ZXJhYmxlKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOykge1xuICAgIHJlc3VsdCA9IGNhbGwoaXRlcmF0b3IsIGYsIHN0ZXAudmFsdWUsIGVudHJpZXMpO1xuICAgIGlmIChyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKSByZXR1cm4gcmVzdWx0O1xuICB9XG59O1xuZXhwb3J0cy5CUkVBSyA9IEJSRUFLO1xuZXhwb3J0cy5SRVRVUk4gPSBSRVRVUk47XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgQ29uc3RydWN0b3IsIG5hbWUsIGZvcmJpZGRlbkZpZWxkKSB7XG4gIGlmICghKGl0IGluc3RhbmNlb2YgQ29uc3RydWN0b3IpIHx8IChmb3JiaWRkZW5GaWVsZCAhPT0gdW5kZWZpbmVkICYmIGZvcmJpZGRlbkZpZWxkIGluIGl0KSkge1xuICAgIHRocm93IFR5cGVFcnJvcihuYW1lICsgJzogaW5jb3JyZWN0IGludm9jYXRpb24hJyk7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZKSB7XG4gIHZhciBDID0gZ2xvYmFsW0tFWV07XG4gIGlmIChERVNDUklQVE9SUyAmJiBDICYmICFDW1NQRUNJRVNdKSBkUC5mKEMsIFNQRUNJRVMsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9XG4gIH0pO1xufTtcbiIsIi8vIDE5LjEuMi43IC8gMTUuMi4zLjQgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKS5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcblxuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBoaWRkZW5LZXlzKTtcbn07XG4iLCIvLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGRQcyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBFbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIGNyZWF0ZURpY3QgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2lmcmFtZScpO1xuICB2YXIgaSA9IGVudW1CdWdLZXlzLmxlbmd0aDtcbiAgdmFyIGx0ID0gJzwnO1xuICB2YXIgZ3QgPSAnPic7XG4gIHZhciBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIHJlcXVpcmUoJy4vX2h0bWwnKS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6JzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zY3JpcHQtdXJsXG4gIC8vIGNyZWF0ZURpY3QgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3Q7XG4gIC8vIGh0bWwucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShsdCArICdzY3JpcHQnICsgZ3QgKyAnZG9jdW1lbnQuRj1PYmplY3QnICsgbHQgKyAnL3NjcmlwdCcgKyBndCk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GO1xuICB3aGlsZSAoaS0tKSBkZWxldGUgY3JlYXRlRGljdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2ldXTtcbiAgcmV0dXJuIGNyZWF0ZURpY3QoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcbiAgICByZXN1bHQgPSBuZXcgRW1wdHkoKTtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBjcmVhdGVEaWN0KCk7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkUHMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICBpbmRleCA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbmRleCA8IDAgPyBtYXgoaW5kZXggKyBsZW5ndGgsIDApIDogbWluKGluZGV4LCBsZW5ndGgpO1xufTtcbiIsIi8vIDE5LjEuMi4xNCAvIDE1LjIuMy4xNCBPYmplY3Qua2V5cyhPKVxudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiAgcmV0dXJuICRrZXlzKE8sIGVudW1CdWdLZXlzKTtcbn07XG4iLCJ2YXIgaWQgPSAwO1xudmFyIHB4ID0gTWF0aC5yYW5kb20oKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gJ1N5bWJvbCgnLmNvbmNhdChrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5LCAnKV8nLCAoKytpZCArIHB4KS50b1N0cmluZygzNikpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGJpdG1hcCwgdmFsdWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlOiAhKGJpdG1hcCAmIDEpLFxuICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcbiAgICB3cml0YWJsZTogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc1ByZWZpeGVkVmFsdWU7XG52YXIgcmVnZXggPSAvLXdlYmtpdC18LW1vei18LW1zLS87XG5cbmZ1bmN0aW9uIGlzUHJlZml4ZWRWYWx1ZSh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiByZWdleC50ZXN0KHZhbHVlKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsImV4cG9ydCBjb25zdCBTVV9DT05URVhUTUVOVV9PUEVOICA9ICdTVV9DT05URVhUTUVOVV9PUEVOJztcclxuZXhwb3J0IGNvbnN0IFNVX0NPTlRFWFRNRU5VX0NMT1NFID0gJ1NVX0NPTlRFWFRNRU5VX0NMT1NFJztcclxuXHJcbmV4cG9ydCBjb25zdCBTVV9DT05URVhUTUVOVV9ORVdCT1hURVhUID0gJ1NVX0NPTlRFWFRNRU5VX05FV0JPWFRFWFQnO1xyXG5leHBvcnQgY29uc3QgU1VfQ09OVEVYVE1FTlVfTkVXQk9YSU1BR0UgPSAnU1VfQ09OVEVYVE1FTlVfTkVXQk9YSU1BR0UnO1xyXG5leHBvcnQgY29uc3QgU1VfQ09OVEVYVE1FTlVfQ09QWUJPWFRFWFRPTkdST1VQID0gJ1NVX0NPTlRFWFRNRU5VX0NPUFlCT1hURVhUT05HUk9VUCc7XHJcbmV4cG9ydCBjb25zdCBTVV9DT05URVhUTUVOVV9DT1BZQk9YVEVYVCA9ICdTVV9DT05URVhUTUVOVV9DT1BZQk9YVEVYVCc7XHJcbmV4cG9ydCBjb25zdCBTVV9DT05URVhUTUVOVV9DT1BZQk9YSU1BR0UgPSAnU1VfQ09OVEVYVE1FTlVfQ09QWUJPWElNR0UnO1xyXG5leHBvcnQgY29uc3QgU1VfQ09OVEVYVE1FTlVfU09aQUlVTkxJTksgPSAnU1VfQ09OVEVYVE1FTlVfU09aQUlVTkxJTksnO1xyXG5leHBvcnQgY29uc3QgU1VfQ09OVEVYVE1FTlVfQk9YUkVNT1ZFID0gJ1NVX0NPTlRFWFRNRU5VX0JPWFJFTU9WRSc7XHJcbmV4cG9ydCBjb25zdCBTVV9DT05URVhUTUVOVV9CT1hUT0ZST05UID0gJ1NVX0NPTlRFWFRNRU5VX0JPWFRPRlJPTlQnO1xyXG5leHBvcnQgY29uc3QgU1VfQ09OVEVYVE1FTlVfQk9YVE9CQUNLID0gJ1NVX0NPTlRFWFRNRU5VX0JPWFRPQkFDSyc7XHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IFNVX0NvbnRleHRNZW51X09wZW4gPSAocGF5bG9hZCA9IHt9KSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHR5cGU6IFNVX0NPTlRFWFRNRU5VX09QRU4sXHJcbiAgICAgICAgcGF5bG9hZDoge1xyXG4gICAgICAgICAgICB4OiBwYXlsb2FkLngsXHJcbiAgICAgICAgICAgIHk6IHBheWxvYWQueSxcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFNVX0NvbnRleHRNZW51X0Nsb3NlID0gKHBheWxvYWQgPSB7fSkgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiBTVV9DT05URVhUTUVOVV9DTE9TRSxcclxuICAgICAgICBwYXlsb2FkOiB7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgU1VfQ29udGV4dE1lbnVfTmV3Qm94VGV4dCA9IChwYXlsb2FkID0ge30pID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdHlwZTogU1VfQ09OVEVYVE1FTlVfTkVXQk9YVEVYVCxcclxuICAgICAgICBwYXlsb2FkOiB7XHJcbiAgICAgICAgICAgIGN1cl94OiBwYXlsb2FkLmN1cl94LFxyXG4gICAgICAgICAgICBjdXJfeTogcGF5bG9hZC5jdXJfeSxcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFNVX0NvbnRleHRNZW51X05ld0JveEltYWdlID0gKHBheWxvYWQgPSB7fSkgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiBTVV9DT05URVhUTUVOVV9ORVdCT1hJTUFHRSxcclxuICAgICAgICBwYXlsb2FkOiB7XHJcbiAgICAgICAgICAgIGN1cl94OiBwYXlsb2FkLmN1cl94LFxyXG4gICAgICAgICAgICBjdXJfeTogcGF5bG9hZC5jdXJfeSxcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFNVX0NvbnRleHRNZW51X0NvcHlCb3hUZXh0T25Hcm91cCA9IChwYXlsb2FkID0ge30pID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdHlwZTogU1VfQ09OVEVYVE1FTlVfQ09QWUJPWFRFWFRPTkdST1VQLFxyXG4gICAgICAgIHBheWxvYWQ6IHtcclxuICAgICAgICAgICAgY3VyX3g6IHBheWxvYWQuY3VyX3gsXHJcbiAgICAgICAgICAgIGN1cl95OiBwYXlsb2FkLmN1cl95LFxyXG4gICAgICAgICAgICBib3hfaWQ6IHBheWxvYWQuYm94X2lkLFxyXG4gICAgICAgICAgICBncm91cF9pZDogcGF5bG9hZC5ncm91cF9pZCxcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFNVX0NvbnRleHRNZW51X0NvcHlCb3hUZXh0ID0gKHBheWxvYWQgPSB7fSkgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiBTVV9DT05URVhUTUVOVV9DT1BZQk9YVEVYVCxcclxuICAgICAgICBwYXlsb2FkOiB7XHJcbiAgICAgICAgICAgIGN1cl94OiBwYXlsb2FkLmN1cl94LFxyXG4gICAgICAgICAgICBjdXJfeTogcGF5bG9hZC5jdXJfeSxcclxuICAgICAgICAgICAgYm94X2lkOiBwYXlsb2FkLmJveF9pZCxcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFNVX0NvbnRleHRNZW51X0NvcHlCb3hJbWFnZSA9IChwYXlsb2FkID0ge30pID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdHlwZTogU1VfQ09OVEVYVE1FTlVfQ09QWUJPWElNQUdFLFxyXG4gICAgICAgIHBheWxvYWQ6IHtcclxuICAgICAgICAgICAgY3VyX3g6IHBheWxvYWQuY3VyX3gsXHJcbiAgICAgICAgICAgIGN1cl95OiBwYXlsb2FkLmN1cl95LFxyXG4gICAgICAgICAgICBib3hfaWQ6IHBheWxvYWQuYm94X2lkLFxyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgU1VfQ29udGV4dE1lbnVfU296YWlVbmxpbmsgPSAocGF5bG9hZCA9IHt9KSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHR5cGU6IFNVX0NPTlRFWFRNRU5VX1NPWkFJVU5MSU5LLFxyXG4gICAgICAgIHBheWxvYWQ6IHtcclxuICAgICAgICAgICAgZ3JvdXBfaWQ6IHBheWxvYWQuZ3JvdXBfaWQsXHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBTVV9Db250ZXh0TWVudV9Cb3hSZW1vdmUgPSAocGF5bG9hZCA9IHt9KSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHR5cGU6IFNVX0NPTlRFWFRNRU5VX0JPWFJFTU9WRSxcclxuICAgICAgICBwYXlsb2FkOiB7XHJcbiAgICAgICAgICAgIGJveF9pZDogcGF5bG9hZC5ib3hfaWQsXHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBTVV9Db250ZXh0TWVudV9Cb3hUb0Zyb250ID0gKHBheWxvYWQgPSB7fSkgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiBTVV9DT05URVhUTUVOVV9CT1hUT0ZST05ULFxyXG4gICAgICAgIHBheWxvYWQ6IHtcclxuICAgICAgICAgICAgYm94X2lkOiBwYXlsb2FkLmJveF9pZCxcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFNVX0NvbnRleHRNZW51X0JveFRvQmFjayA9IChwYXlsb2FkID0ge30pID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdHlwZTogU1VfQ09OVEVYVE1FTlVfQk9YVE9CQUNLLFxyXG4gICAgICAgIHBheWxvYWQ6IHtcclxuICAgICAgICAgICAgYm94X2lkOiBwYXlsb2FkLmJveF9pZCxcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxyXG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBUWVBFKSB7XG4gIGlmICghaXNPYmplY3QoaXQpIHx8IGl0Ll90ICE9PSBUWVBFKSB0aHJvdyBUeXBlRXJyb3IoJ0luY29tcGF0aWJsZSByZWNlaXZlciwgJyArIFRZUEUgKyAnIHJlcXVpcmVkIScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgc3BhY2VzID0gcmVxdWlyZSgnLi9fc3RyaW5nLXdzJyk7XG52YXIgc3BhY2UgPSAnWycgKyBzcGFjZXMgKyAnXSc7XG52YXIgbm9uID0gJ1xcdTIwMGJcXHUwMDg1JztcbnZhciBsdHJpbSA9IFJlZ0V4cCgnXicgKyBzcGFjZSArIHNwYWNlICsgJyonKTtcbnZhciBydHJpbSA9IFJlZ0V4cChzcGFjZSArIHNwYWNlICsgJyokJyk7XG5cbnZhciBleHBvcnRlciA9IGZ1bmN0aW9uIChLRVksIGV4ZWMsIEFMSUFTKSB7XG4gIHZhciBleHAgPSB7fTtcbiAgdmFyIEZPUkNFID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAhIXNwYWNlc1tLRVldKCkgfHwgbm9uW0tFWV0oKSAhPSBub247XG4gIH0pO1xuICB2YXIgZm4gPSBleHBbS0VZXSA9IEZPUkNFID8gZXhlYyh0cmltKSA6IHNwYWNlc1tLRVldO1xuICBpZiAoQUxJQVMpIGV4cFtBTElBU10gPSBmbjtcbiAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBGT1JDRSwgJ1N0cmluZycsIGV4cCk7XG59O1xuXG4vLyAxIC0+IFN0cmluZyN0cmltTGVmdFxuLy8gMiAtPiBTdHJpbmcjdHJpbVJpZ2h0XG4vLyAzIC0+IFN0cmluZyN0cmltXG52YXIgdHJpbSA9IGV4cG9ydGVyLnRyaW0gPSBmdW5jdGlvbiAoc3RyaW5nLCBUWVBFKSB7XG4gIHN0cmluZyA9IFN0cmluZyhkZWZpbmVkKHN0cmluZykpO1xuICBpZiAoVFlQRSAmIDEpIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKGx0cmltLCAnJyk7XG4gIGlmIChUWVBFICYgMikgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UocnRyaW0sICcnKTtcbiAgcmV0dXJuIHN0cmluZztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0ZXI7XG4iLCJ2YXIgZGVmID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIHRhZywgc3RhdCkge1xuICBpZiAoaXQgJiYgIWhhcyhpdCA9IHN0YXQgPyBpdCA6IGl0LnByb3RvdHlwZSwgVEFHKSkgZGVmKGl0LCBUQUcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogdGFnIH0pO1xufTtcbiIsInZhciBnO1xyXG5cclxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcclxuZyA9IChmdW5jdGlvbigpIHtcclxuXHRyZXR1cm4gdGhpcztcclxufSkoKTtcclxuXHJcbnRyeSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXHJcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLCBldmFsKShcInRoaXNcIik7XHJcbn0gY2F0Y2ggKGUpIHtcclxuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxyXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xyXG59XHJcblxyXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXHJcbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXHJcbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZztcclxuIiwidmFyIHF1ZXVlID0gW107XG4vKipcbiAgVmFyaWFibGUgdG8gaG9sZCBhIGNvdW50aW5nIHNlbWFwaG9yZVxuICAtIEluY3JlbWVudGluZyBhZGRzIGEgbG9jayBhbmQgcHV0cyB0aGUgc2NoZWR1bGVyIGluIGEgYHN1c3BlbmRlZGAgc3RhdGUgKGlmIGl0J3Mgbm90XG4gICAgYWxyZWFkeSBzdXNwZW5kZWQpXG4gIC0gRGVjcmVtZW50aW5nIHJlbGVhc2VzIGEgbG9jay4gWmVybyBsb2NrcyBwdXRzIHRoZSBzY2hlZHVsZXIgaW4gYSBgcmVsZWFzZWRgIHN0YXRlLiBUaGlzXG4gICAgdHJpZ2dlcnMgZmx1c2hpbmcgdGhlIHF1ZXVlZCB0YXNrcy5cbioqL1xudmFyIHNlbWFwaG9yZSA9IDA7XG5cbi8qKlxuICBFeGVjdXRlcyBhIHRhc2sgJ2F0b21pY2FsbHknLiBUYXNrcyBzY2hlZHVsZWQgZHVyaW5nIHRoaXMgZXhlY3V0aW9uIHdpbGwgYmUgcXVldWVkXG4gIGFuZCBmbHVzaGVkIGFmdGVyIHRoaXMgdGFzayBoYXMgZmluaXNoZWQgKGFzc3VtaW5nIHRoZSBzY2hlZHVsZXIgZW5kdXAgaW4gYSByZWxlYXNlZFxuICBzdGF0ZSkuXG4qKi9cbmZ1bmN0aW9uIGV4ZWModGFzaykge1xuICB0cnkge1xuICAgIHN1c3BlbmQoKTtcbiAgICB0YXNrKCk7XG4gIH0gZmluYWxseSB7XG4gICAgcmVsZWFzZSgpO1xuICB9XG59XG5cbi8qKlxuICBFeGVjdXRlcyBvciBxdWV1ZXMgYSB0YXNrIGRlcGVuZGluZyBvbiB0aGUgc3RhdGUgb2YgdGhlIHNjaGVkdWxlciAoYHN1c3BlbmRlZGAgb3IgYHJlbGVhc2VkYClcbioqL1xuZXhwb3J0IGZ1bmN0aW9uIGFzYXAodGFzaykge1xuICBxdWV1ZS5wdXNoKHRhc2spO1xuXG4gIGlmICghc2VtYXBob3JlKSB7XG4gICAgc3VzcGVuZCgpO1xuICAgIGZsdXNoKCk7XG4gIH1cbn1cblxuLyoqXG4gIFB1dHMgdGhlIHNjaGVkdWxlciBpbiBhIGBzdXNwZW5kZWRgIHN0YXRlLiBTY2hlZHVsZWQgdGFza3Mgd2lsbCBiZSBxdWV1ZWQgdW50aWwgdGhlXG4gIHNjaGVkdWxlciBpcyByZWxlYXNlZC5cbioqL1xuZXhwb3J0IGZ1bmN0aW9uIHN1c3BlbmQoKSB7XG4gIHNlbWFwaG9yZSsrO1xufVxuXG4vKipcbiAgUHV0cyB0aGUgc2NoZWR1bGVyIGluIGEgYHJlbGVhc2VkYCBzdGF0ZS5cbioqL1xuZnVuY3Rpb24gcmVsZWFzZSgpIHtcbiAgc2VtYXBob3JlLS07XG59XG5cbi8qKlxuICBSZWxlYXNlcyB0aGUgY3VycmVudCBsb2NrLiBFeGVjdXRlcyBhbGwgcXVldWVkIHRhc2tzIGlmIHRoZSBzY2hlZHVsZXIgaXMgaW4gdGhlIHJlbGVhc2VkIHN0YXRlLlxuKiovXG5leHBvcnQgZnVuY3Rpb24gZmx1c2goKSB7XG4gIHJlbGVhc2UoKTtcblxuICB2YXIgdGFzayA9IHZvaWQgMDtcbiAgd2hpbGUgKCFzZW1hcGhvcmUgJiYgKHRhc2sgPSBxdWV1ZS5zaGlmdCgpKSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZXhlYyh0YXNrKTtcbiAgfVxufSIsImV4cG9ydCBjb25zdCBTQUdBX05BR0FTSElSRVNVTFRfQ1JFQVRFID0gJ1NBR0FfTkFHQVNISVJFU1VMVF9DUkVBVEUnO1xyXG5leHBvcnQgY29uc3QgU0FHQV9OQUdBU0hJX0lNQUdFID0gJ1NBR0FfTkFHQVNISV9JTUFHRSc7XHJcbmV4cG9ydCBjb25zdCBTQUdBX05BR0FTSElfUkVNT1ZFID0gJ1NBR0FfTkFHQVNISV9SRU1PVkUnO1xyXG5leHBvcnQgY29uc3QgU0FHQV9OQUdBU0hJUkVTVUxUX0FGVVJFID0gJ1NBR0FfTkFHQVNISVJFU1VMVF9BRlVSRSc7XHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IFNhZ2FfTmFnYXNoaVJlc3VsdF9DcmVhdGUgPSAocGF5bG9hZCA9IHt9KSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHR5cGU6IFNBR0FfTkFHQVNISVJFU1VMVF9DUkVBVEUsXHJcbiAgICAgICAgcGF5bG9hZDoge1xyXG4gICAgICAgICAgICBib3hfaWQ6IHBheWxvYWQuYm94X2lkLFxyXG4gICAgICAgICAgICBuYWdhc2hpUmVzdWx0OiAgcGF5bG9hZC5uYWdhc2hpUmVzdWx0LFxyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgU2FnYV9OYWdhc2hpX0ltYWdlID0gKHBheWxvYWQgPSB7fSkgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiBTQUdBX05BR0FTSElfSU1BR0UsXHJcbiAgICAgICAgcGF5bG9hZDoge1xyXG4gICAgICAgICAgICBib3hfaWQ6IHBheWxvYWQuYm94X2lkLFxyXG4gICAgICAgICAgICBpbWFnZVVybDogIHBheWxvYWQuaW1hZ2VVcmwsXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgU2FnYV9OYWdhc2hpX1JlbW92ZSA9IChwYXlsb2FkID0ge30pID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdHlwZTogU0FHQV9OQUdBU0hJX1JFTU9WRSxcclxuICAgICAgICBwYXlsb2FkOiB7XHJcbiAgICAgICAgICAgIGdyb3VwX2lkOiBwYXlsb2FkLmdyb3VwX2lkLFxyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgU2FnYV9OYWdhc2hpUmVzdWx0X0FmdXJlID0gKHBheWxvYWQgPSB7fSkgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiBTQUdBX05BR0FTSElSRVNVTFRfQUZVUkUsXHJcbiAgICAgICAgcGF5bG9hZDoge1xyXG4gICAgICAgICAgICBncm91cF9pZDogcGF5bG9hZC5ncm91cF9pZCxcclxuICAgICAgICAgICAgYWZ1cmU6IHBheWxvYWQuYWZ1cmUsXHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn0iLCJleHBvcnQgY29uc3QgU0FHQV9UT09MQk9YU09aQUlfU09aQUlfVVBEQVRFID0gJ1NBR0FfVE9PTEJPWFNPWkFJX1NPWkFJX1VQREFURSc7XHJcbmV4cG9ydCBjb25zdCBTQUdBX1RPT0xCT1hTT1pBSV9TT1pBSV9ERUxFVEUgPSAnU0FHQV9UT09MQk9YU09aQUlfU09aQUlfREVMRVRFJztcclxuZXhwb3J0IGNvbnN0IFNBR0FfVE9PTEJPWFNPWkFJX1NPWkFJX0NSRUFURSA9ICdTQUdBX1RPT0xCT1hTT1pBSV9TT1pBSV9DUkVBVEUnO1xyXG5leHBvcnQgY29uc3QgU0FHQV9UT09MQk9YU09aQUlfU09aQUlfU0VMRUNUID0gJ1NBR0FfVE9PTEJPWFNPWkFJX1NPWkFJX1NFTEVDVCc7XHJcbmV4cG9ydCBjb25zdCBTQUdBX1RPT0xCT1hTT1pBSV9TT1pBSV9UT0dHTEUgPSAnU0FHQV9UT09MQk9YU09aQUlfU09aQUlfVE9HR0xFJztcclxuXHJcblxyXG5leHBvcnQgY29uc3QgU2FnYV9Ub29sQm94U296YWlfU296YWlfVXBkYXRlID0gKHBheWxvYWQgPSB7fSkgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiBTQUdBX1RPT0xCT1hTT1pBSV9TT1pBSV9VUERBVEUsXHJcbiAgICAgICAgcGF5bG9hZDoge1xyXG4gICAgICAgICAgICBzb3phaTogcGF5bG9hZC5zb3phaSxcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFNhZ2FfVG9vbEJveFNvemFpX1NvemFpX0RlbGV0ZSA9IChwYXlsb2FkID0ge30pID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdHlwZTogU0FHQV9UT09MQk9YU09aQUlfU09aQUlfREVMRVRFLFxyXG4gICAgICAgIHBheWxvYWQ6IHtcclxuICAgICAgICAgICAgc296YWlfaWQ6IHBheWxvYWQuc296YWlfaWQsXHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBTYWdhX1Rvb2xCb3hTb3phaV9Tb3phaV9DcmVhdGUgPSAocGF5bG9hZCA9IHt9KSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHR5cGU6IFNBR0FfVE9PTEJPWFNPWkFJX1NPWkFJX0NSRUFURSxcclxuICAgICAgICBwYXlsb2FkOiB7XHJcbiAgICAgICAgICAgIHNvemFpX2lkOiBwYXlsb2FkLnNvemFpX2lkLFxyXG4gICAgICAgICAgICB0eXBlOiAgICAgcGF5bG9hZC50eXBlLFxyXG4gICAgICAgICAgICB0ZXh0OiAgICAgcGF5bG9hZC50ZXh0LFxyXG4gICAgICAgICAgICBpbWFnZVVybDogcGF5bG9hZC5pbWFnZVVybCxcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFNhZ2FfVG9vbEJveFNvemFpX1NvemFpX1NlbGVjdCA9IChwYXlsb2FkID0ge30pID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdHlwZTogU0FHQV9UT09MQk9YU09aQUlfU09aQUlfU0VMRUNULFxyXG4gICAgICAgIHBheWxvYWQ6IHtcclxuICAgICAgICAgICAgc296YWlfaWQ6IHBheWxvYWQuc296YWlfaWQsXHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFNhZ2FfVG9vbEJveFNvemFpX1NvemFpX1RvZ2dsZSA9IChwYXlsb2FkID0ge30pID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdHlwZTogU0FHQV9UT09MQk9YU09aQUlfU09aQUlfVE9HR0xFLFxyXG4gICAgICAgIHBheWxvYWQ6IHtcclxuICAgICAgICAgICAgc296YWlfaWQ6IHBheWxvYWQuc296YWlfaWQsXHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG5cclxuIiwiLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQVJHID0gY29mKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCBULCBCO1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAoVCA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVEFHKSkgPT0gJ3N0cmluZycgPyBUXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBBUkcgPyBjb2YoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAoQiA9IGNvZihPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IEI7XG59O1xuIiwiZXhwb3J0cy5mID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG4iLCIvLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKSA/IE9iamVjdCA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gY29mKGl0KSA9PSAnU3RyaW5nJyA/IGl0LnNwbGl0KCcnKSA6IE9iamVjdChpdCk7XG59O1xuIiwiaW1wb3J0IHsgcHV0LCBzZWxlY3QsIGZvcmsgfSBmcm9tICdyZWR1eC1zYWdhL2VmZmVjdHMnO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIFNhZ2FfTmFnYXNoaVJlc3VsdF9DcmVhdGUsXHJcbiAgICBTYWdhX05hZ2FzaGlfSW1hZ2UsXHJcbiAgICBTYWdhX05hZ2FzaGlSZXN1bHRfQWZ1cmUsXHJcbn0gZnJvbSAnLi4vYWN0aW9uc19zYWdhL25hZ2FzaGkuanMnO1xyXG5cclxuaW1wb3J0IHsgVGV4dCB9IGZyb20gJy4uL2xpYnMvdGV4dC5qcyc7XHJcbmltcG9ydCB7IEJveCB9IGZyb20gJy4uL2xpYnMvYm94LmpzJztcclxuaW1wb3J0IHsgU296YWkgfSBmcm9tICcuLi9saWJzL3NvemFpLmpzJztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiogbmFnYXNoaUV4ZWMoZ3JvdXBfaWQsIHNvemFpX2lkKSB7XHJcbiAgICAvLyDjg5zjg4Pjgq/jgrnmg4XloLHjgpLlvpfjgotcclxuICAgIGNvbnN0IGJveHMgPSB5aWVsZCBzZWxlY3QoKHN0YXRlKSA9PiBzdGF0ZS5ib3hzKTtcclxuICAgIC8vIOe0oOadkOaDheWgseOCkuW+l+OCi1xyXG4gICAgY29uc3Qgc296YWkgPSB5aWVsZCBzZWxlY3QoKHN0YXRlKSA9PiBzdGF0ZS5zb3phaSk7XHJcblxyXG4gICAgLy8g5oyH5a6a44Gu44Oc44OD44Kv44K544Gu44Kw44Or44O844OX44Gu5pyA5Yid44Gu44Oc44OD44Kv44K544Os44Kz44O844OJ44KS5b6X44KLXHJcbiAgICBjb25zdCBncm91cF9ub19hcnkgPSBCb3guZ2V0R3JvdXBOb0FyeShib3hzLCBncm91cF9pZCk7XHJcbiAgICBjb25zdCBmaXJzdF9ib3hfaWQgPSBCb3guZ2V0Qm94SWQoYm94cywgZ3JvdXBfaWQsIGdyb3VwX25vX2FyeVswXSk7XHJcbiAgICBjb25zdCBib3ggPSBCb3guZ2V0Qm94KGJveHMsIGZpcnN0X2JveF9pZCk7XHJcbiAgICBjb25zdCBzb3phaV9yZWMgPSBTb3phaS5nZXRTb3phaShzb3phaSwgc296YWlfaWQpO1xyXG5cclxuICAgIC8vIOacgOW+jOOBvuOBp+a1geOBl+OBn+OBi+OBqeOBhuOBi+OBruODleODqeOCsFxyXG4gICAgbGV0IGxhc3ROYWdhc2hpRmxnID0gZmFsc2U7XHJcblxyXG4gICAgc3dpdGNoIChib3gudHlwZSkge1xyXG4gICAgY2FzZSAndGV4dCc6ICAgICAgICAvLyDjg4bjgq3jgrnjg4jjg5zjg4Pjgq/jgrnjga7loLTlkIhcclxuICAgICAgICBsZXQgbW9qaV9pbmRleCA9IDA7XHJcblxyXG4gICAgICAgIC8vIOOCsOODq+ODvOODl05v6YWN5YiX44Gn57mw44KK6L+U44GZXHJcbiAgICAgICAgbGV0IGNlbnRlckFyeSwgZW5kX2luZGV4O1xyXG4gICAgICAgIGZvciAobGV0IG4gPSAwOyBuIDwgZ3JvdXBfbm9fYXJ5Lmxlbmd0aDsgbisrKSB7XHJcbiAgICAgICAgICAgIC8vIOODnOODg+OCr+OCueODrOOCs+ODvOODieOCkuW+l+OCi1xyXG4gICAgICAgICAgICBjb25zdCB0YXJnZXRfYm94X2lkID0gQm94LmdldEJveElkKGJveHMsIGdyb3VwX2lkLCBncm91cF9ub19hcnlbbl0pO1xyXG4gICAgICAgICAgICBjb25zdCBib3hfcmVjID0gQm94LmdldEJveChib3hzLCB0YXJnZXRfYm94X2lkKTtcclxuXHJcbiAgICAgICAgICAgIC8vIOOCqOODquOCouaDheWgseOCkuaxguOCgeOCi1xyXG4gICAgICAgICAgICBsZXQgYXJlYXNpemVfaiwgYXJlYXNpemVfZztcclxuICAgICAgICAgICAgaWYgKGJveF9yZWMudGV4dC5rdW1paG9rbyA9PSAndGF0ZScpIHtcclxuICAgICAgICAgICAgICAgIGFyZWFzaXplX2ogPSBib3hfcmVjLnkyIC0gYm94X3JlYy55MTtcclxuICAgICAgICAgICAgICAgIGFyZWFzaXplX2cgPSBib3hfcmVjLngyIC0gYm94X3JlYy54MTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGFyZWFzaXplX2ogPSBib3hfcmVjLngyIC0gYm94X3JlYy54MTtcclxuICAgICAgICAgICAgICAgIGFyZWFzaXplX2cgPSBib3hfcmVjLnkyIC0gYm94X3JlYy55MTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8g44Oc44OD44Kv44K544Ko44Oq44Ki44Gr44OG44Kt44K544OI44KS5rWB44GX44Gf44Go44GN44Gu5paH5a2X44Gu5Lit5b+D5bqn5qiZ6YWN5YiX44KS5b6X44KLXHJcbiAgICAgICAgICAgIFtjZW50ZXJBcnksIGVuZF9pbmRleF0gPSBUZXh0LmdldE5hZ2FzaGlDZW50ZXJBcnkgKFxyXG4gICAgICAgICAgICAgICAgc296YWlfcmVjLm1vamlPYmpBcnksXHJcbiAgICAgICAgICAgICAgICBtb2ppX2luZGV4LFxyXG4gICAgICAgICAgICAgICAgYXJlYXNpemVfaixcclxuICAgICAgICAgICAgICAgIGFyZWFzaXplX2csXHJcbiAgICAgICAgICAgICAgICBib3hfcmVjLnRleHQucGFkZGluZ19qcyxcclxuICAgICAgICAgICAgICAgIGJveF9yZWMudGV4dC5wYWRkaW5nX2plLFxyXG4gICAgICAgICAgICAgICAgYm94X3JlYy50ZXh0LnBhZGRpbmdfZ3MsXHJcbiAgICAgICAgICAgICAgICBib3hfcmVjLnRleHQucGFkZGluZ19nZSxcclxuICAgICAgICAgICAgICAgIGJveF9yZWMudGV4dC5zaXplX2osXHJcbiAgICAgICAgICAgICAgICBib3hfcmVjLnRleHQuc2l6ZV9nLFxyXG4gICAgICAgICAgICAgICAgYm94X3JlYy50ZXh0Lmd5b2thblxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgaWYgKGVuZF9pbmRleCA9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgLy8gMeaWh+Wtl+OCgua1geOBm+OBquOBi+OBo+OBn+WgtOWQiFxyXG4gICAgICAgICAgICAgICAgY29uc3QgcGF5bG9hZCA9IHtcclxuICAgICAgICAgICAgICAgICAgICBib3hfaWQ6IHRhcmdldF9ib3hfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgbmFnYXNoaVJlc3VsdDogW10sXHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIHlpZWxkIHB1dChTYWdhX05hZ2FzaGlSZXN1bHRfQ3JlYXRlKHBheWxvYWQpKTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyDmtYHjgZfjgZ/ntZDmnpzmg4XloLHphY3liJfjgpLlvpfjgotcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5hZ2FzaGlSZXN1bHQgPSBUZXh0Lm5hZ2FzaGlSZXN1bHQoXHJcbiAgICAgICAgICAgICAgICAgICAgY2VudGVyQXJ5LFxyXG4gICAgICAgICAgICAgICAgICAgIHNvemFpX3JlYy5tb2ppT2JqQXJ5LFxyXG4gICAgICAgICAgICAgICAgICAgIG1vamlfaW5kZXhcclxuICAgICAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgcGF5bG9hZCA9IHtcclxuICAgICAgICAgICAgICAgICAgICBib3hfaWQ6IHRhcmdldF9ib3hfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgbmFnYXNoaVJlc3VsdDogbmFnYXNoaVJlc3VsdCxcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgeWllbGQgcHV0KFNhZ2FfTmFnYXNoaVJlc3VsdF9DcmVhdGUocGF5bG9hZCkpO1xyXG5cclxuICAgICAgICAgICAgICAgIG1vamlfaW5kZXggPSBlbmRfaW5kZXggKyAxO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChtb2ppX2luZGV4ID4gc296YWlfcmVjLm1vamlPYmpBcnkubGVuZ3RoIC0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIOaWh+Wtl+WIl+OBruacgOW+jOOBvuOBp+a1geOBl+OBn1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGxhc3ROYWdhc2hpRmxnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAvLyDmuqLjgozlh6bnkIZcclxuICAgICAgICBpZiAobGFzdE5hZ2FzaGlGbGcgPT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgLy8g5rqi44KM5Yem55CGXHJcbiAgICAgICAgICAgIHlpZWxkIHB1dChTYWdhX05hZ2FzaGlSZXN1bHRfQWZ1cmUoe1xyXG4gICAgICAgICAgICAgICAgZ3JvdXBfaWQ6IGdyb3VwX2lkLFxyXG4gICAgICAgICAgICAgICAgYWZ1cmU6IHNvemFpX3JlYy5tb2ppT2JqQXJ5Lmxlbmd0aCAtIG1vamlfaW5kZXgsXHJcbiAgICAgICAgICAgIH0pKTtcclxuY29uc29sZS5sb2coJ+aWh+Wtl+OBjOS9meOBo+OBn++8iOa6ouOCjO+8iScpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHlpZWxkIHB1dChTYWdhX05hZ2FzaGlSZXN1bHRfQWZ1cmUoe1xyXG4gICAgICAgICAgICAgICAgZ3JvdXBfaWQ6IGdyb3VwX2lkLFxyXG4gICAgICAgICAgICAgICAgYWZ1cmU6IDAsXHJcbiAgICAgICAgICAgIH0pKTtcclxuY29uc29sZS5sb2coJ+acgOW+jOOBvuOBp+a1geOBl+OBnycpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgY2FzZSAnaW1hZ2UnOiAgICAgICAgICAgICAgIC8vIOOCpOODoeODvOOCuOODnOODg+OCr+OCueOBruWgtOWQiFxyXG4gICAgICAgIGNvbnN0IHBheWxvYWQgPSB7XHJcbiAgICAgICAgICAgIGJveF9pZDogICBib3guYm94X2lkLFxyXG4gICAgICAgICAgICBpbWFnZVVybDogc296YWlfcmVjLmltYWdlVXJsLFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHlpZWxkIHB1dChTYWdhX05hZ2FzaGlfSW1hZ2UocGF5bG9hZCkpO1xyXG5cclxuICAgICAgICBicmVhaztcclxuICAgIH1cclxufVxyXG5cclxuLy9cclxuLy8g5oyH5a6a44Gu44Kw44Or44O844OXSUTjgYzjg6rjg7Pjgq/jg6rjgrnjg4jjgavlkKvjgb7jgozjgabjgYTjgozjgbDjgIHjgZ3jgozjgpLmtYHjgZlcclxuLy9cclxuLy8gW0lOXVxyXG4vLyAgIGdyb3VwX2lkOiDjgrDjg6vjg7zjg5dJRFxyXG4vL1xyXG5leHBvcnQgZnVuY3Rpb24qIG5hZ2FzaGlFeGVjR3JvdXAoZ3JvdXBfaWQpIHtcclxuICAgIC8vIOaMh+WumuOBruOCsOODq+ODvOODl0lE44GM44Oq44Oz44Kv44Oq44K544OI44Gr5ZCr44G+44KM44Gm44GE44KM44Gw44CB5a++5b+c44GZ44KL57Sg5p2QSUTjgpLlvpfjgotcclxuICAgIGNvbnN0IGxpbmtzID0geWllbGQgc2VsZWN0KChzdGF0ZSkgPT4gc3RhdGUubGlua3MpO1xyXG5cclxuICAgIGxldCBzb3phaV9pZCA9ICcnO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5rcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGlmIChsaW5rc1tpXS5ncm91cF9pZCA9PSBncm91cF9pZCkge1xyXG4gICAgICAgICAgICBzb3phaV9pZCA9IGxpbmtzW2ldLnNvemFpX2lkO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHNvemFpX2lkID09ICcnKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHlpZWxkIGZvcmsobmFnYXNoaUV4ZWMsIGdyb3VwX2lkLCBzb3phaV9pZCk7XHJcbn1cclxuXHJcbi8vXHJcbi8vIOaMh+WumuOBruODnOODg+OCr+OCuUlE44Gu44Kw44Or44O844OX5ZCN44GM44Oq44Oz44Kv44Oq44K544OI44Gr5ZCr44G+44KM44Gm44GE44KM44Gw44CB44Gd44KM44KS5rWB44GZXHJcbi8vXHJcbi8vIFtJTl1cclxuLy8gICBib3hfaWQ6IOODnOODg+OCr+OCuUlEXHJcbi8vXHJcbmV4cG9ydCBmdW5jdGlvbiogbmFnYXNoaUV4ZWNCb3goYm94X2lkKSB7XHJcbiAgICAvLyDmjIflrprjga7jg5zjg4Pjgq/jgrnjga7jgrDjg6vjg7zjg5flkI3jgYzjg6rjg7Pjgq/jg6rjgrnjg4jjgavlkKvjgb7jgozjgabjgYTjgozjgbDjgIHlr77lv5zjgZnjgovntKDmnZBJROOCkuW+l+OCi1xyXG4gICAgY29uc3QgYm94cyAgPSB5aWVsZCBzZWxlY3QoKHN0YXRlKSA9PiBzdGF0ZS5ib3hzKTtcclxuXHJcbiAgICBjb25zdCBbZ3JvdXBfaWQsIGdyb3VwX25vXSA9IEJveC5nZXRHcm91cEFuZE5vKGJveHMsIGJveF9pZCk7XHJcblxyXG4gICAgeWllbGQgZm9yayhuYWdhc2hpRXhlY0dyb3VwLCBncm91cF9pZCk7XHJcbn0gXHJcblxyXG4vL1xyXG4vLyDmjIflrprjga7ntKDmnZBJROOBjOODquODs+OCr+ODquOCueODiOOBq+WQq+OBvuOCjOOBpuOBhOOCjOOBsOOAgeOBneOCjOOCkua1geOBmVxyXG4vL1xyXG4vLyBbSU5dXHJcbi8vICAgc296YWlfaWQ6IOe0oOadkElEXHJcbi8vXHJcbmV4cG9ydCBmdW5jdGlvbiogbmFnYXNoaUV4ZWNTb3phaShzb3phaV9pZCkge1xyXG4gICAgLy8g5oyH5a6a44Gu57Sg5p2QSUTjgYzjg6rjg7Pjgq/jg6rjgrnjg4jjgavlkKvjgb7jgozjgabjgYTjgozjgbDjgIHlr77lv5zjgZnjgovjgrDjg6vjg7zjg5flkI3jgpLlvpfjgotcclxuICAgIGNvbnN0IGxpbmtzID0geWllbGQgc2VsZWN0KChzdGF0ZSkgPT4gc3RhdGUubGlua3MpO1xyXG4gICAgXHJcbiAgICBsZXQgZ3JvdXBfaWQgPSAnJztcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlua3MubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBpZiAobGlua3NbaV0uc296YWlfaWQgPT0gc296YWlfaWQpIHtcclxuICAgICAgICAgICAgZ3JvdXBfaWQgPSBsaW5rc1tpXS5ncm91cF9pZDtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChncm91cF9pZCA9PSAnJykge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB5aWVsZCBmb3JrKG5hZ2FzaGlFeGVjLCBncm91cF9pZCwgc296YWlfaWQpO1xyXG59IFxyXG5cclxuLy9cclxuLy8g44Oq44Oz44Kv44Oq44K544OI44Gu5YaF5a6544KS5YWo44Gm5rWB44GZXHJcbi8vXHJcbmV4cG9ydCBmdW5jdGlvbiogbmFnYXNoaUV4ZWNBbGwoKSB7XHJcbiAgICAvLyDjg6rjg7Pjgq/jg6rjgrnjg4jjgpLlvpfjgotcclxuICAgIGNvbnN0IGxpbmtzID0geWllbGQgc2VsZWN0KChzdGF0ZSkgPT4gc3RhdGUubGlua3MpO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlua3MubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICB5aWVsZCBmb3JrKG5hZ2FzaGlFeGVjLCBsaW5rc1tpXS5ncm91cF9pZCwgbGlua3NbaV0uc296YWlfaWQpO1xyXG4gICAgfVxyXG59XHJcblxyXG4iLCJleHBvcnQgY29uc3QgU0FHQV9UT09MQk9YTElOS19MSU5LX0NSRUFURSA9ICdTQUdBX1RPT0xCT1hMSU5LX0xJTktfQ1JFQVRFJztcclxuZXhwb3J0IGNvbnN0IFNBR0FfVE9PTEJPWExJTktfTElOS19ERUxFVEUgPSAnU0FHQV9UT09MQk9YTElOS19MSU5LX0RFTEVURSc7XHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IFNhZ2FfVG9vbEJveExpbmtfTGlua19DcmVhdGUgPSAocGF5bG9hZCA9IHt9KSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHR5cGU6IFNBR0FfVE9PTEJPWExJTktfTElOS19DUkVBVEUsXHJcbiAgICAgICAgcGF5bG9hZDoge1xyXG4gICAgICAgICAgICBncm91cF9pZDogcGF5bG9hZC5ncm91cF9pZCxcclxuICAgICAgICAgICAgc296YWlfaWQ6IHBheWxvYWQuc296YWlfaWQsXHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBTYWdhX1Rvb2xCb3hMaW5rX0xpbmtfRGVsZXRlID0gKHBheWxvYWQgPSB7fSkgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiBTQUdBX1RPT0xCT1hMSU5LX0xJTktfREVMRVRFLFxyXG4gICAgICAgIHBheWxvYWQ6IHtcclxuICAgICAgICAgICAgZ3JvdXBfaWQ6IHBheWxvYWQuZ3JvdXBfaWQsXHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuIiwiZXhwb3J0IGNvbnN0IFNBR0FfQ09OVEVYVE1FTlVfT1BFTiAgPSAnU0FHQV9DT05URVhUTUVOVV9PUEVOJztcclxuZXhwb3J0IGNvbnN0IFNBR0FfQ09OVEVYVE1FTlVfQ0xPU0UgPSAnU0FHQV9DT05URVhUTUVOVV9DTE9TRSc7XHJcblxyXG5leHBvcnQgY29uc3QgU0FHQV9DT05URVhUTUVOVV9ORVdCT1hURVhUID0gJ1NBR0FfQ09OVEVYVE1FTlVfTkVXQk9YVEVYVCc7XHJcbmV4cG9ydCBjb25zdCBTQUdBX0NPTlRFWFRNRU5VX05FV0JPWElNQUdFID0gJ1NBR0FfQ09OVEVYVE1FTlVfTkVXQk9YSU1BR0UnO1xyXG5cclxuZXhwb3J0IGNvbnN0IFNBR0FfQ09OVEVYVE1FTlVfQk9YVE9GUk9OVCA9ICdTQUdBX0NPTlRFWFRNRU5VX0JPWFRPRlJPTlQnO1xyXG5leHBvcnQgY29uc3QgU0FHQV9DT05URVhUTUVOVV9CT1hUT0JBQ0sgPSAnU0FHQV9DT05URVhUTUVOVV9CT1hUT0JBQ0snO1xyXG5cclxuXHJcbmV4cG9ydCBjb25zdCBTYWdhX0NvbnRleHRNZW51X09wZW4gPSAocGF5bG9hZCA9IHt9KSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHR5cGU6IFNBR0FfQ09OVEVYVE1FTlVfT1BFTixcclxuICAgICAgICBwYXlsb2FkOiB7XHJcbiAgICAgICAgICAgIHg6IHBheWxvYWQueCxcclxuICAgICAgICAgICAgeTogcGF5bG9hZC55LFxyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgU2FnYV9Db250ZXh0TWVudV9DbG9zZSA9IChwYXlsb2FkID0ge30pID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdHlwZTogU0FHQV9DT05URVhUTUVOVV9DTE9TRSxcclxuICAgICAgICBwYXlsb2FkOiB7XHJcblxyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgU2FnYV9Db250ZXh0TWVudV9OZXdCb3hUZXh0ID0gKHBheWxvYWQgPSB7fSkgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiBTQUdBX0NPTlRFWFRNRU5VX05FV0JPWFRFWFQsXHJcbiAgICAgICAgcGF5bG9hZDoge1xyXG4gICAgICAgICAgICBib3hfaWQ6ICAgcGF5bG9hZC5ib3hfaWQsXHJcbiAgICAgICAgICAgIGdyb3VwX2lkOiBwYXlsb2FkLmdyb3VwX2lkLFxyXG4gICAgICAgICAgICBncm91cF9ubzogcGF5bG9hZC5ncm91cF9ubyxcclxuICAgICAgICAgICAgdHlwZTogICAgIHBheWxvYWQudHlwZSxcclxuICAgICAgICAgICAgeDE6IHBheWxvYWQueDEsXHJcbiAgICAgICAgICAgIHkxOiBwYXlsb2FkLnkxLFxyXG4gICAgICAgICAgICB4MjogcGF5bG9hZC54MixcclxuICAgICAgICAgICAgeTI6IHBheWxvYWQueTIsXHJcblxyXG4gICAgICAgICAgICB0ZXh0OiB7XHJcbiAgICAgICAgICAgICAgICBrdW1paG9rbzogICBwYXlsb2FkLnRleHQua3VtaWhva28sXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX2pzOiBwYXlsb2FkLnRleHQucGFkZGluZ19qcyxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfamU6IHBheWxvYWQudGV4dC5wYWRkaW5nX2plLFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19nczogcGF5bG9hZC50ZXh0LnBhZGRpbmdfZ3MsXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX2dlOiBwYXlsb2FkLnRleHQucGFkZGluZ19nZSxcclxuICAgICAgICAgICAgICAgIHNpemVfajogICAgIHBheWxvYWQudGV4dC5zaXplX2osXHJcbiAgICAgICAgICAgICAgICBzaXplX2c6ICAgICBwYXlsb2FkLnRleHQuc2l6ZV9nLFxyXG4gICAgICAgICAgICAgICAgZ3lva2FuOiAgICAgcGF5bG9hZC50ZXh0Lmd5b2thbixcclxuICAgICAgICAgICAgICAgIGZvbnQ6ICAgICAgIHBheWxvYWQudGV4dC5mb250LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgU2FnYV9Db250ZXh0TWVudV9OZXdCb3hJbWFnZSA9IChwYXlsb2FkID0ge30pID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdHlwZTogU0FHQV9DT05URVhUTUVOVV9ORVdCT1hJTUFHRSxcclxuICAgICAgICBwYXlsb2FkOiB7XHJcbiAgICAgICAgICAgIGJveF9pZDogICBwYXlsb2FkLmJveF9pZCxcclxuICAgICAgICAgICAgZ3JvdXBfaWQ6IHBheWxvYWQuZ3JvdXBfaWQsXHJcbiAgICAgICAgICAgIGdyb3VwX25vOiBwYXlsb2FkLmdyb3VwX25vLFxyXG4gICAgICAgICAgICB0eXBlOiAgICAgcGF5bG9hZC50eXBlLFxyXG4gICAgICAgICAgICB4MTogcGF5bG9hZC54MSxcclxuICAgICAgICAgICAgeTE6IHBheWxvYWQueTEsXHJcbiAgICAgICAgICAgIHgyOiBwYXlsb2FkLngyLFxyXG4gICAgICAgICAgICB5MjogcGF5bG9hZC55MixcclxuXHJcbiAgICAgICAgICAgIGltYWdlOiB7XHJcbiAgICAgICAgICAgICAgICB1cmw6IHBheWxvYWQuaW1hZ2UudXJsLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgU2FnYV9Db250ZXh0TWVudV9Cb3hUb0Zyb250ID0gKHBheWxvYWQgPSB7fSkgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiBTQUdBX0NPTlRFWFRNRU5VX0JPWFRPRlJPTlQsXHJcbiAgICAgICAgcGF5bG9hZDoge1xyXG4gICAgICAgICAgICBib3hfaWQ6IHBheWxvYWQuYm94X2lkLFxyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgU2FnYV9Db250ZXh0TWVudV9Cb3hUb0JhY2sgPSAocGF5bG9hZCA9IHt9KSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHR5cGU6IFNBR0FfQ09OVEVYVE1FTlVfQk9YVE9CQUNLLFxyXG4gICAgICAgIHBheWxvYWQ6IHtcclxuICAgICAgICAgICAgYm94X2lkOiBwYXlsb2FkLmJveF9pZCxcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxyXG4iLCJleHBvcnQgY29uc3QgU0FHQV9TRUxFQ1RCT1hfQk9YX05PTlNFTEVDVCAgID0gJ1NBR0FfU0VMRUNUQk9YX0JPWF9OT05TRUxFQ1QnO1xyXG5leHBvcnQgY29uc3QgU0FHQV9TRUxFQ1RCT1hfQk9YX1NFTEVDVCAgICAgID0gJ1NBR0FfU0VMRUNUQk9YX0JPWF9TRUxFQ1QnO1xyXG5cclxuZXhwb3J0IGNvbnN0IFNBR0FfU0VMRUNUQk9YX0VESVRCT1hfTU9WRUVORCA9ICdTQUdBX1NFTEVDVEJPWF9FRElUQk9YX01PVkVFTkQnO1xyXG5leHBvcnQgY29uc3QgU0FHQV9TRUxFQ1RCT1hfRURJVEJPWF9DSEFOR0VTSVpFID0gJ1NBR0FfU0VMRUNUQk9YX0VESVRCT1hfQ0hBTkdFU0laRSc7XHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IFNhZ2FfU2VsZWN0Qm94X0JveF9Ob25TZWxlY3QgPSAocGF5bG9hZCA9IHt9KSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHR5cGU6IFNBR0FfU0VMRUNUQk9YX0JPWF9OT05TRUxFQ1QsXHJcbiAgICAgICAgcGF5bG9hZDoge1xyXG4gICAgICAgICAgICBib3hfaWQ6ICAgIDAsXHJcbiAgICAgICAgICAgIGdyb3VwX2lkOiAnJyxcclxuICAgICAgICAgICAgZ3JvdXBfbm86ICAwLFxyXG4gICAgICAgICAgICB0eXBlOiAgICAgJycsXHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBTYWdhX1NlbGVjdEJveF9Cb3hfU2VsZWN0ID0gKHBheWxvYWQgPSB7fSkgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiBTQUdBX1NFTEVDVEJPWF9CT1hfU0VMRUNULFxyXG4gICAgICAgIHBheWxvYWQ6IHtcclxuICAgICAgICAgICAgYm94X2lkOiAgIHBheWxvYWQuYm94X2lkLFxyXG4gICAgICAgICAgICBncm91cF9pZDogcGF5bG9hZC5ncm91cF9pZCxcclxuICAgICAgICAgICAgZ3JvdXBfbm86IHBheWxvYWQuZ3JvdXBfbm8sXHJcbiAgICAgICAgICAgIHR5cGU6ICAgICBwYXlsb2FkLnR5cGUsXHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBTYWdhX1NlbGVjdEJveF9FZGl0Qm94X01vdmVFbmQgPSAocGF5bG9hZCA9IHt9KSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHR5cGU6IFNBR0FfU0VMRUNUQk9YX0VESVRCT1hfTU9WRUVORCxcclxuICAgICAgICBwYXlsb2FkOiB7XHJcbiAgICAgICAgICAgIGJveF9pZDogcGF5bG9hZC5ib3hfaWQsXHJcbiAgICAgICAgICAgIHgxOiBwYXlsb2FkLngxLFxyXG4gICAgICAgICAgICB5MTogcGF5bG9hZC55MSxcclxuICAgICAgICAgICAgeDI6IHBheWxvYWQueDIsXHJcbiAgICAgICAgICAgIHkyOiBwYXlsb2FkLnkyLFxyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgU2FnYV9TZWxlY3RCb3hfRWRpdEJveF9DaGFuZ2VTaXplID0gKHBheWxvYWQgPSB7fSkgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiBTQUdBX1NFTEVDVEJPWF9FRElUQk9YX0NIQU5HRVNJWkUsXHJcbiAgICAgICAgcGF5bG9hZDoge1xyXG4gICAgICAgICAgICBib3hfaWQ6IHBheWxvYWQuYm94X2lkLFxyXG4gICAgICAgICAgICB4MTogcGF5bG9hZC54MSxcclxuICAgICAgICAgICAgeTE6IHBheWxvYWQueTEsXHJcbiAgICAgICAgICAgIHgyOiBwYXlsb2FkLngyLFxyXG4gICAgICAgICAgICB5MjogcGF5bG9hZC55MixcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxyXG4iLCJleHBvcnQgY29uc3QgU1VfVE9PTEJPWExJTktfQ1JFQVRFQlVUVE9OX0NMSUNLID0gJ1NVX1RPT0xCT1hMSU5LX0NSRUFURUJVVFRPTl9DTElDSyc7XHJcbmV4cG9ydCBjb25zdCBTVV9UT09MQk9YTElOS19ERUxFVEVCVVRUT05fQ0xJQ0sgPSAnU1VfVE9PTEJPWExJTktfREVMRVRFQlVUVE9OX0NMSUNLJztcclxuXHJcblxyXG5leHBvcnQgY29uc3QgU1VfVG9vbEJveExpbmtfQ3JlYXRlQnV0dG9uX0NsaWNrID0gKHBheWxvYWQgPSB7fSkgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiBTVV9UT09MQk9YTElOS19DUkVBVEVCVVRUT05fQ0xJQ0ssXHJcbiAgICAgICAgcGF5bG9hZDoge1xyXG4gICAgICAgICAgICBncm91cF9pZDogcGF5bG9hZC5ncm91cF9pZCxcclxuICAgICAgICAgICAgc296YWlfaWQ6IHBheWxvYWQuc296YWlfaWQsXHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBTVV9Ub29sQm94TGlua19EZWxldGVCdXR0b25fQ2xpY2sgPSAocGF5bG9hZCA9IHt9KSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHR5cGU6IFNVX1RPT0xCT1hMSU5LX0RFTEVURUJVVFRPTl9DTElDSyxcclxuICAgICAgICBwYXlsb2FkOiB7XHJcbiAgICAgICAgICAgIGdyb3VwX2lkOiBwYXlsb2FkLmdyb3VwX2lkLFxyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XHJcbiIsIi8vXHJcbi8vIOaWh+Wtl+WIl+ezu1xyXG4vL1xyXG5cclxuZXhwb3J0IGNvbnN0IFN0cmluZyA9IHtcclxuICAgIHRvTnVtZXJpYzogKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgaWYgKHZhbHVlID09ICcnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBudW0gPSBwYXJzZUludCh2YWx1ZSwgMTApO1xyXG4gICAgICAgIGlmIChpc05hTihudW0pKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBudW07XHJcbiAgICB9LFxyXG59IiwiZXhwb3J0IGNvbnN0IFNVX1NFTEVDVEJPWF9CT1hfTk9OU0VMRUNUICAgPSAnU1VfU0VMRUNUQk9YX0JPWF9OT05TRUxFQ1QnO1xyXG5leHBvcnQgY29uc3QgU1VfU0VMRUNUQk9YX0JPWF9TRUxFQ1QgICAgICA9ICdTVV9TRUxFQ1RCT1hfQk9YX1NFTEVDVCc7XHJcblxyXG5leHBvcnQgY29uc3QgU1VfU0VMRUNUQk9YX0VESVRCT1hfTU9WRUVORCA9ICdTVV9TRUxFQ1RCT1hfRURJVEJPWF9NT1ZFRU5EJztcclxuZXhwb3J0IGNvbnN0IFNVX1NFTEVDVEJPWF9FRElUQk9YX0NIQU5HRVNJWkUgPSAnU1VfU0VMRUNUQk9YX0VESVRCT1hfQ0hBTkdFU0laRSc7XHJcbmV4cG9ydCBjb25zdCBTVV9TRUxFQ1RCT1hfRURJVEJPWF9ERUxFVEVLRVlQUkVTUyA9ICdTVV9TRUxFQ1RCT1hfRURJVEJPWF9ERUxFVEVLRVlQUkVTUyc7XHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IFNVX1NlbGVjdEJveF9Cb3hfTm9uU2VsZWN0ID0gKHBheWxvYWQgPSB7fSkgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiBTVV9TRUxFQ1RCT1hfQk9YX05PTlNFTEVDVCxcclxuICAgICAgICBwYXlsb2FkOiB7XHJcbiAgICAgICAgICAgIGJveF9pZDogICAgMCxcclxuICAgICAgICAgICAgZ3JvdXBfaWQ6ICcnLFxyXG4gICAgICAgICAgICBncm91cF9ubzogIDAsXHJcbiAgICAgICAgICAgIHR5cGU6ICAgICAnJyxcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFNVX1NlbGVjdEJveF9Cb3hfU2VsZWN0ID0gKHBheWxvYWQgPSB7fSkgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiBTVV9TRUxFQ1RCT1hfQk9YX1NFTEVDVCxcclxuICAgICAgICBwYXlsb2FkOiB7XHJcbiAgICAgICAgICAgIGJveF9pZDogICBwYXlsb2FkLmJveF9pZCxcclxuICAgICAgICAgICAgZ3JvdXBfaWQ6IHBheWxvYWQuZ3JvdXBfaWQsXHJcbiAgICAgICAgICAgIGdyb3VwX25vOiBwYXlsb2FkLmdyb3VwX25vLFxyXG4gICAgICAgICAgICB0eXBlOiAgICAgcGF5bG9hZC50eXBlLFxyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgU1VfU2VsZWN0Qm94X0VkaXRCb3hfTW92ZUVuZCA9IChwYXlsb2FkID0ge30pID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdHlwZTogU1VfU0VMRUNUQk9YX0VESVRCT1hfTU9WRUVORCxcclxuICAgICAgICBwYXlsb2FkOiB7XHJcbiAgICAgICAgICAgIGJveF9pZDogcGF5bG9hZC5ib3hfaWQsXHJcbiAgICAgICAgICAgIHgxOiBwYXlsb2FkLngxLFxyXG4gICAgICAgICAgICB5MTogcGF5bG9hZC55MSxcclxuICAgICAgICAgICAgeDI6IHBheWxvYWQueDIsXHJcbiAgICAgICAgICAgIHkyOiBwYXlsb2FkLnkyLFxyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgU1VfU2VsZWN0Qm94X0VkaXRCb3hfQ2hhbmdlU2l6ZSA9IChwYXlsb2FkID0ge30pID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdHlwZTogU1VfU0VMRUNUQk9YX0VESVRCT1hfQ0hBTkdFU0laRSxcclxuICAgICAgICBwYXlsb2FkOiB7XHJcbiAgICAgICAgICAgIGJveF9pZDogcGF5bG9hZC5ib3hfaWQsXHJcbiAgICAgICAgICAgIHgxOiBwYXlsb2FkLngxLFxyXG4gICAgICAgICAgICB5MTogcGF5bG9hZC55MSxcclxuICAgICAgICAgICAgeDI6IHBheWxvYWQueDIsXHJcbiAgICAgICAgICAgIHkyOiBwYXlsb2FkLnkyLFxyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgU1VfU2VsZWN0Qm94X0VkaXRCb3hfRGVsZXRlS2V5UHJlc3MgPSAocGF5bG9hZCA9IHt9KSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHR5cGU6IFNVX1NFTEVDVEJPWF9FRElUQk9YX0RFTEVURUtFWVBSRVNTLFxyXG4gICAgICAgIHBheWxvYWQ6IHtcclxuICAgICAgICAgICAgZ3JvdXBfaWQ6IHBheWxvYWQuZ3JvdXBfaWQsXHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ09MTEVDVElPTikge1xuICAkZXhwb3J0KCRleHBvcnQuUywgQ09MTEVDVElPTiwgeyBmcm9tOiBmdW5jdGlvbiBmcm9tKHNvdXJjZSAvKiAsIG1hcEZuLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIG1hcEZuID0gYXJndW1lbnRzWzFdO1xuICAgIHZhciBtYXBwaW5nLCBBLCBuLCBjYjtcbiAgICBhRnVuY3Rpb24odGhpcyk7XG4gICAgbWFwcGluZyA9IG1hcEZuICE9PSB1bmRlZmluZWQ7XG4gICAgaWYgKG1hcHBpbmcpIGFGdW5jdGlvbihtYXBGbik7XG4gICAgaWYgKHNvdXJjZSA9PSB1bmRlZmluZWQpIHJldHVybiBuZXcgdGhpcygpO1xuICAgIEEgPSBbXTtcbiAgICBpZiAobWFwcGluZykge1xuICAgICAgbiA9IDA7XG4gICAgICBjYiA9IGN0eChtYXBGbiwgYXJndW1lbnRzWzJdLCAyKTtcbiAgICAgIGZvck9mKHNvdXJjZSwgZmFsc2UsIGZ1bmN0aW9uIChuZXh0SXRlbSkge1xuICAgICAgICBBLnB1c2goY2IobmV4dEl0ZW0sIG4rKykpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvck9mKHNvdXJjZSwgZmFsc2UsIEEucHVzaCwgQSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgdGhpcyhBKTtcbiAgfSB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDT0xMRUNUSU9OKSB7XG4gICRleHBvcnQoJGV4cG9ydC5TLCBDT0xMRUNUSU9OLCB7IG9mOiBmdW5jdGlvbiBvZigpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgQSA9IG5ldyBBcnJheShsZW5ndGgpO1xuICAgIHdoaWxlIChsZW5ndGgtLSkgQVtsZW5ndGhdID0gYXJndW1lbnRzW2xlbmd0aF07XG4gICAgcmV0dXJuIG5ldyB0aGlzKEEpO1xuICB9IH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEZvcmNlZCByZXBsYWNlbWVudCBwcm90b3R5cGUgYWNjZXNzb3JzIG1ldGhvZHNcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fbGlicmFyeScpIHx8ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgdmFyIEsgPSBNYXRoLnJhbmRvbSgpO1xuICAvLyBJbiBGRiB0aHJvd3Mgb25seSBkZWZpbmUgbWV0aG9kc1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWYsIG5vLXVzZWxlc3MtY2FsbFxuICBfX2RlZmluZVNldHRlcl9fLmNhbGwobnVsbCwgSywgZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbiAgZGVsZXRlIHJlcXVpcmUoJy4vX2dsb2JhbCcpW0tdO1xufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciBUWVBFRCA9IHVpZCgndHlwZWRfYXJyYXknKTtcbnZhciBWSUVXID0gdWlkKCd2aWV3Jyk7XG52YXIgQUJWID0gISEoZ2xvYmFsLkFycmF5QnVmZmVyICYmIGdsb2JhbC5EYXRhVmlldyk7XG52YXIgQ09OU1RSID0gQUJWO1xudmFyIGkgPSAwO1xudmFyIGwgPSA5O1xudmFyIFR5cGVkO1xuXG52YXIgVHlwZWRBcnJheUNvbnN0cnVjdG9ycyA9IChcbiAgJ0ludDhBcnJheSxVaW50OEFycmF5LFVpbnQ4Q2xhbXBlZEFycmF5LEludDE2QXJyYXksVWludDE2QXJyYXksSW50MzJBcnJheSxVaW50MzJBcnJheSxGbG9hdDMyQXJyYXksRmxvYXQ2NEFycmF5J1xuKS5zcGxpdCgnLCcpO1xuXG53aGlsZSAoaSA8IGwpIHtcbiAgaWYgKFR5cGVkID0gZ2xvYmFsW1R5cGVkQXJyYXlDb25zdHJ1Y3RvcnNbaSsrXV0pIHtcbiAgICBoaWRlKFR5cGVkLnByb3RvdHlwZSwgVFlQRUQsIHRydWUpO1xuICAgIGhpZGUoVHlwZWQucHJvdG90eXBlLCBWSUVXLCB0cnVlKTtcbiAgfSBlbHNlIENPTlNUUiA9IGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQUJWOiBBQlYsXG4gIENPTlNUUjogQ09OU1RSLFxuICBUWVBFRDogVFlQRUQsXG4gIFZJRVc6IFZJRVdcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciAkaXRlckRldGVjdCA9IHJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0Jyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi9faW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FLCB3cmFwcGVyLCBtZXRob2RzLCBjb21tb24sIElTX01BUCwgSVNfV0VBSykge1xuICB2YXIgQmFzZSA9IGdsb2JhbFtOQU1FXTtcbiAgdmFyIEMgPSBCYXNlO1xuICB2YXIgQURERVIgPSBJU19NQVAgPyAnc2V0JyA6ICdhZGQnO1xuICB2YXIgcHJvdG8gPSBDICYmIEMucHJvdG90eXBlO1xuICB2YXIgTyA9IHt9O1xuICB2YXIgZml4TWV0aG9kID0gZnVuY3Rpb24gKEtFWSkge1xuICAgIHZhciBmbiA9IHByb3RvW0tFWV07XG4gICAgcmVkZWZpbmUocHJvdG8sIEtFWSxcbiAgICAgIEtFWSA9PSAnZGVsZXRlJyA/IGZ1bmN0aW9uIChhKSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IGZhbHNlIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnaGFzJyA/IGZ1bmN0aW9uIGhhcyhhKSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IGZhbHNlIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnZ2V0JyA/IGZ1bmN0aW9uIGdldChhKSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IHVuZGVmaW5lZCA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2FkZCcgPyBmdW5jdGlvbiBhZGQoYSkgeyBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7IHJldHVybiB0aGlzOyB9XG4gICAgICAgIDogZnVuY3Rpb24gc2V0KGEsIGIpIHsgZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEsIGIpOyByZXR1cm4gdGhpczsgfVxuICAgICk7XG4gIH07XG4gIGlmICh0eXBlb2YgQyAhPSAnZnVuY3Rpb24nIHx8ICEoSVNfV0VBSyB8fCBwcm90by5mb3JFYWNoICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3IEMoKS5lbnRyaWVzKCkubmV4dCgpO1xuICB9KSkpIHtcbiAgICAvLyBjcmVhdGUgY29sbGVjdGlvbiBjb25zdHJ1Y3RvclxuICAgIEMgPSBjb21tb24uZ2V0Q29uc3RydWN0b3Iod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUik7XG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIG1ldGhvZHMpO1xuICAgIG1ldGEuTkVFRCA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGluc3RhbmNlID0gbmV3IEMoKTtcbiAgICAvLyBlYXJseSBpbXBsZW1lbnRhdGlvbnMgbm90IHN1cHBvcnRzIGNoYWluaW5nXG4gICAgdmFyIEhBU05UX0NIQUlOSU5HID0gaW5zdGFuY2VbQURERVJdKElTX1dFQUsgPyB7fSA6IC0wLCAxKSAhPSBpbnN0YW5jZTtcbiAgICAvLyBWOCB+ICBDaHJvbWl1bSA0MC0gd2Vhay1jb2xsZWN0aW9ucyB0aHJvd3Mgb24gcHJpbWl0aXZlcywgYnV0IHNob3VsZCByZXR1cm4gZmFsc2VcbiAgICB2YXIgVEhST1dTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IGluc3RhbmNlLmhhcygxKTsgfSk7XG4gICAgLy8gbW9zdCBlYXJseSBpbXBsZW1lbnRhdGlvbnMgZG9lc24ndCBzdXBwb3J0cyBpdGVyYWJsZXMsIG1vc3QgbW9kZXJuIC0gbm90IGNsb3NlIGl0IGNvcnJlY3RseVxuICAgIHZhciBBQ0NFUFRfSVRFUkFCTEVTID0gJGl0ZXJEZXRlY3QoZnVuY3Rpb24gKGl0ZXIpIHsgbmV3IEMoaXRlcik7IH0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIC8vIGZvciBlYXJseSBpbXBsZW1lbnRhdGlvbnMgLTAgYW5kICswIG5vdCB0aGUgc2FtZVxuICAgIHZhciBCVUdHWV9aRVJPID0gIUlTX1dFQUsgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgLy8gVjggfiBDaHJvbWl1bSA0Mi0gZmFpbHMgb25seSB3aXRoIDUrIGVsZW1lbnRzXG4gICAgICB2YXIgJGluc3RhbmNlID0gbmV3IEMoKTtcbiAgICAgIHZhciBpbmRleCA9IDU7XG4gICAgICB3aGlsZSAoaW5kZXgtLSkgJGluc3RhbmNlW0FEREVSXShpbmRleCwgaW5kZXgpO1xuICAgICAgcmV0dXJuICEkaW5zdGFuY2UuaGFzKC0wKTtcbiAgICB9KTtcbiAgICBpZiAoIUFDQ0VQVF9JVEVSQUJMRVMpIHtcbiAgICAgIEMgPSB3cmFwcGVyKGZ1bmN0aW9uICh0YXJnZXQsIGl0ZXJhYmxlKSB7XG4gICAgICAgIGFuSW5zdGFuY2UodGFyZ2V0LCBDLCBOQU1FKTtcbiAgICAgICAgdmFyIHRoYXQgPSBpbmhlcml0SWZSZXF1aXJlZChuZXcgQmFzZSgpLCB0YXJnZXQsIEMpO1xuICAgICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG4gICAgICAgIHJldHVybiB0aGF0O1xuICAgICAgfSk7XG4gICAgICBDLnByb3RvdHlwZSA9IHByb3RvO1xuICAgICAgcHJvdG8uY29uc3RydWN0b3IgPSBDO1xuICAgIH1cbiAgICBpZiAoVEhST1dTX09OX1BSSU1JVElWRVMgfHwgQlVHR1lfWkVSTykge1xuICAgICAgZml4TWV0aG9kKCdkZWxldGUnKTtcbiAgICAgIGZpeE1ldGhvZCgnaGFzJyk7XG4gICAgICBJU19NQVAgJiYgZml4TWV0aG9kKCdnZXQnKTtcbiAgICB9XG4gICAgaWYgKEJVR0dZX1pFUk8gfHwgSEFTTlRfQ0hBSU5JTkcpIGZpeE1ldGhvZChBRERFUik7XG4gICAgLy8gd2VhayBjb2xsZWN0aW9ucyBzaG91bGQgbm90IGNvbnRhaW5zIC5jbGVhciBtZXRob2RcbiAgICBpZiAoSVNfV0VBSyAmJiBwcm90by5jbGVhcikgZGVsZXRlIHByb3RvLmNsZWFyO1xuICB9XG5cbiAgc2V0VG9TdHJpbmdUYWcoQywgTkFNRSk7XG5cbiAgT1tOQU1FXSA9IEM7XG4gICRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKEMgIT0gQmFzZSksIE8pO1xuXG4gIGlmICghSVNfV0VBSykgY29tbW9uLnNldFN0cm9uZyhDLCBOQU1FLCBJU19NQVApO1xuXG4gIHJldHVybiBDO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBuYXZpZ2F0b3IgPSBnbG9iYWwubmF2aWdhdG9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5hdmlnYXRvciAmJiBuYXZpZ2F0b3IudXNlckFnZW50IHx8ICcnO1xuIiwiLy8gNy4zLjIwIFNwZWNpZXNDb25zdHJ1Y3RvcihPLCBkZWZhdWx0Q29uc3RydWN0b3IpXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBEKSB7XG4gIHZhciBDID0gYW5PYmplY3QoTykuY29uc3RydWN0b3I7XG4gIHZhciBTO1xuICByZXR1cm4gQyA9PT0gdW5kZWZpbmVkIHx8IChTID0gYW5PYmplY3QoQylbU1BFQ0lFU10pID09IHVuZGVmaW5lZCA/IEQgOiBhRnVuY3Rpb24oUyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVksIGxlbmd0aCwgZXhlYykge1xuICB2YXIgU1lNQk9MID0gd2tzKEtFWSk7XG4gIHZhciBmbnMgPSBleGVjKGRlZmluZWQsIFNZTUJPTCwgJydbS0VZXSk7XG4gIHZhciBzdHJmbiA9IGZuc1swXTtcbiAgdmFyIHJ4Zm4gPSBmbnNbMV07XG4gIGlmIChmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIE8gPSB7fTtcbiAgICBPW1NZTUJPTF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9O1xuICAgIHJldHVybiAnJ1tLRVldKE8pICE9IDc7XG4gIH0pKSB7XG4gICAgcmVkZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgS0VZLCBzdHJmbik7XG4gICAgaGlkZShSZWdFeHAucHJvdG90eXBlLCBTWU1CT0wsIGxlbmd0aCA9PSAyXG4gICAgICAvLyAyMS4yLjUuOCBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV0oc3RyaW5nLCByZXBsYWNlVmFsdWUpXG4gICAgICAvLyAyMS4yLjUuMTEgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XShzdHJpbmcsIGxpbWl0KVxuICAgICAgPyBmdW5jdGlvbiAoc3RyaW5nLCBhcmcpIHsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMsIGFyZyk7IH1cbiAgICAgIC8vIDIxLjIuNS42IFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF0oc3RyaW5nKVxuICAgICAgLy8gMjEuMi41LjkgUmVnRXhwLnByb3RvdHlwZVtAQHNlYXJjaF0oc3RyaW5nKVxuICAgICAgOiBmdW5jdGlvbiAoc3RyaW5nKSB7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzKTsgfVxuICAgICk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMS4yLjUuMyBnZXQgUmVnRXhwLnByb3RvdHlwZS5mbGFnc1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRoYXQgPSBhbk9iamVjdCh0aGlzKTtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICBpZiAodGhhdC5nbG9iYWwpIHJlc3VsdCArPSAnZyc7XG4gIGlmICh0aGF0Lmlnbm9yZUNhc2UpIHJlc3VsdCArPSAnaSc7XG4gIGlmICh0aGF0Lm11bHRpbGluZSkgcmVzdWx0ICs9ICdtJztcbiAgaWYgKHRoYXQudW5pY29kZSkgcmVzdWx0ICs9ICd1JztcbiAgaWYgKHRoYXQuc3RpY2t5KSByZXN1bHQgKz0gJ3knO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIFNBRkVfQ0xPU0lORyA9IGZhbHNlO1xuXG50cnkge1xuICB2YXIgcml0ZXIgPSBbN11bSVRFUkFUT1JdKCk7XG4gIHJpdGVyWydyZXR1cm4nXSA9IGZ1bmN0aW9uICgpIHsgU0FGRV9DTE9TSU5HID0gdHJ1ZTsgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXRocm93LWxpdGVyYWxcbiAgQXJyYXkuZnJvbShyaXRlciwgZnVuY3Rpb24gKCkgeyB0aHJvdyAyOyB9KTtcbn0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjLCBza2lwQ2xvc2luZykge1xuICBpZiAoIXNraXBDbG9zaW5nICYmICFTQUZFX0NMT1NJTkcpIHJldHVybiBmYWxzZTtcbiAgdmFyIHNhZmUgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICB2YXIgYXJyID0gWzddO1xuICAgIHZhciBpdGVyID0gYXJyW0lURVJBVE9SXSgpO1xuICAgIGl0ZXIubmV4dCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHsgZG9uZTogc2FmZSA9IHRydWUgfTsgfTtcbiAgICBhcnJbSVRFUkFUT1JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcjsgfTtcbiAgICBleGVjKGFycik7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gc2FmZTtcbn07XG4iLCIvLyA3LjIuOCBJc1JlZ0V4cChhcmd1bWVudClcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIE1BVENIID0gcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgaXNSZWdFeHA7XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgKChpc1JlZ0V4cCA9IGl0W01BVENIXSkgIT09IHVuZGVmaW5lZCA/ICEhaXNSZWdFeHAgOiBjb2YoaXQpID09ICdSZWdFeHAnKTtcbn07XG4iLCIvLyA3LjIuMiBJc0FycmF5KGFyZ3VtZW50KVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIGlzQXJyYXkoYXJnKSB7XG4gIHJldHVybiBjb2YoYXJnKSA9PSAnQXJyYXknO1xufTtcbiIsImV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4iLCIvLyBmYWxzZSAtPiBBcnJheSNpbmRleE9mXG4vLyB0cnVlICAtPiBBcnJheSNpbmNsdWRlc1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJU19JTkNMVURFUykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBlbCwgZnJvbUluZGV4KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QoJHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBpZiAoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpIHdoaWxlIChsZW5ndGggPiBpbmRleCkge1xuICAgICAgdmFsdWUgPSBPW2luZGV4KytdO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgaWYgKHZhbHVlICE9IHZhbHVlKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBBcnJheSNpbmRleE9mIGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90XG4gICAgfSBlbHNlIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykge1xuICAgICAgaWYgKE9baW5kZXhdID09PSBlbCkgcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7XG4gICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICB9O1xufTtcbiIsInZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nO1xudmFyIHN0b3JlID0gZ2xvYmFsW1NIQVJFRF0gfHwgKGdsb2JhbFtTSEFSRURdID0ge30pO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHt9KTtcbn0pKCd2ZXJzaW9ucycsIFtdKS5wdXNoKHtcbiAgdmVyc2lvbjogY29yZS52ZXJzaW9uLFxuICBtb2RlOiByZXF1aXJlKCcuL19saWJyYXJ5JykgPyAncHVyZScgOiAnZ2xvYmFsJyxcbiAgY29weXJpZ2h0OiAnwqkgMjAxOCBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KSdcbn0pO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXNlIGludmFyaWFudCgpIHRvIGFzc2VydCBzdGF0ZSB3aGljaCB5b3VyIHByb2dyYW0gYXNzdW1lcyB0byBiZSB0cnVlLlxuICpcbiAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG4gKiB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYnJva2UgYW5kIHdoYXQgeW91IHdlcmVcbiAqIGV4cGVjdGluZy5cbiAqXG4gKiBUaGUgaW52YXJpYW50IG1lc3NhZ2Ugd2lsbCBiZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGludmFyaWFudFxuICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLlxuICovXG5cbnZhciBpbnZhcmlhbnQgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYSwgYiwgYywgZCwgZSwgZikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhcmlhbnQgcmVxdWlyZXMgYW4gZXJyb3IgbWVzc2FnZSBhcmd1bWVudCcpO1xuICAgIH1cbiAgfVxuXG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgdmFyIGVycm9yO1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgICdNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCAnICtcbiAgICAgICAgJ2ZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuJ1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFyZ3MgPSBbYSwgYiwgYywgZCwgZSwgZl07XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107IH0pXG4gICAgICApO1xuICAgICAgZXJyb3IubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB9XG5cbiAgICBlcnJvci5mcmFtZXNUb1BvcCA9IDE7IC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgaW52YXJpYW50J3Mgb3duIGZyYW1lXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaW52YXJpYW50O1xuIiwiZXhwb3J0IGNvbnN0IFNBR0FfVE9PTEJPWEJPWERBVEFfQk9YREFUQV9VUERBVEUgPSAnU0FHQV9UT09MQk9YQk9YREFUQV9CT1hEQVRBX1VQREFURSc7XHJcbmV4cG9ydCBjb25zdCBTQUdBX1RPT0xCT1hCT1hEQVRBX0JPWERBVEFfREVMRVRFID0gJ1NBR0FfVE9PTEJPWEJPWERBVEFfQk9YREFUQV9ERUxFVEUnO1xyXG5leHBvcnQgY29uc3QgU0FHQV9UT09MQk9YQk9YREFUQV9CT1hEQVRBX0NSRUFURSA9ICdTQUdBX1RPT0xCT1hCT1hEQVRBX0JPWERBVEFfQ1JFQVRFJztcclxuXHJcblxyXG5leHBvcnQgY29uc3QgU2FnYV9Ub29sQm94Qm94RGF0YV9Cb3hEYXRhX1VwZGF0ZSA9IChwYXlsb2FkID0ge30pID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdHlwZTogU0FHQV9UT09MQk9YQk9YREFUQV9CT1hEQVRBX1VQREFURSxcclxuICAgICAgICBwYXlsb2FkOiB7XHJcbiAgICAgICAgICAgIGJveDogcGF5bG9hZC5ib3gsXHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBTYWdhX1Rvb2xCb3hCb3hEYXRhX0JveERhdGFfRGVsZXRlID0gKHBheWxvYWQgPSB7fSkgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiBTQUdBX1RPT0xCT1hCT1hEQVRBX0JPWERBVEFfREVMRVRFLFxyXG4gICAgICAgIHBheWxvYWQ6IHtcclxuICAgICAgICAgICAgYm94X2lkOiBwYXlsb2FkLmJveF9pZCxcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFNhZ2FfVG9vbEJveEJveERhdGFfQm94RGF0YV9DcmVhdGUgPSAocGF5bG9hZCA9IHt9KSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHR5cGU6IFNBR0FfVE9PTEJPWEJPWERBVEFfQk9YREFUQV9DUkVBVEUsXHJcbiAgICAgICAgcGF5bG9hZDoge1xyXG4gICAgICAgICAgICBib3g6IHBheWxvYWQuYm94LFxyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XHJcblxyXG4iLCIvL1xyXG4vLyDntKDmnZDplqLpgKNcclxuLy9cclxuXHJcbmV4cG9ydCBjb25zdCBTb3phaSA9IHtcclxuICAgIC8vXHJcbiAgICAvLyDntKDmnZBJROOBi+OCieOAgee0oOadkOODrOOCs+ODvOODieOCkui/lOOBmVxyXG4gICAgLy9cclxuICAgIC8vIFtJTl1cclxuICAgIC8vICAgc296YWk6IOe0oOadkOaDheWgsVxyXG4gICAgLy8gICBzb3phaV9pZDog57Sg5p2QSURcclxuICAgIC8vXHJcbiAgICAvLyBbT1VUXVxyXG4gICAgLy8gICByZWM6IOe0oOadkOODrOOCs+ODvOODiVxyXG4gICAgLy9cclxuICAgIGdldFNvemFpOiAoc296YWksIHNvemFpX2lkKSA9PiB7XHJcbiAgICAgICAgbGV0IHNvemFpX3JlYyA9ICcnO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNvemFpLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChzb3phaVtpXS5zb3phaV9pZCA9PSBzb3phaV9pZCkge1xyXG4gICAgICAgICAgICAgICAgc296YWlfcmVjID0gc296YWlbaV07XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHNvemFpX3JlYztcclxuICAgIH0sXHJcbn0iLCJleHBvcnQgY29uc3QgU1VfREFORERfTU9VU0VET1dOID0gJ1NVX0RBTkREX01PVVNFRE9XTic7XHJcbmV4cG9ydCBjb25zdCBTVV9EQU5ERF9NT1VTRVVQID0gJ1NVX0RBTkREX01PVVNFVVAnO1xyXG5cclxuXHJcbmV4cG9ydCBjb25zdCBTVV9EQW5kRF9Nb3VzZURvd24gPSAocGF5bG9hZCA9IHt9KSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHR5cGU6IFNVX0RBTkREX01PVVNFRE9XTixcclxuICAgICAgICBwYXlsb2FkOiB7XHJcbiAgICAgICAgICAgIHg6IHBheWxvYWQueCxcclxuICAgICAgICAgICAgeTogcGF5bG9hZC55LFxyXG4gICAgICAgICAgICB0eXBlOiBwYXlsb2FkLnR5cGUsXHJcbiAgICAgICAgICAgIHZhbHVlOiBwYXlsb2FkLnZhbHVlLFxyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgU1VfREFuZERfTW91c2VVcCA9IChwYXlsb2FkID0ge30pID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdHlwZTogU1VfREFORERfTU9VU0VVUCxcclxuICAgICAgICBwYXlsb2FkOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IHBheWxvYWQudHlwZSxcclxuICAgICAgICAgICAgdmFsdWU6IHBheWxvYWQudmFsdWUsXHJcbiAgICAgICAgICAgIHg6IHBheWxvYWQueCxcclxuICAgICAgICAgICAgeTogcGF5bG9hZC55LFxyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XHJcbiIsImV4cG9ydCBjb25zdCBTVV9UT09MQk9YQk9YREFUQV9VUERBVEVCVVRUT05fQ0xJQ0sgPSAnU1VfVE9PTEJPWEJPWERBVEFfVVBEQVRFQlVUVE9OX0NMSUNLJztcclxuZXhwb3J0IGNvbnN0IFNVX1RPT0xCT1hCT1hEQVRBX0RFTEVURUJVVFRPTl9DTElDSyA9ICdTVV9UT09MQk9YQk9YREFUQV9ERUxFVEVCVVRUT05fQ0xJQ0snO1xyXG5leHBvcnQgY29uc3QgU1VfVE9PTEJPWEJPWERBVEFfQ1JFQVRFQlVUVE9OX0NMSUNLID0gJ1NVX1RPT0xCT1hCT1hEQVRBX0NSRUFURUJVVFRPTl9DTElDSyc7XHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IFNVX1Rvb2xCb3hCb3hEYXRhX1VwZGF0ZUJ1dHRvbl9DbGljayA9IChwYXlsb2FkID0ge30pID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdHlwZTogU1VfVE9PTEJPWEJPWERBVEFfVVBEQVRFQlVUVE9OX0NMSUNLLFxyXG4gICAgICAgIHBheWxvYWQ6IHtcclxuICAgICAgICAgICAgYm94OiBwYXlsb2FkLmJveCxcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFNVX1Rvb2xCb3hCb3hEYXRhX0RlbGV0ZUJ1dHRvbl9DbGljayA9IChwYXlsb2FkID0ge30pID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdHlwZTogU1VfVE9PTEJPWEJPWERBVEFfREVMRVRFQlVUVE9OX0NMSUNLLFxyXG4gICAgICAgIHBheWxvYWQ6IHtcclxuICAgICAgICAgICAgYm94X2lkOiBwYXlsb2FkLmJveF9pZCxcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFNVX1Rvb2xCb3hCb3hEYXRhX0NyZWF0ZUJ1dHRvbl9DbGljayA9IChwYXlsb2FkID0ge30pID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdHlwZTogU1VfVE9PTEJPWEJPWERBVEFfQ1JFQVRFQlVUVE9OX0NMSUNLLFxyXG4gICAgICAgIHBheWxvYWQ6IHtcclxuICAgICAgICAgICAgYm94OiBwYXlsb2FkLmJveCxcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxyXG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgJHR5cGVkID0gcmVxdWlyZSgnLi9fdHlwZWQnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHRvSW5kZXggPSByZXF1aXJlKCcuL190by1pbmRleCcpO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGFycmF5RmlsbCA9IHJlcXVpcmUoJy4vX2FycmF5LWZpbGwnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcbnZhciBEQVRBX1ZJRVcgPSAnRGF0YVZpZXcnO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIFdST05HX0xFTkdUSCA9ICdXcm9uZyBsZW5ndGghJztcbnZhciBXUk9OR19JTkRFWCA9ICdXcm9uZyBpbmRleCEnO1xudmFyICRBcnJheUJ1ZmZlciA9IGdsb2JhbFtBUlJBWV9CVUZGRVJdO1xudmFyICREYXRhVmlldyA9IGdsb2JhbFtEQVRBX1ZJRVddO1xudmFyIE1hdGggPSBnbG9iYWwuTWF0aDtcbnZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2hhZG93LXJlc3RyaWN0ZWQtbmFtZXNcbnZhciBJbmZpbml0eSA9IGdsb2JhbC5JbmZpbml0eTtcbnZhciBCYXNlQnVmZmVyID0gJEFycmF5QnVmZmVyO1xudmFyIGFicyA9IE1hdGguYWJzO1xudmFyIHBvdyA9IE1hdGgucG93O1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBsb2cgPSBNYXRoLmxvZztcbnZhciBMTjIgPSBNYXRoLkxOMjtcbnZhciBCVUZGRVIgPSAnYnVmZmVyJztcbnZhciBCWVRFX0xFTkdUSCA9ICdieXRlTGVuZ3RoJztcbnZhciBCWVRFX09GRlNFVCA9ICdieXRlT2Zmc2V0JztcbnZhciAkQlVGRkVSID0gREVTQ1JJUFRPUlMgPyAnX2InIDogQlVGRkVSO1xudmFyICRMRU5HVEggPSBERVNDUklQVE9SUyA/ICdfbCcgOiBCWVRFX0xFTkdUSDtcbnZhciAkT0ZGU0VUID0gREVTQ1JJUFRPUlMgPyAnX28nIDogQllURV9PRkZTRVQ7XG5cbi8vIElFRUU3NTQgY29udmVyc2lvbnMgYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9pZWVlNzU0XG5mdW5jdGlvbiBwYWNrSUVFRTc1NCh2YWx1ZSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBidWZmZXIgPSBuZXcgQXJyYXkobkJ5dGVzKTtcbiAgdmFyIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDE7XG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxO1xuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDE7XG4gIHZhciBydCA9IG1MZW4gPT09IDIzID8gcG93KDIsIC0yNCkgLSBwb3coMiwgLTc3KSA6IDA7XG4gIHZhciBpID0gMDtcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgdmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCA/IDEgOiAwO1xuICB2YXIgZSwgbSwgYztcbiAgdmFsdWUgPSBhYnModmFsdWUpO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIGlmICh2YWx1ZSAhPSB2YWx1ZSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgbSA9IHZhbHVlICE9IHZhbHVlID8gMSA6IDA7XG4gICAgZSA9IGVNYXg7XG4gIH0gZWxzZSB7XG4gICAgZSA9IGZsb29yKGxvZyh2YWx1ZSkgLyBMTjIpO1xuICAgIGlmICh2YWx1ZSAqIChjID0gcG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS07XG4gICAgICBjICo9IDI7XG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgdmFsdWUgKz0gcnQgLyBjO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIHBvdygyLCAxIC0gZUJpYXMpO1xuICAgIH1cbiAgICBpZiAodmFsdWUgKiBjID49IDIpIHtcbiAgICAgIGUrKztcbiAgICAgIGMgLz0gMjtcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSBlTWF4KSB7XG4gICAgICBtID0gMDtcbiAgICAgIGUgPSBlTWF4O1xuICAgIH0gZWxzZSBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIG0gPSAodmFsdWUgKiBjIC0gMSkgKiBwb3coMiwgbUxlbik7XG4gICAgICBlID0gZSArIGVCaWFzO1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gdmFsdWUgKiBwb3coMiwgZUJpYXMgLSAxKSAqIHBvdygyLCBtTGVuKTtcbiAgICAgIGUgPSAwO1xuICAgIH1cbiAgfVxuICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbaSsrXSA9IG0gJiAyNTUsIG0gLz0gMjU2LCBtTGVuIC09IDgpO1xuICBlID0gZSA8PCBtTGVuIHwgbTtcbiAgZUxlbiArPSBtTGVuO1xuICBmb3IgKDsgZUxlbiA+IDA7IGJ1ZmZlcltpKytdID0gZSAmIDI1NSwgZSAvPSAyNTYsIGVMZW4gLT0gOCk7XG4gIGJ1ZmZlclstLWldIHw9IHMgKiAxMjg7XG4gIHJldHVybiBidWZmZXI7XG59XG5mdW5jdGlvbiB1bnBhY2tJRUVFNzU0KGJ1ZmZlciwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxO1xuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMTtcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxO1xuICB2YXIgbkJpdHMgPSBlTGVuIC0gNztcbiAgdmFyIGkgPSBuQnl0ZXMgLSAxO1xuICB2YXIgcyA9IGJ1ZmZlcltpLS1dO1xuICB2YXIgZSA9IHMgJiAxMjc7XG4gIHZhciBtO1xuICBzID4+PSA3O1xuICBmb3IgKDsgbkJpdHMgPiAwOyBlID0gZSAqIDI1NiArIGJ1ZmZlcltpXSwgaS0tLCBuQml0cyAtPSA4KTtcbiAgbSA9IGUgJiAoMSA8PCAtbkJpdHMpIC0gMTtcbiAgZSA+Pj0gLW5CaXRzO1xuICBuQml0cyArPSBtTGVuO1xuICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gbSAqIDI1NiArIGJ1ZmZlcltpXSwgaS0tLCBuQml0cyAtPSA4KTtcbiAgaWYgKGUgPT09IDApIHtcbiAgICBlID0gMSAtIGVCaWFzO1xuICB9IGVsc2UgaWYgKGUgPT09IGVNYXgpIHtcbiAgICByZXR1cm4gbSA/IE5hTiA6IHMgPyAtSW5maW5pdHkgOiBJbmZpbml0eTtcbiAgfSBlbHNlIHtcbiAgICBtID0gbSArIHBvdygyLCBtTGVuKTtcbiAgICBlID0gZSAtIGVCaWFzO1xuICB9IHJldHVybiAocyA/IC0xIDogMSkgKiBtICogcG93KDIsIGUgLSBtTGVuKTtcbn1cblxuZnVuY3Rpb24gdW5wYWNrSTMyKGJ5dGVzKSB7XG4gIHJldHVybiBieXRlc1szXSA8PCAyNCB8IGJ5dGVzWzJdIDw8IDE2IHwgYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdO1xufVxuZnVuY3Rpb24gcGFja0k4KGl0KSB7XG4gIHJldHVybiBbaXQgJiAweGZmXTtcbn1cbmZ1bmN0aW9uIHBhY2tJMTYoaXQpIHtcbiAgcmV0dXJuIFtpdCAmIDB4ZmYsIGl0ID4+IDggJiAweGZmXTtcbn1cbmZ1bmN0aW9uIHBhY2tJMzIoaXQpIHtcbiAgcmV0dXJuIFtpdCAmIDB4ZmYsIGl0ID4+IDggJiAweGZmLCBpdCA+PiAxNiAmIDB4ZmYsIGl0ID4+IDI0ICYgMHhmZl07XG59XG5mdW5jdGlvbiBwYWNrRjY0KGl0KSB7XG4gIHJldHVybiBwYWNrSUVFRTc1NChpdCwgNTIsIDgpO1xufVxuZnVuY3Rpb24gcGFja0YzMihpdCkge1xuICByZXR1cm4gcGFja0lFRUU3NTQoaXQsIDIzLCA0KTtcbn1cblxuZnVuY3Rpb24gYWRkR2V0dGVyKEMsIGtleSwgaW50ZXJuYWwpIHtcbiAgZFAoQ1tQUk9UT1RZUEVdLCBrZXksIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzW2ludGVybmFsXTsgfSB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0KHZpZXcsIGJ5dGVzLCBpbmRleCwgaXNMaXR0bGVFbmRpYW4pIHtcbiAgdmFyIG51bUluZGV4ID0gK2luZGV4O1xuICB2YXIgaW50SW5kZXggPSB0b0luZGV4KG51bUluZGV4KTtcbiAgaWYgKGludEluZGV4ICsgYnl0ZXMgPiB2aWV3WyRMRU5HVEhdKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0lOREVYKTtcbiAgdmFyIHN0b3JlID0gdmlld1skQlVGRkVSXS5fYjtcbiAgdmFyIHN0YXJ0ID0gaW50SW5kZXggKyB2aWV3WyRPRkZTRVRdO1xuICB2YXIgcGFjayA9IHN0b3JlLnNsaWNlKHN0YXJ0LCBzdGFydCArIGJ5dGVzKTtcbiAgcmV0dXJuIGlzTGl0dGxlRW5kaWFuID8gcGFjayA6IHBhY2sucmV2ZXJzZSgpO1xufVxuZnVuY3Rpb24gc2V0KHZpZXcsIGJ5dGVzLCBpbmRleCwgY29udmVyc2lvbiwgdmFsdWUsIGlzTGl0dGxlRW5kaWFuKSB7XG4gIHZhciBudW1JbmRleCA9ICtpbmRleDtcbiAgdmFyIGludEluZGV4ID0gdG9JbmRleChudW1JbmRleCk7XG4gIGlmIChpbnRJbmRleCArIGJ5dGVzID4gdmlld1skTEVOR1RIXSkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19JTkRFWCk7XG4gIHZhciBzdG9yZSA9IHZpZXdbJEJVRkZFUl0uX2I7XG4gIHZhciBzdGFydCA9IGludEluZGV4ICsgdmlld1skT0ZGU0VUXTtcbiAgdmFyIHBhY2sgPSBjb252ZXJzaW9uKCt2YWx1ZSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXM7IGkrKykgc3RvcmVbc3RhcnQgKyBpXSA9IHBhY2tbaXNMaXR0bGVFbmRpYW4gPyBpIDogYnl0ZXMgLSBpIC0gMV07XG59XG5cbmlmICghJHR5cGVkLkFCVikge1xuICAkQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiBBcnJheUJ1ZmZlcihsZW5ndGgpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsICRBcnJheUJ1ZmZlciwgQVJSQVlfQlVGRkVSKTtcbiAgICB2YXIgYnl0ZUxlbmd0aCA9IHRvSW5kZXgobGVuZ3RoKTtcbiAgICB0aGlzLl9iID0gYXJyYXlGaWxsLmNhbGwobmV3IEFycmF5KGJ5dGVMZW5ndGgpLCAwKTtcbiAgICB0aGlzWyRMRU5HVEhdID0gYnl0ZUxlbmd0aDtcbiAgfTtcblxuICAkRGF0YVZpZXcgPSBmdW5jdGlvbiBEYXRhVmlldyhidWZmZXIsIGJ5dGVPZmZzZXQsIGJ5dGVMZW5ndGgpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsICREYXRhVmlldywgREFUQV9WSUVXKTtcbiAgICBhbkluc3RhbmNlKGJ1ZmZlciwgJEFycmF5QnVmZmVyLCBEQVRBX1ZJRVcpO1xuICAgIHZhciBidWZmZXJMZW5ndGggPSBidWZmZXJbJExFTkdUSF07XG4gICAgdmFyIG9mZnNldCA9IHRvSW50ZWdlcihieXRlT2Zmc2V0KTtcbiAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgPiBidWZmZXJMZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIG9mZnNldCEnKTtcbiAgICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA9PT0gdW5kZWZpbmVkID8gYnVmZmVyTGVuZ3RoIC0gb2Zmc2V0IDogdG9MZW5ndGgoYnl0ZUxlbmd0aCk7XG4gICAgaWYgKG9mZnNldCArIGJ5dGVMZW5ndGggPiBidWZmZXJMZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICB0aGlzWyRCVUZGRVJdID0gYnVmZmVyO1xuICAgIHRoaXNbJE9GRlNFVF0gPSBvZmZzZXQ7XG4gICAgdGhpc1skTEVOR1RIXSA9IGJ5dGVMZW5ndGg7XG4gIH07XG5cbiAgaWYgKERFU0NSSVBUT1JTKSB7XG4gICAgYWRkR2V0dGVyKCRBcnJheUJ1ZmZlciwgQllURV9MRU5HVEgsICdfbCcpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJVRkZFUiwgJ19iJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgQllURV9MRU5HVEgsICdfbCcpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJZVEVfT0ZGU0VULCAnX28nKTtcbiAgfVxuXG4gIHJlZGVmaW5lQWxsKCREYXRhVmlld1tQUk9UT1RZUEVdLCB7XG4gICAgZ2V0SW50ODogZnVuY3Rpb24gZ2V0SW50OChieXRlT2Zmc2V0KSB7XG4gICAgICByZXR1cm4gZ2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQpWzBdIDw8IDI0ID4+IDI0O1xuICAgIH0sXG4gICAgZ2V0VWludDg6IGZ1bmN0aW9uIGdldFVpbnQ4KGJ5dGVPZmZzZXQpIHtcbiAgICAgIHJldHVybiBnZXQodGhpcywgMSwgYnl0ZU9mZnNldClbMF07XG4gICAgfSxcbiAgICBnZXRJbnQxNjogZnVuY3Rpb24gZ2V0SW50MTYoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgdmFyIGJ5dGVzID0gZ2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSk7XG4gICAgICByZXR1cm4gKGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXSkgPDwgMTYgPj4gMTY7XG4gICAgfSxcbiAgICBnZXRVaW50MTY6IGZ1bmN0aW9uIGdldFVpbnQxNihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICB2YXIgYnl0ZXMgPSBnZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKTtcbiAgICAgIHJldHVybiBieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF07XG4gICAgfSxcbiAgICBnZXRJbnQzMjogZnVuY3Rpb24gZ2V0SW50MzIoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0kzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSk7XG4gICAgfSxcbiAgICBnZXRVaW50MzI6IGZ1bmN0aW9uIGdldFVpbnQzMihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSTMyKGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pKSA+Pj4gMDtcbiAgICB9LFxuICAgIGdldEZsb2F0MzI6IGZ1bmN0aW9uIGdldEZsb2F0MzIoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0lFRUU3NTQoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSksIDIzLCA0KTtcbiAgICB9LFxuICAgIGdldEZsb2F0NjQ6IGZ1bmN0aW9uIGdldEZsb2F0NjQoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0lFRUU3NTQoZ2V0KHRoaXMsIDgsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSksIDUyLCA4KTtcbiAgICB9LFxuICAgIHNldEludDg6IGZ1bmN0aW9uIHNldEludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgIHNldCh0aGlzLCAxLCBieXRlT2Zmc2V0LCBwYWNrSTgsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNldFVpbnQ4OiBmdW5jdGlvbiBzZXRVaW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgc2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQsIHBhY2tJOCwgdmFsdWUpO1xuICAgIH0sXG4gICAgc2V0SW50MTY6IGZ1bmN0aW9uIHNldEludDE2KGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgcGFja0kxNiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRVaW50MTY6IGZ1bmN0aW9uIHNldFVpbnQxNihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIHBhY2tJMTYsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0SW50MzI6IGZ1bmN0aW9uIHNldEludDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0kzMiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRVaW50MzI6IGZ1bmN0aW9uIHNldFVpbnQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0RmxvYXQzMjogZnVuY3Rpb24gc2V0RmxvYXQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tGMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0RmxvYXQ2NDogZnVuY3Rpb24gc2V0RmxvYXQ2NChieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDgsIGJ5dGVPZmZzZXQsIHBhY2tGNjQsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH1cbiAgfSk7XG59IGVsc2Uge1xuICBpZiAoIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAkQXJyYXlCdWZmZXIoMSk7XG4gIH0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3ICRBcnJheUJ1ZmZlcigtMSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gIH0pIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBuZXcgJEFycmF5QnVmZmVyKCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgbmV3ICRBcnJheUJ1ZmZlcigxLjUpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoTmFOKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICByZXR1cm4gJEFycmF5QnVmZmVyLm5hbWUgIT0gQVJSQVlfQlVGRkVSO1xuICB9KSkge1xuICAgICRBcnJheUJ1ZmZlciA9IGZ1bmN0aW9uIEFycmF5QnVmZmVyKGxlbmd0aCkge1xuICAgICAgYW5JbnN0YW5jZSh0aGlzLCAkQXJyYXlCdWZmZXIpO1xuICAgICAgcmV0dXJuIG5ldyBCYXNlQnVmZmVyKHRvSW5kZXgobGVuZ3RoKSk7XG4gICAgfTtcbiAgICB2YXIgQXJyYXlCdWZmZXJQcm90byA9ICRBcnJheUJ1ZmZlcltQUk9UT1RZUEVdID0gQmFzZUJ1ZmZlcltQUk9UT1RZUEVdO1xuICAgIGZvciAodmFyIGtleXMgPSBnT1BOKEJhc2VCdWZmZXIpLCBqID0gMCwga2V5OyBrZXlzLmxlbmd0aCA+IGo7KSB7XG4gICAgICBpZiAoISgoa2V5ID0ga2V5c1tqKytdKSBpbiAkQXJyYXlCdWZmZXIpKSBoaWRlKCRBcnJheUJ1ZmZlciwga2V5LCBCYXNlQnVmZmVyW2tleV0pO1xuICAgIH1cbiAgICBpZiAoIUxJQlJBUlkpIEFycmF5QnVmZmVyUHJvdG8uY29uc3RydWN0b3IgPSAkQXJyYXlCdWZmZXI7XG4gIH1cbiAgLy8gaU9TIFNhZmFyaSA3LnggYnVnXG4gIHZhciB2aWV3ID0gbmV3ICREYXRhVmlldyhuZXcgJEFycmF5QnVmZmVyKDIpKTtcbiAgdmFyICRzZXRJbnQ4ID0gJERhdGFWaWV3W1BST1RPVFlQRV0uc2V0SW50ODtcbiAgdmlldy5zZXRJbnQ4KDAsIDIxNDc0ODM2NDgpO1xuICB2aWV3LnNldEludDgoMSwgMjE0NzQ4MzY0OSk7XG4gIGlmICh2aWV3LmdldEludDgoMCkgfHwgIXZpZXcuZ2V0SW50OCgxKSkgcmVkZWZpbmVBbGwoJERhdGFWaWV3W1BST1RPVFlQRV0sIHtcbiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICAkc2V0SW50OC5jYWxsKHRoaXMsIGJ5dGVPZmZzZXQsIHZhbHVlIDw8IDI0ID4+IDI0KTtcbiAgICB9LFxuICAgIHNldFVpbnQ4OiBmdW5jdGlvbiBzZXRVaW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgJHNldEludDguY2FsbCh0aGlzLCBieXRlT2Zmc2V0LCB2YWx1ZSA8PCAyNCA+PiAyNCk7XG4gICAgfVxuICB9LCB0cnVlKTtcbn1cbnNldFRvU3RyaW5nVGFnKCRBcnJheUJ1ZmZlciwgQVJSQVlfQlVGRkVSKTtcbnNldFRvU3RyaW5nVGFnKCREYXRhVmlldywgREFUQV9WSUVXKTtcbmhpZGUoJERhdGFWaWV3W1BST1RPVFlQRV0sICR0eXBlZC5WSUVXLCB0cnVlKTtcbmV4cG9ydHNbQVJSQVlfQlVGRkVSXSA9ICRBcnJheUJ1ZmZlcjtcbmV4cG9ydHNbREFUQV9WSUVXXSA9ICREYXRhVmlldztcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDI1LjQuMS41IE5ld1Byb21pc2VDYXBhYmlsaXR5KEMpXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xuXG5mdW5jdGlvbiBQcm9taXNlQ2FwYWJpbGl0eShDKSB7XG4gIHZhciByZXNvbHZlLCByZWplY3Q7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBDKGZ1bmN0aW9uICgkJHJlc29sdmUsICQkcmVqZWN0KSB7XG4gICAgaWYgKHJlc29sdmUgIT09IHVuZGVmaW5lZCB8fCByZWplY3QgIT09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKCdCYWQgUHJvbWlzZSBjb25zdHJ1Y3RvcicpO1xuICAgIHJlc29sdmUgPSAkJHJlc29sdmU7XG4gICAgcmVqZWN0ID0gJCRyZWplY3Q7XG4gIH0pO1xuICB0aGlzLnJlc29sdmUgPSBhRnVuY3Rpb24ocmVzb2x2ZSk7XG4gIHRoaXMucmVqZWN0ID0gYUZ1bmN0aW9uKHJlamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiAoQykge1xuICByZXR1cm4gbmV3IFByb21pc2VDYXBhYmlsaXR5KEMpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBtYWNyb3Rhc2sgPSByZXF1aXJlKCcuL190YXNrJykuc2V0O1xudmFyIE9ic2VydmVyID0gZ2xvYmFsLk11dGF0aW9uT2JzZXJ2ZXIgfHwgZ2xvYmFsLldlYktpdE11dGF0aW9uT2JzZXJ2ZXI7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIFByb21pc2UgPSBnbG9iYWwuUHJvbWlzZTtcbnZhciBpc05vZGUgPSByZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaGVhZCwgbGFzdCwgbm90aWZ5O1xuXG4gIHZhciBmbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGFyZW50LCBmbjtcbiAgICBpZiAoaXNOb2RlICYmIChwYXJlbnQgPSBwcm9jZXNzLmRvbWFpbikpIHBhcmVudC5leGl0KCk7XG4gICAgd2hpbGUgKGhlYWQpIHtcbiAgICAgIGZuID0gaGVhZC5mbjtcbiAgICAgIGhlYWQgPSBoZWFkLm5leHQ7XG4gICAgICB0cnkge1xuICAgICAgICBmbigpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoaGVhZCkgbm90aWZ5KCk7XG4gICAgICAgIGVsc2UgbGFzdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9IGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHBhcmVudCkgcGFyZW50LmVudGVyKCk7XG4gIH07XG5cbiAgLy8gTm9kZS5qc1xuICBpZiAoaXNOb2RlKSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhmbHVzaCk7XG4gICAgfTtcbiAgLy8gYnJvd3NlcnMgd2l0aCBNdXRhdGlvbk9ic2VydmVyLCBleGNlcHQgaU9TIFNhZmFyaSAtIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8zMzlcbiAgfSBlbHNlIGlmIChPYnNlcnZlciAmJiAhKGdsb2JhbC5uYXZpZ2F0b3IgJiYgZ2xvYmFsLm5hdmlnYXRvci5zdGFuZGFsb25lKSkge1xuICAgIHZhciB0b2dnbGUgPSB0cnVlO1xuICAgIHZhciBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xuICAgIG5ldyBPYnNlcnZlcihmbHVzaCkub2JzZXJ2ZShub2RlLCB7IGNoYXJhY3RlckRhdGE6IHRydWUgfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgbm9kZS5kYXRhID0gdG9nZ2xlID0gIXRvZ2dsZTtcbiAgICB9O1xuICAvLyBlbnZpcm9ubWVudHMgd2l0aCBtYXliZSBub24tY29tcGxldGVseSBjb3JyZWN0LCBidXQgZXhpc3RlbnQgUHJvbWlzZVxuICB9IGVsc2UgaWYgKFByb21pc2UgJiYgUHJvbWlzZS5yZXNvbHZlKSB7XG4gICAgLy8gUHJvbWlzZS5yZXNvbHZlIHdpdGhvdXQgYW4gYXJndW1lbnQgdGhyb3dzIGFuIGVycm9yIGluIExHIFdlYk9TIDJcbiAgICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSh1bmRlZmluZWQpO1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb21pc2UudGhlbihmbHVzaCk7XG4gICAgfTtcbiAgLy8gZm9yIG90aGVyIGVudmlyb25tZW50cyAtIG1hY3JvdGFzayBiYXNlZCBvbjpcbiAgLy8gLSBzZXRJbW1lZGlhdGVcbiAgLy8gLSBNZXNzYWdlQ2hhbm5lbFxuICAvLyAtIHdpbmRvdy5wb3N0TWVzc2FnXG4gIC8vIC0gb25yZWFkeXN0YXRlY2hhbmdlXG4gIC8vIC0gc2V0VGltZW91dFxuICB9IGVsc2Uge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHN0cmFuZ2UgSUUgKyB3ZWJwYWNrIGRldiBzZXJ2ZXIgYnVnIC0gdXNlIC5jYWxsKGdsb2JhbClcbiAgICAgIG1hY3JvdGFzay5jYWxsKGdsb2JhbCwgZmx1c2gpO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGZuKSB7XG4gICAgdmFyIHRhc2sgPSB7IGZuOiBmbiwgbmV4dDogdW5kZWZpbmVkIH07XG4gICAgaWYgKGxhc3QpIGxhc3QubmV4dCA9IHRhc2s7XG4gICAgaWYgKCFoZWFkKSB7XG4gICAgICBoZWFkID0gdGFzaztcbiAgICAgIG5vdGlmeSgpO1xuICAgIH0gbGFzdCA9IHRhc2s7XG4gIH07XG59O1xuIiwidmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGludm9rZSA9IHJlcXVpcmUoJy4vX2ludm9rZScpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuL19odG1sJyk7XG52YXIgY2VsID0gcmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBzZXRUYXNrID0gZ2xvYmFsLnNldEltbWVkaWF0ZTtcbnZhciBjbGVhclRhc2sgPSBnbG9iYWwuY2xlYXJJbW1lZGlhdGU7XG52YXIgTWVzc2FnZUNoYW5uZWwgPSBnbG9iYWwuTWVzc2FnZUNoYW5uZWw7XG52YXIgRGlzcGF0Y2ggPSBnbG9iYWwuRGlzcGF0Y2g7XG52YXIgY291bnRlciA9IDA7XG52YXIgcXVldWUgPSB7fTtcbnZhciBPTlJFQURZU1RBVEVDSEFOR0UgPSAnb25yZWFkeXN0YXRlY2hhbmdlJztcbnZhciBkZWZlciwgY2hhbm5lbCwgcG9ydDtcbnZhciBydW4gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBpZCA9ICt0aGlzO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG4gIGlmIChxdWV1ZS5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICB2YXIgZm4gPSBxdWV1ZVtpZF07XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgICBmbigpO1xuICB9XG59O1xudmFyIGxpc3RlbmVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gIHJ1bi5jYWxsKGV2ZW50LmRhdGEpO1xufTtcbi8vIE5vZGUuanMgMC45KyAmIElFMTArIGhhcyBzZXRJbW1lZGlhdGUsIG90aGVyd2lzZTpcbmlmICghc2V0VGFzayB8fCAhY2xlYXJUYXNrKSB7XG4gIHNldFRhc2sgPSBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoZm4pIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIHZhciBpID0gMTtcbiAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGkpIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgcXVldWVbKytjb3VudGVyXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgICAgaW52b2tlKHR5cGVvZiBmbiA9PSAnZnVuY3Rpb24nID8gZm4gOiBGdW5jdGlvbihmbiksIGFyZ3MpO1xuICAgIH07XG4gICAgZGVmZXIoY291bnRlcik7XG4gICAgcmV0dXJuIGNvdW50ZXI7XG4gIH07XG4gIGNsZWFyVGFzayA9IGZ1bmN0aW9uIGNsZWFySW1tZWRpYXRlKGlkKSB7XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgfTtcbiAgLy8gTm9kZS5qcyAwLjgtXG4gIGlmIChyZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2VzcycpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhjdHgocnVuLCBpZCwgMSkpO1xuICAgIH07XG4gIC8vIFNwaGVyZSAoSlMgZ2FtZSBlbmdpbmUpIERpc3BhdGNoIEFQSVxuICB9IGVsc2UgaWYgKERpc3BhdGNoICYmIERpc3BhdGNoLm5vdykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBEaXNwYXRjaC5ub3coY3R4KHJ1biwgaWQsIDEpKTtcbiAgICB9O1xuICAvLyBCcm93c2VycyB3aXRoIE1lc3NhZ2VDaGFubmVsLCBpbmNsdWRlcyBXZWJXb3JrZXJzXG4gIH0gZWxzZSBpZiAoTWVzc2FnZUNoYW5uZWwpIHtcbiAgICBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gICAgcG9ydCA9IGNoYW5uZWwucG9ydDI7XG4gICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBsaXN0ZW5lcjtcbiAgICBkZWZlciA9IGN0eChwb3J0LnBvc3RNZXNzYWdlLCBwb3J0LCAxKTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBwb3N0TWVzc2FnZSwgc2tpcCBXZWJXb3JrZXJzXG4gIC8vIElFOCBoYXMgcG9zdE1lc3NhZ2UsIGJ1dCBpdCdzIHN5bmMgJiB0eXBlb2YgaXRzIHBvc3RNZXNzYWdlIGlzICdvYmplY3QnXG4gIH0gZWxzZSBpZiAoZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIgJiYgdHlwZW9mIHBvc3RNZXNzYWdlID09ICdmdW5jdGlvbicgJiYgIWdsb2JhbC5pbXBvcnRTY3JpcHRzKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShpZCArICcnLCAnKicpO1xuICAgIH07XG4gICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBsaXN0ZW5lciwgZmFsc2UpO1xuICAvLyBJRTgtXG4gIH0gZWxzZSBpZiAoT05SRUFEWVNUQVRFQ0hBTkdFIGluIGNlbCgnc2NyaXB0JykpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgaHRtbC5hcHBlbmRDaGlsZChjZWwoJ3NjcmlwdCcpKVtPTlJFQURZU1RBVEVDSEFOR0VdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBodG1sLnJlbW92ZUNoaWxkKHRoaXMpO1xuICAgICAgICBydW4uY2FsbChpZCk7XG4gICAgICB9O1xuICAgIH07XG4gIC8vIFJlc3Qgb2xkIGJyb3dzZXJzXG4gIH0gZWxzZSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHNldFRpbWVvdXQoY3R4KHJ1biwgaWQsIDEpLCAwKTtcbiAgICB9O1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBzZXRUYXNrLFxuICBjbGVhcjogY2xlYXJUYXNrXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKTtcbnZhciBzdGVwID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xuXG4vLyAyMi4xLjMuNCBBcnJheS5wcm90b3R5cGUuZW50cmllcygpXG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmtleXMoKVxuLy8gMjIuMS4zLjI5IEFycmF5LnByb3RvdHlwZS52YWx1ZXMoKVxuLy8gMjIuMS4zLjMwIEFycmF5LnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICB0aGlzLl90ID0gdG9JT2JqZWN0KGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHRoaXMuX2sgPSBraW5kOyAgICAgICAgICAgICAgICAvLyBraW5kXG4vLyAyMi4xLjUuMi4xICVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIga2luZCA9IHRoaXMuX2s7XG4gIHZhciBpbmRleCA9IHRoaXMuX2krKztcbiAgaWYgKCFPIHx8IGluZGV4ID49IE8ubGVuZ3RoKSB7XG4gICAgdGhpcy5fdCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gc3RlcCgxKTtcbiAgfVxuICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBzdGVwKDAsIGluZGV4KTtcbiAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBzdGVwKDAsIE9baW5kZXhdKTtcbiAgcmV0dXJuIHN0ZXAoMCwgW2luZGV4LCBPW2luZGV4XV0pO1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyUgKDkuNC40LjYsIDkuNC40LjcpXG5JdGVyYXRvcnMuQXJndW1lbnRzID0gSXRlcmF0b3JzLkFycmF5O1xuXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcbiIsIi8vIDIyLjEuMy42IEFycmF5LnByb3RvdHlwZS5maWxsKHZhbHVlLCBzdGFydCA9IDAsIGVuZCA9IHRoaXMubGVuZ3RoKVxuJ3VzZSBzdHJpY3QnO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmaWxsKHZhbHVlIC8qICwgc3RhcnQgPSAwLCBlbmQgPSBAbGVuZ3RoICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCBsZW5ndGgpO1xuICB2YXIgZW5kID0gYUxlbiA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gIHZhciBlbmRQb3MgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbmd0aCk7XG4gIHdoaWxlIChlbmRQb3MgPiBpbmRleCkgT1tpbmRleCsrXSA9IHZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCIvLyA5LjQuMi4zIEFycmF5U3BlY2llc0NyZWF0ZShvcmlnaW5hbEFycmF5LCBsZW5ndGgpXG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbCwgbGVuZ3RoKSB7XG4gIHJldHVybiBuZXcgKHNwZWNpZXNDb25zdHJ1Y3RvcihvcmlnaW5hbCkpKGxlbmd0aCk7XG59O1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29yZScpLmdldEl0ZXJhdG9yTWV0aG9kID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCAhPSB1bmRlZmluZWQpIHJldHVybiBpdFtJVEVSQVRPUl1cbiAgICB8fCBpdFsnQEBpdGVyYXRvciddXG4gICAgfHwgSXRlcmF0b3JzW2NsYXNzb2YoaXQpXTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBpbmRleCwgdmFsdWUpIHtcbiAgaWYgKGluZGV4IGluIG9iamVjdCkgJGRlZmluZVByb3BlcnR5LmYob2JqZWN0LCBpbmRleCwgY3JlYXRlRGVzYygwLCB2YWx1ZSkpO1xuICBlbHNlIG9iamVjdFtpbmRleF0gPSB2YWx1ZTtcbn07XG4iLCIvLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yXG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgIT09IHVuZGVmaW5lZCAmJiAoSXRlcmF0b3JzLkFycmF5ID09PSBpdCB8fCBBcnJheVByb3RvW0lURVJBVE9SXSA9PT0gaXQpO1xufTtcbiIsInZhciBNQVRDSCA9IHJlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZKSB7XG4gIHZhciByZSA9IC8uLztcbiAgdHJ5IHtcbiAgICAnLy4vJ1tLRVldKHJlKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRyeSB7XG4gICAgICByZVtNQVRDSF0gPSBmYWxzZTtcbiAgICAgIHJldHVybiAhJy8uLydbS0VZXShyZSk7XG4gICAgfSBjYXRjaCAoZikgeyAvKiBlbXB0eSAqLyB9XG4gIH0gcmV0dXJuIHRydWU7XG59O1xuIiwiLy8gaGVscGVyIGZvciBTdHJpbmcje3N0YXJ0c1dpdGgsIGVuZHNXaXRoLCBpbmNsdWRlc31cbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIHNlYXJjaFN0cmluZywgTkFNRSkge1xuICBpZiAoaXNSZWdFeHAoc2VhcmNoU3RyaW5nKSkgdGhyb3cgVHlwZUVycm9yKCdTdHJpbmcjJyArIE5BTUUgKyBcIiBkb2Vzbid0IGFjY2VwdCByZWdleCFcIik7XG4gIHJldHVybiBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBkZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuXG4vLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faGlkZScpKEl0ZXJhdG9yUHJvdG90eXBlLCByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KSB7XG4gIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwgeyBuZXh0OiBkZXNjcmlwdG9yKDEsIG5leHQpIH0pO1xuICBzZXRUb1N0cmluZ1RhZyhDb25zdHJ1Y3RvciwgTkFNRSArICcgSXRlcmF0b3InKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgJGl0ZXJDcmVhdGUgPSByZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEJVR0dZID0gIShbXS5rZXlzICYmICduZXh0JyBpbiBbXS5rZXlzKCkpOyAvLyBTYWZhcmkgaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG52YXIgRkZfSVRFUkFUT1IgPSAnQEBpdGVyYXRvcic7XG52YXIgS0VZUyA9ICdrZXlzJztcbnZhciBWQUxVRVMgPSAndmFsdWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChCYXNlLCBOQU1FLCBDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgJGl0ZXJDcmVhdGUoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpO1xuICB2YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24gKGtpbmQpIHtcbiAgICBpZiAoIUJVR0dZICYmIGtpbmQgaW4gcHJvdG8pIHJldHVybiBwcm90b1traW5kXTtcbiAgICBzd2l0Y2ggKGtpbmQpIHtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICB9IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICB9O1xuICB2YXIgVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICB2YXIgREVGX1ZBTFVFUyA9IERFRkFVTFQgPT0gVkFMVUVTO1xuICB2YXIgVkFMVUVTX0JVRyA9IGZhbHNlO1xuICB2YXIgcHJvdG8gPSBCYXNlLnByb3RvdHlwZTtcbiAgdmFyICRuYXRpdmUgPSBwcm90b1tJVEVSQVRPUl0gfHwgcHJvdG9bRkZfSVRFUkFUT1JdIHx8IERFRkFVTFQgJiYgcHJvdG9bREVGQVVMVF07XG4gIHZhciAkZGVmYXVsdCA9ICRuYXRpdmUgfHwgZ2V0TWV0aG9kKERFRkFVTFQpO1xuICB2YXIgJGVudHJpZXMgPSBERUZBVUxUID8gIURFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZCgnZW50cmllcycpIDogdW5kZWZpbmVkO1xuICB2YXIgJGFueU5hdGl2ZSA9IE5BTUUgPT0gJ0FycmF5JyA/IHByb3RvLmVudHJpZXMgfHwgJG5hdGl2ZSA6ICRuYXRpdmU7XG4gIHZhciBtZXRob2RzLCBrZXksIEl0ZXJhdG9yUHJvdG90eXBlO1xuICAvLyBGaXggbmF0aXZlXG4gIGlmICgkYW55TmF0aXZlKSB7XG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZigkYW55TmF0aXZlLmNhbGwobmV3IEJhc2UoKSkpO1xuICAgIGlmIChJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBJdGVyYXRvclByb3RvdHlwZS5uZXh0KSB7XG4gICAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzXG4gICAgICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvclByb3RvdHlwZSwgVEFHLCB0cnVlKTtcbiAgICAgIC8vIGZpeCBmb3Igc29tZSBvbGQgZW5naW5lc1xuICAgICAgaWYgKCFMSUJSQVJZICYmIHR5cGVvZiBJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0gIT0gJ2Z1bmN0aW9uJykgaGlkZShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xuICAgIH1cbiAgfVxuICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmIChERUZfVkFMVUVTICYmICRuYXRpdmUgJiYgJG5hdGl2ZS5uYW1lICE9PSBWQUxVRVMpIHtcbiAgICBWQUxVRVNfQlVHID0gdHJ1ZTtcbiAgICAkZGVmYXVsdCA9IGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuICRuYXRpdmUuY2FsbCh0aGlzKTsgfTtcbiAgfVxuICAvLyBEZWZpbmUgaXRlcmF0b3JcbiAgaWYgKCghTElCUkFSWSB8fCBGT1JDRUQpICYmIChCVUdHWSB8fCBWQUxVRVNfQlVHIHx8ICFwcm90b1tJVEVSQVRPUl0pKSB7XG4gICAgaGlkZShwcm90bywgSVRFUkFUT1IsICRkZWZhdWx0KTtcbiAgfVxuICAvLyBQbHVnIGZvciBsaWJyYXJ5XG4gIEl0ZXJhdG9yc1tOQU1FXSA9ICRkZWZhdWx0O1xuICBJdGVyYXRvcnNbVEFHXSA9IHJldHVyblRoaXM7XG4gIGlmIChERUZBVUxUKSB7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiBJU19TRVQgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChLRVlTKSxcbiAgICAgIGVudHJpZXM6ICRlbnRyaWVzXG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSBmb3IgKGtleSBpbiBtZXRob2RzKSB7XG4gICAgICBpZiAoIShrZXkgaW4gcHJvdG8pKSByZWRlZmluZShwcm90bywga2V5LCBtZXRob2RzW2tleV0pO1xuICAgIH0gZWxzZSAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChCVUdHWSB8fCBWQUxVRVNfQlVHKSwgTkFNRSwgbWV0aG9kcyk7XG4gIH1cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuLy8gdHJ1ZSAgLT4gU3RyaW5nI2F0XG4vLyBmYWxzZSAtPiBTdHJpbmcjY29kZVBvaW50QXRcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRPX1NUUklORykge1xuICByZXR1cm4gZnVuY3Rpb24gKHRoYXQsIHBvcykge1xuICAgIHZhciBzID0gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xuICAgIHZhciBpID0gdG9JbnRlZ2VyKHBvcyk7XG4gICAgdmFyIGwgPSBzLmxlbmd0aDtcbiAgICB2YXIgYSwgYjtcbiAgICBpZiAoaSA8IDAgfHwgaSA+PSBsKSByZXR1cm4gVE9fU1RSSU5HID8gJycgOiB1bmRlZmluZWQ7XG4gICAgYSA9IHMuY2hhckNvZGVBdChpKTtcbiAgICByZXR1cm4gYSA8IDB4ZDgwMCB8fCBhID4gMHhkYmZmIHx8IGkgKyAxID09PSBsIHx8IChiID0gcy5jaGFyQ29kZUF0KGkgKyAxKSkgPCAweGRjMDAgfHwgYiA+IDB4ZGZmZlxuICAgICAgPyBUT19TVFJJTkcgPyBzLmNoYXJBdChpKSA6IGFcbiAgICAgIDogVE9fU1RSSU5HID8gcy5zbGljZShpLCBpICsgMikgOiAoYSAtIDB4ZDgwMCA8PCAxMCkgKyAoYiAtIDB4ZGMwMCkgKyAweDEwMDAwO1xuICB9O1xufTtcbiIsIi8vIDIwLjIuMi4xNCBNYXRoLmV4cG0xKHgpXG52YXIgJGV4cG0xID0gTWF0aC5leHBtMTtcbm1vZHVsZS5leHBvcnRzID0gKCEkZXhwbTFcbiAgLy8gT2xkIEZGIGJ1Z1xuICB8fCAkZXhwbTEoMTApID4gMjIwMjUuNDY1Nzk0ODA2NzE5IHx8ICRleHBtMSgxMCkgPCAyMjAyNS40NjU3OTQ4MDY3MTY1MTY4XG4gIC8vIFRvciBCcm93c2VyIGJ1Z1xuICB8fCAkZXhwbTEoLTJlLTE3KSAhPSAtMmUtMTdcbikgPyBmdW5jdGlvbiBleHBtMSh4KSB7XG4gIHJldHVybiAoeCA9ICt4KSA9PSAwID8geCA6IHggPiAtMWUtNiAmJiB4IDwgMWUtNiA/IHggKyB4ICogeCAvIDIgOiBNYXRoLmV4cCh4KSAtIDE7XG59IDogJGV4cG0xO1xuIiwiLy8gMjAuMi4yLjI4IE1hdGguc2lnbih4KVxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLnNpZ24gfHwgZnVuY3Rpb24gc2lnbih4KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgcmV0dXJuICh4ID0gK3gpID09IDAgfHwgeCAhPSB4ID8geCA6IHggPCAwID8gLTEgOiAxO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiByZXBlYXQoY291bnQpIHtcbiAgdmFyIHN0ciA9IFN0cmluZyhkZWZpbmVkKHRoaXMpKTtcbiAgdmFyIHJlcyA9ICcnO1xuICB2YXIgbiA9IHRvSW50ZWdlcihjb3VudCk7XG4gIGlmIChuIDwgMCB8fCBuID09IEluZmluaXR5KSB0aHJvdyBSYW5nZUVycm9yKFwiQ291bnQgY2FuJ3QgYmUgbmVnYXRpdmVcIik7XG4gIGZvciAoO24gPiAwOyAobiA+Pj49IDEpICYmIChzdHIgKz0gc3RyKSkgaWYgKG4gJiAxKSByZXMgKz0gc3RyO1xuICByZXR1cm4gcmVzO1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fc2V0LXByb3RvJykuc2V0O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgdGFyZ2V0LCBDKSB7XG4gIHZhciBTID0gdGFyZ2V0LmNvbnN0cnVjdG9yO1xuICB2YXIgUDtcbiAgaWYgKFMgIT09IEMgJiYgdHlwZW9mIFMgPT0gJ2Z1bmN0aW9uJyAmJiAoUCA9IFMucHJvdG90eXBlKSAhPT0gQy5wcm90b3R5cGUgJiYgaXNPYmplY3QoUCkgJiYgc2V0UHJvdG90eXBlT2YpIHtcbiAgICBzZXRQcm90b3R5cGVPZih0aGF0LCBQKTtcbiAgfSByZXR1cm4gdGhhdDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9ICdcXHgwOVxceDBBXFx4MEJcXHgwQ1xceDBEXFx4MjBcXHhBMFxcdTE2ODBcXHUxODBFXFx1MjAwMFxcdTIwMDFcXHUyMDAyXFx1MjAwMycgK1xuICAnXFx1MjAwNFxcdTIwMDVcXHUyMDA2XFx1MjAwN1xcdTIwMDhcXHUyMDA5XFx1MjAwQVxcdTIwMkZcXHUyMDVGXFx1MzAwMFxcdTIwMjhcXHUyMDI5XFx1RkVGRic7XG4iLCIvLyBXb3JrcyB3aXRoIF9fcHJvdG9fXyBvbmx5LiBPbGQgdjggY2FuJ3Qgd29yayB3aXRoIG51bGwgcHJvdG8gb2JqZWN0cy5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGNoZWNrID0gZnVuY3Rpb24gKE8sIHByb3RvKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBpZiAoIWlzT2JqZWN0KHByb3RvKSAmJiBwcm90byAhPT0gbnVsbCkgdGhyb3cgVHlwZUVycm9yKHByb3RvICsgXCI6IGNhbid0IHNldCBhcyBwcm90b3R5cGUhXCIpO1xufTtcbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgZnVuY3Rpb24gKHRlc3QsIGJ1Z2d5LCBzZXQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHNldCA9IHJlcXVpcmUoJy4vX2N0eCcpKEZ1bmN0aW9uLmNhbGwsIHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZihPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJykuc2V0LCAyKTtcbiAgICAgICAgc2V0KHRlc3QsIFtdKTtcbiAgICAgICAgYnVnZ3kgPSAhKHRlc3QgaW5zdGFuY2VvZiBBcnJheSk7XG4gICAgICB9IGNhdGNoIChlKSB7IGJ1Z2d5ID0gdHJ1ZTsgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKSB7XG4gICAgICAgIGNoZWNrKE8sIHByb3RvKTtcbiAgICAgICAgaWYgKGJ1Z2d5KSBPLl9fcHJvdG9fXyA9IHByb3RvO1xuICAgICAgICBlbHNlIHNldChPLCBwcm90byk7XG4gICAgICAgIHJldHVybiBPO1xuICAgICAgfTtcbiAgICB9KHt9LCBmYWxzZSkgOiB1bmRlZmluZWQpLFxuICBjaGVjazogY2hlY2tcbn07XG4iLCJ2YXIgZG9jdW1lbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudDtcbm1vZHVsZS5leHBvcnRzID0gZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuIiwiLy8gSUUgOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSAoXG4gICdjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YnXG4pLnNwbGl0KCcsJyk7XG4iLCJ2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ2tleXMnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gc2hhcmVkW2tleV0gfHwgKHNoYXJlZFtrZXldID0gdWlkKGtleSkpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgd2tzRXh0ID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyICRTeW1ib2wgPSBjb3JlLlN5bWJvbCB8fCAoY29yZS5TeW1ib2wgPSBMSUJSQVJZID8ge30gOiBnbG9iYWwuU3ltYm9sIHx8IHt9KTtcbiAgaWYgKG5hbWUuY2hhckF0KDApICE9ICdfJyAmJiAhKG5hbWUgaW4gJFN5bWJvbCkpIGRlZmluZVByb3BlcnR5KCRTeW1ib2wsIG5hbWUsIHsgdmFsdWU6IHdrc0V4dC5mKG5hbWUpIH0pO1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBpcyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpcyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKi9cblxuZnVuY3Rpb24gbWFrZUVtcHR5RnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGFyZztcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGFjY2VwdHMgYW5kIGRpc2NhcmRzIGlucHV0czsgaXQgaGFzIG5vIHNpZGUgZWZmZWN0cy4gVGhpcyBpc1xuICogcHJpbWFyaWx5IHVzZWZ1bCBpZGlvbWF0aWNhbGx5IGZvciBvdmVycmlkYWJsZSBmdW5jdGlvbiBlbmRwb2ludHMgd2hpY2hcbiAqIGFsd2F5cyBuZWVkIHRvIGJlIGNhbGxhYmxlLCBzaW5jZSBKUyBsYWNrcyBhIG51bGwtY2FsbCBpZGlvbSBhbGEgQ29jb2EuXG4gKi9cbnZhciBlbXB0eUZ1bmN0aW9uID0gZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9O1xuXG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zID0gbWFrZUVtcHR5RnVuY3Rpb247XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zRmFsc2UgPSBtYWtlRW1wdHlGdW5jdGlvbihmYWxzZSk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVHJ1ZSA9IG1ha2VFbXB0eUZ1bmN0aW9uKHRydWUpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc051bGwgPSBtYWtlRW1wdHlGdW5jdGlvbihudWxsKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUaGlzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcztcbn07XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zQXJndW1lbnQgPSBmdW5jdGlvbiAoYXJnKSB7XG4gIHJldHVybiBhcmc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGVtcHR5RnVuY3Rpb247IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVzZSBpbnZhcmlhbnQoKSB0byBhc3NlcnQgc3RhdGUgd2hpY2ggeW91ciBwcm9ncmFtIGFzc3VtZXMgdG8gYmUgdHJ1ZS5cbiAqXG4gKiBQcm92aWRlIHNwcmludGYtc3R5bGUgZm9ybWF0IChvbmx5ICVzIGlzIHN1cHBvcnRlZCkgYW5kIGFyZ3VtZW50c1xuICogdG8gcHJvdmlkZSBpbmZvcm1hdGlvbiBhYm91dCB3aGF0IGJyb2tlIGFuZCB3aGF0IHlvdSB3ZXJlXG4gKiBleHBlY3RpbmcuXG4gKlxuICogVGhlIGludmFyaWFudCBtZXNzYWdlIHdpbGwgYmUgc3RyaXBwZWQgaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBpbnZhcmlhbnRcbiAqIHdpbGwgcmVtYWluIHRvIGVuc3VyZSBsb2dpYyBkb2VzIG5vdCBkaWZmZXIgaW4gcHJvZHVjdGlvbi5cbiAqL1xuXG52YXIgdmFsaWRhdGVGb3JtYXQgPSBmdW5jdGlvbiB2YWxpZGF0ZUZvcm1hdChmb3JtYXQpIHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YWxpZGF0ZUZvcm1hdCA9IGZ1bmN0aW9uIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCkge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhcmlhbnQgcmVxdWlyZXMgYW4gZXJyb3IgbWVzc2FnZSBhcmd1bWVudCcpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgZm9ybWF0LCBhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCk7XG5cbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB2YXIgZXJyb3I7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcignTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgJyArICdmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLicpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYXJncyA9IFthLCBiLCBjLCBkLCBlLCBmXTtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICAgIH0pKTtcbiAgICAgIGVycm9yLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgfVxuXG4gICAgZXJyb3IuZnJhbWVzVG9Qb3AgPSAxOyAvLyB3ZSBkb24ndCBjYXJlIGFib3V0IGludmFyaWFudCdzIG93biBmcmFtZVxuICAgIHRocm93IGVycm9yO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW52YXJpYW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vLyByYXdBc2FwIHByb3ZpZGVzIGV2ZXJ5dGhpbmcgd2UgbmVlZCBleGNlcHQgZXhjZXB0aW9uIG1hbmFnZW1lbnQuXG52YXIgcmF3QXNhcCA9IHJlcXVpcmUoXCIuL3Jhd1wiKTtcbi8vIFJhd1Rhc2tzIGFyZSByZWN5Y2xlZCB0byByZWR1Y2UgR0MgY2h1cm4uXG52YXIgZnJlZVRhc2tzID0gW107XG4vLyBXZSBxdWV1ZSBlcnJvcnMgdG8gZW5zdXJlIHRoZXkgYXJlIHRocm93biBpbiByaWdodCBvcmRlciAoRklGTykuXG4vLyBBcnJheS1hcy1xdWV1ZSBpcyBnb29kIGVub3VnaCBoZXJlLCBzaW5jZSB3ZSBhcmUganVzdCBkZWFsaW5nIHdpdGggZXhjZXB0aW9ucy5cbnZhciBwZW5kaW5nRXJyb3JzID0gW107XG52YXIgcmVxdWVzdEVycm9yVGhyb3cgPSByYXdBc2FwLm1ha2VSZXF1ZXN0Q2FsbEZyb21UaW1lcih0aHJvd0ZpcnN0RXJyb3IpO1xuXG5mdW5jdGlvbiB0aHJvd0ZpcnN0RXJyb3IoKSB7XG4gICAgaWYgKHBlbmRpbmdFcnJvcnMubGVuZ3RoKSB7XG4gICAgICAgIHRocm93IHBlbmRpbmdFcnJvcnMuc2hpZnQoKTtcbiAgICB9XG59XG5cbi8qKlxuICogQ2FsbHMgYSB0YXNrIGFzIHNvb24gYXMgcG9zc2libGUgYWZ0ZXIgcmV0dXJuaW5nLCBpbiBpdHMgb3duIGV2ZW50LCB3aXRoIHByaW9yaXR5XG4gKiBvdmVyIG90aGVyIGV2ZW50cyBsaWtlIGFuaW1hdGlvbiwgcmVmbG93LCBhbmQgcmVwYWludC4gQW4gZXJyb3IgdGhyb3duIGZyb20gYW5cbiAqIGV2ZW50IHdpbGwgbm90IGludGVycnVwdCwgbm9yIGV2ZW4gc3Vic3RhbnRpYWxseSBzbG93IGRvd24gdGhlIHByb2Nlc3Npbmcgb2ZcbiAqIG90aGVyIGV2ZW50cywgYnV0IHdpbGwgYmUgcmF0aGVyIHBvc3Rwb25lZCB0byBhIGxvd2VyIHByaW9yaXR5IGV2ZW50LlxuICogQHBhcmFtIHt7Y2FsbH19IHRhc2sgQSBjYWxsYWJsZSBvYmplY3QsIHR5cGljYWxseSBhIGZ1bmN0aW9uIHRoYXQgdGFrZXMgbm9cbiAqIGFyZ3VtZW50cy5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBhc2FwO1xuZnVuY3Rpb24gYXNhcCh0YXNrKSB7XG4gICAgdmFyIHJhd1Rhc2s7XG4gICAgaWYgKGZyZWVUYXNrcy5sZW5ndGgpIHtcbiAgICAgICAgcmF3VGFzayA9IGZyZWVUYXNrcy5wb3AoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByYXdUYXNrID0gbmV3IFJhd1Rhc2soKTtcbiAgICB9XG4gICAgcmF3VGFzay50YXNrID0gdGFzaztcbiAgICByYXdBc2FwKHJhd1Rhc2spO1xufVxuXG4vLyBXZSB3cmFwIHRhc2tzIHdpdGggcmVjeWNsYWJsZSB0YXNrIG9iamVjdHMuICBBIHRhc2sgb2JqZWN0IGltcGxlbWVudHNcbi8vIGBjYWxsYCwganVzdCBsaWtlIGEgZnVuY3Rpb24uXG5mdW5jdGlvbiBSYXdUYXNrKCkge1xuICAgIHRoaXMudGFzayA9IG51bGw7XG59XG5cbi8vIFRoZSBzb2xlIHB1cnBvc2Ugb2Ygd3JhcHBpbmcgdGhlIHRhc2sgaXMgdG8gY2F0Y2ggdGhlIGV4Y2VwdGlvbiBhbmQgcmVjeWNsZVxuLy8gdGhlIHRhc2sgb2JqZWN0IGFmdGVyIGl0cyBzaW5nbGUgdXNlLlxuUmF3VGFzay5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICB0aGlzLnRhc2suY2FsbCgpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGlmIChhc2FwLm9uZXJyb3IpIHtcbiAgICAgICAgICAgIC8vIFRoaXMgaG9vayBleGlzdHMgcHVyZWx5IGZvciB0ZXN0aW5nIHB1cnBvc2VzLlxuICAgICAgICAgICAgLy8gSXRzIG5hbWUgd2lsbCBiZSBwZXJpb2RpY2FsbHkgcmFuZG9taXplZCB0byBicmVhayBhbnkgY29kZSB0aGF0XG4gICAgICAgICAgICAvLyBkZXBlbmRzIG9uIGl0cyBleGlzdGVuY2UuXG4gICAgICAgICAgICBhc2FwLm9uZXJyb3IoZXJyb3IpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gSW4gYSB3ZWIgYnJvd3NlciwgZXhjZXB0aW9ucyBhcmUgbm90IGZhdGFsLiBIb3dldmVyLCB0byBhdm9pZFxuICAgICAgICAgICAgLy8gc2xvd2luZyBkb3duIHRoZSBxdWV1ZSBvZiBwZW5kaW5nIHRhc2tzLCB3ZSByZXRocm93IHRoZSBlcnJvciBpbiBhXG4gICAgICAgICAgICAvLyBsb3dlciBwcmlvcml0eSB0dXJuLlxuICAgICAgICAgICAgcGVuZGluZ0Vycm9ycy5wdXNoKGVycm9yKTtcbiAgICAgICAgICAgIHJlcXVlc3RFcnJvclRocm93KCk7XG4gICAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgICB0aGlzLnRhc2sgPSBudWxsO1xuICAgICAgICBmcmVlVGFza3NbZnJlZVRhc2tzLmxlbmd0aF0gPSB0aGlzO1xuICAgIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVQcmVmaXhlcjtcblxudmFyIF9wcmVmaXhQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL3V0aWxzL3ByZWZpeFByb3BlcnR5Jyk7XG5cbnZhciBfcHJlZml4UHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJlZml4UHJvcGVydHkpO1xuXG52YXIgX3ByZWZpeFZhbHVlID0gcmVxdWlyZSgnLi4vdXRpbHMvcHJlZml4VmFsdWUnKTtcblxudmFyIF9wcmVmaXhWYWx1ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcmVmaXhWYWx1ZSk7XG5cbnZhciBfYWRkTmV3VmFsdWVzT25seSA9IHJlcXVpcmUoJy4uL3V0aWxzL2FkZE5ld1ZhbHVlc09ubHknKTtcblxudmFyIF9hZGROZXdWYWx1ZXNPbmx5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2FkZE5ld1ZhbHVlc09ubHkpO1xuXG52YXIgX2lzT2JqZWN0ID0gcmVxdWlyZSgnLi4vdXRpbHMvaXNPYmplY3QnKTtcblxudmFyIF9pc09iamVjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc09iamVjdCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGNyZWF0ZVByZWZpeGVyKF9yZWYpIHtcbiAgdmFyIHByZWZpeE1hcCA9IF9yZWYucHJlZml4TWFwLFxuICAgICAgcGx1Z2lucyA9IF9yZWYucGx1Z2lucztcblxuICBmdW5jdGlvbiBwcmVmaXhBbGwoc3R5bGUpIHtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBzdHlsZSkge1xuICAgICAgdmFyIHZhbHVlID0gc3R5bGVbcHJvcGVydHldO1xuXG4gICAgICAvLyBoYW5kbGUgbmVzdGVkIG9iamVjdHNcbiAgICAgIGlmICgoMCwgX2lzT2JqZWN0Mi5kZWZhdWx0KSh2YWx1ZSkpIHtcbiAgICAgICAgc3R5bGVbcHJvcGVydHldID0gcHJlZml4QWxsKHZhbHVlKTtcbiAgICAgICAgLy8gaGFuZGxlIGFycmF5IHZhbHVlc1xuICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICB2YXIgY29tYmluZWRWYWx1ZSA9IFtdO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB2YWx1ZS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgICAgICAgIHZhciBwcm9jZXNzZWRWYWx1ZSA9ICgwLCBfcHJlZml4VmFsdWUyLmRlZmF1bHQpKHBsdWdpbnMsIHByb3BlcnR5LCB2YWx1ZVtpXSwgc3R5bGUsIHByZWZpeE1hcCk7XG4gICAgICAgICAgKDAsIF9hZGROZXdWYWx1ZXNPbmx5Mi5kZWZhdWx0KShjb21iaW5lZFZhbHVlLCBwcm9jZXNzZWRWYWx1ZSB8fCB2YWx1ZVtpXSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBvbmx5IG1vZGlmeSB0aGUgdmFsdWUgaWYgaXQgd2FzIHRvdWNoZWRcbiAgICAgICAgLy8gYnkgYW55IHBsdWdpbiB0byBwcmV2ZW50IHVubmVjZXNzYXJ5IG11dGF0aW9uc1xuICAgICAgICBpZiAoY29tYmluZWRWYWx1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgc3R5bGVbcHJvcGVydHldID0gY29tYmluZWRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIF9wcm9jZXNzZWRWYWx1ZSA9ICgwLCBfcHJlZml4VmFsdWUyLmRlZmF1bHQpKHBsdWdpbnMsIHByb3BlcnR5LCB2YWx1ZSwgc3R5bGUsIHByZWZpeE1hcCk7XG5cbiAgICAgICAgLy8gb25seSBtb2RpZnkgdGhlIHZhbHVlIGlmIGl0IHdhcyB0b3VjaGVkXG4gICAgICAgIC8vIGJ5IGFueSBwbHVnaW4gdG8gcHJldmVudCB1bm5lY2Vzc2FyeSBtdXRhdGlvbnNcbiAgICAgICAgaWYgKF9wcm9jZXNzZWRWYWx1ZSkge1xuICAgICAgICAgIHN0eWxlW3Byb3BlcnR5XSA9IF9wcm9jZXNzZWRWYWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0eWxlID0gKDAsIF9wcmVmaXhQcm9wZXJ0eTIuZGVmYXVsdCkocHJlZml4TWFwLCBwcm9wZXJ0eSwgc3R5bGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzdHlsZTtcbiAgfVxuXG4gIHJldHVybiBwcmVmaXhBbGw7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB0cmFuc2l0aW9uO1xuXG52YXIgX2h5cGhlbmF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnY3NzLWluLWpzLXV0aWxzL2xpYi9oeXBoZW5hdGVQcm9wZXJ0eScpO1xuXG52YXIgX2h5cGhlbmF0ZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2h5cGhlbmF0ZVByb3BlcnR5KTtcblxudmFyIF9pc1ByZWZpeGVkVmFsdWUgPSByZXF1aXJlKCdjc3MtaW4tanMtdXRpbHMvbGliL2lzUHJlZml4ZWRWYWx1ZScpO1xuXG52YXIgX2lzUHJlZml4ZWRWYWx1ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc1ByZWZpeGVkVmFsdWUpO1xuXG52YXIgX2NhcGl0YWxpemVTdHJpbmcgPSByZXF1aXJlKCcuLi8uLi91dGlscy9jYXBpdGFsaXplU3RyaW5nJyk7XG5cbnZhciBfY2FwaXRhbGl6ZVN0cmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jYXBpdGFsaXplU3RyaW5nKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIHByb3BlcnRpZXMgPSB7XG4gIHRyYW5zaXRpb246IHRydWUsXG4gIHRyYW5zaXRpb25Qcm9wZXJ0eTogdHJ1ZSxcbiAgV2Via2l0VHJhbnNpdGlvbjogdHJ1ZSxcbiAgV2Via2l0VHJhbnNpdGlvblByb3BlcnR5OiB0cnVlLFxuICBNb3pUcmFuc2l0aW9uOiB0cnVlLFxuICBNb3pUcmFuc2l0aW9uUHJvcGVydHk6IHRydWVcbn07XG5cblxudmFyIHByZWZpeE1hcHBpbmcgPSB7XG4gIFdlYmtpdDogJy13ZWJraXQtJyxcbiAgTW96OiAnLW1vei0nLFxuICBtczogJy1tcy0nXG59O1xuXG5mdW5jdGlvbiBwcmVmaXhWYWx1ZSh2YWx1ZSwgcHJvcGVydHlQcmVmaXhNYXApIHtcbiAgaWYgKCgwLCBfaXNQcmVmaXhlZFZhbHVlMi5kZWZhdWx0KSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICAvLyBvbmx5IHNwbGl0IG11bHRpIHZhbHVlcywgbm90IGN1YmljIGJlemllcnNcbiAgdmFyIG11bHRpcGxlVmFsdWVzID0gdmFsdWUuc3BsaXQoLywoPyFbXigpXSooPzpcXChbXigpXSpcXCkpP1xcKSkvZyk7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IG11bHRpcGxlVmFsdWVzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgdmFyIHNpbmdsZVZhbHVlID0gbXVsdGlwbGVWYWx1ZXNbaV07XG4gICAgdmFyIHZhbHVlcyA9IFtzaW5nbGVWYWx1ZV07XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gcHJvcGVydHlQcmVmaXhNYXApIHtcbiAgICAgIHZhciBkYXNoQ2FzZVByb3BlcnR5ID0gKDAsIF9oeXBoZW5hdGVQcm9wZXJ0eTIuZGVmYXVsdCkocHJvcGVydHkpO1xuXG4gICAgICBpZiAoc2luZ2xlVmFsdWUuaW5kZXhPZihkYXNoQ2FzZVByb3BlcnR5KSA+IC0xICYmIGRhc2hDYXNlUHJvcGVydHkgIT09ICdvcmRlcicpIHtcbiAgICAgICAgdmFyIHByZWZpeGVzID0gcHJvcGVydHlQcmVmaXhNYXBbcHJvcGVydHldO1xuICAgICAgICBmb3IgKHZhciBqID0gMCwgcExlbiA9IHByZWZpeGVzLmxlbmd0aDsgaiA8IHBMZW47ICsraikge1xuICAgICAgICAgIC8vIGpvaW4gYWxsIHByZWZpeGVzIGFuZCBjcmVhdGUgYSBuZXcgdmFsdWVcbiAgICAgICAgICB2YWx1ZXMudW5zaGlmdChzaW5nbGVWYWx1ZS5yZXBsYWNlKGRhc2hDYXNlUHJvcGVydHksIHByZWZpeE1hcHBpbmdbcHJlZml4ZXNbal1dICsgZGFzaENhc2VQcm9wZXJ0eSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgbXVsdGlwbGVWYWx1ZXNbaV0gPSB2YWx1ZXMuam9pbignLCcpO1xuICB9XG5cbiAgcmV0dXJuIG11bHRpcGxlVmFsdWVzLmpvaW4oJywnKTtcbn1cblxuZnVuY3Rpb24gdHJhbnNpdGlvbihwcm9wZXJ0eSwgdmFsdWUsIHN0eWxlLCBwcm9wZXJ0eVByZWZpeE1hcCkge1xuICAvLyBhbHNvIGNoZWNrIGZvciBhbHJlYWR5IHByZWZpeGVkIHRyYW5zaXRpb25zXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkocHJvcGVydHkpKSB7XG4gICAgdmFyIG91dHB1dFZhbHVlID0gcHJlZml4VmFsdWUodmFsdWUsIHByb3BlcnR5UHJlZml4TWFwKTtcbiAgICAvLyBpZiB0aGUgcHJvcGVydHkgaXMgYWxyZWFkeSBwcmVmaXhlZFxuICAgIHZhciB3ZWJraXRPdXRwdXQgPSBvdXRwdXRWYWx1ZS5zcGxpdCgvLCg/IVteKCldKig/OlxcKFteKCldKlxcKSk/XFwpKS9nKS5maWx0ZXIoZnVuY3Rpb24gKHZhbCkge1xuICAgICAgcmV0dXJuICEvLW1vei18LW1zLS8udGVzdCh2YWwpO1xuICAgIH0pLmpvaW4oJywnKTtcblxuICAgIGlmIChwcm9wZXJ0eS5pbmRleE9mKCdXZWJraXQnKSA+IC0xKSB7XG4gICAgICByZXR1cm4gd2Via2l0T3V0cHV0O1xuICAgIH1cblxuICAgIHZhciBtb3pPdXRwdXQgPSBvdXRwdXRWYWx1ZS5zcGxpdCgvLCg/IVteKCldKig/OlxcKFteKCldKlxcKSk/XFwpKS9nKS5maWx0ZXIoZnVuY3Rpb24gKHZhbCkge1xuICAgICAgcmV0dXJuICEvLXdlYmtpdC18LW1zLS8udGVzdCh2YWwpO1xuICAgIH0pLmpvaW4oJywnKTtcblxuICAgIGlmIChwcm9wZXJ0eS5pbmRleE9mKCdNb3onKSA+IC0xKSB7XG4gICAgICByZXR1cm4gbW96T3V0cHV0O1xuICAgIH1cblxuICAgIHN0eWxlWydXZWJraXQnICsgKDAsIF9jYXBpdGFsaXplU3RyaW5nMi5kZWZhdWx0KShwcm9wZXJ0eSldID0gd2Via2l0T3V0cHV0O1xuICAgIHN0eWxlWydNb3onICsgKDAsIF9jYXBpdGFsaXplU3RyaW5nMi5kZWZhdWx0KShwcm9wZXJ0eSldID0gbW96T3V0cHV0O1xuICAgIHJldHVybiBvdXRwdXRWYWx1ZTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gc2l6aW5nO1xudmFyIHByZWZpeGVzID0gWyctd2Via2l0LScsICctbW96LScsICcnXTtcblxudmFyIHByb3BlcnRpZXMgPSB7XG4gIG1heEhlaWdodDogdHJ1ZSxcbiAgbWF4V2lkdGg6IHRydWUsXG4gIHdpZHRoOiB0cnVlLFxuICBoZWlnaHQ6IHRydWUsXG4gIGNvbHVtbldpZHRoOiB0cnVlLFxuICBtaW5XaWR0aDogdHJ1ZSxcbiAgbWluSGVpZ2h0OiB0cnVlXG59O1xudmFyIHZhbHVlcyA9IHtcbiAgJ21pbi1jb250ZW50JzogdHJ1ZSxcbiAgJ21heC1jb250ZW50JzogdHJ1ZSxcbiAgJ2ZpbGwtYXZhaWxhYmxlJzogdHJ1ZSxcbiAgJ2ZpdC1jb250ZW50JzogdHJ1ZSxcbiAgJ2NvbnRhaW4tZmxvYXRzJzogdHJ1ZVxufTtcblxuZnVuY3Rpb24gc2l6aW5nKHByb3BlcnR5LCB2YWx1ZSkge1xuICBpZiAocHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkgJiYgdmFsdWVzLmhhc093blByb3BlcnR5KHZhbHVlKSkge1xuICAgIHJldHVybiBwcmVmaXhlcy5tYXAoZnVuY3Rpb24gKHByZWZpeCkge1xuICAgICAgcmV0dXJuIHByZWZpeCArIHZhbHVlO1xuICAgIH0pO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBwb3NpdGlvbjtcbmZ1bmN0aW9uIHBvc2l0aW9uKHByb3BlcnR5LCB2YWx1ZSkge1xuICBpZiAocHJvcGVydHkgPT09ICdwb3NpdGlvbicgJiYgdmFsdWUgPT09ICdzdGlja3knKSB7XG4gICAgcmV0dXJuIFsnLXdlYmtpdC1zdGlja3knLCAnc3RpY2t5J107XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGltYWdlU2V0O1xuXG52YXIgX2lzUHJlZml4ZWRWYWx1ZSA9IHJlcXVpcmUoJ2Nzcy1pbi1qcy11dGlscy9saWIvaXNQcmVmaXhlZFZhbHVlJyk7XG5cbnZhciBfaXNQcmVmaXhlZFZhbHVlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzUHJlZml4ZWRWYWx1ZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8vIGh0dHA6Ly9jYW5pdXNlLmNvbS8jZmVhdD1jc3MtaW1hZ2Utc2V0XG52YXIgcHJlZml4ZXMgPSBbJy13ZWJraXQtJywgJyddO1xuZnVuY3Rpb24gaW1hZ2VTZXQocHJvcGVydHksIHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmICEoMCwgX2lzUHJlZml4ZWRWYWx1ZTIuZGVmYXVsdCkodmFsdWUpICYmIHZhbHVlLmluZGV4T2YoJ2ltYWdlLXNldCgnKSA+IC0xKSB7XG4gICAgcmV0dXJuIHByZWZpeGVzLm1hcChmdW5jdGlvbiAocHJlZml4KSB7XG4gICAgICByZXR1cm4gdmFsdWUucmVwbGFjZSgvaW1hZ2Utc2V0XFwoL2csIHByZWZpeCArICdpbWFnZS1zZXQoJyk7XG4gICAgfSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGdyYWRpZW50O1xuXG52YXIgX2lzUHJlZml4ZWRWYWx1ZSA9IHJlcXVpcmUoJ2Nzcy1pbi1qcy11dGlscy9saWIvaXNQcmVmaXhlZFZhbHVlJyk7XG5cbnZhciBfaXNQcmVmaXhlZFZhbHVlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzUHJlZml4ZWRWYWx1ZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBwcmVmaXhlcyA9IFsnLXdlYmtpdC0nLCAnLW1vei0nLCAnJ107XG5cbnZhciB2YWx1ZXMgPSAvbGluZWFyLWdyYWRpZW50fHJhZGlhbC1ncmFkaWVudHxyZXBlYXRpbmctbGluZWFyLWdyYWRpZW50fHJlcGVhdGluZy1yYWRpYWwtZ3JhZGllbnQvZ2k7XG5cbmZ1bmN0aW9uIGdyYWRpZW50KHByb3BlcnR5LCB2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiAhKDAsIF9pc1ByZWZpeGVkVmFsdWUyLmRlZmF1bHQpKHZhbHVlKSAmJiB2YWx1ZXMudGVzdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gcHJlZml4ZXMubWFwKGZ1bmN0aW9uIChwcmVmaXgpIHtcbiAgICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKHZhbHVlcywgZnVuY3Rpb24gKGdyYWQpIHtcbiAgICAgICAgcmV0dXJuIHByZWZpeCArIGdyYWQ7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZmxleGJveE9sZDtcbnZhciBhbHRlcm5hdGl2ZVZhbHVlcyA9IHtcbiAgJ3NwYWNlLWFyb3VuZCc6ICdqdXN0aWZ5JyxcbiAgJ3NwYWNlLWJldHdlZW4nOiAnanVzdGlmeScsXG4gICdmbGV4LXN0YXJ0JzogJ3N0YXJ0JyxcbiAgJ2ZsZXgtZW5kJzogJ2VuZCcsXG4gICd3cmFwLXJldmVyc2UnOiAnbXVsdGlwbGUnLFxuICB3cmFwOiAnbXVsdGlwbGUnLFxuICBmbGV4OiAnYm94JyxcbiAgJ2lubGluZS1mbGV4JzogJ2lubGluZS1ib3gnXG59O1xuXG52YXIgYWx0ZXJuYXRpdmVQcm9wcyA9IHtcbiAgYWxpZ25JdGVtczogJ1dlYmtpdEJveEFsaWduJyxcbiAganVzdGlmeUNvbnRlbnQ6ICdXZWJraXRCb3hQYWNrJyxcbiAgZmxleFdyYXA6ICdXZWJraXRCb3hMaW5lcycsXG4gIGZsZXhHcm93OiAnV2Via2l0Qm94RmxleCdcbn07XG5cbmZ1bmN0aW9uIGZsZXhib3hPbGQocHJvcGVydHksIHZhbHVlLCBzdHlsZSkge1xuICBpZiAocHJvcGVydHkgPT09ICdmbGV4RGlyZWN0aW9uJyAmJiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKHZhbHVlLmluZGV4T2YoJ2NvbHVtbicpID4gLTEpIHtcbiAgICAgIHN0eWxlLldlYmtpdEJveE9yaWVudCA9ICd2ZXJ0aWNhbCc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlLldlYmtpdEJveE9yaWVudCA9ICdob3Jpem9udGFsJztcbiAgICB9XG4gICAgaWYgKHZhbHVlLmluZGV4T2YoJ3JldmVyc2UnKSA+IC0xKSB7XG4gICAgICBzdHlsZS5XZWJraXRCb3hEaXJlY3Rpb24gPSAncmV2ZXJzZSc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlLldlYmtpdEJveERpcmVjdGlvbiA9ICdub3JtYWwnO1xuICAgIH1cbiAgfVxuICBpZiAoYWx0ZXJuYXRpdmVQcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpIHtcbiAgICBzdHlsZVthbHRlcm5hdGl2ZVByb3BzW3Byb3BlcnR5XV0gPSBhbHRlcm5hdGl2ZVZhbHVlc1t2YWx1ZV0gfHwgdmFsdWU7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGZsZXhib3hJRTtcbnZhciBhbHRlcm5hdGl2ZVZhbHVlcyA9IHtcbiAgJ3NwYWNlLWFyb3VuZCc6ICdkaXN0cmlidXRlJyxcbiAgJ3NwYWNlLWJldHdlZW4nOiAnanVzdGlmeScsXG4gICdmbGV4LXN0YXJ0JzogJ3N0YXJ0JyxcbiAgJ2ZsZXgtZW5kJzogJ2VuZCdcbn07XG52YXIgYWx0ZXJuYXRpdmVQcm9wcyA9IHtcbiAgYWxpZ25Db250ZW50OiAnbXNGbGV4TGluZVBhY2snLFxuICBhbGlnblNlbGY6ICdtc0ZsZXhJdGVtQWxpZ24nLFxuICBhbGlnbkl0ZW1zOiAnbXNGbGV4QWxpZ24nLFxuICBqdXN0aWZ5Q29udGVudDogJ21zRmxleFBhY2snLFxuICBvcmRlcjogJ21zRmxleE9yZGVyJyxcbiAgZmxleEdyb3c6ICdtc0ZsZXhQb3NpdGl2ZScsXG4gIGZsZXhTaHJpbms6ICdtc0ZsZXhOZWdhdGl2ZScsXG4gIGZsZXhCYXNpczogJ21zRmxleFByZWZlcnJlZFNpemUnXG59O1xuXG5mdW5jdGlvbiBmbGV4Ym94SUUocHJvcGVydHksIHZhbHVlLCBzdHlsZSkge1xuICBpZiAoYWx0ZXJuYXRpdmVQcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpIHtcbiAgICBzdHlsZVthbHRlcm5hdGl2ZVByb3BzW3Byb3BlcnR5XV0gPSBhbHRlcm5hdGl2ZVZhbHVlc1t2YWx1ZV0gfHwgdmFsdWU7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGZsZXg7XG52YXIgdmFsdWVzID0ge1xuICBmbGV4OiBbJy13ZWJraXQtYm94JywgJy1tb3otYm94JywgJy1tcy1mbGV4Ym94JywgJy13ZWJraXQtZmxleCcsICdmbGV4J10sXG4gICdpbmxpbmUtZmxleCc6IFsnLXdlYmtpdC1pbmxpbmUtYm94JywgJy1tb3otaW5saW5lLWJveCcsICctbXMtaW5saW5lLWZsZXhib3gnLCAnLXdlYmtpdC1pbmxpbmUtZmxleCcsICdpbmxpbmUtZmxleCddXG59O1xuXG5mdW5jdGlvbiBmbGV4KHByb3BlcnR5LCB2YWx1ZSkge1xuICBpZiAocHJvcGVydHkgPT09ICdkaXNwbGF5JyAmJiB2YWx1ZXMuaGFzT3duUHJvcGVydHkodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlc1t2YWx1ZV07XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGZpbHRlcjtcblxudmFyIF9pc1ByZWZpeGVkVmFsdWUgPSByZXF1aXJlKCdjc3MtaW4tanMtdXRpbHMvbGliL2lzUHJlZml4ZWRWYWx1ZScpO1xuXG52YXIgX2lzUHJlZml4ZWRWYWx1ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc1ByZWZpeGVkVmFsdWUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vLyBodHRwOi8vY2FuaXVzZS5jb20vI2ZlYXQ9Y3NzLWZpbHRlci1mdW5jdGlvblxudmFyIHByZWZpeGVzID0gWyctd2Via2l0LScsICcnXTtcbmZ1bmN0aW9uIGZpbHRlcihwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgISgwLCBfaXNQcmVmaXhlZFZhbHVlMi5kZWZhdWx0KSh2YWx1ZSkgJiYgdmFsdWUuaW5kZXhPZignZmlsdGVyKCcpID4gLTEpIHtcbiAgICByZXR1cm4gcHJlZml4ZXMubWFwKGZ1bmN0aW9uIChwcmVmaXgpIHtcbiAgICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKC9maWx0ZXJcXCgvZywgcHJlZml4ICsgJ2ZpbHRlcignKTtcbiAgICB9KTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gY3Vyc29yO1xudmFyIHByZWZpeGVzID0gWyctd2Via2l0LScsICctbW96LScsICcnXTtcblxudmFyIHZhbHVlcyA9IHtcbiAgJ3pvb20taW4nOiB0cnVlLFxuICAnem9vbS1vdXQnOiB0cnVlLFxuICBncmFiOiB0cnVlLFxuICBncmFiYmluZzogdHJ1ZVxufTtcblxuZnVuY3Rpb24gY3Vyc29yKHByb3BlcnR5LCB2YWx1ZSkge1xuICBpZiAocHJvcGVydHkgPT09ICdjdXJzb3InICYmIHZhbHVlcy5oYXNPd25Qcm9wZXJ0eSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gcHJlZml4ZXMubWFwKGZ1bmN0aW9uIChwcmVmaXgpIHtcbiAgICAgIHJldHVybiBwcmVmaXggKyB2YWx1ZTtcbiAgICB9KTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gY3Jvc3NGYWRlO1xuXG52YXIgX2lzUHJlZml4ZWRWYWx1ZSA9IHJlcXVpcmUoJ2Nzcy1pbi1qcy11dGlscy9saWIvaXNQcmVmaXhlZFZhbHVlJyk7XG5cbnZhciBfaXNQcmVmaXhlZFZhbHVlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzUHJlZml4ZWRWYWx1ZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8vIGh0dHA6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPWNyb3NzLWZhZGVcbnZhciBwcmVmaXhlcyA9IFsnLXdlYmtpdC0nLCAnJ107XG5mdW5jdGlvbiBjcm9zc0ZhZGUocHJvcGVydHksIHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmICEoMCwgX2lzUHJlZml4ZWRWYWx1ZTIuZGVmYXVsdCkodmFsdWUpICYmIHZhbHVlLmluZGV4T2YoJ2Nyb3NzLWZhZGUoJykgPiAtMSkge1xuICAgIHJldHVybiBwcmVmaXhlcy5tYXAoZnVuY3Rpb24gKHByZWZpeCkge1xuICAgICAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoL2Nyb3NzLWZhZGVcXCgvZywgcHJlZml4ICsgJ2Nyb3NzLWZhZGUoJyk7XG4gICAgfSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNhbGM7XG5cbnZhciBfaXNQcmVmaXhlZFZhbHVlID0gcmVxdWlyZSgnY3NzLWluLWpzLXV0aWxzL2xpYi9pc1ByZWZpeGVkVmFsdWUnKTtcblxudmFyIF9pc1ByZWZpeGVkVmFsdWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNQcmVmaXhlZFZhbHVlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIHByZWZpeGVzID0gWyctd2Via2l0LScsICctbW96LScsICcnXTtcbmZ1bmN0aW9uIGNhbGMocHJvcGVydHksIHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmICEoMCwgX2lzUHJlZml4ZWRWYWx1ZTIuZGVmYXVsdCkodmFsdWUpICYmIHZhbHVlLmluZGV4T2YoJ2NhbGMoJykgPiAtMSkge1xuICAgIHJldHVybiBwcmVmaXhlcy5tYXAoZnVuY3Rpb24gKHByZWZpeCkge1xuICAgICAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoL2NhbGNcXCgvZywgcHJlZml4ICsgJ2NhbGMoJyk7XG4gICAgfSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBoYXNoKHN0cikge1xuICB2YXIgaGFzaCA9IDUzODEsXG4gICAgICBpICAgID0gc3RyLmxlbmd0aDtcblxuICB3aGlsZShpKSB7XG4gICAgaGFzaCA9IChoYXNoICogMzMpIF4gc3RyLmNoYXJDb2RlQXQoLS1pKTtcbiAgfVxuXG4gIC8qIEphdmFTY3JpcHQgZG9lcyBiaXR3aXNlIG9wZXJhdGlvbnMgKGxpa2UgWE9SLCBhYm92ZSkgb24gMzItYml0IHNpZ25lZFxuICAgKiBpbnRlZ2Vycy4gU2luY2Ugd2Ugd2FudCB0aGUgcmVzdWx0cyB0byBiZSBhbHdheXMgcG9zaXRpdmUsIGNvbnZlcnQgdGhlXG4gICAqIHNpZ25lZCBpbnQgdG8gYW4gdW5zaWduZWQgYnkgZG9pbmcgYW4gdW5zaWduZWQgYml0c2hpZnQuICovXG4gIHJldHVybiBoYXNoID4+PiAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2g7XG4iLCJpbXBvcnQgJCRvYnNlcnZhYmxlIGZyb20gJ3N5bWJvbC1vYnNlcnZhYmxlJztcblxuLyoqXG4gKiBUaGVzZSBhcmUgcHJpdmF0ZSBhY3Rpb24gdHlwZXMgcmVzZXJ2ZWQgYnkgUmVkdXguXG4gKiBGb3IgYW55IHVua25vd24gYWN0aW9ucywgeW91IG11c3QgcmV0dXJuIHRoZSBjdXJyZW50IHN0YXRlLlxuICogSWYgdGhlIGN1cnJlbnQgc3RhdGUgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUuXG4gKiBEbyBub3QgcmVmZXJlbmNlIHRoZXNlIGFjdGlvbiB0eXBlcyBkaXJlY3RseSBpbiB5b3VyIGNvZGUuXG4gKi9cbnZhciBBY3Rpb25UeXBlcyA9IHtcbiAgSU5JVDogJ0BAcmVkdXgvSU5JVCcgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoNykuc3BsaXQoJycpLmpvaW4oJy4nKSxcbiAgUkVQTEFDRTogJ0BAcmVkdXgvUkVQTEFDRScgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoNykuc3BsaXQoJycpLmpvaW4oJy4nKVxufTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmo7XG59IDogZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbn07XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7YW55fSBvYmogVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIGFyZ3VtZW50IGFwcGVhcnMgdG8gYmUgYSBwbGFpbiBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qob2JqKSB7XG4gIGlmICgodHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2Yob2JqKSkgIT09ICdvYmplY3QnIHx8IG9iaiA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXG4gIHZhciBwcm90byA9IG9iajtcbiAgd2hpbGUgKE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90bykgIT09IG51bGwpIHtcbiAgICBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90byk7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikgPT09IHByb3RvO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBSZWR1eCBzdG9yZSB0aGF0IGhvbGRzIHRoZSBzdGF0ZSB0cmVlLlxuICogVGhlIG9ubHkgd2F5IHRvIGNoYW5nZSB0aGUgZGF0YSBpbiB0aGUgc3RvcmUgaXMgdG8gY2FsbCBgZGlzcGF0Y2goKWAgb24gaXQuXG4gKlxuICogVGhlcmUgc2hvdWxkIG9ubHkgYmUgYSBzaW5nbGUgc3RvcmUgaW4geW91ciBhcHAuIFRvIHNwZWNpZnkgaG93IGRpZmZlcmVudFxuICogcGFydHMgb2YgdGhlIHN0YXRlIHRyZWUgcmVzcG9uZCB0byBhY3Rpb25zLCB5b3UgbWF5IGNvbWJpbmUgc2V2ZXJhbCByZWR1Y2Vyc1xuICogaW50byBhIHNpbmdsZSByZWR1Y2VyIGZ1bmN0aW9uIGJ5IHVzaW5nIGBjb21iaW5lUmVkdWNlcnNgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlZHVjZXIgQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIG5leHQgc3RhdGUgdHJlZSwgZ2l2ZW5cbiAqIHRoZSBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBhY3Rpb24gdG8gaGFuZGxlLlxuICpcbiAqIEBwYXJhbSB7YW55fSBbcHJlbG9hZGVkU3RhdGVdIFRoZSBpbml0aWFsIHN0YXRlLiBZb3UgbWF5IG9wdGlvbmFsbHkgc3BlY2lmeSBpdFxuICogdG8gaHlkcmF0ZSB0aGUgc3RhdGUgZnJvbSB0aGUgc2VydmVyIGluIHVuaXZlcnNhbCBhcHBzLCBvciB0byByZXN0b3JlIGFcbiAqIHByZXZpb3VzbHkgc2VyaWFsaXplZCB1c2VyIHNlc3Npb24uXG4gKiBJZiB5b3UgdXNlIGBjb21iaW5lUmVkdWNlcnNgIHRvIHByb2R1Y2UgdGhlIHJvb3QgcmVkdWNlciBmdW5jdGlvbiwgdGhpcyBtdXN0IGJlXG4gKiBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBzaGFwZSBhcyBgY29tYmluZVJlZHVjZXJzYCBrZXlzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtlbmhhbmNlcl0gVGhlIHN0b3JlIGVuaGFuY2VyLiBZb3UgbWF5IG9wdGlvbmFsbHkgc3BlY2lmeSBpdFxuICogdG8gZW5oYW5jZSB0aGUgc3RvcmUgd2l0aCB0aGlyZC1wYXJ0eSBjYXBhYmlsaXRpZXMgc3VjaCBhcyBtaWRkbGV3YXJlLFxuICogdGltZSB0cmF2ZWwsIHBlcnNpc3RlbmNlLCBldGMuIFRoZSBvbmx5IHN0b3JlIGVuaGFuY2VyIHRoYXQgc2hpcHMgd2l0aCBSZWR1eFxuICogaXMgYGFwcGx5TWlkZGxld2FyZSgpYC5cbiAqXG4gKiBAcmV0dXJucyB7U3RvcmV9IEEgUmVkdXggc3RvcmUgdGhhdCBsZXRzIHlvdSByZWFkIHRoZSBzdGF0ZSwgZGlzcGF0Y2ggYWN0aW9uc1xuICogYW5kIHN1YnNjcmliZSB0byBjaGFuZ2VzLlxuICovXG5mdW5jdGlvbiBjcmVhdGVTdG9yZShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSwgZW5oYW5jZXIpIHtcbiAgdmFyIF9yZWYyO1xuXG4gIGlmICh0eXBlb2YgcHJlbG9hZGVkU3RhdGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVuaGFuY2VyID09PSAndW5kZWZpbmVkJykge1xuICAgIGVuaGFuY2VyID0gcHJlbG9hZGVkU3RhdGU7XG4gICAgcHJlbG9hZGVkU3RhdGUgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGVuaGFuY2VyICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIGVuaGFuY2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVuaGFuY2VyKGNyZWF0ZVN0b3JlKShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSk7XG4gIH1cblxuICBpZiAodHlwZW9mIHJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSByZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgY3VycmVudFJlZHVjZXIgPSByZWR1Y2VyO1xuICB2YXIgY3VycmVudFN0YXRlID0gcHJlbG9hZGVkU3RhdGU7XG4gIHZhciBjdXJyZW50TGlzdGVuZXJzID0gW107XG4gIHZhciBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycztcbiAgdmFyIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCkge1xuICAgIGlmIChuZXh0TGlzdGVuZXJzID09PSBjdXJyZW50TGlzdGVuZXJzKSB7XG4gICAgICBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycy5zbGljZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZWFkcyB0aGUgc3RhdGUgdHJlZSBtYW5hZ2VkIGJ5IHRoZSBzdG9yZS5cbiAgICpcbiAgICogQHJldHVybnMge2FueX0gVGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBvZiB5b3VyIGFwcGxpY2F0aW9uLlxuICAgKi9cbiAgZnVuY3Rpb24gZ2V0U3RhdGUoKSB7XG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgY2FsbCBzdG9yZS5nZXRTdGF0ZSgpIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdUaGUgcmVkdWNlciBoYXMgYWxyZWFkeSByZWNlaXZlZCB0aGUgc3RhdGUgYXMgYW4gYXJndW1lbnQuICcgKyAnUGFzcyBpdCBkb3duIGZyb20gdGhlIHRvcCByZWR1Y2VyIGluc3RlYWQgb2YgcmVhZGluZyBpdCBmcm9tIHRoZSBzdG9yZS4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3VycmVudFN0YXRlO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgYSBjaGFuZ2UgbGlzdGVuZXIuIEl0IHdpbGwgYmUgY2FsbGVkIGFueSB0aW1lIGFuIGFjdGlvbiBpcyBkaXNwYXRjaGVkLFxuICAgKiBhbmQgc29tZSBwYXJ0IG9mIHRoZSBzdGF0ZSB0cmVlIG1heSBwb3RlbnRpYWxseSBoYXZlIGNoYW5nZWQuIFlvdSBtYXkgdGhlblxuICAgKiBjYWxsIGBnZXRTdGF0ZSgpYCB0byByZWFkIHRoZSBjdXJyZW50IHN0YXRlIHRyZWUgaW5zaWRlIHRoZSBjYWxsYmFjay5cbiAgICpcbiAgICogWW91IG1heSBjYWxsIGBkaXNwYXRjaCgpYCBmcm9tIGEgY2hhbmdlIGxpc3RlbmVyLCB3aXRoIHRoZSBmb2xsb3dpbmdcbiAgICogY2F2ZWF0czpcbiAgICpcbiAgICogMS4gVGhlIHN1YnNjcmlwdGlvbnMgYXJlIHNuYXBzaG90dGVkIGp1c3QgYmVmb3JlIGV2ZXJ5IGBkaXNwYXRjaCgpYCBjYWxsLlxuICAgKiBJZiB5b3Ugc3Vic2NyaWJlIG9yIHVuc3Vic2NyaWJlIHdoaWxlIHRoZSBsaXN0ZW5lcnMgYXJlIGJlaW5nIGludm9rZWQsIHRoaXNcbiAgICogd2lsbCBub3QgaGF2ZSBhbnkgZWZmZWN0IG9uIHRoZSBgZGlzcGF0Y2goKWAgdGhhdCBpcyBjdXJyZW50bHkgaW4gcHJvZ3Jlc3MuXG4gICAqIEhvd2V2ZXIsIHRoZSBuZXh0IGBkaXNwYXRjaCgpYCBjYWxsLCB3aGV0aGVyIG5lc3RlZCBvciBub3QsIHdpbGwgdXNlIGEgbW9yZVxuICAgKiByZWNlbnQgc25hcHNob3Qgb2YgdGhlIHN1YnNjcmlwdGlvbiBsaXN0LlxuICAgKlxuICAgKiAyLiBUaGUgbGlzdGVuZXIgc2hvdWxkIG5vdCBleHBlY3QgdG8gc2VlIGFsbCBzdGF0ZSBjaGFuZ2VzLCBhcyB0aGUgc3RhdGVcbiAgICogbWlnaHQgaGF2ZSBiZWVuIHVwZGF0ZWQgbXVsdGlwbGUgdGltZXMgZHVyaW5nIGEgbmVzdGVkIGBkaXNwYXRjaCgpYCBiZWZvcmVcbiAgICogdGhlIGxpc3RlbmVyIGlzIGNhbGxlZC4gSXQgaXMsIGhvd2V2ZXIsIGd1YXJhbnRlZWQgdGhhdCBhbGwgc3Vic2NyaWJlcnNcbiAgICogcmVnaXN0ZXJlZCBiZWZvcmUgdGhlIGBkaXNwYXRjaCgpYCBzdGFydGVkIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlIGxhdGVzdFxuICAgKiBzdGF0ZSBieSB0aGUgdGltZSBpdCBleGl0cy5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgQSBjYWxsYmFjayB0byBiZSBpbnZva2VkIG9uIGV2ZXJ5IGRpc3BhdGNoLlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgZnVuY3Rpb24gdG8gcmVtb3ZlIHRoaXMgY2hhbmdlIGxpc3RlbmVyLlxuICAgKi9cbiAgZnVuY3Rpb24gc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgbGlzdGVuZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbWF5IG5vdCBjYWxsIHN0b3JlLnN1YnNjcmliZSgpIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdJZiB5b3Ugd291bGQgbGlrZSB0byBiZSBub3RpZmllZCBhZnRlciB0aGUgc3RvcmUgaGFzIGJlZW4gdXBkYXRlZCwgc3Vic2NyaWJlIGZyb20gYSAnICsgJ2NvbXBvbmVudCBhbmQgaW52b2tlIHN0b3JlLmdldFN0YXRlKCkgaW4gdGhlIGNhbGxiYWNrIHRvIGFjY2VzcyB0aGUgbGF0ZXN0IHN0YXRlLiAnICsgJ1NlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGktcmVmZXJlbmNlL3N0b3JlI3N1YnNjcmliZShsaXN0ZW5lcikgZm9yIG1vcmUgZGV0YWlscy4nKTtcbiAgICB9XG5cbiAgICB2YXIgaXNTdWJzY3JpYmVkID0gdHJ1ZTtcblxuICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICBuZXh0TGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgaWYgKCFpc1N1YnNjcmliZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtYXkgbm90IHVuc3Vic2NyaWJlIGZyb20gYSBzdG9yZSBsaXN0ZW5lciB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2FwaS1yZWZlcmVuY2Uvc3RvcmUjc3Vic2NyaWJlKGxpc3RlbmVyKSBmb3IgbW9yZSBkZXRhaWxzLicpO1xuICAgICAgfVxuXG4gICAgICBpc1N1YnNjcmliZWQgPSBmYWxzZTtcblxuICAgICAgZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpO1xuICAgICAgdmFyIGluZGV4ID0gbmV4dExpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgICAgIG5leHRMaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIERpc3BhdGNoZXMgYW4gYWN0aW9uLiBJdCBpcyB0aGUgb25seSB3YXkgdG8gdHJpZ2dlciBhIHN0YXRlIGNoYW5nZS5cbiAgICpcbiAgICogVGhlIGByZWR1Y2VyYCBmdW5jdGlvbiwgdXNlZCB0byBjcmVhdGUgdGhlIHN0b3JlLCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZVxuICAgKiBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBnaXZlbiBgYWN0aW9uYC4gSXRzIHJldHVybiB2YWx1ZSB3aWxsXG4gICAqIGJlIGNvbnNpZGVyZWQgdGhlICoqbmV4dCoqIHN0YXRlIG9mIHRoZSB0cmVlLCBhbmQgdGhlIGNoYW5nZSBsaXN0ZW5lcnNcbiAgICogd2lsbCBiZSBub3RpZmllZC5cbiAgICpcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb25seSBzdXBwb3J0cyBwbGFpbiBvYmplY3QgYWN0aW9ucy4gSWYgeW91IHdhbnQgdG9cbiAgICogZGlzcGF0Y2ggYSBQcm9taXNlLCBhbiBPYnNlcnZhYmxlLCBhIHRodW5rLCBvciBzb21ldGhpbmcgZWxzZSwgeW91IG5lZWQgdG9cbiAgICogd3JhcCB5b3VyIHN0b3JlIGNyZWF0aW5nIGZ1bmN0aW9uIGludG8gdGhlIGNvcnJlc3BvbmRpbmcgbWlkZGxld2FyZS4gRm9yXG4gICAqIGV4YW1wbGUsIHNlZSB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgdGhlIGByZWR1eC10aHVua2AgcGFja2FnZS4gRXZlbiB0aGVcbiAgICogbWlkZGxld2FyZSB3aWxsIGV2ZW50dWFsbHkgZGlzcGF0Y2ggcGxhaW4gb2JqZWN0IGFjdGlvbnMgdXNpbmcgdGhpcyBtZXRob2QuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBhY3Rpb24gQSBwbGFpbiBvYmplY3QgcmVwcmVzZW50aW5nIOKAnHdoYXQgY2hhbmdlZOKAnS4gSXQgaXNcbiAgICogYSBnb29kIGlkZWEgdG8ga2VlcCBhY3Rpb25zIHNlcmlhbGl6YWJsZSBzbyB5b3UgY2FuIHJlY29yZCBhbmQgcmVwbGF5IHVzZXJcbiAgICogc2Vzc2lvbnMsIG9yIHVzZSB0aGUgdGltZSB0cmF2ZWxsaW5nIGByZWR1eC1kZXZ0b29sc2AuIEFuIGFjdGlvbiBtdXN0IGhhdmVcbiAgICogYSBgdHlwZWAgcHJvcGVydHkgd2hpY2ggbWF5IG5vdCBiZSBgdW5kZWZpbmVkYC4gSXQgaXMgYSBnb29kIGlkZWEgdG8gdXNlXG4gICAqIHN0cmluZyBjb25zdGFudHMgZm9yIGFjdGlvbiB0eXBlcy5cbiAgICpcbiAgICogQHJldHVybnMge09iamVjdH0gRm9yIGNvbnZlbmllbmNlLCB0aGUgc2FtZSBhY3Rpb24gb2JqZWN0IHlvdSBkaXNwYXRjaGVkLlxuICAgKlxuICAgKiBOb3RlIHRoYXQsIGlmIHlvdSB1c2UgYSBjdXN0b20gbWlkZGxld2FyZSwgaXQgbWF5IHdyYXAgYGRpc3BhdGNoKClgIHRvXG4gICAqIHJldHVybiBzb21ldGhpbmcgZWxzZSAoZm9yIGV4YW1wbGUsIGEgUHJvbWlzZSB5b3UgY2FuIGF3YWl0KS5cbiAgICovXG4gIGZ1bmN0aW9uIGRpc3BhdGNoKGFjdGlvbikge1xuICAgIGlmICghaXNQbGFpbk9iamVjdChhY3Rpb24pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FjdGlvbnMgbXVzdCBiZSBwbGFpbiBvYmplY3RzLiAnICsgJ1VzZSBjdXN0b20gbWlkZGxld2FyZSBmb3IgYXN5bmMgYWN0aW9ucy4nKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGFjdGlvbi50eXBlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBY3Rpb25zIG1heSBub3QgaGF2ZSBhbiB1bmRlZmluZWQgXCJ0eXBlXCIgcHJvcGVydHkuICcgKyAnSGF2ZSB5b3UgbWlzc3BlbGxlZCBhIGNvbnN0YW50PycpO1xuICAgIH1cblxuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlZHVjZXJzIG1heSBub3QgZGlzcGF0Y2ggYWN0aW9ucy4nKTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgaXNEaXNwYXRjaGluZyA9IHRydWU7XG4gICAgICBjdXJyZW50U3RhdGUgPSBjdXJyZW50UmVkdWNlcihjdXJyZW50U3RhdGUsIGFjdGlvbik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgbGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycyA9IG5leHRMaXN0ZW5lcnM7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBsaXN0ZW5lciA9IGxpc3RlbmVyc1tpXTtcbiAgICAgIGxpc3RlbmVyKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXBsYWNlcyB0aGUgcmVkdWNlciBjdXJyZW50bHkgdXNlZCBieSB0aGUgc3RvcmUgdG8gY2FsY3VsYXRlIHRoZSBzdGF0ZS5cbiAgICpcbiAgICogWW91IG1pZ2h0IG5lZWQgdGhpcyBpZiB5b3VyIGFwcCBpbXBsZW1lbnRzIGNvZGUgc3BsaXR0aW5nIGFuZCB5b3Ugd2FudCB0b1xuICAgKiBsb2FkIHNvbWUgb2YgdGhlIHJlZHVjZXJzIGR5bmFtaWNhbGx5LiBZb3UgbWlnaHQgYWxzbyBuZWVkIHRoaXMgaWYgeW91XG4gICAqIGltcGxlbWVudCBhIGhvdCByZWxvYWRpbmcgbWVjaGFuaXNtIGZvciBSZWR1eC5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbmV4dFJlZHVjZXIgVGhlIHJlZHVjZXIgZm9yIHRoZSBzdG9yZSB0byB1c2UgaW5zdGVhZC5cbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBmdW5jdGlvbiByZXBsYWNlUmVkdWNlcihuZXh0UmVkdWNlcikge1xuICAgIGlmICh0eXBlb2YgbmV4dFJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIG5leHRSZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgY3VycmVudFJlZHVjZXIgPSBuZXh0UmVkdWNlcjtcbiAgICBkaXNwYXRjaCh7IHR5cGU6IEFjdGlvblR5cGVzLlJFUExBQ0UgfSk7XG4gIH1cblxuICAvKipcbiAgICogSW50ZXJvcGVyYWJpbGl0eSBwb2ludCBmb3Igb2JzZXJ2YWJsZS9yZWFjdGl2ZSBsaWJyYXJpZXMuXG4gICAqIEByZXR1cm5zIHtvYnNlcnZhYmxlfSBBIG1pbmltYWwgb2JzZXJ2YWJsZSBvZiBzdGF0ZSBjaGFuZ2VzLlxuICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBvYnNlcnZhYmxlIHByb3Bvc2FsOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYnNlcnZhYmxlXG4gICAqL1xuICBmdW5jdGlvbiBvYnNlcnZhYmxlKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIG91dGVyU3Vic2NyaWJlID0gc3Vic2NyaWJlO1xuICAgIHJldHVybiBfcmVmID0ge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgbWluaW1hbCBvYnNlcnZhYmxlIHN1YnNjcmlwdGlvbiBtZXRob2QuXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JzZXJ2ZXIgQW55IG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIGFzIGFuIG9ic2VydmVyLlxuICAgICAgICogVGhlIG9ic2VydmVyIG9iamVjdCBzaG91bGQgaGF2ZSBhIGBuZXh0YCBtZXRob2QuXG4gICAgICAgKiBAcmV0dXJucyB7c3Vic2NyaXB0aW9ufSBBbiBvYmplY3Qgd2l0aCBhbiBgdW5zdWJzY3JpYmVgIG1ldGhvZCB0aGF0IGNhblxuICAgICAgICogYmUgdXNlZCB0byB1bnN1YnNjcmliZSB0aGUgb2JzZXJ2YWJsZSBmcm9tIHRoZSBzdG9yZSwgYW5kIHByZXZlbnQgZnVydGhlclxuICAgICAgICogZW1pc3Npb24gb2YgdmFsdWVzIGZyb20gdGhlIG9ic2VydmFibGUuXG4gICAgICAgKi9cbiAgICAgIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKG9ic2VydmVyKSB7XG4gICAgICAgIGlmICgodHlwZW9mIG9ic2VydmVyID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihvYnNlcnZlcikpICE9PSAnb2JqZWN0JyB8fCBvYnNlcnZlciA9PT0gbnVsbCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHRoZSBvYnNlcnZlciB0byBiZSBhbiBvYmplY3QuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBvYnNlcnZlU3RhdGUoKSB7XG4gICAgICAgICAgaWYgKG9ic2VydmVyLm5leHQpIHtcbiAgICAgICAgICAgIG9ic2VydmVyLm5leHQoZ2V0U3RhdGUoKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgb2JzZXJ2ZVN0YXRlKCk7XG4gICAgICAgIHZhciB1bnN1YnNjcmliZSA9IG91dGVyU3Vic2NyaWJlKG9ic2VydmVTdGF0ZSk7XG4gICAgICAgIHJldHVybiB7IHVuc3Vic2NyaWJlOiB1bnN1YnNjcmliZSB9O1xuICAgICAgfVxuICAgIH0sIF9yZWZbJCRvYnNlcnZhYmxlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sIF9yZWY7XG4gIH1cblxuICAvLyBXaGVuIGEgc3RvcmUgaXMgY3JlYXRlZCwgYW4gXCJJTklUXCIgYWN0aW9uIGlzIGRpc3BhdGNoZWQgc28gdGhhdCBldmVyeVxuICAvLyByZWR1Y2VyIHJldHVybnMgdGhlaXIgaW5pdGlhbCBzdGF0ZS4gVGhpcyBlZmZlY3RpdmVseSBwb3B1bGF0ZXNcbiAgLy8gdGhlIGluaXRpYWwgc3RhdGUgdHJlZS5cbiAgZGlzcGF0Y2goeyB0eXBlOiBBY3Rpb25UeXBlcy5JTklUIH0pO1xuXG4gIHJldHVybiBfcmVmMiA9IHtcbiAgICBkaXNwYXRjaDogZGlzcGF0Y2gsXG4gICAgc3Vic2NyaWJlOiBzdWJzY3JpYmUsXG4gICAgZ2V0U3RhdGU6IGdldFN0YXRlLFxuICAgIHJlcGxhY2VSZWR1Y2VyOiByZXBsYWNlUmVkdWNlclxuICB9LCBfcmVmMlskJG9ic2VydmFibGVdID0gb2JzZXJ2YWJsZSwgX3JlZjI7XG59XG5cbi8qKlxuICogUHJpbnRzIGEgd2FybmluZyBpbiB0aGUgY29uc29sZSBpZiBpdCBleGlzdHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgVGhlIHdhcm5pbmcgbWVzc2FnZS5cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiB3YXJuaW5nKG1lc3NhZ2UpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBjb25zb2xlLmVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgfVxuICAvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9cbiAgdHJ5IHtcbiAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IGlmIHlvdSBlbmFibGVcbiAgICAvLyBcImJyZWFrIG9uIGFsbCBleGNlcHRpb25zXCIgaW4geW91ciBjb25zb2xlLFxuICAgIC8vIGl0IHdvdWxkIHBhdXNlIHRoZSBleGVjdXRpb24gYXQgdGhpcyBsaW5lLlxuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgfSBjYXRjaCAoZSkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eVxufVxuXG5mdW5jdGlvbiBnZXRVbmRlZmluZWRTdGF0ZUVycm9yTWVzc2FnZShrZXksIGFjdGlvbikge1xuICB2YXIgYWN0aW9uVHlwZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZTtcbiAgdmFyIGFjdGlvbkRlc2NyaXB0aW9uID0gYWN0aW9uVHlwZSAmJiAnYWN0aW9uIFwiJyArIFN0cmluZyhhY3Rpb25UeXBlKSArICdcIicgfHwgJ2FuIGFjdGlvbic7XG5cbiAgcmV0dXJuICdHaXZlbiAnICsgYWN0aW9uRGVzY3JpcHRpb24gKyAnLCByZWR1Y2VyIFwiJyArIGtleSArICdcIiByZXR1cm5lZCB1bmRlZmluZWQuICcgKyAnVG8gaWdub3JlIGFuIGFjdGlvbiwgeW91IG11c3QgZXhwbGljaXRseSByZXR1cm4gdGhlIHByZXZpb3VzIHN0YXRlLiAnICsgJ0lmIHlvdSB3YW50IHRoaXMgcmVkdWNlciB0byBob2xkIG5vIHZhbHVlLCB5b3UgY2FuIHJldHVybiBudWxsIGluc3RlYWQgb2YgdW5kZWZpbmVkLic7XG59XG5cbmZ1bmN0aW9uIGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2UoaW5wdXRTdGF0ZSwgcmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKSB7XG4gIHZhciByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgdmFyIGFyZ3VtZW50TmFtZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuSU5JVCA/ICdwcmVsb2FkZWRTdGF0ZSBhcmd1bWVudCBwYXNzZWQgdG8gY3JlYXRlU3RvcmUnIDogJ3ByZXZpb3VzIHN0YXRlIHJlY2VpdmVkIGJ5IHRoZSByZWR1Y2VyJztcblxuICBpZiAocmVkdWNlcktleXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuICdTdG9yZSBkb2VzIG5vdCBoYXZlIGEgdmFsaWQgcmVkdWNlci4gTWFrZSBzdXJlIHRoZSBhcmd1bWVudCBwYXNzZWQgJyArICd0byBjb21iaW5lUmVkdWNlcnMgaXMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgcmVkdWNlcnMuJztcbiAgfVxuXG4gIGlmICghaXNQbGFpbk9iamVjdChpbnB1dFN0YXRlKSkge1xuICAgIHJldHVybiAnVGhlICcgKyBhcmd1bWVudE5hbWUgKyAnIGhhcyB1bmV4cGVjdGVkIHR5cGUgb2YgXCInICsge30udG9TdHJpbmcuY2FsbChpbnB1dFN0YXRlKS5tYXRjaCgvXFxzKFthLXp8QS1aXSspLylbMV0gKyAnXCIuIEV4cGVjdGVkIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgJyArICgna2V5czogXCInICsgcmVkdWNlcktleXMuam9pbignXCIsIFwiJykgKyAnXCInKTtcbiAgfVxuXG4gIHZhciB1bmV4cGVjdGVkS2V5cyA9IE9iamVjdC5rZXlzKGlucHV0U3RhdGUpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuICFyZWR1Y2Vycy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmICF1bmV4cGVjdGVkS2V5Q2FjaGVba2V5XTtcbiAgfSk7XG5cbiAgdW5leHBlY3RlZEtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdW5leHBlY3RlZEtleUNhY2hlW2tleV0gPSB0cnVlO1xuICB9KTtcblxuICBpZiAoYWN0aW9uICYmIGFjdGlvbi50eXBlID09PSBBY3Rpb25UeXBlcy5SRVBMQUNFKSByZXR1cm47XG5cbiAgaWYgKHVuZXhwZWN0ZWRLZXlzLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gJ1VuZXhwZWN0ZWQgJyArICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAxID8gJ2tleXMnIDogJ2tleScpICsgJyAnICsgKCdcIicgKyB1bmV4cGVjdGVkS2V5cy5qb2luKCdcIiwgXCInKSArICdcIiBmb3VuZCBpbiAnICsgYXJndW1lbnROYW1lICsgJy4gJykgKyAnRXhwZWN0ZWQgdG8gZmluZCBvbmUgb2YgdGhlIGtub3duIHJlZHVjZXIga2V5cyBpbnN0ZWFkOiAnICsgKCdcIicgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArICdcIi4gVW5leHBlY3RlZCBrZXlzIHdpbGwgYmUgaWdub3JlZC4nKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRSZWR1Y2VyU2hhcGUocmVkdWNlcnMpIHtcbiAgT2JqZWN0LmtleXMocmVkdWNlcnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciByZWR1Y2VyID0gcmVkdWNlcnNba2V5XTtcbiAgICB2YXIgaW5pdGlhbFN0YXRlID0gcmVkdWNlcih1bmRlZmluZWQsIHsgdHlwZTogQWN0aW9uVHlwZXMuSU5JVCB9KTtcblxuICAgIGlmICh0eXBlb2YgaW5pdGlhbFN0YXRlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWR1Y2VyIFwiJyArIGtleSArICdcIiByZXR1cm5lZCB1bmRlZmluZWQgZHVyaW5nIGluaXRpYWxpemF0aW9uLiAnICsgJ0lmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlIHJlZHVjZXIgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCAnICsgJ2V4cGxpY2l0bHkgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLiBUaGUgaW5pdGlhbCBzdGF0ZSBtYXkgJyArICdub3QgYmUgdW5kZWZpbmVkLiBJZiB5b3UgZG9uXFwndCB3YW50IHRvIHNldCBhIHZhbHVlIGZvciB0aGlzIHJlZHVjZXIsICcgKyAneW91IGNhbiB1c2UgbnVsbCBpbnN0ZWFkIG9mIHVuZGVmaW5lZC4nKTtcbiAgICB9XG5cbiAgICB2YXIgdHlwZSA9ICdAQHJlZHV4L1BST0JFX1VOS05PV05fQUNUSU9OXycgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoNykuc3BsaXQoJycpLmpvaW4oJy4nKTtcbiAgICBpZiAodHlwZW9mIHJlZHVjZXIodW5kZWZpbmVkLCB7IHR5cGU6IHR5cGUgfSkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlZHVjZXIgXCInICsga2V5ICsgJ1wiIHJldHVybmVkIHVuZGVmaW5lZCB3aGVuIHByb2JlZCB3aXRoIGEgcmFuZG9tIHR5cGUuICcgKyAoJ0RvblxcJ3QgdHJ5IHRvIGhhbmRsZSAnICsgQWN0aW9uVHlwZXMuSU5JVCArICcgb3Igb3RoZXIgYWN0aW9ucyBpbiBcInJlZHV4LypcIiAnKSArICduYW1lc3BhY2UuIFRoZXkgYXJlIGNvbnNpZGVyZWQgcHJpdmF0ZS4gSW5zdGVhZCwgeW91IG11c3QgcmV0dXJuIHRoZSAnICsgJ2N1cnJlbnQgc3RhdGUgZm9yIGFueSB1bmtub3duIGFjdGlvbnMsIHVubGVzcyBpdCBpcyB1bmRlZmluZWQsICcgKyAnaW4gd2hpY2ggY2FzZSB5b3UgbXVzdCByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUsIHJlZ2FyZGxlc3Mgb2YgdGhlICcgKyAnYWN0aW9uIHR5cGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBub3QgYmUgdW5kZWZpbmVkLCBidXQgY2FuIGJlIG51bGwuJyk7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBUdXJucyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBkaWZmZXJlbnQgcmVkdWNlciBmdW5jdGlvbnMsIGludG8gYSBzaW5nbGVcbiAqIHJlZHVjZXIgZnVuY3Rpb24uIEl0IHdpbGwgY2FsbCBldmVyeSBjaGlsZCByZWR1Y2VyLCBhbmQgZ2F0aGVyIHRoZWlyIHJlc3VsdHNcbiAqIGludG8gYSBzaW5nbGUgc3RhdGUgb2JqZWN0LCB3aG9zZSBrZXlzIGNvcnJlc3BvbmQgdG8gdGhlIGtleXMgb2YgdGhlIHBhc3NlZFxuICogcmVkdWNlciBmdW5jdGlvbnMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHJlZHVjZXJzIEFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgY29ycmVzcG9uZCB0byBkaWZmZXJlbnRcbiAqIHJlZHVjZXIgZnVuY3Rpb25zIHRoYXQgbmVlZCB0byBiZSBjb21iaW5lZCBpbnRvIG9uZS4gT25lIGhhbmR5IHdheSB0byBvYnRhaW5cbiAqIGl0IGlzIHRvIHVzZSBFUzYgYGltcG9ydCAqIGFzIHJlZHVjZXJzYCBzeW50YXguIFRoZSByZWR1Y2VycyBtYXkgbmV2ZXIgcmV0dXJuXG4gKiB1bmRlZmluZWQgZm9yIGFueSBhY3Rpb24uIEluc3RlYWQsIHRoZXkgc2hvdWxkIHJldHVybiB0aGVpciBpbml0aWFsIHN0YXRlXG4gKiBpZiB0aGUgc3RhdGUgcGFzc2VkIHRvIHRoZW0gd2FzIHVuZGVmaW5lZCwgYW5kIHRoZSBjdXJyZW50IHN0YXRlIGZvciBhbnlcbiAqIHVucmVjb2duaXplZCBhY3Rpb24uXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIHJlZHVjZXIgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGV2ZXJ5IHJlZHVjZXIgaW5zaWRlIHRoZVxuICogcGFzc2VkIG9iamVjdCwgYW5kIGJ1aWxkcyBhIHN0YXRlIG9iamVjdCB3aXRoIHRoZSBzYW1lIHNoYXBlLlxuICovXG5mdW5jdGlvbiBjb21iaW5lUmVkdWNlcnMocmVkdWNlcnMpIHtcbiAgdmFyIHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICB2YXIgZmluYWxSZWR1Y2VycyA9IHt9O1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHJlZHVjZXJLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IHJlZHVjZXJLZXlzW2ldO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICh0eXBlb2YgcmVkdWNlcnNba2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgd2FybmluZygnTm8gcmVkdWNlciBwcm92aWRlZCBmb3Iga2V5IFwiJyArIGtleSArICdcIicpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcmVkdWNlcnNba2V5XSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgZmluYWxSZWR1Y2Vyc1trZXldID0gcmVkdWNlcnNba2V5XTtcbiAgICB9XG4gIH1cbiAgdmFyIGZpbmFsUmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhmaW5hbFJlZHVjZXJzKTtcblxuICB2YXIgdW5leHBlY3RlZEtleUNhY2hlID0gdm9pZCAwO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZSA9IHt9O1xuICB9XG5cbiAgdmFyIHNoYXBlQXNzZXJ0aW9uRXJyb3IgPSB2b2lkIDA7XG4gIHRyeSB7XG4gICAgYXNzZXJ0UmVkdWNlclNoYXBlKGZpbmFsUmVkdWNlcnMpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgc2hhcGVBc3NlcnRpb25FcnJvciA9IGU7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gY29tYmluYXRpb24oKSB7XG4gICAgdmFyIHN0YXRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICB2YXIgYWN0aW9uID0gYXJndW1lbnRzWzFdO1xuXG4gICAgaWYgKHNoYXBlQXNzZXJ0aW9uRXJyb3IpIHtcbiAgICAgIHRocm93IHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciB3YXJuaW5nTWVzc2FnZSA9IGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2Uoc3RhdGUsIGZpbmFsUmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKTtcbiAgICAgIGlmICh3YXJuaW5nTWVzc2FnZSkge1xuICAgICAgICB3YXJuaW5nKHdhcm5pbmdNZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgaGFzQ2hhbmdlZCA9IGZhbHNlO1xuICAgIHZhciBuZXh0U3RhdGUgPSB7fTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgZmluYWxSZWR1Y2VyS2V5cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfa2V5ID0gZmluYWxSZWR1Y2VyS2V5c1tfaV07XG4gICAgICB2YXIgcmVkdWNlciA9IGZpbmFsUmVkdWNlcnNbX2tleV07XG4gICAgICB2YXIgcHJldmlvdXNTdGF0ZUZvcktleSA9IHN0YXRlW19rZXldO1xuICAgICAgdmFyIG5leHRTdGF0ZUZvcktleSA9IHJlZHVjZXIocHJldmlvdXNTdGF0ZUZvcktleSwgYWN0aW9uKTtcbiAgICAgIGlmICh0eXBlb2YgbmV4dFN0YXRlRm9yS2V5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB2YXIgZXJyb3JNZXNzYWdlID0gZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2UoX2tleSwgYWN0aW9uKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yTWVzc2FnZSk7XG4gICAgICB9XG4gICAgICBuZXh0U3RhdGVbX2tleV0gPSBuZXh0U3RhdGVGb3JLZXk7XG4gICAgICBoYXNDaGFuZ2VkID0gaGFzQ2hhbmdlZCB8fCBuZXh0U3RhdGVGb3JLZXkgIT09IHByZXZpb3VzU3RhdGVGb3JLZXk7XG4gICAgfVxuICAgIHJldHVybiBoYXNDaGFuZ2VkID8gbmV4dFN0YXRlIDogc3RhdGU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoKGFjdGlvbkNyZWF0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH07XG59XG5cbi8qKlxuICogVHVybnMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uIGNyZWF0b3JzLCBpbnRvIGFuIG9iamVjdCB3aXRoIHRoZVxuICogc2FtZSBrZXlzLCBidXQgd2l0aCBldmVyeSBmdW5jdGlvbiB3cmFwcGVkIGludG8gYSBgZGlzcGF0Y2hgIGNhbGwgc28gdGhleVxuICogbWF5IGJlIGludm9rZWQgZGlyZWN0bHkuIFRoaXMgaXMganVzdCBhIGNvbnZlbmllbmNlIG1ldGhvZCwgYXMgeW91IGNhbiBjYWxsXG4gKiBgc3RvcmUuZGlzcGF0Y2goTXlBY3Rpb25DcmVhdG9ycy5kb1NvbWV0aGluZygpKWAgeW91cnNlbGYganVzdCBmaW5lLlxuICpcbiAqIEZvciBjb252ZW5pZW5jZSwgeW91IGNhbiBhbHNvIHBhc3MgYSBzaW5nbGUgZnVuY3Rpb24gYXMgdGhlIGZpcnN0IGFyZ3VtZW50LFxuICogYW5kIGdldCBhIGZ1bmN0aW9uIGluIHJldHVybi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdH0gYWN0aW9uQ3JlYXRvcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uXG4gKiBjcmVhdG9yIGZ1bmN0aW9ucy4gT25lIGhhbmR5IHdheSB0byBvYnRhaW4gaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXNgXG4gKiBzeW50YXguIFlvdSBtYXkgYWxzbyBwYXNzIGEgc2luZ2xlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGRpc3BhdGNoIFRoZSBgZGlzcGF0Y2hgIGZ1bmN0aW9uIGF2YWlsYWJsZSBvbiB5b3VyIFJlZHV4XG4gKiBzdG9yZS5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb258T2JqZWN0fSBUaGUgb2JqZWN0IG1pbWlja2luZyB0aGUgb3JpZ2luYWwgb2JqZWN0LCBidXQgd2l0aFxuICogZXZlcnkgYWN0aW9uIGNyZWF0b3Igd3JhcHBlZCBpbnRvIHRoZSBgZGlzcGF0Y2hgIGNhbGwuIElmIHlvdSBwYXNzZWQgYVxuICogZnVuY3Rpb24gYXMgYGFjdGlvbkNyZWF0b3JzYCwgdGhlIHJldHVybiB2YWx1ZSB3aWxsIGFsc28gYmUgYSBzaW5nbGVcbiAqIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiaW5kQWN0aW9uQ3JlYXRvcnMoYWN0aW9uQ3JlYXRvcnMsIGRpc3BhdGNoKSB7XG4gIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvcnMsIGRpc3BhdGNoKTtcbiAgfVxuXG4gIGlmICgodHlwZW9mIGFjdGlvbkNyZWF0b3JzID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihhY3Rpb25DcmVhdG9ycykpICE9PSAnb2JqZWN0JyB8fCBhY3Rpb25DcmVhdG9ycyA9PT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcignYmluZEFjdGlvbkNyZWF0b3JzIGV4cGVjdGVkIGFuIG9iamVjdCBvciBhIGZ1bmN0aW9uLCBpbnN0ZWFkIHJlY2VpdmVkICcgKyAoYWN0aW9uQ3JlYXRvcnMgPT09IG51bGwgPyAnbnVsbCcgOiB0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGFjdGlvbkNyZWF0b3JzKSkgKyAnLiAnICsgJ0RpZCB5b3Ugd3JpdGUgXCJpbXBvcnQgQWN0aW9uQ3JlYXRvcnMgZnJvbVwiIGluc3RlYWQgb2YgXCJpbXBvcnQgKiBhcyBBY3Rpb25DcmVhdG9ycyBmcm9tXCI/Jyk7XG4gIH1cblxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGFjdGlvbkNyZWF0b3JzKTtcbiAgdmFyIGJvdW5kQWN0aW9uQ3JlYXRvcnMgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgdmFyIGFjdGlvbkNyZWF0b3IgPSBhY3Rpb25DcmVhdG9yc1trZXldO1xuICAgIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYm91bmRBY3Rpb25DcmVhdG9yc1trZXldID0gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvciwgZGlzcGF0Y2gpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYm91bmRBY3Rpb25DcmVhdG9ycztcbn1cblxuLyoqXG4gKiBDb21wb3NlcyBzaW5nbGUtYXJndW1lbnQgZnVuY3Rpb25zIGZyb20gcmlnaHQgdG8gbGVmdC4gVGhlIHJpZ2h0bW9zdFxuICogZnVuY3Rpb24gY2FuIHRha2UgbXVsdGlwbGUgYXJndW1lbnRzIGFzIGl0IHByb3ZpZGVzIHRoZSBzaWduYXR1cmUgZm9yXG4gKiB0aGUgcmVzdWx0aW5nIGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0gey4uLkZ1bmN0aW9ufSBmdW5jcyBUaGUgZnVuY3Rpb25zIHRvIGNvbXBvc2UuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgZnVuY3Rpb24gb2J0YWluZWQgYnkgY29tcG9zaW5nIHRoZSBhcmd1bWVudCBmdW5jdGlvbnNcbiAqIGZyb20gcmlnaHQgdG8gbGVmdC4gRm9yIGV4YW1wbGUsIGNvbXBvc2UoZiwgZywgaCkgaXMgaWRlbnRpY2FsIHRvIGRvaW5nXG4gKiAoLi4uYXJncykgPT4gZihnKGgoLi4uYXJncykpKS5cbiAqL1xuXG5mdW5jdGlvbiBjb21wb3NlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBmdW5jc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgICAgcmV0dXJuIGFyZztcbiAgICB9O1xuICB9XG5cbiAgaWYgKGZ1bmNzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBmdW5jc1swXTtcbiAgfVxuXG4gIHJldHVybiBmdW5jcy5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGEoYi5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cykpO1xuICAgIH07XG4gIH0pO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBzdG9yZSBlbmhhbmNlciB0aGF0IGFwcGxpZXMgbWlkZGxld2FyZSB0byB0aGUgZGlzcGF0Y2ggbWV0aG9kXG4gKiBvZiB0aGUgUmVkdXggc3RvcmUuIFRoaXMgaXMgaGFuZHkgZm9yIGEgdmFyaWV0eSBvZiB0YXNrcywgc3VjaCBhcyBleHByZXNzaW5nXG4gKiBhc3luY2hyb25vdXMgYWN0aW9ucyBpbiBhIGNvbmNpc2UgbWFubmVyLCBvciBsb2dnaW5nIGV2ZXJ5IGFjdGlvbiBwYXlsb2FkLlxuICpcbiAqIFNlZSBgcmVkdXgtdGh1bmtgIHBhY2thZ2UgYXMgYW4gZXhhbXBsZSBvZiB0aGUgUmVkdXggbWlkZGxld2FyZS5cbiAqXG4gKiBCZWNhdXNlIG1pZGRsZXdhcmUgaXMgcG90ZW50aWFsbHkgYXN5bmNocm9ub3VzLCB0aGlzIHNob3VsZCBiZSB0aGUgZmlyc3RcbiAqIHN0b3JlIGVuaGFuY2VyIGluIHRoZSBjb21wb3NpdGlvbiBjaGFpbi5cbiAqXG4gKiBOb3RlIHRoYXQgZWFjaCBtaWRkbGV3YXJlIHdpbGwgYmUgZ2l2ZW4gdGhlIGBkaXNwYXRjaGAgYW5kIGBnZXRTdGF0ZWAgZnVuY3Rpb25zXG4gKiBhcyBuYW1lZCBhcmd1bWVudHMuXG4gKlxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gbWlkZGxld2FyZXMgVGhlIG1pZGRsZXdhcmUgY2hhaW4gdG8gYmUgYXBwbGllZC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBzdG9yZSBlbmhhbmNlciBhcHBseWluZyB0aGUgbWlkZGxld2FyZS5cbiAqL1xuZnVuY3Rpb24gYXBwbHlNaWRkbGV3YXJlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbWlkZGxld2FyZXMgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBtaWRkbGV3YXJlc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoY3JlYXRlU3RvcmUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgfVxuXG4gICAgICB2YXIgc3RvcmUgPSBjcmVhdGVTdG9yZS5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgICAgdmFyIF9kaXNwYXRjaCA9IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Rpc3BhdGNoaW5nIHdoaWxlIGNvbnN0cnVjdGluZyB5b3VyIG1pZGRsZXdhcmUgaXMgbm90IGFsbG93ZWQuICcgKyAnT3RoZXIgbWlkZGxld2FyZSB3b3VsZCBub3QgYmUgYXBwbGllZCB0byB0aGlzIGRpc3BhdGNoLicpO1xuICAgICAgfTtcblxuICAgICAgdmFyIG1pZGRsZXdhcmVBUEkgPSB7XG4gICAgICAgIGdldFN0YXRlOiBzdG9yZS5nZXRTdGF0ZSxcbiAgICAgICAgZGlzcGF0Y2g6IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICAgIHJldHVybiBfZGlzcGF0Y2guYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgdmFyIGNoYWluID0gbWlkZGxld2FyZXMubWFwKGZ1bmN0aW9uIChtaWRkbGV3YXJlKSB7XG4gICAgICAgIHJldHVybiBtaWRkbGV3YXJlKG1pZGRsZXdhcmVBUEkpO1xuICAgICAgfSk7XG4gICAgICBfZGlzcGF0Y2ggPSBjb21wb3NlLmFwcGx5KHVuZGVmaW5lZCwgY2hhaW4pKHN0b3JlLmRpc3BhdGNoKTtcblxuICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBzdG9yZSwge1xuICAgICAgICBkaXNwYXRjaDogX2Rpc3BhdGNoXG4gICAgICB9KTtcbiAgICB9O1xuICB9O1xufVxuXG4vKlxuICogVGhpcyBpcyBhIGR1bW15IGZ1bmN0aW9uIHRvIGNoZWNrIGlmIHRoZSBmdW5jdGlvbiBuYW1lIGhhcyBiZWVuIGFsdGVyZWQgYnkgbWluaWZpY2F0aW9uLlxuICogSWYgdGhlIGZ1bmN0aW9uIGhhcyBiZWVuIG1pbmlmaWVkIGFuZCBOT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nLCB3YXJuIHRoZSB1c2VyLlxuICovXG5mdW5jdGlvbiBpc0NydXNoZWQoKSB7fVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlb2YgaXNDcnVzaGVkLm5hbWUgPT09ICdzdHJpbmcnICYmIGlzQ3J1c2hlZC5uYW1lICE9PSAnaXNDcnVzaGVkJykge1xuICB3YXJuaW5nKFwiWW91IGFyZSBjdXJyZW50bHkgdXNpbmcgbWluaWZpZWQgY29kZSBvdXRzaWRlIG9mIE5PREVfRU5WID09PSAncHJvZHVjdGlvbicuIFwiICsgJ1RoaXMgbWVhbnMgdGhhdCB5b3UgYXJlIHJ1bm5pbmcgYSBzbG93ZXIgZGV2ZWxvcG1lbnQgYnVpbGQgb2YgUmVkdXguICcgKyAnWW91IGNhbiB1c2UgbG9vc2UtZW52aWZ5IChodHRwczovL2dpdGh1Yi5jb20vemVydG9zaC9sb29zZS1lbnZpZnkpIGZvciBicm93c2VyaWZ5ICcgKyAnb3IgRGVmaW5lUGx1Z2luIGZvciB3ZWJwYWNrIChodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzMwMDMwMDMxKSAnICsgJ3RvIGVuc3VyZSB5b3UgaGF2ZSB0aGUgY29ycmVjdCBjb2RlIGZvciB5b3VyIHByb2R1Y3Rpb24gYnVpbGQuJyk7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZVN0b3JlLCBjb21iaW5lUmVkdWNlcnMsIGJpbmRBY3Rpb25DcmVhdG9ycywgYXBwbHlNaWRkbGV3YXJlLCBjb21wb3NlLCBBY3Rpb25UeXBlcyBhcyBfX0RPX05PVF9VU0VfX0FjdGlvblR5cGVzIH07XG4iLCIvKiBnbG9iYWwgd2luZG93ICovXG5pbXBvcnQgcG9ueWZpbGwgZnJvbSAnLi9wb255ZmlsbC5qcyc7XG5cbnZhciByb290O1xuXG5pZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBzZWxmO1xufSBlbHNlIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gd2luZG93O1xufSBlbHNlIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gZ2xvYmFsO1xufSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gbW9kdWxlO1xufSBlbHNlIHtcbiAgcm9vdCA9IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG59XG5cbnZhciByZXN1bHQgPSBwb255ZmlsbChyb290KTtcbmV4cG9ydCBkZWZhdWx0IHJlc3VsdDtcbiIsIi8vXHJcbi8vIOODquODs+OCr+ODquOCueODiOmWoumAo1xyXG4vL1xyXG5cclxuZXhwb3J0IGNvbnN0IExpbmsgPSB7XHJcbiAgICAvL1xyXG4gICAgLy8g5oyH5a6a44Gu44Kw44Or44O844OXSUTjgYzjg6rjg7Pjgq/jgZXjgozjgabjgYTjgozjgbDjgIHlr77lv5zjgZnjgovntKDmnZBJROOCkui/lOOBmVxyXG4gICAgLy9cclxuICAgIGdldFNvemFpSWQ6IChsaW5rcywgZ3JvdXBfaWQpID0+IHtcclxuICAgICAgICBsZXQgc296YWlfaWQgPSAnJztcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5rcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAobGlua3NbaV0uZ3JvdXBfaWQgPT0gZ3JvdXBfaWQpIHtcclxuICAgICAgICAgICAgICAgIHNvemFpX2lkID0gbGlua3NbaV0uc296YWlfaWQ7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHNvemFpX2lkO1xyXG4gICAgfSxcclxuXHJcbiAgICAvL1xyXG4gICAgLy8g5oyH5a6a44Gu44Oc44OD44Kv44K5SUTjga7jg5zjg4Pjgq/jgrnjga7jgrDjg6vjg7zjg5fjgYzjg6rjg7Pjgq/jgZXjgozjgabjgYTjgozjgbDjgIHlr77lv5zjgZnjgovntKDmnZBJROOCkui/lOOBmVxyXG4gICAgLy9cclxuICAgIGdldFNvemFpSWRGcm9tQm94SWQ6IChsaW5rcywgYm94cywgYm94X2lkKSA9PiB7XHJcbiAgICAgICAgbGV0IHNvemFpX2lkID0gMDtcclxuICAgICAgICBsZXQgZ3JvdXBfaWQgPSAwO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJveHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGJveHNbaV0uYm94X2lkID09IGJveF9pZCkge1xyXG4gICAgICAgICAgICAgICAgZ3JvdXBfaWQgPSBib3hzW2ldLmdyb3VwX2lkO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChncm91cF9pZCAhPSAwKSB7XHJcbiAgICAgICAgICAgIHNvemFpX2lkID0gTGluay5nZXRTb3phaUlkKGxpbmtzLCBncm91cF9pZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gc296YWlfaWQ7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vXHJcbiAgICAvLyDmjIflrprjga7ntKDmnZBJROOBjOODquODs+OCr+OBleOCjOOBpuOBhOOBn+OCieOAgeWvvuW/nOOBmeOCi+OCsOODq+ODvOODl+WQjeOCkui/lOOBmVxyXG4gICAgLy9cclxuICAgIGdldEdyb3VwRnJvbVNvemFpSWQ6IChsaW5rcywgc296YWlfaWQpID0+IHtcclxuICAgICAgICBsZXQgZ3JvdXBfaWQgPSAwO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbmtzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChsaW5rc1tpXS5zb3phaV9pZCA9PSBzb3phaV9pZCkge1xyXG4gICAgICAgICAgICAgICAgZ3JvdXBfaWQgPSBsaW5rc1tpXS5ncm91cF9pZDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZ3JvdXBfaWQ7XHJcbiAgICB9XHJcbn1cclxuIiwiZXhwb3J0IGNvbnN0IFNBR0FfREFORERfTU9VU0VET1dOID0gJ1NBR0FfREFORERfTU9VU0VET1dOJztcclxuZXhwb3J0IGNvbnN0IFNBR0FfREFORERfTU9VU0VVUCA9ICdTQUdBX0RBTkREX01PVVNFVVAnO1xyXG5cclxuXHJcbmV4cG9ydCBjb25zdCBTYWdhX0RBbmREX01vdXNlRG93biA9IChwYXlsb2FkID0ge30pID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdHlwZTogU0FHQV9EQU5ERF9NT1VTRURPV04sXHJcbiAgICAgICAgcGF5bG9hZDoge1xyXG4gICAgICAgICAgICB2aWV3OiAndHJ1ZScsXHJcbiAgICAgICAgICAgIHg6IHBheWxvYWQueCxcclxuICAgICAgICAgICAgeTogcGF5bG9hZC55LFxyXG4gICAgICAgICAgICB0eXBlOiBwYXlsb2FkLnR5cGUsXHJcbiAgICAgICAgICAgIHZhbHVlOiBwYXlsb2FkLnZhbHVlLFxyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgU2FnYV9EQW5kRF9Nb3VzZVVwID0gKHBheWxvYWQgPSB7fSkgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiBTQUdBX0RBTkREX01PVVNFVVAsXHJcbiAgICAgICAgcGF5bG9hZDoge1xyXG4gICAgICAgICAgICB2aWV3OiAnZmFsc2UnLFxyXG4gICAgICAgICAgICB0eXBlOiBwYXlsb2FkLnR5cGUsXHJcbiAgICAgICAgICAgIHZhbHVlOiBwYXlsb2FkLnZhbHVlLFxyXG4gICAgICAgICAgICB4OiBwYXlsb2FkLngsXHJcbiAgICAgICAgICAgIHk6IHBheWxvYWQueSxcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxyXG4iLCIvL1xyXG4vLyDjg4bjgq3jgrnjg4jns7tcclxuLy9cclxuXHJcbmV4cG9ydCBjb25zdCBUZXh0ID0ge1xyXG4gICAgLy9cclxuICAgIC8vIOaMh+WumuOBruaWh+Wtl+WIl+OBi+OCieOAgee3qOmbhuOBq+S9v+eUqOOBmeOCi+aWh+Wtl+OCquODluOCuOOCp+OCr+ODiOmFjeWIl+OCkuS9nOaIkOOBl+OBpui/lOOBmVxyXG4gICAgLy9cclxuICAgIC8vIFtJTl1cclxuICAgIC8vICAgc3RyOiDmloflrZfliJfvvIjntKDmnZDvvIlcclxuICAgIC8vIFtPVVRdXHJcbiAgICAvLyAgIOaWh+Wtl+OCquODluOCuOOCp+OCr+ODiOmFjeWIl1xyXG4gICAgLy8gICBbXHJcbiAgICAvLyAgICAgIHtcclxuICAgIC8vICAgICAgICAgIG1vamk6ICfjgYInICAgIOODhuOCreOCueODiDHmloflrZdcclxuICAgIC8vICAgICAgICAgIHNpemVfajog5a2X6Kmw5pa55ZCR44Gu44K144Kk44K677yIMCDjga/jg4fjg5Xjgqnjg6vjg4jmloflrZfjgrXjgqTjgrrjgpLkvb/nlKjjgZnjgovjgajjgYTjgYbmhI/lkbPvvIlcclxuICAgIC8vICAgICAgICAgIHNpemVfZzog6KGM6YCB5pa55ZCR44Gu44K144Kk44K677yIMCDjga/jg4fjg5Xjgqnjg6vjg4jmloflrZfjgrXjgqTjgrrjgpLkvb/nlKjjgZnjgovjgajjgYTjgYbmhI/lkbPvvIlcclxuICAgIC8vICAgICAgICAgIGZvbnQ6IOODleOCqeODs+ODiOeVquWPt++8iDAg44Gv44OH44OV44Kp44Or44OI44OV44Kp44Oz44OI44KS5L2/55So44GZ44KL44Go44GE44GG5oSP5ZGz77yJXHJcbiAgICAvLyAgICAgIH0sXHJcbiAgICAvLyAgICAgIC4uLi4uXHJcbiAgICAvLyAgIF1cclxuICAgIC8vXHJcbiAgICBjcmVhdGVNb2ppT2JqQXJ5OiAoc3RyKSA9PiB7XHJcbiAgICAgICAgbGV0IG1vamlvYmphcnkgPSBbXTtcclxuICAgICAgICBsZXQgbW9qaW9iajtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgbW9qaSA9IHN0ci5zdWJzdHIoaSwgMSk7XHJcblxyXG4gICAgICAgICAgICBtb2ppb2JqID0ge1xyXG4gICAgICAgICAgICAgICAgbW9qaTogbW9qaSxcclxuICAgICAgICAgICAgICAgIHNpemVfajogMCxcclxuICAgICAgICAgICAgICAgIHNpemVfZzogMCxcclxuICAgICAgICAgICAgICAgIGZvbnQ6IDAsXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBpZiAobW9qaSA9PT0gJ+KYhScpIHtcclxuICAgICAgICAgICAgICAgIG1vamlvYmouc2l6ZV9qID0gMzA7XHJcbiAgICAgICAgICAgICAgICBtb2ppb2JqLnNpemVfZyA9IDMwO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBtb2ppb2JqYXJ5LnB1c2gobW9qaW9iaik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbW9qaW9iamFyeTsgXHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvL1xyXG4gICAgLy8g5oyH5a6a44Ko44Oq44Ki77yI5a2X6Kmw5pa55ZCR77yJ44Gu56+E5Zuy44Gr44CB5oyH5a6a44Gu5paH5a2X44Kq44OW44K444Kn44Kv44OI6YWN5YiX44Gu44OH44O844K/44KS5rWB44GX44Gf5aC05ZCI44CBXHJcbiAgICAvLyDkvZXmloflrZfnm67jgb7jgaflhaXjgovjgYvjga7jgqTjg7Pjg4fjg4Pjgq/jgrnjgpLov5TjgZlcclxuICAgIC8vXHJcbiAgICAvLyBbSU5dXHJcbiAgICAvLyAgIG1vamlPYmpBcnk6IOaWh+Wtl+OCquODluOCuOOCp+OCr+ODiOmFjeWIl++8iO+8keOBpOOBrue0oOadkOWFqOS9k+OBruOCguOBru+8iVxyXG4gICAgLy8gICBzdGFydDog5paH5a2X44Kq44OW44K444Kn44Kv44OI6YWN5YiX44Gu5L2V55Wq55uu44Gu5paH5a2X44GL44KJ5rWB44GZ44GT44Go44Gr44GZ44KL44Gu44GLXHJcbiAgICAvLyAgIGFyZWFzaXplX2o6IOOCqOODquOCouOBruWtl+ipsOaWueWQkeOBrumVt+OBlVxyXG4gICAgLy8gICBwYWRkaW5nX3M6IOWtl+ipsOaWueWQkeOCqOODquOCouOBrumWi+Wni+ODkeODh+OCo+ODs+OCsOWApFxyXG4gICAgLy8gICBwYWRkaW5nX2U6IOWtl+ipsOaWueWQkeOCqOODquOCouOBrue1guS6huODkeODh+OCo+ODs+OCsOWApFxyXG4gICAgLy8gICBkZWZhdWx0U2l6ZTog44OG44Kt44K544OI44OH44OV44Kp44Or44OI44K144Kk44K677yI5a2X6Kmw5pa55ZCR77yJXHJcbiAgICAvL1xyXG4gICAgLy8gW09VVF1cclxuICAgIC8vICAgWyBpbmRleCwgbm9ybWFsZ3lvIF1cclxuICAgIC8vICAgaW5kZXg6IOS9leaWh+Wtl+ebruOBvuOBp+WFpeOCi+OBi+OBruOCpOODs+ODh+ODg+OCr+OCuSAgLTE6MeaWh+Wtl+OCguWFpeOCieOBquOBhFxyXG4gICAgLy8gICBub3JtYWxneW86IDA66YCa5bi444Gu6KGM77yI6KGM5pyr5o+D44GI44GV44Gb44KL6KGM77yJXHJcbiAgICAvLyAgICAgICAgICAgICAgMTrmlofjga7pgJTkuK3jgafmlLnooYzjgZXjgozjgZ/ooYzjgb7jgZ/jga/mnIDntYLooYzvvIjooYzmnKvmj4PjgYjjgZXjgZvjgarjgY/jgabjgYTjgYTooYzvvIlcclxuICAgIC8vXHJcbiAgICBnZXRKaWR1bWVNb2ppTmFnYXNoaUluZGV4OiAoXHJcbiAgICAgICAgbW9qaU9iakFyeSxcclxuICAgICAgICBzdGFydCxcclxuICAgICAgICBhcmVhc2l6ZV9qLFxyXG4gICAgICAgIHBhZGRpbmdfcyxcclxuICAgICAgICBwYWRkaW5nX2UsXHJcbiAgICAgICAgZGVmYXVsdFNpemUsXHJcbiAgICApID0+IHtcclxuICAgICAgICBsZXQgcG9pbnRlciA9IDA7XHJcbiAgICAgICAgbGV0IHNpemU7XHJcblxyXG4gICAgICAgIHBvaW50ZXIgKz0gcGFkZGluZ19zO1xyXG5cclxuICAgICAgICBsZXQgaTtcclxuICAgICAgICBsZXQgaW5kZXg7XHJcbiAgICAgICAgbGV0IG5vcm1hbGd5byA9IDA7XHJcblxyXG4gICAgICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgbW9qaU9iakFyeS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAvLyDlrZfoqbDjgoHmlrnlkJHjga7mloflrZfjgrXjgqTjgrrjgYwgMCDjga7loLTlkIjjga/jgIHjg4fjg5Xjgqnjg6vjg4jjgrXjgqTjgrpcclxuICAgICAgICAgICAgaWYgKG1vamlPYmpBcnlbaV0uc2l6ZV9qID09IDApIHtcclxuICAgICAgICAgICAgICAgIHNpemUgPSBkZWZhdWx0U2l6ZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHNpemUgPSBtb2ppT2JqQXJ5W2ldLnNpemVfajtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKChwb2ludGVyICsgc2l6ZSkgPiAoYXJlYXNpemVfaiAtIHBhZGRpbmdfZSkpIHtcclxuICAgICAgICAgICAgICAgIC8vIOOBr+OBv+WHuuOBl+OBn+aWh+Wtl+OBjOaUueihjOOBruWgtOWQiOOBr+OAgeaUueihjOOCguWQq+OCgeOCi1xyXG4gICAgICAgICAgICAgICAgLy8g5L2G44GX44CB5pS56KGM5paH5a2X44GM5YWI6aCt44Gg44Gj44Gf5aC05ZCI77yIMeaWh+Wtl+OCguWFpeOCieOBquOBhOOCqOODquOCouOBoOOBo+OBn+WgtOWQiO+8iVxyXG4gICAgICAgICAgICAgICAgLy8g44Gv44CB5pS56KGM5paH5a2X44KS5ZCr44KB44Gq44GEXHJcbiAgICAgICAgICAgICAgICBpZiAobW9qaU9iakFyeVtpXS5tb2ppID09IFwiXFxuXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PSBzdGFydCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDmlLnooYzjgYzlhYjpoK3jga7loLTlkIhcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDmlLnooYzjgYzlhYjpoK3jgafjgarjgYTloLTlkIhcclxuICAgICAgICAgICAgICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG5vcm1hbGd5byA9IDA7ICAgIC8vIOmAmuW4uOOBruihjO+8iOihjOacq+aPg+OBiOOBleOBm+OCi+ihjO+8iVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIOaUueihjOaWh+Wtl+OBruWgtOWQiOOBr+OAgeaUueihjOaWh+Wtl+OBvuOBp+OBp+e1guOCj+OCilxyXG4gICAgICAgICAgICBpZiAobW9qaU9iakFyeVtpXS5tb2ppID09IFwiXFxuXCIpIHtcclxuICAgICAgICAgICAgICAgIGkrKztcclxuICAgICAgICAgICAgICAgIG5vcm1hbGd5byA9IDE7ICAgLy8g5paH44Gu6YCU5Lit44Gn5pS56KGM44GV44KM44Gf6KGM77yI6KGM5pyr5o+D44GI44GV44Gb44Gq44GP44Gm44GE44GE6KGM77yJXHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcG9pbnRlciArPSBzaXplO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGkgPT0gc3RhcnQpIHtcclxuICAgICAgICAgICAgaW5kZXggPSAtMTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoaSA+PSBtb2ppT2JqQXJ5Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgbm9ybWFsZ3lvID0gMTsgICAvLyDmnIDntYLooYzvvIjooYzmnKvmj4PjgYjjgZXjgZvjgarjgY/jgabjgYTjgYTooYzvvIlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpbmRleCA9IGkgLSAxO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIFtpbmRleCwgbm9ybWFsZ3lvXTtcclxuICAgIH0sXHJcblxyXG4gICAgLy9cclxuICAgIC8vIOaMh+WumuOCqOODquOCou+8iOWtl+ipsOaWueWQke+8ieOBruevhOWbsuOBq+OAgeaMh+WumuOBruaWh+Wtl+OCquODluOCuOOCp+OCr+ODiOmFjeWIl+OBruODh+ODvOOCv+OCkua1geOBl+OBn+WgtOWQiOOAgVxyXG4gICAgLy8g5paH5a2X44Gu5Lit5b+D44Gu5bqn5qiZ77yI5a2X6Kmw5pa55ZCR77yJ44Gu6YWN5YiX44KS6L+U44GZXHJcbiAgICAvLyDigLsg6YCa5bi46KGM77yI6KGM44Gu6YCU5Lit44Gn5pS56KGM44GX44Gm44GE44Gq44GE6KGM44CB44G+44Gf44Gv5pyA57WC6KGM44Gn44Gq44GE6KGM77yJ44Gu5aC05ZCI44Gr5L2/55So44GZ44KLXHJcbiAgICAvL1xyXG4gICAgLy8gW0lOXVxyXG4gICAgLy8gICBtb2ppT2JqQXJ5OiDmloflrZfjgqrjg5bjgrjjgqfjgq/jg4jphY3liJfvvIjvvJHjgaTjga7ntKDmnZDlhajkvZPjga7jgoLjga7vvIlcclxuICAgIC8vICAgaW5kZXhfczog6ZaL5aeL44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICAvLyAgIGluZGV4X2U6IOe1guS6huOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAgLy8gICBhcmVhc2l6ZV9qOiDjgqjjg6rjgqLjga7lrZfoqbDmlrnlkJHjga7plbfjgZVcclxuICAgIC8vICAgcGFkZGluZ19zOiDlrZfoqbDmlrnlkJHjgqjjg6rjgqLjga7plovlp4vjg5Hjg4fjgqPjg7PjgrDlgKRcclxuICAgIC8vICAgcGFkZGluZ19lOiDlrZfoqbDmlrnlkJHjgqjjg6rjgqLjga7ntYLkuobjg5Hjg4fjgqPjg7PjgrDlgKRcclxuICAgIC8vICAgZGVmYXVsdFNpemU6IOODhuOCreOCueODiOODh+ODleOCqeODq+ODiOOCteOCpOOCuu+8iOWtl+ipsOaWueWQke+8iVxyXG4gICAgLy9cclxuICAgIC8vIFtPVVRdXHJcbiAgICAvLyAgIOaWh+Wtl+OBruS4reW/g+W6p+aome+8iOWtl+ipsOOCgeaWueWQkeOBruOBv++8ieOBrumFjeWIl1xyXG4gICAgLy9cclxuICAgIGdldEppZHVtZUFyeTogKFxyXG4gICAgICAgIG1vamlPYmpBcnksXHJcbiAgICAgICAgaW5kZXhfcyxcclxuICAgICAgICBpbmRleF9lLFxyXG4gICAgICAgIGFyZWFzaXplX2osXHJcbiAgICAgICAgcGFkZGluZ19zLFxyXG4gICAgICAgIHBhZGRpbmdfZSxcclxuICAgICAgICBkZWZhdWx0U2l6ZVxyXG4gICAgKSA9PiB7XHJcbiAgICAgICAgLy8g44Ko44Oq44Ki44Gu6ZW344GV77yI44OR44OH44Kj44Oz44Kw44KS6Zmk44GE44Gf44KC44Gu77yJ44KS5rGC44KB44KLXHJcbiAgICAgICAgY29uc3QgYXJlYXNpemUgPSBhcmVhc2l6ZV9qIC0gKHBhZGRpbmdfcyArIHBhZGRpbmdfZSk7XHJcblxyXG4gICAgICAgIC8vIOaWh+Wtl+aVsOOCkuaxguOCgeOCi1xyXG4gICAgICAgIGxldCBtb2ppc3UgPSAwO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSBpbmRleF9zOyBpIDw9IGluZGV4X2U7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAobW9qaU9iakFyeVtpXS5tb2ppICE9IFwiXFxuXCIpIHtcclxuICAgICAgICAgICAgICAgIG1vamlzdSsrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDmloflrZfliJflhajkvZPjgpLotrPjgZfjgZ/plbfjgZXjgpLmsYLjgoHjgotcclxuICAgICAgICBsZXQgbW9qaWxlbiA9IDA7XHJcbiAgICAgICAgbGV0IHNpemU7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IGluZGV4X3M7IGkgPD0gaW5kZXhfZTsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChtb2ppT2JqQXJ5W2ldLnNpemVfaiA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBzaXplID0gZGVmYXVsdFNpemU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzaXplID0gbW9qaU9iakFyeVtpXS5zaXplX2o7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChtb2ppT2JqQXJ5W2ldLm1vamkgIT0gXCJcXG5cIikge1xyXG4gICAgICAgICAgICAgICAgbW9qaWxlbiArPSBzaXplO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDmloflrZfplpPjgrnjg5rjg7zjgrnjgpLmsYLjgoHjgotcclxuICAgICAgICBjb25zdCBhbWFyaSA9IGFyZWFzaXplIC0gbW9qaWxlbjtcclxuICAgICAgICBjb25zdCBtYXJnaW4gPSBhbWFyaSAvIChtb2ppc3UgLSAxKTtcclxuXHJcbiAgICAgICAgLy8g5Lit5b+D5bqn5qiZ77yI5a2X6Kmw5pa55ZCR44Gu44G/77yJ6YWN5YiX44KS5L2c5oiQ44GZ44KLXHJcbiAgICAgICAgbGV0IGNlbnRlckFyeSA9IFtdO1xyXG4gICAgICAgIGxldCBwb2ludGVyID0gMDtcclxuICAgICAgICBwb2ludGVyICs9IHBhZGRpbmdfcztcclxuICAgICAgICBmb3IgKGxldCBpID0gaW5kZXhfczsgaSA8PSBpbmRleF9lOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKG1vamlPYmpBcnlbaV0ubW9qaSA9PSBcIlxcblwiKSB7XHJcbiAgICAgICAgICAgICAgICBjZW50ZXJBcnkucHVzaCgwKTtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiAobW9qaU9iakFyeVtpXS5zaXplX2ogPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgc2l6ZSA9IGRlZmF1bHRTaXplO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc2l6ZSA9IG1vamlPYmpBcnlbaV0uc2l6ZV9qO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjZW50ZXJBcnkucHVzaChwb2ludGVyICsgKHNpemUgLyAyKSk7XHJcblxyXG4gICAgICAgICAgICBwb2ludGVyICs9IHNpemU7XHJcbiAgICAgICAgICAgIHBvaW50ZXIgKz0gbWFyZ2luO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGNlbnRlckFyeTsgICAgICAgIFxyXG4gICAgfSxcclxuXHJcbiAgICAvL1xyXG4gICAgLy8g5oyH5a6a44Ko44Oq44Ki77yI5a2X6Kmw5pa55ZCR77yJ44Gu56+E5Zuy44Gr44CB5oyH5a6a44Gu5paH5a2X44Kq44OW44K444Kn44Kv44OI6YWN5YiX44Gu44OH44O844K/44KS5rWB44GX44Gf5aC05ZCI44CBXHJcbiAgICAvLyDmloflrZfjga7kuK3lv4Pjga7luqfmqJnvvIjlrZfoqbDmlrnlkJHvvInjga7phY3liJfjgpLov5TjgZlcclxuICAgIC8vIOKAuyDmlofjga7pgJTkuK3jgafmlLnooYzjgZfjgabjgYTjgovooYzjgIHjgb7jgZ/jga/mnIDntYLooYzjga7loLTlkIjjgavkvb/nlKjjgZnjgotcclxuICAgIC8vXHJcbiAgICAvLyBbSU5dXHJcbiAgICAvLyAgIG1vamlPYmpBcnk6IOaWh+Wtl+OCquODluOCuOOCp+OCr+ODiOmFjeWIl++8iOa1geOBmeOCguOBruOBruOBv+OBrumFjeWIl++8iVxyXG4gICAgLy8gICBpbmRleF9zOiDplovlp4vjgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgIC8vICAgaW5kZXhfZTog57WC5LqG44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICAvLyAgIHBhZGRpbmdfczog5a2X6Kmw5pa55ZCR44Ko44Oq44Ki44Gu6ZaL5aeL44OR44OH44Kj44Oz44Kw5YCkXHJcbiAgICAvLyAgIGRlZmF1bHRTaXplOiDjg4bjgq3jgrnjg4jjg4fjg5Xjgqnjg6vjg4jjgrXjgqTjgrrvvIjlrZfoqbDmlrnlkJHvvIlcclxuICAgIC8vXHJcbiAgICAvLyBbT1VUXVxyXG4gICAgLy8gICDmloflrZfjga7kuK3lv4PluqfmqJnvvIjlrZfoqbDmlrnlkJHjga7jgb/vvInjga7phY3liJdcclxuICAgIC8vXHJcbiAgICBnZXRKaWR1bWVBcnlTb3JvZU5hc2hpOiAoXHJcbiAgICAgICAgbW9qaU9iakFyeSxcclxuICAgICAgICBpbmRleF9zLFxyXG4gICAgICAgIGluZGV4X2UsXHJcbiAgICAgICAgcGFkZGluZ19zLFxyXG4gICAgICAgIGRlZmF1bHRTaXplXHJcbiAgICApID0+IHtcclxuICAgICAgICAvLyDmloflrZfmlbDjgpLmsYLjgoHjgotcclxuICAgICAgICBsZXQgbW9qaXN1ID0gMDtcclxuICAgICAgICBmb3IgKGxldCBpID0gaW5kZXhfczsgaSA8PSBpbmRleF9lOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKG1vamlPYmpBcnlbaV0ubW9qaSAhPSBcIlxcblwiKSB7XHJcbiAgICAgICAgICAgICAgIG1vamlzdSsrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDkuK3lv4PluqfmqJnvvIjlrZfoqbDmlrnlkJHjga7jgb/vvInphY3liJfjgpLkvZzmiJDjgZnjgotcclxuICAgICAgICBsZXQgY2VudGVyQXJ5ID0gW107XHJcbiAgICAgICAgbGV0IHBvaW50ZXIgPSAwO1xyXG4gICAgICAgIHBvaW50ZXIgKz0gcGFkZGluZ19zO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSBpbmRleF9zOyBpIDw9IGluZGV4X2U7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAobW9qaU9iakFyeVtpXS5tb2ppID09IFwiXFxuXCIpIHtcclxuICAgICAgICAgICAgICAgIGNlbnRlckFyeS5wdXNoKDApO1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICBcclxuICAgICAgICAgICAgbGV0IHNpemU7XHJcbiAgICAgICAgICAgIGlmIChtb2ppT2JqQXJ5W2ldLnNpemVfaiA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBzaXplID0gZGVmYXVsdFNpemU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzaXplID0gbW9qaU9iakFyeVtpXS5zaXplX2o7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNlbnRlckFyeS5wdXNoKHBvaW50ZXIgKyAoc2l6ZSAvIDIpKTtcclxuXHJcbiAgICAgICAgICAgIHBvaW50ZXIgKz0gc2l6ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBjZW50ZXJBcnk7ICAgICAgICBcclxuICAgIH0sXHJcbiAgICBcclxuICAgIC8vXHJcbiAgICAvLyDmloflrZfjgqrjg5bjgrjjgqfjgq/jg4jphY3liJfjgavjgYrjgYTjgabjgIHmrovjgorlhajooYzjga7plovlp4vjgqTjg7Pjg4fjg4Pjgq/jgrnjg7vntYLkuobjgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgIC8vIOOBruOCquODluOCuOOCp+OCr+ODiOmFjeWIl+OCkui/lOOBmVxyXG4gICAgLy9cclxuICAgIC8vIFtJTl1cclxuICAgIC8vICAgbW9qaU9iakFyeTog5paH5a2X44Kq44OW44K444Kn44Kv44OI6YWN5YiX77yI77yR44Gk44Gu57Sg5p2Q5YWo5L2T44Gu44KC44Gu77yJXHJcbiAgICAvLyAgIHN0YXJ0OiDplovlp4vjgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgIC8vICAgYXJlYXNpemVfajog44Ko44Oq44Ki44Gu5a2X6Kmw5pa55ZCR44Gu6ZW344GVXHJcbiAgICAvLyAgIHBhZGRpbmdfczog5a2X6Kmw5pa55ZCR44Ko44Oq44Ki44Gu6ZaL5aeL44OR44OH44Kj44Oz44Kw5YCkXHJcbiAgICAvLyAgIHBhZGRpbmdfZTog5a2X6Kmw5pa55ZCR44Ko44Oq44Ki44Gu57WC5LqG44OR44OH44Kj44Oz44Kw5YCkXHJcbiAgICAvLyAgIGRlZmF1bHRTaXplOiDjg4bjgq3jgrnjg4jjg4fjg5Xjgqnjg6vjg4jjgrXjgqTjgrrvvIjlrZfoqbDmlrnlkJHvvIlcclxuICAgIC8vXHJcbiAgICAvLyBbT1VUXVxyXG4gICAgLy8gICDlhajooYzjga7plovlp4vjgqTjg7Pjg4fjg4Pjgq/jgrnjg7vntYLkuobjgqTjg7Pjg4fjg4Pjgq/jgrnjga7jgqrjg5bjgrjjgqfjgq/jg4jphY3liJdcclxuICAgIC8vICAgW1xyXG4gICAgLy8gICAgICAge1xyXG4gICAgLy8gICAgICAgICAgIHM6IOmWi+Wni+OCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAgLy8gICAgICAgICAgIGU6IOe1guS6huOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAgLy8gICAgICAgICAgIG5vcm1hbGd5bzogMDrpgJrluLjooYzvvIjooYzmnKvmj4PjgYjjgZnjgovooYzvvIkgMTrooYzmnKvmj4PjgYjjgZXjgZvjgarjgY/jgabjgYTjgYTooYxcclxuICAgIC8vICAgICAgIH0sXHJcbiAgICAvLyAgICAgICAuLi4uXHJcbiAgICAvLyAgIF1cclxuICAgIC8vXHJcbiAgICBnZXRaZW5HeW9JbmRleEFyeTogKFxyXG4gICAgICAgIG1vamlPYmpBcnksXHJcbiAgICAgICAgc3RhcnQsXHJcbiAgICAgICAgYXJlYXNpemVfaixcclxuICAgICAgICBwYWRkaW5nX3MsXHJcbiAgICAgICAgcGFkZGluZ19lLFxyXG4gICAgICAgIGRlZmF1bHRTaXplXHJcbiAgICApID0+IHtcclxuICAgICAgICBsZXQgaW5kZXhBcnkgPSBbXTtcclxuICAgICAgICBsZXQgaW5kZXhPYmogPSB7fTtcclxuXHJcbiAgICAgICAgaWYgKG1vamlPYmpBcnkubGVuZ3RoIDw9IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGluZGV4QXJ5O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgd2hpbGUgKDEpIHtcclxuICAgICAgICAgICAgLy8g5LiA6KGM5paH44Gu44Kk44Oz44OH44OD44Kv44K55YCk44KS5b6X44KLXHJcbiAgICAgICAgICAgIGxldCBbZW5kLCBub3JtYWxneW9dID0gVGV4dC5nZXRKaWR1bWVNb2ppTmFnYXNoaUluZGV4KFxyXG4gICAgICAgICAgICAgICAgbW9qaU9iakFyeSxcclxuICAgICAgICAgICAgICAgIHN0YXJ0LFxyXG4gICAgICAgICAgICAgICAgYXJlYXNpemVfaixcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfcyxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfZSxcclxuICAgICAgICAgICAgICAgIGRlZmF1bHRTaXplXHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICAvLyAx5paH5a2X44KC5YWl44KJ44Gq44GL44Gj44Gf5aC05ZCI44Gv5oqc44GR44KLXHJcbiAgICAgICAgICAgIGlmIChlbmQgPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpbmRleE9iaiA9IHtcclxuICAgICAgICAgICAgICAgIHM6IHN0YXJ0LFxyXG4gICAgICAgICAgICAgICAgZTogZW5kLFxyXG4gICAgICAgICAgICAgICAgbm9ybWFsZ3lvOiBub3JtYWxneW8sXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGluZGV4QXJ5LnB1c2goaW5kZXhPYmopO1xyXG5cclxuICAgICAgICAgICAgLy8g57WC5LqG44Kk44Oz44OH44OD44Kv44K544GM5pyA5b6M44Gu5paH5a2X44Gq44KJ5oqc44GR44KLXHJcbiAgICAgICAgICAgIGlmIChlbmQgPj0gbW9qaU9iakFyeS5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc3RhcnQgPSBlbmQgKyAxO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGluZGV4QXJ5O1xyXG4gICAgfSxcclxuXHJcbiAgICAvL1xyXG4gICAgLy8g5oyH5a6a44Gu6ZaL5aeL44Kk44Oz44OH44OD44Kv44K544GL44KJ57WC5LqG44Kk44Oz44OH44OD44Kv44K544G+44Gn44Gu5paH5a2X5YiX44Gu6KGM6YCB5pa55ZCR44Gu5pyA5aSn5bmF44KS6L+U44GZXHJcbiAgICAvL1xyXG4gICAgLy8gW0lOXVxyXG4gICAgLy8gICBtb2ppT2JqQXJ5OiDmloflrZfjgqrjg5bjgrjjgqfjgq/jg4jphY3liJfvvIjvvJHjgaTjga7ntKDmnZDlhajkvZPjga7jgoLjga7vvIlcclxuICAgIC8vICAgaW5kZXhfczog6ZaL5aeL44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICAvLyAgIGluZGV4X2U6IOe1guS6huOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAgLy8gICBkZWZhdWx0U2l6ZTog44OH44OV44Kp44Or44OI44Gu6KGM6YCB5pa55ZCR44K144Kk44K6XHJcbiAgICAvL1xyXG4gICAgLy8gW09VVF1cclxuICAgIC8vICAg5pyA5aSn5bmFXHJcbiAgICAvL1xyXG4gICAgbWF4U2l6ZUd5b09rdXJpOiAoXHJcbiAgICAgICAgbW9qaU9iakFyeSxcclxuICAgICAgICBpbmRleF9zLFxyXG4gICAgICAgIGluZGV4X2UsXHJcbiAgICAgICAgZGVmYXVsdFNpemVcclxuICAgICkgPT4ge1xyXG4gICAgICAgIGxldCBtYXggPSAwO1xyXG4gICAgICAgIGxldCBzaXplO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gaW5kZXhfczsgaSA8PSBpbmRleF9lOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKG1vamlPYmpBcnlbaV0uc2l6ZV9nID09IDApIHtcclxuICAgICAgICAgICAgICAgIHNpemUgPSBkZWZhdWx0U2l6ZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHNpemUgPSBtb2ppT2JqQXJ5W2ldLnNpemVfZztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKG1heCA8IHNpemUpIHtcclxuICAgICAgICAgICAgICAgIG1heCA9IHNpemU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBtYXg7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vXHJcbiAgICAvLyDmjIflrprjgqjjg6rjgqLvvIjooYzpgIHmlrnlkJHvvInjga7nr4Tlm7LjgavjgIHmjIflrprjga7mloflrZfjgqrjg5bjgrjjgqfjgq/jg4jphY3liJfjga7jg4fjg7zjgr/jgpLmtYHjgZfjgZ/loLTlkIjjgIFcclxuICAgIC8vIOaWh+Wtl+OBruS4reW/g+OBruW6p+aome+8iOihjOmAgeaWueWQke+8ieOBrumFjeWIl+OCkui/lOOBmVxyXG4gICAgLy9cclxuICAgIC8vIFtJTl1cclxuICAgIC8vICAgbW9qaU9iakFyeTog5paH5a2X44Kq44OW44K444Kn44Kv44OI6YWN5YiX77yI77yR44Gk44Gu57Sg5p2Q5YWo5L2T44Gu44KC44Gu77yJXHJcbiAgICAvLyAgIHN0YXJ0OiDplovlp4vjgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgIC8vICAgYXJlYXNpemVfajog44Ko44Oq44Ki44Gu5a2X6Kmw5pa55ZCR44Gu6ZW344GVXHJcbiAgICAvLyAgIGFyZWFzaXplX2c6IOOCqOODquOCouOBruihjOmAgeaWueWQkeOBrumVt+OBlVxyXG4gICAgLy8gICBwYWRkaW5nX2pzOiDlrZfoqbDmlrnlkJHjgqjjg6rjgqLjga7plovlp4vjg5Hjg4fjgqPjg7PjgrDlgKRcclxuICAgIC8vICAgcGFkZGluZ19qZTog5a2X6Kmw5pa55ZCR44Ko44Oq44Ki44Gu57WC5LqG44OR44OH44Kj44Oz44Kw5YCkXHJcbiAgICAvLyAgIHBhZGRpbmdfZ3M6IOihjOmAgeaWueWQkeOCqOODquOCouOBrumWi+Wni+ODkeODh+OCo+ODs+OCsOWApFxyXG4gICAgLy8gICBwYWRkaW5nX2dlOiDooYzpgIHmlrnlkJHjgqjjg6rjgqLjga7ntYLkuobjg5Hjg4fjgqPjg7PjgrDlgKRcclxuICAgIC8vICAgc2l6ZV9qOiDjg4fjg5Xjgqnjg6vjg4jmloflrZfjgrXjgqTjgrrvvIjlrZfoqbDmlrnlkJHvvIlcclxuICAgIC8vICAgc2l6ZV9nOiDjg4fjg5Xjgqnjg6vjg4jmloflrZfjgrXjgqTjgrrvvIjooYzpgIHmlrnlkJHvvIlcclxuICAgIC8vICAgZ3lva2FuOiDooYzplpPjgrXjgqTjgrpcclxuICAgIC8vXHJcbiAgICAvLyBbT1VUXVxyXG4gICAgLy8gICDmloflrZfjga7kuK3lv4PluqfmqJnvvIjooYzpgIHmlrnlkJHjga7jgb/vvInjga7phY3liJdcclxuICAgIC8vXHJcbiAgICBnZXRHeW9va3VyaUFyeTogKFxyXG4gICAgICAgIG1vamlPYmpBcnksXHJcbiAgICAgICAgc3RhcnQsXHJcbiAgICAgICAgYXJlYXNpemVfaixcclxuICAgICAgICBhcmVhc2l6ZV9nLFxyXG4gICAgICAgIHBhZGRpbmdfanMsXHJcbiAgICAgICAgcGFkZGluZ19qZSxcclxuICAgICAgICBwYWRkaW5nX2dzLFxyXG4gICAgICAgIHBhZGRpbmdfZ2UsXHJcbiAgICAgICAgc2l6ZV9qLFxyXG4gICAgICAgIHNpemVfZyxcclxuICAgICAgICBneW9rYW5cclxuICAgICkgPT4ge1xyXG4gICAgICAgIGxldCBjZW50ZXJBcnkgPSBbXTtcclxuICAgICAgICBsZXQgbWF4X3dpZHRoID0gMDtcclxuXHJcbiAgICAgICAgLy8g5rWB44GX44Gf5aC05ZCI44Gu6KGM5Y2Y5L2N44Kk44Oz44OH44OD44Kv44K56YWN5YiX44KS5Y+W5b6X44GZ44KLXHJcbiAgICAgICAgY29uc3QgZ3lvSW5kZXhBcnkgPSBUZXh0LmdldFplbkd5b0luZGV4QXJ5KFxyXG4gICAgICAgICAgICBtb2ppT2JqQXJ5LFxyXG4gICAgICAgICAgICBzdGFydCxcclxuICAgICAgICAgICAgYXJlYXNpemVfaixcclxuICAgICAgICAgICAgcGFkZGluZ19qcyxcclxuICAgICAgICAgICAgcGFkZGluZ19qZSxcclxuICAgICAgICAgICAgc2l6ZV9qXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgbGV0IHBvaW50ZXIgPSAwO1xyXG4gICAgICAgIHBvaW50ZXIgKz0gcGFkZGluZ19ncztcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGd5b0luZGV4QXJ5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIC8vIOihjOOBruacgOWkp+W5heOCkuW+l+OCi1xyXG4gICAgICAgICAgICBtYXhfd2lkdGggPSBUZXh0Lm1heFNpemVHeW9Pa3VyaShcclxuICAgICAgICAgICAgICAgIG1vamlPYmpBcnksXHJcbiAgICAgICAgICAgICAgICBneW9JbmRleEFyeVtpXS5zLFxyXG4gICAgICAgICAgICAgICAgZ3lvSW5kZXhBcnlbaV0uZSxcclxuICAgICAgICAgICAgICAgIHNpemVfZ1xyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgaWYgKChwb2ludGVyICsgbWF4X3dpZHRoKSA+IChhcmVhc2l6ZV9nIC0gcGFkZGluZ19nZSkpIHtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjZW50ZXJBcnkucHVzaChwb2ludGVyICsgKG1heF93aWR0aCAvIDIpKTtcclxuXHJcbiAgICAgICAgICAgIHBvaW50ZXIgKz0gbWF4X3dpZHRoO1xyXG4gICAgICAgICAgICBwb2ludGVyICs9IGd5b2thbjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBjZW50ZXJBcnk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vXHJcbiAgICAvLyDmjIflrprjgqjjg6rjgqLjgavmloflrZfliJfjgpLmtYHjgZfjgZ/pmpvjga7kuK3lv4PluqfmqJkgW+Wtl+ipsOOCgeaWueWQkeW6p+aomSwg6KGM6YCB44KK5pa55ZCR5bqn5qiZXSDjga7phY3liJfjgpLov5TjgZlcclxuICAgIC8vXHJcbiAgICAvLyBbSU5dXHJcbiAgICAvLyAgIG1vamlPYmpBcnk6IOaWh+Wtl+OCquODluOCuOOCp+OCr+ODiOmFjeWIl++8iO+8keOBpOOBrue0oOadkOWFqOS9k+OBruOCguOBru+8iVxyXG4gICAgLy8gICBzdGFydDog6ZaL5aeL44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICAvLyAgIGFyZWFzaXplX2o6IOWtl+ipsOaWueWQkeOBruOCqOODquOCouOCteOCpOOCulxyXG4gICAgLy8gICBhcmVhc2l6ZV9nOiDooYzpgIHmlrnlkJHjga7jgqjjg6rjgqLjgrXjgqTjgrpcclxuICAgIC8vICAgcGFkZGluZ19qczog5a2X6Kmw5pa55ZCR44Gu6ZaL5aeL44OR44OH44Kj44Oz44Kw5YCkXHJcbiAgICAvLyAgIHBhZGRpbmdfamU6IOWtl+ipsOaWueWQkeOBrue1guS6huODkeODh+OCo+ODs+OCsOWApFxyXG4gICAgLy8gICBwYWRkaW5nX2dzOiDooYzpgIHmlrnlkJHjga7plovlp4vjg5Hjg4fjgqPjg7PjgrDlgKRcclxuICAgIC8vICAgcGFkZGluZ19nZTog6KGM6YCB5pa55ZCR44Gu57WC5LqG44OR44OH44Kj44Oz44Kw5YCkXHJcbiAgICAvLyAgIHNpemVfajog44OH44OV44Kp44Or44OI5paH5a2X44K144Kk44K677yI5a2X6Kmw44KB5pa55ZCR77yJXHJcbiAgICAvLyAgIHNpemVfZzog44OH44OV44Kp44Or44OI5paH5a2X44K144Kk44K677yI6KGM6YCB44KK5pa55ZCR77yJXHJcbiAgICAvLyAgIGd5b2thbjog6KGM6ZaT44K144Kk44K6IFxyXG4gICAgLy9cclxuICAgIC8vIFtPVVRdXHJcbiAgICAvLyAgIFsg5Lit5b+D5bqn5qiZ6YWN5YiXLCDntYLkuobjgqTjg7Pjg4fjg4Pjgq/jgrkgXVxyXG4gICAgLy8gICBcclxuICAgIC8vICAgICAgIOS4reW/g+W6p+aomemFjeWIl++8mlxyXG4gICAgLy8gICAgICAgICBbXHJcbiAgICAvLyAgICAgICAgICAgICBb5a2X6Kmw44KB5pa55ZCR5bqn5qiZLCDooYzpgIHjgormlrnlkJHluqfmqJldLCAgIDwtLS0tIOaWh+Wtl+OBruS4reW/g+W6p+aomVxyXG4gICAgLy8gICAgICAgICAgICAgW+Wtl+ipsOOCgeaWueWQkeW6p+aomSwg6KGM6YCB44KK5pa55ZCR5bqn5qiZXSxcclxuICAgIC8vICAgICAgICAgICAgIC4uLi5cclxuICAgIC8vICAgICAgICAgXSBcclxuICAgIC8vICAgICAgIOe1guS6huOCpOODs+ODh+ODg+OCr+OCue+8mlxyXG4gICAgLy8gICAgICAgICAtMTogMeaWh+Wtl+OCgua1geOBm+OBquOBi+OBo+OBnyAgXHJcbiAgICAvL1xyXG4gICAgZ2V0TmFnYXNoaUNlbnRlckFyeTogKFxyXG4gICAgICAgIG1vamlPYmpBcnksXHJcbiAgICAgICAgc3RhcnQsXHJcbiAgICAgICAgYXJlYXNpemVfaixcclxuICAgICAgICBhcmVhc2l6ZV9nLFxyXG4gICAgICAgIHBhZGRpbmdfanMsXHJcbiAgICAgICAgcGFkZGluZ19qZSxcclxuICAgICAgICBwYWRkaW5nX2dzLFxyXG4gICAgICAgIHBhZGRpbmdfZ2UsXHJcbiAgICAgICAgc2l6ZV9qLFxyXG4gICAgICAgIHNpemVfZyxcclxuICAgICAgICBneW9rYW5cclxuICAgICkgPT4ge1xyXG4gICAgICAgIGxldCBjZW50ZXJBcnkgPSBbXTtcclxuXHJcbiAgICAgICAgLy8g5b2T44Ko44Oq44Ki44Gr5paH5a2X5YiX44KS5rWB44GX44Gf5aC05ZCI44Gu6KGM5Y2Y5L2N44Kk44Oz44OH44OD44Kv44K55oOF5aCx44KS5b6X44KLXHJcbiAgICAgICAgY29uc3QgemVuR3lvSW5kZXhBcnkgPSBUZXh0LmdldFplbkd5b0luZGV4QXJ5KFxyXG4gICAgICAgICAgICBtb2ppT2JqQXJ5LFxyXG4gICAgICAgICAgICBzdGFydCxcclxuICAgICAgICAgICAgYXJlYXNpemVfaixcclxuICAgICAgICAgICAgcGFkZGluZ19qcyxcclxuICAgICAgICAgICAgcGFkZGluZ19qZSxcclxuICAgICAgICAgICAgc2l6ZV9qLFxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIC8vIOaWh+Wtl+OBruS4reW/g+OBruW6p+aome+8iOihjOmAgeaWueWQke+8ieOBrumFjeWIl+OCkuW+l+OCi1xyXG4gICAgICAgIGNvbnN0IGd5b29rdXJpQXJ5ID0gVGV4dC5nZXRHeW9va3VyaUFyeShcclxuICAgICAgICAgICAgbW9qaU9iakFyeSxcclxuICAgICAgICAgICAgc3RhcnQsXHJcbiAgICAgICAgICAgIGFyZWFzaXplX2osXHJcbiAgICAgICAgICAgIGFyZWFzaXplX2csXHJcbiAgICAgICAgICAgIHBhZGRpbmdfanMsXHJcbiAgICAgICAgICAgIHBhZGRpbmdfamUsXHJcbiAgICAgICAgICAgIHBhZGRpbmdfZ3MsXHJcbiAgICAgICAgICAgIHBhZGRpbmdfZ2UsXHJcbiAgICAgICAgICAgIHNpemVfaixcclxuICAgICAgICAgICAgc2l6ZV9nLFxyXG4gICAgICAgICAgICBneW9rYW5cclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBsZXQgamlkdW1lQXJ5O1xyXG5cclxuICAgICAgICBjb25zdCB6ZW5HeW9JbmRleEFyeUxlbiA9IHplbkd5b0luZGV4QXJ5Lmxlbmd0aDtcclxuICAgICAgICBjb25zdCBneW9va3VyaUFyeUxlbiA9IGd5b29rdXJpQXJ5Lmxlbmd0aDtcclxuXHJcbiAgICAgICAgLy8g5q6L44KK44Gu6KGM5pWw44Go5b2T44Ko44Oq44Ki44Gu6KGM5pWw44Gu5bCR44Gq44GE5pa544KS5b6X44KLXHJcbiAgICAgICAgbGV0IGNvdW50ID0gMDtcclxuICAgICAgICBpZiAoemVuR3lvSW5kZXhBcnlMZW4gPCBneW9va3VyaUFyeUxlbikge1xyXG4gICAgICAgICAgICBjb3VudCA9IHplbkd5b0luZGV4QXJ5TGVuO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvdW50ID0gZ3lvb2t1cmlBcnlMZW47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgZywgajtcclxuICAgICAgICBmb3IgKGcgPSAwOyBnIDwgY291bnQ7IGcrKykge1xyXG4gICAgICAgICAgICBpZiAoemVuR3lvSW5kZXhBcnlbZ10ubm9ybWFsZ3lvID09IDApIHtcclxuICAgICAgICAgICAgICAgIGppZHVtZUFyeSA9IFRleHQuZ2V0SmlkdW1lQXJ5KFxyXG4gICAgICAgICAgICAgICAgICAgIG1vamlPYmpBcnksXHJcbiAgICAgICAgICAgICAgICAgICAgemVuR3lvSW5kZXhBcnlbZ10ucyxcclxuICAgICAgICAgICAgICAgICAgICB6ZW5HeW9JbmRleEFyeVtnXS5lLFxyXG4gICAgICAgICAgICAgICAgICAgIGFyZWFzaXplX2osXHJcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZ19qcyxcclxuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nX2plLFxyXG4gICAgICAgICAgICAgICAgICAgIHNpemVfalxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGppZHVtZUFyeSA9IFRleHQuZ2V0SmlkdW1lQXJ5U29yb2VOYXNoaShcclxuICAgICAgICAgICAgICAgICAgICBtb2ppT2JqQXJ5LFxyXG4gICAgICAgICAgICAgICAgICAgIHplbkd5b0luZGV4QXJ5W2ddLnMsXHJcbiAgICAgICAgICAgICAgICAgICAgemVuR3lvSW5kZXhBcnlbZ10uZSxcclxuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nX2pzLFxyXG4gICAgICAgICAgICAgICAgICAgIHNpemVfalxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IGppZHVtZUFyeS5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICAgICAgY2VudGVyQXJ5LnB1c2goW2ppZHVtZUFyeVtqXSwgZ3lvb2t1cmlBcnlbZ11dKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8g57WC5LqG44Kk44Oz44OH44OD44Kv44K544KS5b6X44KLXHJcbiAgICAgICAgbGV0IGVuZF9pbmRleDtcclxuICAgICAgICBpZiAoZyA8PSAwKSB7XHJcbiAgICAgICAgICAgIGVuZF9pbmRleCA9IC0xO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGVuZF9pbmRleCA9IHplbkd5b0luZGV4QXJ5W2cgLSAxXS5lO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIFtjZW50ZXJBcnksIGVuZF9pbmRleF07XHJcbiAgICB9LFxyXG5cclxuICAgIC8vXHJcbiAgICAvLyDmloflrZfmtYHjgZfntZDmnpzmg4XloLHvvIjjgqrjg5bjgrjjgqfjgq/jg4jjga7phY3liJfvvInjgpLov5TjgZlcclxuICAgIC8vXHJcbiAgICAvLyBbSU5dXHJcbiAgICAvLyAgIGNlbnRlckFyeTog5paH5a2X5Lit5b+D5bqn5qiZ6YWN5YiXXHJcbiAgICAvLyAgIG1vamlPYmpBcnk6IOaWh+Wtl+OCquODluOCuOOCp+OCr+ODiOmFjeWIl++8iO+8keOBpOOBrue0oOadkOWFqOS9k+OBruOCguOBru+8iVxyXG4gICAgLy8gICBzdGFydDog6ZaL5aeL44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICAvL1xyXG4gICAgLy8gW09VVF1cclxuICAgIC8vICAg5rWB44GX57WQ5p6c6YWN5YiXXHJcbiAgICAvLyAgICAgIFtcclxuICAgIC8vICAgICAgICAgIHtcclxuICAgIC8vICAgICAgICAgICAgICAgbW9qaTogJ+OBgicgICDmloflrZdcclxuICAgIC8vICAgICAgICAgICAgICAgc2l6ZV9qOiDmloflrZfjgrXjgqTjgrrvvIgwOuODh+ODleOCqeODq+ODiOOCteOCpOOCuu+8iVxyXG4gICAgLy8gICAgICAgICAgICAgICBzaXplX2c6IOaWh+Wtl+OCteOCpOOCuu+8iDA644OH44OV44Kp44Or44OI44K144Kk44K677yJXHJcbiAgICAvLyAgICAgICAgICAgICAgIGo6IOS4reW/g+W6p+aome+8iOWtl+ipsOaWueWQke+8iVxyXG4gICAgLy8gICAgICAgICAgICAgICBnOiDkuK3lv4PluqfmqJnvvIjooYzpgIHmlrnlkJHvvIlcclxuICAgIC8vICAgICAgICAgIH0sXHJcbiAgICAvLyAgICAgICAgICAuLi4uLi5cclxuICAgIC8vICAgICAgXVxyXG4gICAgLy9cclxuICAgIG5hZ2FzaGlSZXN1bHQ6IChcclxuICAgICAgICBjZW50ZXJBcnksXHJcbiAgICAgICAgbW9qaU9iakFyeSxcclxuICAgICAgICBzdGFydFxyXG4gICAgKSA9PiB7XHJcbiAgICAgICAgbGV0IG5hZ2FzaGlBcnkgPSBbXTtcclxuICAgICAgICBsZXQgb2JqID0ge307XHJcblxyXG4gICAgICAgIGxldCBtb2ppX2kgPSBzdGFydDtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjZW50ZXJBcnkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgb2JqID0ge1xyXG4gICAgICAgICAgICAgICAgbW9qaTogbW9qaU9iakFyeVttb2ppX2ldLm1vamksXHJcbiAgICAgICAgICAgICAgICBzaXplX2o6IG1vamlPYmpBcnlbbW9qaV9pXS5zaXplX2osXHJcbiAgICAgICAgICAgICAgICBzaXplX2c6IG1vamlPYmpBcnlbbW9qaV9pXS5zaXplX2csXHJcbiAgICAgICAgICAgICAgICBqOiBjZW50ZXJBcnlbaV1bMF0sXHJcbiAgICAgICAgICAgICAgICBnOiBjZW50ZXJBcnlbaV1bMV0sXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBuYWdhc2hpQXJ5LnB1c2gob2JqKTtcclxuXHJcbiAgICAgICAgICAgIG1vamlfaSsrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG5hZ2FzaGlBcnk7XHJcbiAgICB9XHJcbn1cclxuIiwiZXhwb3J0IGNvbnN0IFNBR0FfVE9PTEJPWF9NT1ZFRU5EID0gJ1NBR0FfVE9PTEJPWF9NT1ZFRU5EJztcclxuXHJcblxyXG5leHBvcnQgY29uc3QgU2FnYV9Ub29sQm94X01vdmVFbmQgPSAocGF5bG9hZCA9IHt9KSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHR5cGU6IFNBR0FfVE9PTEJPWF9NT1ZFRU5ELFxyXG4gICAgICAgIHBheWxvYWQ6IHtcclxuICAgICAgICAgICAgdG9vbGJveF9pZDogcGF5bG9hZC50b29sYm94X2lkLFxyXG4gICAgICAgICAgICB4OiAgcGF5bG9hZC54LFxyXG4gICAgICAgICAgICB5OiAgcGF5bG9hZC55LFxyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XHJcbiIsImV4cG9ydCBjb25zdCBTQUdBX1RPT0xCT1hURVhUREFUQV9URVhUREFUQV9VUERBVEUgPSAnU0FHQV9UT09MQk9YVEVYVERBVEFfVEVYVERBVEFfVVBEQVRFJztcclxuXHJcblxyXG5leHBvcnQgY29uc3QgU2FnYV9Ub29sQm94VGV4dERhdGFfVGV4dERhdGFfVXBkYXRlID0gKHBheWxvYWQgPSB7fSkgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiBTQUdBX1RPT0xCT1hURVhUREFUQV9URVhUREFUQV9VUERBVEUsXHJcbiAgICAgICAgcGF5bG9hZDoge1xyXG4gICAgICAgICAgICBib3g6IHBheWxvYWQuYm94LFxyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XHJcblxyXG4iLCIvL1xyXG4vLyDjg4bjgq3jgrnjg4jjgrDjg6rjg4Pjg4nns7tcclxuLy9cclxuXHJcbmV4cG9ydCBjb25zdCBUZXh0R3JpZCA9IHtcclxuICAgIC8vXHJcbiAgICAvLyDjg4bjgq3jgrnjg4jjgrDjg6rjg4Pjg4njga7kuK3lv4PluqfmqJkgW+Wtl+ipsOOCgeaWueWQkeW6p+aomSwg6KGM6YCB44KK5pa55ZCR5bqn5qiZXSDjga7phY3liJfjgpLov5TjgZlcclxuICAgIC8vXHJcbiAgICAvLyBbSU5dXHJcbiAgICAvLyAgIGFyZWFzaXplX2o6IOWtl+ipsOOCgeaWueWQkeOBruOCqOODquOCouOCteOCpOOCulxyXG4gICAgLy8gICBhcmVhc2l6ZV9nOiDooYzpgIHjgormlrnlkJHjga7jgqjjg6rjgqLjgrXjgqTjgrpcclxuICAgIC8vICAgcGFkZGluZ19qczog5a2X6Kmw44KB5pa55ZCR44Gu6ZaL5aeL44OR44OH44Kj44Oz44Kw5YCkXHJcbiAgICAvLyAgIHBhZGRpbmdfamU6IOWtl+ipsOOCgeaWueWQkeOBrue1guS6huODkeODh+OCo+ODs+OCsOWApFxyXG4gICAgLy8gICBwYWRkaW5nX2dzOiDooYzpgIHjgormlrnlkJHjga7plovlp4vjg5Hjg4fjgqPjg7PjgrDlgKRcclxuICAgIC8vICAgcGFkZGluZ19nZTog6KGM6YCB44KK5pa55ZCR44Gu57WC5LqG44OR44OH44Kj44Oz44Kw5YCkXHJcbiAgICAvLyAgIHNpemVfajog44OG44Kt44K544OI44Kw44Oq44OD44OJ44K144Kk44K677yI5a2X6Kmw44KB5pa55ZCR77yJXHJcbiAgICAvLyAgIHNpemVfZzog44OG44Kt44K544OI44Kw44Oq44OD44OJ44K144Kk44K677yI6KGM6YCB44KK5pa55ZCR77yJXHJcbiAgICAvLyAgIGd5b2thbjog6KGM6ZaT44K144Kk44K6IFxyXG4gICAgLy8gW09VVF1cclxuICAgIC8vICAgW1xyXG4gICAgLy8gICAgICAgW+Wtl+ipsOOCgeaWueWQkeW6p+aomSwg6KGM6YCB44KK5pa55ZCR5bqn5qiZXSwgICAgPC0tLSDjgrDjg6rjg4Pjg4njga7kuK3lv4PluqfmqJlcclxuICAgIC8vICAgICAgIFvlrZfoqbDjgoHmlrnlkJHluqfmqJksIOihjOmAgeOCiuaWueWQkeW6p+aomV0sXHJcbiAgICAvLyAgICAgICAuLi4uXHJcbiAgICAvLyAgIF0gICAgXHJcbiAgICAvL1xyXG4gICAgZ2V0VGV4dEdyaWRBcnk6IChcclxuICAgICAgICBhcmVhc2l6ZV9qLFxyXG4gICAgICAgIGFyZWFzaXplX2csXHJcbiAgICAgICAgcGFkZGluZ19qcyxcclxuICAgICAgICBwYWRkaW5nX2plLFxyXG4gICAgICAgIHBhZGRpbmdfZ3MsXHJcbiAgICAgICAgcGFkZGluZ19nZSxcclxuICAgICAgICBzaXplX2osXHJcbiAgICAgICAgc2l6ZV9nLFxyXG4gICAgICAgIGd5b2thblxyXG4gICAgKSA9PiB7XHJcbiAgICAgICAgbGV0IGdyaWRhcnkgPSBbXTtcclxuXHJcbiAgICAgICAgLy8g6KGM6YCB44KK5pa55ZCR44Gu5paH5a2X44Kw44Oq44OD44OJ5bqn5qiZ6YWN5YiX44KS5b6X44KLXHJcbiAgICAgICAgY29uc3QgZ3lvb2t1cmlBcnkgPSBUZXh0R3JpZC5nZXRHeW9va3VyaUdyaWRBcnkoXHJcbiAgICAgICAgICAgIGFyZWFzaXplX2csIHBhZGRpbmdfZ3MsIHBhZGRpbmdfZ2UsIGd5b2thbiwgc2l6ZV9nXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgLy8g5a2X6Kmw44KB5pa55ZCR44Gu5paH5a2X44Kw44Oq44OD44OJ5bqn5qiZ6YWN5YiX44KS5b6X44KLXHJcbiAgICAgICAgY29uc3QgamlkdW1lQXJ5ID0gVGV4dEdyaWQuZ2V0SmlkdW1lR3JpZEFyeShcclxuICAgICAgICAgICAgYXJlYXNpemVfaiwgcGFkZGluZ19qcywgcGFkZGluZ19qZSwgc2l6ZV9qXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgLy8g5paH5a2X44Kw44Oq44OD44OJ44Gu5Lit5b+D5bqn5qiZ6YWN5YiX44KS5L2c5oiQ44GZ44KLXHJcbiAgICAgICAgZm9yIChsZXQgZyA9IDA7IGcgPCBneW9va3VyaUFyeS5sZW5ndGg7IGcrKykge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGppZHVtZUFyeS5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICAgICAgZ3JpZGFyeS5wdXNoKFtqaWR1bWVBcnlbal0sIGd5b29rdXJpQXJ5W2ddXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBncmlkYXJ5O1xyXG4gICAgfSxcclxuXHJcbiAgICAvL1xyXG4gICAgLy8g44OG44Kt44K544OI44Kw44Oq44OD44OJ44Gu5Lit5b+D5bqn5qiZ44Gu6YWN5YiX44KS6L+U44GZ77yI5a2X6Kmw44KB5pa55ZCR77yJXHJcbiAgICAvL1xyXG4gICAgLy8gW0lOXVxyXG4gICAgLy8gICBsZW46IOOCqOODquOCouOBruWtl+ipsOOCgeaWueWQkeOBrumVt+OBlVxyXG4gICAgLy8gICBwYWRkaW5nX3M6IOWtl+ipsOOCgeaWueWQkeOCqOODquOCouOBrumWi+Wni+ODkeODh+OCo+ODs+OCsOWApFxyXG4gICAgLy8gICBwYWRkaW5nX2U6IOWtl+ipsOOCgeaWueWQkeOCqOODquOCouOBrue1guS6huODkeODh+OCo+ODs+OCsOWApFxyXG4gICAgLy8gICBzaXplOiDjg4bjgq3jgrnjg4jjgrXjgqTjgrrvvIjlrZfoqbDjgoHmlrnlkJHvvIlcclxuICAgIC8vXHJcbiAgICAvLyBbT1VUXVxyXG4gICAgLy8gICDjg4bjgq3jgrnjg4jjgrDjg6rjg4Pjg4njga7kuK3lv4PluqfmqJnvvIjlrZfoqbDjgoHmlrnlkJHjga7jgb/vvInjga7phY3liJdcclxuICAgIC8vXHJcbiAgICBnZXRKaWR1bWVHcmlkQXJ5OiAobGVuLCBwYWRkaW5nX3MsIHBhZGRpbmdfZSwgc2l6ZSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGFyZWFzaXplID0gbGVuIC0gKHBhZGRpbmdfcyArIHBhZGRpbmdfZSk7XHJcbiAgICAgICAgY29uc3QgZ3JpZHN1ID0gTWF0aC5mbG9vcihhcmVhc2l6ZSAvIHNpemUpO1xyXG4gICAgICAgIGNvbnN0IGFtYXJpID0gYXJlYXNpemUgJSBzaXplO1xyXG4gICAgICAgIGNvbnN0IG1hcmdpbiA9IGFtYXJpIC8gKGdyaWRzdSAtIDEpO1xyXG5cclxuICAgICAgICBsZXQgZ3JpZGFyeSA9IFtdO1xyXG4gICAgICAgIGxldCBwb2ludGVyID0gMDtcclxuICAgICAgICBwb2ludGVyICs9IHBhZGRpbmdfcztcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGdyaWRzdTsgaSsrKSB7XHJcbiAgICAgICAgICAgIGdyaWRhcnkucHVzaChwb2ludGVyICsgKHNpemUgLyAyKSk7XHJcblxyXG4gICAgICAgICAgICBwb2ludGVyICs9IHNpemU7XHJcbiAgICAgICAgICAgIHBvaW50ZXIgKz0gbWFyZ2luO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGdyaWRhcnk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vXHJcbiAgICAvLyDjg4bjgq3jgrnjg4jjgrDjg6rjg4Pjg4njga7kuK3lv4PluqfmqJnjga7phY3liJfjgpLov5TjgZnvvIjooYzpgIHjgormlrnlkJHvvIlcclxuICAgIC8vXHJcbiAgICAvLyBbSU5dXHJcbiAgICAvLyAgIGxlbjog44Ko44Oq44Ki44Gu6KGM6YCB44KK5pa55ZCR44Gu6ZW344GVXHJcbiAgICAvLyAgIHBhZGRpbmdfczog6KGM6YCB44KK5pa55ZCR44Ko44Oq44Ki44Gu6ZaL5aeL44OR44OH44Kj44Oz44Kw5YCkXHJcbiAgICAvLyAgIHBhZGRpbmdfZTog6KGM6YCB44KK5pa55ZCR44Ko44Oq44Ki44Gu57WC5LqG44OR44OH44Kj44Oz44Kw5YCkXHJcbiAgICAvLyAgIGd5b2thbjog6KGM6ZaT44K144Kk44K6XHJcbiAgICAvLyAgIHNpemU6IOODhuOCreOCueODiOOCteOCpOOCuu+8iOihjOmAgeOCiuaWueWQke+8iVxyXG4gICAgLy9cclxuICAgIC8vIFtPVVRdXHJcbiAgICAvLyAgIOODhuOCreOCueODiOOCsOODquODg+ODieOBruS4reW/g+W6p+aome+8iOihjOmAgeOCiuaWueWQkeOBruOBv++8ieOBrumFjeWIl1xyXG4gICAgLy9cclxuICAgIGdldEd5b29rdXJpR3JpZEFyeTogKGxlbiwgcGFkZGluZ19zLCBwYWRkaW5nX2UsIGd5b2thbiwgc2l6ZSkgPT4geyAgICBcclxuICAgICAgICBsZXQgZ3JpZGFyeSA9IFtdO1xyXG4gICAgICAgIGxldCBwb2ludGVyID0gMDtcclxuICAgICAgICBwb2ludGVyICs9IHBhZGRpbmdfcztcclxuICAgICAgICB3aGlsZSAoMSkge1xyXG4gICAgICAgICAgICBpZiAoKHBvaW50ZXIgKyBzaXplKSA+IChsZW4gLSBwYWRkaW5nX2UpKSB7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ3JpZGFyeS5wdXNoKHBvaW50ZXIgKyAoc2l6ZSAvIDIpKTtcclxuXHJcbiAgICAgICAgICAgIHBvaW50ZXIgKz0gKHNpemUgKyBneW9rYW4pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGdyaWRhcnk7XHJcbiAgICB9LFxyXG59O1xyXG4iLCJleHBvcnQgY29uc3QgU0FHQV9TQ0FMRV9DSEFOR0UgPSAnU0FHQV9TQ0FMRV9DSEFOR0UnO1xyXG5cclxuXHJcbmV4cG9ydCBjb25zdCBTYWdhX1NjYWxlX0NoYW5nZSA9IChwYXlsb2FkID0ge30pID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdHlwZTogU0FHQV9TQ0FMRV9DSEFOR0UsXHJcbiAgICAgICAgcGF5bG9hZDoge1xyXG4gICAgICAgICAgICBzY2FsZTogcGF5bG9hZC5zY2FsZSxcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxyXG5cclxuIiwiZXhwb3J0IGNvbnN0IFNVX1RPT0xCT1hQUkVTRU5fTEFZT1VUQ0FMTEJVVFRPTl9DTElDSyA9ICdTVV9UT09MQk9YUFJFU0VOX0xBWU9VVENBTExCVVRUT05fQ0xJQ0snO1xyXG5leHBvcnQgY29uc3QgU1VfVE9PTEJPWFBSRVNFTl9TT1pBSUNBTExCVVRUT05fQ0xJQ0sgPSAnU1VfVE9PTEJPWFBSRVNFTl9TT1pBSUNBTExCVVRUT05fQ0xJQ0snO1xyXG5leHBvcnQgY29uc3QgU1VfVE9PTEJPWFBSRVNFTl9MSU5LQ0FMTEJVVFRPTl9DTElDSyA9ICdTVV9UT09MQk9YUFJFU0VOX0xJTktDQUxMQlVUVE9OX0NMSUNLJztcclxuXHJcbmV4cG9ydCBjb25zdCBTVV9UT09MQk9YUFJFU0VOX0VESVRPTk9GRkJVVFRPTl9DTElDSyA9ICdTVV9UT09MQk9YUFJFU0VOX0VESVRPTk9GRkJVVFRPTl9DTElDSyc7XHJcblxyXG5leHBvcnQgY29uc3QgU1VfVG9vbEJveFByZXNlbl9MYXlvdXRDYWxsQnV0dG9uX0NsaWNrID0gKHBheWxvYWQgPSB7fSkgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiBTVV9UT09MQk9YUFJFU0VOX0xBWU9VVENBTExCVVRUT05fQ0xJQ0ssXHJcbiAgICAgICAgcGF5bG9hZDoge1xyXG4gICAgICAgICAgICBwYXR0ZXJuOiBwYXlsb2FkLnBhdHRlcm4sXHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBTVV9Ub29sQm94UHJlc2VuX1NvemFpQ2FsbEJ1dHRvbl9DbGljayA9IChwYXlsb2FkID0ge30pID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdHlwZTogU1VfVE9PTEJPWFBSRVNFTl9TT1pBSUNBTExCVVRUT05fQ0xJQ0ssXHJcbiAgICAgICAgcGF5bG9hZDoge1xyXG4gICAgICAgICAgICBwYXR0ZXJuOiBwYXlsb2FkLnBhdHRlcm4sXHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBTVV9Ub29sQm94UHJlc2VuX0xpbmtDYWxsQnV0dG9uX0NsaWNrID0gKHBheWxvYWQgPSB7fSkgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiBTVV9UT09MQk9YUFJFU0VOX0xJTktDQUxMQlVUVE9OX0NMSUNLLFxyXG4gICAgICAgIHBheWxvYWQ6IHtcclxuICAgICAgICAgICAgcGF0dGVybjogcGF5bG9hZC5wYXR0ZXJuLFxyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgU1VfVG9vbEJveFByZXNlbl9FZGl0T25PZmZCdXR0b25fQ2xpY2sgPSAocGF5bG9hZCA9IHt9KSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHR5cGU6IFNVX1RPT0xCT1hQUkVTRU5fRURJVE9OT0ZGQlVUVE9OX0NMSUNLLFxyXG4gICAgICAgIHBheWxvYWQ6IHtcclxuICAgICAgICAgICAgb25vZmY6IHBheWxvYWQub25vZmYsXHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuIiwiZXhwb3J0IGNvbnN0IFNVX1RPT0xCT1hTT1pBSV9VUERBVEVCVVRUT05fQ0xJQ0sgPSAnU1VfVE9PTEJPWFNPWkFJX1VQREFURUJVVFRPTl9DTElDSyc7XHJcbmV4cG9ydCBjb25zdCBTVV9UT09MQk9YU09aQUlfREVMRVRFQlVUVE9OX0NMSUNLID0gJ1NVX1RPT0xCT1hTT1pBSV9ERUxFVEVCVVRUT05fQ0xJQ0snO1xyXG5leHBvcnQgY29uc3QgU1VfVE9PTEJPWFNPWkFJX0NSRUFURUJVVFRPTl9DTElDSyA9ICdTVV9UT09MQk9YU09aQUlfQ1JFQVRFQlVUVE9OX0NMSUNLJztcclxuZXhwb3J0IGNvbnN0IFNVX1RPT0xCT1hTT1pBSV9TT1pBSV9TRUxFQ1QgICAgICAgPSAnU1VfVE9PTEJPWFNPWkFJX1NPWkFJX1NFTEVDVCc7XHJcbmV4cG9ydCBjb25zdCBTVV9UT09MQk9YU09aQUlfU09aQUlfVE9HR0xFICAgICAgID0gJ1NVX1RPT0xCT1hTT1pBSV9TT1pBSV9UT0dHTEUnO1xyXG5cclxuXHJcbmV4cG9ydCBjb25zdCBTVV9Ub29sQm94U296YWlfVXBkYXRlQnV0dG9uX0NsaWNrID0gKHBheWxvYWQgPSB7fSkgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiBTVV9UT09MQk9YU09aQUlfVVBEQVRFQlVUVE9OX0NMSUNLLFxyXG4gICAgICAgIHBheWxvYWQ6IHtcclxuICAgICAgICAgICAgc296YWk6IHBheWxvYWQuc296YWksXHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBTVV9Ub29sQm94U296YWlfRGVsZXRlQnV0dG9uX0NsaWNrID0gKHBheWxvYWQgPSB7fSkgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiBTVV9UT09MQk9YU09aQUlfREVMRVRFQlVUVE9OX0NMSUNLLFxyXG4gICAgICAgIHBheWxvYWQ6IHtcclxuICAgICAgICAgICAgc296YWlfaWQ6IHBheWxvYWQuc296YWlfaWQsXHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBTVV9Ub29sQm94U296YWlfQ3JlYXRlQnV0dG9uX0NsaWNrID0gKHBheWxvYWQgPSB7fSkgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiBTVV9UT09MQk9YU09aQUlfQ1JFQVRFQlVUVE9OX0NMSUNLLFxyXG4gICAgICAgIHBheWxvYWQ6IHtcclxuICAgICAgICAgICAgc296YWlfaWQ6IHBheWxvYWQuc296YWlfaWQsXHJcbiAgICAgICAgICAgIHR5cGU6IHBheWxvYWQudHlwZSxcclxuICAgICAgICAgICAgdGV4dDogcGF5bG9hZC50ZXh0LFxyXG4gICAgICAgICAgICBpbWFnZVVybDogcGF5bG9hZC5pbWFnZVVybCxcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFNVX1Rvb2xCb3hTb3phaV9Tb3phaV9TZWxlY3QgPSAocGF5bG9hZCA9IHt9KSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHR5cGU6IFNVX1RPT0xCT1hTT1pBSV9TT1pBSV9TRUxFQ1QsXHJcbiAgICAgICAgcGF5bG9hZDoge1xyXG4gICAgICAgICAgICBzb3phaV9pZDogcGF5bG9hZC5zb3phaV9pZCxcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBTVV9Ub29sQm94U296YWlfU296YWlfVG9nZ2xlID0gKHBheWxvYWQgPSB7fSkgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiBTVV9UT09MQk9YU09aQUlfU09aQUlfVE9HR0xFLFxyXG4gICAgICAgIHBheWxvYWQ6IHtcclxuICAgICAgICAgICAgc296YWlfaWQ6IHBheWxvYWQuc296YWlfaWQsXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsImV4cG9ydCBjb25zdCBTVV9UT09MQk9YVEVYVERBVEFfVVBEQVRFQlVUVE9OX0NMSUNLID0gJ1NVX1RPT0xCT1hURVhUREFUQV9VUERBVEVCVVRUT05fQ0xJQ0snO1xyXG5cclxuXHJcbmV4cG9ydCBjb25zdCBTVV9Ub29sQm94VGV4dERhdGFfVXBkYXRlQnV0dG9uX0NsaWNrID0gKHBheWxvYWQgPSB7fSkgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiBTVV9UT09MQk9YVEVYVERBVEFfVVBEQVRFQlVUVE9OX0NMSUNLLFxyXG4gICAgICAgIHBheWxvYWQ6IHtcclxuICAgICAgICAgICAgYm94OiBwYXlsb2FkLmJveCxcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxyXG4iLCJleHBvcnQgY29uc3QgU1VfVE9PTEJPWFNDQUxFX01JTkJVVFRPTl9DTElDSyA9ICdTVV9UT09MQk9YU0NBTEVfTUlOQlVUVE9OX0NMSUNLJztcclxuZXhwb3J0IGNvbnN0IFNVX1RPT0xCT1hTQ0FMRV9NQVhCVVRUT05fQ0xJQ0sgPSAnU1VfVE9PTEJPWFNDQUxFX01BWEJVVFRPTl9DTElDSyc7XHJcbmV4cG9ydCBjb25zdCBTVV9UT09MQk9YU0NBTEVfMTAwUEVSQlVUVE9OX0NMSUNLID0gJ1NVX1RPT0xCT1hTQ0FMRV8xMDBQRVJCVVRUT05fQ0xJQ0snO1xyXG5cclxuXHJcbmV4cG9ydCBjb25zdCBTVV9Ub29sQm94U2NhbGVfTWluQnV0dG9uX0NsaWNrID0gKHBheWxvYWQgPSB7fSkgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiBTVV9UT09MQk9YU0NBTEVfTUlOQlVUVE9OX0NMSUNLLFxyXG4gICAgICAgIHBheWxvYWQ6IHtcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFNVX1Rvb2xCb3hTY2FsZV9NYXhCdXR0b25fQ2xpY2sgPSAocGF5bG9hZCA9IHt9KSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHR5cGU6IFNVX1RPT0xCT1hTQ0FMRV9NQVhCVVRUT05fQ0xJQ0ssXHJcbiAgICAgICAgcGF5bG9hZDoge1xyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgU1VfVG9vbEJveFNjYWxlXzEwMFBlckJ1dHRvbl9DbGljayA9IChwYXlsb2FkID0ge30pID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdHlwZTogU1VfVE9PTEJPWFNDQUxFXzEwMFBFUkJVVFRPTl9DTElDSyxcclxuICAgICAgICBwYXlsb2FkOiB7XHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuIiwiZXhwb3J0IGNvbnN0IFNVX1RPT0xCT1hfTU9WRUVORCA9ICdTVV9UT09MQk9YX01PVkVFTkQnO1xyXG5cclxuXHJcbmV4cG9ydCBjb25zdCBTVV9Ub29sQm94X01vdmVFbmQgPSAocGF5bG9hZCA9IHt9KSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHR5cGU6IFNVX1RPT0xCT1hfTU9WRUVORCxcclxuICAgICAgICBwYXlsb2FkOiB7XHJcbiAgICAgICAgICAgIHRvb2xib3hfaWQ6IHBheWxvYWQudG9vbGJveF9pZCxcclxuICAgICAgICAgICAgeDogIHBheWxvYWQueCxcclxuICAgICAgICAgICAgeTogIHBheWxvYWQueSxcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxyXG4iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNhcGl0YWxpemVTdHJpbmc7XG5mdW5jdGlvbiBjYXBpdGFsaXplU3RyaW5nKHN0cikge1xuICByZXR1cm4gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGguc2NhbGUgfHwgZnVuY3Rpb24gc2NhbGUoeCwgaW5Mb3csIGluSGlnaCwgb3V0TG93LCBvdXRIaWdoKSB7XG4gIGlmIChcbiAgICBhcmd1bWVudHMubGVuZ3RoID09PSAwXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICB8fCB4ICE9IHhcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIHx8IGluTG93ICE9IGluTG93XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICB8fCBpbkhpZ2ggIT0gaW5IaWdoXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICB8fCBvdXRMb3cgIT0gb3V0TG93XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICB8fCBvdXRIaWdoICE9IG91dEhpZ2hcbiAgKSByZXR1cm4gTmFOO1xuICBpZiAoeCA9PT0gSW5maW5pdHkgfHwgeCA9PT0gLUluZmluaXR5KSByZXR1cm4geDtcbiAgcmV0dXJuICh4IC0gaW5Mb3cpICogKG91dEhpZ2ggLSBvdXRMb3cpIC8gKGluSGlnaCAtIGluTG93KSArIG91dExvdztcbn07XG4iLCJ2YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlciwgSVRFUkFUT1IpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBmb3JPZihpdGVyLCBmYWxzZSwgcmVzdWx0LnB1c2gsIHJlc3VsdCwgSVRFUkFUT1IpO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9EYXZpZEJydWFudC9NYXAtU2V0LnByb3RvdHlwZS50b0pTT05cbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIGZyb20gPSByZXF1aXJlKCcuL19hcnJheS1mcm9tLWl0ZXJhYmxlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FKSB7XG4gIHJldHVybiBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgaWYgKGNsYXNzb2YodGhpcykgIT0gTkFNRSkgdGhyb3cgVHlwZUVycm9yKE5BTUUgKyBcIiN0b0pTT04gaXNuJ3QgZ2VuZXJpY1wiKTtcbiAgICByZXR1cm4gZnJvbSh0aGlzKTtcbiAgfTtcbn07XG4iLCJ2YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGlzRW51bSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKS5mO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXNFbnRyaWVzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdChpdCk7XG4gICAgdmFyIGtleXMgPSBnZXRLZXlzKE8pO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGkpIGlmIChpc0VudW0uY2FsbChPLCBrZXkgPSBrZXlzW2krK10pKSB7XG4gICAgICByZXN1bHQucHVzaChpc0VudHJpZXMgPyBba2V5LCBPW2tleV1dIDogT1trZXldKTtcbiAgICB9IHJldHVybiByZXN1bHQ7XG4gIH07XG59O1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmRcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHJlcGVhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1yZXBlYXQnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCBtYXhMZW5ndGgsIGZpbGxTdHJpbmcsIGxlZnQpIHtcbiAgdmFyIFMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG4gIHZhciBzdHJpbmdMZW5ndGggPSBTLmxlbmd0aDtcbiAgdmFyIGZpbGxTdHIgPSBmaWxsU3RyaW5nID09PSB1bmRlZmluZWQgPyAnICcgOiBTdHJpbmcoZmlsbFN0cmluZyk7XG4gIHZhciBpbnRNYXhMZW5ndGggPSB0b0xlbmd0aChtYXhMZW5ndGgpO1xuICBpZiAoaW50TWF4TGVuZ3RoIDw9IHN0cmluZ0xlbmd0aCB8fCBmaWxsU3RyID09ICcnKSByZXR1cm4gUztcbiAgdmFyIGZpbGxMZW4gPSBpbnRNYXhMZW5ndGggLSBzdHJpbmdMZW5ndGg7XG4gIHZhciBzdHJpbmdGaWxsZXIgPSByZXBlYXQuY2FsbChmaWxsU3RyLCBNYXRoLmNlaWwoZmlsbExlbiAvIGZpbGxTdHIubGVuZ3RoKSk7XG4gIGlmIChzdHJpbmdGaWxsZXIubGVuZ3RoID4gZmlsbExlbikgc3RyaW5nRmlsbGVyID0gc3RyaW5nRmlsbGVyLnNsaWNlKDAsIGZpbGxMZW4pO1xuICByZXR1cm4gbGVmdCA/IHN0cmluZ0ZpbGxlciArIFMgOiBTICsgc3RyaW5nRmlsbGVyO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtZmxhdE1hcC8jc2VjLUZsYXR0ZW5JbnRvQXJyYXlcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgSVNfQ09OQ0FUX1NQUkVBREFCTEUgPSByZXF1aXJlKCcuL193a3MnKSgnaXNDb25jYXRTcHJlYWRhYmxlJyk7XG5cbmZ1bmN0aW9uIGZsYXR0ZW5JbnRvQXJyYXkodGFyZ2V0LCBvcmlnaW5hbCwgc291cmNlLCBzb3VyY2VMZW4sIHN0YXJ0LCBkZXB0aCwgbWFwcGVyLCB0aGlzQXJnKSB7XG4gIHZhciB0YXJnZXRJbmRleCA9IHN0YXJ0O1xuICB2YXIgc291cmNlSW5kZXggPSAwO1xuICB2YXIgbWFwRm4gPSBtYXBwZXIgPyBjdHgobWFwcGVyLCB0aGlzQXJnLCAzKSA6IGZhbHNlO1xuICB2YXIgZWxlbWVudCwgc3ByZWFkYWJsZTtcblxuICB3aGlsZSAoc291cmNlSW5kZXggPCBzb3VyY2VMZW4pIHtcbiAgICBpZiAoc291cmNlSW5kZXggaW4gc291cmNlKSB7XG4gICAgICBlbGVtZW50ID0gbWFwRm4gPyBtYXBGbihzb3VyY2Vbc291cmNlSW5kZXhdLCBzb3VyY2VJbmRleCwgb3JpZ2luYWwpIDogc291cmNlW3NvdXJjZUluZGV4XTtcblxuICAgICAgc3ByZWFkYWJsZSA9IGZhbHNlO1xuICAgICAgaWYgKGlzT2JqZWN0KGVsZW1lbnQpKSB7XG4gICAgICAgIHNwcmVhZGFibGUgPSBlbGVtZW50W0lTX0NPTkNBVF9TUFJFQURBQkxFXTtcbiAgICAgICAgc3ByZWFkYWJsZSA9IHNwcmVhZGFibGUgIT09IHVuZGVmaW5lZCA/ICEhc3ByZWFkYWJsZSA6IGlzQXJyYXkoZWxlbWVudCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzcHJlYWRhYmxlICYmIGRlcHRoID4gMCkge1xuICAgICAgICB0YXJnZXRJbmRleCA9IGZsYXR0ZW5JbnRvQXJyYXkodGFyZ2V0LCBvcmlnaW5hbCwgZWxlbWVudCwgdG9MZW5ndGgoZWxlbWVudC5sZW5ndGgpLCB0YXJnZXRJbmRleCwgZGVwdGggLSAxKSAtIDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGFyZ2V0SW5kZXggPj0gMHgxZmZmZmZmZmZmZmZmZikgdGhyb3cgVHlwZUVycm9yKCk7XG4gICAgICAgIHRhcmdldFt0YXJnZXRJbmRleF0gPSBlbGVtZW50O1xuICAgICAgfVxuXG4gICAgICB0YXJnZXRJbmRleCsrO1xuICAgIH1cbiAgICBzb3VyY2VJbmRleCsrO1xuICB9XG4gIHJldHVybiB0YXJnZXRJbmRleDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmbGF0dGVuSW50b0FycmF5O1xuIiwiLy8gYWxsIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBub24tZW51bWVyYWJsZSBhbmQgc3ltYm9sc1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgUmVmbGVjdCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLlJlZmxlY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IFJlZmxlY3QgJiYgUmVmbGVjdC5vd25LZXlzIHx8IGZ1bmN0aW9uIG93bktleXMoaXQpIHtcbiAgdmFyIGtleXMgPSBnT1BOLmYoYW5PYmplY3QoaXQpKTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIHJldHVybiBnZXRTeW1ib2xzID8ga2V5cy5jb25jYXQoZ2V0U3ltYm9scyhpdCkpIDoga2V5cztcbn07XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b2luZGV4XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIDA7XG4gIHZhciBudW1iZXIgPSB0b0ludGVnZXIoaXQpO1xuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgobnVtYmVyKTtcbiAgaWYgKG51bWJlciAhPT0gbGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBsZW5ndGghJyk7XG4gIHJldHVybiBsZW5ndGg7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgZ2V0V2VhayA9IHJlcXVpcmUoJy4vX21ldGEnKS5nZXRXZWFrO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIGNyZWF0ZUFycmF5TWV0aG9kID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpO1xudmFyICRoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBhcnJheUZpbmQgPSBjcmVhdGVBcnJheU1ldGhvZCg1KTtcbnZhciBhcnJheUZpbmRJbmRleCA9IGNyZWF0ZUFycmF5TWV0aG9kKDYpO1xudmFyIGlkID0gMDtcblxuLy8gZmFsbGJhY2sgZm9yIHVuY2F1Z2h0IGZyb3plbiBrZXlzXG52YXIgdW5jYXVnaHRGcm96ZW5TdG9yZSA9IGZ1bmN0aW9uICh0aGF0KSB7XG4gIHJldHVybiB0aGF0Ll9sIHx8ICh0aGF0Ll9sID0gbmV3IFVuY2F1Z2h0RnJvemVuU3RvcmUoKSk7XG59O1xudmFyIFVuY2F1Z2h0RnJvemVuU3RvcmUgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuYSA9IFtdO1xufTtcbnZhciBmaW5kVW5jYXVnaHRGcm96ZW4gPSBmdW5jdGlvbiAoc3RvcmUsIGtleSkge1xuICByZXR1cm4gYXJyYXlGaW5kKHN0b3JlLmEsIGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBpdFswXSA9PT0ga2V5O1xuICB9KTtcbn07XG5VbmNhdWdodEZyb3plblN0b3JlLnByb3RvdHlwZSA9IHtcbiAgZ2V0OiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gICAgaWYgKGVudHJ5KSByZXR1cm4gZW50cnlbMV07XG4gIH0sXG4gIGhhczogZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiAhIWZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gICAgaWYgKGVudHJ5KSBlbnRyeVsxXSA9IHZhbHVlO1xuICAgIGVsc2UgdGhpcy5hLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgfSxcbiAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgaW5kZXggPSBhcnJheUZpbmRJbmRleCh0aGlzLmEsIGZ1bmN0aW9uIChpdCkge1xuICAgICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gICAgfSk7XG4gICAgaWYgKH5pbmRleCkgdGhpcy5hLnNwbGljZShpbmRleCwgMSk7XG4gICAgcmV0dXJuICEhfmluZGV4O1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0Q29uc3RydWN0b3I6IGZ1bmN0aW9uICh3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKSB7XG4gICAgdmFyIEMgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBpdGVyYWJsZSkge1xuICAgICAgYW5JbnN0YW5jZSh0aGF0LCBDLCBOQU1FLCAnX2knKTtcbiAgICAgIHRoYXQuX3QgPSBOQU1FOyAgICAgIC8vIGNvbGxlY3Rpb24gdHlwZVxuICAgICAgdGhhdC5faSA9IGlkKys7ICAgICAgLy8gY29sbGVjdGlvbiBpZFxuICAgICAgdGhhdC5fbCA9IHVuZGVmaW5lZDsgLy8gbGVhayBzdG9yZSBmb3IgdW5jYXVnaHQgZnJvemVuIG9iamVjdHNcbiAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICB9KTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwge1xuICAgICAgLy8gMjMuMy4zLjIgV2Vha01hcC5wcm90b3R5cGUuZGVsZXRlKGtleSlcbiAgICAgIC8vIDIzLjQuMy4zIFdlYWtTZXQucHJvdG90eXBlLmRlbGV0ZSh2YWx1ZSlcbiAgICAgICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICghaXNPYmplY3Qoa2V5KSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsIE5BTUUpKVsnZGVsZXRlJ10oa2V5KTtcbiAgICAgICAgcmV0dXJuIGRhdGEgJiYgJGhhcyhkYXRhLCB0aGlzLl9pKSAmJiBkZWxldGUgZGF0YVt0aGlzLl9pXTtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4zLjMuNCBXZWFrTWFwLnByb3RvdHlwZS5oYXMoa2V5KVxuICAgICAgLy8gMjMuNC4zLjQgV2Vha1NldC5wcm90b3R5cGUuaGFzKHZhbHVlKVxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgIGlmICghaXNPYmplY3Qoa2V5KSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsIE5BTUUpKS5oYXMoa2V5KTtcbiAgICAgICAgcmV0dXJuIGRhdGEgJiYgJGhhcyhkYXRhLCB0aGlzLl9pKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gQztcbiAgfSxcbiAgZGVmOiBmdW5jdGlvbiAodGhhdCwga2V5LCB2YWx1ZSkge1xuICAgIHZhciBkYXRhID0gZ2V0V2Vhayhhbk9iamVjdChrZXkpLCB0cnVlKTtcbiAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgdW5jYXVnaHRGcm96ZW5TdG9yZSh0aGF0KS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgZWxzZSBkYXRhW3RoYXQuX2ldID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoYXQ7XG4gIH0sXG4gIHVmc3RvcmU6IHVuY2F1Z2h0RnJvemVuU3RvcmVcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZWFjaCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgwKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKTtcbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuL19vYmplY3QtYXNzaWduJyk7XG52YXIgd2VhayA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24td2VhaycpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIFdFQUtfTUFQID0gJ1dlYWtNYXAnO1xudmFyIGdldFdlYWsgPSBtZXRhLmdldFdlYWs7XG52YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZTtcbnZhciB1bmNhdWdodEZyb3plblN0b3JlID0gd2Vhay51ZnN0b3JlO1xudmFyIHRtcCA9IHt9O1xudmFyIEludGVybmFsTWFwO1xuXG52YXIgd3JhcHBlciA9IGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFdlYWtNYXAoKSB7XG4gICAgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7XG4gIH07XG59O1xuXG52YXIgbWV0aG9kcyA9IHtcbiAgLy8gMjMuMy4zLjMgV2Vha01hcC5wcm90b3R5cGUuZ2V0KGtleSlcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgaWYgKGlzT2JqZWN0KGtleSkpIHtcbiAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xuICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsIFdFQUtfTUFQKSkuZ2V0KGtleSk7XG4gICAgICByZXR1cm4gZGF0YSA/IGRhdGFbdGhpcy5faV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuICB9LFxuICAvLyAyMy4zLjMuNSBXZWFrTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSlcbiAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgIHJldHVybiB3ZWFrLmRlZih2YWxpZGF0ZSh0aGlzLCBXRUFLX01BUCksIGtleSwgdmFsdWUpO1xuICB9XG59O1xuXG4vLyAyMy4zIFdlYWtNYXAgT2JqZWN0c1xudmFyICRXZWFrTWFwID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoV0VBS19NQVAsIHdyYXBwZXIsIG1ldGhvZHMsIHdlYWssIHRydWUsIHRydWUpO1xuXG4vLyBJRTExIFdlYWtNYXAgZnJvemVuIGtleXMgZml4XG5pZiAoZmFpbHMoZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3ICRXZWFrTWFwKCkuc2V0KChPYmplY3QuZnJlZXplIHx8IE9iamVjdCkodG1wKSwgNykuZ2V0KHRtcCkgIT0gNzsgfSkpIHtcbiAgSW50ZXJuYWxNYXAgPSB3ZWFrLmdldENvbnN0cnVjdG9yKHdyYXBwZXIsIFdFQUtfTUFQKTtcbiAgYXNzaWduKEludGVybmFsTWFwLnByb3RvdHlwZSwgbWV0aG9kcyk7XG4gIG1ldGEuTkVFRCA9IHRydWU7XG4gIGVhY2goWydkZWxldGUnLCAnaGFzJywgJ2dldCcsICdzZXQnXSwgZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBwcm90byA9ICRXZWFrTWFwLnByb3RvdHlwZTtcbiAgICB2YXIgbWV0aG9kID0gcHJvdG9ba2V5XTtcbiAgICByZWRlZmluZShwcm90bywga2V5LCBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgLy8gc3RvcmUgZnJvemVuIG9iamVjdHMgb24gaW50ZXJuYWwgd2Vha21hcCBzaGltXG4gICAgICBpZiAoaXNPYmplY3QoYSkgJiYgIWlzRXh0ZW5zaWJsZShhKSkge1xuICAgICAgICBpZiAoIXRoaXMuX2YpIHRoaXMuX2YgPSBuZXcgSW50ZXJuYWxNYXAoKTtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuX2Zba2V5XShhLCBiKTtcbiAgICAgICAgcmV0dXJuIGtleSA9PSAnc2V0JyA/IHRoaXMgOiByZXN1bHQ7XG4gICAgICAvLyBzdG9yZSBhbGwgdGhlIHJlc3Qgb24gbmF0aXZlIHdlYWttYXBcbiAgICAgIH0gcmV0dXJuIG1ldGhvZC5jYWxsKHRoaXMsIGEsIGIpO1xuICAgIH0pO1xuICB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciBzdHJvbmcgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXN0cm9uZycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIFNFVCA9ICdTZXQnO1xuXG4vLyAyMy4yIFNldCBPYmplY3RzXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKShTRVQsIGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFNldCgpIHsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCB7XG4gIC8vIDIzLjIuMy4xIFNldC5wcm90b3R5cGUuYWRkKHZhbHVlKVxuICBhZGQ6IGZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xuICAgIHJldHVybiBzdHJvbmcuZGVmKHZhbGlkYXRlKHRoaXMsIFNFVCksIHZhbHVlID0gdmFsdWUgPT09IDAgPyAwIDogdmFsdWUsIHZhbHVlKTtcbiAgfVxufSwgc3Ryb25nKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciAkaXRlckRlZmluZSA9IHJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJyk7XG52YXIgc3RlcCA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpO1xudmFyIHNldFNwZWNpZXMgPSByZXF1aXJlKCcuL19zZXQtc3BlY2llcycpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBmYXN0S2V5ID0gcmVxdWlyZSgnLi9fbWV0YScpLmZhc3RLZXk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgU0laRSA9IERFU0NSSVBUT1JTID8gJ19zJyA6ICdzaXplJztcblxudmFyIGdldEVudHJ5ID0gZnVuY3Rpb24gKHRoYXQsIGtleSkge1xuICAvLyBmYXN0IGNhc2VcbiAgdmFyIGluZGV4ID0gZmFzdEtleShrZXkpO1xuICB2YXIgZW50cnk7XG4gIGlmIChpbmRleCAhPT0gJ0YnKSByZXR1cm4gdGhhdC5faVtpbmRleF07XG4gIC8vIGZyb3plbiBvYmplY3QgY2FzZVxuICBmb3IgKGVudHJ5ID0gdGhhdC5fZjsgZW50cnk7IGVudHJ5ID0gZW50cnkubikge1xuICAgIGlmIChlbnRyeS5rID09IGtleSkgcmV0dXJuIGVudHJ5O1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0Q29uc3RydWN0b3I6IGZ1bmN0aW9uICh3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKSB7XG4gICAgdmFyIEMgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBpdGVyYWJsZSkge1xuICAgICAgYW5JbnN0YW5jZSh0aGF0LCBDLCBOQU1FLCAnX2knKTtcbiAgICAgIHRoYXQuX3QgPSBOQU1FOyAgICAgICAgIC8vIGNvbGxlY3Rpb24gdHlwZVxuICAgICAgdGhhdC5faSA9IGNyZWF0ZShudWxsKTsgLy8gaW5kZXhcbiAgICAgIHRoYXQuX2YgPSB1bmRlZmluZWQ7ICAgIC8vIGZpcnN0IGVudHJ5XG4gICAgICB0aGF0Ll9sID0gdW5kZWZpbmVkOyAgICAvLyBsYXN0IGVudHJ5XG4gICAgICB0aGF0W1NJWkVdID0gMDsgICAgICAgICAvLyBzaXplXG4gICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG4gICAgfSk7XG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIHtcbiAgICAgIC8vIDIzLjEuMy4xIE1hcC5wcm90b3R5cGUuY2xlYXIoKVxuICAgICAgLy8gMjMuMi4zLjIgU2V0LnByb3RvdHlwZS5jbGVhcigpXG4gICAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICAgIGZvciAodmFyIHRoYXQgPSB2YWxpZGF0ZSh0aGlzLCBOQU1FKSwgZGF0YSA9IHRoYXQuX2ksIGVudHJ5ID0gdGhhdC5fZjsgZW50cnk7IGVudHJ5ID0gZW50cnkubikge1xuICAgICAgICAgIGVudHJ5LnIgPSB0cnVlO1xuICAgICAgICAgIGlmIChlbnRyeS5wKSBlbnRyeS5wID0gZW50cnkucC5uID0gdW5kZWZpbmVkO1xuICAgICAgICAgIGRlbGV0ZSBkYXRhW2VudHJ5LmldO1xuICAgICAgICB9XG4gICAgICAgIHRoYXQuX2YgPSB0aGF0Ll9sID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGF0W1NJWkVdID0gMDtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4xLjMuMyBNYXAucHJvdG90eXBlLmRlbGV0ZShrZXkpXG4gICAgICAvLyAyMy4yLjMuNCBTZXQucHJvdG90eXBlLmRlbGV0ZSh2YWx1ZSlcbiAgICAgICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciB0aGF0ID0gdmFsaWRhdGUodGhpcywgTkFNRSk7XG4gICAgICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSk7XG4gICAgICAgIGlmIChlbnRyeSkge1xuICAgICAgICAgIHZhciBuZXh0ID0gZW50cnkubjtcbiAgICAgICAgICB2YXIgcHJldiA9IGVudHJ5LnA7XG4gICAgICAgICAgZGVsZXRlIHRoYXQuX2lbZW50cnkuaV07XG4gICAgICAgICAgZW50cnkuciA9IHRydWU7XG4gICAgICAgICAgaWYgKHByZXYpIHByZXYubiA9IG5leHQ7XG4gICAgICAgICAgaWYgKG5leHQpIG5leHQucCA9IHByZXY7XG4gICAgICAgICAgaWYgKHRoYXQuX2YgPT0gZW50cnkpIHRoYXQuX2YgPSBuZXh0O1xuICAgICAgICAgIGlmICh0aGF0Ll9sID09IGVudHJ5KSB0aGF0Ll9sID0gcHJldjtcbiAgICAgICAgICB0aGF0W1NJWkVdLS07XG4gICAgICAgIH0gcmV0dXJuICEhZW50cnk7XG4gICAgICB9LFxuICAgICAgLy8gMjMuMi4zLjYgU2V0LnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gICAgICAvLyAyMy4xLjMuNSBNYXAucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICAgICAgdmFsaWRhdGUodGhpcywgTkFNRSk7XG4gICAgICAgIHZhciBmID0gY3R4KGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCAzKTtcbiAgICAgICAgdmFyIGVudHJ5O1xuICAgICAgICB3aGlsZSAoZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm4gOiB0aGlzLl9mKSB7XG4gICAgICAgICAgZihlbnRyeS52LCBlbnRyeS5rLCB0aGlzKTtcbiAgICAgICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgICAgICB3aGlsZSAoZW50cnkgJiYgZW50cnkucikgZW50cnkgPSBlbnRyeS5wO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gMjMuMS4zLjcgTWFwLnByb3RvdHlwZS5oYXMoa2V5KVxuICAgICAgLy8gMjMuMi4zLjcgU2V0LnByb3RvdHlwZS5oYXModmFsdWUpXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgICAgcmV0dXJuICEhZ2V0RW50cnkodmFsaWRhdGUodGhpcywgTkFNRSksIGtleSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKERFU0NSSVBUT1JTKSBkUChDLnByb3RvdHlwZSwgJ3NpemUnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHZhbGlkYXRlKHRoaXMsIE5BTUUpW1NJWkVdO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBDO1xuICB9LFxuICBkZWY6IGZ1bmN0aW9uICh0aGF0LCBrZXksIHZhbHVlKSB7XG4gICAgdmFyIGVudHJ5ID0gZ2V0RW50cnkodGhhdCwga2V5KTtcbiAgICB2YXIgcHJldiwgaW5kZXg7XG4gICAgLy8gY2hhbmdlIGV4aXN0aW5nIGVudHJ5XG4gICAgaWYgKGVudHJ5KSB7XG4gICAgICBlbnRyeS52ID0gdmFsdWU7XG4gICAgLy8gY3JlYXRlIG5ldyBlbnRyeVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGF0Ll9sID0gZW50cnkgPSB7XG4gICAgICAgIGk6IGluZGV4ID0gZmFzdEtleShrZXksIHRydWUpLCAvLyA8LSBpbmRleFxuICAgICAgICBrOiBrZXksICAgICAgICAgICAgICAgICAgICAgICAgLy8gPC0ga2V5XG4gICAgICAgIHY6IHZhbHVlLCAgICAgICAgICAgICAgICAgICAgICAvLyA8LSB2YWx1ZVxuICAgICAgICBwOiBwcmV2ID0gdGhhdC5fbCwgICAgICAgICAgICAgLy8gPC0gcHJldmlvdXMgZW50cnlcbiAgICAgICAgbjogdW5kZWZpbmVkLCAgICAgICAgICAgICAgICAgIC8vIDwtIG5leHQgZW50cnlcbiAgICAgICAgcjogZmFsc2UgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIHJlbW92ZWRcbiAgICAgIH07XG4gICAgICBpZiAoIXRoYXQuX2YpIHRoYXQuX2YgPSBlbnRyeTtcbiAgICAgIGlmIChwcmV2KSBwcmV2Lm4gPSBlbnRyeTtcbiAgICAgIHRoYXRbU0laRV0rKztcbiAgICAgIC8vIGFkZCB0byBpbmRleFxuICAgICAgaWYgKGluZGV4ICE9PSAnRicpIHRoYXQuX2lbaW5kZXhdID0gZW50cnk7XG4gICAgfSByZXR1cm4gdGhhdDtcbiAgfSxcbiAgZ2V0RW50cnk6IGdldEVudHJ5LFxuICBzZXRTdHJvbmc6IGZ1bmN0aW9uIChDLCBOQU1FLCBJU19NQVApIHtcbiAgICAvLyBhZGQgLmtleXMsIC52YWx1ZXMsIC5lbnRyaWVzLCBbQEBpdGVyYXRvcl1cbiAgICAvLyAyMy4xLjMuNCwgMjMuMS4zLjgsIDIzLjEuMy4xMSwgMjMuMS4zLjEyLCAyMy4yLjMuNSwgMjMuMi4zLjgsIDIzLjIuMy4xMCwgMjMuMi4zLjExXG4gICAgJGl0ZXJEZWZpbmUoQywgTkFNRSwgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gICAgICB0aGlzLl90ID0gdmFsaWRhdGUoaXRlcmF0ZWQsIE5BTUUpOyAvLyB0YXJnZXRcbiAgICAgIHRoaXMuX2sgPSBraW5kOyAgICAgICAgICAgICAgICAgICAgIC8vIGtpbmRcbiAgICAgIHRoaXMuX2wgPSB1bmRlZmluZWQ7ICAgICAgICAgICAgICAgIC8vIHByZXZpb3VzXG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgdmFyIGtpbmQgPSB0aGF0Ll9rO1xuICAgICAgdmFyIGVudHJ5ID0gdGhhdC5fbDtcbiAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgd2hpbGUgKGVudHJ5ICYmIGVudHJ5LnIpIGVudHJ5ID0gZW50cnkucDtcbiAgICAgIC8vIGdldCBuZXh0IGVudHJ5XG4gICAgICBpZiAoIXRoYXQuX3QgfHwgISh0aGF0Ll9sID0gZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm4gOiB0aGF0Ll90Ll9mKSkge1xuICAgICAgICAvLyBvciBmaW5pc2ggdGhlIGl0ZXJhdGlvblxuICAgICAgICB0aGF0Ll90ID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gc3RlcCgxKTtcbiAgICAgIH1cbiAgICAgIC8vIHJldHVybiBzdGVwIGJ5IGtpbmRcbiAgICAgIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHN0ZXAoMCwgZW50cnkuayk7XG4gICAgICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHN0ZXAoMCwgZW50cnkudik7XG4gICAgICByZXR1cm4gc3RlcCgwLCBbZW50cnkuaywgZW50cnkudl0pO1xuICAgIH0sIElTX01BUCA/ICdlbnRyaWVzJyA6ICd2YWx1ZXMnLCAhSVNfTUFQLCB0cnVlKTtcblxuICAgIC8vIGFkZCBbQEBzcGVjaWVzXSwgMjMuMS4yLjIsIDIzLjIuMi4yXG4gICAgc2V0U3BlY2llcyhOQU1FKTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBzdHJvbmcgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXN0cm9uZycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIE1BUCA9ICdNYXAnO1xuXG4vLyAyMy4xIE1hcCBPYmplY3RzXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKShNQVAsIGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIE1hcCgpIHsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCB7XG4gIC8vIDIzLjEuMy42IE1hcC5wcm90b3R5cGUuZ2V0KGtleSlcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gc3Ryb25nLmdldEVudHJ5KHZhbGlkYXRlKHRoaXMsIE1BUCksIGtleSk7XG4gICAgcmV0dXJuIGVudHJ5ICYmIGVudHJ5LnY7XG4gIH0sXG4gIC8vIDIzLjEuMy45IE1hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpXG4gIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICByZXR1cm4gc3Ryb25nLmRlZih2YWxpZGF0ZSh0aGlzLCBNQVApLCBrZXkgPT09IDAgPyAwIDoga2V5LCB2YWx1ZSk7XG4gIH1cbn0sIHN0cm9uZywgdHJ1ZSk7XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gcmVxdWlyZSgnLi9fbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDLCB4KSB7XG4gIGFuT2JqZWN0KEMpO1xuICBpZiAoaXNPYmplY3QoeCkgJiYgeC5jb25zdHJ1Y3RvciA9PT0gQykgcmV0dXJuIHg7XG4gIHZhciBwcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5LmYoQyk7XG4gIHZhciByZXNvbHZlID0gcHJvbWlzZUNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgcmVzb2x2ZSh4KTtcbiAgcmV0dXJuIHByb21pc2VDYXBhYmlsaXR5LnByb21pc2U7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiB7IGU6IGZhbHNlLCB2OiBleGVjKCkgfTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB7IGU6IHRydWUsIHY6IGUgfTtcbiAgfVxufTtcbiIsIi8vIDIxLjIuNS4zIGdldCBSZWdFeHAucHJvdG90eXBlLmZsYWdzKClcbmlmIChyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmIC8uL2cuZmxhZ3MgIT0gJ2cnKSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mKFJlZ0V4cC5wcm90b3R5cGUsICdmbGFncycsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IHJlcXVpcmUoJy4vX2ZsYWdzJylcbn0pO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZG9uZSwgdmFsdWUpIHtcbiAgcmV0dXJuIHsgdmFsdWU6IHZhbHVlLCBkb25lOiAhIWRvbmUgfTtcbn07XG4iLCIvLyAyMi4xLjMuMyBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0LCBlbmQgPSB0aGlzLmxlbmd0aClcbid1c2Ugc3RyaWN0JztcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBbXS5jb3B5V2l0aGluIHx8IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0IC8qID0gMCAqLywgc3RhcnQgLyogPSAwLCBlbmQgPSBAbGVuZ3RoICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gIHZhciBsZW4gPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gIHZhciB0byA9IHRvQWJzb2x1dGVJbmRleCh0YXJnZXQsIGxlbik7XG4gIHZhciBmcm9tID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW4pO1xuICB2YXIgZW5kID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gIHZhciBjb3VudCA9IE1hdGgubWluKChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbikpIC0gZnJvbSwgbGVuIC0gdG8pO1xuICB2YXIgaW5jID0gMTtcbiAgaWYgKGZyb20gPCB0byAmJiB0byA8IGZyb20gKyBjb3VudCkge1xuICAgIGluYyA9IC0xO1xuICAgIGZyb20gKz0gY291bnQgLSAxO1xuICAgIHRvICs9IGNvdW50IC0gMTtcbiAgfVxuICB3aGlsZSAoY291bnQtLSA+IDApIHtcbiAgICBpZiAoZnJvbSBpbiBPKSBPW3RvXSA9IE9bZnJvbV07XG4gICAgZWxzZSBkZWxldGUgT1t0b107XG4gICAgdG8gKz0gaW5jO1xuICAgIGZyb20gKz0gaW5jO1xuICB9IHJldHVybiBPO1xufTtcbiIsInZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIGNhbGxiYWNrZm4sIGFMZW4sIG1lbW8sIGlzUmlnaHQpIHtcbiAgYUZ1bmN0aW9uKGNhbGxiYWNrZm4pO1xuICB2YXIgTyA9IHRvT2JqZWN0KHRoYXQpO1xuICB2YXIgc2VsZiA9IElPYmplY3QoTyk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gIHZhciBpbmRleCA9IGlzUmlnaHQgPyBsZW5ndGggLSAxIDogMDtcbiAgdmFyIGkgPSBpc1JpZ2h0ID8gLTEgOiAxO1xuICBpZiAoYUxlbiA8IDIpIGZvciAoOzspIHtcbiAgICBpZiAoaW5kZXggaW4gc2VsZikge1xuICAgICAgbWVtbyA9IHNlbGZbaW5kZXhdO1xuICAgICAgaW5kZXggKz0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBpbmRleCArPSBpO1xuICAgIGlmIChpc1JpZ2h0ID8gaW5kZXggPCAwIDogbGVuZ3RoIDw9IGluZGV4KSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ1JlZHVjZSBvZiBlbXB0eSBhcnJheSB3aXRoIG5vIGluaXRpYWwgdmFsdWUnKTtcbiAgICB9XG4gIH1cbiAgZm9yICg7aXNSaWdodCA/IGluZGV4ID49IDAgOiBsZW5ndGggPiBpbmRleDsgaW5kZXggKz0gaSkgaWYgKGluZGV4IGluIHNlbGYpIHtcbiAgICBtZW1vID0gY2FsbGJhY2tmbihtZW1vLCBzZWxmW2luZGV4XSwgaW5kZXgsIE8pO1xuICB9XG4gIHJldHVybiBtZW1vO1xufTtcbiIsIi8vIGNhbGwgc29tZXRoaW5nIG9uIGl0ZXJhdG9yIHN0ZXAgd2l0aCBzYWZlIGNsb3Npbmcgb24gZXJyb3JcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmF0b3IsIGZuLCB2YWx1ZSwgZW50cmllcykge1xuICB0cnkge1xuICAgIHJldHVybiBlbnRyaWVzID8gZm4oYW5PYmplY3QodmFsdWUpWzBdLCB2YWx1ZVsxXSkgOiBmbih2YWx1ZSk7XG4gIC8vIDcuNC42IEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsIGNvbXBsZXRpb24pXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB2YXIgcmV0ID0gaXRlcmF0b3JbJ3JldHVybiddO1xuICAgIGlmIChyZXQgIT09IHVuZGVmaW5lZCkgYW5PYmplY3QocmV0LmNhbGwoaXRlcmF0b3IpKTtcbiAgICB0aHJvdyBlO1xuICB9XG59O1xuIiwiLy8gMjAuMi4yLjE2IE1hdGguZnJvdW5kKHgpXG52YXIgc2lnbiA9IHJlcXVpcmUoJy4vX21hdGgtc2lnbicpO1xudmFyIHBvdyA9IE1hdGgucG93O1xudmFyIEVQU0lMT04gPSBwb3coMiwgLTUyKTtcbnZhciBFUFNJTE9OMzIgPSBwb3coMiwgLTIzKTtcbnZhciBNQVgzMiA9IHBvdygyLCAxMjcpICogKDIgLSBFUFNJTE9OMzIpO1xudmFyIE1JTjMyID0gcG93KDIsIC0xMjYpO1xuXG52YXIgcm91bmRUaWVzVG9FdmVuID0gZnVuY3Rpb24gKG4pIHtcbiAgcmV0dXJuIG4gKyAxIC8gRVBTSUxPTiAtIDEgLyBFUFNJTE9OO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLmZyb3VuZCB8fCBmdW5jdGlvbiBmcm91bmQoeCkge1xuICB2YXIgJGFicyA9IE1hdGguYWJzKHgpO1xuICB2YXIgJHNpZ24gPSBzaWduKHgpO1xuICB2YXIgYSwgcmVzdWx0O1xuICBpZiAoJGFicyA8IE1JTjMyKSByZXR1cm4gJHNpZ24gKiByb3VuZFRpZXNUb0V2ZW4oJGFicyAvIE1JTjMyIC8gRVBTSUxPTjMyKSAqIE1JTjMyICogRVBTSUxPTjMyO1xuICBhID0gKDEgKyBFUFNJTE9OMzIgLyBFUFNJTE9OKSAqICRhYnM7XG4gIHJlc3VsdCA9IGEgLSAoYSAtICRhYnMpO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIGlmIChyZXN1bHQgPiBNQVgzMiB8fCByZXN1bHQgIT0gcmVzdWx0KSByZXR1cm4gJHNpZ24gKiBJbmZpbml0eTtcbiAgcmV0dXJuICRzaWduICogcmVzdWx0O1xufTtcbiIsIi8vIDIwLjIuMi4yMCBNYXRoLmxvZzFwKHgpXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGgubG9nMXAgfHwgZnVuY3Rpb24gbG9nMXAoeCkge1xuICByZXR1cm4gKHggPSAreCkgPiAtMWUtOCAmJiB4IDwgMWUtOCA/IHggLSB4ICogeCAvIDIgOiBNYXRoLmxvZygxICsgeCk7XG59O1xuIiwiLy8gMjAuMS4yLjMgTnVtYmVyLmlzSW50ZWdlcihudW1iZXIpXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzSW50ZWdlcihpdCkge1xuICByZXR1cm4gIWlzT2JqZWN0KGl0KSAmJiBpc0Zpbml0ZShpdCkgJiYgZmxvb3IoaXQpID09PSBpdDtcbn07XG4iLCJ2YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgbXNnKSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ251bWJlcicgJiYgY29mKGl0KSAhPSAnTnVtYmVyJykgdGhyb3cgVHlwZUVycm9yKG1zZyk7XG4gIHJldHVybiAraXQ7XG59O1xuIiwidmFyICRwYXJzZUZsb2F0ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykucGFyc2VGbG9hdDtcbnZhciAkdHJpbSA9IHJlcXVpcmUoJy4vX3N0cmluZy10cmltJykudHJpbTtcblxubW9kdWxlLmV4cG9ydHMgPSAxIC8gJHBhcnNlRmxvYXQocmVxdWlyZSgnLi9fc3RyaW5nLXdzJykgKyAnLTAnKSAhPT0gLUluZmluaXR5ID8gZnVuY3Rpb24gcGFyc2VGbG9hdChzdHIpIHtcbiAgdmFyIHN0cmluZyA9ICR0cmltKFN0cmluZyhzdHIpLCAzKTtcbiAgdmFyIHJlc3VsdCA9ICRwYXJzZUZsb2F0KHN0cmluZyk7XG4gIHJldHVybiByZXN1bHQgPT09IDAgJiYgc3RyaW5nLmNoYXJBdCgwKSA9PSAnLScgPyAtMCA6IHJlc3VsdDtcbn0gOiAkcGFyc2VGbG9hdDtcbiIsInZhciAkcGFyc2VJbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5wYXJzZUludDtcbnZhciAkdHJpbSA9IHJlcXVpcmUoJy4vX3N0cmluZy10cmltJykudHJpbTtcbnZhciB3cyA9IHJlcXVpcmUoJy4vX3N0cmluZy13cycpO1xudmFyIGhleCA9IC9eWy0rXT8wW3hYXS87XG5cbm1vZHVsZS5leHBvcnRzID0gJHBhcnNlSW50KHdzICsgJzA4JykgIT09IDggfHwgJHBhcnNlSW50KHdzICsgJzB4MTYnKSAhPT0gMjIgPyBmdW5jdGlvbiBwYXJzZUludChzdHIsIHJhZGl4KSB7XG4gIHZhciBzdHJpbmcgPSAkdHJpbShTdHJpbmcoc3RyKSwgMyk7XG4gIHJldHVybiAkcGFyc2VJbnQoc3RyaW5nLCAocmFkaXggPj4+IDApIHx8IChoZXgudGVzdChzdHJpbmcpID8gMTYgOiAxMCkpO1xufSA6ICRwYXJzZUludDtcbiIsIi8vIGZhc3QgYXBwbHksIGh0dHA6Ly9qc3BlcmYubG5raXQuY29tL2Zhc3QtYXBwbHkvNVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIGFyZ3MsIHRoYXQpIHtcbiAgdmFyIHVuID0gdGhhdCA9PT0gdW5kZWZpbmVkO1xuICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgY2FzZSAwOiByZXR1cm4gdW4gPyBmbigpXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQpO1xuICAgIGNhc2UgMTogcmV0dXJuIHVuID8gZm4oYXJnc1swXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSk7XG4gICAgY2FzZSAyOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICBjYXNlIDM6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgIGNhc2UgNDogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gIH0gcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3MpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBpbnZva2UgPSByZXF1aXJlKCcuL19pbnZva2UnKTtcbnZhciBhcnJheVNsaWNlID0gW10uc2xpY2U7XG52YXIgZmFjdG9yaWVzID0ge307XG5cbnZhciBjb25zdHJ1Y3QgPSBmdW5jdGlvbiAoRiwgbGVuLCBhcmdzKSB7XG4gIGlmICghKGxlbiBpbiBmYWN0b3JpZXMpKSB7XG4gICAgZm9yICh2YXIgbiA9IFtdLCBpID0gMDsgaSA8IGxlbjsgaSsrKSBuW2ldID0gJ2FbJyArIGkgKyAnXSc7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gICAgZmFjdG9yaWVzW2xlbl0gPSBGdW5jdGlvbignRixhJywgJ3JldHVybiBuZXcgRignICsgbi5qb2luKCcsJykgKyAnKScpO1xuICB9IHJldHVybiBmYWN0b3JpZXNbbGVuXShGLCBhcmdzKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRnVuY3Rpb24uYmluZCB8fCBmdW5jdGlvbiBiaW5kKHRoYXQgLyogLCAuLi5hcmdzICovKSB7XG4gIHZhciBmbiA9IGFGdW5jdGlvbih0aGlzKTtcbiAgdmFyIHBhcnRBcmdzID0gYXJyYXlTbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gIHZhciBib3VuZCA9IGZ1bmN0aW9uICgvKiBhcmdzLi4uICovKSB7XG4gICAgdmFyIGFyZ3MgPSBwYXJ0QXJncy5jb25jYXQoYXJyYXlTbGljZS5jYWxsKGFyZ3VtZW50cykpO1xuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgYm91bmQgPyBjb25zdHJ1Y3QoZm4sIGFyZ3MubGVuZ3RoLCBhcmdzKSA6IGludm9rZShmbiwgYXJncywgdGhhdCk7XG4gIH07XG4gIGlmIChpc09iamVjdChmbi5wcm90b3R5cGUpKSBib3VuZC5wcm90b3R5cGUgPSBmbi5wcm90b3R5cGU7XG4gIHJldHVybiBib3VuZDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyAxOS4xLjIuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlLCAuLi4pXG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciAkYXNzaWduID0gT2JqZWN0LmFzc2lnbjtcblxuLy8gc2hvdWxkIHdvcmsgd2l0aCBzeW1ib2xzIGFuZCBzaG91bGQgaGF2ZSBkZXRlcm1pbmlzdGljIHByb3BlcnR5IG9yZGVyIChWOCBidWcpXG5tb2R1bGUuZXhwb3J0cyA9ICEkYXNzaWduIHx8IHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICB2YXIgQSA9IHt9O1xuICB2YXIgQiA9IHt9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgdmFyIFMgPSBTeW1ib2woKTtcbiAgdmFyIEsgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3QnO1xuICBBW1NdID0gNztcbiAgSy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAoaykgeyBCW2tdID0gazsgfSk7XG4gIHJldHVybiAkYXNzaWduKHt9LCBBKVtTXSAhPSA3IHx8IE9iamVjdC5rZXlzKCRhc3NpZ24oe30sIEIpKS5qb2luKCcnKSAhPSBLO1xufSkgPyBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBzb3VyY2UpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICB2YXIgVCA9IHRvT2JqZWN0KHRhcmdldCk7XG4gIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIHZhciBpc0VudW0gPSBwSUUuZjtcbiAgd2hpbGUgKGFMZW4gPiBpbmRleCkge1xuICAgIHZhciBTID0gSU9iamVjdChhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgIHZhciBrZXlzID0gZ2V0U3ltYm9scyA/IGdldEtleXMoUykuY29uY2F0KGdldFN5bWJvbHMoUykpIDogZ2V0S2V5cyhTKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIGogPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGopIGlmIChpc0VudW0uY2FsbChTLCBrZXkgPSBrZXlzW2orK10pKSBUW2tleV0gPSBTW2tleV07XG4gIH0gcmV0dXJuIFQ7XG59IDogJGFzc2lnbjtcbiIsIi8vIGZhbGxiYWNrIGZvciBJRTExIGJ1Z2d5IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHdpdGggaWZyYW1lIGFuZCB3aW5kb3dcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG52YXIgd2luZG93TmFtZXMgPSB0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc1xuICA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHdpbmRvdykgOiBbXTtcblxudmFyIGdldFdpbmRvd05hbWVzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGdPUE4oaXQpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHdpbmRvd05hbWVzLnNsaWNlKCk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KSB7XG4gIHJldHVybiB3aW5kb3dOYW1lcyAmJiB0b1N0cmluZy5jYWxsKGl0KSA9PSAnW29iamVjdCBXaW5kb3ddJyA/IGdldFdpbmRvd05hbWVzKGl0KSA6IGdPUE4odG9JT2JqZWN0KGl0KSk7XG59O1xuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXlzID0gZ2V0S2V5cyhQcm9wZXJ0aWVzKTtcbiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgaSA9IDA7XG4gIHZhciBQO1xuICB3aGlsZSAobGVuZ3RoID4gaSkgZFAuZihPLCBQID0ga2V5c1tpKytdLCBQcm9wZXJ0aWVzW1BdKTtcbiAgcmV0dXJuIE87XG59O1xuIiwidmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBhcnJheUluZGV4T2YgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKGZhbHNlKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lcykge1xuICB2YXIgTyA9IHRvSU9iamVjdChvYmplY3QpO1xuICB2YXIgaSA9IDA7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gTykgaWYgKGtleSAhPSBJRV9QUk9UTykgaGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgaWYgKGhhcyhPLCBrZXkgPSBuYW1lc1tpKytdKSkge1xuICAgIH5hcnJheUluZGV4T2YocmVzdWx0LCBrZXkpIHx8IHJlc3VsdC5wdXNoKGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJleHBvcnRzLmYgPSByZXF1aXJlKCcuL193a3MnKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnZGl2JyksICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBlbXB0eU9iamVjdCA9IHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBPYmplY3QuZnJlZXplKGVtcHR5T2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlbXB0eU9iamVjdDsiLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSwgWWFob28hIEluYy5cbiAqIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiAqL1xuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6XG4gICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcbiAgICAoZ2xvYmFsLmhvaXN0Tm9uUmVhY3RTdGF0aWNzID0gZmFjdG9yeSgpKTtcbn0odGhpcywgKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgXG4gICAgdmFyIFJFQUNUX1NUQVRJQ1MgPSB7XG4gICAgICAgIGNoaWxkQ29udGV4dFR5cGVzOiB0cnVlLFxuICAgICAgICBjb250ZXh0VHlwZXM6IHRydWUsXG4gICAgICAgIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICAgICAgZGlzcGxheU5hbWU6IHRydWUsXG4gICAgICAgIGdldERlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICAgICAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICAgICAgICBtaXhpbnM6IHRydWUsXG4gICAgICAgIHByb3BUeXBlczogdHJ1ZSxcbiAgICAgICAgdHlwZTogdHJ1ZVxuICAgIH07XG4gICAgXG4gICAgdmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gICAgICAgIG5hbWU6IHRydWUsXG4gICAgICAgIGxlbmd0aDogdHJ1ZSxcbiAgICAgICAgcHJvdG90eXBlOiB0cnVlLFxuICAgICAgICBjYWxsZXI6IHRydWUsXG4gICAgICAgIGNhbGxlZTogdHJ1ZSxcbiAgICAgICAgYXJndW1lbnRzOiB0cnVlLFxuICAgICAgICBhcml0eTogdHJ1ZVxuICAgIH07XG4gICAgXG4gICAgdmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuICAgIHZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG4gICAgdmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4gICAgdmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICAgdmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICAgIHZhciBvYmplY3RQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZiAmJiBnZXRQcm90b3R5cGVPZihPYmplY3QpO1xuICAgIFxuICAgIHJldHVybiBmdW5jdGlvbiBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIHNvdXJjZUNvbXBvbmVudCwgYmxhY2tsaXN0KSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc291cmNlQ29tcG9uZW50ICE9PSAnc3RyaW5nJykgeyAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAob2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGluaGVyaXRlZENvbXBvbmVudCA9IGdldFByb3RvdHlwZU9mKHNvdXJjZUNvbXBvbmVudCk7XG4gICAgICAgICAgICAgICAgaWYgKGluaGVyaXRlZENvbXBvbmVudCAmJiBpbmhlcml0ZWRDb21wb25lbnQgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIGluaGVyaXRlZENvbXBvbmVudCwgYmxhY2tsaXN0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICAgICAgICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgICAgICAgaWYgKCFSRUFDVF9TVEFUSUNTW2tleV0gJiYgIUtOT1dOX1NUQVRJQ1Nba2V5XSAmJiAoIWJsYWNrbGlzdCB8fCAhYmxhY2tsaXN0W2tleV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZUNvbXBvbmVudCwga2V5KTtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHsgLy8gQXZvaWQgZmFpbHVyZXMgZnJvbSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbiAgICB9O1xufSkpKTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN5bWJvbE9ic2VydmFibGVQb255ZmlsbChyb290KSB7XG5cdHZhciByZXN1bHQ7XG5cdHZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcblxuXHRpZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdGlmIChTeW1ib2wub2JzZXJ2YWJsZSkge1xuXHRcdFx0cmVzdWx0ID0gU3ltYm9sLm9ic2VydmFibGU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlc3VsdCA9IFN5bWJvbCgnb2JzZXJ2YWJsZScpO1xuXHRcdFx0U3ltYm9sLm9ic2VydmFibGUgPSByZXN1bHQ7XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdHJlc3VsdCA9ICdAQG9ic2VydmFibGUnO1xuXHR9XG5cblx0cmV0dXJuIHJlc3VsdDtcbn07XG4iLCJpbXBvcnQgc3RyaW5nSGFzaCBmcm9tICdzdHJpbmctaGFzaCc7XG5pbXBvcnQgY2FsYyBmcm9tICdpbmxpbmUtc3R5bGUtcHJlZml4ZXIvc3RhdGljL3BsdWdpbnMvY2FsYyc7XG5pbXBvcnQgY3Jvc3NGYWRlIGZyb20gJ2lubGluZS1zdHlsZS1wcmVmaXhlci9zdGF0aWMvcGx1Z2lucy9jcm9zc0ZhZGUnO1xuaW1wb3J0IGN1cnNvciBmcm9tICdpbmxpbmUtc3R5bGUtcHJlZml4ZXIvc3RhdGljL3BsdWdpbnMvY3Vyc29yJztcbmltcG9ydCBmaWx0ZXIgZnJvbSAnaW5saW5lLXN0eWxlLXByZWZpeGVyL3N0YXRpYy9wbHVnaW5zL2ZpbHRlcic7XG5pbXBvcnQgZmxleCBmcm9tICdpbmxpbmUtc3R5bGUtcHJlZml4ZXIvc3RhdGljL3BsdWdpbnMvZmxleCc7XG5pbXBvcnQgZmxleGJveElFIGZyb20gJ2lubGluZS1zdHlsZS1wcmVmaXhlci9zdGF0aWMvcGx1Z2lucy9mbGV4Ym94SUUnO1xuaW1wb3J0IGZsZXhib3hPbGQgZnJvbSAnaW5saW5lLXN0eWxlLXByZWZpeGVyL3N0YXRpYy9wbHVnaW5zL2ZsZXhib3hPbGQnO1xuaW1wb3J0IGdyYWRpZW50IGZyb20gJ2lubGluZS1zdHlsZS1wcmVmaXhlci9zdGF0aWMvcGx1Z2lucy9ncmFkaWVudCc7XG5pbXBvcnQgaW1hZ2VTZXQgZnJvbSAnaW5saW5lLXN0eWxlLXByZWZpeGVyL3N0YXRpYy9wbHVnaW5zL2ltYWdlU2V0JztcbmltcG9ydCBwb3NpdGlvbiBmcm9tICdpbmxpbmUtc3R5bGUtcHJlZml4ZXIvc3RhdGljL3BsdWdpbnMvcG9zaXRpb24nO1xuaW1wb3J0IHNpemluZyBmcm9tICdpbmxpbmUtc3R5bGUtcHJlZml4ZXIvc3RhdGljL3BsdWdpbnMvc2l6aW5nJztcbmltcG9ydCB0cmFuc2l0aW9uIGZyb20gJ2lubGluZS1zdHlsZS1wcmVmaXhlci9zdGF0aWMvcGx1Z2lucy90cmFuc2l0aW9uJztcbmltcG9ydCBjcmVhdGVQcmVmaXhlciBmcm9tICdpbmxpbmUtc3R5bGUtcHJlZml4ZXIvc3RhdGljL2NyZWF0ZVByZWZpeGVyJztcbmltcG9ydCBhc2FwIGZyb20gJ2FzYXAnO1xuXG4vKiA6OlxudHlwZSBPYmplY3RNYXAgPSB7IFtpZDpzdHJpbmddOiBhbnkgfTtcbiovXG5cbnZhciBVUFBFUkNBU0VfUkUgPSAvKFtBLVpdKS9nO1xudmFyIFVQUEVSQ0FTRV9SRV9UT19LRUJBQiA9IGZ1bmN0aW9uIFVQUEVSQ0FTRV9SRV9UT19LRUJBQihtYXRjaCAvKiA6IHN0cmluZyAqLykge1xuICAgIHJldHVybiAoLyogOiBzdHJpbmcgKi8nLScgKyBTdHJpbmcobWF0Y2gudG9Mb3dlckNhc2UoKSlcbiAgICApO1xufTtcblxudmFyIGtlYmFiaWZ5U3R5bGVOYW1lID0gZnVuY3Rpb24ga2ViYWJpZnlTdHlsZU5hbWUoc3RyaW5nIC8qIDogc3RyaW5nICovKSAvKiA6IHN0cmluZyAqL3tcbiAgICB2YXIgcmVzdWx0ID0gc3RyaW5nLnJlcGxhY2UoVVBQRVJDQVNFX1JFLCBVUFBFUkNBU0VfUkVfVE9fS0VCQUIpO1xuICAgIGlmIChyZXN1bHRbMF0gPT09ICdtJyAmJiByZXN1bHRbMV0gPT09ICdzJyAmJiByZXN1bHRbMl0gPT09ICctJykge1xuICAgICAgICByZXR1cm4gJy0nICsgU3RyaW5nKHJlc3VsdCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59O1xuXG4vKipcbiAqIENTUyBwcm9wZXJ0aWVzIHdoaWNoIGFjY2VwdCBudW1iZXJzIGJ1dCBhcmUgbm90IGluIHVuaXRzIG9mIFwicHhcIi5cbiAqIFRha2VuIGZyb20gUmVhY3QncyBDU1NQcm9wZXJ0eS5qc1xuICovXG52YXIgaXNVbml0bGVzc051bWJlciA9IHtcbiAgICBhbmltYXRpb25JdGVyYXRpb25Db3VudDogdHJ1ZSxcbiAgICBib3JkZXJJbWFnZU91dHNldDogdHJ1ZSxcbiAgICBib3JkZXJJbWFnZVNsaWNlOiB0cnVlLFxuICAgIGJvcmRlckltYWdlV2lkdGg6IHRydWUsXG4gICAgYm94RmxleDogdHJ1ZSxcbiAgICBib3hGbGV4R3JvdXA6IHRydWUsXG4gICAgYm94T3JkaW5hbEdyb3VwOiB0cnVlLFxuICAgIGNvbHVtbkNvdW50OiB0cnVlLFxuICAgIGZsZXg6IHRydWUsXG4gICAgZmxleEdyb3c6IHRydWUsXG4gICAgZmxleFBvc2l0aXZlOiB0cnVlLFxuICAgIGZsZXhTaHJpbms6IHRydWUsXG4gICAgZmxleE5lZ2F0aXZlOiB0cnVlLFxuICAgIGZsZXhPcmRlcjogdHJ1ZSxcbiAgICBncmlkUm93OiB0cnVlLFxuICAgIGdyaWRDb2x1bW46IHRydWUsXG4gICAgZm9udFdlaWdodDogdHJ1ZSxcbiAgICBsaW5lQ2xhbXA6IHRydWUsXG4gICAgbGluZUhlaWdodDogdHJ1ZSxcbiAgICBvcGFjaXR5OiB0cnVlLFxuICAgIG9yZGVyOiB0cnVlLFxuICAgIG9ycGhhbnM6IHRydWUsXG4gICAgdGFiU2l6ZTogdHJ1ZSxcbiAgICB3aWRvd3M6IHRydWUsXG4gICAgekluZGV4OiB0cnVlLFxuICAgIHpvb206IHRydWUsXG5cbiAgICAvLyBTVkctcmVsYXRlZCBwcm9wZXJ0aWVzXG4gICAgZmlsbE9wYWNpdHk6IHRydWUsXG4gICAgZmxvb2RPcGFjaXR5OiB0cnVlLFxuICAgIHN0b3BPcGFjaXR5OiB0cnVlLFxuICAgIHN0cm9rZURhc2hhcnJheTogdHJ1ZSxcbiAgICBzdHJva2VEYXNob2Zmc2V0OiB0cnVlLFxuICAgIHN0cm9rZU1pdGVybGltaXQ6IHRydWUsXG4gICAgc3Ryb2tlT3BhY2l0eTogdHJ1ZSxcbiAgICBzdHJva2VXaWR0aDogdHJ1ZVxufTtcblxuLyoqXG4gKiBUYWtlbiBmcm9tIFJlYWN0J3MgQ1NTUHJvcGVydHkuanNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJlZml4IHZlbmRvci1zcGVjaWZpYyBwcmVmaXgsIGVnOiBXZWJraXRcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgc3R5bGUgbmFtZSwgZWc6IHRyYW5zaXRpb25EdXJhdGlvblxuICogQHJldHVybiB7c3RyaW5nfSBzdHlsZSBuYW1lIHByZWZpeGVkIHdpdGggYHByZWZpeGAsIHByb3Blcmx5IGNhbWVsQ2FzZWQsIGVnOlxuICogV2Via2l0VHJhbnNpdGlvbkR1cmF0aW9uXG4gKi9cbmZ1bmN0aW9uIHByZWZpeEtleShwcmVmaXgsIGtleSkge1xuICAgIHJldHVybiBwcmVmaXggKyBrZXkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBrZXkuc3Vic3RyaW5nKDEpO1xufVxuXG4vKipcbiAqIFN1cHBvcnQgc3R5bGUgbmFtZXMgdGhhdCBtYXkgY29tZSBwYXNzZWQgaW4gcHJlZml4ZWQgYnkgYWRkaW5nIHBlcm11dGF0aW9uc1xuICogb2YgdmVuZG9yIHByZWZpeGVzLlxuICogVGFrZW4gZnJvbSBSZWFjdCdzIENTU1Byb3BlcnR5LmpzXG4gKi9cbnZhciBwcmVmaXhlcyA9IFsnV2Via2l0JywgJ21zJywgJ01veicsICdPJ107XG5cbi8vIFVzaW5nIE9iamVjdC5rZXlzIGhlcmUsIG9yIGVsc2UgdGhlIHZhbmlsbGEgZm9yLWluIGxvb3AgbWFrZXMgSUU4IGdvIGludG8gYW5cbi8vIGluZmluaXRlIGxvb3AsIGJlY2F1c2UgaXQgaXRlcmF0ZXMgb3ZlciB0aGUgbmV3bHkgYWRkZWQgcHJvcHMgdG9vLlxuLy8gVGFrZW4gZnJvbSBSZWFjdCdzIENTU1Byb3BlcnR5LmpzXG5PYmplY3Qua2V5cyhpc1VuaXRsZXNzTnVtYmVyKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgcHJlZml4ZXMuZm9yRWFjaChmdW5jdGlvbiAocHJlZml4KSB7XG4gICAgICAgIGlzVW5pdGxlc3NOdW1iZXJbcHJlZml4S2V5KHByZWZpeCwgcHJvcCldID0gaXNVbml0bGVzc051bWJlcltwcm9wXTtcbiAgICB9KTtcbn0pO1xuXG52YXIgc3RyaW5naWZ5VmFsdWUgPSBmdW5jdGlvbiBzdHJpbmdpZnlWYWx1ZShrZXkgLyogOiBzdHJpbmcgKi9cbiwgcHJvcCAvKiA6IGFueSAqL1xuKSAvKiA6IHN0cmluZyAqL3tcbiAgICBpZiAodHlwZW9mIHByb3AgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgaWYgKGlzVW5pdGxlc3NOdW1iZXJba2V5XSkge1xuICAgICAgICAgICAgcmV0dXJuIFwiXCIgKyBwcm9wO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHByb3AgKyBcInB4XCI7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gJycgKyBwcm9wO1xuICAgIH1cbn07XG5cbnZhciBzdHJpbmdpZnlBbmRJbXBvcnRhbnRpZnlWYWx1ZSA9IGZ1bmN0aW9uIHN0cmluZ2lmeUFuZEltcG9ydGFudGlmeVZhbHVlKGtleSAvKiA6IHN0cmluZyAqL1xuLCBwcm9wIC8qIDogYW55ICovXG4pIHtcbiAgICByZXR1cm4gKC8qIDogc3RyaW5nICovaW1wb3J0YW50aWZ5KHN0cmluZ2lmeVZhbHVlKGtleSwgcHJvcCkpXG4gICAgKTtcbn07XG5cbi8vIFR1cm4gYSBzdHJpbmcgaW50byBhIGhhc2ggc3RyaW5nIG9mIGJhc2UtMzYgdmFsdWVzICh1c2luZyBsZXR0ZXJzIGFuZCBudW1iZXJzKVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG52YXIgaGFzaFN0cmluZyA9IGZ1bmN0aW9uIGhhc2hTdHJpbmcoc3RyaW5nIC8qIDogc3RyaW5nICovLCBrZXkgLyogOiA/c3RyaW5nICovKSB7XG4gICAgcmV0dXJuICgvKiBzdHJpbmcgKi9zdHJpbmdIYXNoKHN0cmluZykudG9TdHJpbmcoMzYpXG4gICAgKTtcbn07XG5cbi8vIEhhc2ggYSBqYXZhc2NyaXB0IG9iamVjdCB1c2luZyBKU09OLnN0cmluZ2lmeS4gVGhpcyBpcyB2ZXJ5IGZhc3QsIGFib3V0IDNcbi8vIG1pY3Jvc2Vjb25kcyBvbiBteSBjb21wdXRlciBmb3IgYSBzYW1wbGUgb2JqZWN0OlxuLy8gaHR0cDovL2pzcGVyZi5jb20vdGVzdC1oYXNoZm52MzJhLWhhc2gvNVxuLy9cbi8vIE5vdGUgdGhhdCB0aGlzIHVzZXMgSlNPTi5zdHJpbmdpZnkgdG8gc3RyaW5naWZ5IHRoZSBvYmplY3RzIHNvIGluIG9yZGVyIGZvclxuLy8gdGhpcyB0byBwcm9kdWNlIGNvbnNpc3RlbnQgaGFzaGVzIGJyb3dzZXJzIG5lZWQgdG8gaGF2ZSBhIGNvbnNpc3RlbnRcbi8vIG9yZGVyaW5nIG9mIG9iamVjdHMuIEJlbiBBbHBlcnQgc2F5cyB0aGF0IEZhY2Vib29rIGRlcGVuZHMgb24gdGhpcywgc28gd2Vcbi8vIGNhbiBwcm9iYWJseSBkZXBlbmQgb24gdGhpcyB0b28uXG52YXIgaGFzaE9iamVjdCA9IGZ1bmN0aW9uIGhhc2hPYmplY3Qob2JqZWN0IC8qIDogT2JqZWN0TWFwICovKSB7XG4gICAgcmV0dXJuICgvKiA6IHN0cmluZyAqL2hhc2hTdHJpbmcoSlNPTi5zdHJpbmdpZnkob2JqZWN0KSlcbiAgICApO1xufTtcblxuLy8gR2l2ZW4gYSBzaW5nbGUgc3R5bGUgdmFsdWUgc3RyaW5nIGxpa2UgdGhlIFwiYlwiIGZyb20gXCJhOiBiO1wiLCBhZGRzICFpbXBvcnRhbnRcbi8vIHRvIGdlbmVyYXRlIFwiYiAhaW1wb3J0YW50XCIuXG52YXIgaW1wb3J0YW50aWZ5ID0gZnVuY3Rpb24gaW1wb3J0YW50aWZ5KHN0cmluZyAvKiA6IHN0cmluZyAqLykge1xuICAgIHJldHVybiAoLyogOiBzdHJpbmcgKi9cbiAgICAgICAgLy8gQnJhY2tldCBzdHJpbmcgY2hhcmFjdGVyIGFjY2VzcyBpcyB2ZXJ5IGZhc3QsIGFuZCBpbiB0aGUgZGVmYXVsdCBjYXNlIHdlXG4gICAgICAgIC8vIG5vcm1hbGx5IGRvbid0IGV4cGVjdCB0aGVyZSB0byBiZSBcIiFpbXBvcnRhbnRcIiBhdCB0aGUgZW5kIG9mIHRoZSBzdHJpbmdcbiAgICAgICAgLy8gc28gd2UgY2FuIHVzZSB0aGlzIHNpbXBsZSBjaGVjayB0byB0YWtlIGFuIG9wdGltaXplZCBwYXRoLiBJZiB0aGVyZVxuICAgICAgICAvLyBoYXBwZW5zIHRvIGJlIGEgXCIhXCIgaW4gdGhpcyBwb3NpdGlvbiwgd2UgZm9sbG93IHVwIHdpdGggYSBtb3JlIHRob3JvdWdoXG4gICAgICAgIC8vIGNoZWNrLlxuICAgICAgICBzdHJpbmdbc3RyaW5nLmxlbmd0aCAtIDEwXSA9PT0gJyEnICYmIHN0cmluZy5zbGljZSgtMTEpID09PSAnICFpbXBvcnRhbnQnID8gc3RyaW5nIDogU3RyaW5nKHN0cmluZykgKyAnICFpbXBvcnRhbnQnXG4gICAgKTtcbn07XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIE1BUF9FWElTVFMgPSB0eXBlb2YgTWFwICE9PSAndW5kZWZpbmVkJztcblxudmFyIE9yZGVyZWRFbGVtZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAvKiA6OlxuICAgIGVsZW1lbnRzOiB7W3N0cmluZ106IGFueX07XG4gICAga2V5T3JkZXI6IHN0cmluZ1tdO1xuICAgICovXG5cbiAgICBmdW5jdGlvbiBPcmRlcmVkRWxlbWVudHMoKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBPcmRlcmVkRWxlbWVudHMpO1xuXG4gICAgICAgIHRoaXMuZWxlbWVudHMgPSB7fTtcbiAgICAgICAgdGhpcy5rZXlPcmRlciA9IFtdO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhPcmRlcmVkRWxlbWVudHMsIFt7XG4gICAgICAgIGtleTogJ2ZvckVhY2gnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFjayAvKiA6IChzdHJpbmcsIGFueSkgPT4gdm9pZCAqLykge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5rZXlPcmRlci5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAvLyAodmFsdWUsIGtleSkgdG8gbWF0Y2ggTWFwJ3MgQVBJXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHRoaXMuZWxlbWVudHNbdGhpcy5rZXlPcmRlcltpXV0sIHRoaXMua2V5T3JkZXJbaV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGZvckVhY2g7XG4gICAgICAgIH0oKVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnc2V0JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIHNldChrZXkgLyogOiBzdHJpbmcgKi8sIHZhbHVlIC8qIDogYW55ICovLCBzaG91bGRSZW9yZGVyIC8qIDogP2Jvb2xlYW4gKi8pIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZWxlbWVudHMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmtleU9yZGVyLnB1c2goa2V5KTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNob3VsZFJlb3JkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5rZXlPcmRlci5pbmRleE9mKGtleSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMua2V5T3JkZXIuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5rZXlPcmRlci5wdXNoKGtleSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50c1trZXldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoTUFQX0VYSVNUUyAmJiB2YWx1ZSBpbnN0YW5jZW9mIE1hcCB8fCB2YWx1ZSBpbnN0YW5jZW9mIE9yZGVyZWRFbGVtZW50cykge1xuICAgICAgICAgICAgICAgICAgICAvLyBXZSBoYXZlIGZvdW5kIGEgbmVzdGVkIE1hcCwgc28gd2UgbmVlZCB0byByZWN1cnNlIHNvIHRoYXQgYWxsXG4gICAgICAgICAgICAgICAgICAgIC8vIG9mIHRoZSBuZXN0ZWQgb2JqZWN0cyBhbmQgTWFwcyBhcmUgbWVyZ2VkIHByb3Blcmx5LlxuICAgICAgICAgICAgICAgICAgICB2YXIgbmVzdGVkID0gdGhpcy5lbGVtZW50cy5oYXNPd25Qcm9wZXJ0eShrZXkpID8gdGhpcy5lbGVtZW50c1trZXldIDogbmV3IE9yZGVyZWRFbGVtZW50cygpO1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXN0ZWQuc2V0KGtleSwgdmFsdWUsIHNob3VsZFJlb3JkZXIpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50c1trZXldID0gbmVzdGVkO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSAmJiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZih2YWx1ZSkpID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICAvLyBXZSBoYXZlIGZvdW5kIGEgbmVzdGVkIG9iamVjdCwgc28gd2UgbmVlZCB0byByZWN1cnNlIHNvIHRoYXQgYWxsXG4gICAgICAgICAgICAgICAgICAgIC8vIG9mIHRoZSBuZXN0ZWQgb2JqZWN0cyBhbmQgTWFwcyBhcmUgbWVyZ2VkIHByb3Blcmx5LlxuICAgICAgICAgICAgICAgICAgICB2YXIgX25lc3RlZCA9IHRoaXMuZWxlbWVudHMuaGFzT3duUHJvcGVydHkoa2V5KSA/IHRoaXMuZWxlbWVudHNba2V5XSA6IG5ldyBPcmRlcmVkRWxlbWVudHMoKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX25lc3RlZC5zZXQoa2V5c1tpXSwgdmFsdWVba2V5c1tpXV0sIHNob3VsZFJlb3JkZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudHNba2V5XSA9IF9uZXN0ZWQ7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnRzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHNldDtcbiAgICAgICAgfSgpXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdnZXQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0KGtleSAvKiA6IHN0cmluZyAqLykgLyogOiBhbnkgKi97XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudHNba2V5XTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGdldDtcbiAgICAgICAgfSgpXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdoYXMnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZnVuY3Rpb24gaGFzKGtleSAvKiA6IHN0cmluZyAqLykgLyogOiBib29sZWFuICove1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnRzLmhhc093blByb3BlcnR5KGtleSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBoYXM7XG4gICAgICAgIH0oKVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnYWRkU3R5bGVUeXBlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGFkZFN0eWxlVHlwZShzdHlsZVR5cGUgLyogOiBhbnkgKi8pIC8qIDogdm9pZCAqL3tcbiAgICAgICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgICAgICAgICAgaWYgKE1BUF9FWElTVFMgJiYgc3R5bGVUeXBlIGluc3RhbmNlb2YgTWFwIHx8IHN0eWxlVHlwZSBpbnN0YW5jZW9mIE9yZGVyZWRFbGVtZW50cykge1xuICAgICAgICAgICAgICAgICAgICBzdHlsZVR5cGUuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuc2V0KGtleSwgdmFsdWUsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHN0eWxlVHlwZSk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXQoa2V5c1tpXSwgc3R5bGVUeXBlW2tleXNbaV1dLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGFkZFN0eWxlVHlwZTtcbiAgICAgICAgfSgpXG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIE9yZGVyZWRFbGVtZW50cztcbn0oKTtcblxudmFyIHcgPSBbXCJXZWJraXRcIl07XG52YXIgbSA9IFtcIk1velwiXTtcbnZhciBtcyA9IFtcIm1zXCJdO1xudmFyIHdtID0gW1wiV2Via2l0XCIsIFwiTW96XCJdO1xudmFyIHdtcyA9IFtcIldlYmtpdFwiLCBcIm1zXCJdO1xudmFyIHdtbXMgPSBbXCJXZWJraXRcIiwgXCJNb3pcIiwgXCJtc1wiXTtcblxudmFyIHN0YXRpY1ByZWZpeERhdGEgPSB7XG4gIHBsdWdpbnM6IFtjYWxjLCBjcm9zc0ZhZGUsIGN1cnNvciwgZmlsdGVyLCBmbGV4LCBmbGV4Ym94SUUsIGZsZXhib3hPbGQsIGdyYWRpZW50LCBpbWFnZVNldCwgcG9zaXRpb24sIHNpemluZywgdHJhbnNpdGlvbl0sXG4gIHByZWZpeE1hcDogeyBcInRyYW5zZm9ybVwiOiB3bXMsIFwidHJhbnNmb3JtT3JpZ2luXCI6IHdtcywgXCJ0cmFuc2Zvcm1PcmlnaW5YXCI6IHdtcywgXCJ0cmFuc2Zvcm1PcmlnaW5ZXCI6IHdtcywgXCJiYWNrZmFjZVZpc2liaWxpdHlcIjogdywgXCJwZXJzcGVjdGl2ZVwiOiB3LCBcInBlcnNwZWN0aXZlT3JpZ2luXCI6IHcsIFwidHJhbnNmb3JtU3R5bGVcIjogdywgXCJ0cmFuc2Zvcm1PcmlnaW5aXCI6IHcsIFwiYW5pbWF0aW9uXCI6IHcsIFwiYW5pbWF0aW9uRGVsYXlcIjogdywgXCJhbmltYXRpb25EaXJlY3Rpb25cIjogdywgXCJhbmltYXRpb25GaWxsTW9kZVwiOiB3LCBcImFuaW1hdGlvbkR1cmF0aW9uXCI6IHcsIFwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnRcIjogdywgXCJhbmltYXRpb25OYW1lXCI6IHcsIFwiYW5pbWF0aW9uUGxheVN0YXRlXCI6IHcsIFwiYW5pbWF0aW9uVGltaW5nRnVuY3Rpb25cIjogdywgXCJhcHBlYXJhbmNlXCI6IHdtLCBcInVzZXJTZWxlY3RcIjogd21tcywgXCJmb250S2VybmluZ1wiOiB3LCBcInRleHRFbXBoYXNpc1Bvc2l0aW9uXCI6IHcsIFwidGV4dEVtcGhhc2lzXCI6IHcsIFwidGV4dEVtcGhhc2lzU3R5bGVcIjogdywgXCJ0ZXh0RW1waGFzaXNDb2xvclwiOiB3LCBcImJveERlY29yYXRpb25CcmVha1wiOiB3LCBcImNsaXBQYXRoXCI6IHcsIFwibWFza0ltYWdlXCI6IHcsIFwibWFza01vZGVcIjogdywgXCJtYXNrUmVwZWF0XCI6IHcsIFwibWFza1Bvc2l0aW9uXCI6IHcsIFwibWFza0NsaXBcIjogdywgXCJtYXNrT3JpZ2luXCI6IHcsIFwibWFza1NpemVcIjogdywgXCJtYXNrQ29tcG9zaXRlXCI6IHcsIFwibWFza1wiOiB3LCBcIm1hc2tCb3JkZXJTb3VyY2VcIjogdywgXCJtYXNrQm9yZGVyTW9kZVwiOiB3LCBcIm1hc2tCb3JkZXJTbGljZVwiOiB3LCBcIm1hc2tCb3JkZXJXaWR0aFwiOiB3LCBcIm1hc2tCb3JkZXJPdXRzZXRcIjogdywgXCJtYXNrQm9yZGVyUmVwZWF0XCI6IHcsIFwibWFza0JvcmRlclwiOiB3LCBcIm1hc2tUeXBlXCI6IHcsIFwidGV4dERlY29yYXRpb25TdHlsZVwiOiB3bSwgXCJ0ZXh0RGVjb3JhdGlvblNraXBcIjogd20sIFwidGV4dERlY29yYXRpb25MaW5lXCI6IHdtLCBcInRleHREZWNvcmF0aW9uQ29sb3JcIjogd20sIFwiZmlsdGVyXCI6IHcsIFwiZm9udEZlYXR1cmVTZXR0aW5nc1wiOiB3bSwgXCJicmVha0FmdGVyXCI6IHdtbXMsIFwiYnJlYWtCZWZvcmVcIjogd21tcywgXCJicmVha0luc2lkZVwiOiB3bW1zLCBcImNvbHVtbkNvdW50XCI6IHdtLCBcImNvbHVtbkZpbGxcIjogd20sIFwiY29sdW1uR2FwXCI6IHdtLCBcImNvbHVtblJ1bGVcIjogd20sIFwiY29sdW1uUnVsZUNvbG9yXCI6IHdtLCBcImNvbHVtblJ1bGVTdHlsZVwiOiB3bSwgXCJjb2x1bW5SdWxlV2lkdGhcIjogd20sIFwiY29sdW1uc1wiOiB3bSwgXCJjb2x1bW5TcGFuXCI6IHdtLCBcImNvbHVtbldpZHRoXCI6IHdtLCBcIndyaXRpbmdNb2RlXCI6IHdtcywgXCJmbGV4XCI6IHdtcywgXCJmbGV4QmFzaXNcIjogdywgXCJmbGV4RGlyZWN0aW9uXCI6IHdtcywgXCJmbGV4R3Jvd1wiOiB3LCBcImZsZXhGbG93XCI6IHdtcywgXCJmbGV4U2hyaW5rXCI6IHcsIFwiZmxleFdyYXBcIjogd21zLCBcImFsaWduQ29udGVudFwiOiB3LCBcImFsaWduSXRlbXNcIjogdywgXCJhbGlnblNlbGZcIjogdywgXCJqdXN0aWZ5Q29udGVudFwiOiB3LCBcIm9yZGVyXCI6IHcsIFwidHJhbnNpdGlvbkRlbGF5XCI6IHcsIFwidHJhbnNpdGlvbkR1cmF0aW9uXCI6IHcsIFwidHJhbnNpdGlvblByb3BlcnR5XCI6IHcsIFwidHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uXCI6IHcsIFwiYmFja2Ryb3BGaWx0ZXJcIjogdywgXCJzY3JvbGxTbmFwVHlwZVwiOiB3bXMsIFwic2Nyb2xsU25hcFBvaW50c1hcIjogd21zLCBcInNjcm9sbFNuYXBQb2ludHNZXCI6IHdtcywgXCJzY3JvbGxTbmFwRGVzdGluYXRpb25cIjogd21zLCBcInNjcm9sbFNuYXBDb29yZGluYXRlXCI6IHdtcywgXCJzaGFwZUltYWdlVGhyZXNob2xkXCI6IHcsIFwic2hhcGVJbWFnZU1hcmdpblwiOiB3LCBcInNoYXBlSW1hZ2VPdXRzaWRlXCI6IHcsIFwiaHlwaGVuc1wiOiB3bW1zLCBcImZsb3dJbnRvXCI6IHdtcywgXCJmbG93RnJvbVwiOiB3bXMsIFwicmVnaW9uRnJhZ21lbnRcIjogd21zLCBcImJveFNpemluZ1wiOiBtLCBcInRleHRBbGlnbkxhc3RcIjogbSwgXCJ0YWJTaXplXCI6IG0sIFwid3JhcEZsb3dcIjogbXMsIFwid3JhcFRocm91Z2hcIjogbXMsIFwid3JhcE1hcmdpblwiOiBtcywgXCJ0b3VjaEFjdGlvblwiOiBtcywgXCJncmlkVGVtcGxhdGVDb2x1bW5zXCI6IG1zLCBcImdyaWRUZW1wbGF0ZVJvd3NcIjogbXMsIFwiZ3JpZFRlbXBsYXRlQXJlYXNcIjogbXMsIFwiZ3JpZFRlbXBsYXRlXCI6IG1zLCBcImdyaWRBdXRvQ29sdW1uc1wiOiBtcywgXCJncmlkQXV0b1Jvd3NcIjogbXMsIFwiZ3JpZEF1dG9GbG93XCI6IG1zLCBcImdyaWRcIjogbXMsIFwiZ3JpZFJvd1N0YXJ0XCI6IG1zLCBcImdyaWRDb2x1bW5TdGFydFwiOiBtcywgXCJncmlkUm93RW5kXCI6IG1zLCBcImdyaWRSb3dcIjogbXMsIFwiZ3JpZENvbHVtblwiOiBtcywgXCJncmlkQ29sdW1uRW5kXCI6IG1zLCBcImdyaWRDb2x1bW5HYXBcIjogbXMsIFwiZ3JpZFJvd0dhcFwiOiBtcywgXCJncmlkQXJlYVwiOiBtcywgXCJncmlkR2FwXCI6IG1zLCBcInRleHRTaXplQWRqdXN0XCI6IHdtcywgXCJib3JkZXJJbWFnZVwiOiB3LCBcImJvcmRlckltYWdlT3V0c2V0XCI6IHcsIFwiYm9yZGVySW1hZ2VSZXBlYXRcIjogdywgXCJib3JkZXJJbWFnZVNsaWNlXCI6IHcsIFwiYm9yZGVySW1hZ2VTb3VyY2VcIjogdywgXCJib3JkZXJJbWFnZVdpZHRoXCI6IHcgfVxufTtcblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfSBlbHNlIHsgcmV0dXJuIEFycmF5LmZyb20oYXJyKTsgfSB9XG5cbnZhciBwcmVmaXhBbGwgPSBjcmVhdGVQcmVmaXhlcihzdGF0aWNQcmVmaXhEYXRhKTtcblxuLyogOjpcbmltcG9ydCB0eXBlIHsgU2hlZXREZWZpbml0aW9uIH0gZnJvbSAnLi9pbmRleC5qcyc7XG50eXBlIFN0cmluZ0hhbmRsZXJzID0geyBbaWQ6c3RyaW5nXTogRnVuY3Rpb24gfTtcbnR5cGUgU2VsZWN0b3JDYWxsYmFjayA9IChzZWxlY3Rvcjogc3RyaW5nKSA9PiBzdHJpbmdbXTtcbmV4cG9ydCB0eXBlIFNlbGVjdG9ySGFuZGxlciA9IChcbiAgICBzZWxlY3Rvcjogc3RyaW5nLFxuICAgIGJhc2VTZWxlY3Rvcjogc3RyaW5nLFxuICAgIGNhbGxiYWNrOiBTZWxlY3RvckNhbGxiYWNrXG4pID0+IHN0cmluZ1tdIHwgc3RyaW5nIHwgbnVsbDtcbiovXG5cbi8qKlxuICogYHNlbGVjdG9ySGFuZGxlcnNgIGFyZSBmdW5jdGlvbnMgd2hpY2ggaGFuZGxlIHNwZWNpYWwgc2VsZWN0b3JzIHdoaWNoIGFjdFxuICogZGlmZmVyZW50bHkgdGhhbiBub3JtYWwgc3R5bGUgZGVmaW5pdGlvbnMuIFRoZXNlIGZ1bmN0aW9ucyBsb29rIGF0IHRoZVxuICogY3VycmVudCBzZWxlY3RvciBhbmQgY2FuIGdlbmVyYXRlIENTUyBmb3IgdGhlIHN0eWxlcyBpbiB0aGVpciBzdWJ0cmVlIGJ5XG4gKiBjYWxsaW5nIHRoZSBjYWxsYmFjayB3aXRoIGEgbmV3IHNlbGVjdG9yLlxuICpcbiAqIEZvciBleGFtcGxlLCB3aGVuIGdlbmVyYXRpbmcgc3R5bGVzIHdpdGggYSBiYXNlIHNlbGVjdG9yIG9mICcuZm9vJyBhbmQgdGhlXG4gKiBmb2xsb3dpbmcgc3R5bGVzIG9iamVjdDpcbiAqXG4gKiAgIHtcbiAqICAgICAnOm50aC1jaGlsZCgybiknOiB7XG4gKiAgICAgICAnOmhvdmVyJzoge1xuICogICAgICAgICBjb2xvcjogJ3JlZCdcbiAqICAgICAgIH1cbiAqICAgICB9XG4gKiAgIH1cbiAqXG4gKiB3aGVuIHdlIHJlYWNoIHRoZSAnOmhvdmVyJyBzdHlsZSwgd2Ugd291bGQgY2FsbCBvdXIgc2VsZWN0b3IgaGFuZGxlcnMgbGlrZVxuICpcbiAqICAgaGFuZGxlcignOmhvdmVyJywgJy5mb286bnRoLWNoaWxkKDJuKScsIGNhbGxiYWNrKVxuICpcbiAqIFNpbmNlIG91ciBgcHNldWRvU2VsZWN0b3JzYCBoYW5kbGVzICc6aG92ZXInIHN0eWxlcywgdGhhdCBoYW5kbGVyIHdvdWxkIGNhbGxcbiAqIHRoZSBjYWxsYmFjayBsaWtlXG4gKlxuICogICBjYWxsYmFjaygnLmZvbzpudGgtY2hpbGQoMm4pOmhvdmVyJylcbiAqXG4gKiB0byBnZW5lcmF0ZSBpdHMgc3VidHJlZSBgeyBjb2xvcjogJ3JlZCcgfWAgc3R5bGVzIHdpdGggYVxuICogJy5mb286bnRoLWNoaWxkKDJuKTpob3Zlcicgc2VsZWN0b3IuIFRoZSBjYWxsYmFjayB3b3VsZCByZXR1cm4gYW4gYXJyYXkgb2YgQ1NTXG4gKiBydWxlcyBsaWtlXG4gKlxuICogICBbJy5mb286bnRoLWNoaWxkKDJuKTpob3Zlcntjb2xvcjpyZWQgIWltcG9ydGFudDt9J11cbiAqXG4gKiBhbmQgdGhlIGhhbmRsZXIgd291bGQgdGhlbiByZXR1cm4gdGhhdCByZXN1bHRpbmcgQ1NTLlxuICpcbiAqIGBkZWZhdWx0U2VsZWN0b3JIYW5kbGVyc2AgaXMgdGhlIGxpc3Qgb2YgZGVmYXVsdCBoYW5kbGVycyB1c2VkIGluIGEgY2FsbCB0b1xuICogYGdlbmVyYXRlQ1NTYC5cbiAqXG4gKiBAbmFtZSBTZWxlY3RvckhhbmRsZXJcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtzdHJpbmd9IHNlbGVjdG9yOiBUaGUgY3VycmVudGx5IGluc3BlY3RlZCBzZWxlY3Rvci4gJzpob3ZlcicgaW4gdGhlXG4gKiAgICAgZXhhbXBsZSBhYm92ZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlU2VsZWN0b3I6IFRoZSBzZWxlY3RvciBvZiB0aGUgcGFyZW50IHN0eWxlcy5cbiAqICAgICAnLmZvbzpudGgtY2hpbGQoMm4pJyBpbiB0aGUgZXhhbXBsZSBhYm92ZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGdlbmVyYXRlU3VidHJlZVN0eWxlczogQSBmdW5jdGlvbiB3aGljaCBjYW4gYmUgY2FsbGVkIHRvXG4gKiAgICAgZ2VuZXJhdGUgQ1NTIGZvciB0aGUgc3VidHJlZSBvZiBzdHlsZXMgY29ycmVzcG9uZGluZyB0byB0aGUgc2VsZWN0b3IuXG4gKiAgICAgQWNjZXB0cyBhIG5ldyBiYXNlU2VsZWN0b3IgdG8gdXNlIGZvciBnZW5lcmF0aW5nIHRob3NlIHN0eWxlcy5cbiAqIEByZXR1cm5zIHtzdHJpbmdbXSB8IHN0cmluZyB8IG51bGx9IFRoZSBnZW5lcmF0ZWQgQ1NTIGZvciB0aGlzIHNlbGVjdG9yLCBvclxuICogICAgIG51bGwgaWYgd2UgZG9uJ3QgaGFuZGxlIHRoaXMgc2VsZWN0b3IuXG4gKi9cbnZhciBkZWZhdWx0U2VsZWN0b3JIYW5kbGVycyAvKiA6IFNlbGVjdG9ySGFuZGxlcltdICovID0gW1xuLy8gSGFuZGxlIHBzZXVkby1zZWxlY3RvcnMsIGxpa2UgOmhvdmVyIGFuZCA6bnRoLWNoaWxkKDNuKVxuZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIHBzZXVkb1NlbGVjdG9ycyhzZWxlY3RvciwgYmFzZVNlbGVjdG9yLCBnZW5lcmF0ZVN1YnRyZWVTdHlsZXMpIHtcbiAgICAgICAgaWYgKHNlbGVjdG9yWzBdICE9PSBcIjpcIikge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGdlbmVyYXRlU3VidHJlZVN0eWxlcyhiYXNlU2VsZWN0b3IgKyBzZWxlY3Rvcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBzZXVkb1NlbGVjdG9ycztcbn0oKSxcblxuLy8gSGFuZGxlIG1lZGlhIHF1ZXJpZXMgKG9yIGZvbnQtZmFjZXMpXG5mdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gbWVkaWFRdWVyaWVzKHNlbGVjdG9yLCBiYXNlU2VsZWN0b3IsIGdlbmVyYXRlU3VidHJlZVN0eWxlcykge1xuICAgICAgICBpZiAoc2VsZWN0b3JbMF0gIT09IFwiQFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICAvLyBHZW5lcmF0ZSB0aGUgc3R5bGVzIG5vcm1hbGx5LCBhbmQgdGhlbiB3cmFwIHRoZW0gaW4gdGhlIG1lZGlhIHF1ZXJ5LlxuICAgICAgICB2YXIgZ2VuZXJhdGVkID0gZ2VuZXJhdGVTdWJ0cmVlU3R5bGVzKGJhc2VTZWxlY3Rvcik7XG4gICAgICAgIHJldHVybiBbU3RyaW5nKHNlbGVjdG9yKSArICd7JyArIFN0cmluZyhnZW5lcmF0ZWQuam9pbignJykpICsgJ30nXTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVkaWFRdWVyaWVzO1xufSgpXTtcblxuLyoqXG4gKiBHZW5lcmF0ZSBDU1MgZm9yIGEgc2VsZWN0b3IgYW5kIHNvbWUgc3R5bGVzLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gaGFuZGxlcyB0aGUgbWVkaWEgcXVlcmllcyBhbmQgcHNldWRvIHNlbGVjdG9ycyB0aGF0IGNhbiBiZSB1c2VkXG4gKiBpbiBhcGhyb2RpdGUgc3R5bGVzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzZWxlY3RvcjogQSBiYXNlIENTUyBzZWxlY3RvciBmb3IgdGhlIHN0eWxlcyB0byBiZSBnZW5lcmF0ZWRcbiAqICAgICB3aXRoLlxuICogQHBhcmFtIHtPYmplY3R9IHN0eWxlVHlwZXM6IEEgbGlzdCBvZiBwcm9wZXJ0aWVzIG9mIHRoZSByZXR1cm4gdHlwZSBvZlxuICogICAgIFN0eWxlU2hlZXQuY3JlYXRlLCBlLmcuIFtzdHlsZXMucmVkLCBzdHlsZXMuYmx1ZV0uXG4gKiBAcGFyYW0ge0FycmF5LjxTZWxlY3RvckhhbmRsZXI+fSBzZWxlY3RvckhhbmRsZXJzOiBBIGxpc3Qgb2Ygc2VsZWN0b3JcbiAqICAgICBoYW5kbGVycyB0byB1c2UgZm9yIGhhbmRsaW5nIHNwZWNpYWwgc2VsZWN0b3JzLiBTZWVcbiAqICAgICBgZGVmYXVsdFNlbGVjdG9ySGFuZGxlcnNgLlxuICogQHBhcmFtIHN0cmluZ0hhbmRsZXJzOiBTZWUgYGdlbmVyYXRlQ1NTUnVsZXNldGBcbiAqIEBwYXJhbSB1c2VJbXBvcnRhbnQ6IFNlZSBgZ2VuZXJhdGVDU1NSdWxlc2V0YFxuICpcbiAqIFRvIGFjdHVhbGx5IGdlbmVyYXRlIHRoZSBDU1Mgc3BlY2lhbC1jb25zdHJ1Y3QtbGVzcyBzdHlsZXMgYXJlIHBhc3NlZCB0b1xuICogYGdlbmVyYXRlQ1NTUnVsZXNldGAuXG4gKlxuICogRm9yIGluc3RhbmNlLCBhIGNhbGwgdG9cbiAqXG4gKiAgICAgZ2VuZXJhdGVDU1MoXCIuZm9vXCIsIFt7XG4gKiAgICAgICBjb2xvcjogXCJyZWRcIixcbiAqICAgICAgIFwiQG1lZGlhIHNjcmVlblwiOiB7XG4gKiAgICAgICAgIGhlaWdodDogMjAsXG4gKiAgICAgICAgIFwiOmhvdmVyXCI6IHtcbiAqICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IFwiYmxhY2tcIlxuICogICAgICAgICB9XG4gKiAgICAgICB9LFxuICogICAgICAgXCI6YWN0aXZlXCI6IHtcbiAqICAgICAgICAgZm9udFdlaWdodDogXCJib2xkXCJcbiAqICAgICAgIH1cbiAqICAgICB9XSwgZGVmYXVsdFNlbGVjdG9ySGFuZGxlcnMpO1xuICpcbiAqIHdpdGggdGhlIGRlZmF1bHQgYHNlbGVjdG9ySGFuZGxlcnNgIHdpbGwgbWFrZSA1IGNhbGxzIHRvXG4gKiBgZ2VuZXJhdGVDU1NSdWxlc2V0YDpcbiAqXG4gKiAgICAgZ2VuZXJhdGVDU1NSdWxlc2V0KFwiLmZvb1wiLCB7IGNvbG9yOiBcInJlZFwiIH0sIC4uLilcbiAqICAgICBnZW5lcmF0ZUNTU1J1bGVzZXQoXCIuZm9vOmFjdGl2ZVwiLCB7IGZvbnRXZWlnaHQ6IFwiYm9sZFwiIH0sIC4uLilcbiAqICAgICAvLyBUaGVzZSAyIHdpbGwgYmUgd3JhcHBlZCBpbiBAbWVkaWEgc2NyZWVuIHt9XG4gKiAgICAgZ2VuZXJhdGVDU1NSdWxlc2V0KFwiLmZvb1wiLCB7IGhlaWdodDogMjAgfSwgLi4uKVxuICogICAgIGdlbmVyYXRlQ1NTUnVsZXNldChcIi5mb286aG92ZXJcIiwgeyBiYWNrZ3JvdW5kQ29sb3I6IFwiYmxhY2tcIiB9LCAuLi4pXG4gKi9cbnZhciBnZW5lcmF0ZUNTUyA9IGZ1bmN0aW9uIGdlbmVyYXRlQ1NTKHNlbGVjdG9yIC8qIDogc3RyaW5nICovXG4sIHN0eWxlVHlwZXMgLyogOiBTaGVldERlZmluaXRpb25bXSAqL1xuLCBzZWxlY3RvckhhbmRsZXJzIC8qIDogU2VsZWN0b3JIYW5kbGVyW10gKi9cbiwgc3RyaW5nSGFuZGxlcnMgLyogOiBTdHJpbmdIYW5kbGVycyAqL1xuLCB1c2VJbXBvcnRhbnQgLyogOiBib29sZWFuICovXG4pIC8qIDogc3RyaW5nW10gKi97XG4gICAgdmFyIG1lcmdlZCA9IG5ldyBPcmRlcmVkRWxlbWVudHMoKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVUeXBlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBtZXJnZWQuYWRkU3R5bGVUeXBlKHN0eWxlVHlwZXNbaV0pO1xuICAgIH1cblxuICAgIHZhciBwbGFpbkRlY2xhcmF0aW9ucyA9IG5ldyBPcmRlcmVkRWxlbWVudHMoKTtcbiAgICB2YXIgZ2VuZXJhdGVkU3R5bGVzID0gW107XG5cbiAgICAvLyBUT0RPKGVtaWx5KTogYmVuY2htYXJrIHRoaXMgdG8gc2VlIGlmIGEgcGxhaW4gZm9yIGxvb3Agd291bGQgYmUgZmFzdGVyLlxuICAgIG1lcmdlZC5mb3JFYWNoKGZ1bmN0aW9uICh2YWwsIGtleSkge1xuICAgICAgICAvLyBGb3IgZWFjaCBrZXksIHNlZSBpZiBvbmUgb2YgdGhlIHNlbGVjdG9yIGhhbmRsZXJzIHdpbGwgaGFuZGxlIHRoZXNlXG4gICAgICAgIC8vIHN0eWxlcy5cbiAgICAgICAgdmFyIGZvdW5kSGFuZGxlciA9IHNlbGVjdG9ySGFuZGxlcnMuc29tZShmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGhhbmRsZXIoa2V5LCBzZWxlY3RvciwgZnVuY3Rpb24gKG5ld1NlbGVjdG9yKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdlbmVyYXRlQ1NTKG5ld1NlbGVjdG9yLCBbdmFsXSwgc2VsZWN0b3JIYW5kbGVycywgc3RyaW5nSGFuZGxlcnMsIHVzZUltcG9ydGFudCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChyZXN1bHQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBoYW5kbGVyIHJldHVybmVkIHNvbWV0aGluZywgYWRkIGl0IHRvIHRoZSBnZW5lcmF0ZWRcbiAgICAgICAgICAgICAgICAvLyBDU1MgYW5kIHN0b3AgbG9va2luZyBmb3IgYW5vdGhlciBoYW5kbGVyLlxuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHJlc3VsdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVkU3R5bGVzLnB1c2guYXBwbHkoZ2VuZXJhdGVkU3R5bGVzLCBfdG9Db25zdW1hYmxlQXJyYXkocmVzdWx0KSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignV0FSTklORzogU2VsZWN0b3IgaGFuZGxlcnMgc2hvdWxkIHJldHVybiBhbiBhcnJheSBvZiBydWxlcy4nICsgJ1JldHVybmluZyBhIHN0cmluZyBjb250YWluaW5nIG11bHRpcGxlIHJ1bGVzIGlzIGRlcHJlY2F0ZWQuJywgaGFuZGxlcik7XG4gICAgICAgICAgICAgICAgICAgIGdlbmVyYXRlZFN0eWxlcy5wdXNoKCdAbWVkaWEgYWxsIHsnICsgU3RyaW5nKHJlc3VsdCkgKyAnfScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIC8vIElmIG5vbmUgb2YgdGhlIGhhbmRsZXJzIGhhbmRsZWQgaXQsIGFkZCBpdCB0byB0aGUgbGlzdCBvZiBwbGFpblxuICAgICAgICAvLyBzdHlsZSBkZWNsYXJhdGlvbnMuXG4gICAgICAgIGlmICghZm91bmRIYW5kbGVyKSB7XG4gICAgICAgICAgICBwbGFpbkRlY2xhcmF0aW9ucy5zZXQoa2V5LCB2YWwsIHRydWUpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgdmFyIGdlbmVyYXRlZFJ1bGVzZXQgPSBnZW5lcmF0ZUNTU1J1bGVzZXQoc2VsZWN0b3IsIHBsYWluRGVjbGFyYXRpb25zLCBzdHJpbmdIYW5kbGVycywgdXNlSW1wb3J0YW50LCBzZWxlY3RvckhhbmRsZXJzKTtcblxuICAgIGlmIChnZW5lcmF0ZWRSdWxlc2V0KSB7XG4gICAgICAgIGdlbmVyYXRlZFN0eWxlcy51bnNoaWZ0KGdlbmVyYXRlZFJ1bGVzZXQpO1xuICAgIH1cblxuICAgIHJldHVybiBnZW5lcmF0ZWRTdHlsZXM7XG59O1xuXG4vKipcbiAqIEhlbHBlciBtZXRob2Qgb2YgZ2VuZXJhdGVDU1NSdWxlc2V0IHRvIGZhY2lsaXRhdGUgY3VzdG9tIGhhbmRsaW5nIG9mIGNlcnRhaW5cbiAqIENTUyBwcm9wZXJ0aWVzLiBVc2VkIGZvciBlLmcuIGZvbnQgZmFtaWxpZXMuXG4gKlxuICogU2VlIGdlbmVyYXRlQ1NTUnVsZXNldCBmb3IgdXNhZ2UgYW5kIGRvY3VtZW50YXRpb24gb2YgcGFyYW1hdGVyIHR5cGVzLlxuICovXG52YXIgcnVuU3RyaW5nSGFuZGxlcnMgPSBmdW5jdGlvbiBydW5TdHJpbmdIYW5kbGVycyhkZWNsYXJhdGlvbnMgLyogOiBPcmRlcmVkRWxlbWVudHMgKi9cbiwgc3RyaW5nSGFuZGxlcnMgLyogOiBTdHJpbmdIYW5kbGVycyAqL1xuLCBzZWxlY3RvckhhbmRsZXJzIC8qIDogU2VsZWN0b3JIYW5kbGVyW10gKi9cbikgLyogOiB2b2lkICove1xuICAgIGlmICghc3RyaW5nSGFuZGxlcnMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBzdHJpbmdIYW5kbGVyS2V5cyA9IE9iamVjdC5rZXlzKHN0cmluZ0hhbmRsZXJzKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0cmluZ0hhbmRsZXJLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBrZXkgPSBzdHJpbmdIYW5kbGVyS2V5c1tpXTtcbiAgICAgICAgaWYgKGRlY2xhcmF0aW9ucy5oYXMoa2V5KSkge1xuICAgICAgICAgICAgLy8gQSBkZWNsYXJhdGlvbiBleGlzdHMgZm9yIHRoaXMgcGFydGljdWxhciBzdHJpbmcgaGFuZGxlciwgc28gd2VcbiAgICAgICAgICAgIC8vIG5lZWQgdG8gbGV0IHRoZSBzdHJpbmcgaGFuZGxlciBpbnRlcnByZXQgdGhlIGRlY2xhcmF0aW9uIGZpcnN0XG4gICAgICAgICAgICAvLyBiZWZvcmUgcHJvY2VlZGluZy5cbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyBUT0RPKGVtaWx5KTogUGFzcyBpbiBhIGNhbGxiYWNrIHdoaWNoIGdlbmVyYXRlcyBDU1MsIHNpbWlsYXIgdG9cbiAgICAgICAgICAgIC8vIGhvdyBvdXIgc2VsZWN0b3IgaGFuZGxlcnMgd29yaywgaW5zdGVhZCBvZiBwYXNzaW5nIGluXG4gICAgICAgICAgICAvLyBgc2VsZWN0b3JIYW5kbGVyc2AgYW5kIGhhdmUgdGhlbSBtYWtlIGNhbGxzIHRvIGBnZW5lcmF0ZUNTU2BcbiAgICAgICAgICAgIC8vIHRoZW1zZWx2ZXMuIFJpZ2h0IG5vdywgdGhpcyBpcyBpbXByYWN0aWNhbCBiZWNhdXNlIG91ciBzdHJpbmdcbiAgICAgICAgICAgIC8vIGhhbmRsZXJzIGFyZSB2ZXJ5IHNwZWNpYWxpemVkIGFuZCBkbyBjb21wbGV4IHRoaW5ncy5cbiAgICAgICAgICAgIGRlY2xhcmF0aW9ucy5zZXQoa2V5LCBzdHJpbmdIYW5kbGVyc1trZXldKGRlY2xhcmF0aW9ucy5nZXQoa2V5KSwgc2VsZWN0b3JIYW5kbGVycyksXG5cbiAgICAgICAgICAgIC8vIFByZXNlcnZlIG9yZGVyIGhlcmUsIHNpbmNlIHdlIGFyZSByZWFsbHkgcmVwbGFjaW5nIGFuXG4gICAgICAgICAgICAvLyB1bnByb2Nlc3NlZCBzdHlsZSB3aXRoIGEgcHJvY2Vzc2VkIHN0eWxlLCBub3Qgb3ZlcnJpZGluZyBhblxuICAgICAgICAgICAgLy8gZWFybGllciBzdHlsZVxuICAgICAgICAgICAgZmFsc2UpO1xuICAgICAgICB9XG4gICAgfVxufTtcblxudmFyIHRyYW5zZm9ybVJ1bGUgPSBmdW5jdGlvbiB0cmFuc2Zvcm1SdWxlKGtleSAvKiA6IHN0cmluZyAqL1xuLCB2YWx1ZSAvKiA6IHN0cmluZyAqL1xuLCB0cmFuc2Zvcm1WYWx1ZSAvKiA6IGZ1bmN0aW9uICovXG4pIHtcbiAgICByZXR1cm4gKC8qIDogc3RyaW5nICovU3RyaW5nKGtlYmFiaWZ5U3R5bGVOYW1lKGtleSkpICsgJzonICsgU3RyaW5nKHRyYW5zZm9ybVZhbHVlKGtleSwgdmFsdWUpKSArICc7J1xuICAgICk7XG59O1xuXG52YXIgYXJyYXlUb09iamVjdEtleXNSZWR1Y2VyID0gZnVuY3Rpb24gYXJyYXlUb09iamVjdEtleXNSZWR1Y2VyKGFjYywgdmFsKSB7XG4gICAgYWNjW3ZhbF0gPSB0cnVlO1xuICAgIHJldHVybiBhY2M7XG59O1xuXG4vKipcbiAqIEdlbmVyYXRlIGEgQ1NTIHJ1bGVzZXQgd2l0aCB0aGUgc2VsZWN0b3IgYW5kIGNvbnRhaW5pbmcgdGhlIGRlY2xhcmF0aW9ucy5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGFzc3VtZXMgdGhhdCB0aGUgZ2l2ZW4gZGVjbGFyYXRpb25zIGRvbid0IGNvbnRhaW4gYW55IHNwZWNpYWxcbiAqIGNoaWxkcmVuIChzdWNoIGFzIG1lZGlhIHF1ZXJpZXMsIHBzZXVkby1zZWxlY3RvcnMsIG9yIGRlc2NlbmRhbnQgc3R5bGVzKS5cbiAqXG4gKiBOb3RlIHRoYXQgdGhpcyBtZXRob2QgZG9lcyBub3QgZGVhbCB3aXRoIG5lc3RpbmcgdXNlZCBmb3IgZS5nLlxuICogcHN1ZWRvLXNlbGVjdG9ycyBvciBtZWRpYSBxdWVyaWVzLiBUaGF0IHJlc3BvbnNpYmlsaXR5IGlzIGxlZnQgdG8gIHRoZVxuICogYGdlbmVyYXRlQ1NTYCBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc2VsZWN0b3I6IHRoZSBzZWxlY3RvciBhc3NvY2lhdGVkIHdpdGggdGhlIHJ1bGVzZXRcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZWNsYXJhdGlvbnM6IGEgbWFwIGZyb20gY2FtZWxDYXNlZCBDU1MgcHJvcGVydHkgbmFtZSB0byBDU1NcbiAqICAgICBwcm9wZXJ0eSB2YWx1ZS5cbiAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsIGZ1bmN0aW9uPn0gc3RyaW5nSGFuZGxlcnM6IGEgbWFwIGZyb20gY2FtZWxDYXNlZCBDU1NcbiAqICAgICBwcm9wZXJ0eSBuYW1lIHRvIGEgZnVuY3Rpb24gd2hpY2ggd2lsbCBtYXAgdGhlIGdpdmVuIHZhbHVlIHRvIHRoZSB2YWx1ZVxuICogICAgIHRoYXQgaXMgb3V0cHV0LlxuICogQHBhcmFtIHtib29sfSB1c2VJbXBvcnRhbnQ6IEEgYm9vbGVhbiBzYXlpbmcgd2hldGhlciB0byBhcHBlbmQgXCIhaW1wb3J0YW50XCJcbiAqICAgICB0byBlYWNoIG9mIHRoZSBDU1MgZGVjbGFyYXRpb25zLlxuICogQHJldHVybnMge3N0cmluZ30gQSBzdHJpbmcgb2YgcmF3IENTUy5cbiAqXG4gKiBFeGFtcGxlczpcbiAqXG4gKiAgICBnZW5lcmF0ZUNTU1J1bGVzZXQoXCIuYmxhaFwiLCB7IGNvbG9yOiBcInJlZFwiIH0pXG4gKiAgICAtPiBcIi5ibGFoe2NvbG9yOiByZWQgIWltcG9ydGFudDt9XCJcbiAqICAgIGdlbmVyYXRlQ1NTUnVsZXNldChcIi5ibGFoXCIsIHsgY29sb3I6IFwicmVkXCIgfSwge30sIGZhbHNlKVxuICogICAgLT4gXCIuYmxhaHtjb2xvcjogcmVkfVwiXG4gKiAgICBnZW5lcmF0ZUNTU1J1bGVzZXQoXCIuYmxhaFwiLCB7IGNvbG9yOiBcInJlZFwiIH0sIHtjb2xvcjogYyA9PiBjLnRvVXBwZXJDYXNlfSlcbiAqICAgIC0+IFwiLmJsYWh7Y29sb3I6IFJFRH1cIlxuICogICAgZ2VuZXJhdGVDU1NSdWxlc2V0KFwiLmJsYWg6aG92ZXJcIiwgeyBjb2xvcjogXCJyZWRcIiB9KVxuICogICAgLT4gXCIuYmxhaDpob3Zlcntjb2xvcjogcmVkfVwiXG4gKi9cbnZhciBnZW5lcmF0ZUNTU1J1bGVzZXQgPSBmdW5jdGlvbiBnZW5lcmF0ZUNTU1J1bGVzZXQoc2VsZWN0b3IgLyogOiBzdHJpbmcgKi9cbiwgZGVjbGFyYXRpb25zIC8qIDogT3JkZXJlZEVsZW1lbnRzICovXG4sIHN0cmluZ0hhbmRsZXJzIC8qIDogU3RyaW5nSGFuZGxlcnMgKi9cbiwgdXNlSW1wb3J0YW50IC8qIDogYm9vbGVhbiAqL1xuLCBzZWxlY3RvckhhbmRsZXJzIC8qIDogU2VsZWN0b3JIYW5kbGVyW10gKi9cbikgLyogOiBzdHJpbmcgKi97XG4gICAgLy8gTXV0YXRlcyBkZWNsYXJhdGlvbnNcbiAgICBydW5TdHJpbmdIYW5kbGVycyhkZWNsYXJhdGlvbnMsIHN0cmluZ0hhbmRsZXJzLCBzZWxlY3RvckhhbmRsZXJzKTtcblxuICAgIHZhciBvcmlnaW5hbEVsZW1lbnRzID0gT2JqZWN0LmtleXMoZGVjbGFyYXRpb25zLmVsZW1lbnRzKS5yZWR1Y2UoYXJyYXlUb09iamVjdEtleXNSZWR1Y2VyLCBPYmplY3QuY3JlYXRlKG51bGwpKTtcblxuICAgIC8vIE5PVEUoZW1pbHkpOiBUaGlzIG11dGF0ZXMgaGFuZGxlZERlY2xhcmF0aW9ucy5lbGVtZW50cy5cbiAgICB2YXIgcHJlZml4ZWRFbGVtZW50cyA9IHByZWZpeEFsbChkZWNsYXJhdGlvbnMuZWxlbWVudHMpO1xuXG4gICAgdmFyIGVsZW1lbnROYW1lcyA9IE9iamVjdC5rZXlzKHByZWZpeGVkRWxlbWVudHMpO1xuICAgIGlmIChlbGVtZW50TmFtZXMubGVuZ3RoICE9PSBkZWNsYXJhdGlvbnMua2V5T3JkZXIubGVuZ3RoKSB7XG4gICAgICAgIC8vIFRoZXJlIGFyZSBzb21lIHByZWZpeGVkIHZhbHVlcywgc28gd2UgbmVlZCB0byBmaWd1cmUgb3V0IGhvdyB0byBzb3J0XG4gICAgICAgIC8vIHRoZW0uXG4gICAgICAgIC8vXG4gICAgICAgIC8vIExvb3AgdGhyb3VnaCBwcmVmaXhlZEVsZW1lbnRzLCBsb29raW5nIGZvciBhbnl0aGluZyB0aGF0IGlzIG5vdCBpblxuICAgICAgICAvLyBzb3J0T3JkZXIsIHdoaWNoIG1lYW5zIGl0IHdhcyBhZGRlZCBieSBwcmVmaXhBbGwuIFRoaXMgbWVhbnMgdGhhdCB3ZVxuICAgICAgICAvLyBuZWVkIHRvIGZpZ3VyZSBvdXQgd2hlcmUgaXQgc2hvdWxkIGFwcGVhciBpbiB0aGUgc29ydE9yZGVyLlxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsZW1lbnROYW1lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKCFvcmlnaW5hbEVsZW1lbnRzW2VsZW1lbnROYW1lc1tpXV0pIHtcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGVsZW1lbnQgaXMgbm90IGluIHRoZSBzb3J0T3JkZXIsIHdoaWNoIG1lYW5zIGl0IGlzIGEgcHJlZml4ZWRcbiAgICAgICAgICAgICAgICAvLyB2YWx1ZSB0aGF0IHdhcyBhZGRlZCBieSBwcmVmaXhBbGwuIExldCdzIHRyeSB0byBmaWd1cmUgb3V0IHdoZXJlIGl0XG4gICAgICAgICAgICAgICAgLy8gZ29lcy5cbiAgICAgICAgICAgICAgICB2YXIgb3JpZ2luYWxTdHlsZSA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudE5hbWVzW2ldWzBdID09PSAnVycpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBpcyBhIFdlYmtpdC1wcmVmaXhlZCBzdHlsZSwgbGlrZSBcIldlYmtpdFRyYW5zaXRpb25cIi4gTGV0J3NcbiAgICAgICAgICAgICAgICAgICAgLy8gZmluZCBpdHMgb3JpZ2luYWwgc3R5bGUncyBzb3J0IG9yZGVyLlxuICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbFN0eWxlID0gZWxlbWVudE5hbWVzW2ldWzZdLnRvTG93ZXJDYXNlKCkgKyBlbGVtZW50TmFtZXNbaV0uc2xpY2UoNyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50TmFtZXNbaV1bMV0gPT09ICdvJykge1xuICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIGEgTW96LXByZWZpeGVkIHN0eWxlLCBsaWtlIFwiTW96VHJhbnNpdGlvblwiLiBXZSBjaGVja1xuICAgICAgICAgICAgICAgICAgICAvLyB0aGUgc2Vjb25kIGNoYXJhY3RlciB0byBhdm9pZCBjb2xsaWRpbmcgd2l0aCBNcy1wcmVmaXhlZFxuICAgICAgICAgICAgICAgICAgICAvLyBzdHlsZXMuIExldCdzIGZpbmQgaXRzIG9yaWdpbmFsIHN0eWxlJ3Mgc29ydCBvcmRlci5cbiAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxTdHlsZSA9IGVsZW1lbnROYW1lc1tpXVszXS50b0xvd2VyQ2FzZSgpICsgZWxlbWVudE5hbWVzW2ldLnNsaWNlKDQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIChlbGVtZW50TmFtZXNbaV1bMV0gPT09ICdzJykge1xuICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIGEgTXMtcHJlZml4ZWQgc3R5bGUsIGxpa2UgXCJNc1RyYW5zaXRpb25cIi5cbiAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxTdHlsZSA9IGVsZW1lbnROYW1lc1tpXVsyXS50b0xvd2VyQ2FzZSgpICsgZWxlbWVudE5hbWVzW2ldLnNsaWNlKDMpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChvcmlnaW5hbFN0eWxlICYmIG9yaWdpbmFsRWxlbWVudHNbb3JpZ2luYWxTdHlsZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9yaWdpbmFsSW5kZXggPSBkZWNsYXJhdGlvbnMua2V5T3JkZXIuaW5kZXhPZihvcmlnaW5hbFN0eWxlKTtcbiAgICAgICAgICAgICAgICAgICAgZGVjbGFyYXRpb25zLmtleU9yZGVyLnNwbGljZShvcmlnaW5hbEluZGV4LCAwLCBlbGVtZW50TmFtZXNbaV0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIGRvbid0IGtub3cgd2hhdCB0aGUgb3JpZ2luYWwgc3R5bGUgd2FzLCBzbyBzb3J0IGl0IHRvXG4gICAgICAgICAgICAgICAgICAgIC8vIHRvcC4gVGhpcyBjYW4gaGFwcGVuIGZvciBzdHlsZXMgdGhhdCBhcmUgYWRkZWQgdGhhdCBkb24ndFxuICAgICAgICAgICAgICAgICAgICAvLyBoYXZlIHRoZSBzYW1lIGJhc2UgbmFtZSBhcyB0aGUgb3JpZ2luYWwgc3R5bGUuXG4gICAgICAgICAgICAgICAgICAgIGRlY2xhcmF0aW9ucy5rZXlPcmRlci51bnNoaWZ0KGVsZW1lbnROYW1lc1tpXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHRyYW5zZm9ybVZhbHVlID0gdXNlSW1wb3J0YW50ID09PSBmYWxzZSA/IHN0cmluZ2lmeVZhbHVlIDogc3RyaW5naWZ5QW5kSW1wb3J0YW50aWZ5VmFsdWU7XG5cbiAgICB2YXIgcnVsZXMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgZGVjbGFyYXRpb25zLmtleU9yZGVyLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIga2V5ID0gZGVjbGFyYXRpb25zLmtleU9yZGVyW19pXTtcbiAgICAgICAgdmFyIHZhbHVlID0gcHJlZml4ZWRFbGVtZW50c1trZXldO1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIC8vIGlubGluZS1zdHlsZS1wcmVmaXhlciByZXR1cm5zIGFuIGFycmF5IHdoZW4gdGhlcmUgc2hvdWxkIGJlXG4gICAgICAgICAgICAvLyBtdWx0aXBsZSBydWxlcyBmb3IgdGhlIHNhbWUga2V5LiBIZXJlIHdlIGZsYXR0ZW4gdG8gbXVsdGlwbGVcbiAgICAgICAgICAgIC8vIHBhaXJzIHdpdGggdGhlIHNhbWUga2V5LlxuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWx1ZS5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIHJ1bGVzLnB1c2godHJhbnNmb3JtUnVsZShrZXksIHZhbHVlW2pdLCB0cmFuc2Zvcm1WYWx1ZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcnVsZXMucHVzaCh0cmFuc2Zvcm1SdWxlKGtleSwgdmFsdWUsIHRyYW5zZm9ybVZhbHVlKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocnVsZXMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBTdHJpbmcoc2VsZWN0b3IpICsgJ3snICsgU3RyaW5nKHJ1bGVzLmpvaW4oXCJcIikpICsgJ30nO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cbn07XG5cbnZhciBfdHlwZW9mJDEgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkkMShhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH0gZWxzZSB7IHJldHVybiBBcnJheS5mcm9tKGFycik7IH0gfVxuXG4vKiA6OlxuaW1wb3J0IHR5cGUgeyBTaGVldERlZmluaXRpb24sIFNoZWV0RGVmaW5pdGlvbnMgfSBmcm9tICcuL2luZGV4LmpzJztcbmltcG9ydCB0eXBlIHsgTWF5YmVTaGVldERlZmluaXRpb24gfSBmcm9tICcuL2V4cG9ydHMuanMnO1xuaW1wb3J0IHR5cGUgeyBTZWxlY3RvckhhbmRsZXIgfSBmcm9tICcuL2dlbmVyYXRlLmpzJztcbiovXG5cbi8vIFRoZSBjdXJyZW50IDxzdHlsZT4gdGFnIHdlIGFyZSBpbnNlcnRpbmcgaW50bywgb3IgbnVsbCBpZiB3ZSBoYXZlbid0XG4vLyBpbnNlcnRlZCBhbnl0aGluZyB5ZXQuIFdlIGNvdWxkIGZpbmQgdGhpcyBlYWNoIHRpbWUgdXNpbmdcbi8vIGBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwic3R5bGVbZGF0YS1hcGhyb2RpdGVcIl0pYCwgYnV0IGhvbGRpbmcgb250byBpdCBpc1xuLy8gZmFzdGVyLlxudmFyIHN0eWxlVGFnIC8qIDogP0hUTUxTdHlsZUVsZW1lbnQgKi8gPSBudWxsO1xuXG4vLyBJbmplY3QgYSBzZXQgb2YgcnVsZXMgaW50byBhIDxzdHlsZT4gdGFnIGluIHRoZSBoZWFkIG9mIHRoZSBkb2N1bWVudC4gVGhpc1xuLy8gd2lsbCBhdXRvbWF0aWNhbGx5IGNyZWF0ZSBhIHN0eWxlIHRhZyBhbmQgdGhlbiBjb250aW51ZSB0byB1c2UgaXQgZm9yXG4vLyBtdWx0aXBsZSBpbmplY3Rpb25zLiBJdCB3aWxsIGFsc28gdXNlIGEgc3R5bGUgdGFnIHdpdGggdGhlIGBkYXRhLWFwaHJvZGl0ZWBcbi8vIHRhZyBvbiBpdCBpZiB0aGF0IGV4aXN0cyBpbiB0aGUgRE9NLiBUaGlzIGNvdWxkIGJlIHVzZWQgZm9yIGUuZy4gcmV1c2luZyB0aGVcbi8vIHNhbWUgc3R5bGUgdGFnIHRoYXQgc2VydmVyLXNpZGUgcmVuZGVyaW5nIGluc2VydHMuXG52YXIgaW5qZWN0U3R5bGVUYWcgPSBmdW5jdGlvbiBpbmplY3RTdHlsZVRhZyhjc3NSdWxlcyAvKiA6IHN0cmluZ1tdICovKSB7XG4gICAgaWYgKHN0eWxlVGFnID09IG51bGwpIHtcbiAgICAgICAgLy8gVHJ5IHRvIGZpbmQgYSBzdHlsZSB0YWcgd2l0aCB0aGUgYGRhdGEtYXBocm9kaXRlYCBhdHRyaWJ1dGUgZmlyc3QuXG4gICAgICAgIHN0eWxlVGFnID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcInN0eWxlW2RhdGEtYXBocm9kaXRlXVwiKSAvKiA6IGFueSAqLztcblxuICAgICAgICAvLyBJZiB0aGF0IGRvZXNuJ3Qgd29yaywgZ2VuZXJhdGUgYSBuZXcgc3R5bGUgdGFnLlxuICAgICAgICBpZiAoc3R5bGVUYWcgPT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gVGFrZW4gZnJvbVxuICAgICAgICAgICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy81MjQ2OTYvaG93LXRvLWNyZWF0ZS1hLXN0eWxlLXRhZy13aXRoLWphdmFzY3JpcHRcbiAgICAgICAgICAgIHZhciBoZWFkID0gZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdO1xuICAgICAgICAgICAgc3R5bGVUYWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuXG4gICAgICAgICAgICBzdHlsZVRhZy50eXBlID0gJ3RleHQvY3NzJztcbiAgICAgICAgICAgIHN0eWxlVGFnLnNldEF0dHJpYnV0ZShcImRhdGEtYXBocm9kaXRlXCIsIFwiXCIpO1xuICAgICAgICAgICAgaGVhZC5hcHBlbmRDaGlsZChzdHlsZVRhZyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyAkRmxvd0ZpeE1lXG4gICAgdmFyIHNoZWV0ID0gc3R5bGVUYWcuc3R5bGVTaGVldCB8fCBzdHlsZVRhZy5zaGVldCAvKiA6IGFueSAqLztcblxuICAgIGlmIChzaGVldC5pbnNlcnRSdWxlKSB7XG4gICAgICAgIHZhciBudW1SdWxlcyA9IHNoZWV0LmNzc1J1bGVzLmxlbmd0aDtcbiAgICAgICAgY3NzUnVsZXMuZm9yRWFjaChmdW5jdGlvbiAocnVsZSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBzaGVldC5pbnNlcnRSdWxlKHJ1bGUsIG51bVJ1bGVzKTtcbiAgICAgICAgICAgICAgICBudW1SdWxlcyArPSAxO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIC8vIFRoZSBzZWxlY3RvciBmb3IgdGhpcyBydWxlIHdhc24ndCBjb21wYXRpYmxlIHdpdGggdGhlIGJyb3dzZXJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgc3R5bGVUYWcuaW5uZXJUZXh0ID0gKHN0eWxlVGFnLmlubmVyVGV4dCB8fCAnJykgKyBjc3NSdWxlcy5qb2luKCcnKTtcbiAgICB9XG59O1xuXG4vLyBDdXN0b20gaGFuZGxlcnMgZm9yIHN0cmluZ2lmeWluZyBDU1MgdmFsdWVzIHRoYXQgaGF2ZSBzaWRlIGVmZmVjdHNcbi8vIChzdWNoIGFzIGZvbnRGYW1pbHksIHdoaWNoIGNhbiBjYXVzZSBAZm9udC1mYWNlIHJ1bGVzIHRvIGJlIGluamVjdGVkKVxudmFyIHN0cmluZ0hhbmRsZXJzID0ge1xuICAgIC8vIFdpdGggZm9udEZhbWlseSB3ZSBsb29rIGZvciBvYmplY3RzIHRoYXQgYXJlIHBhc3NlZCBpbiBhbmQgaW50ZXJwcmV0XG4gICAgLy8gdGhlbSBhcyBAZm9udC1mYWNlIHJ1bGVzIHRoYXQgd2UgbmVlZCB0byBpbmplY3QuIFRoZSB2YWx1ZSBvZiBmb250RmFtaWx5XG4gICAgLy8gY2FuIGVpdGhlciBiZSBhIHN0cmluZyAoYXMgbm9ybWFsKSwgYW4gb2JqZWN0IChhIHNpbmdsZSBmb250IGZhY2UpLCBvclxuICAgIC8vIGFuIGFycmF5IG9mIG9iamVjdHMgYW5kIHN0cmluZ3MuXG4gICAgZm9udEZhbWlseTogZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBmb250RmFtaWx5KHZhbCkge1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xuICAgICAgICAgICAgICAgIHZhciBuYW1lTWFwID0ge307XG5cbiAgICAgICAgICAgICAgICB2YWwuZm9yRWFjaChmdW5jdGlvbiAodikge1xuICAgICAgICAgICAgICAgICAgICBuYW1lTWFwW2ZvbnRGYW1pbHkodildID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhuYW1lTWFwKS5qb2luKFwiLFwiKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoKHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mJDEodmFsKSkgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgICAgICBpbmplY3RTdHlsZU9uY2UodmFsLnNyYywgXCJAZm9udC1mYWNlXCIsIFt2YWxdLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdcIicgKyBTdHJpbmcodmFsLmZvbnRGYW1pbHkpICsgJ1wiJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmb250RmFtaWx5O1xuICAgIH0oKSxcblxuICAgIC8vIFdpdGggYW5pbWF0aW9uTmFtZSB3ZSBsb29rIGZvciBhbiBvYmplY3QgdGhhdCBjb250YWlucyBrZXlmcmFtZXMgYW5kXG4gICAgLy8gaW5qZWN0IHRoZW0gYXMgYW4gYEBrZXlmcmFtZXNgIGJsb2NrLCByZXR1cm5pbmcgYSB1bmlxdWVseSBnZW5lcmF0ZWRcbiAgICAvLyBuYW1lLiBUaGUga2V5ZnJhbWVzIG9iamVjdCBzaG91bGQgbG9vayBsaWtlXG4gICAgLy8gIGFuaW1hdGlvbk5hbWU6IHtcbiAgICAvLyAgICBmcm9tOiB7XG4gICAgLy8gICAgICBsZWZ0OiAwLFxuICAgIC8vICAgICAgdG9wOiAwLFxuICAgIC8vICAgIH0sXG4gICAgLy8gICAgJzUwJSc6IHtcbiAgICAvLyAgICAgIGxlZnQ6IDE1LFxuICAgIC8vICAgICAgdG9wOiA1LFxuICAgIC8vICAgIH0sXG4gICAgLy8gICAgdG86IHtcbiAgICAvLyAgICAgIGxlZnQ6IDIwLFxuICAgIC8vICAgICAgdG9wOiAyMCxcbiAgICAvLyAgICB9XG4gICAgLy8gIH1cbiAgICAvLyBUT0RPKGVtaWx5KTogYHN0cmluZ0hhbmRsZXJzYCBkb2Vzbid0IGxldCB1cyByZW5hbWUgdGhlIGtleSwgc28gSSBoYXZlXG4gICAgLy8gdG8gdXNlIGBhbmltYXRpb25OYW1lYCBoZXJlLiBJbXByb3ZlIHRoYXQgc28gd2UgY2FuIGNhbGwgdGhpc1xuICAgIC8vIGBhbmltYXRpb25gIGluc3RlYWQgb2YgYGFuaW1hdGlvbk5hbWVgLlxuICAgIGFuaW1hdGlvbk5hbWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gYW5pbWF0aW9uTmFtZSh2YWwsIHNlbGVjdG9ySGFuZGxlcnMpIHtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsLm1hcChmdW5jdGlvbiAodikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYW5pbWF0aW9uTmFtZSh2LCBzZWxlY3RvckhhbmRsZXJzKTtcbiAgICAgICAgICAgICAgICB9KS5qb2luKFwiLFwiKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoKHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mJDEodmFsKSkgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgICAgICAvLyBHZW5lcmF0ZSBhIHVuaXF1ZSBuYW1lIGJhc2VkIG9uIHRoZSBoYXNoIG9mIHRoZSBvYmplY3QuIFdlIGNhbid0XG4gICAgICAgICAgICAgICAgLy8ganVzdCB1c2UgdGhlIGhhc2ggYmVjYXVzZSB0aGUgbmFtZSBjYW4ndCBzdGFydCB3aXRoIGEgbnVtYmVyLlxuICAgICAgICAgICAgICAgIC8vIFRPRE8oZW1pbHkpOiB0aGlzIHByb2JhYmx5IG1ha2VzIGRlYnVnZ2luZyBoYXJkLCBhbGxvdyBhIGN1c3RvbVxuICAgICAgICAgICAgICAgIC8vIG5hbWU/XG4gICAgICAgICAgICAgICAgdmFyIG5hbWUgPSAna2V5ZnJhbWVfJyArIFN0cmluZyhoYXNoT2JqZWN0KHZhbCkpO1xuXG4gICAgICAgICAgICAgICAgLy8gU2luY2Uga2V5ZnJhbWVzIG5lZWQgMyBsYXllcnMgb2YgbmVzdGluZywgd2UgdXNlIGBnZW5lcmF0ZUNTU2AgdG9cbiAgICAgICAgICAgICAgICAvLyBidWlsZCB0aGUgaW5uZXIgbGF5ZXJzIGFuZCB3cmFwIGl0IGluIGBAa2V5ZnJhbWVzYCBvdXJzZWx2ZXMuXG4gICAgICAgICAgICAgICAgdmFyIGZpbmFsVmFsID0gJ0BrZXlmcmFtZXMgJyArIG5hbWUgKyAneyc7XG5cbiAgICAgICAgICAgICAgICAvLyBUT0RPIHNlZSBpZiB3ZSBjYW4gZmluZCBhIHdheSB3aGVyZSBjaGVja2luZyBmb3IgT3JkZXJlZEVsZW1lbnRzXG4gICAgICAgICAgICAgICAgLy8gaGVyZSBpcyBub3QgbmVjZXNzYXJ5LiBBbHRlcm5hdGl2ZWx5LCBwZXJoYXBzIHdlIHNob3VsZCBoYXZlIGFcbiAgICAgICAgICAgICAgICAvLyB1dGlsaXR5IG1ldGhvZCB0aGF0IGNhbiBpdGVyYXRlIG92ZXIgZWl0aGVyIGEgcGxhaW4gb2JqZWN0LCBhblxuICAgICAgICAgICAgICAgIC8vIGluc3RhbmNlIG9mIE9yZGVyZWRFbGVtZW50cywgb3IgYSBNYXAsIGFuZCB0aGVuIHVzZSB0aGF0IGhlcmUgYW5kXG4gICAgICAgICAgICAgICAgLy8gZWxzZXdoZXJlLlxuICAgICAgICAgICAgICAgIGlmICh2YWwgaW5zdGFuY2VvZiBPcmRlcmVkRWxlbWVudHMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsLmZvckVhY2goZnVuY3Rpb24gKHZhbFZhbCwgdmFsS2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaW5hbFZhbCArPSBnZW5lcmF0ZUNTUyh2YWxLZXksIFt2YWxWYWxdLCBzZWxlY3RvckhhbmRsZXJzLCBzdHJpbmdIYW5kbGVycywgZmFsc2UpLmpvaW4oJycpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyh2YWwpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxWYWwgKz0gZ2VuZXJhdGVDU1Moa2V5LCBbdmFsW2tleV1dLCBzZWxlY3RvckhhbmRsZXJzLCBzdHJpbmdIYW5kbGVycywgZmFsc2UpLmpvaW4oJycpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZmluYWxWYWwgKz0gJ30nO1xuXG4gICAgICAgICAgICAgICAgaW5qZWN0R2VuZXJhdGVkQ1NTT25jZShuYW1lLCBbZmluYWxWYWxdKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBuYW1lO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFuaW1hdGlvbk5hbWU7XG4gICAgfSgpXG59O1xuXG4vLyBUaGlzIGlzIGEgbWFwIGZyb20gQXBocm9kaXRlJ3MgZ2VuZXJhdGVkIGNsYXNzIG5hbWVzIHRvIGB0cnVlYCAoYWN0aW5nIGFzIGFcbi8vIHNldCBvZiBjbGFzcyBuYW1lcylcbnZhciBhbHJlYWR5SW5qZWN0ZWQgPSB7fTtcblxuLy8gVGhpcyBpcyB0aGUgYnVmZmVyIG9mIHN0eWxlcyB3aGljaCBoYXZlIG5vdCB5ZXQgYmVlbiBmbHVzaGVkLlxudmFyIGluamVjdGlvbkJ1ZmZlciAvKiA6IHN0cmluZ1tdICovID0gW107XG5cbi8vIEEgZmxhZyB0byB0ZWxsIGlmIHdlIGFyZSBhbHJlYWR5IGJ1ZmZlcmluZyBzdHlsZXMuIFRoaXMgY291bGQgaGFwcGVuIGVpdGhlclxuLy8gYmVjYXVzZSB3ZSBzY2hlZHVsZWQgYSBmbHVzaCBjYWxsIGFscmVhZHksIHNvIG5ld2x5IGFkZGVkIHN0eWxlcyB3aWxsXG4vLyBhbHJlYWR5IGJlIGZsdXNoZWQsIG9yIGJlY2F1c2Ugd2UgYXJlIHN0YXRpY2FsbHkgYnVmZmVyaW5nIG9uIHRoZSBzZXJ2ZXIuXG52YXIgaXNCdWZmZXJpbmcgPSBmYWxzZTtcblxudmFyIGluamVjdEdlbmVyYXRlZENTU09uY2UgPSBmdW5jdGlvbiBpbmplY3RHZW5lcmF0ZWRDU1NPbmNlKGtleSwgZ2VuZXJhdGVkQ1NTKSB7XG4gICAgdmFyIF9pbmplY3Rpb25CdWZmZXI7XG5cbiAgICBpZiAoYWxyZWFkeUluamVjdGVkW2tleV0pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghaXNCdWZmZXJpbmcpIHtcbiAgICAgICAgLy8gV2Ugc2hvdWxkIG5ldmVyIGJlIGF1dG9tYXRpY2FsbHkgYnVmZmVyaW5nIG9uIHRoZSBzZXJ2ZXIgKG9yIGFueVxuICAgICAgICAvLyBwbGFjZSB3aXRob3V0IGEgZG9jdW1lbnQpLCBzbyBndWFyZCBhZ2FpbnN0IHRoYXQuXG4gICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBhdXRvbWF0aWNhbGx5IGJ1ZmZlciB3aXRob3V0IGEgZG9jdW1lbnRcIik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiB3ZSdyZSBub3QgYWxyZWFkeSBidWZmZXJpbmcsIHNjaGVkdWxlIGEgY2FsbCB0byBmbHVzaCB0aGVcbiAgICAgICAgLy8gY3VycmVudCBzdHlsZXMuXG4gICAgICAgIGlzQnVmZmVyaW5nID0gdHJ1ZTtcbiAgICAgICAgYXNhcChmbHVzaFRvU3R5bGVUYWcpO1xuICAgIH1cblxuICAgIChfaW5qZWN0aW9uQnVmZmVyID0gaW5qZWN0aW9uQnVmZmVyKS5wdXNoLmFwcGx5KF9pbmplY3Rpb25CdWZmZXIsIF90b0NvbnN1bWFibGVBcnJheSQxKGdlbmVyYXRlZENTUykpO1xuICAgIGFscmVhZHlJbmplY3RlZFtrZXldID0gdHJ1ZTtcbn07XG5cbnZhciBpbmplY3RTdHlsZU9uY2UgPSBmdW5jdGlvbiBpbmplY3RTdHlsZU9uY2Uoa2V5IC8qIDogc3RyaW5nICovXG4sIHNlbGVjdG9yIC8qIDogc3RyaW5nICovXG4sIGRlZmluaXRpb25zIC8qIDogU2hlZXREZWZpbml0aW9uW10gKi9cbiwgdXNlSW1wb3J0YW50IC8qIDogYm9vbGVhbiAqL1xuKSB7XG4gICAgdmFyIHNlbGVjdG9ySGFuZGxlcnMgLyogOiBTZWxlY3RvckhhbmRsZXJbXSAqLyA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDogW107XG5cbiAgICBpZiAoYWxyZWFkeUluamVjdGVkW2tleV0pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBnZW5lcmF0ZWQgPSBnZW5lcmF0ZUNTUyhzZWxlY3RvciwgZGVmaW5pdGlvbnMsIHNlbGVjdG9ySGFuZGxlcnMsIHN0cmluZ0hhbmRsZXJzLCB1c2VJbXBvcnRhbnQpO1xuXG4gICAgaW5qZWN0R2VuZXJhdGVkQ1NTT25jZShrZXksIGdlbmVyYXRlZCk7XG59O1xuXG52YXIgcmVzZXQgPSBmdW5jdGlvbiByZXNldCgpIHtcbiAgICBpbmplY3Rpb25CdWZmZXIgPSBbXTtcbiAgICBhbHJlYWR5SW5qZWN0ZWQgPSB7fTtcbiAgICBpc0J1ZmZlcmluZyA9IGZhbHNlO1xuICAgIHN0eWxlVGFnID0gbnVsbDtcbn07XG5cbnZhciBnZXRCdWZmZXJlZFN0eWxlcyA9IGZ1bmN0aW9uIGdldEJ1ZmZlcmVkU3R5bGVzKCkge1xuICAgIHJldHVybiBpbmplY3Rpb25CdWZmZXI7XG59O1xuXG52YXIgc3RhcnRCdWZmZXJpbmcgPSBmdW5jdGlvbiBzdGFydEJ1ZmZlcmluZygpIHtcbiAgICBpZiAoaXNCdWZmZXJpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGJ1ZmZlciB3aGlsZSBhbHJlYWR5IGJ1ZmZlcmluZ1wiKTtcbiAgICB9XG4gICAgaXNCdWZmZXJpbmcgPSB0cnVlO1xufTtcblxudmFyIGZsdXNoVG9BcnJheSA9IGZ1bmN0aW9uIGZsdXNoVG9BcnJheSgpIHtcbiAgICBpc0J1ZmZlcmluZyA9IGZhbHNlO1xuICAgIHZhciByZXQgPSBpbmplY3Rpb25CdWZmZXI7XG4gICAgaW5qZWN0aW9uQnVmZmVyID0gW107XG4gICAgcmV0dXJuIHJldDtcbn07XG5cbnZhciBmbHVzaFRvU3RyaW5nID0gZnVuY3Rpb24gZmx1c2hUb1N0cmluZygpIHtcbiAgICByZXR1cm4gZmx1c2hUb0FycmF5KCkuam9pbignJyk7XG59O1xuXG52YXIgZmx1c2hUb1N0eWxlVGFnID0gZnVuY3Rpb24gZmx1c2hUb1N0eWxlVGFnKCkge1xuICAgIHZhciBjc3NSdWxlcyA9IGZsdXNoVG9BcnJheSgpO1xuICAgIGlmIChjc3NSdWxlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGluamVjdFN0eWxlVGFnKGNzc1J1bGVzKTtcbiAgICB9XG59O1xuXG52YXIgZ2V0UmVuZGVyZWRDbGFzc05hbWVzID0gZnVuY3Rpb24gZ2V0UmVuZGVyZWRDbGFzc05hbWVzKCkgLyogOiBzdHJpbmdbXSAqL3tcbiAgICByZXR1cm4gT2JqZWN0LmtleXMoYWxyZWFkeUluamVjdGVkKTtcbn07XG5cbnZhciBhZGRSZW5kZXJlZENsYXNzTmFtZXMgPSBmdW5jdGlvbiBhZGRSZW5kZXJlZENsYXNzTmFtZXMoY2xhc3NOYW1lcyAvKiA6IHN0cmluZ1tdICovKSB7XG4gICAgY2xhc3NOYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgICAgICAgYWxyZWFkeUluamVjdGVkW2NsYXNzTmFtZV0gPSB0cnVlO1xuICAgIH0pO1xufTtcblxudmFyIHByb2Nlc3NTdHlsZURlZmluaXRpb25zID0gZnVuY3Rpb24gcHJvY2Vzc1N0eWxlRGVmaW5pdGlvbnMoc3R5bGVEZWZpbml0aW9ucyAvKiA6IGFueVtdICovXG4sIGNsYXNzTmFtZUJpdHMgLyogOiBzdHJpbmdbXSAqL1xuLCBkZWZpbml0aW9uQml0cyAvKiA6IE9iamVjdFtdICovXG4sIGxlbmd0aCAvKiA6IG51bWJlciAqL1xuKSAvKiA6IG51bWJlciAqL3tcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlRGVmaW5pdGlvbnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgLy8gRmlsdGVyIG91dCBmYWxzeSB2YWx1ZXMgZnJvbSB0aGUgaW5wdXQsIHRvIGFsbG93IGZvclxuICAgICAgICAvLyBgY3NzKGEsIHRlc3QgJiYgYylgXG4gICAgICAgIGlmIChzdHlsZURlZmluaXRpb25zW2ldKSB7XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShzdHlsZURlZmluaXRpb25zW2ldKSkge1xuICAgICAgICAgICAgICAgIC8vIFdlJ3ZlIGVuY291bnRlcmVkIGFuIGFycmF5LCBzbyBsZXQncyByZWN1cnNlXG4gICAgICAgICAgICAgICAgbGVuZ3RoICs9IHByb2Nlc3NTdHlsZURlZmluaXRpb25zKHN0eWxlRGVmaW5pdGlvbnNbaV0sIGNsYXNzTmFtZUJpdHMsIGRlZmluaXRpb25CaXRzLCBsZW5ndGgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjbGFzc05hbWVCaXRzLnB1c2goc3R5bGVEZWZpbml0aW9uc1tpXS5fbmFtZSk7XG4gICAgICAgICAgICAgICAgZGVmaW5pdGlvbkJpdHMucHVzaChzdHlsZURlZmluaXRpb25zW2ldLl9kZWZpbml0aW9uKTtcbiAgICAgICAgICAgICAgICBsZW5ndGggKz0gc3R5bGVEZWZpbml0aW9uc1tpXS5fbGVuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBsZW5ndGg7XG59O1xuXG4vKipcbiAqIEluamVjdCBzdHlsZXMgYXNzb2NpYXRlZCB3aXRoIHRoZSBwYXNzZWQgc3R5bGUgZGVmaW5pdGlvbiBvYmplY3RzLCBhbmQgcmV0dXJuXG4gKiBhbiBhc3NvY2lhdGVkIENTUyBjbGFzcyBuYW1lLlxuICpcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gdXNlSW1wb3J0YW50IElmIHRydWUsIHdpbGwgYXBwZW5kICFpbXBvcnRhbnQgdG8gZ2VuZXJhdGVkXG4gKiAgICAgQ1NTIG91dHB1dC4gZS5nLiB7Y29sb3I6IHJlZH0gLT4gXCJjb2xvcjogcmVkICFpbXBvcnRhbnRcIi5cbiAqIEBwYXJhbSB7KE9iamVjdHxPYmplY3RbXSlbXX0gc3R5bGVEZWZpbml0aW9ucyBzdHlsZSBkZWZpbml0aW9uIG9iamVjdHMsIG9yXG4gKiAgICAgYXJiaXRyYXJpbHkgbmVzdGVkIGFycmF5cyBvZiB0aGVtLCBhcyByZXR1cm5lZCBhcyBwcm9wZXJ0aWVzIG9mIHRoZVxuICogICAgIHJldHVybiB2YWx1ZSBvZiBTdHlsZVNoZWV0LmNyZWF0ZSgpLlxuICovXG52YXIgaW5qZWN0QW5kR2V0Q2xhc3NOYW1lID0gZnVuY3Rpb24gaW5qZWN0QW5kR2V0Q2xhc3NOYW1lKHVzZUltcG9ydGFudCAvKiA6IGJvb2xlYW4gKi9cbiwgc3R5bGVEZWZpbml0aW9ucyAvKiA6IE1heWJlU2hlZXREZWZpbml0aW9uW10gKi9cbiwgc2VsZWN0b3JIYW5kbGVycyAvKiA6IFNlbGVjdG9ySGFuZGxlcltdICovXG4pIC8qIDogc3RyaW5nICove1xuICAgIHZhciBjbGFzc05hbWVCaXRzID0gW107XG4gICAgdmFyIGRlZmluaXRpb25CaXRzID0gW107XG5cbiAgICAvLyBNdXRhdGVzIGNsYXNzTmFtZUJpdHMgYW5kIGRlZmluaXRpb25CaXRzIGFuZCByZXR1cm5zIGEgbGVuZ3RoIHdoaWNoIHdlXG4gICAgLy8gd2lsbCBhcHBlbmQgdG8gdGhlIGhhc2ggdG8gZGVjcmVhc2UgdGhlIGNoYW5jZSBvZiBoYXNoIGNvbGxpc2lvbnMuXG4gICAgdmFyIGxlbmd0aCA9IHByb2Nlc3NTdHlsZURlZmluaXRpb25zKHN0eWxlRGVmaW5pdGlvbnMsIGNsYXNzTmFtZUJpdHMsIGRlZmluaXRpb25CaXRzLCAwKTtcblxuICAgIC8vIEJyZWFrIGlmIHRoZXJlIGFyZW4ndCBhbnkgdmFsaWQgc3R5bGVzLlxuICAgIGlmIChjbGFzc05hbWVCaXRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG5cbiAgICB2YXIgY2xhc3NOYW1lID0gdm9pZCAwO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGNsYXNzTmFtZSA9IGNsYXNzTmFtZUJpdHMubGVuZ3RoID09PSAxID8gJ18nICsgU3RyaW5nKGNsYXNzTmFtZUJpdHNbMF0pIDogJ18nICsgU3RyaW5nKGhhc2hTdHJpbmcoY2xhc3NOYW1lQml0cy5qb2luKCkpKSArIFN0cmluZygobGVuZ3RoICUgMzYpLnRvU3RyaW5nKDM2KSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY2xhc3NOYW1lID0gY2xhc3NOYW1lQml0cy5qb2luKFwiLW9fTy1cIik7XG4gICAgfVxuXG4gICAgaW5qZWN0U3R5bGVPbmNlKGNsYXNzTmFtZSwgJy4nICsgU3RyaW5nKGNsYXNzTmFtZSksIGRlZmluaXRpb25CaXRzLCB1c2VJbXBvcnRhbnQsIHNlbGVjdG9ySGFuZGxlcnMpO1xuXG4gICAgcmV0dXJuIGNsYXNzTmFtZTtcbn07XG5cbi8qIDo6XG5pbXBvcnQgdHlwZSB7IFNlbGVjdG9ySGFuZGxlciB9IGZyb20gJy4vZ2VuZXJhdGUuanMnO1xuZXhwb3J0IHR5cGUgU2hlZXREZWZpbml0aW9uID0geyBbaWQ6c3RyaW5nXTogYW55IH07XG5leHBvcnQgdHlwZSBTaGVldERlZmluaXRpb25zID0gU2hlZXREZWZpbml0aW9uIHwgU2hlZXREZWZpbml0aW9uW107XG50eXBlIFJlbmRlckZ1bmN0aW9uID0gKCkgPT4gc3RyaW5nO1xudHlwZSBFeHRlbnNpb24gPSB7XG4gICAgc2VsZWN0b3JIYW5kbGVyOiBTZWxlY3RvckhhbmRsZXJcbn07XG5leHBvcnQgdHlwZSBNYXliZVNoZWV0RGVmaW5pdGlvbiA9IFNoZWV0RGVmaW5pdGlvbiB8IGZhbHNlIHwgbnVsbCB8IHZvaWRcbiovXG5cbnZhciB1bm1pbmlmaWVkSGFzaEZuID0gZnVuY3Rpb24gdW5taW5pZmllZEhhc2hGbihzdHIgLyogOiBzdHJpbmcgKi8sIGtleSAvKiA6IHN0cmluZyAqLykge1xuICAgIHJldHVybiBTdHJpbmcoa2V5KSArICdfJyArIFN0cmluZyhoYXNoU3RyaW5nKHN0cikpO1xufTtcblxuLy8gU3R5bGVTaGVldC5jcmVhdGUgaXMgaW4gYSBob3QgcGF0aCBzbyB3ZSB3YW50IHRvIGtlZXAgYXMgbXVjaCBsb2dpYyBvdXQgb2YgaXRcbi8vIGFzIHBvc3NpYmxlLiBTbywgd2UgZmlndXJlIG91dCB3aGljaCBoYXNoIGZ1bmN0aW9uIHRvIHVzZSBvbmNlLCBhbmQgb25seVxuLy8gc3dpdGNoIGl0IG91dCB2aWEgbWluaWZ5KCkgYXMgbmVjZXNzYXJ5LlxuLy9cbi8vIFRoaXMgaXMgaW4gYW4gZXhwb3J0ZWQgZnVuY3Rpb24gdG8gbWFrZSBpdCBlYXNpZXIgdG8gdGVzdC5cbnZhciBpbml0aWFsSGFzaEZuID0gZnVuY3Rpb24gaW5pdGlhbEhhc2hGbigpIHtcbiAgICByZXR1cm4gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyA/IGhhc2hTdHJpbmcgOiB1bm1pbmlmaWVkSGFzaEZuO1xufTtcblxudmFyIGhhc2hGbiA9IGluaXRpYWxIYXNoRm4oKTtcblxudmFyIFN0eWxlU2hlZXQgPSB7XG4gICAgY3JlYXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIGNyZWF0ZShzaGVldERlZmluaXRpb24gLyogOiBTaGVldERlZmluaXRpb24gKi8pIC8qIDogT2JqZWN0ICove1xuICAgICAgICAgICAgdmFyIG1hcHBlZFNoZWV0RGVmaW5pdGlvbiA9IHt9O1xuICAgICAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhzaGVldERlZmluaXRpb24pO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICAgICAgICB2YXIgdmFsID0gc2hlZXREZWZpbml0aW9uW2tleV07XG4gICAgICAgICAgICAgICAgdmFyIHN0cmluZ1ZhbCA9IEpTT04uc3RyaW5naWZ5KHZhbCk7XG5cbiAgICAgICAgICAgICAgICBtYXBwZWRTaGVldERlZmluaXRpb25ba2V5XSA9IHtcbiAgICAgICAgICAgICAgICAgICAgX2xlbjogc3RyaW5nVmFsLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgX25hbWU6IGhhc2hGbihzdHJpbmdWYWwsIGtleSksXG4gICAgICAgICAgICAgICAgICAgIF9kZWZpbml0aW9uOiB2YWxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbWFwcGVkU2hlZXREZWZpbml0aW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNyZWF0ZTtcbiAgICB9KCksXG4gICAgcmVoeWRyYXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIHJlaHlkcmF0ZSgpIHtcbiAgICAgICAgICAgIHZhciByZW5kZXJlZENsYXNzTmFtZXMgLyogOiBzdHJpbmdbXSAqLyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogW107XG5cbiAgICAgICAgICAgIGFkZFJlbmRlcmVkQ2xhc3NOYW1lcyhyZW5kZXJlZENsYXNzTmFtZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlaHlkcmF0ZTtcbiAgICB9KClcbn07XG5cbi8qKlxuICogVXRpbGl0aWVzIGZvciB1c2luZyBBcGhyb2RpdGUgc2VydmVyLXNpZGUuXG4gKlxuICogVGhpcyBjYW4gYmUgbWluaWZpZWQgb3V0IGluIGNsaWVudC1vbmx5IGJ1bmRsZXMgYnkgcmVwbGFjaW5nIGB0eXBlb2Ygd2luZG93YFxuICogd2l0aCBgXCJvYmplY3RcImAsIGUuZy4gdmlhIFdlYnBhY2sncyBEZWZpbmVQbHVnaW46XG4gKlxuICogICBuZXcgd2VicGFjay5EZWZpbmVQbHVnaW4oe1xuICogICAgIFwidHlwZW9mIHdpbmRvd1wiOiBKU09OLnN0cmluZ2lmeShcIm9iamVjdFwiKVxuICogICB9KVxuICovXG52YXIgU3R5bGVTaGVldFNlcnZlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gbnVsbCA6IHtcbiAgICByZW5kZXJTdGF0aWM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gcmVuZGVyU3RhdGljKHJlbmRlckZ1bmMgLyogOiBSZW5kZXJGdW5jdGlvbiAqLykge1xuICAgICAgICAgICAgcmVzZXQoKTtcbiAgICAgICAgICAgIHN0YXJ0QnVmZmVyaW5nKCk7XG4gICAgICAgICAgICB2YXIgaHRtbCA9IHJlbmRlckZ1bmMoKTtcbiAgICAgICAgICAgIHZhciBjc3NDb250ZW50ID0gZmx1c2hUb1N0cmluZygpO1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGh0bWw6IGh0bWwsXG4gICAgICAgICAgICAgICAgY3NzOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGNzc0NvbnRlbnQsXG4gICAgICAgICAgICAgICAgICAgIHJlbmRlcmVkQ2xhc3NOYW1lczogZ2V0UmVuZGVyZWRDbGFzc05hbWVzKClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlbmRlclN0YXRpYztcbiAgICB9KClcbn07XG5cbi8qKlxuICogVXRpbGl0aWVzIGZvciB1c2luZyBBcGhyb2RpdGUgaW4gdGVzdHMuXG4gKlxuICogTm90IG1lYW50IHRvIGJlIHVzZWQgaW4gcHJvZHVjdGlvbi5cbiAqL1xudmFyIFN0eWxlU2hlZXRUZXN0VXRpbHMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nID8gbnVsbCA6IHtcbiAgICAvKipcbiAgICAqIFByZXZlbnQgc3R5bGVzIGZyb20gYmVpbmcgaW5qZWN0ZWQgaW50byB0aGUgRE9NLlxuICAgICpcbiAgICAqIFRoaXMgaXMgdXNlZnVsIGluIHNpdHVhdGlvbnMgd2hlcmUgeW91J2QgbGlrZSB0byB0ZXN0IHJlbmRlcmluZyBVSVxuICAgICogY29tcG9uZW50cyB3aGljaCB1c2UgQXBocm9kaXRlIHdpdGhvdXQgYW55IG9mIHRoZSBzaWRlLWVmZmVjdHMgb2ZcbiAgICAqIEFwaHJvZGl0ZSBoYXBwZW5pbmcuIFBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIHRlc3RpbmcgdGhlIG91dHB1dCBvZlxuICAgICogY29tcG9uZW50cyB3aGVuIHlvdSBoYXZlIG5vIERPTSwgZS5nLiB0ZXN0aW5nIGluIE5vZGUgd2l0aG91dCBhIGZha2UgRE9NLlxuICAgICpcbiAgICAqIFNob3VsZCBiZSBwYWlyZWQgd2l0aCBhIHN1YnNlcXVlbnQgY2FsbCB0b1xuICAgICogY2xlYXJCdWZmZXJBbmRSZXN1bWVTdHlsZUluamVjdGlvbi5cbiAgICAqL1xuICAgIHN1cHByZXNzU3R5bGVJbmplY3Rpb246IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gc3VwcHJlc3NTdHlsZUluamVjdGlvbigpIHtcbiAgICAgICAgICAgIHJlc2V0KCk7XG4gICAgICAgICAgICBzdGFydEJ1ZmZlcmluZygpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHN1cHByZXNzU3R5bGVJbmplY3Rpb247XG4gICAgfSgpLFxuXG5cbiAgICAvKipcbiAgICAqIE9wcG9zaXRlIG1ldGhvZCBvZiBwcmV2ZW50U3R5bGVJbmplY3QuXG4gICAgKi9cbiAgICBjbGVhckJ1ZmZlckFuZFJlc3VtZVN0eWxlSW5qZWN0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIGNsZWFyQnVmZmVyQW5kUmVzdW1lU3R5bGVJbmplY3Rpb24oKSB7XG4gICAgICAgICAgICByZXNldCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNsZWFyQnVmZmVyQW5kUmVzdW1lU3R5bGVJbmplY3Rpb247XG4gICAgfSgpLFxuXG5cbiAgICAvKipcbiAgICAqIFJldHVybnMgYSBzdHJpbmcgb2YgYnVmZmVyZWQgc3R5bGVzIHdoaWNoIGhhdmUgbm90IGJlZW4gZmx1c2hlZFxuICAgICpcbiAgICAqIEByZXR1cm5zIHtzdHJpbmd9ICBCdWZmZXIgb2Ygc3R5bGVzIHdoaWNoIGhhdmUgbm90IHlldCBiZWVuIGZsdXNoZWQuXG4gICAgKi9cbiAgICBnZXRCdWZmZXJlZFN0eWxlczogZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBnZXRCdWZmZXJlZFN0eWxlcyQkMSgpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXRCdWZmZXJlZFN0eWxlcygpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGdldEJ1ZmZlcmVkU3R5bGVzJCQxO1xuICAgIH0oKVxufTtcblxuLyoqXG4gKiBHZW5lcmF0ZSB0aGUgQXBocm9kaXRlIEFQSSBleHBvcnRzLCB3aXRoIGdpdmVuIGBzZWxlY3RvckhhbmRsZXJzYCBhbmRcbiAqIGB1c2VJbXBvcnRhbnRgIHN0YXRlLlxuICovXG5mdW5jdGlvbiBtYWtlRXhwb3J0cyh1c2VJbXBvcnRhbnQgLyogOiBib29sZWFuICovXG4pIHtcbiAgICB2YXIgc2VsZWN0b3JIYW5kbGVycyAvKiA6IFNlbGVjdG9ySGFuZGxlcltdICovID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBkZWZhdWx0U2VsZWN0b3JIYW5kbGVycztcblxuICAgIHJldHVybiB7XG4gICAgICAgIFN0eWxlU2hlZXQ6IE9iamVjdC5hc3NpZ24oe30sIFN0eWxlU2hlZXQsIHtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSZXR1cm5zIGEgdmVyc2lvbiBvZiB0aGUgZXhwb3J0cyBvZiBBcGhyb2RpdGUgKGkuZS4gYW4gb2JqZWN0XG4gICAgICAgICAgICAgKiB3aXRoIGBjc3NgIGFuZCBgU3R5bGVTaGVldGAgcHJvcGVydGllcykgd2hpY2ggaGF2ZSBzb21lXG4gICAgICAgICAgICAgKiBleHRlbnNpb25zIGluY2x1ZGVkLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSB7QXJyYXkuPE9iamVjdD59IGV4dGVuc2lvbnM6IEFuIGFycmF5IG9mIGV4dGVuc2lvbnMgdG9cbiAgICAgICAgICAgICAqICAgICBhZGQgdG8gdGhpcyBpbnN0YW5jZSBvZiBBcGhyb2RpdGUuIEVhY2ggb2JqZWN0IHNob3VsZCBoYXZlIGFcbiAgICAgICAgICAgICAqICAgICBzaW5nbGUgcHJvcGVydHkgb24gaXQsIGRlZmluaW5nIHdoaWNoIGtpbmQgb2YgZXh0ZW5zaW9uIHRvXG4gICAgICAgICAgICAgKiAgICAgYWRkLlxuICAgICAgICAgICAgICogQHBhcmFtIHtTZWxlY3RvckhhbmRsZXJ9IFtleHRlbnNpb25zW10uc2VsZWN0b3JIYW5kbGVyXTogQVxuICAgICAgICAgICAgICogICAgIHNlbGVjdG9yIGhhbmRsZXIgZXh0ZW5zaW9uLiBTZWUgYGRlZmF1bHRTZWxlY3RvckhhbmRsZXJzYCBpblxuICAgICAgICAgICAgICogICAgIGdlbmVyYXRlLmpzLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEByZXR1cm5zIHtPYmplY3R9IEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBleHBvcnRzIG9mIHRoZSBuZXdcbiAgICAgICAgICAgICAqICAgICBpbnN0YW5jZSBvZiBBcGhyb2RpdGUuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGV4dGVuZDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGV4dGVuZChleHRlbnNpb25zIC8qIDogRXh0ZW5zaW9uW10gKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGV4dGVuc2lvblNlbGVjdG9ySGFuZGxlcnMgPSBleHRlbnNpb25zXG4gICAgICAgICAgICAgICAgICAgIC8vIFB1bGwgb3V0IGV4dGVuc2lvbnMgd2l0aCBhIHNlbGVjdG9ySGFuZGxlciBwcm9wZXJ0eVxuICAgICAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChleHRlbnNpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBleHRlbnNpb24uc2VsZWN0b3JIYW5kbGVyO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAvLyBSZW1vdmUgbnVsbHMgKGkuZS4gZXh0ZW5zaW9ucyB3aXRob3V0IGEgc2VsZWN0b3JIYW5kbGVyIHByb3BlcnR5KS5cbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZXI7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtYWtlRXhwb3J0cyh1c2VJbXBvcnRhbnQsIHNlbGVjdG9ySGFuZGxlcnMuY29uY2F0KGV4dGVuc2lvblNlbGVjdG9ySGFuZGxlcnMpKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZXh0ZW5kO1xuICAgICAgICAgICAgfSgpXG4gICAgICAgIH0pLFxuXG4gICAgICAgIFN0eWxlU2hlZXRTZXJ2ZXI6IFN0eWxlU2hlZXRTZXJ2ZXIsXG4gICAgICAgIFN0eWxlU2hlZXRUZXN0VXRpbHM6IFN0eWxlU2hlZXRUZXN0VXRpbHMsXG5cbiAgICAgICAgbWluaWZ5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBtaW5pZnkoc2hvdWxkTWluaWZ5IC8qIDogYm9vbGVhbiAqLykge1xuICAgICAgICAgICAgICAgIGhhc2hGbiA9IHNob3VsZE1pbmlmeSA/IGhhc2hTdHJpbmcgOiB1bm1pbmlmaWVkSGFzaEZuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbWluaWZ5O1xuICAgICAgICB9KCksXG4gICAgICAgIGNzczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZnVuY3Rpb24gY3NzKCkgLyogOiBNYXliZVNoZWV0RGVmaW5pdGlvbltdICove1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBzdHlsZURlZmluaXRpb25zID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlRGVmaW5pdGlvbnNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGluamVjdEFuZEdldENsYXNzTmFtZSh1c2VJbXBvcnRhbnQsIHN0eWxlRGVmaW5pdGlvbnMsIHNlbGVjdG9ySGFuZGxlcnMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gY3NzO1xuICAgICAgICB9KCksXG5cblxuICAgICAgICBmbHVzaFRvU3R5bGVUYWc6IGZsdXNoVG9TdHlsZVRhZyxcbiAgICAgICAgaW5qZWN0QW5kR2V0Q2xhc3NOYW1lOiBpbmplY3RBbmRHZXRDbGFzc05hbWUsXG4gICAgICAgIGRlZmF1bHRTZWxlY3RvckhhbmRsZXJzOiBkZWZhdWx0U2VsZWN0b3JIYW5kbGVyc1xuICAgIH07XG59XG5cbmV4cG9ydCB7IG1ha2VFeHBvcnRzIGFzIGEgfTtcbiIsImltcG9ydCB7IGEgYXMgbWFrZUV4cG9ydHMgfSBmcm9tICcuL2NodW5rLWM0ZTM3Mzg3LmpzJztcbmltcG9ydCAnc3RyaW5nLWhhc2gnO1xuaW1wb3J0ICdpbmxpbmUtc3R5bGUtcHJlZml4ZXIvc3RhdGljL3BsdWdpbnMvY2FsYyc7XG5pbXBvcnQgJ2lubGluZS1zdHlsZS1wcmVmaXhlci9zdGF0aWMvcGx1Z2lucy9jcm9zc0ZhZGUnO1xuaW1wb3J0ICdpbmxpbmUtc3R5bGUtcHJlZml4ZXIvc3RhdGljL3BsdWdpbnMvY3Vyc29yJztcbmltcG9ydCAnaW5saW5lLXN0eWxlLXByZWZpeGVyL3N0YXRpYy9wbHVnaW5zL2ZpbHRlcic7XG5pbXBvcnQgJ2lubGluZS1zdHlsZS1wcmVmaXhlci9zdGF0aWMvcGx1Z2lucy9mbGV4JztcbmltcG9ydCAnaW5saW5lLXN0eWxlLXByZWZpeGVyL3N0YXRpYy9wbHVnaW5zL2ZsZXhib3hJRSc7XG5pbXBvcnQgJ2lubGluZS1zdHlsZS1wcmVmaXhlci9zdGF0aWMvcGx1Z2lucy9mbGV4Ym94T2xkJztcbmltcG9ydCAnaW5saW5lLXN0eWxlLXByZWZpeGVyL3N0YXRpYy9wbHVnaW5zL2dyYWRpZW50JztcbmltcG9ydCAnaW5saW5lLXN0eWxlLXByZWZpeGVyL3N0YXRpYy9wbHVnaW5zL2ltYWdlU2V0JztcbmltcG9ydCAnaW5saW5lLXN0eWxlLXByZWZpeGVyL3N0YXRpYy9wbHVnaW5zL3Bvc2l0aW9uJztcbmltcG9ydCAnaW5saW5lLXN0eWxlLXByZWZpeGVyL3N0YXRpYy9wbHVnaW5zL3NpemluZyc7XG5pbXBvcnQgJ2lubGluZS1zdHlsZS1wcmVmaXhlci9zdGF0aWMvcGx1Z2lucy90cmFuc2l0aW9uJztcbmltcG9ydCAnaW5saW5lLXN0eWxlLXByZWZpeGVyL3N0YXRpYy9jcmVhdGVQcmVmaXhlcic7XG5pbXBvcnQgJ2FzYXAnO1xuXG52YXIgdXNlSW1wb3J0YW50ID0gdHJ1ZTsgLy8gQWRkICFpbXBvcnRhbnQgdG8gYWxsIHN0eWxlIGRlZmluaXRpb25zXG5cbnZhciBBcGhyb2RpdGUgPSBtYWtlRXhwb3J0cyh1c2VJbXBvcnRhbnQpO1xuXG52YXIgU3R5bGVTaGVldCA9IEFwaHJvZGl0ZS5TdHlsZVNoZWV0LFxuICAgIFN0eWxlU2hlZXRTZXJ2ZXIgPSBBcGhyb2RpdGUuU3R5bGVTaGVldFNlcnZlcixcbiAgICBTdHlsZVNoZWV0VGVzdFV0aWxzID0gQXBocm9kaXRlLlN0eWxlU2hlZXRUZXN0VXRpbHMsXG4gICAgY3NzID0gQXBocm9kaXRlLmNzcyxcbiAgICBtaW5pZnkgPSBBcGhyb2RpdGUubWluaWZ5LFxuICAgIGZsdXNoVG9TdHlsZVRhZyA9IEFwaHJvZGl0ZS5mbHVzaFRvU3R5bGVUYWcsXG4gICAgaW5qZWN0QW5kR2V0Q2xhc3NOYW1lID0gQXBocm9kaXRlLmluamVjdEFuZEdldENsYXNzTmFtZSxcbiAgICBkZWZhdWx0U2VsZWN0b3JIYW5kbGVycyA9IEFwaHJvZGl0ZS5kZWZhdWx0U2VsZWN0b3JIYW5kbGVycztcblxuZXhwb3J0IHsgU3R5bGVTaGVldCwgU3R5bGVTaGVldFNlcnZlciwgU3R5bGVTaGVldFRlc3RVdGlscywgY3NzLCBtaW5pZnksIGZsdXNoVG9TdHlsZVRhZywgaW5qZWN0QW5kR2V0Q2xhc3NOYW1lLCBkZWZhdWx0U2VsZWN0b3JIYW5kbGVycyB9O1xuIiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5mdW5jdGlvbiBfZGVmaW5lRW51bWVyYWJsZVByb3BlcnRpZXMob2JqLCBkZXNjcykgeyBmb3IgKHZhciBrZXkgaW4gZGVzY3MpIHsgdmFyIGRlc2MgPSBkZXNjc1trZXldOyBkZXNjLmNvbmZpZ3VyYWJsZSA9IGRlc2MuZW51bWVyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzYykgZGVzYy53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgZGVzYyk7IH0gcmV0dXJuIG9iajsgfVxuXG5pbXBvcnQgeyBub29wLCBrVHJ1ZSwgaXMsIGxvZyBhcyBfbG9nLCBjaGVjaywgZGVmZXJyZWQsIHVpZCBhcyBuZXh0RWZmZWN0SWQsIGFycmF5LCByZW1vdmUsIG9iamVjdCwgVEFTSywgQ0FOQ0VMLCBTRUxGX0NBTkNFTExBVElPTiwgbWFrZUl0ZXJhdG9yLCBjcmVhdGVTZXRDb250ZXh0V2FybmluZywgZGVwcmVjYXRlLCB1cGRhdGVJbmNlbnRpdmUgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IGFzYXAsIHN1c3BlbmQsIGZsdXNoIH0gZnJvbSAnLi9zY2hlZHVsZXInO1xuaW1wb3J0IHsgYXNFZmZlY3QgfSBmcm9tICcuL2lvJztcbmltcG9ydCB7IHN0ZENoYW5uZWwgYXMgX3N0ZENoYW5uZWwsIGV2ZW50Q2hhbm5lbCwgaXNFbmQgfSBmcm9tICcuL2NoYW5uZWwnO1xuaW1wb3J0IHsgYnVmZmVycyB9IGZyb20gJy4vYnVmZmVycyc7XG5cbmV4cG9ydCB2YXIgTk9UX0lURVJBVE9SX0VSUk9SID0gJ3Byb2MgZmlyc3QgYXJndW1lbnQgKFNhZ2EgZnVuY3Rpb24gcmVzdWx0KSBtdXN0IGJlIGFuIGl0ZXJhdG9yJztcblxuZXhwb3J0IHZhciBDSEFOTkVMX0VORCA9IHtcbiAgdG9TdHJpbmc6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiAnQEByZWR1eC1zYWdhL0NIQU5ORUxfRU5EJztcbiAgfVxufTtcbmV4cG9ydCB2YXIgVEFTS19DQU5DRUwgPSB7XG4gIHRvU3RyaW5nOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gJ0BAcmVkdXgtc2FnYS9UQVNLX0NBTkNFTCc7XG4gIH1cbn07XG5cbnZhciBtYXRjaGVycyA9IHtcbiAgd2lsZGNhcmQ6IGZ1bmN0aW9uIHdpbGRjYXJkKCkge1xuICAgIHJldHVybiBrVHJ1ZTtcbiAgfSxcbiAgZGVmYXVsdDogZnVuY3Rpb24gX2RlZmF1bHQocGF0dGVybikge1xuICAgIHJldHVybiAodHlwZW9mIHBhdHRlcm4gPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHBhdHRlcm4pKSA9PT0gJ3N5bWJvbCcgPyBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgIHJldHVybiBpbnB1dC50eXBlID09PSBwYXR0ZXJuO1xuICAgIH0gOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgIHJldHVybiBpbnB1dC50eXBlID09PSBTdHJpbmcocGF0dGVybik7XG4gICAgfTtcbiAgfSxcbiAgYXJyYXk6IGZ1bmN0aW9uIGFycmF5KHBhdHRlcm5zKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgcmV0dXJuIHBhdHRlcm5zLnNvbWUoZnVuY3Rpb24gKHApIHtcbiAgICAgICAgcmV0dXJuIG1hdGNoZXIocCkoaW5wdXQpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfSxcbiAgcHJlZGljYXRlOiBmdW5jdGlvbiBwcmVkaWNhdGUoX3ByZWRpY2F0ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgIHJldHVybiBfcHJlZGljYXRlKGlucHV0KTtcbiAgICB9O1xuICB9XG59O1xuXG5mdW5jdGlvbiBtYXRjaGVyKHBhdHRlcm4pIHtcbiAgLy8gcHJldHRpZXItaWdub3JlXG4gIHJldHVybiAocGF0dGVybiA9PT0gJyonID8gbWF0Y2hlcnMud2lsZGNhcmQgOiBpcy5hcnJheShwYXR0ZXJuKSA/IG1hdGNoZXJzLmFycmF5IDogaXMuc3RyaW5nYWJsZUZ1bmMocGF0dGVybikgPyBtYXRjaGVycy5kZWZhdWx0IDogaXMuZnVuYyhwYXR0ZXJuKSA/IG1hdGNoZXJzLnByZWRpY2F0ZSA6IG1hdGNoZXJzLmRlZmF1bHQpKHBhdHRlcm4pO1xufVxuXG4vKipcbiAgVXNlZCB0byB0cmFjayBhIHBhcmVudCB0YXNrIGFuZCBpdHMgZm9ya3NcbiAgSW4gdGhlIG5ldyBmb3JrIG1vZGVsLCBmb3JrZWQgdGFza3MgYXJlIGF0dGFjaGVkIGJ5IGRlZmF1bHQgdG8gdGhlaXIgcGFyZW50XG4gIFdlIG1vZGVsIHRoaXMgdXNpbmcgdGhlIGNvbmNlcHQgb2YgUGFyZW50IHRhc2sgJiYgbWFpbiBUYXNrXG4gIG1haW4gdGFzayBpcyB0aGUgbWFpbiBmbG93IG9mIHRoZSBjdXJyZW50IEdlbmVyYXRvciwgdGhlIHBhcmVudCB0YXNrcyBpcyB0aGVcbiAgYWdncmVnYXRpb24gb2YgdGhlIG1haW4gdGFza3MgKyBhbGwgaXRzIGZvcmtlZCB0YXNrcy5cbiAgVGh1cyB0aGUgd2hvbGUgbW9kZWwgcmVwcmVzZW50cyBhbiBleGVjdXRpb24gdHJlZSB3aXRoIG11bHRpcGxlIGJyYW5jaGVzICh2cyB0aGVcbiAgbGluZWFyIGV4ZWN1dGlvbiB0cmVlIGluIHNlcXVlbnRpYWwgKG5vbiBwYXJhbGxlbCkgcHJvZ3JhbW1pbmcpXG5cbiAgQSBwYXJlbnQgdGFza3MgaGFzIHRoZSBmb2xsb3dpbmcgc2VtYW50aWNzXG4gIC0gSXQgY29tcGxldGVzIGlmIGFsbCBpdHMgZm9ya3MgZWl0aGVyIGNvbXBsZXRlIG9yIGFsbCBjYW5jZWxsZWRcbiAgLSBJZiBpdCdzIGNhbmNlbGxlZCwgYWxsIGZvcmtzIGFyZSBjYW5jZWxsZWQgYXMgd2VsbFxuICAtIEl0IGFib3J0cyBpZiBhbnkgdW5jYXVnaHQgZXJyb3IgYnViYmxlcyB1cCBmcm9tIGZvcmtzXG4gIC0gSWYgaXQgY29tcGxldGVzLCB0aGUgcmV0dXJuIHZhbHVlIGlzIHRoZSBvbmUgcmV0dXJuZWQgYnkgdGhlIG1haW4gdGFza1xuKiovXG5mdW5jdGlvbiBmb3JrUXVldWUobmFtZSwgbWFpblRhc2ssIGNiKSB7XG4gIHZhciB0YXNrcyA9IFtdLFxuICAgICAgcmVzdWx0ID0gdm9pZCAwLFxuICAgICAgY29tcGxldGVkID0gZmFsc2U7XG4gIGFkZFRhc2sobWFpblRhc2spO1xuXG4gIGZ1bmN0aW9uIGFib3J0KGVycikge1xuICAgIGNhbmNlbEFsbCgpO1xuICAgIGNiKGVyciwgdHJ1ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBhZGRUYXNrKHRhc2spIHtcbiAgICB0YXNrcy5wdXNoKHRhc2spO1xuICAgIHRhc2suY29udCA9IGZ1bmN0aW9uIChyZXMsIGlzRXJyKSB7XG4gICAgICBpZiAoY29tcGxldGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmVtb3ZlKHRhc2tzLCB0YXNrKTtcbiAgICAgIHRhc2suY29udCA9IG5vb3A7XG4gICAgICBpZiAoaXNFcnIpIHtcbiAgICAgICAgYWJvcnQocmVzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0YXNrID09PSBtYWluVGFzaykge1xuICAgICAgICAgIHJlc3VsdCA9IHJlcztcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRhc2tzLmxlbmd0aCkge1xuICAgICAgICAgIGNvbXBsZXRlZCA9IHRydWU7XG4gICAgICAgICAgY2IocmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgLy8gdGFzay5jb250LmNhbmNlbCA9IHRhc2suY2FuY2VsXG4gIH1cblxuICBmdW5jdGlvbiBjYW5jZWxBbGwoKSB7XG4gICAgaWYgKGNvbXBsZXRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb21wbGV0ZWQgPSB0cnVlO1xuICAgIHRhc2tzLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICAgIHQuY29udCA9IG5vb3A7XG4gICAgICB0LmNhbmNlbCgpO1xuICAgIH0pO1xuICAgIHRhc2tzID0gW107XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGFkZFRhc2s6IGFkZFRhc2ssXG4gICAgY2FuY2VsQWxsOiBjYW5jZWxBbGwsXG4gICAgYWJvcnQ6IGFib3J0LFxuICAgIGdldFRhc2tzOiBmdW5jdGlvbiBnZXRUYXNrcygpIHtcbiAgICAgIHJldHVybiB0YXNrcztcbiAgICB9LFxuICAgIHRhc2tOYW1lczogZnVuY3Rpb24gdGFza05hbWVzKCkge1xuICAgICAgcmV0dXJuIHRhc2tzLm1hcChmdW5jdGlvbiAodCkge1xuICAgICAgICByZXR1cm4gdC5uYW1lO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUYXNrSXRlcmF0b3IoX3JlZikge1xuICB2YXIgY29udGV4dCA9IF9yZWYuY29udGV4dCxcbiAgICAgIGZuID0gX3JlZi5mbixcbiAgICAgIGFyZ3MgPSBfcmVmLmFyZ3M7XG5cbiAgaWYgKGlzLml0ZXJhdG9yKGZuKSkge1xuICAgIHJldHVybiBmbjtcbiAgfVxuXG4gIC8vIGNhdGNoIHN5bmNocm9ub3VzIGZhaWx1cmVzOyBzZWUgIzE1MiBhbmQgIzQ0MVxuICB2YXIgcmVzdWx0ID0gdm9pZCAwLFxuICAgICAgZXJyb3IgPSB2b2lkIDA7XG4gIHRyeSB7XG4gICAgcmVzdWx0ID0gZm4uYXBwbHkoY29udGV4dCwgYXJncyk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGVycm9yID0gZXJyO1xuICB9XG5cbiAgLy8gaS5lLiBhIGdlbmVyYXRvciBmdW5jdGlvbiByZXR1cm5zIGFuIGl0ZXJhdG9yXG4gIGlmIChpcy5pdGVyYXRvcihyZXN1bHQpKSB7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8vIGRvIG5vdCBidWJibGUgdXAgc3luY2hyb25vdXMgZmFpbHVyZXMgZm9yIGRldGFjaGVkIGZvcmtzXG4gIC8vIGluc3RlYWQgY3JlYXRlIGEgZmFpbGVkIHRhc2suIFNlZSAjMTUyIGFuZCAjNDQxXG4gIHJldHVybiBlcnJvciA/IG1ha2VJdGVyYXRvcihmdW5jdGlvbiAoKSB7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH0pIDogbWFrZUl0ZXJhdG9yKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGMgPSB2b2lkIDA7XG4gICAgdmFyIGVmZiA9IHsgZG9uZTogZmFsc2UsIHZhbHVlOiByZXN1bHQgfTtcbiAgICB2YXIgcmV0ID0gZnVuY3Rpb24gcmV0KHZhbHVlKSB7XG4gICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogdmFsdWUgfTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICBpZiAoIXBjKSB7XG4gICAgICAgIHBjID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGVmZjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiByZXQoYXJnKTtcbiAgICAgIH1cbiAgICB9O1xuICB9KCkpO1xufVxuXG52YXIgd3JhcEhlbHBlciA9IGZ1bmN0aW9uIHdyYXBIZWxwZXIoaGVscGVyKSB7XG4gIHJldHVybiB7IGZuOiBoZWxwZXIgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHByb2MoaXRlcmF0b3IpIHtcbiAgdmFyIHN1YnNjcmliZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBub29wO1xuICB9O1xuICB2YXIgZGlzcGF0Y2ggPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IG5vb3A7XG4gIHZhciBnZXRTdGF0ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogbm9vcDtcbiAgdmFyIHBhcmVudENvbnRleHQgPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IHt9O1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiA1ICYmIGFyZ3VtZW50c1s1XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzVdIDoge307XG4gIHZhciBwYXJlbnRFZmZlY3RJZCA9IGFyZ3VtZW50cy5sZW5ndGggPiA2ICYmIGFyZ3VtZW50c1s2XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzZdIDogMDtcbiAgdmFyIG5hbWUgPSBhcmd1bWVudHMubGVuZ3RoID4gNyAmJiBhcmd1bWVudHNbN10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s3XSA6ICdhbm9ueW1vdXMnO1xuICB2YXIgY29udCA9IGFyZ3VtZW50c1s4XTtcblxuICBjaGVjayhpdGVyYXRvciwgaXMuaXRlcmF0b3IsIE5PVF9JVEVSQVRPUl9FUlJPUik7XG5cbiAgdmFyIGVmZmVjdHNTdHJpbmcgPSAnWy4uLmVmZmVjdHNdJztcbiAgdmFyIHJ1blBhcmFsbGVsRWZmZWN0ID0gZGVwcmVjYXRlKHJ1bkFsbEVmZmVjdCwgdXBkYXRlSW5jZW50aXZlKGVmZmVjdHNTdHJpbmcsICdhbGwoJyArIGVmZmVjdHNTdHJpbmcgKyAnKScpKTtcblxuICB2YXIgc2FnYU1vbml0b3IgPSBvcHRpb25zLnNhZ2FNb25pdG9yLFxuICAgICAgbG9nZ2VyID0gb3B0aW9ucy5sb2dnZXIsXG4gICAgICBvbkVycm9yID0gb3B0aW9ucy5vbkVycm9yO1xuXG4gIHZhciBsb2cgPSBsb2dnZXIgfHwgX2xvZztcbiAgdmFyIGxvZ0Vycm9yID0gZnVuY3Rpb24gbG9nRXJyb3IoZXJyKSB7XG4gICAgdmFyIG1lc3NhZ2UgPSBlcnIuc2FnYVN0YWNrO1xuXG4gICAgaWYgKCFtZXNzYWdlICYmIGVyci5zdGFjaykge1xuICAgICAgbWVzc2FnZSA9IGVyci5zdGFjay5zcGxpdCgnXFxuJylbMF0uaW5kZXhPZihlcnIubWVzc2FnZSkgIT09IC0xID8gZXJyLnN0YWNrIDogJ0Vycm9yOiAnICsgZXJyLm1lc3NhZ2UgKyAnXFxuJyArIGVyci5zdGFjaztcbiAgICB9XG5cbiAgICBsb2coJ2Vycm9yJywgJ3VuY2F1Z2h0IGF0ICcgKyBuYW1lLCBtZXNzYWdlIHx8IGVyci5tZXNzYWdlIHx8IGVycik7XG4gIH07XG4gIHZhciBzdGRDaGFubmVsID0gX3N0ZENoYW5uZWwoc3Vic2NyaWJlKTtcbiAgdmFyIHRhc2tDb250ZXh0ID0gT2JqZWN0LmNyZWF0ZShwYXJlbnRDb250ZXh0KTtcbiAgLyoqXG4gICAgVHJhY2tzIHRoZSBjdXJyZW50IGVmZmVjdCBjYW5jZWxsYXRpb25cbiAgICBFYWNoIHRpbWUgdGhlIGdlbmVyYXRvciBwcm9ncmVzc2VzLiBjYWxsaW5nIHJ1bkVmZmVjdCB3aWxsIHNldCBhIG5ldyB2YWx1ZVxuICAgIG9uIGl0LiBJdCBhbGxvd3MgcHJvcGFnYXRpbmcgY2FuY2VsbGF0aW9uIHRvIGNoaWxkIGVmZmVjdHNcbiAgKiovXG4gIG5leHQuY2FuY2VsID0gbm9vcDtcblxuICAvKipcbiAgICBDcmVhdGVzIGEgbmV3IHRhc2sgZGVzY3JpcHRvciBmb3IgdGhpcyBnZW5lcmF0b3IsIFdlJ2xsIGFsc28gY3JlYXRlIGEgbWFpbiB0YXNrXG4gICAgdG8gdHJhY2sgdGhlIG1haW4gZmxvdyAoYmVzaWRlcyBvdGhlciBmb3JrZWQgdGFza3MpXG4gICoqL1xuICB2YXIgdGFzayA9IG5ld1Rhc2socGFyZW50RWZmZWN0SWQsIG5hbWUsIGl0ZXJhdG9yLCBjb250KTtcbiAgdmFyIG1haW5UYXNrID0geyBuYW1lOiBuYW1lLCBjYW5jZWw6IGNhbmNlbE1haW4sIGlzUnVubmluZzogdHJ1ZSB9O1xuICB2YXIgdGFza1F1ZXVlID0gZm9ya1F1ZXVlKG5hbWUsIG1haW5UYXNrLCBlbmQpO1xuXG4gIC8qKlxuICAgIGNhbmNlbGxhdGlvbiBvZiB0aGUgbWFpbiB0YXNrLiBXZSdsbCBzaW1wbHkgcmVzdW1lIHRoZSBHZW5lcmF0b3Igd2l0aCBhIENhbmNlbFxuICAqKi9cbiAgZnVuY3Rpb24gY2FuY2VsTWFpbigpIHtcbiAgICBpZiAobWFpblRhc2suaXNSdW5uaW5nICYmICFtYWluVGFzay5pc0NhbmNlbGxlZCkge1xuICAgICAgbWFpblRhc2suaXNDYW5jZWxsZWQgPSB0cnVlO1xuICAgICAgbmV4dChUQVNLX0NBTkNFTCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAgVGhpcyBtYXkgYmUgY2FsbGVkIGJ5IGEgcGFyZW50IGdlbmVyYXRvciB0byB0cmlnZ2VyL3Byb3BhZ2F0ZSBjYW5jZWxsYXRpb25cbiAgICBjYW5jZWwgYWxsIHBlbmRpbmcgdGFza3MgKGluY2x1ZGluZyB0aGUgbWFpbiB0YXNrKSwgdGhlbiBlbmQgdGhlIGN1cnJlbnQgdGFzay5cbiAgICAgQ2FuY2VsbGF0aW9uIHByb3BhZ2F0ZXMgZG93biB0byB0aGUgd2hvbGUgZXhlY3V0aW9uIHRyZWUgaG9sZGVkIGJ5IHRoaXMgUGFyZW50IHRhc2tcbiAgICBJdCdzIGFsc28gcHJvcGFnYXRlZCB0byBhbGwgam9pbmVycyBvZiB0aGlzIHRhc2sgYW5kIHRoZWlyIGV4ZWN1dGlvbiB0cmVlL2pvaW5lcnNcbiAgICAgQ2FuY2VsbGF0aW9uIGlzIG5vb3AgZm9yIHRlcm1pbmF0ZWQvQ2FuY2VsbGVkIHRhc2tzIHRhc2tzXG4gICoqL1xuICBmdW5jdGlvbiBjYW5jZWwoKSB7XG4gICAgLyoqXG4gICAgICBXZSBuZWVkIHRvIGNoZWNrIGJvdGggUnVubmluZyBhbmQgQ2FuY2VsbGVkIHN0YXR1c1xuICAgICAgVGFza3MgY2FuIGJlIENhbmNlbGxlZCBidXQgc3RpbGwgUnVubmluZ1xuICAgICoqL1xuICAgIGlmIChpdGVyYXRvci5faXNSdW5uaW5nICYmICFpdGVyYXRvci5faXNDYW5jZWxsZWQpIHtcbiAgICAgIGl0ZXJhdG9yLl9pc0NhbmNlbGxlZCA9IHRydWU7XG4gICAgICB0YXNrUXVldWUuY2FuY2VsQWxsKCk7XG4gICAgICAvKipcbiAgICAgICAgRW5kaW5nIHdpdGggYSBOZXZlciByZXN1bHQgd2lsbCBwcm9wYWdhdGUgdGhlIENhbmNlbGxhdGlvbiB0byBhbGwgam9pbmVyc1xuICAgICAgKiovXG4gICAgICBlbmQoVEFTS19DQU5DRUwpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICBhdHRhY2hlcyBjYW5jZWxsYXRpb24gbG9naWMgdG8gdGhpcyB0YXNrJ3MgY29udGludWF0aW9uXG4gICAgdGhpcyB3aWxsIHBlcm1pdCBjYW5jZWxsYXRpb24gdG8gcHJvcGFnYXRlIGRvd24gdGhlIGNhbGwgY2hhaW5cbiAgKiovXG4gIGNvbnQgJiYgKGNvbnQuY2FuY2VsID0gY2FuY2VsKTtcblxuICAvLyB0cmFja3MgdGhlIHJ1bm5pbmcgc3RhdHVzXG4gIGl0ZXJhdG9yLl9pc1J1bm5pbmcgPSB0cnVlO1xuXG4gIC8vIGtpY2tzIHVwIHRoZSBnZW5lcmF0b3JcbiAgbmV4dCgpO1xuXG4gIC8vIHRoZW4gcmV0dXJuIHRoZSB0YXNrIGRlc2NyaXB0b3IgdG8gdGhlIGNhbGxlclxuICByZXR1cm4gdGFzaztcblxuICAvKipcbiAgICBUaGlzIGlzIHRoZSBnZW5lcmF0b3IgZHJpdmVyXG4gICAgSXQncyBhIHJlY3Vyc2l2ZSBhc3luYy9jb250aW51YXRpb24gZnVuY3Rpb24gd2hpY2ggY2FsbHMgaXRzZWxmXG4gICAgdW50aWwgdGhlIGdlbmVyYXRvciB0ZXJtaW5hdGVzIG9yIHRocm93c1xuICAqKi9cbiAgZnVuY3Rpb24gbmV4dChhcmcsIGlzRXJyKSB7XG4gICAgLy8gUHJldmVudGl2ZSBtZWFzdXJlLiBJZiB3ZSBlbmQgdXAgaGVyZSwgdGhlbiB0aGVyZSBpcyByZWFsbHkgc29tZXRoaW5nIHdyb25nXG4gICAgaWYgKCFtYWluVGFzay5pc1J1bm5pbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVHJ5aW5nIHRvIHJlc3VtZSBhbiBhbHJlYWR5IGZpbmlzaGVkIGdlbmVyYXRvcicpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdm9pZCAwO1xuICAgICAgaWYgKGlzRXJyKSB7XG4gICAgICAgIHJlc3VsdCA9IGl0ZXJhdG9yLnRocm93KGFyZyk7XG4gICAgICB9IGVsc2UgaWYgKGFyZyA9PT0gVEFTS19DQU5DRUwpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAgZ2V0dGluZyBUQVNLX0NBTkNFTCBhdXRvbWF0aWNhbGx5IGNhbmNlbHMgdGhlIG1haW4gdGFza1xuICAgICAgICAgIFdlIGNhbiBnZXQgdGhpcyB2YWx1ZSBoZXJlXG4gICAgICAgICAgIC0gQnkgY2FuY2VsbGluZyB0aGUgcGFyZW50IHRhc2sgbWFudWFsbHlcbiAgICAgICAgICAtIEJ5IGpvaW5pbmcgYSBDYW5jZWxsZWQgdGFza1xuICAgICAgICAqKi9cbiAgICAgICAgbWFpblRhc2suaXNDYW5jZWxsZWQgPSB0cnVlO1xuICAgICAgICAvKipcbiAgICAgICAgICBDYW5jZWxzIHRoZSBjdXJyZW50IGVmZmVjdDsgdGhpcyB3aWxsIHByb3BhZ2F0ZSB0aGUgY2FuY2VsbGF0aW9uIGRvd24gdG8gYW55IGNhbGxlZCB0YXNrc1xuICAgICAgICAqKi9cbiAgICAgICAgbmV4dC5jYW5jZWwoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAgSWYgdGhpcyBHZW5lcmF0b3IgaGFzIGEgYHJldHVybmAgbWV0aG9kIHRoZW4gaW52b2tlcyBpdFxuICAgICAgICAgIFRoaXMgd2lsbCBqdW1wIHRvIHRoZSBmaW5hbGx5IGJsb2NrXG4gICAgICAgICoqL1xuICAgICAgICByZXN1bHQgPSBpcy5mdW5jKGl0ZXJhdG9yLnJldHVybikgPyBpdGVyYXRvci5yZXR1cm4oVEFTS19DQU5DRUwpIDogeyBkb25lOiB0cnVlLCB2YWx1ZTogVEFTS19DQU5DRUwgfTtcbiAgICAgIH0gZWxzZSBpZiAoYXJnID09PSBDSEFOTkVMX0VORCkge1xuICAgICAgICAvLyBXZSBnZXQgQ0hBTk5FTF9FTkQgYnkgdGFraW5nIGZyb20gYSBjaGFubmVsIHRoYXQgZW5kZWQgdXNpbmcgYHRha2VgIChhbmQgbm90IGB0YWtlbWAgdXNlZCB0byB0cmFwIEVuZCBvZiBjaGFubmVscylcbiAgICAgICAgcmVzdWx0ID0gaXMuZnVuYyhpdGVyYXRvci5yZXR1cm4pID8gaXRlcmF0b3IucmV0dXJuKCkgOiB7IGRvbmU6IHRydWUgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoYXJnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFyZXN1bHQuZG9uZSkge1xuICAgICAgICBydW5FZmZlY3QocmVzdWx0LnZhbHVlLCBwYXJlbnRFZmZlY3RJZCwgJycsIG5leHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAgVGhpcyBHZW5lcmF0b3IgaGFzIGVuZGVkLCB0ZXJtaW5hdGUgdGhlIG1haW4gdGFzayBhbmQgbm90aWZ5IHRoZSBmb3JrIHF1ZXVlXG4gICAgICAgICoqL1xuICAgICAgICBtYWluVGFzay5pc01haW5SdW5uaW5nID0gZmFsc2U7XG4gICAgICAgIG1haW5UYXNrLmNvbnQgJiYgbWFpblRhc2suY29udChyZXN1bHQudmFsdWUpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBpZiAobWFpblRhc2suaXNDYW5jZWxsZWQpIHtcbiAgICAgICAgbG9nRXJyb3IoZXJyb3IpO1xuICAgICAgfVxuICAgICAgbWFpblRhc2suaXNNYWluUnVubmluZyA9IGZhbHNlO1xuICAgICAgbWFpblRhc2suY29udChlcnJvciwgdHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZW5kKHJlc3VsdCwgaXNFcnIpIHtcbiAgICBpdGVyYXRvci5faXNSdW5uaW5nID0gZmFsc2U7XG4gICAgc3RkQ2hhbm5lbC5jbG9zZSgpO1xuICAgIGlmICghaXNFcnIpIHtcbiAgICAgIGl0ZXJhdG9yLl9yZXN1bHQgPSByZXN1bHQ7XG4gICAgICBpdGVyYXRvci5fZGVmZXJyZWRFbmQgJiYgaXRlcmF0b3IuX2RlZmVycmVkRW5kLnJlc29sdmUocmVzdWx0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXN1bHQsICdzYWdhU3RhY2snLCB7XG4gICAgICAgICAgdmFsdWU6ICdhdCAnICsgbmFtZSArICcgXFxuICcgKyAocmVzdWx0LnNhZ2FTdGFjayB8fCByZXN1bHQuc3RhY2spLFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmICghdGFzay5jb250KSB7XG4gICAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBFcnJvciAmJiBvbkVycm9yKSB7XG4gICAgICAgICAgb25FcnJvcihyZXN1bHQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxvZ0Vycm9yKHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGl0ZXJhdG9yLl9lcnJvciA9IHJlc3VsdDtcbiAgICAgIGl0ZXJhdG9yLl9pc0Fib3J0ZWQgPSB0cnVlO1xuICAgICAgaXRlcmF0b3IuX2RlZmVycmVkRW5kICYmIGl0ZXJhdG9yLl9kZWZlcnJlZEVuZC5yZWplY3QocmVzdWx0KTtcbiAgICB9XG4gICAgdGFzay5jb250ICYmIHRhc2suY29udChyZXN1bHQsIGlzRXJyKTtcbiAgICB0YXNrLmpvaW5lcnMuZm9yRWFjaChmdW5jdGlvbiAoaikge1xuICAgICAgcmV0dXJuIGouY2IocmVzdWx0LCBpc0Vycik7XG4gICAgfSk7XG4gICAgdGFzay5qb2luZXJzID0gbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJ1bkVmZmVjdChlZmZlY3QsIHBhcmVudEVmZmVjdElkKSB7XG4gICAgdmFyIGxhYmVsID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAnJztcbiAgICB2YXIgY2IgPSBhcmd1bWVudHNbM107XG5cbiAgICB2YXIgZWZmZWN0SWQgPSBuZXh0RWZmZWN0SWQoKTtcbiAgICBzYWdhTW9uaXRvciAmJiBzYWdhTW9uaXRvci5lZmZlY3RUcmlnZ2VyZWQoeyBlZmZlY3RJZDogZWZmZWN0SWQsIHBhcmVudEVmZmVjdElkOiBwYXJlbnRFZmZlY3RJZCwgbGFiZWw6IGxhYmVsLCBlZmZlY3Q6IGVmZmVjdCB9KTtcblxuICAgIC8qKlxuICAgICAgY29tcGxldGlvbiBjYWxsYmFjayBhbmQgY2FuY2VsIGNhbGxiYWNrIGFyZSBtdXR1YWxseSBleGNsdXNpdmVcbiAgICAgIFdlIGNhbid0IGNhbmNlbCBhbiBhbHJlYWR5IGNvbXBsZXRlZCBlZmZlY3RcbiAgICAgIEFuZCBXZSBjYW4ndCBjb21wbGV0ZSBhbiBhbHJlYWR5IGNhbmNlbGxlZCBlZmZlY3RJZFxuICAgICoqL1xuICAgIHZhciBlZmZlY3RTZXR0bGVkID0gdm9pZCAwO1xuXG4gICAgLy8gQ29tcGxldGlvbiBjYWxsYmFjayBwYXNzZWQgdG8gdGhlIGFwcHJvcHJpYXRlIGVmZmVjdCBydW5uZXJcbiAgICBmdW5jdGlvbiBjdXJyQ2IocmVzLCBpc0Vycikge1xuICAgICAgaWYgKGVmZmVjdFNldHRsZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBlZmZlY3RTZXR0bGVkID0gdHJ1ZTtcbiAgICAgIGNiLmNhbmNlbCA9IG5vb3A7IC8vIGRlZmVuc2l2ZSBtZWFzdXJlXG4gICAgICBpZiAoc2FnYU1vbml0b3IpIHtcbiAgICAgICAgaXNFcnIgPyBzYWdhTW9uaXRvci5lZmZlY3RSZWplY3RlZChlZmZlY3RJZCwgcmVzKSA6IHNhZ2FNb25pdG9yLmVmZmVjdFJlc29sdmVkKGVmZmVjdElkLCByZXMpO1xuICAgICAgfVxuICAgICAgY2IocmVzLCBpc0Vycik7XG4gICAgfVxuICAgIC8vIHRyYWNrcyBkb3duIHRoZSBjdXJyZW50IGNhbmNlbFxuICAgIGN1cnJDYi5jYW5jZWwgPSBub29wO1xuXG4gICAgLy8gc2V0dXAgY2FuY2VsbGF0aW9uIGxvZ2ljIG9uIHRoZSBwYXJlbnQgY2JcbiAgICBjYi5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBwcmV2ZW50cyBjYW5jZWxsaW5nIGFuIGFscmVhZHkgY29tcGxldGVkIGVmZmVjdFxuICAgICAgaWYgKGVmZmVjdFNldHRsZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBlZmZlY3RTZXR0bGVkID0gdHJ1ZTtcbiAgICAgIC8qKlxuICAgICAgICBwcm9wYWdhdGVzIGNhbmNlbCBkb3dud2FyZFxuICAgICAgICBjYXRjaCB1bmNhdWdodCBjYW5jZWxsYXRpb25zIGVycm9yczsgc2luY2Ugd2UgY2FuIG5vIGxvbmdlciBjYWxsIHRoZSBjb21wbGV0aW9uXG4gICAgICAgIGNhbGxiYWNrLCBsb2cgZXJyb3JzIHJhaXNlZCBkdXJpbmcgY2FuY2VsbGF0aW9ucyBpbnRvIHRoZSBjb25zb2xlXG4gICAgICAqKi9cbiAgICAgIHRyeSB7XG4gICAgICAgIGN1cnJDYi5jYW5jZWwoKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBsb2dFcnJvcihlcnIpO1xuICAgICAgfVxuICAgICAgY3VyckNiLmNhbmNlbCA9IG5vb3A7IC8vIGRlZmVuc2l2ZSBtZWFzdXJlXG5cbiAgICAgIHNhZ2FNb25pdG9yICYmIHNhZ2FNb25pdG9yLmVmZmVjdENhbmNlbGxlZChlZmZlY3RJZCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAgZWFjaCBlZmZlY3QgcnVubmVyIG11c3QgYXR0YWNoIGl0cyBvd24gbG9naWMgb2YgY2FuY2VsbGF0aW9uIHRvIHRoZSBwcm92aWRlZCBjYWxsYmFja1xuICAgICAgaXQgYWxsb3dzIHRoaXMgZ2VuZXJhdG9yIHRvIHByb3BhZ2F0ZSBjYW5jZWxsYXRpb24gZG93bndhcmQuXG4gICAgICAgQVRURU5USU9OISBlZmZlY3QgcnVubmVycyBtdXN0IHNldHVwIHRoZSBjYW5jZWwgbG9naWMgYnkgc2V0dGluZyBjYi5jYW5jZWwgPSBbY2FuY2VsTWV0aG9kXVxuICAgICAgQW5kIHRoZSBzZXR1cCBtdXN0IG9jY3VyIGJlZm9yZSBjYWxsaW5nIHRoZSBjYWxsYmFja1xuICAgICAgIFRoaXMgaXMgYSBzb3J0IG9mIGludmVyc2lvbiBvZiBjb250cm9sOiBjYWxsZWQgYXN5bmMgZnVuY3Rpb25zIGFyZSByZXNwb25zaWJsZVxuICAgICAgZm9yIGNvbXBsZXRpbmcgdGhlIGZsb3cgYnkgY2FsbGluZyB0aGUgcHJvdmlkZWQgY29udGludWF0aW9uOyB3aGlsZSBjYWxsZXIgZnVuY3Rpb25zXG4gICAgICBhcmUgcmVzcG9uc2libGUgZm9yIGFib3J0aW5nIHRoZSBjdXJyZW50IGZsb3cgYnkgY2FsbGluZyB0aGUgYXR0YWNoZWQgY2FuY2VsIGZ1bmN0aW9uXG4gICAgICAgTGlicmFyeSB1c2VycyBjYW4gYXR0YWNoIHRoZWlyIG93biBjYW5jZWxsYXRpb24gbG9naWMgdG8gcHJvbWlzZXMgYnkgZGVmaW5pbmcgYVxuICAgICAgcHJvbWlzZVtDQU5DRUxdIG1ldGhvZCBpbiB0aGVpciByZXR1cm5lZCBwcm9taXNlc1xuICAgICAgQVRURU5USU9OISBjYWxsaW5nIGNhbmNlbCBtdXN0IGhhdmUgbm8gZWZmZWN0IG9uIGFuIGFscmVhZHkgY29tcGxldGVkIG9yIGNhbmNlbGxlZCBlZmZlY3RcbiAgICAqKi9cbiAgICB2YXIgZGF0YSA9IHZvaWQgMDtcbiAgICAvLyBwcmV0dGllci1pZ25vcmVcbiAgICByZXR1cm4gKFxuICAgICAgLy8gTm9uIGRlY2xhcmF0aXZlIGVmZmVjdFxuICAgICAgaXMucHJvbWlzZShlZmZlY3QpID8gcmVzb2x2ZVByb21pc2UoZWZmZWN0LCBjdXJyQ2IpIDogaXMuaGVscGVyKGVmZmVjdCkgPyBydW5Gb3JrRWZmZWN0KHdyYXBIZWxwZXIoZWZmZWN0KSwgZWZmZWN0SWQsIGN1cnJDYikgOiBpcy5pdGVyYXRvcihlZmZlY3QpID8gcmVzb2x2ZUl0ZXJhdG9yKGVmZmVjdCwgZWZmZWN0SWQsIG5hbWUsIGN1cnJDYilcblxuICAgICAgLy8gZGVjbGFyYXRpdmUgZWZmZWN0c1xuICAgICAgOiBpcy5hcnJheShlZmZlY3QpID8gcnVuUGFyYWxsZWxFZmZlY3QoZWZmZWN0LCBlZmZlY3RJZCwgY3VyckNiKSA6IChkYXRhID0gYXNFZmZlY3QudGFrZShlZmZlY3QpKSA/IHJ1blRha2VFZmZlY3QoZGF0YSwgY3VyckNiKSA6IChkYXRhID0gYXNFZmZlY3QucHV0KGVmZmVjdCkpID8gcnVuUHV0RWZmZWN0KGRhdGEsIGN1cnJDYikgOiAoZGF0YSA9IGFzRWZmZWN0LmFsbChlZmZlY3QpKSA/IHJ1bkFsbEVmZmVjdChkYXRhLCBlZmZlY3RJZCwgY3VyckNiKSA6IChkYXRhID0gYXNFZmZlY3QucmFjZShlZmZlY3QpKSA/IHJ1blJhY2VFZmZlY3QoZGF0YSwgZWZmZWN0SWQsIGN1cnJDYikgOiAoZGF0YSA9IGFzRWZmZWN0LmNhbGwoZWZmZWN0KSkgPyBydW5DYWxsRWZmZWN0KGRhdGEsIGVmZmVjdElkLCBjdXJyQ2IpIDogKGRhdGEgPSBhc0VmZmVjdC5jcHMoZWZmZWN0KSkgPyBydW5DUFNFZmZlY3QoZGF0YSwgY3VyckNiKSA6IChkYXRhID0gYXNFZmZlY3QuZm9yayhlZmZlY3QpKSA/IHJ1bkZvcmtFZmZlY3QoZGF0YSwgZWZmZWN0SWQsIGN1cnJDYikgOiAoZGF0YSA9IGFzRWZmZWN0LmpvaW4oZWZmZWN0KSkgPyBydW5Kb2luRWZmZWN0KGRhdGEsIGN1cnJDYikgOiAoZGF0YSA9IGFzRWZmZWN0LmNhbmNlbChlZmZlY3QpKSA/IHJ1bkNhbmNlbEVmZmVjdChkYXRhLCBjdXJyQ2IpIDogKGRhdGEgPSBhc0VmZmVjdC5zZWxlY3QoZWZmZWN0KSkgPyBydW5TZWxlY3RFZmZlY3QoZGF0YSwgY3VyckNiKSA6IChkYXRhID0gYXNFZmZlY3QuYWN0aW9uQ2hhbm5lbChlZmZlY3QpKSA/IHJ1bkNoYW5uZWxFZmZlY3QoZGF0YSwgY3VyckNiKSA6IChkYXRhID0gYXNFZmZlY3QuZmx1c2goZWZmZWN0KSkgPyBydW5GbHVzaEVmZmVjdChkYXRhLCBjdXJyQ2IpIDogKGRhdGEgPSBhc0VmZmVjdC5jYW5jZWxsZWQoZWZmZWN0KSkgPyBydW5DYW5jZWxsZWRFZmZlY3QoZGF0YSwgY3VyckNiKSA6IChkYXRhID0gYXNFZmZlY3QuZ2V0Q29udGV4dChlZmZlY3QpKSA/IHJ1bkdldENvbnRleHRFZmZlY3QoZGF0YSwgY3VyckNiKSA6IChkYXRhID0gYXNFZmZlY3Quc2V0Q29udGV4dChlZmZlY3QpKSA/IHJ1blNldENvbnRleHRFZmZlY3QoZGF0YSwgY3VyckNiKSA6IC8qIGFueXRoaW5nIGVsc2UgcmV0dXJuZWQgYXMgaXMgKi9jdXJyQ2IoZWZmZWN0KVxuICAgICk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNvbHZlUHJvbWlzZShwcm9taXNlLCBjYikge1xuICAgIHZhciBjYW5jZWxQcm9taXNlID0gcHJvbWlzZVtDQU5DRUxdO1xuICAgIGlmIChpcy5mdW5jKGNhbmNlbFByb21pc2UpKSB7XG4gICAgICBjYi5jYW5jZWwgPSBjYW5jZWxQcm9taXNlO1xuICAgIH0gZWxzZSBpZiAoaXMuZnVuYyhwcm9taXNlLmFib3J0KSkge1xuICAgICAgY2IuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gcHJvbWlzZS5hYm9ydCgpO1xuICAgICAgfTtcbiAgICAgIC8vIFRPRE86IGFkZCBzdXBwb3J0IGZvciB0aGUgZmV0Y2ggQVBJLCB3aGVuZXZlciB0aGV5IGdldCBhcm91bmQgdG9cbiAgICAgIC8vIGFkZGluZyBjYW5jZWwgc3VwcG9ydFxuICAgIH1cbiAgICBwcm9taXNlLnRoZW4oY2IsIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgcmV0dXJuIGNiKGVycm9yLCB0cnVlKTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc29sdmVJdGVyYXRvcihpdGVyYXRvciwgZWZmZWN0SWQsIG5hbWUsIGNiKSB7XG4gICAgcHJvYyhpdGVyYXRvciwgc3Vic2NyaWJlLCBkaXNwYXRjaCwgZ2V0U3RhdGUsIHRhc2tDb250ZXh0LCBvcHRpb25zLCBlZmZlY3RJZCwgbmFtZSwgY2IpO1xuICB9XG5cbiAgZnVuY3Rpb24gcnVuVGFrZUVmZmVjdChfcmVmMiwgY2IpIHtcbiAgICB2YXIgY2hhbm5lbCA9IF9yZWYyLmNoYW5uZWwsXG4gICAgICAgIHBhdHRlcm4gPSBfcmVmMi5wYXR0ZXJuLFxuICAgICAgICBtYXliZSA9IF9yZWYyLm1heWJlO1xuXG4gICAgY2hhbm5lbCA9IGNoYW5uZWwgfHwgc3RkQ2hhbm5lbDtcbiAgICB2YXIgdGFrZUNiID0gZnVuY3Rpb24gdGFrZUNiKGlucCkge1xuICAgICAgcmV0dXJuIGlucCBpbnN0YW5jZW9mIEVycm9yID8gY2IoaW5wLCB0cnVlKSA6IGlzRW5kKGlucCkgJiYgIW1heWJlID8gY2IoQ0hBTk5FTF9FTkQpIDogY2IoaW5wKTtcbiAgICB9O1xuICAgIHRyeSB7XG4gICAgICBjaGFubmVsLnRha2UodGFrZUNiLCBtYXRjaGVyKHBhdHRlcm4pKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiBjYihlcnIsIHRydWUpO1xuICAgIH1cbiAgICBjYi5jYW5jZWwgPSB0YWtlQ2IuY2FuY2VsO1xuICB9XG5cbiAgZnVuY3Rpb24gcnVuUHV0RWZmZWN0KF9yZWYzLCBjYikge1xuICAgIHZhciBjaGFubmVsID0gX3JlZjMuY2hhbm5lbCxcbiAgICAgICAgYWN0aW9uID0gX3JlZjMuYWN0aW9uLFxuICAgICAgICByZXNvbHZlID0gX3JlZjMucmVzb2x2ZTtcblxuICAgIC8qKlxuICAgICAgU2NoZWR1bGUgdGhlIHB1dCBpbiBjYXNlIGFub3RoZXIgc2FnYSBpcyBob2xkaW5nIGEgbG9jay5cbiAgICAgIFRoZSBwdXQgd2lsbCBiZSBleGVjdXRlZCBhdG9taWNhbGx5LiBpZSBuZXN0ZWQgcHV0cyB3aWxsIGV4ZWN1dGUgYWZ0ZXJcbiAgICAgIHRoaXMgcHV0IGhhcyB0ZXJtaW5hdGVkLlxuICAgICoqL1xuICAgIGFzYXAoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHJlc3VsdCA9IHZvaWQgMDtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlc3VsdCA9IChjaGFubmVsID8gY2hhbm5lbC5wdXQgOiBkaXNwYXRjaCkoYWN0aW9uKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIC8vIElmIHdlIGhhdmUgYSBjaGFubmVsIG9yIGBwdXQucmVzb2x2ZWAgd2FzIHVzZWQgdGhlbiBidWJibGUgdXAgdGhlIGVycm9yLlxuICAgICAgICBpZiAoY2hhbm5lbCB8fCByZXNvbHZlKSByZXR1cm4gY2IoZXJyb3IsIHRydWUpO1xuICAgICAgICBsb2dFcnJvcihlcnJvcik7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZXNvbHZlICYmIGlzLnByb21pc2UocmVzdWx0KSkge1xuICAgICAgICByZXNvbHZlUHJvbWlzZShyZXN1bHQsIGNiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBjYihyZXN1bHQpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIC8vIFB1dCBlZmZlY3RzIGFyZSBub24gY2FuY2VsbGFibGVzXG4gIH1cblxuICBmdW5jdGlvbiBydW5DYWxsRWZmZWN0KF9yZWY0LCBlZmZlY3RJZCwgY2IpIHtcbiAgICB2YXIgY29udGV4dCA9IF9yZWY0LmNvbnRleHQsXG4gICAgICAgIGZuID0gX3JlZjQuZm4sXG4gICAgICAgIGFyZ3MgPSBfcmVmNC5hcmdzO1xuXG4gICAgdmFyIHJlc3VsdCA9IHZvaWQgMDtcbiAgICAvLyBjYXRjaCBzeW5jaHJvbm91cyBmYWlsdXJlczsgc2VlICMxNTJcbiAgICB0cnkge1xuICAgICAgcmVzdWx0ID0gZm4uYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBjYihlcnJvciwgdHJ1ZSk7XG4gICAgfVxuICAgIHJldHVybiBpcy5wcm9taXNlKHJlc3VsdCkgPyByZXNvbHZlUHJvbWlzZShyZXN1bHQsIGNiKSA6IGlzLml0ZXJhdG9yKHJlc3VsdCkgPyByZXNvbHZlSXRlcmF0b3IocmVzdWx0LCBlZmZlY3RJZCwgZm4ubmFtZSwgY2IpIDogY2IocmVzdWx0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJ1bkNQU0VmZmVjdChfcmVmNSwgY2IpIHtcbiAgICB2YXIgY29udGV4dCA9IF9yZWY1LmNvbnRleHQsXG4gICAgICAgIGZuID0gX3JlZjUuZm4sXG4gICAgICAgIGFyZ3MgPSBfcmVmNS5hcmdzO1xuXG4gICAgLy8gQ1BTIChpZSBub2RlIHN0eWxlIGZ1bmN0aW9ucykgY2FuIGRlZmluZSB0aGVpciBvd24gY2FuY2VsbGF0aW9uIGxvZ2ljXG4gICAgLy8gYnkgc2V0dGluZyBjYW5jZWwgZmllbGQgb24gdGhlIGNiXG5cbiAgICAvLyBjYXRjaCBzeW5jaHJvbm91cyBmYWlsdXJlczsgc2VlICMxNTJcbiAgICB0cnkge1xuICAgICAgdmFyIGNwc0NiID0gZnVuY3Rpb24gY3BzQ2IoZXJyLCByZXMpIHtcbiAgICAgICAgcmV0dXJuIGlzLnVuZGVmKGVycikgPyBjYihyZXMpIDogY2IoZXJyLCB0cnVlKTtcbiAgICAgIH07XG4gICAgICBmbi5hcHBseShjb250ZXh0LCBhcmdzLmNvbmNhdChjcHNDYikpO1xuICAgICAgaWYgKGNwc0NiLmNhbmNlbCkge1xuICAgICAgICBjYi5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIGNwc0NiLmNhbmNlbCgpO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gY2IoZXJyb3IsIHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJ1bkZvcmtFZmZlY3QoX3JlZjYsIGVmZmVjdElkLCBjYikge1xuICAgIHZhciBjb250ZXh0ID0gX3JlZjYuY29udGV4dCxcbiAgICAgICAgZm4gPSBfcmVmNi5mbixcbiAgICAgICAgYXJncyA9IF9yZWY2LmFyZ3MsXG4gICAgICAgIGRldGFjaGVkID0gX3JlZjYuZGV0YWNoZWQ7XG5cbiAgICB2YXIgdGFza0l0ZXJhdG9yID0gY3JlYXRlVGFza0l0ZXJhdG9yKHsgY29udGV4dDogY29udGV4dCwgZm46IGZuLCBhcmdzOiBhcmdzIH0pO1xuXG4gICAgdHJ5IHtcbiAgICAgIHN1c3BlbmQoKTtcbiAgICAgIHZhciBfdGFzayA9IHByb2ModGFza0l0ZXJhdG9yLCBzdWJzY3JpYmUsIGRpc3BhdGNoLCBnZXRTdGF0ZSwgdGFza0NvbnRleHQsIG9wdGlvbnMsIGVmZmVjdElkLCBmbi5uYW1lLCBkZXRhY2hlZCA/IG51bGwgOiBub29wKTtcblxuICAgICAgaWYgKGRldGFjaGVkKSB7XG4gICAgICAgIGNiKF90YXNrKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0YXNrSXRlcmF0b3IuX2lzUnVubmluZykge1xuICAgICAgICAgIHRhc2tRdWV1ZS5hZGRUYXNrKF90YXNrKTtcbiAgICAgICAgICBjYihfdGFzayk7XG4gICAgICAgIH0gZWxzZSBpZiAodGFza0l0ZXJhdG9yLl9lcnJvcikge1xuICAgICAgICAgIHRhc2tRdWV1ZS5hYm9ydCh0YXNrSXRlcmF0b3IuX2Vycm9yKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYihfdGFzayk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgZmx1c2goKTtcbiAgICB9XG4gICAgLy8gRm9yayBlZmZlY3RzIGFyZSBub24gY2FuY2VsbGFibGVzXG4gIH1cblxuICBmdW5jdGlvbiBydW5Kb2luRWZmZWN0KHQsIGNiKSB7XG4gICAgaWYgKHQuaXNSdW5uaW5nKCkpIHtcbiAgICAgIHZhciBqb2luZXIgPSB7IHRhc2s6IHRhc2ssIGNiOiBjYiB9O1xuICAgICAgY2IuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gcmVtb3ZlKHQuam9pbmVycywgam9pbmVyKTtcbiAgICAgIH07XG4gICAgICB0LmpvaW5lcnMucHVzaChqb2luZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0LmlzQWJvcnRlZCgpID8gY2IodC5lcnJvcigpLCB0cnVlKSA6IGNiKHQucmVzdWx0KCkpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJ1bkNhbmNlbEVmZmVjdCh0YXNrVG9DYW5jZWwsIGNiKSB7XG4gICAgaWYgKHRhc2tUb0NhbmNlbCA9PT0gU0VMRl9DQU5DRUxMQVRJT04pIHtcbiAgICAgIHRhc2tUb0NhbmNlbCA9IHRhc2s7XG4gICAgfVxuICAgIGlmICh0YXNrVG9DYW5jZWwuaXNSdW5uaW5nKCkpIHtcbiAgICAgIHRhc2tUb0NhbmNlbC5jYW5jZWwoKTtcbiAgICB9XG4gICAgY2IoKTtcbiAgICAvLyBjYW5jZWwgZWZmZWN0cyBhcmUgbm9uIGNhbmNlbGxhYmxlc1xuICB9XG5cbiAgZnVuY3Rpb24gcnVuQWxsRWZmZWN0KGVmZmVjdHMsIGVmZmVjdElkLCBjYikge1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZWZmZWN0cyk7XG5cbiAgICBpZiAoIWtleXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gY2IoaXMuYXJyYXkoZWZmZWN0cykgPyBbXSA6IHt9KTtcbiAgICB9XG5cbiAgICB2YXIgY29tcGxldGVkQ291bnQgPSAwO1xuICAgIHZhciBjb21wbGV0ZWQgPSB2b2lkIDA7XG4gICAgdmFyIHJlc3VsdHMgPSB7fTtcbiAgICB2YXIgY2hpbGRDYnMgPSB7fTtcblxuICAgIGZ1bmN0aW9uIGNoZWNrRWZmZWN0RW5kKCkge1xuICAgICAgaWYgKGNvbXBsZXRlZENvdW50ID09PSBrZXlzLmxlbmd0aCkge1xuICAgICAgICBjb21wbGV0ZWQgPSB0cnVlO1xuICAgICAgICBjYihpcy5hcnJheShlZmZlY3RzKSA/IGFycmF5LmZyb20oX2V4dGVuZHMoe30sIHJlc3VsdHMsIHsgbGVuZ3RoOiBrZXlzLmxlbmd0aCB9KSkgOiByZXN1bHRzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgdmFyIGNoQ2JBdEtleSA9IGZ1bmN0aW9uIGNoQ2JBdEtleShyZXMsIGlzRXJyKSB7XG4gICAgICAgIGlmIChjb21wbGV0ZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzRXJyIHx8IGlzRW5kKHJlcykgfHwgcmVzID09PSBDSEFOTkVMX0VORCB8fCByZXMgPT09IFRBU0tfQ0FOQ0VMKSB7XG4gICAgICAgICAgY2IuY2FuY2VsKCk7XG4gICAgICAgICAgY2IocmVzLCBpc0Vycik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0c1trZXldID0gcmVzO1xuICAgICAgICAgIGNvbXBsZXRlZENvdW50Kys7XG4gICAgICAgICAgY2hlY2tFZmZlY3RFbmQoKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGNoQ2JBdEtleS5jYW5jZWwgPSBub29wO1xuICAgICAgY2hpbGRDYnNba2V5XSA9IGNoQ2JBdEtleTtcbiAgICB9KTtcblxuICAgIGNiLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghY29tcGxldGVkKSB7XG4gICAgICAgIGNvbXBsZXRlZCA9IHRydWU7XG4gICAgICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgcmV0dXJuIGNoaWxkQ2JzW2tleV0uY2FuY2VsKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgcmV0dXJuIHJ1bkVmZmVjdChlZmZlY3RzW2tleV0sIGVmZmVjdElkLCBrZXksIGNoaWxkQ2JzW2tleV0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcnVuUmFjZUVmZmVjdChlZmZlY3RzLCBlZmZlY3RJZCwgY2IpIHtcbiAgICB2YXIgY29tcGxldGVkID0gdm9pZCAwO1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZWZmZWN0cyk7XG4gICAgdmFyIGNoaWxkQ2JzID0ge307XG5cbiAgICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgdmFyIGNoQ2JBdEtleSA9IGZ1bmN0aW9uIGNoQ2JBdEtleShyZXMsIGlzRXJyKSB7XG4gICAgICAgIGlmIChjb21wbGV0ZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNFcnIpIHtcbiAgICAgICAgICAvLyBSYWNlIEF1dG8gY2FuY2VsbGF0aW9uXG4gICAgICAgICAgY2IuY2FuY2VsKCk7XG4gICAgICAgICAgY2IocmVzLCB0cnVlKTtcbiAgICAgICAgfSBlbHNlIGlmICghaXNFbmQocmVzKSAmJiByZXMgIT09IENIQU5ORUxfRU5EICYmIHJlcyAhPT0gVEFTS19DQU5DRUwpIHtcbiAgICAgICAgICB2YXIgX3Jlc3BvbnNlO1xuXG4gICAgICAgICAgY2IuY2FuY2VsKCk7XG4gICAgICAgICAgY29tcGxldGVkID0gdHJ1ZTtcbiAgICAgICAgICB2YXIgcmVzcG9uc2UgPSAoX3Jlc3BvbnNlID0ge30sIF9yZXNwb25zZVtrZXldID0gcmVzLCBfcmVzcG9uc2UpO1xuICAgICAgICAgIGNiKGlzLmFycmF5KGVmZmVjdHMpID8gW10uc2xpY2UuY2FsbChfZXh0ZW5kcyh7fSwgcmVzcG9uc2UsIHsgbGVuZ3RoOiBrZXlzLmxlbmd0aCB9KSkgOiByZXNwb25zZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBjaENiQXRLZXkuY2FuY2VsID0gbm9vcDtcbiAgICAgIGNoaWxkQ2JzW2tleV0gPSBjaENiQXRLZXk7XG4gICAgfSk7XG5cbiAgICBjYi5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBwcmV2ZW50cyB1bm5lY2Vzc2FyeSBjYW5jZWxsYXRpb25cbiAgICAgIGlmICghY29tcGxldGVkKSB7XG4gICAgICAgIGNvbXBsZXRlZCA9IHRydWU7XG4gICAgICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgcmV0dXJuIGNoaWxkQ2JzW2tleV0uY2FuY2VsKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIGlmIChjb21wbGV0ZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcnVuRWZmZWN0KGVmZmVjdHNba2V5XSwgZWZmZWN0SWQsIGtleSwgY2hpbGRDYnNba2V5XSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBydW5TZWxlY3RFZmZlY3QoX3JlZjcsIGNiKSB7XG4gICAgdmFyIHNlbGVjdG9yID0gX3JlZjcuc2VsZWN0b3IsXG4gICAgICAgIGFyZ3MgPSBfcmVmNy5hcmdzO1xuXG4gICAgdHJ5IHtcbiAgICAgIHZhciBzdGF0ZSA9IHNlbGVjdG9yLmFwcGx5KHVuZGVmaW5lZCwgW2dldFN0YXRlKCldLmNvbmNhdChhcmdzKSk7XG4gICAgICBjYihzdGF0ZSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNiKGVycm9yLCB0cnVlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBydW5DaGFubmVsRWZmZWN0KF9yZWY4LCBjYikge1xuICAgIHZhciBwYXR0ZXJuID0gX3JlZjgucGF0dGVybixcbiAgICAgICAgYnVmZmVyID0gX3JlZjguYnVmZmVyO1xuXG4gICAgdmFyIG1hdGNoID0gbWF0Y2hlcihwYXR0ZXJuKTtcbiAgICBtYXRjaC5wYXR0ZXJuID0gcGF0dGVybjtcbiAgICBjYihldmVudENoYW5uZWwoc3Vic2NyaWJlLCBidWZmZXIgfHwgYnVmZmVycy5maXhlZCgpLCBtYXRjaCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcnVuQ2FuY2VsbGVkRWZmZWN0KGRhdGEsIGNiKSB7XG4gICAgY2IoISFtYWluVGFzay5pc0NhbmNlbGxlZCk7XG4gIH1cblxuICBmdW5jdGlvbiBydW5GbHVzaEVmZmVjdChjaGFubmVsLCBjYikge1xuICAgIGNoYW5uZWwuZmx1c2goY2IpO1xuICB9XG5cbiAgZnVuY3Rpb24gcnVuR2V0Q29udGV4dEVmZmVjdChwcm9wLCBjYikge1xuICAgIGNiKHRhc2tDb250ZXh0W3Byb3BdKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJ1blNldENvbnRleHRFZmZlY3QocHJvcHMsIGNiKSB7XG4gICAgb2JqZWN0LmFzc2lnbih0YXNrQ29udGV4dCwgcHJvcHMpO1xuICAgIGNiKCk7XG4gIH1cblxuICBmdW5jdGlvbiBuZXdUYXNrKGlkLCBuYW1lLCBpdGVyYXRvciwgY29udCkge1xuICAgIHZhciBfZG9uZSwgX3JlZjksIF9tdXRhdG9yTWFwO1xuXG4gICAgaXRlcmF0b3IuX2RlZmVycmVkRW5kID0gbnVsbDtcbiAgICByZXR1cm4gX3JlZjkgPSB7fSwgX3JlZjlbVEFTS10gPSB0cnVlLCBfcmVmOS5pZCA9IGlkLCBfcmVmOS5uYW1lID0gbmFtZSwgX2RvbmUgPSAnZG9uZScsIF9tdXRhdG9yTWFwID0ge30sIF9tdXRhdG9yTWFwW19kb25lXSA9IF9tdXRhdG9yTWFwW19kb25lXSB8fCB7fSwgX211dGF0b3JNYXBbX2RvbmVdLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpdGVyYXRvci5fZGVmZXJyZWRFbmQpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yLl9kZWZlcnJlZEVuZC5wcm9taXNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGRlZiA9IGRlZmVycmVkKCk7XG4gICAgICAgIGl0ZXJhdG9yLl9kZWZlcnJlZEVuZCA9IGRlZjtcbiAgICAgICAgaWYgKCFpdGVyYXRvci5faXNSdW5uaW5nKSB7XG4gICAgICAgICAgaXRlcmF0b3IuX2Vycm9yID8gZGVmLnJlamVjdChpdGVyYXRvci5fZXJyb3IpIDogZGVmLnJlc29sdmUoaXRlcmF0b3IuX3Jlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRlZi5wcm9taXNlO1xuICAgICAgfVxuICAgIH0sIF9yZWY5LmNvbnQgPSBjb250LCBfcmVmOS5qb2luZXJzID0gW10sIF9yZWY5LmNhbmNlbCA9IGNhbmNlbCwgX3JlZjkuaXNSdW5uaW5nID0gZnVuY3Rpb24gaXNSdW5uaW5nKCkge1xuICAgICAgcmV0dXJuIGl0ZXJhdG9yLl9pc1J1bm5pbmc7XG4gICAgfSwgX3JlZjkuaXNDYW5jZWxsZWQgPSBmdW5jdGlvbiBpc0NhbmNlbGxlZCgpIHtcbiAgICAgIHJldHVybiBpdGVyYXRvci5faXNDYW5jZWxsZWQ7XG4gICAgfSwgX3JlZjkuaXNBYm9ydGVkID0gZnVuY3Rpb24gaXNBYm9ydGVkKCkge1xuICAgICAgcmV0dXJuIGl0ZXJhdG9yLl9pc0Fib3J0ZWQ7XG4gICAgfSwgX3JlZjkucmVzdWx0ID0gZnVuY3Rpb24gcmVzdWx0KCkge1xuICAgICAgcmV0dXJuIGl0ZXJhdG9yLl9yZXN1bHQ7XG4gICAgfSwgX3JlZjkuZXJyb3IgPSBmdW5jdGlvbiBlcnJvcigpIHtcbiAgICAgIHJldHVybiBpdGVyYXRvci5fZXJyb3I7XG4gICAgfSwgX3JlZjkuc2V0Q29udGV4dCA9IGZ1bmN0aW9uIHNldENvbnRleHQocHJvcHMpIHtcbiAgICAgIGNoZWNrKHByb3BzLCBpcy5vYmplY3QsIGNyZWF0ZVNldENvbnRleHRXYXJuaW5nKCd0YXNrJywgcHJvcHMpKTtcbiAgICAgIG9iamVjdC5hc3NpZ24odGFza0NvbnRleHQsIHByb3BzKTtcbiAgICB9LCBfZGVmaW5lRW51bWVyYWJsZVByb3BlcnRpZXMoX3JlZjksIF9tdXRhdG9yTWFwKSwgX3JlZjk7XG4gIH1cbn0iLCJpbXBvcnQgeyBpcywgY2hlY2ssIHVpZCBhcyBuZXh0U2FnYUlkLCB3cmFwU2FnYURpc3BhdGNoLCBub29wLCBsb2cgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCBwcm9jIGZyb20gJy4vcHJvYyc7XG5cbnZhciBSVU5fU0FHQV9TSUdOQVRVUkUgPSAncnVuU2FnYShzdG9yZUludGVyZmFjZSwgc2FnYSwgLi4uYXJncyknO1xudmFyIE5PTl9HRU5FUkFUT1JfRVJSID0gUlVOX1NBR0FfU0lHTkFUVVJFICsgJzogc2FnYSBhcmd1bWVudCBtdXN0IGJlIGEgR2VuZXJhdG9yIGZ1bmN0aW9uISc7XG5cbmV4cG9ydCBmdW5jdGlvbiBydW5TYWdhKHN0b3JlSW50ZXJmYWNlLCBzYWdhKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiA+IDIgPyBfbGVuIC0gMiA6IDApLCBfa2V5ID0gMjsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleSAtIDJdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgdmFyIGl0ZXJhdG9yID0gdm9pZCAwO1xuXG4gIGlmIChpcy5pdGVyYXRvcihzdG9yZUludGVyZmFjZSkpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIHtcbiAgICAgIGxvZygnd2FybicsICdydW5TYWdhKGl0ZXJhdG9yLCBzdG9yZUludGVyZmFjZSkgaGFzIGJlZW4gZGVwcmVjYXRlZCBpbiBmYXZvciBvZiAnICsgUlVOX1NBR0FfU0lHTkFUVVJFKTtcbiAgICB9XG4gICAgaXRlcmF0b3IgPSBzdG9yZUludGVyZmFjZTtcbiAgICBzdG9yZUludGVyZmFjZSA9IHNhZ2E7XG4gIH0gZWxzZSB7XG4gICAgY2hlY2soc2FnYSwgaXMuZnVuYywgTk9OX0dFTkVSQVRPUl9FUlIpO1xuICAgIGl0ZXJhdG9yID0gc2FnYS5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgIGNoZWNrKGl0ZXJhdG9yLCBpcy5pdGVyYXRvciwgTk9OX0dFTkVSQVRPUl9FUlIpO1xuICB9XG5cbiAgdmFyIF9zdG9yZUludGVyZmFjZSA9IHN0b3JlSW50ZXJmYWNlLFxuICAgICAgc3Vic2NyaWJlID0gX3N0b3JlSW50ZXJmYWNlLnN1YnNjcmliZSxcbiAgICAgIGRpc3BhdGNoID0gX3N0b3JlSW50ZXJmYWNlLmRpc3BhdGNoLFxuICAgICAgZ2V0U3RhdGUgPSBfc3RvcmVJbnRlcmZhY2UuZ2V0U3RhdGUsXG4gICAgICBjb250ZXh0ID0gX3N0b3JlSW50ZXJmYWNlLmNvbnRleHQsXG4gICAgICBzYWdhTW9uaXRvciA9IF9zdG9yZUludGVyZmFjZS5zYWdhTW9uaXRvcixcbiAgICAgIGxvZ2dlciA9IF9zdG9yZUludGVyZmFjZS5sb2dnZXIsXG4gICAgICBvbkVycm9yID0gX3N0b3JlSW50ZXJmYWNlLm9uRXJyb3I7XG5cblxuICB2YXIgZWZmZWN0SWQgPSBuZXh0U2FnYUlkKCk7XG5cbiAgaWYgKHNhZ2FNb25pdG9yKSB7XG4gICAgLy8gbW9uaXRvcnMgYXJlIGV4cGVjdGVkIHRvIGhhdmUgYSBjZXJ0YWluIGludGVyZmFjZSwgbGV0J3MgZmlsbC1pbiBhbnkgbWlzc2luZyBvbmVzXG4gICAgc2FnYU1vbml0b3IuZWZmZWN0VHJpZ2dlcmVkID0gc2FnYU1vbml0b3IuZWZmZWN0VHJpZ2dlcmVkIHx8IG5vb3A7XG4gICAgc2FnYU1vbml0b3IuZWZmZWN0UmVzb2x2ZWQgPSBzYWdhTW9uaXRvci5lZmZlY3RSZXNvbHZlZCB8fCBub29wO1xuICAgIHNhZ2FNb25pdG9yLmVmZmVjdFJlamVjdGVkID0gc2FnYU1vbml0b3IuZWZmZWN0UmVqZWN0ZWQgfHwgbm9vcDtcbiAgICBzYWdhTW9uaXRvci5lZmZlY3RDYW5jZWxsZWQgPSBzYWdhTW9uaXRvci5lZmZlY3RDYW5jZWxsZWQgfHwgbm9vcDtcbiAgICBzYWdhTW9uaXRvci5hY3Rpb25EaXNwYXRjaGVkID0gc2FnYU1vbml0b3IuYWN0aW9uRGlzcGF0Y2hlZCB8fCBub29wO1xuXG4gICAgc2FnYU1vbml0b3IuZWZmZWN0VHJpZ2dlcmVkKHsgZWZmZWN0SWQ6IGVmZmVjdElkLCByb290OiB0cnVlLCBwYXJlbnRFZmZlY3RJZDogMCwgZWZmZWN0OiB7IHJvb3Q6IHRydWUsIHNhZ2E6IHNhZ2EsIGFyZ3M6IGFyZ3MgfSB9KTtcbiAgfVxuXG4gIHZhciB0YXNrID0gcHJvYyhpdGVyYXRvciwgc3Vic2NyaWJlLCB3cmFwU2FnYURpc3BhdGNoKGRpc3BhdGNoKSwgZ2V0U3RhdGUsIGNvbnRleHQsIHsgc2FnYU1vbml0b3I6IHNhZ2FNb25pdG9yLCBsb2dnZXI6IGxvZ2dlciwgb25FcnJvcjogb25FcnJvciB9LCBlZmZlY3RJZCwgc2FnYS5uYW1lKTtcblxuICBpZiAoc2FnYU1vbml0b3IpIHtcbiAgICBzYWdhTW9uaXRvci5lZmZlY3RSZXNvbHZlZChlZmZlY3RJZCwgdGFzayk7XG4gIH1cblxuICByZXR1cm4gdGFzaztcbn0iLCJpbXBvcnQgbWlkZGxld2FyZSBmcm9tICcuL2ludGVybmFsL21pZGRsZXdhcmUnO1xuZXhwb3J0IGRlZmF1bHQgbWlkZGxld2FyZTtcblxuZXhwb3J0IHsgcnVuU2FnYSB9IGZyb20gJy4vaW50ZXJuYWwvcnVuU2FnYSc7XG5leHBvcnQgeyBFTkQsIGV2ZW50Q2hhbm5lbCwgY2hhbm5lbCB9IGZyb20gJy4vaW50ZXJuYWwvY2hhbm5lbCc7XG5leHBvcnQgeyBidWZmZXJzIH0gZnJvbSAnLi9pbnRlcm5hbC9idWZmZXJzJztcbmV4cG9ydCB7IHRha2VFdmVyeSwgdGFrZUxhdGVzdCwgdGhyb3R0bGUgfSBmcm9tICcuL2ludGVybmFsL3NhZ2FIZWxwZXJzJztcbmV4cG9ydCB7IGRlbGF5LCBDQU5DRUwgfSBmcm9tICcuL2ludGVybmFsL3V0aWxzJztcbmV4cG9ydCB7IGRldGFjaCB9IGZyb20gJy4vaW50ZXJuYWwvaW8nO1xuXG5pbXBvcnQgKiBhcyBlZmZlY3RzIGZyb20gJy4vZWZmZWN0cyc7XG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuL3V0aWxzJztcblxuZXhwb3J0IHsgZWZmZWN0cywgdXRpbHMgfTsiLCJmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmltcG9ydCB7IGlzLCBjaGVjaywgb2JqZWN0LCBjcmVhdGVTZXRDb250ZXh0V2FybmluZyB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHsgZW1pdHRlciB9IGZyb20gJy4vY2hhbm5lbCc7XG5pbXBvcnQgeyBpZGVudCB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHsgcnVuU2FnYSB9IGZyb20gJy4vcnVuU2FnYSc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNhZ2FNaWRkbGV3YXJlRmFjdG9yeSgpIHtcbiAgdmFyIF9yZWYgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gIHZhciBfcmVmJGNvbnRleHQgPSBfcmVmLmNvbnRleHQsXG4gICAgICBjb250ZXh0ID0gX3JlZiRjb250ZXh0ID09PSB1bmRlZmluZWQgPyB7fSA6IF9yZWYkY29udGV4dCxcbiAgICAgIG9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgWydjb250ZXh0J10pO1xuXG4gIHZhciBzYWdhTW9uaXRvciA9IG9wdGlvbnMuc2FnYU1vbml0b3IsXG4gICAgICBsb2dnZXIgPSBvcHRpb25zLmxvZ2dlcixcbiAgICAgIG9uRXJyb3IgPSBvcHRpb25zLm9uRXJyb3I7XG5cblxuICBpZiAoaXMuZnVuYyhvcHRpb25zKSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NhZ2EgbWlkZGxld2FyZSBubyBsb25nZXIgYWNjZXB0IEdlbmVyYXRvciBmdW5jdGlvbnMuIFVzZSBzYWdhTWlkZGxld2FyZS5ydW4gaW5zdGVhZCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBwYXNzZWQgYSBmdW5jdGlvbiB0byB0aGUgU2FnYSBtaWRkbGV3YXJlLiBZb3UgYXJlIGxpa2VseSB0cnlpbmcgdG8gc3RhcnQgYSAgICAgICAgU2FnYSBieSBkaXJlY3RseSBwYXNzaW5nIGl0IHRvIHRoZSBtaWRkbGV3YXJlLiBUaGlzIGlzIG5vIGxvbmdlciBwb3NzaWJsZSBzdGFydGluZyBmcm9tIDAuMTAuMC4gICAgICAgIFRvIHJ1biBhIFNhZ2EsIHlvdSBtdXN0IGRvIGl0IGR5bmFtaWNhbGx5IEFGVEVSIG1vdW50aW5nIHRoZSBtaWRkbGV3YXJlIGludG8gdGhlIHN0b3JlLlxcbiAgICAgICAgRXhhbXBsZTpcXG4gICAgICAgICAgaW1wb3J0IGNyZWF0ZVNhZ2FNaWRkbGV3YXJlIGZyb20gXFwncmVkdXgtc2FnYVxcJ1xcbiAgICAgICAgICAuLi4gb3RoZXIgaW1wb3J0c1xcblxcbiAgICAgICAgICBjb25zdCBzYWdhTWlkZGxld2FyZSA9IGNyZWF0ZVNhZ2FNaWRkbGV3YXJlKClcXG4gICAgICAgICAgY29uc3Qgc3RvcmUgPSBjcmVhdGVTdG9yZShyZWR1Y2VyLCBhcHBseU1pZGRsZXdhcmUoc2FnYU1pZGRsZXdhcmUpKVxcbiAgICAgICAgICBzYWdhTWlkZGxld2FyZS5ydW4oc2FnYSwgLi4uYXJncylcXG4gICAgICAnKTtcbiAgICB9XG4gIH1cblxuICBpZiAobG9nZ2VyICYmICFpcy5mdW5jKGxvZ2dlcikpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2BvcHRpb25zLmxvZ2dlcmAgcGFzc2VkIHRvIHRoZSBTYWdhIG1pZGRsZXdhcmUgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcgJiYgb3B0aW9ucy5vbmVycm9yKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdgb3B0aW9ucy5vbmVycm9yYCB3YXMgcmVtb3ZlZC4gVXNlIGBvcHRpb25zLm9uRXJyb3JgIGluc3RlYWQuJyk7XG4gIH1cblxuICBpZiAob25FcnJvciAmJiAhaXMuZnVuYyhvbkVycm9yKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignYG9wdGlvbnMub25FcnJvcmAgcGFzc2VkIHRvIHRoZSBTYWdhIG1pZGRsZXdhcmUgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5lbWl0dGVyICYmICFpcy5mdW5jKG9wdGlvbnMuZW1pdHRlcikpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2BvcHRpb25zLmVtaXR0ZXJgIHBhc3NlZCB0byB0aGUgU2FnYSBtaWRkbGV3YXJlIGlzIG5vdCBhIGZ1bmN0aW9uIScpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2FnYU1pZGRsZXdhcmUoX3JlZjIpIHtcbiAgICB2YXIgZ2V0U3RhdGUgPSBfcmVmMi5nZXRTdGF0ZSxcbiAgICAgICAgZGlzcGF0Y2ggPSBfcmVmMi5kaXNwYXRjaDtcblxuICAgIHZhciBzYWdhRW1pdHRlciA9IGVtaXR0ZXIoKTtcbiAgICBzYWdhRW1pdHRlci5lbWl0ID0gKG9wdGlvbnMuZW1pdHRlciB8fCBpZGVudCkoc2FnYUVtaXR0ZXIuZW1pdCk7XG5cbiAgICBzYWdhTWlkZGxld2FyZS5ydW4gPSBydW5TYWdhLmJpbmQobnVsbCwge1xuICAgICAgY29udGV4dDogY29udGV4dCxcbiAgICAgIHN1YnNjcmliZTogc2FnYUVtaXR0ZXIuc3Vic2NyaWJlLFxuICAgICAgZGlzcGF0Y2g6IGRpc3BhdGNoLFxuICAgICAgZ2V0U3RhdGU6IGdldFN0YXRlLFxuICAgICAgc2FnYU1vbml0b3I6IHNhZ2FNb25pdG9yLFxuICAgICAgbG9nZ2VyOiBsb2dnZXIsXG4gICAgICBvbkVycm9yOiBvbkVycm9yXG4gICAgfSk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgIGlmIChzYWdhTW9uaXRvciAmJiBzYWdhTW9uaXRvci5hY3Rpb25EaXNwYXRjaGVkKSB7XG4gICAgICAgICAgc2FnYU1vbml0b3IuYWN0aW9uRGlzcGF0Y2hlZChhY3Rpb24pO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZXN1bHQgPSBuZXh0KGFjdGlvbik7IC8vIGhpdCByZWR1Y2Vyc1xuICAgICAgICBzYWdhRW1pdHRlci5lbWl0KGFjdGlvbik7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH07XG4gIH1cblxuICBzYWdhTWlkZGxld2FyZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdCZWZvcmUgcnVubmluZyBhIFNhZ2EsIHlvdSBtdXN0IG1vdW50IHRoZSBTYWdhIG1pZGRsZXdhcmUgb24gdGhlIFN0b3JlIHVzaW5nIGFwcGx5TWlkZGxld2FyZScpO1xuICB9O1xuXG4gIHNhZ2FNaWRkbGV3YXJlLnNldENvbnRleHQgPSBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICBjaGVjayhwcm9wcywgaXMub2JqZWN0LCBjcmVhdGVTZXRDb250ZXh0V2FybmluZygnc2FnYU1pZGRsZXdhcmUnLCBwcm9wcykpO1xuICAgIG9iamVjdC5hc3NpZ24oY29udGV4dCwgcHJvcHMpO1xuICB9O1xuXG4gIHJldHVybiBzYWdhTWlkZGxld2FyZTtcbn0iLCJpbXBvcnQgeyB0YWtlRXZlcnksIHB1dCwgc2VsZWN0LCBmb3JrIH0gZnJvbSAncmVkdXgtc2FnYS9lZmZlY3RzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBTVV9DT05URVhUTUVOVV9PUEVOLFxyXG4gICAgU1VfQ09OVEVYVE1FTlVfQ0xPU0UsXHJcbiAgICBTVV9DT05URVhUTUVOVV9ORVdCT1hURVhULFxyXG4gICAgU1VfQ09OVEVYVE1FTlVfTkVXQk9YSU1BR0UsXHJcbiAgICBTVV9DT05URVhUTUVOVV9DT1BZQk9YVEVYVE9OR1JPVVAsXHJcbiAgICBTVV9DT05URVhUTUVOVV9DT1BZQk9YVEVYVCxcclxuICAgIFNVX0NPTlRFWFRNRU5VX0NPUFlCT1hJTUFHRSxcclxuICAgIFNVX0NPTlRFWFRNRU5VX1NPWkFJVU5MSU5LLFxyXG4gICAgU1VfQ09OVEVYVE1FTlVfQk9YUkVNT1ZFLFxyXG4gICAgU1VfQ09OVEVYVE1FTlVfQk9YVE9GUk9OVCxcclxuICAgIFNVX0NPTlRFWFRNRU5VX0JPWFRPQkFDSyxcclxufSBmcm9tICcuLi9hY3Rpb25zX3N1L2NvbnRleHRtZW51LmpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBTYWdhX0NvbnRleHRNZW51X09wZW4sXHJcbiAgICBTYWdhX0NvbnRleHRNZW51X0Nsb3NlLFxyXG4gICAgU2FnYV9Db250ZXh0TWVudV9OZXdCb3hUZXh0LFxyXG4gICAgU2FnYV9Db250ZXh0TWVudV9OZXdCb3hJbWFnZSxcclxuICAgIFNhZ2FfQ29udGV4dE1lbnVfQm94VG9Gcm9udCxcclxuICAgIFNhZ2FfQ29udGV4dE1lbnVfQm94VG9CYWNrLFxyXG59IGZyb20gJy4uL2FjdGlvbnNfc2FnYS9jb250ZXh0bWVudS5qcyc7XHJcblxyXG5pbXBvcnQge1xyXG4gICAgbmFnYXNoaUV4ZWMsXHJcbiAgICBuYWdhc2hpRXhlY0dyb3VwLFxyXG4gICAgbmFnYXNoaUV4ZWNCb3gsXHJcbiAgICBuYWdhc2hpRXhlY1NvemFpLFxyXG4gICAgbmFnYXNoaUV4ZWNBbGwsXHJcbn0gZnJvbSAnLi9uYWdhc2hpLmpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBTVV9Ub29sQm94TGlua19EZWxldGVCdXR0b25fQ2xpY2ssXHJcbn0gZnJvbSAnLi4vYWN0aW9uc19zdS90b29sYm94bGluay5qcyc7XHJcblxyXG5pbXBvcnQge1xyXG4gICAgU1VfVG9vbEJveEJveERhdGFfRGVsZXRlQnV0dG9uX0NsaWNrLFxyXG59IGZyb20gJy4uL2FjdGlvbnNfc3UvdG9vbGJveGJveGRhdGEuanMnO1xyXG5cclxuaW1wb3J0IHsgRGVmaW5lIH0gZnJvbSAnLi4vZGVmaW5lLmpzJztcclxuaW1wb3J0IHsgQm94IH0gZnJvbSAnLi4vbGlicy9ib3guanMnO1xyXG5pbXBvcnQgeyBHcmlkIH0gZnJvbSAnLi4vbGlicy96YWh5by5qcyc7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24qIGNvbnRleHRtZW51KCkge1xyXG4gICAgeWllbGQgdGFrZUV2ZXJ5KFNVX0NPTlRFWFRNRU5VX09QRU4sIGZ1bmN0aW9uKiAoYWN0aW9uKSB7XHJcbiAgICAgICAgeWllbGQgcHV0KFNhZ2FfQ29udGV4dE1lbnVfT3BlbihhY3Rpb24ucGF5bG9hZCkpO1xyXG4gICAgfSk7XHJcbiAgICB5aWVsZCB0YWtlRXZlcnkoU1VfQ09OVEVYVE1FTlVfQ0xPU0UsIGZ1bmN0aW9uKiAoYWN0aW9uKSB7XHJcbiAgICAgICAgeWllbGQgcHV0KFNhZ2FfQ29udGV4dE1lbnVfQ2xvc2UoYWN0aW9uLnBheWxvYWQpKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIOODnOODg+OCr+OCueOBruaWsOimj+S9nOaIkO+8iOODhuOCreOCueODiOODnOODg+OCr+OCue+8iVxyXG4gICAgeWllbGQgdGFrZUV2ZXJ5KFNVX0NPTlRFWFRNRU5VX05FV0JPWFRFWFQsIGZ1bmN0aW9uKiAoYWN0aW9uKSB7XHJcbiAgICAgICAgY29uc3QgYm94cyA9IHlpZWxkIHNlbGVjdCgoc3RhdGUpID0+IHN0YXRlLmJveHMpO1xyXG5cclxuICAgICAgICAvLyDmlrDopo/jg5zjg4Pjgq/jgrnjga7jg4fjg5Xjgqnjg6vjg4jjgrXjgqTjgrpcclxuICAgICAgICBjb25zdCBib3hfd2lkdGggID0gMjAwO1xyXG4gICAgICAgIGNvbnN0IGJveF9oZWlnaHQgPSAxMDA7XHJcblxyXG4gICAgICAgIC8vIOODnOODg+OCr+OCueOBruWfuueCueW6p+aomVxyXG4gICAgICAgIGxldCB0eCA9IGFjdGlvbi5wYXlsb2FkLmN1cl94IC0gYm94X3dpZHRoO1xyXG4gICAgICAgIGxldCB0eSA9IGFjdGlvbi5wYXlsb2FkLmN1cl95O1xyXG5cclxuICAgICAgICAvLyDjg5zjg4Pjgq/jgrnjga7ln7rngrnluqfmqJnjgpLjgrnjg4rjg4Pjg5fjgZXjgZvjgotcclxuICAgICAgICBbdHgsIHR5XSA9IEdyaWQuc25hcChcclxuICAgICAgICAgICAgdHgsXHJcbiAgICAgICAgICAgIHR5LFxyXG4gICAgICAgICAgICBEZWZpbmUuc3ZnaW1hZ2VzaXplLndpZHRoLFxyXG4gICAgICAgICAgICBEZWZpbmUuc3ZnaW1hZ2VzaXplLmhlaWdodCxcclxuICAgICAgICAgICAgRGVmaW5lLmdyaWQud2lkdGgsXHJcbiAgICAgICAgICAgIERlZmluZS5ncmlkLmhlaWdodFxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIC8vIOODnOODg+OCr+OCueOBruWni+eCueOBqOe1gueCueOCkuaxguOCgeOCi1xyXG4gICAgICAgIGxldCB4MSA9IHR4O1xyXG4gICAgICAgIGxldCB5MSA9IHR5O1xyXG4gICAgICAgIGxldCB4MiA9IHgxICsgYm94X3dpZHRoO1xyXG4gICAgICAgIGxldCB5MiA9IHkxICsgYm94X2hlaWdodDtcclxuXHJcbiAgICAgICAgLy8g44Oc44OD44Kv44K544KS57SZ6Z2i44Ko44Oq44Ki44Gr5Y+O44KB44KLXHJcbiAgICAgICAgW3gxLCB5MSwgeDIsIHkyXSA9IEdyaWQuY2hhbmdlSW5BcmVhKFxyXG4gICAgICAgICAgICB4MSwgeTEsIHgyLCB5MixcclxuICAgICAgICAgICAgRGVmaW5lLnN2Z2ltYWdlc2l6ZS53aWR0aCxcclxuICAgICAgICAgICAgRGVmaW5lLnN2Z2ltYWdlc2l6ZS5oZWlnaHQsXHJcbiAgICAgICAgICAgIERlZmluZS5ncmlkLndpZHRoLFxyXG4gICAgICAgICAgICBEZWZpbmUuZ3JpZC5oZWlnaHRcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBjb25zdCBuZXdfYm94X2lkICAgID0gQm94LmdldE5ld0JveElkKGJveHMpO1xyXG4gICAgICAgIGNvbnN0IG5ld19ncm91cF9pZCAgPSBCb3guZ2V0TmV3R3JvdXBJZChib3hzKTtcclxuXHJcbiAgICAgICAgY29uc3QgcGF5bG9hZCA9IHtcclxuICAgICAgICAgICAgYm94X2lkOiAgIG5ld19ib3hfaWQsXHJcbiAgICAgICAgICAgIGdyb3VwX2lkOiBuZXdfZ3JvdXBfaWQsXHJcbiAgICAgICAgICAgIGdyb3VwX25vOiAxLFxyXG4gICAgICAgICAgICB0eXBlOiAgICAgJ3RleHQnLFxyXG4gICAgICAgICAgICB4MTogeDEsXHJcbiAgICAgICAgICAgIHkxOiB5MSxcclxuICAgICAgICAgICAgeDI6IHgyLFxyXG4gICAgICAgICAgICB5MjogeTIsXHJcblxyXG4gICAgICAgICAgICB0ZXh0OiB7XHJcbiAgICAgICAgICAgICAgICBrdW1paG9rbzogICAndGF0ZScsXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX2pzOiAxMCxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfamU6IDEwLFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19nczogMTAsXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX2dlOiAxMCxcclxuICAgICAgICAgICAgICAgIHNpemVfajogICAgIDEwLFxyXG4gICAgICAgICAgICAgICAgc2l6ZV9nOiAgICAgMTAsXHJcbiAgICAgICAgICAgICAgICBneW9rYW46ICAgICA1LFxyXG4gICAgICAgICAgICAgICAgZm9udDogICAgICAgMSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB5aWVsZCBwdXQoU2FnYV9Db250ZXh0TWVudV9OZXdCb3hUZXh0KHBheWxvYWQpKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIOODnOODg+OCr+OCueOBruaWsOimj+S9nOaIkO+8iOeUu+WDj+ODnOODg+OCr+OCue+8iVxyXG4gICAgeWllbGQgdGFrZUV2ZXJ5KFNVX0NPTlRFWFRNRU5VX05FV0JPWElNQUdFLCBmdW5jdGlvbiogKGFjdGlvbikge1xyXG4gICAgICAgIGNvbnN0IGJveHMgPSB5aWVsZCBzZWxlY3QoKHN0YXRlKSA9PiBzdGF0ZS5ib3hzKTtcclxuXHJcbiAgICAgICAgLy8g5paw6KaP44Oc44OD44Kv44K544Gu44OH44OV44Kp44Or44OI44K144Kk44K6XHJcbiAgICAgICAgY29uc3QgYm94X3dpZHRoICA9IDIwMDtcclxuICAgICAgICBjb25zdCBib3hfaGVpZ2h0ID0gMTAwO1xyXG5cclxuICAgICAgICAvLyDjg5zjg4Pjgq/jgrnjga7ln7rngrnluqfmqJlcclxuICAgICAgICBsZXQgdHggPSBhY3Rpb24ucGF5bG9hZC5jdXJfeCAtIGJveF93aWR0aDtcclxuICAgICAgICBsZXQgdHkgPSBhY3Rpb24ucGF5bG9hZC5jdXJfeTtcclxuXHJcbiAgICAgICAgLy8g44Oc44OD44Kv44K544Gu5Z+654K55bqn5qiZ44KS44K544OK44OD44OX44GV44Gb44KLXHJcbiAgICAgICAgW3R4LCB0eV0gPSBHcmlkLnNuYXAoXHJcbiAgICAgICAgICAgIHR4LFxyXG4gICAgICAgICAgICB0eSxcclxuICAgICAgICAgICAgRGVmaW5lLnN2Z2ltYWdlc2l6ZS53aWR0aCxcclxuICAgICAgICAgICAgRGVmaW5lLnN2Z2ltYWdlc2l6ZS5oZWlnaHQsXHJcbiAgICAgICAgICAgIERlZmluZS5ncmlkLndpZHRoLFxyXG4gICAgICAgICAgICBEZWZpbmUuZ3JpZC5oZWlnaHRcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICAvLyDjg5zjg4Pjgq/jgrnjga7lp4vngrnjgajntYLngrnjgpLmsYLjgoHjgotcclxuICAgICAgICBsZXQgeDEgPSB0eDtcclxuICAgICAgICBsZXQgeTEgPSB0eTtcclxuICAgICAgICBsZXQgeDIgPSB4MSArIGJveF93aWR0aDtcclxuICAgICAgICBsZXQgeTIgPSB5MSArIGJveF9oZWlnaHQ7XHJcblxyXG4gICAgICAgIC8vIOODnOODg+OCr+OCueOCkue0memdouOCqOODquOCouOBq+WPjuOCgeOCi1xyXG4gICAgICAgIFt4MSwgeTEsIHgyLCB5Ml0gPSBHcmlkLmNoYW5nZUluQXJlYShcclxuICAgICAgICAgICAgeDEsIHkxLCB4MiwgeTIsXHJcbiAgICAgICAgICAgIERlZmluZS5zdmdpbWFnZXNpemUud2lkdGgsXHJcbiAgICAgICAgICAgIERlZmluZS5zdmdpbWFnZXNpemUuaGVpZ2h0LFxyXG4gICAgICAgICAgICBEZWZpbmUuZ3JpZC53aWR0aCxcclxuICAgICAgICAgICAgRGVmaW5lLmdyaWQuaGVpZ2h0XHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgY29uc3QgbmV3X2JveF9pZCAgICA9IEJveC5nZXROZXdCb3hJZChib3hzKTtcclxuICAgICAgICBjb25zdCBuZXdfZ3JvdXBfaWQgID0gQm94LmdldE5ld0dyb3VwSWQoYm94cyk7XHJcblxyXG4gICAgICAgIGNvbnN0IHBheWxvYWQgPSB7XHJcbiAgICAgICAgICAgIGJveF9pZDogICBuZXdfYm94X2lkLFxyXG4gICAgICAgICAgICBncm91cF9pZDogbmV3X2dyb3VwX2lkLFxyXG4gICAgICAgICAgICBncm91cF9ubzogMSxcclxuICAgICAgICAgICAgdHlwZTogICAgICdpbWFnZScsXHJcbiAgICAgICAgICAgIHgxOiB4MSxcclxuICAgICAgICAgICAgeTE6IHkxLFxyXG4gICAgICAgICAgICB4MjogeDIsXHJcbiAgICAgICAgICAgIHkyOiB5MixcclxuXHJcbiAgICAgICAgICAgIGltYWdlOiB7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICcnLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHlpZWxkIHB1dChTYWdhX0NvbnRleHRNZW51X05ld0JveEltYWdlKHBheWxvYWQpKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIOODhuOCreOCueODiOODnOODg+OCr+OCueOBruikh+ijve+8iOOCsOODq+ODvOODl+WMluOBmeOCi++8iVxyXG4gICAgeWllbGQgdGFrZUV2ZXJ5KFNVX0NPTlRFWFRNRU5VX0NPUFlCT1hURVhUT05HUk9VUCwgZnVuY3Rpb24qIChhY3Rpb24pIHtcclxuICAgICAgICBjb25zdCBib3hzID0geWllbGQgc2VsZWN0KChzdGF0ZSkgPT4gc3RhdGUuYm94cyk7XHJcblxyXG4gICAgICAgIC8vIOikh+ijveWFg+ODnOODg+OCr+OCueOBruODnOODg+OCr+OCueaDheWgseOCkuW+l+OCi1xyXG4gICAgICAgIGNvbnN0IGZfYm94ID0gQm94LmdldEJveChib3hzLCBhY3Rpb24ucGF5bG9hZC5ib3hfaWQpO1xyXG5cclxuICAgICAgICAvLyDopIfoo73lhYPjg5zjg4Pjgq/jgrnjga7luYXjgajpq5jjgZXjgpLlvpfjgotcclxuICAgICAgICBjb25zdCBmX2JveF93aWR0aCAgPSBmX2JveC54MiAtIGZfYm94LngxO1xyXG4gICAgICAgIGNvbnN0IGZfYm94X2hlaWdodCA9IGZfYm94LnkyIC0gZl9ib3gueTE7XHJcblxyXG4gICAgICAgIC8vIOikh+ijveODnOODg+OCr+OCueOBruWfuueCueW6p+aomVxyXG4gICAgICAgIGxldCB0eCA9IGZfYm94LngxIC0gNTA7XHJcbiAgICAgICAgbGV0IHR5ID0gZl9ib3gueTEgKyA1MDtcclxuXHJcbiAgICAgICAgLy8g6KSH6KO944Oc44OD44Kv44K544Gu5Z+654K55bqn5qiZ44KS44K544OK44OD44OX44GV44Gb44KLXHJcbiAgICAgICAgW3R4LCB0eV0gPSBHcmlkLnNuYXAoXHJcbiAgICAgICAgICAgIHR4LFxyXG4gICAgICAgICAgICB0eSxcclxuICAgICAgICAgICAgRGVmaW5lLnN2Z2ltYWdlc2l6ZS53aWR0aCxcclxuICAgICAgICAgICAgRGVmaW5lLnN2Z2ltYWdlc2l6ZS5oZWlnaHQsXHJcbiAgICAgICAgICAgIERlZmluZS5ncmlkLndpZHRoLFxyXG4gICAgICAgICAgICBEZWZpbmUuZ3JpZC5oZWlnaHRcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICAvLyDopIfoo73jg5zjg4Pjgq/jgrnjga7lp4vngrnjgajntYLngrnjgpLmsYLjgoHjgotcclxuICAgICAgICBsZXQgeDEgPSB0eDtcclxuICAgICAgICBsZXQgeTEgPSB0eTtcclxuICAgICAgICBsZXQgeDIgPSB4MSArIGZfYm94X3dpZHRoO1xyXG4gICAgICAgIGxldCB5MiA9IHkxICsgZl9ib3hfaGVpZ2h0O1xyXG5cclxuICAgICAgICAvLyDjg5zjg4Pjgq/jgrnjgpLntJnpnaLjgqjjg6rjgqLjgavlj47jgoHjgotcclxuICAgICAgICBbeDEsIHkxLCB4MiwgeTJdID0gR3JpZC5jaGFuZ2VJbkFyZWEoXHJcbiAgICAgICAgICAgIHgxLCB5MSwgeDIsIHkyLFxyXG4gICAgICAgICAgICBEZWZpbmUuc3ZnaW1hZ2VzaXplLndpZHRoLFxyXG4gICAgICAgICAgICBEZWZpbmUuc3ZnaW1hZ2VzaXplLmhlaWdodCxcclxuICAgICAgICAgICAgRGVmaW5lLmdyaWQud2lkdGgsXHJcbiAgICAgICAgICAgIERlZmluZS5ncmlkLmhlaWdodFxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIGNvbnN0IG5ld19ib3hfaWQgPSBCb3guZ2V0TmV3Qm94SWQoYm94cyk7XHJcbiAgICAgICAgY29uc3QgZ3JvdXBfaWQgICA9IGFjdGlvbi5wYXlsb2FkLmdyb3VwX2lkO1xyXG5cclxuICAgICAgICAvLyDjgrDjg6vjg7zjg5fjga7mnIDlvozjga7nlarlj7fjgpLlvpfjgotcclxuICAgICAgICBjb25zdCBncm91cF9ub19hcnkgPSBCb3guZ2V0R3JvdXBOb0FyeShib3hzLCBncm91cF9pZCk7XHJcbiAgICAgICAgY29uc3QgbmV3X2dyb3VwX25vID0gZ3JvdXBfbm9fYXJ5LnBvcCgpICsgMTtcclxuXHJcbiAgICAgICAgY29uc3QgcGF5bG9hZCA9IHtcclxuICAgICAgICAgICAgYm94X2lkOiAgIG5ld19ib3hfaWQsXHJcbiAgICAgICAgICAgIGdyb3VwX2lkOiBhY3Rpb24ucGF5bG9hZC5ncm91cF9pZCxcclxuICAgICAgICAgICAgZ3JvdXBfbm86IG5ld19ncm91cF9ubyxcclxuICAgICAgICAgICAgdHlwZTogICAgICd0ZXh0JyxcclxuICAgICAgICAgICAgeDE6IHgxLFxyXG4gICAgICAgICAgICB5MTogeTEsXHJcbiAgICAgICAgICAgIHgyOiB4MixcclxuICAgICAgICAgICAgeTI6IHkyLFxyXG5cclxuICAgICAgICAgICAgdGV4dDoge1xyXG4gICAgICAgICAgICAgICAga3VtaWhva286ICAgZl9ib3gudGV4dC5rdW1paG9rbyxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfanM6IGZfYm94LnRleHQucGFkZGluZ19qcyxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfamU6IGZfYm94LnRleHQucGFkZGluZ19qZSxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfZ3M6IGZfYm94LnRleHQucGFkZGluZ19ncyxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfZ2U6IGZfYm94LnRleHQucGFkZGluZ19nZSxcclxuICAgICAgICAgICAgICAgIHNpemVfajogICAgIGZfYm94LnRleHQuc2l6ZV9qLFxyXG4gICAgICAgICAgICAgICAgc2l6ZV9nOiAgICAgZl9ib3gudGV4dC5zaXplX2csXHJcbiAgICAgICAgICAgICAgICBneW9rYW46ICAgICBmX2JveC50ZXh0Lmd5b2thbixcclxuICAgICAgICAgICAgICAgIGZvbnQ6ICAgICAgIGZfYm94LnRleHQuZm9udCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB5aWVsZCBwdXQoU2FnYV9Db250ZXh0TWVudV9OZXdCb3hUZXh0KHBheWxvYWQpKTtcclxuXHJcbiAgICAgICAgLy8g5rWB44GX44KS5pu05pawXHJcbiAgICAgICAgeWllbGQgZm9yayhuYWdhc2hpRXhlY0dyb3VwLCBncm91cF9pZCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyDjg4bjgq3jgrnjg4jjg5zjg4Pjgq/jgrnjga7opIfoo71cclxuICAgIHlpZWxkIHRha2VFdmVyeShTVV9DT05URVhUTUVOVV9DT1BZQk9YVEVYVCwgZnVuY3Rpb24qIChhY3Rpb24pIHtcclxuICAgICAgICBjb25zdCBib3hzID0geWllbGQgc2VsZWN0KChzdGF0ZSkgPT4gc3RhdGUuYm94cyk7XHJcblxyXG4gICAgICAgIC8vIOikh+ijveWFg+ODnOODg+OCr+OCueOBruODnOODg+OCr+OCueaDheWgseOCkuW+l+OCi1xyXG4gICAgICAgIGNvbnN0IGZfYm94ID0gQm94LmdldEJveChib3hzLCBhY3Rpb24ucGF5bG9hZC5ib3hfaWQpO1xyXG5cclxuICAgICAgICAvLyDopIfoo73lhYPjg5zjg4Pjgq/jgrnjga7luYXjgajpq5jjgZXjgpLlvpfjgotcclxuICAgICAgICBjb25zdCBmX2JveF93aWR0aCAgPSBmX2JveC54MiAtIGZfYm94LngxO1xyXG4gICAgICAgIGNvbnN0IGZfYm94X2hlaWdodCA9IGZfYm94LnkyIC0gZl9ib3gueTE7XHJcblxyXG4gICAgICAgIC8vIOikh+ijveODnOODg+OCr+OCueOBruWfuueCueW6p+aomVxyXG4gICAgICAgIGxldCB0eCA9IGZfYm94LngxIC0gNTA7XHJcbiAgICAgICAgbGV0IHR5ID0gZl9ib3gueTEgKyA1MDtcclxuXHJcbiAgICAgICAgLy8g6KSH6KO944Oc44OD44Kv44K544Gu5Z+654K55bqn5qiZ44KS44K544OK44OD44OX44GV44Gb44KLXHJcbiAgICAgICAgW3R4LCB0eV0gPSBHcmlkLnNuYXAoXHJcbiAgICAgICAgICAgIHR4LFxyXG4gICAgICAgICAgICB0eSxcclxuICAgICAgICAgICAgRGVmaW5lLnN2Z2ltYWdlc2l6ZS53aWR0aCxcclxuICAgICAgICAgICAgRGVmaW5lLnN2Z2ltYWdlc2l6ZS5oZWlnaHQsXHJcbiAgICAgICAgICAgIERlZmluZS5ncmlkLndpZHRoLFxyXG4gICAgICAgICAgICBEZWZpbmUuZ3JpZC5oZWlnaHRcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICAvLyDopIfoo73jg5zjg4Pjgq/jgrnjga7lp4vngrnjgajntYLngrnjgpLmsYLjgoHjgotcclxuICAgICAgICBsZXQgeDEgPSB0eDtcclxuICAgICAgICBsZXQgeTEgPSB0eTtcclxuICAgICAgICBsZXQgeDIgPSB4MSArIGZfYm94X3dpZHRoO1xyXG4gICAgICAgIGxldCB5MiA9IHkxICsgZl9ib3hfaGVpZ2h0O1xyXG5cclxuICAgICAgICAvLyDjg5zjg4Pjgq/jgrnjgpLntJnpnaLjgqjjg6rjgqLjgavlj47jgoHjgotcclxuICAgICAgICBbeDEsIHkxLCB4MiwgeTJdID0gR3JpZC5jaGFuZ2VJbkFyZWEoXHJcbiAgICAgICAgICAgIHgxLCB5MSwgeDIsIHkyLFxyXG4gICAgICAgICAgICBEZWZpbmUuc3ZnaW1hZ2VzaXplLndpZHRoLFxyXG4gICAgICAgICAgICBEZWZpbmUuc3ZnaW1hZ2VzaXplLmhlaWdodCxcclxuICAgICAgICAgICAgRGVmaW5lLmdyaWQud2lkdGgsXHJcbiAgICAgICAgICAgIERlZmluZS5ncmlkLmhlaWdodFxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIGNvbnN0IG5ld19ib3hfaWQgICA9IEJveC5nZXROZXdCb3hJZChib3hzKTtcclxuICAgICAgICBjb25zdCBuZXdfZ3JvdXBfaWQgPSBCb3guZ2V0TmV3R3JvdXBJZChib3hzKTtcclxuXHJcbiAgICAgICAgY29uc3QgcGF5bG9hZCA9IHtcclxuICAgICAgICAgICAgYm94X2lkOiAgIG5ld19ib3hfaWQsXHJcbiAgICAgICAgICAgIGdyb3VwX2lkOiBuZXdfZ3JvdXBfaWQsXHJcbiAgICAgICAgICAgIGdyb3VwX25vOiAxLFxyXG4gICAgICAgICAgICB0eXBlOiAgICAgJ3RleHQnLFxyXG4gICAgICAgICAgICB4MTogeDEsXHJcbiAgICAgICAgICAgIHkxOiB5MSxcclxuICAgICAgICAgICAgeDI6IHgyLFxyXG4gICAgICAgICAgICB5MjogeTIsXHJcblxyXG4gICAgICAgICAgICB0ZXh0OiB7XHJcbiAgICAgICAgICAgICAgICBrdW1paG9rbzogICBmX2JveC50ZXh0Lmt1bWlob2tvLFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19qczogZl9ib3gudGV4dC5wYWRkaW5nX2pzLFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19qZTogZl9ib3gudGV4dC5wYWRkaW5nX2plLFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19nczogZl9ib3gudGV4dC5wYWRkaW5nX2dzLFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19nZTogZl9ib3gudGV4dC5wYWRkaW5nX2dlLFxyXG4gICAgICAgICAgICAgICAgc2l6ZV9qOiAgICAgZl9ib3gudGV4dC5zaXplX2osXHJcbiAgICAgICAgICAgICAgICBzaXplX2c6ICAgICBmX2JveC50ZXh0LnNpemVfZyxcclxuICAgICAgICAgICAgICAgIGd5b2thbjogICAgIGZfYm94LnRleHQuZ3lva2FuLFxyXG4gICAgICAgICAgICAgICAgZm9udDogICAgICAgZl9ib3gudGV4dC5mb250LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHlpZWxkIHB1dChTYWdhX0NvbnRleHRNZW51X05ld0JveFRleHQocGF5bG9hZCkpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8g55S75YOP44Oc44OD44Kv44K544Gu6KSH6KO9XHJcbiAgICB5aWVsZCB0YWtlRXZlcnkoU1VfQ09OVEVYVE1FTlVfQ09QWUJPWElNQUdFLCBmdW5jdGlvbiogKGFjdGlvbikge1xyXG4gICAgICAgIGNvbnN0IGJveHMgPSB5aWVsZCBzZWxlY3QoKHN0YXRlKSA9PiBzdGF0ZS5ib3hzKTtcclxuXHJcbiAgICAgICAgLy8g6KSH6KO95YWD44Oc44OD44Kv44K544Gu44Oc44OD44Kv44K55oOF5aCx44KS5b6X44KLXHJcbiAgICAgICAgY29uc3QgZl9ib3ggPSBCb3guZ2V0Qm94KGJveHMsIGFjdGlvbi5wYXlsb2FkLmJveF9pZCk7XHJcblxyXG4gICAgICAgIC8vIOikh+ijveWFg+ODnOODg+OCr+OCueOBruW5heOBqOmrmOOBleOCkuW+l+OCi1xyXG4gICAgICAgIGNvbnN0IGZfYm94X3dpZHRoICA9IGZfYm94LngyIC0gZl9ib3gueDE7XHJcbiAgICAgICAgY29uc3QgZl9ib3hfaGVpZ2h0ID0gZl9ib3gueTIgLSBmX2JveC55MTtcclxuXHJcbiAgICAgICAgLy8g6KSH6KO944Oc44OD44Kv44K544Gu5Z+654K55bqn5qiZXHJcbiAgICAgICAgbGV0IHR4ID0gZl9ib3gueDEgLSA1MDtcclxuICAgICAgICBsZXQgdHkgPSBmX2JveC55MSArIDUwO1xyXG5cclxuICAgICAgICAvLyDopIfoo73jg5zjg4Pjgq/jgrnjga7ln7rngrnluqfmqJnjgpLjgrnjg4rjg4Pjg5fjgZXjgZvjgotcclxuICAgICAgICBbdHgsIHR5XSA9IEdyaWQuc25hcChcclxuICAgICAgICAgICAgdHgsXHJcbiAgICAgICAgICAgIHR5LFxyXG4gICAgICAgICAgICBEZWZpbmUuc3ZnaW1hZ2VzaXplLndpZHRoLFxyXG4gICAgICAgICAgICBEZWZpbmUuc3ZnaW1hZ2VzaXplLmhlaWdodCxcclxuICAgICAgICAgICAgRGVmaW5lLmdyaWQud2lkdGgsXHJcbiAgICAgICAgICAgIERlZmluZS5ncmlkLmhlaWdodFxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIC8vIOikh+ijveODnOODg+OCr+OCueOBruWni+eCueOBqOe1gueCueOCkuaxguOCgeOCi1xyXG4gICAgICAgIGxldCB4MSA9IHR4O1xyXG4gICAgICAgIGxldCB5MSA9IHR5O1xyXG4gICAgICAgIGxldCB4MiA9IHgxICsgZl9ib3hfd2lkdGg7XHJcbiAgICAgICAgbGV0IHkyID0geTEgKyBmX2JveF9oZWlnaHQ7XHJcblxyXG4gICAgICAgIC8vIOODnOODg+OCr+OCueOCkue0memdouOCqOODquOCouOBq+WPjuOCgeOCi1xyXG4gICAgICAgIFt4MSwgeTEsIHgyLCB5Ml0gPSBHcmlkLmNoYW5nZUluQXJlYShcclxuICAgICAgICAgICAgeDEsIHkxLCB4MiwgeTIsXHJcbiAgICAgICAgICAgIERlZmluZS5zdmdpbWFnZXNpemUud2lkdGgsXHJcbiAgICAgICAgICAgIERlZmluZS5zdmdpbWFnZXNpemUuaGVpZ2h0LFxyXG4gICAgICAgICAgICBEZWZpbmUuZ3JpZC53aWR0aCxcclxuICAgICAgICAgICAgRGVmaW5lLmdyaWQuaGVpZ2h0XHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgY29uc3QgbmV3X2JveF9pZCAgID0gQm94LmdldE5ld0JveElkKGJveHMpO1xyXG4gICAgICAgIGNvbnN0IG5ld19ncm91cF9pZCA9IEJveC5nZXROZXdHcm91cElkKGJveHMpO1xyXG5cclxuICAgICAgICBjb25zdCBwYXlsb2FkID0ge1xyXG4gICAgICAgICAgICBib3hfaWQ6ICAgbmV3X2JveF9pZCxcclxuICAgICAgICAgICAgZ3JvdXBfaWQ6IG5ld19ncm91cF9pZCxcclxuICAgICAgICAgICAgZ3JvdXBfbm86IDEsXHJcbiAgICAgICAgICAgIHR5cGU6ICAgICAnaW1hZ2UnLFxyXG4gICAgICAgICAgICB4MTogeDEsXHJcbiAgICAgICAgICAgIHkxOiB5MSxcclxuICAgICAgICAgICAgeDI6IHgyLFxyXG4gICAgICAgICAgICB5MjogeTIsXHJcblxyXG4gICAgICAgICAgICBpbWFnZToge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB5aWVsZCBwdXQoU2FnYV9Db250ZXh0TWVudV9OZXdCb3hJbWFnZShwYXlsb2FkKSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyDntKDmnZDjgpLjga/jgZrjgZlcclxuICAgIHlpZWxkIHRha2VFdmVyeShTVV9DT05URVhUTUVOVV9TT1pBSVVOTElOSywgZnVuY3Rpb24qIChhY3Rpb24pIHtcclxuICAgICAgICB5aWVsZCBwdXQoU1VfVG9vbEJveExpbmtfRGVsZXRlQnV0dG9uX0NsaWNrKGFjdGlvbi5wYXlsb2FkKSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyDjg5zjg4Pjgq/jgrnjgpLliYrpmaRcclxuICAgIHlpZWxkIHRha2VFdmVyeShTVV9DT05URVhUTUVOVV9CT1hSRU1PVkUsIGZ1bmN0aW9uKiAoYWN0aW9uKSB7XHJcbiAgICAgICAgeWllbGQgcHV0KFNVX1Rvb2xCb3hCb3hEYXRhX0RlbGV0ZUJ1dHRvbl9DbGljayhhY3Rpb24ucGF5bG9hZCkpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8g44Oc44OD44Kv44K544KS5pyA5YmN6Z2i44GrXHJcbiAgICB5aWVsZCB0YWtlRXZlcnkoU1VfQ09OVEVYVE1FTlVfQk9YVE9GUk9OVCwgZnVuY3Rpb24qIChhY3Rpb24pIHtcclxuICAgICAgICB5aWVsZCBwdXQoU2FnYV9Db250ZXh0TWVudV9Cb3hUb0Zyb250KGFjdGlvbi5wYXlsb2FkKSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyDjg5zjg4Pjgq/jgrnjgpLlho3og4zpnaLjgatcclxuICAgIHlpZWxkIHRha2VFdmVyeShTVV9DT05URVhUTUVOVV9CT1hUT0JBQ0ssIGZ1bmN0aW9uKiAoYWN0aW9uKSB7XHJcbiAgICAgICAgeWllbGQgcHV0KFNhZ2FfQ29udGV4dE1lbnVfQm94VG9CYWNrKGFjdGlvbi5wYXlsb2FkKSk7XHJcbiAgICB9KTtcclxufVxyXG4iLCJpbXBvcnQgeyB0YWtlRXZlcnksIHB1dCwgc2VsZWN0LCBmb3JrIH0gZnJvbSAncmVkdXgtc2FnYS9lZmZlY3RzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBTVV9EQU5ERF9NT1VTRURPV04sXHJcbiAgICBTVV9EQU5ERF9NT1VTRVVQLFxyXG59IGZyb20gJy4uL2FjdGlvbnNfc3UvZGFuZGQuanMnO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIFNhZ2FfREFuZERfTW91c2VEb3duLFxyXG4gICAgU2FnYV9EQW5kRF9Nb3VzZVVwLFxyXG59IGZyb20gJy4uL2FjdGlvbnNfc2FnYS9kYW5kZC5qcyc7XHJcblxyXG5pbXBvcnQge1xyXG4gICAgU2FnYV9Ub29sQm94TGlua19MaW5rX0NyZWF0ZSxcclxuICAgIFNhZ2FfVG9vbEJveExpbmtfTGlua19EZWxldGUsXHJcbn0gZnJvbSAnLi4vYWN0aW9uc19zYWdhL3Rvb2xib3hsaW5rLmpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBTYWdhX05hZ2FzaGlfUmVtb3ZlLFxyXG59IGZyb20gJy4uL2FjdGlvbnNfc2FnYS9uYWdhc2hpLmpzJztcclxuXHJcbmltcG9ydCB7IFphaHlvIH0gZnJvbSAnLi4vbGlicy96YWh5by5qcyc7XHJcbmltcG9ydCB7IERlZmluZSB9IGZyb20gJy4uL2RlZmluZS5qcyc7XHJcbmltcG9ydCB7IExpbmsgfSBmcm9tICcuLi9saWJzL2xpbmsuanMnO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIG5hZ2FzaGlFeGVjLFxyXG4gICAgbmFnYXNoaUV4ZWNHcm91cCxcclxuICAgIG5hZ2FzaGlFeGVjQm94LFxyXG4gICAgbmFnYXNoaUV4ZWNTb3phaSxcclxuICAgIG5hZ2FzaGlFeGVjQWxsLFxyXG59IGZyb20gJy4vbmFnYXNoaS5qcyc7XHJcblxyXG5pbXBvcnQgeyBCb3ggfSBmcm9tICcuLi9saWJzL2JveC5qcyc7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24qIHNjYWxlKCkge1xyXG4gICAgeWllbGQgdGFrZUV2ZXJ5KFNVX0RBTkREX01PVVNFRE9XTiwgZnVuY3Rpb24qIChhY3Rpb24pIHtcclxuICAgICAgICB5aWVsZCBwdXQoU2FnYV9EQW5kRF9Nb3VzZURvd24oYWN0aW9uLnBheWxvYWQpKTtcclxuICAgIH0pO1xyXG4gICAgeWllbGQgdGFrZUV2ZXJ5KFNVX0RBTkREX01PVVNFVVAsIGZ1bmN0aW9uKiAoYWN0aW9uKSB7XHJcbiAgICAgICAgLy8g44Oc44OD44Kv44K55oOF5aCx44KS5b6X44KLXHJcbiAgICAgICAgY29uc3QgYm94cyA9IHlpZWxkIHNlbGVjdCgoc3RhdGUpID0+IHN0YXRlLmJveHMpO1xyXG5cclxuICAgICAgICAvLyDjg4njg63jg4Pjg5flh6bnkIZcclxuICAgICAgICAvLyDjg4njg63jg4Pjg5fjgZfjgZ/luqfmqJnvvIhTVkfjgqTjg6Hjg7zjgrjjga7lj7PkuIrotbfngrnjgYvjgonjga5YWeW6p+aomeOCkuW+l+OCi++8iVxyXG4gICAgICAgIGNvbnN0IGRyb3BYID0gWmFoeW8ubHVUb3J1WChhY3Rpb24ucGF5bG9hZC54LCBEZWZpbmUuc3ZnaW1hZ2VzaXplLndpZHRoKTtcclxuICAgICAgICBjb25zdCBkcm9wWSA9IFphaHlvLmx1VG9ydVkoYWN0aW9uLnBheWxvYWQueSwgRGVmaW5lLnN2Z2ltYWdlc2l6ZS5oZWlnaHQpO1xyXG5cclxuICAgICAgICBsZXQgYm94ID0gJyc7XHJcbiAgICAgICAgbGV0IGNoZWNrID0gZmFsc2U7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBib3hzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGJveCA9IGJveHNbaV07XHJcblxyXG4gICAgICAgICAgICAvLyDjg4njg63jg4Pjg5fjgZfjgZ/luqfmqJnjgYzjg5zjg4Pjgq/jgrnlhoXjgafjgarjgYTloLTlkIjjga/jgIHnhKHoppZcclxuICAgICAgICAgICAgaWYgKFphaHlvLmlzSW5Cb3goZHJvcFgsIGRyb3BZLCBib3gueDEsIGJveC55MSwgYm94LngyLCBib3gueTIpID09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8g44OJ44Ot44OD44OX44GX44Gf44KC44Gu44Go44Oc44OD44Kv44K544Gu56iu5Yil44GM5ZCM44GY44Gn44Gq44GE5aC05ZCI44Gv54Sh6KaWXHJcbiAgICAgICAgICAgIGNoZWNrID0gQm94LmlzU2FtZUJveFR5cGVBbmRTb3phaVR5cGUoYm94LnR5cGUsIGFjdGlvbi5wYXlsb2FkLnZhbHVlLnR5cGUpO1xyXG4gICAgICAgICAgICBpZiAoY2hlY2sgPT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIOa1geOBl+WHpueQhuOCkuihjOOBhlxyXG4gICAgICAgIGlmIChjaGVjayA9PSB0cnVlICYmIGJveCAhPSAnJykge1xyXG4gICAgICAgICAgICBjb25zdCBsaW5rcyA9IHlpZWxkIHNlbGVjdCgoc3RhdGUpID0+IHN0YXRlLmxpbmtzKTtcclxuICAgICAgICAgICAgY29uc3Qgc296YWlfaWQgPSBhY3Rpb24ucGF5bG9hZC52YWx1ZS5zb3phaV9pZDtcclxuICAgICAgICAgICAgY29uc3QgZ3JvdXBfaWQgPSBib3guZ3JvdXBfaWQ7XHJcblxyXG4gICAgICAgICAgICAvLyDjg4njg63jg4Pjg5fjgZfjgZ/ntKDmnZDjgYzml6LjgavmtYHjgZXjgozjgabjgYTjgZ/jgonjgIHliYrpmaTjgZnjgotcclxuICAgICAgICAgICAgY29uc3QgZ3BpZCA9IExpbmsuZ2V0R3JvdXBGcm9tU296YWlJZChsaW5rcywgc296YWlfaWQpO1xyXG4gICAgICAgICAgICBpZiAoZ3BpZCAhPSAnJykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcGF5bG9hZCA9IHtcclxuICAgICAgICAgICAgICAgICAgICBncm91cF9pZDogZ3BpZCxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB5aWVsZCBwdXQoU2FnYV9OYWdhc2hpX1JlbW92ZShwYXlsb2FkKSk7XHJcbiAgICAgICAgICAgICAgICB5aWVsZCBwdXQoU2FnYV9Ub29sQm94TGlua19MaW5rX0RlbGV0ZShwYXlsb2FkKSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIOa1geOBl+WHpueQhuOCkuihjOOBhlxyXG4gICAgICAgICAgICB5aWVsZCBmb3JrKG5hZ2FzaGlFeGVjLCBncm91cF9pZCwgc296YWlfaWQpO1xyXG5cclxuICAgICAgICAgICAgLy8g44Oq44Oz44Kv44Oq44K544OI44Gr6L+95YqgXHJcbiAgICAgICAgICAgIGNvbnN0IHBheWxvYWQgPSB7XHJcbiAgICAgICAgICAgICAgICBncm91cF9pZDogZ3JvdXBfaWQsXHJcbiAgICAgICAgICAgICAgICBzb3phaV9pZDogc296YWlfaWQsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHlpZWxkIHB1dChTYWdhX1Rvb2xCb3hMaW5rX0xpbmtfQ3JlYXRlKHBheWxvYWQpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHlpZWxkIHB1dChTYWdhX0RBbmREX01vdXNlVXAoYWN0aW9uLnBheWxvYWQpKTtcclxuICAgIH0pO1xyXG59XHJcbiIsImltcG9ydCB7IHRha2VFdmVyeSwgcHV0LCBzZWxlY3QgfSBmcm9tICdyZWR1eC1zYWdhL2VmZmVjdHMnO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIFNVX1RPT0xCT1hTQ0FMRV9NSU5CVVRUT05fQ0xJQ0ssXHJcbiAgICBTVV9UT09MQk9YU0NBTEVfTUFYQlVUVE9OX0NMSUNLLFxyXG4gICAgU1VfVE9PTEJPWFNDQUxFXzEwMFBFUkJVVFRPTl9DTElDSyxcclxufSBmcm9tICcuLi9hY3Rpb25zX3N1L3Rvb2xib3hzY2FsZS5qcyc7XHJcblxyXG5pbXBvcnQge1xyXG4gICAgU2FnYV9TY2FsZV9DaGFuZ2UsXHJcbn0gZnJvbSAnLi4vYWN0aW9uc19zYWdhL3Rvb2xib3hzY2FsZS5qcyc7XHJcblxyXG5jb25zdCBnZXRTY2FsZSA9IChzdGF0ZSkgPT4gc3RhdGUuc2NhbGU7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiogc2NhbGUoKSB7XHJcbiAgICB5aWVsZCB0YWtlRXZlcnkoU1VfVE9PTEJPWFNDQUxFX01JTkJVVFRPTl9DTElDSywgZnVuY3Rpb24qIChhY3Rpb24pIHtcclxuICAgICAgICBsZXQgc2NhbGUgPSB5aWVsZCBzZWxlY3QoZ2V0U2NhbGUpO1xyXG4gICAgICAgIHNjYWxlIC09IDUwO1xyXG4gICAgICAgIGlmIChzY2FsZSA8PSA1MCkge1xyXG4gICAgICAgICAgICBzY2FsZSA9IDUwXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHlpZWxkIHB1dChTYWdhX1NjYWxlX0NoYW5nZSh7c2NhbGU6IHNjYWxlfSkpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgeWllbGQgdGFrZUV2ZXJ5KFNVX1RPT0xCT1hTQ0FMRV9NQVhCVVRUT05fQ0xJQ0ssIGZ1bmN0aW9uKiAoYWN0aW9uKSB7XHJcbiAgICAgICAgLy8gbGV0IHNjYWxlID0gc2VsZWN0KCkuc2NhbGU7XHJcbiAgICAgICAgbGV0IHNjYWxlID0geWllbGQgc2VsZWN0KGdldFNjYWxlKTtcclxuICAgICAgICBzY2FsZSArPSA1MDtcclxuICAgICAgICBpZiAoc2NhbGUgPj0gMTAwMCkge1xyXG4gICAgICAgICAgICBzY2FsZSA9IDEwMDBcclxuICAgICAgICB9XHJcbiAgICAgICAgeWllbGQgcHV0KFNhZ2FfU2NhbGVfQ2hhbmdlKHtzY2FsZTogc2NhbGV9KSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB5aWVsZCB0YWtlRXZlcnkoU1VfVE9PTEJPWFNDQUxFXzEwMFBFUkJVVFRPTl9DTElDSywgZnVuY3Rpb24qIChhY3Rpb24pIHtcclxuICAgICAgICB5aWVsZCBwdXQoU2FnYV9TY2FsZV9DaGFuZ2Uoe3NjYWxlOiAxMDB9KSk7XHJcbiAgICB9KVxyXG59XHJcbiIsImltcG9ydCB7IHRha2VFdmVyeSwgcHV0LCBzZWxlY3QsIGZvcmsgfSBmcm9tICdyZWR1eC1zYWdhL2VmZmVjdHMnO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIFNVX1RPT0xCT1hfTU9WRUVORCxcclxufSBmcm9tICcuLi9hY3Rpb25zX3N1L3Rvb2xib3guanMnO1xyXG5pbXBvcnQge1xyXG4gICAgU2FnYV9Ub29sQm94X01vdmVFbmQsXHJcbn0gZnJvbSAnLi4vYWN0aW9uc19zYWdhL3Rvb2xib3guanMnO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIFNVX1RPT0xCT1hCT1hEQVRBX1VQREFURUJVVFRPTl9DTElDSyxcclxuICAgIFNVX1RPT0xCT1hCT1hEQVRBX0RFTEVURUJVVFRPTl9DTElDSyxcclxuICAgIFNVX1RPT0xCT1hCT1hEQVRBX0NSRUFURUJVVFRPTl9DTElDSyxcclxufSBmcm9tICcuLi9hY3Rpb25zX3N1L3Rvb2xib3hib3hkYXRhLmpzJztcclxuaW1wb3J0IHtcclxuICAgIFNhZ2FfVG9vbEJveEJveERhdGFfQm94RGF0YV9VcGRhdGUsXHJcbiAgICBTYWdhX1Rvb2xCb3hCb3hEYXRhX0JveERhdGFfRGVsZXRlLFxyXG4gICAgU2FnYV9Ub29sQm94Qm94RGF0YV9Cb3hEYXRhX0NyZWF0ZSxcclxufSBmcm9tICcuLi9hY3Rpb25zX3NhZ2EvdG9vbGJveGJveGRhdGEuanMnO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIFNVX1RPT0xCT1hURVhUREFUQV9VUERBVEVCVVRUT05fQ0xJQ0ssXHJcbn0gZnJvbSAnLi4vYWN0aW9uc19zdS90b29sYm94dGV4dGRhdGEuanMnO1xyXG5pbXBvcnQge1xyXG4gICAgU2FnYV9Ub29sQm94VGV4dERhdGFfVGV4dERhdGFfVXBkYXRlLFxyXG59IGZyb20gJy4uL2FjdGlvbnNfc2FnYS90b29sYm94dGV4dGRhdGEuanMnO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIFNVX1RPT0xCT1hTT1pBSV9VUERBVEVCVVRUT05fQ0xJQ0ssXHJcbiAgICBTVV9UT09MQk9YU09aQUlfREVMRVRFQlVUVE9OX0NMSUNLLFxyXG4gICAgU1VfVE9PTEJPWFNPWkFJX0NSRUFURUJVVFRPTl9DTElDSyxcclxuICAgIFNVX1RPT0xCT1hTT1pBSV9TT1pBSV9UT0dHTEUsXHJcbn0gZnJvbSAnLi4vYWN0aW9uc19zdS90b29sYm94c296YWkuanMnO1xyXG5pbXBvcnQge1xyXG4gICAgU2FnYV9Ub29sQm94U296YWlfU296YWlfVXBkYXRlLFxyXG4gICAgU2FnYV9Ub29sQm94U296YWlfU296YWlfRGVsZXRlLFxyXG4gICAgU2FnYV9Ub29sQm94U296YWlfU296YWlfQ3JlYXRlLFxyXG4gICAgU2FnYV9Ub29sQm94U296YWlfU296YWlfVG9nZ2xlLFxyXG59IGZyb20gJy4uL2FjdGlvbnNfc2FnYS90b29sYm94c296YWkuanMnO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIFNVX1RPT0xCT1hMSU5LX0NSRUFURUJVVFRPTl9DTElDSyxcclxuICAgIFNVX1RPT0xCT1hMSU5LX0RFTEVURUJVVFRPTl9DTElDSyxcclxufSBmcm9tICcuLi9hY3Rpb25zX3N1L3Rvb2xib3hsaW5rLmpzJztcclxuaW1wb3J0IHtcclxuICAgIFNhZ2FfVG9vbEJveExpbmtfTGlua19DcmVhdGUsXHJcbiAgICBTYWdhX1Rvb2xCb3hMaW5rX0xpbmtfRGVsZXRlLFxyXG59IGZyb20gJy4uL2FjdGlvbnNfc2FnYS90b29sYm94bGluay5qcyc7XHJcblxyXG5pbXBvcnQge1xyXG4gICAgU1VfVE9PTEJPWFBSRVNFTl9MQVlPVVRDQUxMQlVUVE9OX0NMSUNLLFxyXG4gICAgU1VfVE9PTEJPWFBSRVNFTl9TT1pBSUNBTExCVVRUT05fQ0xJQ0ssXHJcbiAgICBTVV9UT09MQk9YUFJFU0VOX0xJTktDQUxMQlVUVE9OX0NMSUNLLFxyXG5cclxuICAgIFNVX1RPT0xCT1hQUkVTRU5fRURJVE9OT0ZGQlVUVE9OX0NMSUNLLFxyXG59IGZyb20gJy4uL2FjdGlvbnNfc3UvdG9vbGJveHByZXNlbi5qcyc7XHJcbmltcG9ydCB7XHJcbiAgICBTYWdhX0xheW91dF9DYWxsLFxyXG4gICAgU2FnYV9Tb3phaV9DYWxsLFxyXG4gICAgU2FnYV9MaW5rX0NhbGwsXHJcbiAgICBcclxuICAgIFNhZ2FfRWRpdE9uT2ZmX0NoYW5nZSxcclxufSBmcm9tICcuLi9hY3Rpb25zX3NhZ2EvdG9vbGJveHByZXNlbi5qcyc7XHJcblxyXG5pbXBvcnQge1xyXG4gICAgU2FnYV9OYWdhc2hpUmVzdWx0X0NyZWF0ZSxcclxuICAgIFNhZ2FfTmFnYXNoaV9SZW1vdmUsXHJcbn0gZnJvbSAnLi4vYWN0aW9uc19zYWdhL25hZ2FzaGkuanMnO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIG5hZ2FzaGlFeGVjLFxyXG4gICAgbmFnYXNoaUV4ZWNHcm91cCxcclxuICAgIG5hZ2FzaGlFeGVjQm94LFxyXG4gICAgbmFnYXNoaUV4ZWNTb3phaSxcclxuICAgIG5hZ2FzaGlFeGVjQWxsLFxyXG59IGZyb20gJy4vbmFnYXNoaS5qcyc7XHJcblxyXG5pbXBvcnQgeyBaYWh5byB9IGZyb20gJy4uL2xpYnMvemFoeW8uanMnO1xyXG5pbXBvcnQgeyBCb3ggfSBmcm9tICcuLi9saWJzL2JveC5qcyc7XHJcbmltcG9ydCB7IFNvemFpIH0gZnJvbSAnLi4vbGlicy9zb3phaS5qcyc7XHJcblxyXG5pbXBvcnQgeyBQcmVzZW5MaW5rIH0gZnJvbSAnLi4vZGVmaW5lLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKiB0b29sYm94KCkge1xyXG4gICAgLy8g57Sg5p2Q44Gu5Yid5pyf5Yem55CGXHJcbiAgICBjb25zdCBzb3phaSA9IHlpZWxkIHNlbGVjdCgoc3RhdGUpID0+IHN0YXRlLnNvemFpKTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc296YWkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zdCBwYXlsb2FkID0ge1xyXG4gICAgICAgICAgICBzb3phaToge1xyXG4gICAgICAgICAgICAgICAgc296YWlfaWQ6IHNvemFpW2ldLnNvemFpX2lkLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogc296YWlbaV0udHlwZSxcclxuICAgICAgICAgICAgICAgIHRleHQ6IHNvemFpW2ldLnRleHQsXHJcbiAgICAgICAgICAgICAgICBpbWFnZTogc296YWlbaV0uaW1hZ2UsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfTtcclxuICAgICAgICB5aWVsZCBwdXQoU2FnYV9Ub29sQm94U296YWlfU296YWlfVXBkYXRlKHBheWxvYWQpKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyDjg4Tjg7zjg6vjg5zjg4Pjgq/jgrnjgpLliJ3mnJ/kvY3nva7jgavjgrvjg4Pjg4jjgZnjgotcclxuICAgIGNvbnN0IHRvb2xib3hzID0geWllbGQgc2VsZWN0KChzdGF0ZSkgPT4gc3RhdGUudG9vbGJveHMpO1xyXG4gICAgbGV0IHBheWxvYWQgPSB7fTtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRvb2xib3hzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgc3dpdGNoICh0b29sYm94c1tpXS50eXBlKSB7XHJcbiAgICAgICAgY2FzZSAnc2NhbGUnOiAgIC8vIOaLoeWkp+e4ruWwj+ODhOODvOODq+ODnOODg+OCr+OCuVxyXG4gICAgICAgICAgICBwYXlsb2FkID0ge1xyXG4gICAgICAgICAgICAgICAgdG9vbGJveF9pZDogdG9vbGJveHNbaV0udG9vbGJveF9pZCxcclxuICAgICAgICAgICAgICAgIHg6IFphaHlvLndpbmRvd0FyZWEoKS53IC0gdG9vbGJveHNbaV0udyAtIDIwLFxyXG4gICAgICAgICAgICAgICAgeTogNSxcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHlpZWxkIHB1dChTYWdhX1Rvb2xCb3hfTW92ZUVuZChwYXlsb2FkKSk7XHJcblxyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBcclxuICAgICAgICBjYXNlICdib3hkYXRhJzogICAvLyDjg5zjg4Pjgq/jgrnmg4XloLHjg4Tjg7zjg6vjg5zjg4Pjgq/jgrlcclxuICAgICAgICAgICAgcGF5bG9hZCA9IHtcclxuICAgICAgICAgICAgICAgIHRvb2xib3hfaWQ6IHRvb2xib3hzW2ldLnRvb2xib3hfaWQsXHJcbiAgICAgICAgICAgICAgICB4OiBaYWh5by53aW5kb3dBcmVhKCkudyAtIHRvb2xib3hzW2ldLncgLSAyMCxcclxuICAgICAgICAgICAgICAgIHk6IDUwLFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgeWllbGQgcHV0KFNhZ2FfVG9vbEJveF9Nb3ZlRW5kKHBheWxvYWQpKTtcclxuXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBjYXNlICd0ZXh0ZGF0YSc6ICAgLy8g44OG44Kt44K544OI5oOF5aCx44OE44O844Or44Oc44OD44Kv44K5XHJcbiAgICAgICAgICAgIHBheWxvYWQgPSB7XHJcbiAgICAgICAgICAgICAgICB0b29sYm94X2lkOiB0b29sYm94c1tpXS50b29sYm94X2lkLFxyXG4gICAgICAgICAgICAgICAgeDogWmFoeW8ud2luZG93QXJlYSgpLncgLSB0b29sYm94c1tpXS53IC0gMjAsXHJcbiAgICAgICAgICAgICAgICB5OiAxOTUsXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB5aWVsZCBwdXQoU2FnYV9Ub29sQm94X01vdmVFbmQocGF5bG9hZCkpO1xyXG5cclxuICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgIGNhc2UgJ3NvemFpJzogICAvLyDntKDmnZDjg6rjgrnjg4jjg4Tjg7zjg6vjg5zjg4Pjgq/jgrlcclxuICAgICAgICAgICAgcGF5bG9hZCA9IHtcclxuICAgICAgICAgICAgICAgIHRvb2xib3hfaWQ6IHRvb2xib3hzW2ldLnRvb2xib3hfaWQsXHJcbiAgICAgICAgICAgICAgICB4OiBaYWh5by53aW5kb3dBcmVhKCkudyAtIHRvb2xib3hzW2ldLncgLSAyMCAtIDIwMCAtIDUsXHJcbiAgICAgICAgICAgICAgICB5OiA1LFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgeWllbGQgcHV0KFNhZ2FfVG9vbEJveF9Nb3ZlRW5kKHBheWxvYWQpKTtcclxuXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBjYXNlICdsaW5rJzogICAgLy8g44Oq44Oz44Kv44Oq44K544OI44OE44O844Or44Oc44OD44Kv44K5XHJcbiAgICAgICAgICAgIHBheWxvYWQgPSB7XHJcbiAgICAgICAgICAgICAgICB0b29sYm94X2lkOiB0b29sYm94c1tpXS50b29sYm94X2lkLFxyXG4gICAgICAgICAgICAgICAgeDogWmFoeW8ud2luZG93QXJlYSgpLncgLSB0b29sYm94c1tpXS53IC0gMjAgLSAyMDAgLSA1IC0gMjAwIC0gNSxcclxuICAgICAgICAgICAgICAgIHk6IDUsXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB5aWVsZCBwdXQoU2FnYV9Ub29sQm94X01vdmVFbmQocGF5bG9hZCkpO1xyXG5cclxuICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgIGNhc2UgJ3ByZXNlbic6ICAvLyDjg5fjg6zjgrzjg7PnlKjjg4Tjg7zjg6vjg5zjg4Pjgq/jgrlcclxuICAgICAgICAgICAgcGF5bG9hZCA9IHtcclxuICAgICAgICAgICAgICAgIHRvb2xib3hfaWQ6IHRvb2xib3hzW2ldLnRvb2xib3hfaWQsXHJcbiAgICAgICAgICAgICAgICB4OiBaYWh5by53aW5kb3dBcmVhKCkudyAtIHRvb2xib3hzW2ldLncgLSAyMCxcclxuICAgICAgICAgICAgICAgIHk6IDQwMCxcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHlpZWxkIHB1dChTYWdhX1Rvb2xCb3hfTW92ZUVuZChwYXlsb2FkKSk7XHJcblxyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgXHJcbiAgICAvLyDjg4Tjg7zjg6vjg5zjg4Pjgq/jgrnjga7np7vli5XjgpLlrozkuoZcclxuICAgIHlpZWxkIHRha2VFdmVyeShTVV9UT09MQk9YX01PVkVFTkQsIGZ1bmN0aW9uKiAoYWN0aW9uKSB7XHJcbiAgICAgICAgeWllbGQgcHV0KFNhZ2FfVG9vbEJveF9Nb3ZlRW5kKGFjdGlvbi5wYXlsb2FkKSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyDjg5zjg4Pjgq/jgrnmg4XloLHjg4Tjg7zjg6vjg5zjg4Pjgq/jgrnjga7jgIzmm7TmlrDjgI3jgYzmirzjgZXjgozjgZ9cclxuICAgIHlpZWxkIHRha2VFdmVyeShTVV9UT09MQk9YQk9YREFUQV9VUERBVEVCVVRUT05fQ0xJQ0ssIGZ1bmN0aW9uKiAoYWN0aW9uKSB7XHJcbiAgICAgICAgeWllbGQgcHV0KFNhZ2FfVG9vbEJveEJveERhdGFfQm94RGF0YV9VcGRhdGUoYWN0aW9uLnBheWxvYWQpKTtcclxuXHJcbiAgICAgICAgLy8g44GZ44G544Gm44KS5rWB44GX55u044GZXHJcbiAgICAgICAgeWllbGQgZm9yayhuYWdhc2hpRXhlY0FsbCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyDjg5zjg4Pjgq/jgrnmg4XloLHjg4Tjg7zjg6vjg5zjg4Pjgq/jgrnjga7jgIzjg5zjg4Pjgq/jgrnliYrpmaTjgI3jgYzmirzjgZXjgozjgZ9cclxuICAgIHlpZWxkIHRha2VFdmVyeShTVV9UT09MQk9YQk9YREFUQV9ERUxFVEVCVVRUT05fQ0xJQ0ssIGZ1bmN0aW9uKiAoYWN0aW9uKSB7XHJcbiAgICAgICAgLy8g5YmK6Zmk44GX44KI44GG44Go44GX44Gm44GE44KL44Oc44OD44Kv44K544Gu44Kw44Or44O844OXSUTjgpLlvpfjgotcclxuICAgICAgICBsZXQgYm94cyA9IHlpZWxkIHNlbGVjdCgoc3RhdGUpID0+IHN0YXRlLmJveHMpO1xyXG4gICAgICAgIGNvbnN0IFtncm91cF9pZCwgZ3JvdXBfbm9dID0gQm94LmdldEdyb3VwQW5kTm8oYm94cywgYWN0aW9uLnBheWxvYWQuYm94X2lkKTtcclxuXHJcbiAgICAgICAgLy8g44Oc44OD44Kv44K544KS5YmK6ZmkXHJcbiAgICAgICAgeWllbGQgcHV0KFNhZ2FfVG9vbEJveEJveERhdGFfQm94RGF0YV9EZWxldGUoYWN0aW9uLnBheWxvYWQpKTtcclxuXHJcbiAgICAgICAgLy8g44Oc44OD44Kv44K544Oq44K544OI5YaF44Gr5YmK6Zmk44GX44Gf44Oc44OD44Kv44K544Gu44Kw44Or44O844OX5ZCN44GM5a2Y5Zyo44GX44Gq44GR44KM44Gw44CBXHJcbiAgICAgICAgLy8g44Oq44Oz44Kv44Oq44K544OI44KC5YmK6Zmk44GZ44KLXHJcbiAgICAgICAgYm94cyA9IHlpZWxkIHNlbGVjdCgoc3RhdGUpID0+IHN0YXRlLmJveHMpO1xyXG4gICAgICAgIGNvbnN0IGdyb3VwcyA9IEJveC5nZXRHcm91cEFyeShib3hzKTtcclxuICAgICAgICBpZiAoZ3JvdXBzLmluZGV4T2YoZ3JvdXBfaWQpIDwgMCkge1xyXG4gICAgICAgICAgICBjb25zdCBwYXlsb2FkID0ge1xyXG4gICAgICAgICAgICAgICAgZ3JvdXBfaWQ6IGdyb3VwX2lkLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB5aWVsZCBwdXQoU2FnYV9Ub29sQm94TGlua19MaW5rX0RlbGV0ZShwYXlsb2FkKSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8g5a2Y5Zyo44GX44Gf44KJ44CB5rWB44GX55u044GZXHJcbiAgICAgICAgICAgIHlpZWxkIGZvcmsobmFnYXNoaUV4ZWNHcm91cCwgZ3JvdXBfaWQpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIC8vIOODnOODg+OCr+OCueaDheWgseODhOODvOODq+ODnOODg+OCr+OCueOBruOAjOaWsOimj+S9nOaIkOOAjeOBjOaKvOOBleOCjOOBn1xyXG4gICAgeWllbGQgdGFrZUV2ZXJ5KFNVX1RPT0xCT1hCT1hEQVRBX0NSRUFURUJVVFRPTl9DTElDSywgZnVuY3Rpb24qIChhY3Rpb24pIHtcclxuICAgICAgICB5aWVsZCBwdXQoU2FnYV9Ub29sQm94Qm94RGF0YV9Cb3hEYXRhX0NyZWF0ZShhY3Rpb24ucGF5bG9hZCkpO1xyXG5cclxuICAgICAgICAvLyDmtYHjgZlcclxuICAgICAgICB5aWVsZCBmb3JrKG5hZ2FzaGlFeGVjQm94LCBhY3Rpb24ucGF5bG9hZC5ib3guYm94X2lkKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIOODhuOCreOCueODiOaDheWgseODhOODvOODq+ODnOODg+OCr+OCueOBruOAjOabtOaWsOOAjeOBjOaKvOOBleOCjOOBn1xyXG4gICAgeWllbGQgdGFrZUV2ZXJ5KFNVX1RPT0xCT1hURVhUREFUQV9VUERBVEVCVVRUT05fQ0xJQ0ssIGZ1bmN0aW9uKiAoYWN0aW9uKSB7XHJcbiAgICAgICAgeWllbGQgcHV0KFNhZ2FfVG9vbEJveFRleHREYXRhX1RleHREYXRhX1VwZGF0ZShhY3Rpb24ucGF5bG9hZCkpO1xyXG5cclxuICAgICAgICAvLyDmtYHjgZfjgpLmm7TmlrBcclxuICAgICAgICB5aWVsZCBmb3JrKG5hZ2FzaGlFeGVjQm94LCBhY3Rpb24ucGF5bG9hZC5ib3guYm94X2lkKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIOe0oOadkOODquOCueODiOODhOODvOODq+ODnOODg+OCr+OCueOBruOAjOabtOaWsOOAjeOBjOaKvOOBleOCjOOBn1xyXG4gICAgeWllbGQgdGFrZUV2ZXJ5KFNVX1RPT0xCT1hTT1pBSV9VUERBVEVCVVRUT05fQ0xJQ0ssIGZ1bmN0aW9uKiAoYWN0aW9uKSB7XHJcbiAgICAgICAgeWllbGQgcHV0KFNhZ2FfVG9vbEJveFNvemFpX1NvemFpX1VwZGF0ZShhY3Rpb24ucGF5bG9hZCkpO1xyXG5cclxuICAgICAgICAvLyDmtYHjgZflh6bnkIbjgpLooYzjgYZcclxuICAgICAgICB5aWVsZCBmb3JrKG5hZ2FzaGlFeGVjU296YWksIGFjdGlvbi5wYXlsb2FkLnNvemFpLnNvemFpX2lkKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIOe0oOadkOODquOCueODiOODhOODvOODq+ODnOODg+OCr+OCueOBruOAjOWJiumZpOOAjeOBjOaKvOOBleOCjOOBn1xyXG4gICAgeWllbGQgdGFrZUV2ZXJ5KFNVX1RPT0xCT1hTT1pBSV9ERUxFVEVCVVRUT05fQ0xJQ0ssIGZ1bmN0aW9uKiAoYWN0aW9uKSB7XHJcbiAgICAgICAgLy8g5YmK6Zmk44GX44KI44GG44Go44GX44Gm44GE44KL57Sg5p2Q44GM44Oq44Oz44Kv44Oq44K544OI44Gr44GC44KL5aC05ZCI44CBXHJcbiAgICAgICAgLy8g44Gd44Gu44Oq44Oz44Kv44GV44KM44Gm44GE44KL44Oc44OD44Kv44K544Gu44Kw44Or44O844OX44KS5b6X44Gm44OH44Kj44K544OR44OD44OB44GZ44KLXHJcbiAgICAgICAgY29uc3QgYm94cyAgPSB5aWVsZCBzZWxlY3QoKHN0YXRlKSA9PiBzdGF0ZS5ib3hzKTtcclxuICAgICAgICBjb25zdCBsaW5rcyA9IHlpZWxkIHNlbGVjdCgoc3RhdGUpID0+IHN0YXRlLmxpbmtzKTtcclxuICAgICAgICBjb25zdCBncm91cF9pZCA9IEJveC5nZXRMaW5rR3JvdXAoYm94cywgbGlua3MsIGFjdGlvbi5wYXlsb2FkLnNvemFpX2lkKTtcclxuICAgICAgICBpZiAoZ3JvdXBfaWQgPj0gMSkge1xyXG4gICAgICAgICAgICBjb25zdCBwYXlsb2FkID0ge1xyXG4gICAgICAgICAgICAgICAgZ3JvdXBfaWQ6IGdyb3VwX2lkLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHlpZWxkIHB1dChTYWdhX05hZ2FzaGlfUmVtb3ZlKHBheWxvYWQpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHlpZWxkIHB1dChTYWdhX1Rvb2xCb3hTb3phaV9Tb3phaV9EZWxldGUoYWN0aW9uLnBheWxvYWQpKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIOe0oOadkOODquOCueODiOODhOODvOODq+ODnOODg+OCr+OCueOBruOAjOaWsOimj+S9nOaIkOOAjeOBjOaKvOOBleOCjOOBn1xyXG4gICAgeWllbGQgdGFrZUV2ZXJ5KFNVX1RPT0xCT1hTT1pBSV9DUkVBVEVCVVRUT05fQ0xJQ0ssIGZ1bmN0aW9uKiAoYWN0aW9uKSB7XHJcbiAgICAgICAgeWllbGQgcHV0KFNhZ2FfVG9vbEJveFNvemFpX1NvemFpX0NyZWF0ZShhY3Rpb24ucGF5bG9hZCkpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8g57Sg5p2Q44Oq44K544OI44OE44O844Or44Oc44OD44Kv44K544Gu44Oq44K544OI44GM5oq844GV44KM44GfXHJcbiAgICB5aWVsZCB0YWtlRXZlcnkoU1VfVE9PTEJPWFNPWkFJX1NPWkFJX1RPR0dMRSwgZnVuY3Rpb24qIChhY3Rpb24pIHtcclxuICAgICAgICB5aWVsZCBwdXQoU2FnYV9Ub29sQm94U296YWlfU296YWlfVG9nZ2xlKGFjdGlvbi5wYXlsb2FkKSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyDjg6rjg7Pjgq/jg6rjgrnjg4jjg4Tjg7zjg6vjg5zjg4Pjgq/jgrnjga7jgIzjg6rjg7Pjgq/jgI3jgYzmirzjgZXjgozjgZ9cclxuICAgIHlpZWxkIHRha2VFdmVyeShTVV9UT09MQk9YTElOS19DUkVBVEVCVVRUT05fQ0xJQ0ssIGZ1bmN0aW9uKiAoYWN0aW9uKSB7XHJcbiAgICAgICAgeWllbGQgcHV0KFNhZ2FfVG9vbEJveExpbmtfTGlua19DcmVhdGUoYWN0aW9uLnBheWxvYWQpKTtcclxuXHJcbiAgICAgICAgLy8g5rWB44GX5Yem55CG44KS6KGM44GGXHJcbiAgICAgICAgeWllbGQgZm9yayhuYWdhc2hpRXhlYywgYWN0aW9uLnBheWxvYWQuZ3JvdXBfaWQsIGFjdGlvbi5wYXlsb2FkLnNvemFpX2lkKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIOODquODs+OCr+ODquOCueODiOODhOODvOODq+ODnOODg+OCr+OCueOBruOAjOODquODs+OCr+ino+mZpOOAjeOBjOaKvOOBleOCjOOBn1xyXG4gICAgeWllbGQgdGFrZUV2ZXJ5KFNVX1RPT0xCT1hMSU5LX0RFTEVURUJVVFRPTl9DTElDSywgZnVuY3Rpb24qIChhY3Rpb24pIHtcclxuICAgICAgICAvLyDjg5zjg4Pjgq/jgrnmg4XloLHjgYvjgonjgIHntKDmnZDmg4XloLHjgpLliYrpmaTjgZnjgotcclxuICAgICAgICB5aWVsZCBwdXQoU2FnYV9OYWdhc2hpX1JlbW92ZShhY3Rpb24ucGF5bG9hZCkpO1xyXG4gICAgICAgIC8vIOODquODs+OCr+ODquOCueODiOOBi+OCieOAgeWJiumZpOOBmeOCi1xyXG4gICAgICAgIHlpZWxkIHB1dChTYWdhX1Rvb2xCb3hMaW5rX0xpbmtfRGVsZXRlKGFjdGlvbi5wYXlsb2FkKSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyDjg5fjg6zjgrzjg7PnlKjjg4Tjg7zjg6vjg5zjg4Pjgq/jgrnjga7jgIzjg6zjgqTjgqLjgqbjg4jlkbzjgbPlh7rjgZfjgI3jgYzmirzjgZXjgozjgZ9cclxuICAgIHlpZWxkIHRha2VFdmVyeShTVV9UT09MQk9YUFJFU0VOX0xBWU9VVENBTExCVVRUT05fQ0xJQ0ssIGZ1bmN0aW9uKiAoYWN0aW9uKSB7XHJcbiAgICAgICAgeWllbGQgcHV0KFNhZ2FfTGF5b3V0X0NhbGwoYWN0aW9uLnBheWxvYWQpKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIOODl+ODrOOCvOODs+eUqOODhOODvOODq+ODnOODg+OCr+OCueOBruOAjOe0oOadkOWRvOOBs+WHuuOBl+OAjeOBjOaKvOOBleOCjOOBn1xyXG4gICAgeWllbGQgdGFrZUV2ZXJ5KFNVX1RPT0xCT1hQUkVTRU5fU09aQUlDQUxMQlVUVE9OX0NMSUNLLCBmdW5jdGlvbiogKGFjdGlvbikge1xyXG4gICAgICAgIHlpZWxkIHB1dChTYWdhX1NvemFpX0NhbGwoYWN0aW9uLnBheWxvYWQpKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIOODl+ODrOOCvOODs+eUqOODhOODvOODq+ODnOODg+OCr+OCueOBruOAjOiHquWLleWFqOODquODs+OCr+OAjeOBjOaKvOOBleOCjOOBn1xyXG4gICAgeWllbGQgdGFrZUV2ZXJ5KFNVX1RPT0xCT1hQUkVTRU5fTElOS0NBTExCVVRUT05fQ0xJQ0ssIGZ1bmN0aW9uKiAoYWN0aW9uKSB7XHJcbiAgICAgICAgLy8g44OX44Os44K844Oz55So44Oq44Oz44Kv44Oq44K544OI44KS5b6X44KLXHJcbiAgICAgICAgY29uc3QgcGxpbmtsaXN0ID0gUHJlc2VuTGlua1thY3Rpb24ucGF5bG9hZC5wYXR0ZXJuXTtcclxuICAgICAgICAvLyDjg5zjg4Pjgq/jgrnjg6rjgrnjg4jjgpLlvpfjgotcclxuICAgICAgICBjb25zdCBib3hzID0geWllbGQgc2VsZWN0KChzdGF0ZSkgPT4gc3RhdGUuYm94cyk7XHJcbiAgICAgICAgLy8g57Sg5p2Q44Oq44K544OI44KS5b6X44KLXHJcbiAgICAgICAgY29uc3Qgc296YWlzID0geWllbGQgc2VsZWN0KChzdGF0ZSkgPT4gc3RhdGUuc296YWkpO1xyXG5cclxuICAgICAgICBsZXQgbGlua2xpc3QgPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBsaW5rbGlzdC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBncm91cF9pZCA9IHBsaW5rbGlzdFtpXS5ncm91cF9pZDtcclxuICAgICAgICAgICAgY29uc3Qgc296YWlfaWQgPSBwbGlua2xpc3RbaV0uc296YWlfaWQ7XHJcblxyXG4gICAgICAgICAgICAvLyDjg5zjg4Pjgq/jgrnjg6rjgrnjg4jjgYvjgonjgrDjg6vjg7zjg5dOb+mFjeWIl+OCkuW+l+OCi1xyXG4gICAgICAgICAgICBjb25zdCBncm91cF9ub19hcnkgPSBCb3guZ2V0R3JvdXBOb0FyeShib3hzLCBncm91cF9pZCk7XHJcblxyXG4gICAgICAgICAgICAvLyDjg5zjg4Pjgq/jgrnjg6rjgrnjg4jjgavjgrDjg6vjg7zjg5fjgYzjgarjgZHjgozjgbDjgIHnhKHoppZcclxuICAgICAgICAgICAgaWYgKGdyb3VwX25vX2FyeS5sZW5ndGggPD0gMCkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIOODnOODg+OCr+OCueOCkuW+l+OCi1xyXG4gICAgICAgICAgICBjb25zdCBib3hfaWQgPSBCb3guZ2V0Qm94SWQoYm94cywgZ3JvdXBfaWQsIGdyb3VwX25vX2FyeVswXSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGJveCA9IEJveC5nZXRCb3goYm94cywgYm94X2lkKTtcclxuXHJcbiAgICAgICAgICAgIC8vIOe0oOadkOODquOCueODiOOBi+OCiee0oOadkOOCkuW+l+OCi1xyXG4gICAgICAgICAgICBjb25zdCBzb3phaSA9IFNvemFpLmdldFNvemFpKHNvemFpcywgc296YWlfaWQpO1xyXG5cclxuICAgICAgICAgICAgLy8g57Sg5p2Q44Oq44K544OI44Gr57Sg5p2Q44GM5a2Y5Zyo44GX44Gq44GR44KM44Gw44CB54Sh6KaWXHJcbiAgICAgICAgICAgIGlmIChzb3phaSA9PSAnJykge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIOODnOODg+OCr+OCueOBqOe0oOadkOOBrueorumhnuOBjOeVsOOBquOBo+OBpuOBhOOCjOOBsOOAgeeEoeimllxyXG4gICAgICAgICAgICBpZiAoYm94LnR5cGUgIT0gc296YWkudHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIOato+OBl+OBhOODquODs+OCr+ODquOCueODiOOBqOOBl+OBpuS9nOaIkOOBmeOCi1xyXG4gICAgICAgICAgICBsaW5rbGlzdC5wdXNoKHtcclxuICAgICAgICAgICAgICAgIGdyb3VwX2lkOiBncm91cF9pZCxcclxuICAgICAgICAgICAgICAgIHNvemFpX2lkOiBzb3phaV9pZCxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDkvZzmiJDjgZfjgZ/jg6rjg7Pjgq/jg6rjgrnjg4jjgpLmlbTnkIbvvIjph43opIfjgpLjgqvjg4Pjg4jvvInjgZnjgotcclxuICAgICAgICBjb25zdCBuZXdsaW5rbGlzdCA9IGxpbmtsaXN0LmZpbHRlcigoeCwgaSwgc2VsZikgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZmlyc3RJbmRleChzZWxmLCB4KSA9PT0gaSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGZ1bmN0aW9uIGZpcnN0SW5kZXgobGlzdCwgb2JqKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGxpc3RbaV0uZ3JvdXBfaWQgPT0gb2JqLmdyb3VwX2lkXHJcbiAgICAgICAgICAgICAgICAgJiYgbGlzdFtpXS5zb3phaV9pZCA9PSBvYmouc296YWlfaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGk7XHJcbiAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDmtYHjgZflh6bnkIbjgpLooYzjgYZcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5ld2xpbmtsaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHlpZWxkIGZvcmsobmFnYXNoaUV4ZWMsIG5ld2xpbmtsaXN0W2ldLmdyb3VwX2lkLCBuZXdsaW5rbGlzdFtpXS5zb3phaV9pZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB5aWVsZCBwdXQoU2FnYV9MaW5rX0NhbGwoe2xpbmtzOiBuZXdsaW5rbGlzdH0pKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIOODl+ODrOOCvOODs+eUqOODhOODvOODq+ODnOODg+OCr+OCueOBruOAjOe3qOmbhk9OL09GRuOAjeOBjOaKvOOBleOCjOOBn1xyXG4gICAgeWllbGQgdGFrZUV2ZXJ5KFNVX1RPT0xCT1hQUkVTRU5fRURJVE9OT0ZGQlVUVE9OX0NMSUNLLCBmdW5jdGlvbiogKGFjdGlvbikge1xyXG4gICAgICAgIHlpZWxkIHB1dChTYWdhX0VkaXRPbk9mZl9DaGFuZ2UoYWN0aW9uLnBheWxvYWQpKTtcclxuICAgIH0pO1xyXG59XHJcbiIsImltcG9ydCB7IHRha2VFdmVyeSwgcHV0LCBzZWxlY3QsIGZvcmsgfSBmcm9tICdyZWR1eC1zYWdhL2VmZmVjdHMnO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIFNVX1NFTEVDVEJPWF9CT1hfTk9OU0VMRUNULFxyXG4gICAgU1VfU0VMRUNUQk9YX0JPWF9TRUxFQ1QsXHJcbiAgICBTVV9TRUxFQ1RCT1hfRURJVEJPWF9NT1ZFRU5ELFxyXG4gICAgU1VfU0VMRUNUQk9YX0VESVRCT1hfQ0hBTkdFU0laRSxcclxuICAgIFNVX1NFTEVDVEJPWF9FRElUQk9YX0RFTEVURUtFWVBSRVNTLFxyXG59IGZyb20gJy4uL2FjdGlvbnNfc3Uvc2VsZWN0Ym94LmpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBTYWdhX1NlbGVjdEJveF9Cb3hfTm9uU2VsZWN0LFxyXG4gICAgU2FnYV9TZWxlY3RCb3hfQm94X1NlbGVjdCxcclxuICAgIFNhZ2FfU2VsZWN0Qm94X0VkaXRCb3hfTW92ZUVuZCxcclxuICAgIFNhZ2FfU2VsZWN0Qm94X0VkaXRCb3hfQ2hhbmdlU2l6ZSxcclxufSBmcm9tICcuLi9hY3Rpb25zX3NhZ2Evc2VsZWN0Ym94LmpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBTYWdhX1Rvb2xCb3hTb3phaV9Tb3phaV9TZWxlY3QsXHJcbn0gZnJvbSAnLi4vYWN0aW9uc19zYWdhL3Rvb2xib3hzb3phaS5qcyc7XHJcblxyXG5pbXBvcnQge1xyXG4gICAgU2FnYV9OYWdhc2hpX1JlbW92ZSxcclxufSBmcm9tICcuLi9hY3Rpb25zX3NhZ2EvbmFnYXNoaS5qcyc7XHJcblxyXG5pbXBvcnQge1xyXG4gICAgU1VfVG9vbEJveExpbmtfRGVsZXRlQnV0dG9uX0NsaWNrLFxyXG59IGZyb20gJy4uL2FjdGlvbnNfc3UvdG9vbGJveGxpbmsuanMnO1xyXG5pbXBvcnQge1xyXG4gICAgU2FnYV9Ub29sQm94TGlua19MaW5rX0RlbGV0ZSxcclxufSBmcm9tICcuLi9hY3Rpb25zX3NhZ2EvdG9vbGJveGxpbmsuanMnO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIG5hZ2FzaGlFeGVjLFxyXG4gICAgbmFnYXNoaUV4ZWNHcm91cCxcclxuICAgIG5hZ2FzaGlFeGVjQm94LFxyXG4gICAgbmFnYXNoaUV4ZWNTb3phaSxcclxuICAgIG5hZ2FzaGlFeGVjQWxsLFxyXG59IGZyb20gJy4vbmFnYXNoaS5qcyc7XHJcblxyXG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAnLi4vbGlicy9saW5rLmpzJztcclxuaW1wb3J0IHsgQm94IH0gZnJvbSAnLi4vbGlicy9ib3guanMnO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKiBzZWxlY3Rib3goKSB7XHJcbiAgICAvLyDjg5zjg4Pjgq/jgrnvvIjjg4bjgq3jgrnjg4jjg5zjg4Pjgq/jgrnvvInjga7liJ3mnJ/lh6bnkIZcclxuICAgIGNvbnN0IGJveHMgPSB5aWVsZCBzZWxlY3QoKHN0YXRlKSA9PiBzdGF0ZS5ib3hzKTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYm94cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGlmIChib3hzW2ldLnR5cGUgPT0gJ3RleHQnKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHBheWxvYWQgPSB7XHJcbiAgICAgICAgICAgICAgICBib3hfaWQ6IGJveHNbaV0uYm94X2lkLFxyXG4gICAgICAgICAgICAgICAgeDE6IGJveHNbaV0ueDEsXHJcbiAgICAgICAgICAgICAgICB5MTogYm94c1tpXS55MSxcclxuICAgICAgICAgICAgICAgIHgyOiBib3hzW2ldLngyLFxyXG4gICAgICAgICAgICAgICAgeTI6IGJveHNbaV0ueTIsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgeWllbGQgcHV0KFNhZ2FfU2VsZWN0Qm94X0VkaXRCb3hfQ2hhbmdlU2l6ZShwYXlsb2FkKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvLyDjg5zjg4Pjgq/jgrnjga7pgbjmip7jgpLop6PpmaTjgZnjgotcclxuICAgIHlpZWxkIHRha2VFdmVyeShTVV9TRUxFQ1RCT1hfQk9YX05PTlNFTEVDVCwgZnVuY3Rpb24qIChhY3Rpb24pIHtcclxuICAgICAgICB5aWVsZCBwdXQoU2FnYV9TZWxlY3RCb3hfQm94X05vblNlbGVjdChhY3Rpb24ucGF5bG9hZCkpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8g44Oc44OD44Kv44K544KS6YG45oqe44GZ44KLXHJcbiAgICB5aWVsZCB0YWtlRXZlcnkoU1VfU0VMRUNUQk9YX0JPWF9TRUxFQ1QsIGZ1bmN0aW9uKiAoYWN0aW9uKSB7XHJcbiAgICAgICAgeWllbGQgcHV0KFNhZ2FfU2VsZWN0Qm94X0JveF9TZWxlY3QoYWN0aW9uLnBheWxvYWQpKTtcclxuXHJcbiAgICAgICAgLy8g6YG45oqe44GX44Gf44Oc44OD44Kv44K544Gu44Kw44Or44O844OX5ZCN44GM44Oq44Oz44Kv44Oq44K544OI44Gr44GC44KM44Gw44CB44Gd44Gu57Sg5p2Q44KS6YG45oqe44GV44Gb44KLXHJcbiAgICAgICAgY29uc3QgbGlua3MgPSB5aWVsZCBzZWxlY3QoKHN0YXRlKSA9PiBzdGF0ZS5saW5rcyk7XHJcbiAgICAgICAgY29uc3QgYm94cyAgPSB5aWVsZCBzZWxlY3QoKHN0YXRlKSA9PiBzdGF0ZS5ib3hzKTtcclxuICAgICAgICBjb25zdCBzb3phaV9pZCA9IExpbmsuZ2V0U296YWlJZEZyb21Cb3hJZChsaW5rcywgYm94cywgYWN0aW9uLnBheWxvYWQuaWQpO1xyXG4gICAgICAgIGlmIChzb3phaV9pZCAhPSAnJykge1xyXG4gICAgICAgICAgICB5aWVsZCBwdXQoU2FnYV9Ub29sQm94U296YWlfU296YWlfU2VsZWN0KHtzb3phaV9pZDogc296YWlfaWR9KSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8g6YG45oqe44Oc44OD44Kv44K544Gu56e75YuV44GM5a6M5LqGXHJcbiAgICB5aWVsZCB0YWtlRXZlcnkoU1VfU0VMRUNUQk9YX0VESVRCT1hfTU9WRUVORCwgZnVuY3Rpb24qIChhY3Rpb24pIHtcclxuICAgICAgICB5aWVsZCBwdXQoU2FnYV9TZWxlY3RCb3hfRWRpdEJveF9Nb3ZlRW5kKGFjdGlvbi5wYXlsb2FkKSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyDpgbjmip7jg5zjg4Pjgq/jgrnjga7jgrXjgqTjgrrjgYzlpInmm7TjgZXjgozjgZ9cclxuICAgIHlpZWxkIHRha2VFdmVyeShTVV9TRUxFQ1RCT1hfRURJVEJPWF9DSEFOR0VTSVpFLCBmdW5jdGlvbiogKGFjdGlvbikge1xyXG4gICAgICAgIHlpZWxkIHB1dChTYWdhX1NlbGVjdEJveF9FZGl0Qm94X0NoYW5nZVNpemUoYWN0aW9uLnBheWxvYWQpKTtcclxuXHJcbiAgICAgICAgY29uc3QgYm94cyA9IHlpZWxkIHNlbGVjdCgoc3RhdGUpID0+IHN0YXRlLmJveHMpO1xyXG4gICAgICAgIGNvbnN0IGJveCA9IEJveC5nZXRCb3goYm94cywgYWN0aW9uLnBheWxvYWQuYm94X2lkKTtcclxuXHJcbiAgICAgICAgc3dpdGNoIChib3gudHlwZSkge1xyXG4gICAgICAgIGNhc2UgJ3RleHQnOlxyXG4gICAgICAgICAgICAvLyDmtYHjgZfnm7TjgZlcclxuICAgICAgICAgICAgeWllbGQgZm9yayhuYWdhc2hpRXhlY0JveCwgYWN0aW9uLnBheWxvYWQuYm94X2lkKTtcclxuXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICBjYXNlICdpbWFnZSc6XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIC8vIOmBuOaKnuODnOODg+OCr+OCueeKtuaFi+OBp+OAjERlbGV0ZeOAjeOCreODvOOBjOaKvOOBleOCjOOBn1xyXG4gICAgeWllbGQgdGFrZUV2ZXJ5KFNVX1NFTEVDVEJPWF9FRElUQk9YX0RFTEVURUtFWVBSRVNTLCBmdW5jdGlvbiogKGFjdGlvbikge1xyXG4gICAgICAgIHlpZWxkIHB1dChTVV9Ub29sQm94TGlua19EZWxldGVCdXR0b25fQ2xpY2soYWN0aW9uLnBheWxvYWQpKTtcclxuICAgIH0pO1xyXG59XHJcbiIsImltcG9ydCB7IGZvcmsgfSBmcm9tICdyZWR1eC1zYWdhL2VmZmVjdHMnO1xyXG5cclxuaW1wb3J0IHNlbGVjdGJveCBmcm9tICcuL3NlbGVjdGJveC5qcyc7XHJcbmltcG9ydCB0b29sYm94IGZyb20gJy4vdG9vbGJveC5qcyc7XHJcbmltcG9ydCBzY2FsZSBmcm9tICcuL3NjYWxlLmpzJztcclxuaW1wb3J0IGRhbmRkIGZyb20gJy4vZGFuZGQuanMnO1xyXG5pbXBvcnQgY29udGV4dG1lbnUgZnJvbSAnLi9jb250ZXh0bWVudS5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiogcm9vdFNhZ2EoKSB7XHJcbiAgICB5aWVsZCBmb3JrKHNlbGVjdGJveCk7XHJcbiAgICB5aWVsZCBmb3JrKHRvb2xib3gpO1xyXG4gICAgeWllbGQgZm9yayhzY2FsZSk7XHJcbiAgICB5aWVsZCBmb3JrKGRhbmRkKTtcclxuICAgIHlpZWxkIGZvcmsoY29udGV4dG1lbnUpO1xyXG59XHJcbiIsImltcG9ydCB7XHJcbiAgICBTQUdBX0NPTlRFWFRNRU5VX09QRU4sXHJcbiAgICBTQUdBX0NPTlRFWFRNRU5VX0NMT1NFLFxyXG59IGZyb20gJy4uL2FjdGlvbnNfc2FnYS9jb250ZXh0bWVudS5qcyc7XHJcblxyXG4vLyA9PT09PT09PT09PT09PT09PT09PVxyXG4vLyDjgrPjg7Pjg4bjgq3jgrnjg4jjg6Hjg4vjg6Xjg7zjgpLplovjgY/jg7vplonjgZjjgotcclxuLy9cclxuLy8gICAgICdvcGVuJzog6ZaL44GPXHJcbi8vICAgICAnY2xvc2UnOiDplonjgZjjgotcclxuLy8gPT09PT09PT09PT09PT09PT09PT1cclxuZXhwb3J0IGNvbnN0IGNvbnRleHRtZW51ID0gKHN0YXRlID0ge29wZW5jbG9zZTogJ2Nsb3NlJywgeDogMCwgeTogMH0sIGFjdGlvbikgPT4ge1xyXG4gICAgbGV0IG9iajtcclxuXHJcbiAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XHJcbiAgICBjYXNlIFNBR0FfQ09OVEVYVE1FTlVfT1BFTjogICAvLyDjgrPjg7Pjg4bjgq3jgrnjg4jjg6Hjg4vjg6Xjg7zjgpLplovjgY9cclxuICAgICAgICBvYmogPSB7XHJcbiAgICAgICAgICAgIG9wZW5jbG9zZTogJ29wZW4nLFxyXG4gICAgICAgICAgICB4OiBhY3Rpb24ucGF5bG9hZC54LFxyXG4gICAgICAgICAgICB5OiBhY3Rpb24ucGF5bG9hZC55LFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiBvYmo7XHJcblxyXG4gICAgY2FzZSBTQUdBX0NPTlRFWFRNRU5VX0NMT1NFOiAgLy8g44Kz44Oz44OG44Kt44K544OI44Oh44OL44Ol44O844KS6ZaJ44GY44KLXHJcbiAgICAgICAgb2JqID0ge1xyXG4gICAgICAgICAgICBvcGVuY2xvc2U6ICdjbG9zZScsXHJcbiAgICAgICAgICAgIHg6IDAsXHJcbiAgICAgICAgICAgIHk6IDAsXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG9iajtcclxuXHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICAgIHJldHVybiBzdGF0ZTtcclxuICAgIH1cclxufSIsImltcG9ydCB7XHJcbiAgICBTQUdBX0RBTkREX01PVVNFRE9XTixcclxufSBmcm9tICcuLi9hY3Rpb25zX3NhZ2EvZGFuZGQuanMnO1xyXG5cclxuLy8gPT09PT09PT09PT09PT09PT09PT1cclxuLy8g44OJ44Op44OD44Kw44Ki44Oz44OJ44OJ44Ot44OD44OX5oOF5aCxXHJcbi8vICAgICAge1xyXG4vLyAgICAgICAgICB2aWV3OiAndHJ1ZSc644OJ44Op44OD44Kw44O744Ki44Oz44OJ44O744OJ44Ot44OD44OX6ZaL5aeLICdmYWxzZSc644OJ44Op44OD44Kw44O744Ki44Oz44OJ44O744OJ44Ot44OD44OX57WC5LqGXHJcbi8vICAgICAgICAgIGV2ZW50OiDjg57jgqbjgrnjgqTjg5njg7Pjg4hcclxuLy8gICAgICAgICAgdHlwZTogJ3NvemFpJy4uLiDjgr/jgqTjg5dcclxuLy8gICAgICAgICAgdmFsdWU6IOaDheWgsVxyXG4vLyAgICAgIH1cclxuLy8gPT09PT09PT09PT09PT09PT09PT1cclxuZXhwb3J0IGNvbnN0IGRhbmRkID0gKHN0YXRlID0ge3ZpZXc6ICdmYWxzZSd9LCBhY3Rpb24pID0+IHtcclxuICAgIGxldCBvYmogPSBbXTtcclxuXHJcbiAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XHJcbiAgICBjYXNlIFNBR0FfREFORERfTU9VU0VET1dOOiAgIC8vIOODnuOCpuOCueODgOOCpuODs+OBleOCjOOBn1xyXG4gICAgICAgIHJldHVybiBhY3Rpb24ucGF5bG9hZDtcclxuXHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICAgIG9iaiA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoc3RhdGUpKTtcclxuICAgICAgICBvYmoudmlldyA9ICdmYWxzZSc7XHJcbiAgICAgICAgcmV0dXJuIG9iajtcclxuICAgIH1cclxufSIsImltcG9ydCB7XHJcbiAgICBTQUdBX0VESVRPTk9GRl9DSEFOR0UsXHJcbn0gZnJvbSAnLi4vYWN0aW9uc19zYWdhL3Rvb2xib3hwcmVzZW4uanMnO1xyXG5cclxuLy8gPT09PT09PT09PT09PT09PT09PT1cclxuLy8g57eo6ZuG54q25oWLT07vvI9PRkbmg4XloLFcclxuLy8gICAgICAnb24nOiDnt6jpm4bnirbmhYtPTlxyXG4vLyAgICAgICdvZmYnOiDnt6jpm4bnirbmhYtPRkZcclxuLy8gPT09PT09PT09PT09PT09PT09PT1cclxuZXhwb3J0IGNvbnN0IGVkaXRvbm9mZiA9IChzdGF0ZSA9ICdvbicsIGFjdGlvbikgPT4ge1xyXG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xyXG4gICAgY2FzZSBTQUdBX0VESVRPTk9GRl9DSEFOR0U6ICAgLy8g57eo6ZuG54q25oWL44GuT07vvI9PRkbjgYzliIfjgormm7/jgYjjgonjgozjgZ/loLTlkIhcclxuICAgICAgICByZXR1cm4gYWN0aW9uLnBheWxvYWQub25vZmY7XHJcblxyXG4gICAgZGVmYXVsdDpcclxuICAgICAgICByZXR1cm4gc3RhdGU7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBaYWh5byB9IGZyb20gJy4uL2xpYnMvemFoeW8uanMnO1xyXG5cclxuaW1wb3J0IHsgVGV4dEdyaWQgfSBmcm9tICcuLi9saWJzL3RleHRncmlkLmpzJztcclxuXHJcbmltcG9ydCB7IFByZXNlbkxpbmUgfSBmcm9tICcuLi9kZWZpbmUuanMnO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIFNBR0FfTEFZT1VUX0NBTEwsXHJcbn0gZnJvbSAnLi4vYWN0aW9uc19zYWdhL3Rvb2xib3hwcmVzZW4uanMnO1xyXG5cclxuLy8gPT09PT09PT09PT09PT09PT09PT1cclxuLy8g44Op44Kk44Oz44OH44O844K/XHJcbi8vICAgICAgW1xyXG4vLyAgICAgICAgICB7XHJcbi8vICAgICAgICAgICAgICBpZDogSURcclxuLy8gICAgICAgICAgICAgIHR5cGU6ICdyZWN0Jzrnn6nlvaIgJ2xpbmUnOuODqeOCpOODs1xyXG4vLyAgICAgICAgICAgICAgeDE6IOWPs+S4iuW6p+aomSBY77yI5Y+z5LiK5Z+654K577yJXHJcbi8vICAgICAgICAgICAgICB5MTog5Y+z5LiK5bqn5qiZIFnvvIjlj7PkuIrln7rngrnvvIlcclxuLy8gICAgICAgICAgICAgIHgyOiDlt6bkuIvluqfmqJkgWO+8iOWPs+S4iuWfuueCue+8iVxyXG4vLyAgICAgICAgICAgICAgeTI6IOW3puS4i+W6p+aomSBZ77yI5Y+z5LiK5Z+654K577yJXHJcbi8vXHJcbi8vICAgICAgICAgICAgICB3aWR0aDog57ea5bmFXHJcbi8vICAgICAgICAgICAgICBjb2xvcjog57ea44Gu6ImyXHJcbi8vICAgICAgICAgIH1cclxuLy8gICAgICBdXHJcbi8vID09PT09PT09PT09PT09PT09PT09XHJcbmV4cG9ydCBjb25zdCBsaW5lcyA9IChzdGF0ZSA9IFtdLCBhY3Rpb24pID0+IHtcclxuICAgIGxldCBsaW5lcztcclxuICAgIGxldCBhcmVhc2l6ZV9qLCBhcmVhc2l6ZV9nO1xyXG5cclxuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcclxuICAgIGNhc2UgU0FHQV9MQVlPVVRfQ0FMTDpcclxuICAgICAgICBsaW5lcyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoUHJlc2VuTGluZVthY3Rpb24ucGF5bG9hZC5wYXR0ZXJuXSkpO1xyXG5cclxuICAgICAgICByZXR1cm4gbGluZXM7XHJcblxyXG4gICAgZGVmYXVsdDpcclxuICAgICAgICByZXR1cm4gc3RhdGU7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHtcclxuICAgIFNBR0FfVE9PTEJPWExJTktfTElOS19DUkVBVEUsXHJcbiAgICBTQUdBX1RPT0xCT1hMSU5LX0xJTktfREVMRVRFLFxyXG59IGZyb20gJy4uL2FjdGlvbnNfc2FnYS90b29sYm94bGluay5qcyc7XHJcblxyXG5pbXBvcnQge1xyXG4gICAgU0FHQV9UT09MQk9YU09aQUlfU09aQUlfREVMRVRFLFxyXG59IGZyb20gJy4uL2FjdGlvbnNfc2FnYS90b29sYm94c296YWkuanMnO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIFNBR0FfTElOS19DQUxMLFxyXG4gICAgU0FHQV9MQVlPVVRfQ0FMTCxcclxufSBmcm9tICcuLi9hY3Rpb25zX3NhZ2EvdG9vbGJveHByZXNlbi5qcyc7XHJcblxyXG4vLyA9PT09PT09PT09PT09PT09PT09PVxyXG4vLyDjg6rjg7Pjgq/jg4fjg7zjgr9cclxuLy8gICAgICBbXHJcbi8vICAgICAgICAgIHtcclxuLy8gICAgICAgICAgICAgIGdyb3VwOiDjgrDjg6vjg7zjg5flkI1cclxuLy8gICAgICAgICAgICAgIHNvemFpX2lkOiDntKDmnZBJRFxyXG4vL1xyXG4vLyAgICAgICAgICAgICAgdGV4dDogW1xyXG4vLyAgICAgICAgICAgICAgICAgIHtcclxuLy8gICAgICAgICAgICAgICAgICAgICAgbW9qaTogMeaWh+Wtl1xyXG4vLyAgICAgICAgICAgICAgICAgICAgICBzaXplX2o6IOWtl+ipsOaWueWQkeOCteOCpOOCulxyXG4vLyAgICAgICAgICAgICAgICAgICAgICBzaXplX2c6IOihjOmAgeaWueWQkeOCteOCpOOCulxyXG4vLyAgICAgICAgICAgICAgICAgICAgICBmb250OiDjg5Xjgqnjg7Pjg4jnlarlj7dcclxuLy8gICAgICAgICAgICAgICAgICB9LFxyXG4vLyAgICAgICAgICAgICAgICAgIC4uLi4uXHJcbi8vICAgICAgICAgICAgICBdLFxyXG4vLyAgICAgICAgICB9LFxyXG4vLyAgICAgICAgICAuLi4uLlxyXG4vLyAgICAgIF1cclxuLy8gPT09PT09PT09PT09PT09PT09PT1cclxuZXhwb3J0IGNvbnN0IGxpbmtzID0gKHN0YXRlID0gW10sIGFjdGlvbikgPT4ge1xyXG4gICAgbGV0IGxpc3RzO1xyXG4gICAgbGV0IGxpbms7XHJcblxyXG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xyXG4gICAgY2FzZSBTQUdBX0xJTktfQ0FMTDpcclxuICAgICAgICBsaXN0cyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoYWN0aW9uLnBheWxvYWQubGlua3MpKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGxpc3RzO1xyXG4gICAgICAgIFxyXG4gICAgY2FzZSBTQUdBX1RPT0xCT1hMSU5LX0xJTktfQ1JFQVRFOlxyXG4gICAgICAgIGxpc3RzID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShzdGF0ZSkpO1xyXG5cclxuICAgICAgICBsaW5rID0ge1xyXG4gICAgICAgICAgICBncm91cF9pZDogYWN0aW9uLnBheWxvYWQuZ3JvdXBfaWQsXHJcbiAgICAgICAgICAgIHNvemFpX2lkOiBhY3Rpb24ucGF5bG9hZC5zb3phaV9pZCxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBsaXN0cy5wdXNoKGxpbmspO1xyXG5cclxuICAgICAgICByZXR1cm4gbGlzdHM7XHJcblxyXG4gICAgY2FzZSBTQUdBX1RPT0xCT1hMSU5LX0xJTktfREVMRVRFOlxyXG4gICAgICAgIGxpc3RzID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShzdGF0ZSkpO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3RzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChsaXN0c1tpXS5ncm91cF9pZCA9PSBhY3Rpb24ucGF5bG9hZC5ncm91cF9pZCkge1xyXG4gICAgICAgICAgICAgICAgbGlzdHMuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBsaXN0cztcclxuXHJcbiAgICBjYXNlIFNBR0FfVE9PTEJPWFNPWkFJX1NPWkFJX0RFTEVURTpcclxuICAgICAgICBsaXN0cyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoc3RhdGUpKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAobGlzdHNbaV0uc296YWlfaWQgPT0gYWN0aW9uLnBheWxvYWQuc296YWlfaWQpIHtcclxuICAgICAgICAgICAgICAgIGxpc3RzLnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbGlzdHM7XHJcblxyXG4gICAgY2FzZSBTQUdBX0xBWU9VVF9DQUxMOlxyXG4gICAgICAgIGxpc3RzID0gW107XHJcblxyXG4gICAgICAgIHJldHVybiBsaXN0cztcclxuXHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICAgIHJldHVybiBzdGF0ZTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBUZXh0IH0gZnJvbSAnLi4vbGlicy90ZXh0LmpzJztcclxuaW1wb3J0IHsgUHJlc2VuU296YWkgfSBmcm9tICcuLi9kZWZpbmUuanMnO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIFNBR0FfVE9PTEJPWFNPWkFJX1NPWkFJX1VQREFURSxcclxuICAgIFNBR0FfVE9PTEJPWFNPWkFJX1NPWkFJX0RFTEVURSxcclxuICAgIFNBR0FfVE9PTEJPWFNPWkFJX1NPWkFJX0NSRUFURSxcclxuICAgIFNBR0FfVE9PTEJPWFNPWkFJX1NPWkFJX1NFTEVDVCxcclxuICAgIFNBR0FfVE9PTEJPWFNPWkFJX1NPWkFJX1RPR0dMRSxcclxufSBmcm9tICcuLi9hY3Rpb25zX3NhZ2EvdG9vbGJveHNvemFpLmpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBTQUdBX1NPWkFJX0NBTEwsXHJcbn0gZnJvbSAnLi4vYWN0aW9uc19zYWdhL3Rvb2xib3hwcmVzZW4uanMnO1xyXG5cclxuLy8gPT09PT09PT09PT09PT09PT09PT1cclxuLy8g57Sg5p2Q44OH44O844K/XHJcbi8vICAgICAgW1xyXG4vLyAgICAgICAgICB7XHJcbi8vICAgICAgICAgICAgICBpZDogSURcclxuLy8gICAgICAgICAgICAgIHR5cGU6ICd0ZXh0Jzrjg4bjgq3jgrnjg4ggJ2ltYWdlJzrnlLvlg49cclxuLy8gICAgICAgICAgICAgIHRleHQ6IOODhuOCreOCueODiFxyXG4vLyAgICAgICAgICAgICAgbW9qaU9iakFyeTog5paH5a2X44Kq44OW44K444Kn44Kv44OI6YWN5YiXXHJcbi8vICAgICAgICAgICAgICBpbWFnZTog55S75YOPXHJcbi8vICAgICAgICAgIH0sXHJcbi8vICAgICAgICAgIC4uLi4uXHJcbi8vICAgICAgXVxyXG4vLyA9PT09PT09PT09PT09PT09PT09PVxyXG5leHBvcnQgY29uc3Qgc296YWkgPSAoc3RhdGUgPSBbXSwgYWN0aW9uKSA9PiB7XHJcbiAgICBsZXQgbGlzdHM7XHJcbiAgICBsZXQgc296YWk7XHJcblxyXG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xyXG4gICAgY2FzZSBTQUdBX1NPWkFJX0NBTEw6XHJcbiAgICAgICAgbGlzdHMgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KFByZXNlblNvemFpW2FjdGlvbi5wYXlsb2FkLnBhdHRlcm5dKSk7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGxpc3RzW2ldLnR5cGUgPT0gJ3RleHQnKSB7XHJcbiAgICAgICAgICAgICAgICAvLyDmloflrZfjgqrjg5bjgrjjgqfjgq/jg4jphY3liJfjgpLkvZzmiJDjgZfjgabjgrvjg4Pjg4jjgZnjgotcclxuICAgICAgICAgICAgICAgIGxpc3RzW2ldLm1vamlPYmpBcnkgPSBUZXh0LmNyZWF0ZU1vamlPYmpBcnkobGlzdHNbaV0udGV4dCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIGxpc3RzO1xyXG5cclxuICAgIGNhc2UgU0FHQV9UT09MQk9YU09aQUlfU09aQUlfU0VMRUNUOlxyXG4gICAgICAgIGxpc3RzID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShzdGF0ZSkpO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3RzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxpc3RzW2ldLnNlbGVjdCA9ICcnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAobGlzdHNbaV0uc296YWlfaWQgPT0gYWN0aW9uLnBheWxvYWQuc296YWlfaWQpIHtcclxuICAgICAgICAgICAgICAgIGxpc3RzW2ldLnNlbGVjdCA9ICdvbic7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGxpc3RzO1xyXG5cclxuICAgIGNhc2UgU0FHQV9UT09MQk9YU09aQUlfU09aQUlfVE9HR0xFOlxyXG4gICAgICAgIGxpc3RzID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShzdGF0ZSkpO1xyXG5cclxuICAgICAgICBsZXQgaW5kZXggPSAtMTtcclxuICAgICAgICBsZXQgc2VsZWN0O1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3RzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChsaXN0c1tpXS5zb3phaV9pZCA9PSBhY3Rpb24ucGF5bG9hZC5zb3phaV9pZCkge1xyXG4gICAgICAgICAgICAgICAgaW5kZXggPSBpO1xyXG4gICAgICAgICAgICAgICAgc2VsZWN0ID0gbGlzdHNbaV0uc2VsZWN0O1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChpbmRleCA9PSAtMSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbGlzdHM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbGlzdHNbaV0uc2VsZWN0ID0gJyc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZWxlY3QgPSAoc2VsZWN0ID09ICdvbicpID8gJycgOiAnb24nO1xyXG5cclxuICAgICAgICBsaXN0c1tpbmRleF0uc2VsZWN0ID0gc2VsZWN0O1xyXG5cclxuICAgICAgICByZXR1cm4gbGlzdHM7XHJcblxyXG4gICAgY2FzZSBTQUdBX1RPT0xCT1hTT1pBSV9TT1pBSV9VUERBVEU6XHJcbiAgICAgICAgbGlzdHMgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHN0YXRlKSk7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgLy8gbGlzdHNbaV0uc2VsZWN0ID0gJyc7XHJcblxyXG4gICAgICAgICAgICBpZiAobGlzdHNbaV0uc296YWlfaWQgPT0gYWN0aW9uLnBheWxvYWQuc296YWkuc296YWlfaWQpIHtcclxuICAgICAgICAgICAgICAgIGxpc3RzW2ldLnR5cGUgPSBhY3Rpb24ucGF5bG9hZC5zb3phaS50eXBlO1xyXG4gICAgICAgICAgICAgICAgbGlzdHNbaV0udGV4dCA9IGFjdGlvbi5wYXlsb2FkLnNvemFpLnRleHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8g5paH5a2X44Kq44OW44K444Kn44Kv44OI6YWN5YiX44KS5L2c5oiQ44GX44Gm44K744OD44OI44GZ44KLXHJcbiAgICAgICAgICAgICAgICBsaXN0c1tpXS5tb2ppT2JqQXJ5ID0gVGV4dC5jcmVhdGVNb2ppT2JqQXJ5KGFjdGlvbi5wYXlsb2FkLnNvemFpLnRleHQpO1xyXG5cclxuICAgICAgICAgICAgICAgIGxpc3RzW2ldLmltYWdlID0gYWN0aW9uLnBheWxvYWQuc296YWkuaW1hZ2U7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vIGxpc3RzW2ldLnNlbGVjdCA9ICdvbic7XHJcblxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBsaXN0cztcclxuXHJcbiAgICBjYXNlIFNBR0FfVE9PTEJPWFNPWkFJX1NPWkFJX0RFTEVURTpcclxuICAgICAgICBsaXN0cyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoc3RhdGUpKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBsaXN0c1tpXS5zZWxlY3QgPSAnJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGxpc3RzW2ldLnNvemFpX2lkID09IGFjdGlvbi5wYXlsb2FkLnNvemFpX2lkKSB7XHJcbiAgICAgICAgICAgICAgICBsaXN0cy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGxpc3RzO1xyXG5cclxuICAgIGNhc2UgU0FHQV9UT09MQk9YU09aQUlfU09aQUlfQ1JFQVRFOlxyXG4gICAgICAgIGxpc3RzID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShzdGF0ZSkpO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3RzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxpc3RzW2ldLnNlbGVjdCA9ICcnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc296YWkgPSB7XHJcbiAgICAgICAgICAgIHNvemFpX2lkOiBhY3Rpb24ucGF5bG9hZC5zb3phaV9pZCxcclxuICAgICAgICAgICAgdHlwZTogYWN0aW9uLnBheWxvYWQudHlwZSxcclxuICAgICAgICAgICAgdGV4dDogYWN0aW9uLnBheWxvYWQudGV4dCxcclxuXHJcbiAgICAgICAgICAgIC8vIOaWh+Wtl+OCquODluOCuOOCp+OCr+ODiOmFjeWIl+OCkuS9nOaIkOOBl+OBpuOCu+ODg+ODiOOBmeOCi1xyXG4gICAgICAgICAgICBtb2ppT2JqQXJ5OiBUZXh0LmNyZWF0ZU1vamlPYmpBcnkoYWN0aW9uLnBheWxvYWQudGV4dCksXHJcblxyXG4gICAgICAgICAgICBpbWFnZTogYWN0aW9uLnBheWxvYWQuaW1hZ2UsXHJcblxyXG4gICAgICAgICAgICBzZWxlY3Q6ICdvbicsXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgbGlzdHMucHVzaChzb3phaSk7XHJcblxyXG4gICAgICAgIHJldHVybiBsaXN0cztcclxuXHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICAgIHJldHVybiBzdGF0ZTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQge1xyXG4gICAgU0FHQV9UT09MQk9YX01PVkVFTkQsXHJcbn0gZnJvbSAnLi4vYWN0aW9uc19zYWdhL3Rvb2xib3guanMnO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIFNBR0FfU0VMRUNUQk9YX0JPWF9TRUxFQ1QsXHJcbiAgICBTQUdBX1NFTEVDVEJPWF9CT1hfTk9OU0VMRUNULFxyXG59IGZyb20gJy4uL2FjdGlvbnNfc2FnYS9zZWxlY3Rib3guanMnO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIFNBR0FfRURJVE9OT0ZGX0NIQU5HRSxcclxufSBmcm9tICcuLi9hY3Rpb25zX3NhZ2EvdG9vbGJveHByZXNlbi5qcyc7XHJcblxyXG4vLyA9PT09PT09PT09PT09PT09PT09PVxyXG4vLyDjg4Tjg7zjg6vjg5zjg4Pjgq/jgrnjg4fjg7zjgr9cclxuLy8gICAgICBbXHJcbi8vICAgICAgICAgIHtcclxuLy8gICAgICAgICAgICAgIGlkOiBJRCxcclxuLy8gICAgICAgICAgICAgIHR5cGU6ICdzY2FsZSc65ouh5aSn57iu5bCP44Oc44OD44Kv44K5XHJcbi8vICAgICAgICAgICAgICB4OiDjg4Tjg7zjg6vjg5zjg4Pjgq/jgrnjga7lt6bkuIrluqfmqJkgWCAocHgpXHJcbi8vICAgICAgICAgICAgICB5OiDjg4Tjg7zjg6vjg5zjg4Pjgq/jgrnjga7lt6bkuIrluqfmqJkgWSAocHgpXHJcbi8vICAgICAgICAgICAgICB3OiDjg4Tjg7zjg6vjg5zjg4Pjgq/jgrnjga7luYXvvIhweClcclxuLy8gICAgICAgICAgICAgIGg6IOODhOODvOODq+ODnOODg+OCr+OCueOBrumrmOOBlSAocHgpXHJcbi8vICAgICAgICAgICAgICB2aWV3OiAndHJ1ZSc66KGo56S6ICdmYWxzZSc6IOmdnuihqOekulxyXG4vLyAgICAgICAgICB9XHJcbi8vICAgICAgXVxyXG4vLyA9PT09PT09PT09PT09PT09PT09PVxyXG5leHBvcnQgY29uc3QgdG9vbGJveHMgPSAoc3RhdGUgPSBbXHJcbiAgICB7XHJcbiAgICAgICAgdG9vbGJveF9pZDogMSxcclxuICAgICAgICB0eXBlOiAnc2NhbGUnLFxyXG4gICAgICAgIHg6IDAsXHJcbiAgICAgICAgeTogMCxcclxuICAgICAgICB3OiAyMDAsXHJcbiAgICAgICAgaDogNDAsXHJcbiAgICAgICAgdmlldzogJ3RydWUnLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICB0b29sYm94X2lkOiAyLFxyXG4gICAgICAgIHR5cGU6ICdib3hkYXRhJyxcclxuICAgICAgICB4OiAwLFxyXG4gICAgICAgIHk6IDAsXHJcbiAgICAgICAgdzogMjAwLFxyXG4gICAgICAgIGg6IDE0MCxcclxuICAgICAgICB2aWV3OiAndHJ1ZScsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIHRvb2xib3hfaWQ6IDMsXHJcbiAgICAgICAgdHlwZTogJ3RleHRkYXRhJyxcclxuICAgICAgICB4OiAwLFxyXG4gICAgICAgIHk6IDAsXHJcbiAgICAgICAgdzogMjAwLFxyXG4gICAgICAgIGg6IDE2MCxcclxuICAgICAgICB2aWV3OiAnZmFsc2UnLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICB0b29sYm94X2lkOiA0LFxyXG4gICAgICAgIHR5cGU6ICdzb3phaScsXHJcbiAgICAgICAgeDogMCxcclxuICAgICAgICB5OiAwLFxyXG4gICAgICAgIHc6IDIwMCxcclxuICAgICAgICBoOiA0MDAsXHJcbiAgICAgICAgdmlldzogJ3RydWUnLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICB0b29sYm94X2lkOiA1LFxyXG4gICAgICAgIHR5cGU6ICdsaW5rJyxcclxuICAgICAgICB4OiAwLFxyXG4gICAgICAgIHk6IDAsXHJcbiAgICAgICAgdzogMjAwLFxyXG4gICAgICAgIGg6IDQ3MCxcclxuICAgICAgICB2aWV3OiAnZmFsc2UnLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICB0b29sYm94X2lkOiA2LFxyXG4gICAgICAgIHR5cGU6ICdwcmVzZW4nLFxyXG4gICAgICAgIHg6IDAsXHJcbiAgICAgICAgeTogMCxcclxuICAgICAgICB3OiAyMDAsXHJcbiAgICAgICAgaDogMTAwLFxyXG4gICAgICAgIHZpZXc6ICd0cnVlJyxcclxuICAgIH0sXHJcbl0sIGFjdGlvbikgPT4ge1xyXG4gICAgbGV0IHRvb2xib3hzO1xyXG5cclxuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcclxuICAgIGNhc2UgU0FHQV9UT09MQk9YX01PVkVFTkQ6XHJcbiAgICAgICAgdG9vbGJveHMgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHN0YXRlKSk7XHJcblxyXG4gICAgICAgIGxldCBpO1xyXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB0b29sYm94cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAodG9vbGJveHNbaV0udG9vbGJveF9pZCA9PSBhY3Rpb24ucGF5bG9hZC50b29sYm94X2lkKSB7XHJcbiAgICAgICAgICAgICAgICB0b29sYm94c1tpXS54ID0gYWN0aW9uLnBheWxvYWQueDtcclxuICAgICAgICAgICAgICAgIHRvb2xib3hzW2ldLnkgPSBhY3Rpb24ucGF5bG9hZC55O1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIOacgOWJjemdouOBq+OCguOBo+OBpuOBj+OCi1xyXG4gICAgICAgIGNvbnN0IHRvb2xib3ggPSB0b29sYm94cy5zbGljZShpLCBpICsgMSk7XHJcbiAgICAgICAgdG9vbGJveHMuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgIHRvb2xib3hzID0gdG9vbGJveHMuY29uY2F0KHRvb2xib3gpO1xyXG5cclxuICAgICAgICByZXR1cm4gdG9vbGJveHM7XHJcblxyXG4gICAgY2FzZSBTQUdBX1NFTEVDVEJPWF9CT1hfU0VMRUNUOiAgIC8vIOODnOODg+OCr+OCueOCkumBuOaKnuOBl+OBn+WgtOWQiFxyXG4gICAgICAgIHRvb2xib3hzID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShzdGF0ZSkpO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRvb2xib3hzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmICh0b29sYm94c1tpXS50eXBlID09ICd0ZXh0ZGF0YScpIHtcclxuICAgICAgICAgICAgICAgIGlmIChhY3Rpb24ucGF5bG9hZC50eXBlID09ICd0ZXh0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRvb2xib3hzW2ldLnZpZXcgPSAndHJ1ZSc7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRvb2xib3hzW2ldLnZpZXcgPSAnZmFsc2UnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0b29sYm94cztcclxuXHJcbiAgICBjYXNlIFNBR0FfU0VMRUNUQk9YX0JPWF9OT05TRUxFQ1Q6ICAgLy8g44Oc44OD44Kv44K544Gu6YG45oqe44KS6Kej6Zmk44GX44Gf5aC05ZCIXHJcbiAgICAgICAgdG9vbGJveHMgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHN0YXRlKSk7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdG9vbGJveHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKHRvb2xib3hzW2ldLnR5cGUgPT0gJ3RleHRkYXRhJykge1xyXG4gICAgICAgICAgICAgICAgdG9vbGJveHNbaV0udmlldyA9ICdmYWxzZSc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRvb2xib3hzO1xyXG5cclxuICAgIGNhc2UgU0FHQV9FRElUT05PRkZfQ0hBTkdFOiAgICAgLy8g57eo6ZuG54q25oWL44GuT04vT0ZG44GM5YiH44KK5pu/44GI44KJ44KM44GfXHJcbiAgICAgICAgdG9vbGJveHMgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHN0YXRlKSk7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdG9vbGJveHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGFjdGlvbi5wYXlsb2FkLm9ub2ZmID09ICdvbicpIHtcclxuICAgICAgICAgICAgICAgIHRvb2xib3hzW2ldLnZpZXcgPSAndHJ1ZSc7XHJcbiAgICAgICAgICAgICAgICBpZiAodG9vbGJveHNbaV0udHlwZSA9PSAnbGluaycpIHtcclxuICAgICAgICAgICAgICAgICAgICB0b29sYm94c1tpXS52aWV3ID0gJ2ZhbHNlJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRvb2xib3hzW2ldLnZpZXcgPSAnZmFsc2UnO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRvb2xib3hzW2ldLnR5cGUgPT0gJ3ByZXNlbicgfHwgdG9vbGJveHNbaV0udHlwZSA9PSAnc2NhbGUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9vbGJveHNbaV0udmlldyA9ICd0cnVlJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRvb2xib3hzO1xyXG5cclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgcmV0dXJuIHN0YXRlO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7XHJcbiAgICBTQUdBX1NFTEVDVEJPWF9CT1hfTk9OU0VMRUNULFxyXG4gICAgU0FHQV9TRUxFQ1RCT1hfQk9YX1NFTEVDVCxcclxufSBmcm9tICcuLi9hY3Rpb25zX3NhZ2Evc2VsZWN0Ym94LmpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBTQUdBX1RPT0xCT1hCT1hEQVRBX0JPWERBVEFfVVBEQVRFLFxyXG4gICAgU0FHQV9UT09MQk9YQk9YREFUQV9CT1hEQVRBX0RFTEVURSxcclxuICAgIFNBR0FfVE9PTEJPWEJPWERBVEFfQk9YREFUQV9DUkVBVEUsXHJcbn0gZnJvbSAnLi4vYWN0aW9uc19zYWdhL3Rvb2xib3hib3hkYXRhLmpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBTQUdBX0NPTlRFWFRNRU5VX05FV0JPWFRFWFQsXHJcbiAgICBTQUdBX0NPTlRFWFRNRU5VX05FV0JPWElNQUdFLFxyXG59IGZyb20gJy4uL2FjdGlvbnNfc2FnYS9jb250ZXh0bWVudS5qcyc7XHJcblxyXG5cclxuLy8gPT09PT09PT09PT09PT09PT09PT1cclxuLy8gYm9444OV44Kp44O844Kr44K55oOF5aCxXHJcbi8vICAgICAge1xyXG4vLyAgICAgICAgICBib3hfaWQ6IOODleOCqeODvOOCq+OCueOBleOCjOOBn+ODnOODg+OCr+OCueOBrklE44CB5pyq44OV44Kp44O844Kr44K544GvIG51bGxcclxuLy8gICAgICAgICAgZ3JvdXBfaWQ6IOODleOCqeODvOOCq+OCueOBleOCjOOBn+ODnOODg+OCr+OCueOBruOCsOODq+ODvOODl+WQjVxyXG4vLyAgICAgICAgICBncm91cF9ubzog44OV44Kp44O844Kr44K544GV44KM44Gf44Oc44OD44Kv44K544Gu44Kw44Or44O844OX5YaF44GuTm9cclxuLy8gICAgICAgICAgdHlwZTogJ3RleHQnOuODhuOCreOCueODiCAnaW1hZ2UnOueUu+WDjyAndGl0bGUnOuimi+WHuuOBlyAnaGFpa2VpJzrog4zmma8gJ2xpbmUnOue9q+e3miAncmVjdCc655+p5b2i57eaXHJcbi8vICAgICAgfVxyXG4vLyA9PT09PT09PT09PT09PT09PT09PVxyXG5leHBvcnQgY29uc3QgZm9jdXNib3ggPSAoc3RhdGUgPSB7Ym94X2lkOiAwLCBncm91cF9pZDogMCwgZ3JvdXBfbm86IDAsIHR5cGU6ICcnfSwgYWN0aW9uKSA9PiB7XHJcbiAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XHJcbiAgICBjYXNlIFNBR0FfU0VMRUNUQk9YX0JPWF9OT05TRUxFQ1Q6ICAgLy8g5YWo44Gm44Gu6YG45oqe44KS6Kej6Zmk44GX44Gf5aC05ZCIXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgYm94X2lkOiAwLFxyXG4gICAgICAgICAgICBncm91cF9pZDogMCxcclxuICAgICAgICAgICAgYm94X25vOiAwLFxyXG4gICAgICAgICAgICB0eXBlOiAnJyxcclxuICAgICAgICB9O1xyXG5cclxuICAgIGNhc2UgU0FHQV9TRUxFQ1RCT1hfQk9YX1NFTEVDVDogICAvLyDjg5zjg4Pjgq/jgrnjgpLpgbjmip7jgZfjgZ/loLTlkIhcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBib3hfaWQ6ICAgYWN0aW9uLnBheWxvYWQuYm94X2lkLFxyXG4gICAgICAgICAgICBncm91cF9pZDogYWN0aW9uLnBheWxvYWQuZ3JvdXBfaWQsXHJcbiAgICAgICAgICAgIGdyb3VwX25vOiBhY3Rpb24ucGF5bG9hZC5ncm91cF9ubyxcclxuICAgICAgICAgICAgdHlwZTogICAgIGFjdGlvbi5wYXlsb2FkLnR5cGUsXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICBjYXNlIFNBR0FfVE9PTEJPWEJPWERBVEFfQk9YREFUQV9VUERBVEU6ICAgIC8vIOODnOODg+OCr+OCueaDheWgseOCkuabtOaWsOOBl+OBn+WgtOWQiFxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGJveF9pZDogICBhY3Rpb24ucGF5bG9hZC5ib3guYm94X2lkLFxyXG4gICAgICAgICAgICBncm91cF9pZDogYWN0aW9uLnBheWxvYWQuYm94Lmdyb3VwX2lkLFxyXG4gICAgICAgICAgICBncm91cF9ubzogYWN0aW9uLnBheWxvYWQuYm94Lmdyb3VwX25vLFxyXG4gICAgICAgICAgICB0eXBlOiAgICAgYWN0aW9uLnBheWxvYWQuYm94LnR5cGUsXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICBjYXNlIFNBR0FfVE9PTEJPWEJPWERBVEFfQk9YREFUQV9ERUxFVEU6ICAgIC8vIOODnOODg+OCr+OCueOCkuWJiumZpOOBl+OBn+WgtOWQiFxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGJveF9pZDogMCxcclxuICAgICAgICAgICAgZ3JvdXBfaWQ6IDAsXHJcbiAgICAgICAgICAgIGdyb3VwX25vOiAwLFxyXG4gICAgICAgICAgICB0eXBlOiAnJyxcclxuICAgICAgICB9O1xyXG5cclxuICAgIGNhc2UgU0FHQV9UT09MQk9YQk9YREFUQV9CT1hEQVRBX0NSRUFURTogICAgLy8g44Oc44OD44Kv44K544KS5paw6KaP5L2c5oiQ44GX44Gf5aC05ZCIXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgYm94X2lkOiAgIGFjdGlvbi5wYXlsb2FkLmJveC5ib3hfaWQsXHJcbiAgICAgICAgICAgIGdyb3VwX2lkOiBhY3Rpb24ucGF5bG9hZC5ib3guZ3JvdXBfaWQsXHJcbiAgICAgICAgICAgIGdyb3VwX25vOiBhY3Rpb24ucGF5bG9hZC5ib3guZ3JvdXBfbm8sXHJcbiAgICAgICAgICAgIHR5cGU6ICAgICBhY3Rpb24ucGF5bG9hZC5ib3gudHlwZSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIFxyXG4gICAgY2FzZSBTQUdBX0NPTlRFWFRNRU5VX05FV0JPWFRFWFQ6ICAgICAgICAgICAvLyDjgrPjg7Pjg4bjgq3jgrnjg4jjg6Hjg4vjg6Xjga7jgIzmlrDopo/kvZzmiJAg44OG44Kt44K544OI44Oc44OD44Kv44K544CNXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgYm94X2lkOiAgIGFjdGlvbi5wYXlsb2FkLmJveF9pZCxcclxuICAgICAgICAgICAgZ3JvdXBfaWQ6IGFjdGlvbi5wYXlsb2FkLmdyb3VwX2lkLFxyXG4gICAgICAgICAgICBncm91cF9ubzogYWN0aW9uLnBheWxvYWQuZ3JvdXBfbm8sXHJcbiAgICAgICAgICAgIHR5cGU6ICAgICBhY3Rpb24ucGF5bG9hZC50eXBlLFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgY2FzZSBTQUdBX0NPTlRFWFRNRU5VX05FV0JPWElNQUdFOiAgICAgICAgICAgLy8g44Kz44Oz44OG44Kt44K544OI44Oh44OL44Ol44Gu44CM5paw6KaP5L2c5oiQIOeUu+WDj+ODnOODg+OCr+OCueOAjVxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGJveF9pZDogICBhY3Rpb24ucGF5bG9hZC5ib3hfaWQsXHJcbiAgICAgICAgICAgIGdyb3VwX2lkOiBhY3Rpb24ucGF5bG9hZC5ncm91cF9pZCxcclxuICAgICAgICAgICAgZ3JvdXBfbm86IGFjdGlvbi5wYXlsb2FkLmdyb3VwX25vLFxyXG4gICAgICAgICAgICB0eXBlOiAgICAgYWN0aW9uLnBheWxvYWQudHlwZSxcclxuICAgICAgICB9O1xyXG5cclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgcmV0dXJuIHN0YXRlO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IFphaHlvIH0gZnJvbSAnLi4vbGlicy96YWh5by5qcyc7XHJcblxyXG5pbXBvcnQgeyBUZXh0R3JpZCB9IGZyb20gJy4uL2xpYnMvdGV4dGdyaWQuanMnO1xyXG5pbXBvcnQgeyBCb3ggfSBmcm9tICcuLi9saWJzL2JveC5qcyc7XHJcblxyXG5pbXBvcnQgeyBQcmVzZW5Cb3ggfSBmcm9tICcuLi9kZWZpbmUuanMnO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIFNBR0FfU0VMRUNUQk9YX0VESVRCT1hfTU9WRUVORCxcclxuICAgIFNBR0FfU0VMRUNUQk9YX0VESVRCT1hfQ0hBTkdFU0laRSxcclxufSBmcm9tICcuLi9hY3Rpb25zX3NhZ2Evc2VsZWN0Ym94LmpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBTQUdBX1RPT0xCT1hCT1hEQVRBX0JPWERBVEFfVVBEQVRFLFxyXG4gICAgU0FHQV9UT09MQk9YQk9YREFUQV9CT1hEQVRBX0RFTEVURSxcclxuICAgIFNBR0FfVE9PTEJPWEJPWERBVEFfQk9YREFUQV9DUkVBVEUsXHJcbn0gZnJvbSAnLi4vYWN0aW9uc19zYWdhL3Rvb2xib3hib3hkYXRhLmpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBTQUdBX1RPT0xCT1hURVhUREFUQV9URVhUREFUQV9VUERBVEUsXHJcbn0gZnJvbSAnLi4vYWN0aW9uc19zYWdhL3Rvb2xib3h0ZXh0ZGF0YS5qcyc7XHJcblxyXG5pbXBvcnQge1xyXG4gICAgU0FHQV9UT09MQk9YU09aQUlfU09aQUlfREVMRVRFLFxyXG59IGZyb20gJy4uL2FjdGlvbnNfc2FnYS90b29sYm94c296YWkuanMnO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIFNBR0FfTkFHQVNISVJFU1VMVF9DUkVBVEUsXHJcbiAgICBTQUdBX05BR0FTSElfUkVNT1ZFLFxyXG4gICAgU0FHQV9OQUdBU0hJX0lNQUdFLFxyXG4gICAgU0FHQV9OQUdBU0hJUkVTVUxUX0FGVVJFLFxyXG59IGZyb20gJy4uL2FjdGlvbnNfc2FnYS9uYWdhc2hpLmpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBTQUdBX0NPTlRFWFRNRU5VX05FV0JPWFRFWFQsXHJcbiAgICBTQUdBX0NPTlRFWFRNRU5VX05FV0JPWElNQUdFLFxyXG4gICAgU0FHQV9DT05URVhUTUVOVV9CT1hUT0ZST05ULFxyXG4gICAgU0FHQV9DT05URVhUTUVOVV9CT1hUT0JBQ0ssXHJcbn0gZnJvbSAnLi4vYWN0aW9uc19zYWdhL2NvbnRleHRtZW51LmpzJztcclxuXHJcblxyXG5pbXBvcnQge1xyXG4gICAgU0FHQV9MQVlPVVRfQ0FMTCxcclxufSBmcm9tICcuLi9hY3Rpb25zX3NhZ2EvdG9vbGJveHByZXNlbi5qcyc7XHJcblxyXG5cclxuLy8gPT09PT09PT09PT09PT09PT09PT1cclxuLy8g44Oc44OD44Kv44K544OH44O844K/XHJcbi8vICAgICAgW1xyXG4vLyAgICAgICAgICB7XHJcbi8vICAgICAgICAgICAgICBib3hfaWQ6IElEXHJcbi8vICAgICAgICAgICAgICBncm91cF9pZDog44Kw44Or44O844OXSURcclxuLy8gICAgICAgICAgICAgIGdyb3VwX25vOiDjgrDjg6vjg7zjg5flhoXjga7nlarlj7dcclxuLy8gICAgICAgICAgICAgIHR5cGU6ICd0ZXh0JzogIOODhuOCreOCueODiOODnOODg+OCr+OCuVxyXG4vLyAgICAgICAgICAgICAgICAgICAgJ2ltYWdlJzog55S75YOP44Oc44OD44Kv44K5XHJcbi8vICAgICAgICAgICAgICAgICAgICAndGl0bGUnOiDopovlh7rjgZdcclxuLy8gICAgICAgICAgICAgICAgICAgICdsaW5lJzogIOe9q+e3mu+8iOe4puOBvuOBn+OBr+aoquOBrue3mu+8iVxyXG4vLyAgICAgICAgICAgICAgICAgICAgJ3JlY3QnOiAg55+p5b2i57eaXHJcbi8vICAgICAgICAgICAgICB4MTog44Oc44OD44Kv44K544Gu5Y+z5LiK5bqn5qiZIFjvvIjlj7PkuIrln7rngrnvvIlcclxuLy8gICAgICAgICAgICAgIHkxOiDjg5zjg4Pjgq/jgrnjga7lj7PkuIrluqfmqJkgWe+8iOWPs+S4iuWfuueCue+8iVxyXG4vLyAgICAgICAgICAgICAgeDI6IOODnOODg+OCr+OCueOBruW3puS4i+W6p+aomSBY77yI5Y+z5LiK5Z+654K577yJXHJcbi8vICAgICAgICAgICAgICB5Mjog44Oc44OD44Kv44K544Gu5bem5LiL5bqn5qiZIFnvvIjlj7PkuIrln7rngrnvvIlcclxuLy9cclxuLy8gICAgICAgICAgICAgIHRleHQ6IHtcclxuLy8gICAgICAgICAgICAgICAgICBrdW1paG9rbzogJ3RhdGUnOue4piAneW9rbyc65qiqXHJcbi8vICAgICAgICAgICAgICAgICAgcGFkZGluZ19qczog44OR44OH44Kj44Oz44Kw5YCk77yI5a2X6Kmw5pa55ZCRIOmWi+Wni++8iVxyXG4vLyAgICAgICAgICAgICAgICAgIHBhZGRpbmdfamU6IOODkeODh+OCo+ODs+OCsOWcsO+8iOWtl+ipsOaWueWQkSDntYLkuobvvIlcclxuLy8gICAgICAgICAgICAgICAgICBwYWRkaW5nX2dzOiDjg5Hjg4fjgqPjg7PjgrDlgKTvvIjooYzpgIHmlrnlkJEg6ZaL5aeL77yJXHJcbi8vICAgICAgICAgICAgICAgICAgcGFkZGluZ19nZTog44OR44OH44Kj44Oz44Kw5YCk77yI6KGM6YCB5pa55ZCRIOe1guS6hu+8iVxyXG4vLyAgICAgICAgICAgICAgICAgIHNpemVfajog5paH5a2X44K144Kk44K677yI5a2X6Kmw5pa55ZCR77yJXHJcbi8vICAgICAgICAgICAgICAgICAgc2l6ZV9nOiDmloflrZfjgrXjgqTjgrrvvIjooYzpgIHmlrnlkJHvvIlcclxuLy8gICAgICAgICAgICAgICAgICBneW9rYW46IOihjOmWk+OCteOCpOOCulxyXG4vLyAgICAgICAgICAgICAgICAgIGZvbnQ6IOODleOCqeODs+ODiOeVquWPt1xyXG4vL1xyXG4vLyAgICAgICAgICAgICAgICAgIGdyaWQ6IFtbeCx5XS4uLl0g5paH5a2X44Kw44Oq44OD44OJ5Lit5b+D5bqn5qiZ6YWN5YiXXHJcbi8vICAgICAgICAgICAgICAgICAgcmVzdWx0OiBbXHJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vamk6ICfjgYInICAg5paH5a2XXHJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplX2o6IOaWh+Wtl+OCteOCpOOCuu+8iDA644OH44OV44Kp44Or44OI44K144Kk44K677yJXHJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplX2c6IOaWh+Wtl+OCteOCpOOCuu+8iDA644OH44OV44Kp44Or44OI44K144Kk44K677yJXHJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqOiDkuK3lv4PluqfmqJnvvIjlrZfoqbDmlrnlkJHvvIlcclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGc6IOS4reW/g+W6p+aome+8iOihjOmAgeaWueWQke+8iVxyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi4uLi5cclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXHJcbi8vICAgICAgICAgICAgICAgICAgYWZ1cmU6IOOBguOBteOCjOaWh+Wtl+aVsFxyXG4vLyAgICAgICAgICAgICAgfVxyXG4vL1xyXG4vLyAgICAgICAgICAgICAgaW1hZ2U6IHtcclxuLy8gICAgICAgICAgICAgICAgICB1cmw6IOeUu+WDj+OBruODquODs+OCr+WFiO+8iOODleODq+ODkeOCue+8iVxyXG4vLyAgICAgICAgICAgICAgfVxyXG4vL1xyXG4vLyAgICAgICAgICAgICAgdGl0bGU6IHtcclxuLy8gICAgICAgICAgICAgICAgICBrdW1paG9rbzogJ3RhdGUnOue4piAneW9rbyc65qiqXHJcbi8vICAgICAgICAgICAgICAgICAgcGFkZGluZ19qczog44OR44OH44Kj44Oz44Kw5YCk77yI5a2X6Kmw5pa55ZCRIOmWi+Wni++8iVxyXG4vLyAgICAgICAgICAgICAgICAgIHBhZGRpbmdfamU6IOODkeODh+OCo+ODs+OCsOWcsO+8iOWtl+ipsOaWueWQkSDntYLkuobvvIlcclxuLy8gICAgICAgICAgICAgICAgICBwYWRkaW5nX2dzOiDjg5Hjg4fjgqPjg7PjgrDlgKTvvIjooYzpgIHmlrnlkJEg6ZaL5aeL77yJXHJcbi8vICAgICAgICAgICAgICAgICAgcGFkZGluZ19nZTog44OR44OH44Kj44Oz44Kw5YCk77yI6KGM6YCB5pa55ZCRIOe1guS6hu+8iVxyXG4vLyAgICAgICAgICAgICAgICAgIGZvbnQ6IOODleOCqeODs+ODiOeVquWPt1xyXG4vLyAgICAgICAgICAgICAgICAgIGtpbmQ6IOijhemjvueorumhnlxyXG4vL1xyXG4vLyAgICAgICAgICAgICAgICAgIHJlc3VsdDogW1xyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9qaTogJ+OBgicgICDmloflrZdcclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZV9qOiDmloflrZfjgrXjgqTjgrrvvIgwOuODh+ODleOCqeODq+ODiOOCteOCpOOCuu+8iVxyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplX2c6IOaWh+Wtl+OCteOCpOOCuu+8iDA644OH44OV44Kp44Or44OI44K144Kk44K677yJXHJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGo6IOS4reW/g+W6p+aome+8iOWtl+ipsOaWueWQke+8iVxyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnOiDkuK3lv4PluqfmqJnvvIjooYzpgIHmlrnlkJHvvIlcclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLi4uLlxyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgXVxyXG4vLyAgICAgICAgICAgICAgfVxyXG4vL1xyXG4vLyAgICAgICAgICAgICAgaGFpa2VpOiB7XHJcbi8vICAgICAgICAgICAgICAgICAga2luZDog56iu6aGeXHJcbi8vICAgICAgICAgICAgICB9XHJcbi8vXHJcbi8vICAgICAgICAgICAgICBsaW5lOiB7XHJcbi8vICAgICAgICAgICAgICAgICAgaG9rbzogJ3RhdGUnOue4piAneW9rbyc65qiqXHJcbi8vICAgICAgICAgICAgICAgICAgcGFkZGluZ19zOiDjg5Hjg4fjgqPjg7PjgrDlgKTvvIjplovlp4vvvIlcclxuLy8gICAgICAgICAgICAgICAgICBwYWRkaW5nX2U6IOODkeODh+OCo+ODs+OCsOWApO+8iOe1guS6hu+8iVxyXG4vLyAgICAgICAgICAgICAgICAgIHdpZHRoOiDnvavnt5rjga7lpKrjgZVcclxuLy8gICAgICAgICAgICAgICAgICBraW5kOiDnqK7poZ5cclxuLy8gICAgICAgICAgICAgIH1cclxuLy9cclxuLy8gICAgICAgICAgICAgIHJlY3Q6IHtcclxuLy8gICAgICAgICAgICAgICAgICBsZWZ0OiAnb24nIG9yICdvZmYnXHJcbi8vICAgICAgICAgICAgICAgICAgcmlnaHQ6ICdvbicgb3IgJ29mZidcclxuLy8gICAgICAgICAgICAgICAgICB0b3A6ICdvbicgb3IgJ29mZidcclxuLy8gICAgICAgICAgICAgICAgICBib3R0b206ICdvbicgb3IgJ29mZidcclxuLy8gICAgICAgICAgICAgICAgICB3aWR0aDog572r57ea44Gu5aSq44GVXHJcbi8vICAgICAgICAgICAgICAgICAga2luZDog56iu6aGeXHJcbi8vICAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgIH1cclxuLy8gICAgICBdXHJcbi8vXHJcbi8vID09PT09PT09PT09PT09PT09PT09XHJcbmV4cG9ydCBjb25zdCBib3hzID0gKHN0YXRlID0gW10sIGFjdGlvbikgPT4ge1xyXG4gICAgbGV0IGJveHM7XHJcbiAgICBsZXQgYm94O1xyXG4gICAgbGV0IGdyb3VwX2lkO1xyXG4gICAgbGV0IGdyb3VwX25vX2FyeTtcclxuICAgIGxldCBhcmVhc2l6ZV9qLCBhcmVhc2l6ZV9nO1xyXG5cclxuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcclxuICAgIGNhc2UgU0FHQV9MQVlPVVRfQ0FMTDogIC8vIOODrOOCpOOCouOCpuODiOWRvOOBs+WHuuOBl++8iGRlZmluZS5qcyDlrprnvqnjga7jgoLjga7jga7lkbzjgbPlh7rjgZfvvIlcclxuICAgICAgICBib3hzID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShQcmVzZW5Cb3hbYWN0aW9uLnBheWxvYWQucGF0dGVybl0pKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBib3hzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoYm94c1tpXS50eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ3RleHQnOlxyXG4gICAgICAgICAgICAgICAgLy8g44OG44Kt44K544OI44Kw44Oq44OD44OJXHJcbiAgICAgICAgICAgICAgICBpZiAoYm94c1tpXS50ZXh0Lmt1bWlob2tvID09ICd0YXRlJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGFyZWFzaXplX2ogPSBib3hzW2ldLnkyIC0gYm94c1tpXS55MTtcclxuICAgICAgICAgICAgICAgICAgICBhcmVhc2l6ZV9nID0gYm94c1tpXS54MiAtIGJveHNbaV0ueDE7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGFyZWFzaXplX2ogPSBib3hzW2ldLngyIC0gYm94c1tpXS54MTtcclxuICAgICAgICAgICAgICAgICAgICBhcmVhc2l6ZV9nID0gYm94c1tpXS55MiAtIGJveHNbaV0ueTE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ZXh0Z3JpZCA9IFRleHRHcmlkLmdldFRleHRHcmlkQXJ5KFxyXG4gICAgICAgICAgICAgICAgICAgIGFyZWFzaXplX2osICAvLyDjgqjjg6rjgqLjgrXjgqTjgrrvvIjlrZfoqbDjgoHmlrnlkJHvvIlcclxuICAgICAgICAgICAgICAgICAgICBhcmVhc2l6ZV9nLCAgLy8g44Ko44Oq44Ki44K144Kk44K677yI6KGM6YCB44KK5pa55ZCR77yJXHJcbiAgICAgICAgICAgICAgICAgICAgYm94c1tpXS50ZXh0LnBhZGRpbmdfanMsICAvLyDjg5Hjg4fjgqPjg7PjgrDlgKTvvIjlrZfoqbDjgoHmlrnlkJEg6ZaL5aeL77yJXHJcbiAgICAgICAgICAgICAgICAgICAgYm94c1tpXS50ZXh0LnBhZGRpbmdfamUsICAvLyDjg5Hjg4fjgqPjg7PjgrDlgKTvvIjlrZfoqbDjgoHmlrnlkJEg57WC5LqG77yJXHJcbiAgICAgICAgICAgICAgICAgICAgYm94c1tpXS50ZXh0LnBhZGRpbmdfZ3MsICAvLyDjg5Hjg4fjgqPjg7PjgrDlgKTvvIjooYzpgIHjgormlrnlkJEg6ZaL5aeL77yJXHJcbiAgICAgICAgICAgICAgICAgICAgYm94c1tpXS50ZXh0LnBhZGRpbmdfZ2UsICAvLyDjg5Hjg4fjgqPjg7PjgrDlgKTvvIjooYzpgIHjgormlrnlkJEg57WC5LqG77yJXHJcbiAgICAgICAgICAgICAgICAgICAgYm94c1tpXS50ZXh0LnNpemVfaiwgIC8vIOODhuOCreOCueODiOOCteOCpOOCuu+8iOWtl+ipsOOCgeaWueWQke+8iVxyXG4gICAgICAgICAgICAgICAgICAgIGJveHNbaV0udGV4dC5zaXplX2csICAvLyDjg4bjgq3jgrnjg4jjgrXjgqTjgrrvvIjooYzpgIHjgormlrnlkJHvvIlcclxuICAgICAgICAgICAgICAgICAgICBib3hzW2ldLnRleHQuZ3lva2FuLCAgLy8g6KGM6ZaTXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgYm94c1tpXS50ZXh0LmdyaWQgPSB0ZXh0Z3JpZDtcclxuICAgICAgICAgICAgICAgIGJveHNbaV0udGV4dC5yZXN1bHQgPSBbXTtcclxuICAgICAgICAgICAgICAgIGJveHNbaV0udGV4dC5hZnVyZSA9ICcnO1xyXG5cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgY2FzZSAnaW1hZ2UnOlxyXG4gICAgICAgICAgICAgICAgYm94c1tpXS5pbWFnZS51cmwgPSAnJztcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBib3hzO1xyXG5cclxuICAgIGNhc2UgU0FHQV9TRUxFQ1RCT1hfRURJVEJPWF9NT1ZFRU5EOiAgICAvLyDpgbjmip7jg5zjg4Pjgq/jgrnjga7np7vli5XlrozkuobmmYJcclxuICAgICAgICBib3hzID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShzdGF0ZSkpO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJveHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGJveHNbaV0uYm94X2lkID09IGFjdGlvbi5wYXlsb2FkLmJveF9pZCkge1xyXG4gICAgICAgICAgICAgICAgYm94c1tpXS54MSA9IGFjdGlvbi5wYXlsb2FkLngxO1xyXG4gICAgICAgICAgICAgICAgYm94c1tpXS55MSA9IGFjdGlvbi5wYXlsb2FkLnkxO1xyXG4gICAgICAgICAgICAgICAgYm94c1tpXS54MiA9IGFjdGlvbi5wYXlsb2FkLngyO1xyXG4gICAgICAgICAgICAgICAgYm94c1tpXS55MiA9IGFjdGlvbi5wYXlsb2FkLnkyO1xyXG5cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gYm94cztcclxuXHJcbiAgICBjYXNlIFNBR0FfU0VMRUNUQk9YX0VESVRCT1hfQ0hBTkdFU0laRTogICAgIC8vIOmBuOaKnuODnOODg+OCr+OCueOBruOCteOCpOOCuuWkieabtOWujOS6huaZglxyXG4gICAgICAgIGJveHMgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHN0YXRlKSk7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYm94cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoYm94c1tpXS5ib3hfaWQgPT0gYWN0aW9uLnBheWxvYWQuYm94X2lkKSB7XHJcbiAgICAgICAgICAgICAgICBib3hzW2ldLngxID0gYWN0aW9uLnBheWxvYWQueDE7XHJcbiAgICAgICAgICAgICAgICBib3hzW2ldLnkxID0gYWN0aW9uLnBheWxvYWQueTE7XHJcbiAgICAgICAgICAgICAgICBib3hzW2ldLngyID0gYWN0aW9uLnBheWxvYWQueDI7XHJcbiAgICAgICAgICAgICAgICBib3hzW2ldLnkyID0gYWN0aW9uLnBheWxvYWQueTI7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoYm94c1tpXS50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICd0ZXh0JzpcclxuICAgICAgICAgICAgICAgICAgICAvLyDjg4bjgq3jgrnjg4jjgrDjg6rjg4Pjg4lcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYm94c1tpXS50ZXh0Lmt1bWlob2tvID09ICd0YXRlJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcmVhc2l6ZV9qID0gYm94c1tpXS55MiAtIGJveHNbaV0ueTE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZWFzaXplX2cgPSBib3hzW2ldLngyIC0gYm94c1tpXS54MTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcmVhc2l6ZV9qID0gYm94c1tpXS54MiAtIGJveHNbaV0ueDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZWFzaXplX2cgPSBib3hzW2ldLnkyIC0gYm94c1tpXS55MTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dGdyaWQgPSBUZXh0R3JpZC5nZXRUZXh0R3JpZEFyeShcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJlYXNpemVfaiwgIC8vIOOCqOODquOCouOCteOCpOOCuu+8iOWtl+ipsOOCgeaWueWQke+8iVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcmVhc2l6ZV9nLCAgLy8g44Ko44Oq44Ki44K144Kk44K677yI6KGM6YCB44KK5pa55ZCR77yJXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJveHNbaV0udGV4dC5wYWRkaW5nX2pzLCAgLy8g44OR44OH44Kj44Oz44Kw5YCk77yI5a2X6Kmw44KB5pa55ZCRIOmWi+Wni++8iVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBib3hzW2ldLnRleHQucGFkZGluZ19qZSwgIC8vIOODkeODh+OCo+ODs+OCsOWApO+8iOWtl+ipsOOCgeaWueWQkSDntYLkuobvvIlcclxuICAgICAgICAgICAgICAgICAgICAgICAgYm94c1tpXS50ZXh0LnBhZGRpbmdfZ3MsICAvLyDjg5Hjg4fjgqPjg7PjgrDlgKTvvIjooYzpgIHjgormlrnlkJEg6ZaL5aeL77yJXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJveHNbaV0udGV4dC5wYWRkaW5nX2dlLCAgLy8g44OR44OH44Kj44Oz44Kw5YCk77yI6KGM6YCB44KK5pa55ZCRIOe1guS6hu+8iVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBib3hzW2ldLnRleHQuc2l6ZV9qLCAgLy8g44OG44Kt44K544OI44K144Kk44K677yI5a2X6Kmw44KB5pa55ZCR77yJXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJveHNbaV0udGV4dC5zaXplX2csICAvLyDjg4bjgq3jgrnjg4jjgrXjgqTjgrrvvIjooYzpgIHjgormlrnlkJHvvIlcclxuICAgICAgICAgICAgICAgICAgICAgICAgYm94c1tpXS50ZXh0Lmd5b2thbiwgIC8vIOihjOmWk1xyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgYm94c1tpXS50ZXh0LmdyaWQgPSB0ZXh0Z3JpZDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSAnaW1hZ2UnOlxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gYm94cztcclxuXHJcbiAgICBjYXNlIFNBR0FfVE9PTEJPWEJPWERBVEFfQk9YREFUQV9VUERBVEU6ICAgIC8vIOODnOODg+OCr+OCueaDheWgseOBruabtOaWsOaZglxyXG4gICAgICAgIGJveHMgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHN0YXRlKSk7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYm94cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoYm94c1tpXS5ib3hfaWQgPT0gYWN0aW9uLnBheWxvYWQuYm94LmJveF9pZCkge1xyXG4gICAgICAgICAgICAgICAgYm94c1tpXS5ncm91cF9pZCA9IGFjdGlvbi5wYXlsb2FkLmJveC5ncm91cF9pZDtcclxuICAgICAgICAgICAgICAgIGJveHNbaV0uZ3JvdXBfbm8gPSBhY3Rpb24ucGF5bG9hZC5ib3guZ3JvdXBfbm87XHJcblxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBib3hzO1xyXG5cclxuICAgIGNhc2UgU0FHQV9UT09MQk9YVEVYVERBVEFfVEVYVERBVEFfVVBEQVRFOiAgICAvLyDjg4bjgq3jgrnjg4jjg5zjg4Pjgq/jgrnjga7jg4bjgq3jgrnjg4jmg4XloLHjga7mm7TmlrDmmYJcclxuICAgICAgICBib3hzID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShzdGF0ZSkpO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJveHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGJveHNbaV0uYm94X2lkID09IGFjdGlvbi5wYXlsb2FkLmJveC5ib3hfaWQpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoYm94c1tpXS50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICd0ZXh0JzpcclxuICAgICAgICAgICAgICAgICAgICBib3hzW2ldLnRleHQucGFkZGluZ19qcyA9IGFjdGlvbi5wYXlsb2FkLmJveC50ZXh0LnBhZGRpbmdfanM7XHJcbiAgICAgICAgICAgICAgICAgICAgYm94c1tpXS50ZXh0LnBhZGRpbmdfamUgPSBhY3Rpb24ucGF5bG9hZC5ib3gudGV4dC5wYWRkaW5nX2plO1xyXG4gICAgICAgICAgICAgICAgICAgIGJveHNbaV0udGV4dC5wYWRkaW5nX2dzID0gYWN0aW9uLnBheWxvYWQuYm94LnRleHQucGFkZGluZ19ncztcclxuICAgICAgICAgICAgICAgICAgICBib3hzW2ldLnRleHQucGFkZGluZ19nZSA9IGFjdGlvbi5wYXlsb2FkLmJveC50ZXh0LnBhZGRpbmdfZ2U7XHJcbiAgICAgICAgICAgICAgICAgICAgYm94c1tpXS50ZXh0Lmt1bWlob2tvICAgPSBhY3Rpb24ucGF5bG9hZC5ib3gudGV4dC5rdW1paG9rbztcclxuICAgICAgICAgICAgICAgICAgICBib3hzW2ldLnRleHQuZ3lva2FuICAgICA9IGFjdGlvbi5wYXlsb2FkLmJveC50ZXh0Lmd5b2thbjtcclxuICAgICAgICAgICAgICAgICAgICBib3hzW2ldLnRleHQuZm9udCAgICAgICA9IGFjdGlvbi5wYXlsb2FkLmJveC50ZXh0LmZvbnQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIOODhuOCreOCueODiOOCsOODquODg+ODiVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChib3hzW2ldLnRleHQua3VtaWhva28gPT0gJ3RhdGUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZWFzaXplX2ogPSBib3hzW2ldLnkyIC0gYm94c1tpXS55MTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJlYXNpemVfZyA9IGJveHNbaV0ueDIgLSBib3hzW2ldLngxO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZWFzaXplX2ogPSBib3hzW2ldLngyIC0gYm94c1tpXS54MTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJlYXNpemVfZyA9IGJveHNbaV0ueTIgLSBib3hzW2ldLnkxO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXh0Z3JpZCA9IFRleHRHcmlkLmdldFRleHRHcmlkQXJ5KFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcmVhc2l6ZV9qLCAgLy8g44Ko44Oq44Ki44K144Kk44K677yI5a2X6Kmw44KB5pa55ZCR77yJXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZWFzaXplX2csICAvLyDjgqjjg6rjgqLjgrXjgqTjgrrvvIjooYzpgIHjgormlrnlkJHvvIlcclxuICAgICAgICAgICAgICAgICAgICAgICAgYm94c1tpXS50ZXh0LnBhZGRpbmdfanMsICAvLyDjg5Hjg4fjgqPjg7PjgrDlgKTvvIjlrZfoqbDjgoHmlrnlkJEg6ZaL5aeL77yJXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJveHNbaV0udGV4dC5wYWRkaW5nX2plLCAgLy8g44OR44OH44Kj44Oz44Kw5YCk77yI5a2X6Kmw44KB5pa55ZCRIOe1guS6hu+8iVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBib3hzW2ldLnRleHQucGFkZGluZ19ncywgIC8vIOODkeODh+OCo+ODs+OCsOWApO+8iOihjOmAgeOCiuaWueWQkSDplovlp4vvvIlcclxuICAgICAgICAgICAgICAgICAgICAgICAgYm94c1tpXS50ZXh0LnBhZGRpbmdfZ2UsICAvLyDjg5Hjg4fjgqPjg7PjgrDlgKTvvIjooYzpgIHjgormlrnlkJEg57WC5LqG77yJXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJveHNbaV0udGV4dC5zaXplX2osICAvLyDjg4bjgq3jgrnjg4jjgrXjgqTjgrrvvIjlrZfoqbDjgoHmlrnlkJHvvIlcclxuICAgICAgICAgICAgICAgICAgICAgICAgYm94c1tpXS50ZXh0LnNpemVfZywgIC8vIOODhuOCreOCueODiOOCteOCpOOCuu+8iOihjOmAgeOCiuaWueWQke+8iVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBib3hzW2ldLnRleHQuZ3lva2FuLCAgLy8g6KGM6ZaTXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICBib3hzW2ldLnRleHQuZ3JpZCA9IHRleHRncmlkO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlICdpbWFnZSc6XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBib3hzO1xyXG5cclxuICAgIGNhc2UgU0FHQV9UT09MQk9YQk9YREFUQV9CT1hEQVRBX0RFTEVURTogIC8vIOODnOODg+OCr+OCueOBruWJiumZpOaZglxyXG4gICAgICAgIGJveHMgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHN0YXRlKSk7XHJcblxyXG4gICAgICAgIGdyb3VwX2lkID0gJyc7XHJcblxyXG4gICAgICAgIC8vIOODnOODg+OCr+OCueaDheWgseOBi+OCieODnOODg+OCr+OCueOCkuWJiumZpOOBmeOCi1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYm94cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoYm94c1tpXS5ib3hfaWQgPT0gYWN0aW9uLnBheWxvYWQuYm94X2lkKSB7XHJcbiAgICAgICAgICAgICAgICBncm91cF9pZCA9IGJveHNbaV0uZ3JvdXBfaWQ7XHJcbiAgICAgICAgICAgICAgICBib3hzLnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDliYrpmaTjgZfjgZ/jg5zjg4Pjgq/jgrnjga7jgrDjg6vjg7zjg5dOb+mFjeWIl+OCkuW+l+OCi1xyXG4gICAgICAgIGdyb3VwX25vX2FyeSA9IEJveC5nZXRHcm91cE5vQXJ5KGJveHMsIGdyb3VwX2lkKTtcclxuXHJcbiAgICAgICAgLy8g44Kw44Or44O844OXTm/jgpIx44GL44KJ6aCG55Wq44Gr5oyv44KK55u044GZXHJcbiAgICAgICAgbGV0IG5vID0gMTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGdyb3VwX25vX2FyeS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGJveHMubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChib3hzW2pdLmdyb3VwX2lkID09IGdyb3VwX2lkXHJcbiAgICAgICAgICAgICAgICAgJiYgYm94c1tqXS5ncm91cF9ubyA9PSBncm91cF9ub19hcnlbaV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgYm94c1tqXS5ncm91cF9ubyA9IG5vO1xyXG4gICAgICAgICAgICAgICAgICAgICBubysrO1xyXG4gICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBib3hzOyAgICAgICBcclxuXHJcbiAgICBjYXNlIFNBR0FfVE9PTEJPWEJPWERBVEFfQk9YREFUQV9DUkVBVEU6ICAvLyDjg5zjg4Pjgq/jgrnjga7mlrDopo/kvZzmiJDmmYJcclxuICAgICAgICBib3hzID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShzdGF0ZSkpO1xyXG5cclxuICAgICAgICBib3ggPSB7XHJcbiAgICAgICAgICAgIGJveF9pZDogYWN0aW9uLnBheWxvYWQuYm94LmJveF9pZCxcclxuICAgICAgICAgICAgZ3JvdXBfaWQ6IGFjdGlvbi5wYXlsb2FkLmJveC5ncm91cF9pZCxcclxuICAgICAgICAgICAgZ3JvdXBfbm86IGFjdGlvbi5wYXlsb2FkLmJveC5ncm91cF9ubyxcclxuICAgICAgICAgICAgdHlwZTogYWN0aW9uLnBheWxvYWQuYm94LnR5cGUsXHJcbiAgICAgICAgICAgIHgxOiAxMDAsXHJcbiAgICAgICAgICAgIHkxOiAxMDAsXHJcbiAgICAgICAgICAgIHgyOiAyMDAsXHJcbiAgICAgICAgICAgIHkyOiAyMDAsXHJcbiAgICAgICAgICAgIHRleHQ6IHtcclxuICAgICAgICAgICAgICAgIGt1bWlob2tvOiAndGF0ZScsXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX2pzOiAxMCxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfamU6IDEwLFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19nczogMTAsXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX2dlOiAxMCxcclxuICAgICAgICAgICAgICAgIHNpemVfajogMTAsXHJcbiAgICAgICAgICAgICAgICBzaXplX2c6IDEwLFxyXG4gICAgICAgICAgICAgICAgZ3lva2FuOiA1LFxyXG4gICAgICAgICAgICAgICAgZm9udDogMSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBpZiAoYm94LnR5cGUgPT0gJ3RleHQnKSB7XHJcbiAgICAgICAgICAgIC8vIOODhuOCreOCueODiOOCsOODquODg+ODiVxyXG4gICAgICAgICAgICBpZiAoYm94LnRleHQua3VtaWhva28gPT0gJ3RhdGUnKSB7XHJcbiAgICAgICAgICAgICAgICBhcmVhc2l6ZV9qID0gYm94LnkyIC0gYm94LnkxO1xyXG4gICAgICAgICAgICAgICAgYXJlYXNpemVfZyA9IGJveC54MiAtIGJveC54MTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGFyZWFzaXplX2ogPSBib3gueDIgLSBib3gueDE7XHJcbiAgICAgICAgICAgICAgICBhcmVhc2l6ZV9nID0gYm94LnkyIC0gYm94LnkxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHRleHRncmlkID0gVGV4dEdyaWQuZ2V0VGV4dEdyaWRBcnkoXHJcbiAgICAgICAgICAgICAgICBhcmVhc2l6ZV9qLCAgLy8g44Ko44Oq44Ki44K144Kk44K677yI5a2X6Kmw44KB5pa55ZCR77yJXHJcbiAgICAgICAgICAgICAgICBhcmVhc2l6ZV9nLCAgLy8g44Ko44Oq44Ki44K144Kk44K677yI6KGM6YCB44KK5pa55ZCR77yJXHJcbiAgICAgICAgICAgICAgICBib3gudGV4dC5wYWRkaW5nX2pzLCAgLy8g44OR44OH44Kj44Oz44Kw5YCk77yI5a2X6Kmw44KB5pa55ZCRIOmWi+Wni++8iVxyXG4gICAgICAgICAgICAgICAgYm94LnRleHQucGFkZGluZ19qZSwgIC8vIOODkeODh+OCo+ODs+OCsOWApO+8iOWtl+ipsOOCgeaWueWQkSDntYLkuobvvIlcclxuICAgICAgICAgICAgICAgIGJveC50ZXh0LnBhZGRpbmdfZ3MsICAvLyDjg5Hjg4fjgqPjg7PjgrDlgKTvvIjooYzpgIHjgormlrnlkJEg6ZaL5aeL77yJXHJcbiAgICAgICAgICAgICAgICBib3gudGV4dC5wYWRkaW5nX2dlLCAgLy8g44OR44OH44Kj44Oz44Kw5YCk77yI6KGM6YCB44KK5pa55ZCRIOe1guS6hu+8iVxyXG4gICAgICAgICAgICAgICAgYm94LnRleHQuc2l6ZV9qLCAgLy8g44OG44Kt44K544OI44K144Kk44K677yI5a2X6Kmw44KB5pa55ZCR77yJXHJcbiAgICAgICAgICAgICAgICBib3gudGV4dC5zaXplX2csICAvLyDjg4bjgq3jgrnjg4jjgrXjgqTjgrrvvIjooYzpgIHjgormlrnlkJHvvIlcclxuICAgICAgICAgICAgICAgIGJveC50ZXh0Lmd5b2thbiwgIC8vIOihjOmWk1xyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBib3gudGV4dC5ncmlkID0gdGV4dGdyaWQ7XHJcbiAgICAgICAgICAgIGJveC50ZXh0LnJlc3VsdCA9IFtdO1xyXG4gICAgICAgICAgICBib3gudGV4dC5hZnVyZSA9IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDov73liqDjgZnjgotcclxuICAgICAgICBib3hzLnB1c2goYm94KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGJveHM7XHJcblxyXG4gICAgY2FzZSBTQUdBX05BR0FTSElSRVNVTFRfQ1JFQVRFOiAgICAvLyDjg4bjgq3jgrnjg4jmtYHjgZfntZDmnpzjga7kvZzmiJDmmYJcclxuICAgICAgICBib3hzID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShzdGF0ZSkpO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJveHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGJveHNbaV0uYm94X2lkID09IGFjdGlvbi5wYXlsb2FkLmJveF9pZCkge1xyXG4gICAgICAgICAgICAgICAgYm94c1tpXS50ZXh0LnJlc3VsdCA9IGFjdGlvbi5wYXlsb2FkLm5hZ2FzaGlSZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICBib3hzW2ldLnRleHQuYWZ1cmUgPSAwO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBib3hzO1xyXG5cclxuICAgIGNhc2UgU0FHQV9OQUdBU0hJX0lNQUdFOiAgICAvLyDnlLvlg4/jga7mtYHjgZfmmYJcclxuICAgICAgICBib3hzID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShzdGF0ZSkpO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJveHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGJveHNbaV0uYm94X2lkID09IGFjdGlvbi5wYXlsb2FkLmJveF9pZCkge1xyXG4gICAgICAgICAgICAgICAgYm94c1tpXS5pbWFnZS51cmwgPSBhY3Rpb24ucGF5bG9hZC5pbWFnZVVybDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gYm94cztcclxuXHJcbiAgICBjYXNlIFNBR0FfTkFHQVNISV9SRU1PVkU6ICAgIC8vIOa1geOBl+e1kOaenOOBruWJiumZpOaZglxyXG4gICAgICAgIGJveHMgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHN0YXRlKSk7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYm94cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoYm94c1tpXS5ncm91cF9pZCA9PSBhY3Rpb24ucGF5bG9hZC5ncm91cF9pZCkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChib3hzW2ldLnR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3RleHQnOlxyXG4gICAgICAgICAgICAgICAgICAgIGJveHNbaV0udGV4dC5yZXN1bHQgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBib3hzW2ldLnRleHQuYWZ1cmUgID0gMDtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2ltYWdlJzpcclxuICAgICAgICAgICAgICAgICAgICBib3hzW2ldLmltYWdlLnVybCA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gYm94cztcclxuXHJcbiAgICBjYXNlIFNBR0FfTkFHQVNISVJFU1VMVF9BRlVSRTogICAgLy8g5rWB44GX44Gf57WQ5p6c44GC44G144KM44Gf5aC05ZCIXHJcbiAgICAgICAgYm94cyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoc3RhdGUpKTtcclxuXHJcbiAgICAgICAgZ3JvdXBfaWQgPSBhY3Rpb24ucGF5bG9hZC5ncm91cF9pZDtcclxuXHJcbiAgICAgICAgLy8g44Kw44Or44O844OX44Gu5pyA5b6M44GuTm/jgpLlvpfjgotcclxuICAgICAgICBncm91cF9ub19hcnkgPSBCb3guZ2V0R3JvdXBOb0FyeShib3hzLCBncm91cF9pZCk7XHJcbiAgICAgICAgY29uc3QgbGFzdF9ncm91cF9ubyA9IGdyb3VwX25vX2FyeS5wb3AoKTtcclxuXHJcbiAgICAgICAgLy8g5rqi44KM44OV44Op44Kw44KS44K744OD44OIXHJcbiAgICAgICAgY29uc3QgYm94X2lkID0gQm94LmdldEJveElkKGJveHMsIGdyb3VwX2lkLCBsYXN0X2dyb3VwX25vKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJveHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGJveHNbaV0uYm94X2lkID09IGJveF9pZCkge1xyXG4gICAgICAgICAgICAgICAgYm94c1tpXS50ZXh0LmFmdXJlID0gYWN0aW9uLnBheWxvYWQuYWZ1cmU7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGJveHM7XHJcblxyXG4gICAgY2FzZSBTQUdBX0NPTlRFWFRNRU5VX05FV0JPWFRFWFQ6ICAgLy8g44Oc44OD44Kv44K544Gu5paw6KaP5L2c5oiQ77yI44OG44Kt44K544OI44Oc44OD44Kv44K577yJXHJcbiAgICAgICAgYm94cyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoc3RhdGUpKTtcclxuXHJcbiAgICAgICAgYm94ID0ge1xyXG4gICAgICAgICAgICBib3hfaWQ6ICAgYWN0aW9uLnBheWxvYWQuYm94X2lkLFxyXG4gICAgICAgICAgICBncm91cF9pZDogYWN0aW9uLnBheWxvYWQuZ3JvdXBfaWQsXHJcbiAgICAgICAgICAgIGdyb3VwX25vOiBhY3Rpb24ucGF5bG9hZC5ncm91cF9ubyxcclxuICAgICAgICAgICAgdHlwZTogICAgIGFjdGlvbi5wYXlsb2FkLnR5cGUsXHJcbiAgICAgICAgICAgIHgxOiBhY3Rpb24ucGF5bG9hZC54MSxcclxuICAgICAgICAgICAgeTE6IGFjdGlvbi5wYXlsb2FkLnkxLFxyXG4gICAgICAgICAgICB4MjogYWN0aW9uLnBheWxvYWQueDIsXHJcbiAgICAgICAgICAgIHkyOiBhY3Rpb24ucGF5bG9hZC55MixcclxuICAgICAgICAgICAgdGV4dDoge1xyXG4gICAgICAgICAgICAgICAga3VtaWhva286ICAgYWN0aW9uLnBheWxvYWQudGV4dC5rdW1paG9rbyxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfanM6IGFjdGlvbi5wYXlsb2FkLnRleHQucGFkZGluZ19qcyxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfamU6IGFjdGlvbi5wYXlsb2FkLnRleHQucGFkZGluZ19qZSxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfZ3M6IGFjdGlvbi5wYXlsb2FkLnRleHQucGFkZGluZ19ncyxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfZ2U6IGFjdGlvbi5wYXlsb2FkLnRleHQucGFkZGluZ19nZSxcclxuICAgICAgICAgICAgICAgIHNpemVfajogICAgIGFjdGlvbi5wYXlsb2FkLnRleHQuc2l6ZV9qLFxyXG4gICAgICAgICAgICAgICAgc2l6ZV9nOiAgICAgYWN0aW9uLnBheWxvYWQudGV4dC5zaXplX2csXHJcbiAgICAgICAgICAgICAgICBneW9rYW46ICAgICBhY3Rpb24ucGF5bG9hZC50ZXh0Lmd5b2thbixcclxuICAgICAgICAgICAgICAgIGZvbnQ6ICAgICAgIGFjdGlvbi5wYXlsb2FkLnRleHQuZm9udCxcclxuXHJcbiAgICAgICAgICAgICAgICBncmlkOiBbXSxcclxuICAgICAgICAgICAgICAgIHJlc3VsdDogW10sXHJcbiAgICAgICAgICAgICAgICBhZnVyZTogMCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyDjg4bjgq3jgrnjg4jjgrDjg6rjg4Pjg4lcclxuICAgICAgICBpZiAoYm94LnRleHQua3VtaWhva28gPT0gJ3RhdGUnKSB7XHJcbiAgICAgICAgICAgIGFyZWFzaXplX2ogPSBib3gueTIgLSBib3gueTE7XHJcbiAgICAgICAgICAgIGFyZWFzaXplX2cgPSBib3gueDIgLSBib3gueDE7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgYXJlYXNpemVfaiA9IGJveC54MiAtIGJveC54MTtcclxuICAgICAgICAgICAgYXJlYXNpemVfZyA9IGJveC55MiAtIGJveC55MTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgdGV4dGdyaWQgPSBUZXh0R3JpZC5nZXRUZXh0R3JpZEFyeShcclxuICAgICAgICAgICAgYXJlYXNpemVfaiwgIC8vIOOCqOODquOCouOCteOCpOOCuu+8iOWtl+ipsOOCgeaWueWQke+8iVxyXG4gICAgICAgICAgICBhcmVhc2l6ZV9nLCAgLy8g44Ko44Oq44Ki44K144Kk44K677yI6KGM6YCB44KK5pa55ZCR77yJXHJcbiAgICAgICAgICAgIGJveC50ZXh0LnBhZGRpbmdfanMsICAvLyDjg5Hjg4fjgqPjg7PjgrDlgKTvvIjlrZfoqbDjgoHmlrnlkJEg6ZaL5aeL77yJXHJcbiAgICAgICAgICAgIGJveC50ZXh0LnBhZGRpbmdfamUsICAvLyDjg5Hjg4fjgqPjg7PjgrDlgKTvvIjlrZfoqbDjgoHmlrnlkJEg57WC5LqG77yJXHJcbiAgICAgICAgICAgIGJveC50ZXh0LnBhZGRpbmdfZ3MsICAvLyDjg5Hjg4fjgqPjg7PjgrDlgKTvvIjooYzpgIHjgormlrnlkJEg6ZaL5aeL77yJXHJcbiAgICAgICAgICAgIGJveC50ZXh0LnBhZGRpbmdfZ2UsICAvLyDjg5Hjg4fjgqPjg7PjgrDlgKTvvIjooYzpgIHjgormlrnlkJEg57WC5LqG77yJXHJcbiAgICAgICAgICAgIGJveC50ZXh0LnNpemVfaiwgIC8vIOODhuOCreOCueODiOOCteOCpOOCuu+8iOWtl+ipsOOCgeaWueWQke+8iVxyXG4gICAgICAgICAgICBib3gudGV4dC5zaXplX2csICAvLyDjg4bjgq3jgrnjg4jjgrXjgqTjgrrvvIjooYzpgIHjgormlrnlkJHvvIlcclxuICAgICAgICAgICAgYm94LnRleHQuZ3lva2FuLCAgLy8g6KGM6ZaTXHJcbiAgICAgICAgKTtcclxuICAgICAgICBib3gudGV4dC5ncmlkID0gdGV4dGdyaWQ7XHJcbiAgICAgICAgYm94LnRleHQucmVzdWx0ID0gW107XHJcbiAgICAgICAgYm94LnRleHQuYWZ1cmUgPSAwO1xyXG5cclxuICAgICAgICBib3hzLnB1c2goYm94KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGJveHM7XHJcblxyXG4gICAgY2FzZSBTQUdBX0NPTlRFWFRNRU5VX05FV0JPWElNQUdFOiAgIC8vIOODnOODg+OCr+OCueOBruaWsOimj+S9nOaIkO+8iOeUu+WDj+ODnOODg+OCr+OCue+8iVxyXG4gICAgICAgIGJveHMgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHN0YXRlKSk7XHJcblxyXG4gICAgICAgIGJveCA9IHtcclxuICAgICAgICAgICAgYm94X2lkOiAgIGFjdGlvbi5wYXlsb2FkLmJveF9pZCxcclxuICAgICAgICAgICAgZ3JvdXBfaWQ6IGFjdGlvbi5wYXlsb2FkLmdyb3VwX2lkLFxyXG4gICAgICAgICAgICBncm91cF9ubzogYWN0aW9uLnBheWxvYWQuZ3JvdXBfbm8sXHJcbiAgICAgICAgICAgIHR5cGU6ICAgICBhY3Rpb24ucGF5bG9hZC50eXBlLFxyXG4gICAgICAgICAgICB4MTogYWN0aW9uLnBheWxvYWQueDEsXHJcbiAgICAgICAgICAgIHkxOiBhY3Rpb24ucGF5bG9hZC55MSxcclxuICAgICAgICAgICAgeDI6IGFjdGlvbi5wYXlsb2FkLngyLFxyXG4gICAgICAgICAgICB5MjogYWN0aW9uLnBheWxvYWQueTIsXHJcbiAgICAgICAgICAgIGltYWdlOiB7XHJcbiAgICAgICAgICAgICAgICB1cmw6IGFjdGlvbi5wYXlsb2FkLmltYWdlLnVybCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBib3hzLnB1c2goYm94KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGJveHM7XHJcblxyXG4gICAgY2FzZSBTQUdBX0NPTlRFWFRNRU5VX0JPWFRPRlJPTlQ6ICAgLy8g44Oc44OD44Kv44K544KS5pyA5YmN6Z2i44GrXHJcbiAgICAgICAgYm94cyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoc3RhdGUpKTtcclxuXHJcbiAgICAgICAgYm94ID0gJyc7XHJcblxyXG4gICAgICAgIC8vIOODnOODg+OCr+OCueaDheWgseOBi+OCieaMh+WumuOBruODnOODg+OCr+OCueOCkuW+l+OBpuS4gOerr+WJiumZpOOBmeOCi1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYm94cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoYm94c1tpXS5ib3hfaWQgPT0gYWN0aW9uLnBheWxvYWQuYm94X2lkKSB7XHJcbiAgICAgICAgICAgICAgICBib3ggPSBib3hzW2ldO1xyXG4gICAgICAgICAgICAgICAgYm94cy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8g44Oc44OD44Kv44K55oOF5aCx44Gu5pyr5bC+44Gr44OX44OD44K344Ol44GZ44KLXHJcbiAgICAgICAgYm94cy5wdXNoKGJveCk7XHJcblxyXG4gICAgICAgIHJldHVybiBib3hzO1xyXG5cclxuICAgIGNhc2UgU0FHQV9DT05URVhUTUVOVV9CT1hUT0JBQ0s6ICAgIC8vIOODnOODg+OCr+OCueOCkuWGjeiDjOmdouOBq1xyXG4gICAgICAgIGJveHMgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHN0YXRlKSk7XHJcblxyXG4gICAgICAgIGJveCA9ICcnO1xyXG5cclxuICAgICAgICAvLyDjg5zjg4Pjgq/jgrnmg4XloLHjgYvjgonmjIflrprjga7jg5zjg4Pjgq/jgrnjgpLlvpfjgabkuIDnq6/liYrpmaTjgZnjgotcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJveHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGJveHNbaV0uYm94X2lkID09IGFjdGlvbi5wYXlsb2FkLmJveF9pZCkge1xyXG4gICAgICAgICAgICAgICAgYm94ID0gYm94c1tpXTtcclxuICAgICAgICAgICAgICAgIGJveHMuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIOODnOODg+OCr+OCueaDheWgseOBruWFiOmgreOBq+aMv+WFpeOBmeOCi1xyXG4gICAgICAgIGJveHMudW5zaGlmdChib3gpO1xyXG5cclxuICAgICAgICByZXR1cm4gYm94cztcclxuXHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICAgIHJldHVybiBzdGF0ZTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQge1xyXG4gICAgU0FHQV9TQ0FMRV9DSEFOR0UsXHJcbn0gZnJvbSAnLi4vYWN0aW9uc19zYWdhL3Rvb2xib3hzY2FsZS5qcyc7XHJcblxyXG4vLyA9PT09PT09PT09PT09PT09PT09PVxyXG4vLyBzY2FsZeaDheWgsVxyXG4vLyAgICAgIDEuMDogMTAwJVxyXG4vLyA9PT09PT09PT09PT09PT09PT09PVxyXG5leHBvcnQgY29uc3Qgc2NhbGUgPSAoc3RhdGUgPSAxMDAsIGFjdGlvbikgPT4ge1xyXG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xyXG4gICAgY2FzZSBTQUdBX1NDQUxFX0NIQU5HRTogICAvLyDmi6HlpKfnuK7lsI/lgKTjgYzlpInmm7TjgZXjgozjgZ9cclxuICAgICAgICByZXR1cm4gYWN0aW9uLnBheWxvYWQuc2NhbGU7XHJcblxyXG4gICAgZGVmYXVsdDpcclxuICAgICAgICByZXR1cm4gc3RhdGU7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgY29tYmluZVJlZHVjZXJzIH0gZnJvbSAncmVkdXgnO1xyXG5cclxuaW1wb3J0IHsgc2NhbGUgfSBmcm9tICcuL3NjYWxlLmpzJztcclxuaW1wb3J0IHsgYm94cyB9IGZyb20gJy4vYm94cy5qcyc7XHJcbmltcG9ydCB7IGZvY3VzYm94IH0gZnJvbSAnLi9mb2N1c2JveC5qcyc7XHJcbmltcG9ydCB7IHRvb2xib3hzIH0gZnJvbSAnLi90b29sYm94cy5qcyc7XHJcbmltcG9ydCB7IHNvemFpIH0gZnJvbSAnLi9zb3phaS5qcyc7XHJcbmltcG9ydCB7IGxpbmtzIH0gZnJvbSAnLi9saW5rcy5qcyc7XHJcbmltcG9ydCB7IGxpbmVzIH0gZnJvbSAnLi9saW5lcy5qcyc7XHJcbmltcG9ydCB7IGVkaXRvbm9mZiB9IGZyb20gJy4vZWRpdG9ub2ZmLmpzJztcclxuaW1wb3J0IHsgZGFuZGQgfSBmcm9tICcuL2RhbmRkLmpzJztcclxuaW1wb3J0IHsgY29udGV4dG1lbnUgfSBmcm9tICcuL2NvbnRleHRtZW51LmpzJztcclxuXHJcbmNvbnN0IHJvb3RSZWR1Y2VyID0gY29tYmluZVJlZHVjZXJzKHtcclxuICAgIHNjYWxlLFxyXG4gICAgYm94cyxcclxuICAgIGZvY3VzYm94LFxyXG4gICAgdG9vbGJveHMsXHJcbiAgICBzb3phaSxcclxuICAgIGxpbmtzLFxyXG4gICAgbGluZXMsXHJcbiAgICBlZGl0b25vZmYsXHJcbiAgICBkYW5kZCxcclxuICAgIGNvbnRleHRtZW51LFxyXG59KTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHJvb3RSZWR1Y2VyO1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5cclxuY29uc3Qgc3R5bGVzID0ge1xyXG4gICAgY29udGFpbmVyOiB7XHJcbiAgICAgICAgdGV4dEFsaWduOiAnbGVmdCcsXHJcbiAgICB9LFxyXG4gICAgYnV0dG9uOiB7XHJcbiAgICAgICAgbWFyZ2luVG9wOiAnMnB4JyxcclxuICAgICAgICB3aWR0aDogJzM4cHgnLFxyXG4gICAgICAgIGhlaWdodDogJzE0cHgnLFxyXG4gICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXHJcbiAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcclxuICAgICAgICBsaW5lSGVpZ2h0OiAnMTRweCcsXHJcbiAgICAgICAgYm9yZGVyOiAnMXB4IHNvbGlkICMzMzMnLFxyXG4gICAgICAgIGJvcmRlclJhZGl1czogJzJweCcsXHJcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnbGlnaHRibHVlJyxcclxuICAgICAgICB1c2VyU2VsZWN0OiAnbm9uZScsXHJcbiAgICAgICAgY3Vyc29yOiAncG9pbnRlcicsXHJcbiAgICB9LFxyXG5cclxuICAgIGJ1dHRvbjI6IHtcclxuICAgICAgICBtYXJnaW5Ub3A6ICcycHgnLFxyXG4gICAgICAgIHdpZHRoOiAnMzhweCcsXHJcbiAgICAgICAgaGVpZ2h0OiAnMTRweCcsXHJcbiAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcclxuICAgICAgICBmb250U2l6ZTogJzEycHgnLFxyXG4gICAgICAgIGxpbmVIZWlnaHQ6ICcxNHB4JyxcclxuICAgICAgICBib3JkZXI6ICcxcHggc29saWQgIzMzMycsXHJcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnMnB4JyxcclxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdsaWdodGdyZWVuJyxcclxuICAgICAgICB1c2VyU2VsZWN0OiAnbm9uZScsXHJcbiAgICAgICAgY3Vyc29yOiAncG9pbnRlcicsXHJcbiAgICB9LFxyXG59O1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRvb2xCb3hQcmVzZW4gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gICAgZG93bmxvYWQoKSB7XHJcbiAgICAgICAgbGV0IGNvbnRlbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndmlld2JveCcpLmlubmVySFRNTDtcclxuICAgICAgICBjb250ZW50ID0gJzw/eG1sIHZlcnNpb249XCIxLjBcIiBlbmNvZGluZz1cInV0Zi04XCI/PicgKyBjb250ZW50O1xyXG4gICAgICAgIGxldCBibG9iID0gbmV3IEJsb2IoW2NvbnRlbnRdLCB7dHlwZTogJ3RleHQvcGxhaW4nfSk7XHJcbiAgICAgICAgbGV0IGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XHJcbiAgICAgICAgYS5ocmVmID0gd2luZG93LlVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XHJcbiAgICAgICAgYS50YXJnZXQgPSAnX2JsYW5rJztcclxuICAgICAgICBhLmRvd25sb2FkID0gJ3NoaW1lbi5zdmcnO1xyXG4gICAgICAgIGEuY2xpY2soKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgIHN0eWxlPXtzdHlsZXMuY29udGFpbmVyfVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgLi4uc3R5bGVzLmJ1dHRvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmxvYXQ6ICdsZWZ0JyxcclxuICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHRoaXMucHJvcHMub25DYWxsTGF5b3V0KHtwYXR0ZXJuOiAnQSd9KX1cclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICBsYXkgQVxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgLi4uc3R5bGVzLmJ1dHRvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmxvYXQ6ICdsZWZ0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luTGVmdDogJzVweCcsXHJcbiAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB0aGlzLnByb3BzLm9uQ2FsbExheW91dCh7cGF0dGVybjogJ0InfSl9XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgbGF5IEJcclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5zdHlsZXMuYnV0dG9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmbG9hdDogJ3JpZ2h0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luUmlnaHQ6ICcwcHgnLFxyXG4gICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gdGhpcy5wcm9wcy5vbkVkaXRPbkNsaWNrKCl9XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgRSBPblxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPXt7Y2xlYXI6ICdib3RoJ319PjwvZGl2PlxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgLi4uc3R5bGVzLmJ1dHRvbjIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZsb2F0OiAnbGVmdCcsXHJcbiAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB0aGlzLnByb3BzLm9uQ2FsbFNvemFpKHtwYXR0ZXJuOiAnQSd9KX1cclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICBTb3ogQVxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgLi4uc3R5bGVzLmJ1dHRvbjIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZsb2F0OiAnbGVmdCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbkxlZnQ6ICc1cHgnLFxyXG4gICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gdGhpcy5wcm9wcy5vbkNhbGxTb3phaSh7cGF0dGVybjogJ0InfSl9XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgU296IEJcclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5zdHlsZXMuYnV0dG9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmbG9hdDogJ3JpZ2h0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luUmlnaHQ6ICcwcHgnLFxyXG4gICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gdGhpcy5wcm9wcy5vbkVkaXRPZmZDbGljaygpfVxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIEUgT2ZmXHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9e3tjbGVhcjogJ2JvdGgnfX0+PC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnN0eWxlcy5idXR0b24yLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmbG9hdDogJ2xlZnQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW5MZWZ0OiAnNDVweCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ2xpZ2h0eWVsbG93JyxcclxuICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHRoaXMucHJvcHMub25DYWxsTGluayh7cGF0dGVybjogJ0InfSl9XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgTGlrIEJcclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBzdHlsZT17e2NsZWFyOiAnYm90aCd9fT48L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgLi4uc3R5bGVzLmJ1dHRvbjIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZsb2F0OiAncmlnaHQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW5SaWdodDogJzBweCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ29yYW5nZScsXHJcbiAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB0aGlzLmRvd25sb2FkKCl9XHJcbiAgICAgICAgICAgICAgICA+RExcclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApXHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnO1xyXG5cclxuaW1wb3J0IFRvb2xCb3hQcmVzZW4gZnJvbSAnLi9Ub29sQm94UHJlc2VuLmpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBTVV9Ub29sQm94UHJlc2VuX0xheW91dENhbGxCdXR0b25fQ2xpY2ssXHJcbiAgICBTVV9Ub29sQm94UHJlc2VuX1NvemFpQ2FsbEJ1dHRvbl9DbGljayxcclxuICAgIFNVX1Rvb2xCb3hQcmVzZW5fTGlua0NhbGxCdXR0b25fQ2xpY2ssXHJcbiAgICBcclxuICAgIFNVX1Rvb2xCb3hQcmVzZW5fRWRpdE9uT2ZmQnV0dG9uX0NsaWNrLFxyXG59IGZyb20gJy4uL2FjdGlvbnNfc3UvdG9vbGJveHByZXNlbi5qcyc7XHJcblxyXG5cclxuLy8gbWFwU3RhdGVUb1Byb3BzXHJcbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZSwgcHJvcHMpID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgLi4uc3RhdGUsXHJcbiAgICB9O1xyXG59XHJcblxyXG4vLyBtYXBEaXNwYXRjaFRvUHJvcHNcclxuY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0gKGRpc3BhdGNoLCBwcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBkaXNwYXRjaCxcclxuICAgIH07XHJcbn1cclxuXHJcbi8vIG1lcmdlUHJvcHMgXHJcbmNvbnN0IG1lcmdlUHJvcHMgPSAoc3RhdGUsIGRpc3BhdGNoLCBwcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAvLyB4eHg6IHl5eSxcclxuICAgICAgICAvLyBvblh4eHg6ICh4eHgpID0+IHtcclxuICAgICAgICAvLyAgICAgLi4uLi5cclxuICAgICAgICAvLyAgICAgZGlzcGF0Y2guZGlzcGF0Y2goU1VfWHh4eHh4X1h4eHh4X1h4eHgoKSk7XHJcbiAgICAgICAgLy8gfSxcclxuICAgICAgICAvLyAuLi5wcm9wcyxcclxuICAgICAgICBcclxuICAgICAgICAvLyBvbkNsaWNrTWluQnV0dG9uOiAoKSA9PiB7XHJcbiAgICAgICAgLy8gICAgIGRpc3BhdGNoLmRpc3BhdGNoKFNVX1Rvb2xCb3hQcmVzZW5fTWluQnV0dG9uX0NsaWNrKCkpO1xyXG4gICAgICAgIC8vIH0sXHJcbiAgICAgICAgLy8gb25DbGlja01heEJ1dHRvbjogKCkgPT4ge1xyXG4gICAgICAgIC8vICAgICBkaXNwYXRjaC5kaXNwYXRjaChTVV9Ub29sQm94UHJlc2VuX01heEJ1dHRvbl9DbGljaygpKTtcclxuICAgICAgICAvLyB9LFxyXG4gICAgICAgIC8vIG9uQ2xpY2sxMDBQZXJCdXR0b246ICgpID0+IHtcclxuICAgICAgICAvLyAgICAgZGlzcGF0Y2guZGlzcGF0Y2goU1VfVG9vbEJveFByZXNlbl8xMDBQZXJCdXR0b25fQ2xpY2soKSk7XHJcbiAgICAgICAgLy8gfSxcclxuICAgICAgICBvbkNhbGxMYXlvdXQ6IChwYXlsb2FkKSA9PiB7XHJcbiAgICAgICAgICAgIGRpc3BhdGNoLmRpc3BhdGNoKFNVX1Rvb2xCb3hQcmVzZW5fTGF5b3V0Q2FsbEJ1dHRvbl9DbGljayhwYXlsb2FkKSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkNhbGxTb3phaTogKHBheWxvYWQpID0+IHtcclxuICAgICAgICAgICAgZGlzcGF0Y2guZGlzcGF0Y2goU1VfVG9vbEJveFByZXNlbl9Tb3phaUNhbGxCdXR0b25fQ2xpY2socGF5bG9hZCkpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25DYWxsTGluazogKHBheWxvYWQpID0+IHtcclxuICAgICAgICAgICAgZGlzcGF0Y2guZGlzcGF0Y2goU1VfVG9vbEJveFByZXNlbl9MaW5rQ2FsbEJ1dHRvbl9DbGljayhwYXlsb2FkKSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgb25FZGl0T25DbGljazogKCkgPT4ge1xyXG4gICAgICAgICAgICBkaXNwYXRjaC5kaXNwYXRjaChTVV9Ub29sQm94UHJlc2VuX0VkaXRPbk9mZkJ1dHRvbl9DbGljayh7b25vZmY6ICdvbid9KSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkVkaXRPZmZDbGljazogKCkgPT4ge1xyXG4gICAgICAgICAgICBkaXNwYXRjaC5kaXNwYXRjaChTVV9Ub29sQm94UHJlc2VuX0VkaXRPbk9mZkJ1dHRvbl9DbGljayh7b25vZmY6ICdvZmYnfSkpO1xyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XHJcblxyXG4vLyBjb25uZWN0XHJcbmNvbnN0IFRvb2xCb3hQcmVzZW5NYXAgPSBjb25uZWN0KFxyXG4gICAgbWFwU3RhdGVUb1Byb3BzLFxyXG4gICAgbWFwRGlzcGF0Y2hUb1Byb3BzLFxyXG4gICAgbWVyZ2VQcm9wc1xyXG4pKFRvb2xCb3hQcmVzZW4pO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgVG9vbEJveFByZXNlbk1hcDtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuXHJcbmltcG9ydCB7IFN0cmluZyB9IGZyb20gJy4uL2xpYnMvc3RyaW5nLmpzJztcclxuaW1wb3J0IHsgQm94IH0gZnJvbSAnLi4vbGlicy9ib3guanMnO1xyXG5cclxuY29uc3Qgc3R5bGVzID0ge1xyXG4gICAgY29udGFpbmVyOiB7XHJcbiAgICAgICAgdGV4dEFsaWduOiAnbGVmdCcsXHJcbiAgICAgICAgcGFkZGluZ1RvcDogJzVweCcsXHJcbiAgICB9LFxyXG4gICAgbGluZToge1xyXG4gICAgICAgIGhlaWdodDogJzIwcHgnLFxyXG4gICAgICAgIGZvbnRTaXplOiAnMTJweCcsXHJcbiAgICAgICAgbGluZUhlaWdodDogJzIwcHgnLFxyXG4gICAgfSxcclxuICAgIGJ1dHRvbjoge1xyXG4gICAgICAgIHdpZHRoOiAnNDBweCcsXHJcbiAgICAgICAgaGVpZ2h0OiAnMTRweCcsXHJcbiAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcclxuICAgICAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxyXG4gICAgICAgIGxpbmVIZWlnaHQ6ICcxNHB4JyxcclxuICAgICAgICBib3JkZXI6ICcxcHggc29saWQgZ3JheScsXHJcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnbGlnaHRncmVlbicsXHJcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnMnB4JyxcclxuICAgIH0sXHJcbiAgICBib3hsaXN0Ym94OiB7XHJcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcclxuICAgICAgICBoZWlnaHQ6ICcxMTVweCcsXHJcbiAgICAgICAgLy8gcGFkZGluZ1RvcDogJzVweCcsXHJcbiAgICAgICAgb3ZlcmZsb3dZOiAnc2Nyb2xsJyxcclxuICAgICAgICBvdXRsaW5lOiAnMXB4IHNvbGlkICNhOGE4YTgnLFxyXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3doaXRlJyxcclxuICAgIH0sXHJcbiAgICBzb3phaWxpc3Rib3g6IHtcclxuICAgICAgICB3aWR0aDogJzEwMCUnLFxyXG4gICAgICAgIGhlaWdodDogJzExNXB4JyxcclxuICAgICAgICBvdmVyZmxvd1k6ICdzY3JvbGwnLFxyXG4gICAgICAgIC8vIG1hcmdpblRvcDogJzVweCcsXHJcbiAgICAgICAgb3V0bGluZTogJzFweCBzb2xpZCAjYThhOGE4JyxcclxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd3aGl0ZScsXHJcbiAgICB9LFxyXG4gICAgbGlua2xpc3Rib3g6IHtcclxuICAgICAgICB3aWR0aDogJzEwMCUnLFxyXG4gICAgICAgIGhlaWdodDogJzExNXB4JyxcclxuICAgICAgICBvdmVyZmxvd1k6ICdzY3JvbGwnLFxyXG4gICAgICAgIC8vIG1hcmdpblRvcDogJzVweCcsXHJcbiAgICAgICAgb3V0bGluZTogJzFweCBzb2xpZCAjYThhOGE4JyxcclxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd3aGl0ZScsXHJcbiAgICB9LFxyXG4gICAgbGlzdDoge1xyXG4gICAgICAgIHdpZHRoOiAnMTAwJScsXHJcbiAgICAgICAgaGVpZ2h0OiAnMjBweCcsXHJcbiAgICAgICAgbGluZUhlaWdodDogJzIwcHgnLFxyXG4gICAgICAgIGJvcmRlckJvdHRvbTogJzFweCBzb2xpZCBncmF5JyxcclxuICAgIH0sXHJcbiAgICBsaW5rbGlzdDoge1xyXG4gICAgICAgIHdpZHRoOiAnMTAwJScsXHJcbiAgICAgICAgaGVpZ2h0OiAnNDBweCcsXHJcbiAgICAgICAgbGluZUhlaWdodDogJzIwcHgnLFxyXG4gICAgICAgIGJvcmRlckJvdHRvbTogJzFweCBzb2xpZCBncmF5JyxcclxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdsaWdodGdyZWVuJyxcclxuICAgIH0sXHJcbn07XHJcblxyXG5jb25zdCBDb2xvciA9IHtcclxuICAgIHRleHQ6ICdsaWdodHllbGxvdycsXHJcbiAgICBpbWFnZTogJ2xpZ2h0Y3lhbicsXHJcbiAgICBzZWxlY3Q6ICdyZWQnLFxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVG9vbEJveExpc3QgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcblxyXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgICAgICAgIGdyb3VwX2lkOiAnJyxcclxuICAgICAgICAgICAgc296YWlfaWQ6ICcnLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgIFxyXG4gICAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgZ3JvdXBfaWQ6ICcnLFxyXG4gICAgICAgICAgICBzb3phaV9pZDogJycsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xpY2tCb3hMaXN0KGdyb3VwX2lkKSB7XHJcbiAgICAgICAgbGV0IGdpZDtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuZ3JvdXBfaWQgPT0gZ3JvdXBfaWQpIHtcclxuICAgICAgICAgICAgZ2lkID0gJyc7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZ2lkID0gZ3JvdXBfaWQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgZ3JvdXBfaWQ6IGdpZCxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBjbGlja1NvemFpTGlzdChzb3phaV9pZCkge1xyXG4gICAgICAgIGxldCBzaWQ7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLnNvemFpX2lkID09IHNvemFpX2lkKSB7XHJcbiAgICAgICAgICAgIHNpZCA9ICcnO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHNpZCA9IHNvemFpX2lkO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgIHNvemFpX2lkOiBzaWQsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xpY2tDcmVhdGVCdXR0b24oKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuZ3JvdXBfaWQgPT0gJydcclxuICAgICAgICAgfHwgdGhpcy5zdGF0ZS5zb3phaV9pZCA9PSAnJykge1xyXG4gICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8g56iu5Yil77yI44OG44Kt44K544OIIG9yIOeUu+WDj++8ieOBjOWQiOOBo+OBpuOBhOOBquOBkeOCjOOBsOOAgeODquODs+OCr+OBp+OBjeOBquOBhFxyXG4gICAgICAgIGNvbnN0IGJveF90eXBlID0gdGhpcy5wcm9wcy5nZXRUeXBlQm94R3JvdXAodGhpcy5zdGF0ZS5ncm91cF9pZCk7XHJcbiAgICAgICAgY29uc3Qgc296YWlfdHlwZSA9IHRoaXMucHJvcHMuZ2V0VHlwZVNvemFpKHRoaXMuc3RhdGUuc296YWlfaWQpO1xyXG4gICAgICAgIGxldCBjaGVjayA9ICduZyc7XHJcbiAgICAgICAgaWYgKGJveF90eXBlID09ICd0ZXh0Jykge1xyXG4gICAgICAgICAgICBpZiAoc296YWlfdHlwZSA9PSAndGV4dCcpIHtcclxuICAgICAgICAgICAgICAgIGNoZWNrID0gJ29rJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAoYm94X3R5cGUgPT0gJ2ltYWdlJykge1xyXG4gICAgICAgICAgICBpZiAoc296YWlfdHlwZSA9PSAnaW1hZ2UnKSB7XHJcbiAgICAgICAgICAgICAgICBjaGVjayA9ICdvayc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNoZWNrID09ICduZycpIHtcclxuICAgICAgICAgICAgYWxlcnQoJ+ODnOODg+OCr+OCueOBruOCv+OCpOODl+OBqOe0oOadkOOBruOCv+OCpOODl+OBjOeVsOOBquOCiuOBvuOBmeOAguODquODs+OCr+OBp+OBjeOBvuOBm+OCkycpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnByb3BzLm9uQ2xpY2tDcmVhdGVCdXR0b24oe1xyXG4gICAgICAgICAgICBncm91cF9pZDogdGhpcy5zdGF0ZS5ncm91cF9pZCxcclxuICAgICAgICAgICAgc296YWlfaWQ6IHRoaXMuc3RhdGUuc296YWlfaWQsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xpY2tEZWxldGVCdXR0b24oZ3JvdXBfaWQpIHtcclxuICAgICAgICBpZiAoY29uZmlybSgn5YmK6Zmk44GX44G+44GZ44CC44KI44KN44GX44GE44Gn44GZ44GL77yfJykgPT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5wcm9wcy5vbkNsaWNrRGVsZXRlQnV0dG9uKHtcclxuICAgICAgICAgICAgZ3JvdXBfaWQ6IGdyb3VwX2lkLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOOCsOODq+ODvOODl+WQjeOBjOODquODs+OCr+ODquOCueODiOOBq+WQq+OBvuOCjOOBpuOBhOOCi+OBi+OBqeOBhuOBi+OCkui/lOOBmVxyXG4gICAgaXNJbmNsdWRlTGlua0xpc3RHcm91cChncm91cF9pZCkge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5wcm9wcy5saW5rcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5saW5rc1tpXS5ncm91cF9pZCA9PSBncm91cF9pZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyDntKDmnZBJ772E44GM44Oq44Oz44Kv44Oq44K544OI44Gr5ZCr44G+44KM44Gm44GE44KL44GL44Gp44GG44GL44KS6L+U44GZXHJcbiAgICBpc0luY2x1ZGVMaW5rTGlzdFNvemFpSWQoc296YWlfaWQpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucHJvcHMubGlua3MubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMubGlua3NbaV0uc296YWlfaWQgPT0gc296YWlfaWQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7ICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICBncm91cGxpc3QoKSB7XHJcbiAgICAgICAgbGV0IGxpc3QgPSBbXTtcclxuICAgICAgICBsZXQgaHRtbCA9IFtdO1xyXG5cclxuICAgICAgICAvLyDjg5zjg4Pjgq/jgrnjga7jgrDjg6vjg7zjg5dJROOBruODquOCueODiO+8iOmFjeWIl++8ieOCkuW+l+OCi1xyXG4gICAgICAgIGNvbnN0IGdyb3VwX2FyeSA9IEJveC5nZXRHcm91cEFyeSh0aGlzLnByb3BzLmJveHMpO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGdyb3VwX2FyeS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAvLyDjg6rjg7Pjgq/jg6rjgrnjg4jjgavov73liqDjgZXjgozjgabjgYTjgovjgoLjga7jga/nhKHoppZcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNJbmNsdWRlTGlua0xpc3RHcm91cChncm91cF9hcnlbaV0pID09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyDjg5zjg4Pjgq/jgrnjg6rjgrnjg4jjgajjgZfjgabov73liqDjgZnjgotcclxuICAgICAgICAgICAgbGlzdC5wdXNoKHtcclxuICAgICAgICAgICAgICAgIGdyb3VwX2lkOiBncm91cF9hcnlbaV0sXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCBiZ2NvbG9yO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZS5ncm91cF9pZCA9PSBsaXN0W2ldLmdyb3VwX2lkKSB7XHJcbiAgICAgICAgICAgICAgICBiZ2NvbG9yID0gJ3JlZCc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0eXBlID0gdGhpcy5wcm9wcy5nZXRUeXBlQm94R3JvdXAobGlzdFtpXS5ncm91cF9pZCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZSA9PSAndGV4dCcpIHtcclxuICAgICAgICAgICAgICAgICAgICBiZ2NvbG9yID0gQ29sb3IudGV4dDtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PSAnaW1hZ2UnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYmdjb2xvciA9IENvbG9yLmltYWdlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBodG1sLnB1c2goXHJcbiAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgLi4uc3R5bGVzLmxpc3QsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogYmdjb2xvcixcclxuICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eyhlKSA9PiB0aGlzLmNsaWNrQm94TGlzdChsaXN0W2ldLmdyb3VwX2lkKX1cclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICB7bGlzdFtpXS5ncm91cF9pZH1cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGh0bWw7XHJcbiAgICB9XHJcblxyXG4gICAgc296YWlsaXN0KCkge1xyXG4gICAgICAgIGxldCBsaXN0ID0gW107XHJcbiAgICAgICAgbGV0IGh0bWwgPSBbXTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnByb3BzLnNvemFpLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIC8vIOODquODs+OCr+ODquOCueODiOOBq+i/veWKoOOBleOCjOOBpuOBhOOCi+OCguOBruOBr+eEoeimllxyXG4gICAgICAgICAgICBpZiAodGhpcy5pc0luY2x1ZGVMaW5rTGlzdFNvemFpSWQodGhpcy5wcm9wcy5zb3phaVtpXS5zb3phaV9pZCkgPT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIOe0oOadkOODquOCueODiOOBqOOBl+OBpui/veWKoOOBmeOCi1xyXG4gICAgICAgICAgICBsaXN0LnB1c2goe1xyXG4gICAgICAgICAgICAgICAgc296YWlfaWQ6IHRoaXMucHJvcHMuc296YWlbaV0uc296YWlfaWQsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCBiZ2NvbG9yO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZS5zb3phaV9pZCA9PSBsaXN0W2ldLnNvemFpX2lkKSB7XHJcbiAgICAgICAgICAgICAgICBiZ2NvbG9yID0gJ3JlZCc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0eXBlID0gdGhpcy5wcm9wcy5nZXRUeXBlU296YWkobGlzdFtpXS5zb3phaV9pZCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZSA9PSAndGV4dCcpIHtcclxuICAgICAgICAgICAgICAgICAgICBiZ2NvbG9yID0gQ29sb3IudGV4dDtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PSAnaW1hZ2UnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYmdjb2xvciA9IENvbG9yLmltYWdlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBodG1sLnB1c2goXHJcbiAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgLi4uc3R5bGVzLmxpc3QsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogYmdjb2xvcixcclxuICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eyhlKSA9PiB0aGlzLmNsaWNrU296YWlMaXN0KGxpc3RbaV0uc296YWlfaWQpfVxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIHtsaXN0W2ldLnNvemFpX2lkfVxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gaHRtbDtcclxuICAgIH1cclxuXHJcbiAgICBsaW5rbGlzdCgpIHtcclxuICAgICAgICBsZXQgaHRtbCA9IFtdO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucHJvcHMubGlua3MubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaHRtbC5wdXNoKFxyXG4gICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnN0eWxlcy5saW5rbGlzdCxcclxuICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogJzlweCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICc5cHgnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnbGlnaHRncmF5JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KGUpID0+IHRoaXMuY2xpY2tEZWxldGVCdXR0b24odGhpcy5wcm9wcy5saW5rc1tpXS5ncm91cF9pZCl9XHJcbiAgICAgICAgICAgICAgICAgICAgPuKclTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAmbmJzcDtcclxuICAgICAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5saW5rc1tpXS5ncm91cF9pZH08YnIvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPXt7d2lkdGg6ICc5cHgnLCBoZWlnaHQ6ICc5cHgnfX0+44CAPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICZuYnNwO1xyXG4gICAgICAgICAgICAgICAgICAgIHt0aGlzLnByb3BzLmxpbmtzW2ldLnNvemFpX2lkfVxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gaHRtbDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgIHN0eWxlPXtzdHlsZXMuY29udGFpbmVyfVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgLi4uc3R5bGVzLmxpbmUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnYmx1ZScsXHJcbiAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICDjgrDjg6vjg7zjg5fjg6rjgrnjg4hcclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnN0eWxlcy5ib3hsaXN0Ym94LFxyXG4gICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAge3RoaXMuZ3JvdXBsaXN0KCl9XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgLi4uc3R5bGVzLmxpbmUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnYmx1ZScsXHJcbiAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICDntKDmnZDjg6rjgrnjg4hcclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnN0eWxlcy5zb3phaWxpc3Rib3gsXHJcbiAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICB7dGhpcy5zb3phaWxpc3QoKX1cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5zdHlsZXMuYnV0dG9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogJzYwcHgnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmbG9hdDogJ3JpZ2h0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luVG9wOiAnNXB4JyxcclxuICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eyhlKSA9PiB0aGlzLmNsaWNrQ3JlYXRlQnV0dG9uKCl9XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAg44Oq44Oz44KvXHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9e3tjbGVhcjogJ2JvdGgnfX0vPlxyXG5cclxuICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5zdHlsZXMubGluZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICdncmVlbicsXHJcbiAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICDjg6rjg7Pjgq/jg6rjgrnjg4hcclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnN0eWxlcy5saW5rbGlzdGJveCxcclxuICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIHt0aGlzLmxpbmtsaXN0KCl9XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XHJcblxyXG5pbXBvcnQgVG9vbEJveExpbmsgZnJvbSAnLi9Ub29sQm94TGluay5qcyc7XHJcblxyXG5pbXBvcnQgeyBCb3ggfSBmcm9tICcuLi9saWJzL2JveC5qcyc7XHJcbmltcG9ydCB7IFNvemFpIH0gZnJvbSAnLi4vbGlicy9zb3phaS5qcyc7XHJcblxyXG5pbXBvcnQge1xyXG4gICAgU1VfVG9vbEJveExpbmtfQ3JlYXRlQnV0dG9uX0NsaWNrLFxyXG4gICAgU1VfVG9vbEJveExpbmtfRGVsZXRlQnV0dG9uX0NsaWNrLFxyXG59IGZyb20gJy4uL2FjdGlvbnNfc3UvdG9vbGJveGxpbmsuanMnO1xyXG5cclxuXHJcbi8vIG1hcFN0YXRlVG9Qcm9wc1xyXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSAoc3RhdGUsIHByb3BzKSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIC4uLnN0YXRlLFxyXG4gICAgfTtcclxufVxyXG5cclxuLy8gbWFwRGlzcGF0Y2hUb1Byb3BzXHJcbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcyA9IChkaXNwYXRjaCwgcHJvcHMpID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZGlzcGF0Y2gsXHJcbiAgICB9O1xyXG59XHJcblxyXG4vLyBtZXJnZVByb3BzIFxyXG5jb25zdCBtZXJnZVByb3BzID0gKHN0YXRlLCBkaXNwYXRjaCwgcHJvcHMpID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgLy8geHh4OiB5eXksXHJcbiAgICAgICAgLy8gb25YeHh4OiAoeHh4KSA9PiB7XHJcbiAgICAgICAgLy8gICAgIC4uLi4uXHJcbiAgICAgICAgLy8gICAgIGRpc3BhdGNoLmRpc3BhdGNoKFNVX1h4eHh4eF9YeHh4eF9YeHh4KCkpO1xyXG4gICAgICAgIC8vIH0sXHJcbiAgICAgICAgLy8gLi4ucHJvcHMsXHJcbiAgICAgICAgbGlua3M6IHN0YXRlLmxpbmtzLFxyXG4gICAgICAgIGJveHM6IHN0YXRlLmJveHMsXHJcbiAgICAgICAgc296YWk6IHN0YXRlLnNvemFpLFxyXG4gICAgICAgIFxyXG4gICAgICAgIG9uQ2xpY2tDcmVhdGVCdXR0b246IChwYXlsb2FkKSA9PiB7XHJcbiAgICAgICAgICAgIGRpc3BhdGNoLmRpc3BhdGNoKFNVX1Rvb2xCb3hMaW5rX0NyZWF0ZUJ1dHRvbl9DbGljayhwYXlsb2FkKSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkNsaWNrRGVsZXRlQnV0dG9uOiAocGF5bG9hZCkgPT4ge1xyXG4gICAgICAgICAgICBkaXNwYXRjaC5kaXNwYXRjaChTVV9Ub29sQm94TGlua19EZWxldGVCdXR0b25fQ2xpY2socGF5bG9hZCkpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGdldFR5cGVCb3hHcm91cDogKGdyb3VwX2lkKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGdyb3VwTm9BcnkgPSBCb3guZ2V0R3JvdXBOb0FyeShzdGF0ZS5ib3hzLCBncm91cF9pZCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGJveF9pZCA9IEJveC5nZXRCb3hJZChzdGF0ZS5ib3hzLCBncm91cF9pZCwgZ3JvdXBOb0FyeVswXSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGJveCA9IEJveC5nZXRCb3goc3RhdGUuYm94cywgYm94X2lkKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBib3gudHlwZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGdldFR5cGVTb3phaTogKHNvemFpX2lkKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNvemFpID0gU296YWkuZ2V0U296YWkoc3RhdGUuc296YWksIHNvemFpX2lkKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBzb3phaS50eXBlO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1cclxuXHJcbi8vIGNvbm5lY3RcclxuY29uc3QgVG9vbEJveExpbmtNYXAgPSBjb25uZWN0KFxyXG4gICAgbWFwU3RhdGVUb1Byb3BzLFxyXG4gICAgbWFwRGlzcGF0Y2hUb1Byb3BzLFxyXG4gICAgbWVyZ2VQcm9wc1xyXG4pKFRvb2xCb3hMaW5rKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFRvb2xCb3hMaW5rTWFwO1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5cclxuaW1wb3J0IHsgU3RyaW5nIH0gZnJvbSAnLi4vbGlicy9zdHJpbmcuanMnO1xyXG5cclxuY29uc3Qgc3R5bGVzID0ge1xyXG4gICAgY29udGFpbmVyOiB7XHJcbiAgICAgICAgdGV4dEFsaWduOiAnbGVmdCcsXHJcbiAgICAgICAgcGFkZGluZ1RvcDogJzVweCcsXHJcbiAgICB9LFxyXG4gICAgbGluZToge1xyXG4gICAgICAgIGhlaWdodDogJzIwcHgnLFxyXG4gICAgICAgIGZvbnRTaXplOiAnMTJweCcsXHJcbiAgICAgICAgbGluZUhlaWdodDogJzIwcHgnLFxyXG4gICAgfSxcclxuICAgIGJ1dHRvbjoge1xyXG4gICAgICAgIHdpZHRoOiAnNDBweCcsXHJcbiAgICAgICAgaGVpZ2h0OiAnMTRweCcsXHJcbiAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcclxuICAgICAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxyXG4gICAgICAgIGxpbmVIZWlnaHQ6ICcxNHB4JyxcclxuICAgICAgICBib3JkZXI6ICcxcHggc29saWQgZ3JheScsXHJcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnbGlnaHRncmVlbicsXHJcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnMnB4JyxcclxuICAgIH0sXHJcbiAgICBpbnB1dDoge1xyXG4gICAgICAgIGhlaWdodDogJzlweCcsXHJcbiAgICB9LFxyXG4gICAgbGlzdGJveDoge1xyXG4gICAgICAgIHdpZHRoOiAnMTAwJScsXHJcbiAgICAgICAgaGVpZ2h0OiAnMTE1cHgnLFxyXG4gICAgICAgIC8vIHBhZGRpbmdUb3A6ICc1cHgnLFxyXG4gICAgICAgIG92ZXJmbG93WTogJ3Njcm9sbCcsXHJcbiAgICAgICAgb3V0bGluZTogJzFweCBzb2xpZCAjYThhOGE4JyxcclxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd3aGl0ZScsXHJcbiAgICB9LFxyXG4gICAgdGV4dGJveDoge1xyXG4gICAgICAgIHdpZHRoOiAnMTc0cHgnLFxyXG4gICAgICAgIGhlaWdodDogJzE3NXB4JyxcclxuICAgICAgICBtYXJnaW5Ub3A6ICc1cHgnLFxyXG4gICAgfSxcclxuICAgIGltYWdlYm94OiB7XHJcbiAgICAgICAgZGlzcGxheTogJ3RhYmxlLWNlbGwnLFxyXG4gICAgICAgIHdpZHRoOiAnMTc0cHgnLFxyXG4gICAgICAgIGhlaWdodDogJzE3NXB4JyxcclxuICAgICAgICBtYXJnaW5Ub3A6ICc1cHgnLFxyXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ2dyYXknLFxyXG4gICAgICAgIHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnLFxyXG4gICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXHJcbiAgICB9LFxyXG4gICAgaW1nOiB7XHJcbiAgICAgICAgbWF4V2lkdGg6ICcxNzRweCcsXHJcbiAgICAgICAgbWF4SGVpZ2h0OiAnMTc1cHgnLFxyXG4gICAgfSxcclxuICAgIHNvemFpbGlzdDoge1xyXG4gICAgICAgIHdpZHRoOiAnMTAwJScsXHJcbiAgICAgICAgaGVpZ2h0OiAnMjBweCcsXHJcbiAgICAgICAgbGluZUhlaWdodDogJzIwcHgnLFxyXG4gICAgICAgIGJvcmRlckJvdHRvbTogJzFweCBzb2xpZCBncmF5JyxcclxuICAgICAgICBjdXJzb3I6ICdwb2ludGVyJyxcclxuICAgIH0sXHJcbn07XHJcblxyXG5jb25zdCBDb2xvciA9IHtcclxuICAgIHRleHQ6ICdsaWdodHllbGxvdycsXHJcbiAgICBpbWFnZTogJ2xpZ2h0Y3lhbicsXHJcbiAgICBzZWxlY3Q6ICdyZWQnLFxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVG9vbEJveFNvemFpIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG5cclxuICAgICAgICB0aGlzLmJ1dHRvbiA9ICcnO1xyXG5cclxuICAgICAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICAgICAgICBzb3phaV9pZDogJycsXHJcbiAgICAgICAgICAgIGlucHV0X2lkOiAnJyxcclxuICAgICAgICAgICAgdHlwZTogJycsXHJcbiAgICAgICAgICAgIHRleHQ6ICcnLFxyXG4gICAgICAgICAgICBpbWFnZVVybDogJycsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgXHJcbiAgICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xyXG4gICAgICAgIGxldCBzb3phaSA9ICcnO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmV4dFByb3BzLnNvemFpLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChuZXh0UHJvcHMuc296YWlbaV0uc2VsZWN0ID09ICdvbicpIHtcclxuICAgICAgICAgICAgICAgIHNvemFpID0gbmV4dFByb3BzLnNvemFpW2ldO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChzb3phaSA9PSAnJykge1xyXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgICAgIHNvemFpX2lkOiAnJyxcclxuICAgICAgICAgICAgICAgIGlucHV0X2lkOiAnJyxcclxuICAgICAgICAgICAgICAgIHR5cGU6ICcnLFxyXG4gICAgICAgICAgICAgICAgdGV4dDogJycsXHJcbiAgICAgICAgICAgICAgICBpbWFnZVVybDogJycsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICAgICAgc296YWlfaWQ6IHNvemFpLmlkLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogc296YWkudHlwZSxcclxuICAgICAgICAgICAgICAgIHRleHQ6IHNvemFpLnRleHQsXHJcbiAgICAgICAgICAgICAgICBpbWFnZVVybDogc296YWkuaW1hZ2VVcmwsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjbGlja0xpc3Qoc296YWkpIHtcclxuICAgICAgICB0aGlzLnByb3BzLm9uQ2xpY2tTb3phaUxpc3Qoe3NvemFpX2lkOiBzb3phaS5zb3phaV9pZH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGNsaWNrVXBkYXRlQnV0dG9uKCkge1xyXG4gICAgICAgIGxldCBzb3phaSA9IHtcclxuICAgICAgICAgICAgc296YWlfaWQ6IHRoaXMuc3RhdGUuc296YWlfaWQsXHJcbiAgICAgICAgICAgIHR5cGU6IHRoaXMuc3RhdGUudHlwZSxcclxuICAgICAgICAgICAgdGV4dDogdGhpcy5zdGF0ZS50ZXh0LFxyXG4gICAgICAgICAgICBpbWFnZVVybDogdGhpcy5zdGF0ZS5pbWFnZVVybCxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLnByb3BzLm9uQ2xpY2tVcGRhdGVCdXR0b24oe1xyXG4gICAgICAgICAgICBzb3phaTogc296YWksXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuYnV0dG9uID0gJ3VwZGF0ZSc7XHJcbiAgICB9XHJcblxyXG4gICAgY2xpY2tEZWxldGVCdXR0b24oc296YWlfaWQpIHtcclxuICAgICAgICBpZiAoY29uZmlybSgn5YmK6Zmk44GX44G+44GZ44CC44KI44KN44GX44GE44Gn44GZ44GL77yfJykgPT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5wcm9wcy5vbkNsaWNrRGVsZXRlQnV0dG9uKHtcclxuICAgICAgICAgICAgc296YWlfaWQ6IHNvemFpX2lkLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGNsaWNrQ3JlYXRlQnV0dG9uKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmlucHV0X2lkID09ICcnXHJcbiAgICAgICAgIHx8IHRoaXMuc3RhdGUudHlwZSA9PSAnJykge1xyXG4gICAgICAgICAgICAgYWxlcnQoJ+e0oOadkElE44GK44KI44Gz44K/44Kk44OX44KS5YWl5Yqb44GX44Gm44GP44Gg44GV44GEJyk7XHJcbiAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5wcm9wcy5jaGVja1NvemFpRXhpc3QodGhpcy5zdGF0ZS5pbnB1dF9pZCkpIHtcclxuICAgICAgICAgICAgYWxlcnQoJ+OBk+OBrue0oOadkElE44Gv5pei44Gr5a2Y5Zyo44GX44Gm44GE44G+44GZJyk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLnR5cGUgIT0gJ3RleHQnICYmIHRoaXMuc3RhdGUudHlwZSAhPSAnaW1hZ2UnKSB7XHJcbiAgICAgICAgICAgIGFsZXJ0KCfjgIzjgr/jgqTjg5fjgI3jga8gdGV4dCDjgb7jgZ/jga8gaW1hZ2Ug44Go5YWl5Yqb44GX44Gm44GP44Gg44GV44GEJyk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBpbWFnZVVybCA9ICcnO1xyXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLnR5cGUgPT0gJ2ltYWdlJykge1xyXG4gICAgICAgICAgICBpbWFnZVVybCA9IHRoaXMuc3RhdGUudGV4dDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMucHJvcHMub25DbGlja0NyZWF0ZUJ1dHRvbih7XHJcbiAgICAgICAgICAgIHNvemFpX2lkOiB0aGlzLnN0YXRlLmlucHV0X2lkLFxyXG4gICAgICAgICAgICB0eXBlOiB0aGlzLnN0YXRlLnR5cGUsXHJcbiAgICAgICAgICAgIHRleHQ6IHRoaXMuc3RhdGUudGV4dCxcclxuICAgICAgICAgICAgaW1hZ2VVcmw6IGltYWdlVXJsLFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgaW5wdXRfaWQ6ICcnLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHNvemFpbGlzdCgpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICB0aGlzLnByb3BzLnNvemFpLm1hcCgocmVjKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgY29sb3I7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHJlYy50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICd0ZXh0JzpcclxuICAgICAgICAgICAgICAgICAgICBjb2xvciA9IENvbG9yLnRleHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdpbWFnZSc6XHJcbiAgICAgICAgICAgICAgICAgICAgY29sb3IgPSBDb2xvci5pbWFnZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAocmVjLnNlbGVjdCA9PSAnb24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sb3IgPSBDb2xvci5zZWxlY3Q7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5zdHlsZXMuc296YWlsaXN0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBjb2xvcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KGUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xpY2tMaXN0KHJlYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uTW91c2VEb3duPXsoZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDntKDmnZDjga7jg4njg6njg4PjgrDjgqLjg7Pjg4njg4njg63jg4Pjg5flh6bnkIZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuc296YWlNb3VzZURvd24oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHg6IGUucGFnZVgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeTogZS5wYWdlWSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnc296YWknLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiByZWMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogJzlweCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAnOXB4JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdsaWdodGdyYXknLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eyhlKSA9PiB0aGlzLmNsaWNrRGVsZXRlQnV0dG9uKHJlYy5zb3phaV9pZCl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgID7inJU8L3NwYW4+IHtyZWMuc296YWlfaWR9XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIClcclxuICAgIH1cclxuXHJcbiAgICBpZHR5cGUoKSB7XHJcbiAgICAgICAgbGV0IGh0bWw7XHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuc296YWlfaWQgPT0gJycpIHtcclxuICAgICAgICAgICAgaHRtbCA9IFtcclxuICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5zdHlsZXMubGluZSxcclxuICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIOe0oOadkElE77yaPGlucHV0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLnN0eWxlcy5pbnB1dCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICc4MHB4JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLmlucHV0X2lkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gdGhpcy5zZXRTdGF0ZSh7aW5wdXRfaWQ6IGUudGFyZ2V0LnZhbHVlfSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+LFxyXG4gICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnN0eWxlcy5saW5lLFxyXG4gICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAg44K/44Kk44OX77yaPGlucHV0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLnN0eWxlcy5pbnB1dCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICc4MHB4JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLnR5cGV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiB0aGlzLnNldFN0YXRlKHt0eXBlOiBlLnRhcmdldC52YWx1ZX0pfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICBdO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGh0bWwgPSBbXHJcbiAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgLi4uc3R5bGVzLmxpbmUsXHJcbiAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICDntKDmnZBJRO+8mnt0aGlzLnN0YXRlLnNvemFpX2lkfVxyXG4gICAgICAgICAgICAgICAgPC9kaXY+LFxyXG4gICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnN0eWxlcy5saW5lLFxyXG4gICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAg44K/44Kk44OX77yae3RoaXMuc3RhdGUudHlwZX1cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICBdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGh0bWw7XHJcbiAgICB9XHJcblxyXG4gICAgbmV3dXBkYXRlYnV0dG9uKCkge1xyXG4gICAgICAgIGxldCBodG1sO1xyXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLnNvemFpX2lkID09ICcnKSB7XHJcbiAgICAgICAgICAgIGh0bWwgPSBbXHJcbiAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgLi4uc3R5bGVzLmJ1dHRvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICc2MHB4JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmxvYXQ6ICdyaWdodCcsXHJcbiAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoZSkgPT4gdGhpcy5jbGlja0NyZWF0ZUJ1dHRvbigpfVxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIOaWsOimj+S9nOaIkFxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIF07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGUudHlwZSA9PSAndGV4dCcpIHtcclxuICAgICAgICAgICAgICAgIGh0bWwgPSBbXHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uc3R5bGVzLmJ1dHRvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZsb2F0OiAncmlnaHQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoZSkgPT4gdGhpcy5jbGlja1VwZGF0ZUJ1dHRvbigpfVxyXG4gICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAg5pu05pawXHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8g55S75YOP44Gv44CM5pu05paw44CN44Oc44K/44Oz44Gv44Gq44GXXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBodG1sO1xyXG4gICAgfVxyXG5cclxuICAgIHNvemFpYXJlYSgpIHtcclxuICAgICAgICBsZXQgaHRtbDtcclxuICAgICAgICBpZiAodGhpcy5zdGF0ZS5zb3phaV9pZCA9PSAnJykge1xyXG4gICAgICAgICAgICBodG1sID0gW1xyXG4gICAgICAgICAgICAgICAgPHRleHRhcmVhXHJcbiAgICAgICAgICAgICAgICAgICAgaWQ9XCJ0b29sYm94c296YWl0ZXh0YXJlYVwiXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUudGV4dH1cclxuICAgICAgICAgICAgICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5zdHlsZXMudGV4dGJveCxcclxuICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gdGhpcy5zZXRTdGF0ZSh7dGV4dDogZS50YXJnZXQudmFsdWV9KX1cclxuICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgIF07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGUudHlwZSA9PSAndGV4dCcpIHtcclxuICAgICAgICAgICAgICAgIGh0bWwgPSBbXHJcbiAgICAgICAgICAgICAgICAgICAgPHRleHRhcmVhXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkPVwidG9vbGJveHNvemFpdGV4dGFyZWFcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS50ZXh0fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uc3R5bGVzLnRleHRib3gsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gdGhpcy5zZXRTdGF0ZSh7dGV4dDogZS50YXJnZXQudmFsdWV9KX1cclxuICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGh0bWwgPSBbXHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZD1cInRvb2xib3hzb3phaWltYWdlYXJlYVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5zdHlsZXMuaW1hZ2Vib3gsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW1nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM9e3RoaXMuc3RhdGUuaW1hZ2VVcmx9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLnN0eWxlcy5pbWcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGh0bWw7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICBpZD1cInRvb2xib3hzb3phaVwiXHJcbiAgICAgICAgICAgICAgICBzdHlsZT17c3R5bGVzLmNvbnRhaW5lcn1cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBzdHlsZT17e2hlaWdodDogJzVweCd9fS8+XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5zdHlsZXMubGlzdGJveCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luQm90dG9tOiAnNXB4JyxcclxuICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIHt0aGlzLnNvemFpbGlzdCgpfVxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAge3RoaXMuaWR0eXBlKCl9XHJcblxyXG4gICAgICAgICAgICAgICAge3RoaXMuc296YWlhcmVhKCl9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHt0aGlzLm5ld3VwZGF0ZWJ1dHRvbigpfVxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApXHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcclxuXHJcbmltcG9ydCBUb29sQm94U296YWkgZnJvbSAnLi9Ub29sQm94U296YWkuanMnO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIFNVX1Rvb2xCb3hTb3phaV9VcGRhdGVCdXR0b25fQ2xpY2ssXHJcbiAgICBTVV9Ub29sQm94U296YWlfRGVsZXRlQnV0dG9uX0NsaWNrLFxyXG4gICAgU1VfVG9vbEJveFNvemFpX0NyZWF0ZUJ1dHRvbl9DbGljayxcclxuICAgIFNVX1Rvb2xCb3hTb3phaV9Tb3phaV9Ub2dnbGUsXHJcbn0gZnJvbSAnLi4vYWN0aW9uc19zdS90b29sYm94c296YWkuanMnO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIFNVX0RBbmREX01vdXNlRG93bixcclxufSBmcm9tICcuLi9hY3Rpb25zX3N1L2RhbmRkLmpzJztcclxuXHJcblxyXG4vLyBtYXBTdGF0ZVRvUHJvcHNcclxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gKHN0YXRlLCBwcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAuLi5zdGF0ZSxcclxuICAgIH07XHJcbn1cclxuXHJcbi8vIG1hcERpc3BhdGNoVG9Qcm9wc1xyXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHMgPSAoZGlzcGF0Y2gsIHByb3BzKSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGRpc3BhdGNoLFxyXG4gICAgfTtcclxufVxyXG5cclxuLy8gbWVyZ2VQcm9wcyBcclxuY29uc3QgbWVyZ2VQcm9wcyA9IChzdGF0ZSwgZGlzcGF0Y2gsIHByb3BzKSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIC8vIHh4eDogeXl5LFxyXG4gICAgICAgIC8vIG9uWHh4eDogKHh4eCkgPT4ge1xyXG4gICAgICAgIC8vICAgICAuLi4uLlxyXG4gICAgICAgIC8vICAgICBkaXNwYXRjaC5kaXNwYXRjaChTVV9YeHh4eHhfWHh4eHhfWHh4eCgpKTtcclxuICAgICAgICAvLyB9LFxyXG4gICAgICAgIC8vIC4uLnByb3BzLFxyXG4gICAgICAgIHNvemFpOiBzdGF0ZS5zb3phaSxcclxuXHJcbiAgICAgICAgb25DbGlja1NvemFpTGlzdDogKHBheWxvYWQpID0+IHtcclxuICAgICAgICAgICAgZGlzcGF0Y2guZGlzcGF0Y2goU1VfVG9vbEJveFNvemFpX1NvemFpX1RvZ2dsZShwYXlsb2FkKSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkNsaWNrVXBkYXRlQnV0dG9uOiAocGF5bG9hZCkgPT4ge1xyXG4gICAgICAgICAgICBkaXNwYXRjaC5kaXNwYXRjaChTVV9Ub29sQm94U296YWlfVXBkYXRlQnV0dG9uX0NsaWNrKHBheWxvYWQpKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uQ2xpY2tEZWxldGVCdXR0b246IChwYXlsb2FkKSA9PiB7XHJcbiAgICAgICAgICAgIGRpc3BhdGNoLmRpc3BhdGNoKFNVX1Rvb2xCb3hTb3phaV9EZWxldGVCdXR0b25fQ2xpY2socGF5bG9hZCkpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25DbGlja0NyZWF0ZUJ1dHRvbjogKHBheWxvYWQpID0+IHtcclxuICAgICAgICAgICAgZGlzcGF0Y2guZGlzcGF0Y2goU1VfVG9vbEJveFNvemFpX0NyZWF0ZUJ1dHRvbl9DbGljayhwYXlsb2FkKSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgY2hlY2tTb3phaUV4aXN0OiAoc296YWlfaWQpID0+IHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdGF0ZS5zb3phaS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlLnNvemFpW2ldLnNvemFpX2lkID09IHNvemFpX2lkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBzb3phaU1vdXNlRG93bjogKHBheWxvYWQpID0+IHtcclxuICAgICAgICAgICAgZGlzcGF0Y2guZGlzcGF0Y2goU1VfREFuZERfTW91c2VEb3duKHBheWxvYWQpKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XHJcblxyXG4vLyBjb25uZWN0XHJcbmNvbnN0IFRvb2xCb3hTb3phaU1hcCA9IGNvbm5lY3QoXHJcbiAgICBtYXBTdGF0ZVRvUHJvcHMsXHJcbiAgICBtYXBEaXNwYXRjaFRvUHJvcHMsXHJcbiAgICBtZXJnZVByb3BzXHJcbikoVG9vbEJveFNvemFpKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFRvb2xCb3hTb3phaU1hcDtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuXHJcbmltcG9ydCB7IFN0cmluZyB9IGZyb20gJy4uL2xpYnMvc3RyaW5nLmpzJztcclxuXHJcbmNvbnN0IHN0eWxlcyA9IHtcclxuICAgIGNvbnRhaW5lcjoge1xyXG4gICAgICAgIHRleHRBbGlnbjogJ2xlZnQnLFxyXG4gICAgfSxcclxuICAgIGxpbmU6IHtcclxuICAgICAgICBoZWlnaHQ6ICcyMHB4JyxcclxuICAgICAgICBmb250U2l6ZTogJzEycHgnLFxyXG4gICAgICAgIGxpbmVIZWlnaHQ6ICcyMHB4JyxcclxuICAgIH0sXHJcbiAgICBidXR0b246IHtcclxuICAgICAgICB3aWR0aDogJzQwcHgnLFxyXG4gICAgICAgIGhlaWdodDogJzE0cHgnLFxyXG4gICAgICAgIGZvbnRTaXplOiAnMTJweCcsXHJcbiAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcclxuICAgICAgICBsaW5lSGVpZ2h0OiAnMTRweCcsXHJcbiAgICAgICAgYm9yZGVyOiAnMXB4IHNvbGlkIGdyYXknLFxyXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ2xpZ2h0Z3JlZW4nLFxyXG4gICAgICAgIGJvcmRlclJhZGl1czogJzJweCcsXHJcbiAgICB9LFxyXG4gICAgaW5wdXQ6IHtcclxuICAgICAgICBoZWlnaHQ6ICc5cHgnLFxyXG4gICAgICAgIGZvbnRTaXplOiAnOXB4JyxcclxuICAgIH0sXHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUb29sQm94VGV4dERhdGEgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcblxyXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgICAgICAgIHBhZGRpbmdfanM6IHByb3BzLmJveC50ZXh0LnBhZGRpbmdfanMsXHJcbiAgICAgICAgICAgIHBhZGRpbmdfamU6IHByb3BzLmJveC50ZXh0LnBhZGRpbmdfamUsXHJcbiAgICAgICAgICAgIHBhZGRpbmdfZ3M6IHByb3BzLmJveC50ZXh0LnBhZGRpbmdfZ3MsXHJcbiAgICAgICAgICAgIHBhZGRpbmdfZ2U6IHByb3BzLmJveC50ZXh0LnBhZGRpbmdfZ2UsXHJcbiAgICAgICAgICAgIGt1bWlob2tvOiBwcm9wcy5ib3gudGV4dC5rdW1paG9rbyxcclxuICAgICAgICAgICAgc2l6ZV9qOiBwcm9wcy5ib3gudGV4dC5zaXplX2osXHJcbiAgICAgICAgICAgIHNpemVfZzogcHJvcHMuYm94LnRleHQuc2l6ZV9nLFxyXG4gICAgICAgICAgICBneW9rYW46IHByb3BzLmJveC50ZXh0Lmd5b2thbixcclxuICAgICAgICAgICAgZm9udDogcHJvcHMuYm94LnRleHQuZm9udCxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICBwYWRkaW5nX2pzOiBuZXh0UHJvcHMuYm94LnRleHQucGFkZGluZ19qcyxcclxuICAgICAgICAgICAgcGFkZGluZ19qZTogbmV4dFByb3BzLmJveC50ZXh0LnBhZGRpbmdfamUsXHJcbiAgICAgICAgICAgIHBhZGRpbmdfZ3M6IG5leHRQcm9wcy5ib3gudGV4dC5wYWRkaW5nX2dzLFxyXG4gICAgICAgICAgICBwYWRkaW5nX2dlOiBuZXh0UHJvcHMuYm94LnRleHQucGFkZGluZ19nZSxcclxuICAgICAgICAgICAga3VtaWhva286IG5leHRQcm9wcy5ib3gudGV4dC5rdW1paG9rbyxcclxuICAgICAgICAgICAgc2l6ZV9qOiBuZXh0UHJvcHMuYm94LnRleHQuc2l6ZV9qLFxyXG4gICAgICAgICAgICBzaXplX2c6IG5leHRQcm9wcy5ib3gudGV4dC5zaXplX2csXHJcbiAgICAgICAgICAgIGd5b2thbjogbmV4dFByb3BzLmJveC50ZXh0Lmd5b2thbixcclxuICAgICAgICAgICAgZm9udDogbmV4dFByb3BzLmJveC50ZXh0LmZvbnQsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xpY2tVcGRhdGVCdXR0b24oKSB7XHJcbiAgICAgICAgbGV0IGJveCA9IHRoaXMucHJvcHMuYm94O1xyXG5cclxuICAgICAgICBpZiAodGhpcy5zdGF0ZS5wYWRkaW5nX2pzID09PSAnJ1xyXG4gICAgICAgICB8fCB0aGlzLnN0YXRlLnBhZGRpbmdfamUgPT09ICcnXHJcbiAgICAgICAgIHx8IHRoaXMuc3RhdGUucGFkZGluZ19ncyA9PT0gJydcclxuICAgICAgICAgfHwgdGhpcy5zdGF0ZS5wYWRkaW5nX2dlID09PSAnJ1xyXG4gICAgICAgICB8fCB0aGlzLnN0YXRlLmt1bWlob2tvID09PSAnJ1xyXG4gICAgICAgICB8fCB0aGlzLnN0YXRlLnNpemVfaiA9PT0gJydcclxuICAgICAgICAgfHwgdGhpcy5zdGF0ZS5zaXplX2cgPT09ICcnXHJcbiAgICAgICAgIHx8IHRoaXMuc3RhdGUuZ3lva2FuID09PSAnJ1xyXG4gICAgICAgICB8fCB0aGlzLnN0YXRlLmZvbnQgPT09ICcnKSB7XHJcbiAgICAgICAgICAgICBhbGVydCgn5YWo44Gm44Gu6aCF55uu44KS5YWl5Yqb44GX44Gm44GP44Gg44GV44GEJyk7XHJcbiAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5zdGF0ZS5rdW1paG9rbyAhPSAndGF0ZScgJiYgdGhpcy5zdGF0ZS5rdW1paG9rbyAhPSAneW9rbycpIHtcclxuICAgICAgICAgICAgYWxlcnQoJ+OAjOe1hOaWueWQkeOAjeOBr+OAgXRhdGUg44G+44Gf44GvIHlva28g44Go5YWl5Yqb44GX44Gm44GP44Gg44GV44GEJyk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmZvbnQgPCAxIHx8IHRoaXMuc3RhdGUuZm9udCA+IDQpIHtcclxuICAgICAgICAgICAgYWxlcnQoJ+OAjOODleOCqeODs+ODiE5v44CN44Gv44CBMSDvvZ4gNCDjgaflhaXlipvjgZfjgabjgY/jgaDjgZXjgYQnKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYm94LmlkID0gdGhpcy5wcm9wcy5ib3guaWQ7XHJcbiAgICAgICAgYm94LnRleHQucGFkZGluZ19qcyA9IHRoaXMuc3RhdGUucGFkZGluZ19qcztcclxuICAgICAgICBib3gudGV4dC5wYWRkaW5nX2plID0gdGhpcy5zdGF0ZS5wYWRkaW5nX2plO1xyXG4gICAgICAgIGJveC50ZXh0LnBhZGRpbmdfZ3MgPSB0aGlzLnN0YXRlLnBhZGRpbmdfZ3M7XHJcbiAgICAgICAgYm94LnRleHQucGFkZGluZ19nZSA9IHRoaXMuc3RhdGUucGFkZGluZ19nZTtcclxuICAgICAgICBib3gudGV4dC5rdW1paG9rbyA9IHRoaXMuc3RhdGUua3VtaWhva287XHJcbiAgICAgICAgYm94LnRleHQuc2l6ZV9qID0gdGhpcy5zdGF0ZS5zaXplX2o7XHJcbiAgICAgICAgYm94LnRleHQuc2l6ZV9nID0gdGhpcy5zdGF0ZS5zaXplX2c7XHJcbiAgICAgICAgYm94LnRleHQuZ3lva2FuID0gdGhpcy5zdGF0ZS5neW9rYW47XHJcbiAgICAgICAgYm94LnRleHQuZm9udCA9IHRoaXMuc3RhdGUuZm9udDtcclxuXHJcbiAgICAgICAgdGhpcy5wcm9wcy5vbkNsaWNrVXBkYXRlQnV0dG9uKHtcclxuICAgICAgICAgICAgYm94OiBib3gsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICBzdHlsZT17c3R5bGVzLmNvbnRhaW5lcn1cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnN0eWxlcy5saW5lXHJcbiAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICDvvorvvp/vvoPvvp7vvajvvp3vvbjvvp4o5a2X6KmwKVxyXG4gICAgICAgICAgICAgICAgICAgIFM8aW5wdXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5wYWRkaW5nX2pzfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17ey4uLnN0eWxlcy5pbnB1dCwgd2lkdGg6ICcyNXB4J319XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gdGhpcy5zZXRTdGF0ZSh7cGFkZGluZ19qczogU3RyaW5nLnRvTnVtZXJpYyhlLnRhcmdldC52YWx1ZSl9KX0gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgJm5ic3A7XHJcbiAgICAgICAgICAgICAgICAgICAgRTxpbnB1dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLnBhZGRpbmdfamV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7Li4uc3R5bGVzLmlucHV0LCB3aWR0aDogJzI1cHgnfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiB0aGlzLnNldFN0YXRlKHtwYWRkaW5nX2plOiBTdHJpbmcudG9OdW1lcmljKGUudGFyZ2V0LnZhbHVlKX0pfVxyXG4gICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5zdHlsZXMubGluZVxyXG4gICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAg776K776f776D776e772o776d7724776eKOihjOmAgSlcclxuICAgICAgICAgICAgICAgICAgICBTPGlucHV0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUucGFkZGluZ19nc31cclxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3suLi5zdHlsZXMuaW5wdXQsIHdpZHRoOiAnMjVweCd9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IHRoaXMuc2V0U3RhdGUoe3BhZGRpbmdfZ3M6IFN0cmluZy50b051bWVyaWMoZS50YXJnZXQudmFsdWUpfSl9IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgICZuYnNwO1xyXG4gICAgICAgICAgICAgICAgICAgIEU8aW5wdXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5wYWRkaW5nX2dlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17ey4uLnN0eWxlcy5pbnB1dCwgd2lkdGg6ICcyNXB4J319XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gdGhpcy5zZXRTdGF0ZSh7cGFkZGluZ19nZTogU3RyaW5nLnRvTnVtZXJpYyhlLnRhcmdldC52YWx1ZSl9KX1cclxuICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgLi4uc3R5bGVzLmxpbmVcclxuICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIOe1hOaWueWQkSA8aW5wdXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUua3VtaWhva299XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3suLi5zdHlsZXMuaW5wdXQsIHdpZHRoOiAnNTBweCd9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gdGhpcy5zZXRTdGF0ZSh7a3VtaWhva286IGUudGFyZ2V0LnZhbHVlfSl9XHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAmbmJzcDtcclxuICAgICAgICAgICAgICAgICAgICDooYzplpMgPGlucHV0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLmd5b2thbn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17ey4uLnN0eWxlcy5pbnB1dCwgd2lkdGg6ICczMHB4J319XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiB0aGlzLnNldFN0YXRlKHtneW9rYW46IFN0cmluZy50b051bWVyaWMoZS50YXJnZXQudmFsdWUpfSl9XHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnN0eWxlcy5saW5lXHJcbiAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICDmloflrZfjgrXjgqTjgrrvvIjlrZfoqbDvvIk8aW5wdXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLnNpemVfan1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7Li4uc3R5bGVzLmlucHV0LCB3aWR0aDogJzMwcHgnfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gdGhpcy5zZXRTdGF0ZSh7c2l6ZV9qOiBTdHJpbmcudG9OdW1lcmljKGUudGFyZ2V0LnZhbHVlKX0pfVxyXG4gICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5zdHlsZXMubGluZVxyXG4gICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAg5paH5a2X44K144Kk44K677yI6KGM6YCB77yJPGlucHV0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLnNpemVfZ31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17ey4uLnN0eWxlcy5pbnB1dCwgd2lkdGg6ICczMHB4J319XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiB0aGlzLnNldFN0YXRlKHtzaXplX2c6IFN0cmluZy50b051bWVyaWMoZS50YXJnZXQudmFsdWUpfSl9XHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnN0eWxlcy5saW5lXHJcbiAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICDjg5Xjgqnjg7Pjg4hOby48aW5wdXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUuZm9udH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17ey4uLnN0eWxlcy5pbnB1dCwgd2lkdGg6ICczMHB4J319XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiB0aGlzLnNldFN0YXRlKHtmb250OiBTdHJpbmcudG9OdW1lcmljKGUudGFyZ2V0LnZhbHVlKX0pfVxyXG4gICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5zdHlsZXMubGluZSxcclxuICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLnN0eWxlcy5idXR0b24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbG9hdDogJ3JpZ2h0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gdGhpcy5jbGlja1VwZGF0ZUJ1dHRvbigpfVxyXG4gICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAg5pu05pawXHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcclxuXHJcbmltcG9ydCBUb29sQm94VGV4dERhdGEgZnJvbSAnLi9Ub29sQm94VGV4dERhdGEuanMnO1xyXG5cclxuaW1wb3J0IHsgWmFoeW8gfSBmcm9tICcuLi9saWJzL3phaHlvLmpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBTVV9Ub29sQm94VGV4dERhdGFfVXBkYXRlQnV0dG9uX0NsaWNrLFxyXG59IGZyb20gJy4uL2FjdGlvbnNfc3UvdG9vbGJveHRleHRkYXRhLmpzJztcclxuXHJcblxyXG4vLyBtYXBTdGF0ZVRvUHJvcHNcclxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gKHN0YXRlLCBwcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAuLi5zdGF0ZSxcclxuICAgIH07XHJcbn1cclxuXHJcbi8vIG1hcERpc3BhdGNoVG9Qcm9wc1xyXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHMgPSAoZGlzcGF0Y2gsIHByb3BzKSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGRpc3BhdGNoLFxyXG4gICAgfTtcclxufVxyXG5cclxuLy8gbWVyZ2VQcm9wcyBcclxuY29uc3QgbWVyZ2VQcm9wcyA9IChzdGF0ZSwgZGlzcGF0Y2gsIHByb3BzKSA9PiB7XHJcbiAgICAvLyDjg5Xjgqnjg7zjgqvjgrnjgZXjgozjgabjgYTjgovjg5zjg4Pjgq/jgrnmg4XloLFcclxuICAgIGxldCBib3ggPSB7XHJcbiAgICAgICAgYm94X2lkOiAnJyxcclxuICAgICAgICB0ZXh0OiB7XHJcbiAgICAgICAgICAgIGt1bWlob2tvOiAnJyxcclxuICAgICAgICAgICAgcGFkZGluZ19qczogJycsXHJcbiAgICAgICAgICAgIHBhZGRpbmdfamU6ICcnLFxyXG4gICAgICAgICAgICBwYWRkaW5nX2dzOiAnJyxcclxuICAgICAgICAgICAgcGFkZGluZ19nZTogJycsXHJcbiAgICAgICAgICAgIHNpemVfajogJycsXHJcbiAgICAgICAgICAgIHNpemVfZzogJycsXHJcbiAgICAgICAgICAgIGd5b2thbjogJycsXHJcbiAgICAgICAgICAgIGZvbnQ6ICcnLFxyXG4gICAgICAgIH0sXHJcbiAgICB9XHJcbiAgICBpZiAoc3RhdGUuZm9jdXNib3guYm94X2lkICE9ICcnKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdGF0ZS5ib3hzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChzdGF0ZS5ib3hzW2ldLmJveF9pZCA9PSBzdGF0ZS5mb2N1c2JveC5ib3hfaWQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHogPSBaYWh5by5jaGFuZ2VSZWN0VG9BcmVhKHN0YXRlLmJveHNbaV0ueDEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5ib3hzW2ldLnkxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuYm94c1tpXS54MixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLmJveHNbaV0ueTIpO1xyXG4gICAgICAgICAgICAgICAgYm94ID0gc3RhdGUuYm94c1tpXTtcclxuICAgICAgICAgICAgICAgIGJveC54ID0gei54O1xyXG4gICAgICAgICAgICAgICAgYm94LnkgPSB6Lnk7XHJcbiAgICAgICAgICAgICAgICBib3gudyA9IHoudztcclxuICAgICAgICAgICAgICAgIGJveC5oID0gei5oO1xyXG5cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgLy8geHh4OiB5eXksXHJcbiAgICAgICAgLy8gb25YeHh4OiAoeHh4KSA9PiB7XHJcbiAgICAgICAgLy8gICAgIC4uLi4uXHJcbiAgICAgICAgLy8gICAgIGRpc3BhdGNoLmRpc3BhdGNoKFNVX1h4eHh4eF9YeHh4eF9YeHh4KCkpO1xyXG4gICAgICAgIC8vIH0sXHJcbiAgICAgICAgLy8gLi4ucHJvcHMsXHJcbiAgICAgICAgYm94OiBib3gsXHJcbiAgICAgICAgb25DbGlja1VwZGF0ZUJ1dHRvbjogKHBheWxvYWQpID0+IHtcclxuICAgICAgICAgICAgZGlzcGF0Y2guZGlzcGF0Y2goU1VfVG9vbEJveFRleHREYXRhX1VwZGF0ZUJ1dHRvbl9DbGljayhwYXlsb2FkKSk7XHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuXHJcbi8vIGNvbm5lY3RcclxuY29uc3QgVG9vbEJveFRleHREYXRhTWFwID0gY29ubmVjdChcclxuICAgIG1hcFN0YXRlVG9Qcm9wcyxcclxuICAgIG1hcERpc3BhdGNoVG9Qcm9wcyxcclxuICAgIG1lcmdlUHJvcHNcclxuKShUb29sQm94VGV4dERhdGEpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgVG9vbEJveFRleHREYXRhTWFwO1xyXG4iLCIvL1xyXG4vLyDphY3liJfplqLpgKNcclxuLy9cclxuXHJcbmV4cG9ydCBjb25zdCBMaWJBcnJheSA9IHtcclxuICAgIC8vXHJcbiAgICAvLyDmjIflrprjga7jgoLjga7jgpLphY3liJfjgavlhaXjgozjgabov5TjgZlcclxuICAgIC8vIOWQjOOBmOOCguOBruOBjOWtmOWcqOOBmeOCi+WgtOWQiOOBr+OAgemFjeWIl+OBq+WQq+OCgeOBquOBhFxyXG4gICAgLy9cclxuICAgIC8vIFtJTl1cclxuICAgIC8vICAgYXJ5OiDphY3liJdcclxuICAgIC8vICAgdmFsOiDlgKRcclxuICAgIC8vXHJcbiAgICAvLyBbT1VUXVxyXG4gICAgLy8gICBhcnk6IOmFjeWIl1xyXG4gICAgLy9cclxuICAgIHNldEFycmF5VW5pcXVlOiAoYXJ5LCB2YWwpID0+IHtcclxuICAgICAgICBsZXQgZmxnID0gZmFsc2U7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJ5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChhcnlbaV0gPT0gdmFsKSB7XHJcbiAgICAgICAgICAgICAgICBmbGcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChmbGcgPT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgYXJ5LnB1c2godmFsKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBhcnk7XHJcbiAgICB9LFxyXG59ICIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcblxyXG5pbXBvcnQgeyBTdHJpbmcgfSBmcm9tICcuLi9saWJzL3N0cmluZy5qcyc7XHJcblxyXG5jb25zdCBzdHlsZXMgPSB7XHJcbiAgICBjb250YWluZXI6IHtcclxuICAgICAgICB0ZXh0QWxpZ246ICdsZWZ0JyxcclxuICAgIH0sXHJcbiAgICBsaW5lOiB7XHJcbiAgICAgICAgaGVpZ2h0OiAnMjBweCcsXHJcbiAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcclxuICAgICAgICBsaW5lSGVpZ2h0OiAnMjBweCcsXHJcbiAgICB9LFxyXG4gICAgYnV0dG9uOiB7XHJcbiAgICAgICAgd2lkdGg6ICc0MHB4JyxcclxuICAgICAgICBoZWlnaHQ6ICcxNHB4JyxcclxuICAgICAgICBmb250U2l6ZTogJzEycHgnLFxyXG4gICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXHJcbiAgICAgICAgbGluZUhlaWdodDogJzE0cHgnLFxyXG4gICAgICAgIGJvcmRlcjogJzFweCBzb2xpZCBncmF5JyxcclxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdsaWdodGdyZWVuJyxcclxuICAgICAgICBib3JkZXJSYWRpdXM6ICcycHgnLFxyXG4gICAgfSxcclxuICAgIGlucHV0OiB7XHJcbiAgICAgICAgaGVpZ2h0OiAnOXB4JyxcclxuICAgICAgICBmb250U2l6ZTogJzlweCcsXHJcbiAgICB9LFxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVG9vbEJveEJveERhdGEgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcblxyXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgICAgICAgIGJveF9pZDogICBwcm9wcy5ib3guYm94X2lkLFxyXG4gICAgICAgICAgICBncm91cF9pZDogcHJvcHMuYm94Lmdyb3VwX2lkLFxyXG4gICAgICAgICAgICBncm91cF9ubzogcHJvcHMuYm94Lmdyb3VwX25vLFxyXG4gICAgICAgICAgICB0eXBlOiAgICAgcHJvcHMuYm94LnR5cGUsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgYm94X2lkOiAgIG5leHRQcm9wcy5ib3guYm94X2lkLFxyXG4gICAgICAgICAgICBncm91cF9pZDogbmV4dFByb3BzLmJveC5ncm91cF9pZCxcclxuICAgICAgICAgICAgZ3JvdXBfbm86IG5leHRQcm9wcy5ib3guZ3JvdXBfbm8sXHJcbiAgICAgICAgICAgIHR5cGU6ICAgICBuZXh0UHJvcHMuYm94LnR5cGUsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xpY2tVcGRhdGVCdXR0b24oKSB7XHJcbiAgICAgICAgbGV0IGJveCA9IHRoaXMucHJvcHMuYm94O1xyXG5cclxuICAgICAgICBpZiAodGhpcy5wcm9wcy5ib3guYm94X2lkID09PSAnJ1xyXG4gICAgICAgICB8fCB0aGlzLnN0YXRlLmdyb3VwX2lkID09PSAnJ1xyXG4gICAgICAgICB8fCB0aGlzLnN0YXRlLmdyb3VwX25vID09PSAnJ1xyXG4gICAgICAgICB8fCB0aGlzLnByb3BzLmJveC50eXBlID09PSAnJykge1xyXG4gICAgICAgICAgICAgYWxlcnQoJ+WFqOOBpuOBrumgheebruOCkuWFpeWKm+OBl+OBpuOBj+OBoOOBleOBhCcpO1xyXG4gICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYm94LmJveF9pZCAgID0gdGhpcy5wcm9wcy5ib3guYm94X2lkO1xyXG4gICAgICAgIGJveC5ncm91cF9pZCA9IHRoaXMuc3RhdGUuZ3JvdXBfaWQ7XHJcbiAgICAgICAgYm94Lmdyb3VwX25vID0gdGhpcy5zdGF0ZS5ncm91cF9ubztcclxuICAgICAgICBib3gudHlwZSAgICAgPSB0aGlzLnByb3BzLmJveC50eXBlO1xyXG5cclxuICAgICAgICB0aGlzLnByb3BzLm9uQ2xpY2tVcGRhdGVCdXR0b24oe1xyXG4gICAgICAgICAgICBib3g6IGJveCxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBjbGlja0RlbGV0ZUJ1dHRvbigpIHtcclxuICAgICAgICBpZiAoY29uZmlybSgn44Oc44OD44Kv44K544KS5YmK6Zmk44GX44G+44GZ44CC44KI44KN44GX44GE44Gn44GZ44GL77yfJykgPT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5wcm9wcy5vbkNsaWNrRGVsZXRlQnV0dG9uKHtcclxuICAgICAgICAgICAgYm94X2lkOiB0aGlzLnN0YXRlLmJveF9pZCxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBjbGlja0NyZWF0ZUJ1dHRvbigpIHtcclxuICAgICAgICBsZXQgYm94ID0gdGhpcy5wcm9wcy5ib3g7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmJveF9pZCA9PT0gJydcclxuICAgICAgICAgfHwgdGhpcy5zdGF0ZS5ncm91cF9pZCA9PT0gJydcclxuICAgICAgICAgfHwgdGhpcy5zdGF0ZS5ncm91cF9ubyA9PT0gJydcclxuICAgICAgICAgfHwgdGhpcy5zdGF0ZS50eXBlID09PSAnJykge1xyXG4gICAgICAgICAgICBhbGVydCgn5YWo44Gm44Gu6aCF55uu44KS5YWl5Yqb44GX44Gm44GP44Gg44GV44GEJyk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIElE44GM5pei5a2Y44Gu5aC05ZCI44Gv44CB5L2c5oiQ44Gn44GN44Gq44GEXHJcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuY2hlY2tLaXpvbklkKHRoaXMuc3RhdGUuaWQpKSB7XHJcbiAgICAgICAgICAgIGFsZXJ0KCfjgZPjga7jg5zjg4Pjgq/jgrlJROOBr+aXouOBq+WtmOWcqOOBl+OBvuOBmScpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDjgr/jgqTjg5fjg4Hjgqfjg4Pjgq9cclxuICAgICAgICBpZiAodGhpcy5zdGF0ZS50eXBlICE9ICd0ZXh0JyAmJiB0aGlzLnN0YXRlLnR5cGUgIT0gJ2ltYWdlJykge1xyXG4gICAgICAgICAgICBhbGVydCgn44CM44K/44Kk44OX44CN44GvIHRleHQg44G+44Gf44GvIGltYWdlIOOBqOWFpeWKm+OBl+OBpuOBj+OBoOOBleOBhCcpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDjgrDjg6vjg7zjg5flkI3jgahOb+OBruODgeOCp+ODg+OCr1xyXG4gICAgICAgIGlmICh0aGlzLnByb3BzLmlzU2FtZUdyb3VwQW5kTm8odGhpcy5zdGF0ZS5ncm91cF9pZCwgdGhpcy5zdGF0ZS5ncm91cF9ubykgPT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICBhbGVydCgn5ZCM44GY44Kw44Or44O844OX5ZCN44Go44Kw44Or44O844OXTm/jga7jg5zjg4Pjgq/jgrnjgYzlrZjlnKjjgZfjgb7jgZknKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8g5oyH5a6a44Gu44Kw44Or44O844OX5ZCN44Gn44Oc44OD44Kv44K544KS5L2c44KM44KL44GL44KS44OB44Kn44OD44KvXHJcbiAgICAgICAgLy8g77yI5pei5a2Y44Gu44Kw44Or44O844OX5ZCN44Go5ZCM44GY44Kw44Or44O844OX44Gu44Oc44OD44Kv44K544KS5L2c5oiQ44GZ44KL5aC05ZCI44CB44K/44Kk44OX44GMIHRleHQg44Gn44Gq44GR44KM44Gw44Gq44KJ44Gq44GE77yJXHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUudHlwZSAhPSAndGV4dCcpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMuaXNTYW1lR3JvdXAodGhpcy5zdGF0ZS5ncm91cF9pZCkgPT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgYWxlcnQoJ+WQjOOBmOOCsOODq+ODvOODl+WQjeOBruODnOODg+OCr+OCueOBjOOBguOCiuOBvuOBmeOAguODnOODg+OCr+OCueOCkuS9nOaIkOOBp+OBjeOBvuOBm+OCk+OAgicpXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGJveC5ib3hfaWQgICA9IHRoaXMuc3RhdGUuYm94X2lkO1xyXG4gICAgICAgIGJveC5ncm91cF9pZCA9IHRoaXMuc3RhdGUuZ3JvdXBfaWQ7XHJcbiAgICAgICAgYm94Lmdyb3VwX25vID0gdGhpcy5zdGF0ZS5ncm91cF9ubztcclxuICAgICAgICBib3gudHlwZSAgICAgPSB0aGlzLnN0YXRlLnR5cGU7XHJcblxyXG4gICAgICAgIHRoaXMucHJvcHMub25DbGlja0NyZWF0ZUJ1dHRvbih7XHJcbiAgICAgICAgICAgIGJveDogYm94LFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGhlbnNodSgpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICBzdHlsZT17c3R5bGVzLmNvbnRhaW5lcn1cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnN0eWxlcy5saW5lXHJcbiAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICDjg5zjg4Pjgq/jgrlJRDpcclxuICAgICAgICAgICAgICAgICAgICA8c3BhblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICc5cHgnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAnOXB4JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ2xpZ2h0Z3JheScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eyhlKSA9PiB0aGlzLmNsaWNrRGVsZXRlQnV0dG9uKCl9XHJcbiAgICAgICAgICAgICAgICAgICAgPuKclTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAmbmJzcDtcclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT17e2ZvbnRXZWlnaHQ6ICdib2xkJywgY29sb3I6ICdibHVlJ319Pnt0aGlzLnByb3BzLmJveC5ib3hfaWR9PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgLi4uc3R5bGVzLmxpbmVcclxuICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIOOCv+OCpOODl++8miA8c3BhbiBzdHlsZT17e2NvbG9yOiAnZ3JlZW4nfX0+e3RoaXMucHJvcHMuYm94LnR5cGV9PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgLi4uc3R5bGVzLmxpbmVcclxuICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIO+9uO++nu++me+9sO++jO++n0lEIDxpbnB1dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5ncm91cF9pZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17ey4uLnN0eWxlcy5pbnB1dCwgd2lkdGg6ICcxMDBweCd9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gdGhpcy5zZXRTdGF0ZSh7Z3JvdXBfaWQ6IGUudGFyZ2V0LnZhbHVlfSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgLi4uc3R5bGVzLmxpbmVcclxuICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIE5vLjxpbnB1dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUuZ3JvdXBfbm99XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17ey4uLnN0eWxlcy5pbnB1dCwgd2lkdGg6ICcyMHB4J319XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IHRoaXMuc2V0U3RhdGUoe2dyb3VwX25vOiBTdHJpbmcudG9OdW1lcmljKGUudGFyZ2V0LnZhbHVlKX0pfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgLi4uc3R5bGVzLmxpbmUsXHJcbiAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICB4Ont0aGlzLnByb3BzLmJveC54fSB5Ont0aGlzLnByb3BzLmJveC55fSB3Ont0aGlzLnByb3BzLmJveC53fSBoOnt0aGlzLnByb3BzLmJveC5ofVxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgLi4uc3R5bGVzLmxpbmUsXHJcbiAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5zdHlsZXMuYnV0dG9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmxvYXQ6ICdyaWdodCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHRoaXMuY2xpY2tVcGRhdGVCdXR0b24oKX1cclxuICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIOabtOaWsFxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgc2hpbmtpKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgIHN0eWxlPXtzdHlsZXMuY29udGFpbmVyfVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgLi4uc3R5bGVzLmxpbmVcclxuICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIOODnOODg+OCr+OCuUlEOiA8aW5wdXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUuYm94X2lkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7Li4uc3R5bGVzLmlucHV0LCB3aWR0aDogJzUwcHgnfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IHRoaXMuc2V0U3RhdGUoe2JveF9pZDogZS50YXJnZXQudmFsdWV9KX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5zdHlsZXMubGluZVxyXG4gICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAg44K/44Kk44OX77yaIDxpbnB1dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS50eXBlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7Li4uc3R5bGVzLmlucHV0LCB3aWR0aDogJzUwcHgnfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IHRoaXMuc2V0U3RhdGUoe3R5cGU6IGUudGFyZ2V0LnZhbHVlfSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgLi4uc3R5bGVzLmxpbmVcclxuICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIO+9uO++nu++me+9sO++jO++n0lEIDxpbnB1dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5ncm91cF9pZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17ey4uLnN0eWxlcy5pbnB1dCwgd2lkdGg6ICcxMDBweCd9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gdGhpcy5zZXRTdGF0ZSh7Z3JvdXBfaWQ6IGUudGFyZ2V0LnZhbHVlfSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgLi4uc3R5bGVzLmxpbmVcclxuICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIE5vLjxpbnB1dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUuZ3JvdXBfbm99XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17ey4uLnN0eWxlcy5pbnB1dCwgd2lkdGg6ICcyMHB4J319XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IHRoaXMuc2V0U3RhdGUoe2dyb3VwX25vOiBTdHJpbmcudG9OdW1lcmljKGUudGFyZ2V0LnZhbHVlKX0pfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgLi4uc3R5bGVzLmxpbmUsXHJcbiAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgLi4uc3R5bGVzLmxpbmUsXHJcbiAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5zdHlsZXMuYnV0dG9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICc2MHB4JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZsb2F0OiAncmlnaHQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB0aGlzLmNsaWNrQ3JlYXRlQnV0dG9uKCl9XHJcbiAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICDmlrDopo/kvZzmiJBcclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBsZXQgaHRtbDtcclxuICAgICAgICBpZiAodGhpcy5wcm9wcy5ib3guYm94X2lkID09ICcnKSB7XHJcbiAgICAgICAgICAgIGh0bWwgPSB0aGlzLnNoaW5raSgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGh0bWwgPSB0aGlzLmhlbnNodSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgaHRtbCAgXHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcclxuXHJcbmltcG9ydCBUb29sQm94Qm94RGF0YSBmcm9tICcuL1Rvb2xCb3hCb3hEYXRhLmpzJztcclxuXHJcbmltcG9ydCB7IFphaHlvIH0gZnJvbSAnLi4vbGlicy96YWh5by5qcyc7XHJcbmltcG9ydCB7IEJveCB9IGZyb20gJy4uL2xpYnMvYm94LmpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBTVV9Ub29sQm94Qm94RGF0YV9VcGRhdGVCdXR0b25fQ2xpY2ssXHJcbiAgICBTVV9Ub29sQm94Qm94RGF0YV9EZWxldGVCdXR0b25fQ2xpY2ssXHJcbiAgICBTVV9Ub29sQm94Qm94RGF0YV9DcmVhdGVCdXR0b25fQ2xpY2ssXHJcbn0gZnJvbSAnLi4vYWN0aW9uc19zdS90b29sYm94Ym94ZGF0YS5qcyc7XHJcblxyXG5cclxuLy8gbWFwU3RhdGVUb1Byb3BzXHJcbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZSwgcHJvcHMpID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgLi4uc3RhdGUsXHJcbiAgICB9O1xyXG59XHJcblxyXG4vLyBtYXBEaXNwYXRjaFRvUHJvcHNcclxuY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0gKGRpc3BhdGNoLCBwcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBkaXNwYXRjaCxcclxuICAgIH07XHJcbn1cclxuXHJcbi8vIG1lcmdlUHJvcHMgXHJcbmNvbnN0IG1lcmdlUHJvcHMgPSAoc3RhdGUsIGRpc3BhdGNoLCBwcm9wcykgPT4ge1xyXG4gICAgLy8g44OV44Kp44O844Kr44K544GV44KM44Gm44GE44KL44Oc44OD44Kv44K55oOF5aCxXHJcbiAgICBsZXQgYm94ID0ge1xyXG4gICAgICAgIGJveF9pZDogJycsXHJcbiAgICAgICAgZ3JvdXBfaWQ6ICcnLFxyXG4gICAgICAgIGdyb3VwX25vOiAnJyxcclxuICAgICAgICB0eXBlOiAnJyxcclxuICAgICAgICB0ZXh0OiB7XHJcbiAgICAgICAgICAgIGt1bWlob2tvOiAnJyxcclxuICAgICAgICAgICAgcGFkZGluZ19qczogJycsXHJcbiAgICAgICAgICAgIHBhZGRpbmdfamU6ICcnLFxyXG4gICAgICAgICAgICBwYWRkaW5nX2dzOiAnJyxcclxuICAgICAgICAgICAgcGFkZGluZ19nZTogJycsXHJcbiAgICAgICAgICAgIHNpemVfajogJycsXHJcbiAgICAgICAgICAgIHNpemVfZzogJycsXHJcbiAgICAgICAgICAgIGd5b2thbjogJycsXHJcbiAgICAgICAgfSxcclxuICAgIH1cclxuICAgIGlmIChzdGF0ZS5mb2N1c2JveC5ib3hfaWQgIT0gJycpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0YXRlLmJveHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKHN0YXRlLmJveHNbaV0uYm94X2lkID09IHN0YXRlLmZvY3VzYm94LmJveF9pZCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeiA9IFphaHlvLmNoYW5nZVJlY3RUb0FyZWEoc3RhdGUuYm94c1tpXS54MSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLmJveHNbaV0ueTEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5ib3hzW2ldLngyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuYm94c1tpXS55Mik7XHJcbiAgICAgICAgICAgICAgICBib3ggPSBzdGF0ZS5ib3hzW2ldO1xyXG4gICAgICAgICAgICAgICAgYm94LnggPSB6Lng7XHJcbiAgICAgICAgICAgICAgICBib3gueSA9IHoueTtcclxuICAgICAgICAgICAgICAgIGJveC53ID0gei53O1xyXG4gICAgICAgICAgICAgICAgYm94LmggPSB6Lmg7XHJcblxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAvLyB4eHg6IHl5eSxcclxuICAgICAgICAvLyBvblh4eHg6ICh4eHgpID0+IHtcclxuICAgICAgICAvLyAgICAgLi4uLi5cclxuICAgICAgICAvLyAgICAgZGlzcGF0Y2guZGlzcGF0Y2goU1VfWHh4eHh4X1h4eHh4X1h4eHgoKSk7XHJcbiAgICAgICAgLy8gfSxcclxuICAgICAgICAvLyAuLi5wcm9wcyxcclxuICAgICAgICBib3g6IGJveCxcclxuICAgICAgICBvbkNsaWNrVXBkYXRlQnV0dG9uOiAocGF5bG9hZCkgPT4ge1xyXG4gICAgICAgICAgICBkaXNwYXRjaC5kaXNwYXRjaChTVV9Ub29sQm94Qm94RGF0YV9VcGRhdGVCdXR0b25fQ2xpY2socGF5bG9hZCkpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25DbGlja0RlbGV0ZUJ1dHRvbjogKHBheWxvYWQpID0+IHtcclxuICAgICAgICAgICAgZGlzcGF0Y2guZGlzcGF0Y2goU1VfVG9vbEJveEJveERhdGFfRGVsZXRlQnV0dG9uX0NsaWNrKHBheWxvYWQpKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uQ2xpY2tDcmVhdGVCdXR0b246IChwYXlsb2FkKSA9PiB7XHJcbiAgICAgICAgICAgIGRpc3BhdGNoLmRpc3BhdGNoKFNVX1Rvb2xCb3hCb3hEYXRhX0NyZWF0ZUJ1dHRvbl9DbGljayhwYXlsb2FkKSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgY2hlY2tLaXpvbklkOiAoYm94X2lkKSA9PiB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RhdGUuYm94cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlLmJveHNbaV0uYm94X2lkID09IGJveF9pZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBpc1NhbWVHcm91cEFuZE5vOiAoZ3JvdXBfaWQsIGdyb3VwX25vKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJveF9pZCA9IEJveC5nZXRCb3hJZChzdGF0ZS5ib3hzLCBncm91cF9pZCwgZ3JvdXBfbm8pO1xyXG4gICAgICAgICAgICBpZiAoYm94X2lkICE9ICcnKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaXNTYW1lR3JvdXA6IChncm91cF9pZCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBncm91cE5vQXJ5ID0gQm94LmdldEdyb3VwTm9Bcnkoc3RhdGUuYm94cywgZ3JvdXBfaWQpO1xyXG4gICAgICAgICAgICBpZiAoZ3JvdXBOb0FyeS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XHJcblxyXG4vLyBjb25uZWN0XHJcbmNvbnN0IFRvb2xCb3hCb3hEYXRhTWFwID0gY29ubmVjdChcclxuICAgIG1hcFN0YXRlVG9Qcm9wcyxcclxuICAgIG1hcERpc3BhdGNoVG9Qcm9wcyxcclxuICAgIG1lcmdlUHJvcHNcclxuKShUb29sQm94Qm94RGF0YSk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBUb29sQm94Qm94RGF0YU1hcDtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuXHJcbmNvbnN0IHN0eWxlcyA9IHtcclxuICAgIGNvbnRhaW5lcjoge1xyXG4gICAgICAgIHRleHRBbGlnbjogJ2xlZnQnLFxyXG4gICAgfSxcclxuICAgIHBlcjoge1xyXG4gICAgICAgIHdpZHRoOiAnNDBweCcsXHJcbiAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcclxuICAgICAgICB0ZXh0QWxpZ246ICdsZWZ0JyxcclxuICAgICAgICBsaW5lSGVpZ2h0OiAnMjBweCcsXHJcbiAgICB9LFxyXG4gICAgYnV0dG9uOiB7XHJcbiAgICAgICAgbWFyZ2luVG9wOiAnMnB4JyxcclxuICAgICAgICB3aWR0aDogJzM4cHgnLFxyXG4gICAgICAgIGhlaWdodDogJzE0cHgnLFxyXG4gICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXHJcbiAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcclxuICAgICAgICBsaW5lSGVpZ2h0OiAnMTRweCcsXHJcbiAgICAgICAgYm9yZGVyOiAnMXB4IHNvbGlkICMzMzMnLFxyXG4gICAgICAgIGJvcmRlclJhZGl1czogJzJweCcsXHJcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnbGlnaHRncmVlbicsXHJcbiAgICAgICAgdXNlclNlbGVjdDogJ25vbmUnLFxyXG4gICAgfSxcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRvb2xCb3hTY2FsZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgc3R5bGU9e3N0eWxlcy5jb250YWluZXJ9XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAuLi5zdHlsZXMucGVyLFxyXG4gICAgICAgICAgICAgICAgICAgIGZsb2F0OiAnbGVmdCcsXHJcbiAgICAgICAgICAgICAgICB9fT5cclxuICAgICAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5zY2FsZX0gJVxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgLi4uc3R5bGVzLmJ1dHRvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmxvYXQ6ICdyaWdodCcsXHJcbiAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB0aGlzLnByb3BzLm9uQ2xpY2sxMDBQZXJCdXR0b24oKX1cclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAxMDAlXHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5zdHlsZXMuYnV0dG9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmbG9hdDogJ3JpZ2h0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luUmlnaHQ6ICc1cHgnLFxyXG4gICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gdGhpcy5wcm9wcy5vbkNsaWNrTWF4QnV0dG9uKCl9XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAg5ouh5aSnXHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5zdHlsZXMuYnV0dG9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmbG9hdDogJ3JpZ2h0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luUmlnaHQ6ICc1cHgnLFxyXG4gICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gdGhpcy5wcm9wcy5vbkNsaWNrTWluQnV0dG9uKCl9XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAg57iu5bCPXHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcclxuXHJcbmltcG9ydCBUb29sQm94U2NhbGUgZnJvbSAnLi9Ub29sQm94U2NhbGUuanMnO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIFNVX1Rvb2xCb3hTY2FsZV9NaW5CdXR0b25fQ2xpY2ssXHJcbiAgICBTVV9Ub29sQm94U2NhbGVfTWF4QnV0dG9uX0NsaWNrLFxyXG4gICAgU1VfVG9vbEJveFNjYWxlXzEwMFBlckJ1dHRvbl9DbGljayxcclxufSBmcm9tICcuLi9hY3Rpb25zX3N1L3Rvb2xib3hzY2FsZS5qcyc7XHJcblxyXG5cclxuLy8gbWFwU3RhdGVUb1Byb3BzXHJcbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZSwgcHJvcHMpID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgLi4uc3RhdGUsXHJcbiAgICB9O1xyXG59XHJcblxyXG4vLyBtYXBEaXNwYXRjaFRvUHJvcHNcclxuY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0gKGRpc3BhdGNoLCBwcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBkaXNwYXRjaCxcclxuICAgIH07XHJcbn1cclxuXHJcbi8vIG1lcmdlUHJvcHMgXHJcbmNvbnN0IG1lcmdlUHJvcHMgPSAoc3RhdGUsIGRpc3BhdGNoLCBwcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAvLyB4eHg6IHl5eSxcclxuICAgICAgICAvLyBvblh4eHg6ICh4eHgpID0+IHtcclxuICAgICAgICAvLyAgICAgLi4uLi5cclxuICAgICAgICAvLyAgICAgZGlzcGF0Y2guZGlzcGF0Y2goU1VfWHh4eHh4X1h4eHh4X1h4eHgoKSk7XHJcbiAgICAgICAgLy8gfSxcclxuICAgICAgICAvLyAuLi5wcm9wcyxcclxuICAgICAgICBzY2FsZTogc3RhdGUuc2NhbGUsXHJcbiAgICAgICAgb25DbGlja01pbkJ1dHRvbjogKCkgPT4ge1xyXG4gICAgICAgICAgICBkaXNwYXRjaC5kaXNwYXRjaChTVV9Ub29sQm94U2NhbGVfTWluQnV0dG9uX0NsaWNrKCkpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25DbGlja01heEJ1dHRvbjogKCkgPT4ge1xyXG4gICAgICAgICAgICBkaXNwYXRjaC5kaXNwYXRjaChTVV9Ub29sQm94U2NhbGVfTWF4QnV0dG9uX0NsaWNrKCkpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25DbGljazEwMFBlckJ1dHRvbjogKCkgPT4ge1xyXG4gICAgICAgICAgICBkaXNwYXRjaC5kaXNwYXRjaChTVV9Ub29sQm94U2NhbGVfMTAwUGVyQnV0dG9uX0NsaWNrKCkpO1xyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XHJcblxyXG4vLyBjb25uZWN0XHJcbmNvbnN0IFRvb2xCb3hTY2FsZU1hcCA9IGNvbm5lY3QoXHJcbiAgICBtYXBTdGF0ZVRvUHJvcHMsXHJcbiAgICBtYXBEaXNwYXRjaFRvUHJvcHMsXHJcbiAgICBtZXJnZVByb3BzXHJcbikoVG9vbEJveFNjYWxlKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFRvb2xCb3hTY2FsZU1hcDtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuXHJcbmNvbnN0IHN0eWxlcyA9IHtcclxuICAgIGNvbnRhaW5lcjoge1xyXG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxyXG4gICAgICAgIGJvcmRlclJhZGl1czogJzVweCcsXHJcbiAgICAgICAgYm94U2hhZG93OiAnMCAwIDJweCBncmF5JyxcclxuICAgIH0sXHJcbiAgICB0aXRsZToge1xyXG4gICAgICAgIHdpZHRoOiAnY2FsYygxMDAlIC0gMnB4IC0gMjBweCknLFxyXG4gICAgICAgIGhlaWdodDogJzE4cHgnLFxyXG4gICAgICAgIGJvcmRlcjogJzFweCBzb2xpZCBncmF5JyxcclxuICAgICAgICBwYWRkaW5nOiAnMHB4IDEwcHgnLFxyXG4gICAgICAgIGZvbnRTaXplOiAnMTJweCcsXHJcbiAgICAgICAgbGluZUhlaWdodDogJzE4cHgnLFxyXG4gICAgICAgIGNvbG9yOiAnIzMzMycsXHJcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnNXB4IDVweCAwIDAnLFxyXG4gICAgICAgIHRleHRBbGlnbjogJ2xlZnQnLFxyXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJyNhMWJkZTgnLFxyXG4gICAgICAgIHVzZXJTZWxlY3Q6ICdub25lJyxcclxuXHJcbiAgICB9LFxyXG4gICAgYm9keToge1xyXG4gICAgICAgIHdpZHRoOiAnY2FsYygxMDAlIC0gMnB4IC0gMjBweCknLFxyXG4gICAgICAgIHBhZGRpbmc6ICcwcHggMTBweCcsXHJcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnMCAwIDVweCA1cHgnLFxyXG4gICAgICAgIGJvcmRlckxlZnQ6ICcxcHggc29saWQgZ3JheScsXHJcbiAgICAgICAgYm9yZGVyUmlnaHQ6ICcxcHggc29saWQgZ3JheScsXHJcbiAgICAgICAgYm9yZGVyQm90dG9tOiAnMXB4IHNvbGlkIGdyYXknLFxyXG4gICAgICAgIGZvbnRTaXplOiAnMTRweCcsXHJcbiAgICAgICAgdGV4dEFsaWduOiAnbGVmdCcsXHJcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnI2YzZjNmNScsXHJcbiAgICAgICAgdXNlclNlbGVjdDogJ25vbmUnLFxyXG4gICAgfSxcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRvb2xCb3ggZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcblxyXG4gICAgICAgIC8vIOW9k+ODhOODvOODq+ODnOODg+OCr+OCueOBruWFg++8iOenu+WLleWJje+8ieOBruW3puS4iuW6p+aomVxyXG4gICAgICAgIHRoaXMuYm94b3JncG9zID0ge1xyXG4gICAgICAgICAgICB4OiBwcm9wcy54LFxyXG4gICAgICAgICAgICB5OiBwcm9wcy55LFxyXG4gICAgICAgIH07XHJcblxyXG5cdFx0Ly8g44Oe44Km44K544OA44Km44Oz5L2N572uXHJcblx0XHR0aGlzLm1vdXNlcG9zID0ge1xyXG5cdFx0XHR4OiAwLFxyXG5cdFx0XHR5OiAwLFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgICAgICAgIHg6IHRoaXMuYm94b3JncG9zLngsXHJcbiAgICAgICAgICAgIHk6IHRoaXMuYm94b3JncG9zLnksXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy5tb3VzZU1vdmUgPSB0aGlzLm1vdXNlTW92ZS5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMubW91c2VVcCAgID0gdGhpcy5tb3VzZVVwLmJpbmQodGhpcyk7ICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xyXG4gICAgICAgIHRoaXMuYm94b3JncG9zID0ge1xyXG4gICAgICAgICAgICB4OiBuZXh0UHJvcHMueCxcclxuICAgICAgICAgICAgeTogbmV4dFByb3BzLnksXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgeDogbmV4dFByb3BzLngsXHJcbiAgICAgICAgICAgIHk6IG5leHRQcm9wcy55LFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIG1vdXNlRG93bihlKSB7XHJcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTsgICAgLy8g44GT44Gu44Kk44OZ44Oz44OI44KS44GT44Gu44Os44Kk44Ok44O844Gn5q2i44KB44KL44CC5LiL44Os44Kk44Ok44O844Gr44GC44KL6KaB57Sg44Gr44Kk44OZ44Oz44OI44KS6LW344GT44GV44Gq44GEXHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOyAgICAgLy8g44OW44Op44Km44K25qiZ5rqW5qmf6IO944Gu44Kk44OZ44Oz44OI44KS5oqR5q2i44GZ44KLXHJcblxyXG4gICAgICAgIC8vIOODnuOCpuOCueODoOODvOODluOBqOODnuOCpuOCueOCouODg+ODl+OBruOCpOODmeODs+ODiOOCkueZu+mMsuOBmeOCi1xyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMubW91c2VNb3ZlLCBmYWxzZSk7XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsICAgdGhpcy5tb3VzZVVwLCBmYWxzZSk7XHJcblxyXG4gICAgICAgIC8vIOODnuOCpuOCueODgOOCpuODs+OBl+OBn+OCq+ODvOOCveODq+S9jee9ruOCkuOCu+ODg+ODiOOBmeOCi1xyXG4gICAgICAgIHRoaXMubW91c2Vwb3MueCA9IGUucGFnZVg7XHJcbiAgICAgICAgdGhpcy5tb3VzZXBvcy55ID0gZS5wYWdlWTtcclxuICAgIH1cclxuXHJcbiAgICBtb3VzZU1vdmUoZSkge1xyXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7ICAgIC8vIOOBk+OBruOCpOODmeODs+ODiOOCkuOBk+OBruODrOOCpOODpOODvOOBp+atouOCgeOCi+OAguS4i+ODrOOCpOODpOODvOOBq+OBguOCi+imgee0oOOBq+OCpOODmeODs+ODiOOCkui1t+OBk+OBleOBquOBhFxyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTsgICAgIC8vIOODluODqeOCpuOCtuaomea6luapn+iDveOBruOCpOODmeODs+ODiOOCkuaKkeatouOBmeOCi1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIOODnuOCpuOCueODoOODvOODluW+jOOBruOCq+ODvOOCveODq+S9jee9ruOCkuW+l+OCi1xyXG4gICAgICAgIGNvbnN0IG1vdmVYID0gZS5wYWdlWDtcclxuICAgICAgICBjb25zdCBtb3ZlWSA9IGUucGFnZVk7XHJcblxyXG4gICAgICAgIC8vIOW9k+ODnOODg+OCr+OCueOBruaWsOOBn+OBquW6p+aomeOCkuaxguOCgeOCi1xyXG4gICAgICAgIGxldCB4ID0gdGhpcy5ib3hvcmdwb3MueCArIChtb3ZlWCAtIHRoaXMubW91c2Vwb3MueCk7XHJcbiAgICAgICAgbGV0IHkgPSB0aGlzLmJveG9yZ3Bvcy55ICsgKG1vdmVZIC0gdGhpcy5tb3VzZXBvcy55KTtcclxuICAgICAgICBcclxuICAgICAgICAvLyDjgqbjgqPjg7Pjg4njgqbjga7nq6/jgavlvZPjg5zjg4Pjgq/jgrnjgYzooYzjgaPjgZ/loLTlkIjjga7luqfmqJnlpInmj5tcclxuICAgICAgICBjb25zdCBbbngsIG55XSA9IHRoaXMuYm94bW92ZXN0b3AoeCwgeSk7XHJcblxyXG4gICAgICAgIC8vIOeUu+WDj+OBruW6p+aomeOCkuabtOaWsOOBl+OBpuaPj+eUu+OBl+ebtOOBmVxyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICB4OiBueCxcclxuICAgICAgICAgICAgeTogbnksXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgbW91c2VVcChlKSB7XHJcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTsgICAgLy8g44GT44Gu44Kk44OZ44Oz44OI44KS44GT44Gu44Os44Kk44Ok44O844Gn5q2i44KB44KL44CC5LiL44Os44Kk44Ok44O844Gr44GC44KL6KaB57Sg44Gr44Kk44OZ44Oz44OI44KS6LW344GT44GV44Gq44GEXHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOyAgICAgLy8g44OW44Op44Km44K25qiZ5rqW5qmf6IO944Gu44Kk44OZ44Oz44OI44KS5oqR5q2i44GZ44KLXHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8g44Kk44OZ44Oz44OI44KS5YmK6Zmk44GZ44KLXHJcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5tb3VzZU1vdmUpO1xyXG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCAgIHRoaXMubW91c2VVcCk7XHJcblxyXG4gICAgICAgIC8vIOenu+WLlee1guS6huWHpueQhlxyXG4gICAgICAgIHRoaXMucHJvcHMuZW5kTW92ZUJveCh7XHJcbiAgICAgICAgICAgIHRvb2xib3hfaWQ6IHRoaXMucHJvcHMudG9vbGJveF9pZCxcclxuICAgICAgICAgICAgeDogIHRoaXMuc3RhdGUueCxcclxuICAgICAgICAgICAgeTogIHRoaXMuc3RhdGUueSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgYm94bW92ZXN0b3AoeCwgeSkge1xyXG4gICAgICAgIGNvbnN0IHdpbmRvd193ID0gd2luZG93LmlubmVyV2lkdGg7XHJcbiAgICAgICAgY29uc3Qgd2luZG93X2ggPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XHJcblxyXG4gICAgICAgIGlmICh4ICsgdGhpcy5wcm9wcy53ID49IHdpbmRvd193KSB7XHJcbiAgICAgICAgICAgIHggPSB3aW5kb3dfdyAtIHRoaXMucHJvcHMudztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHggPD0gMCkge1xyXG4gICAgICAgICAgICB4ID0gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh5ICsgMjAgPj0gd2luZG93X2gpIHtcclxuICAgICAgICAgICAgeSA9IHdpbmRvd19oIC0gMjA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh5IDw9IDApIHtcclxuICAgICAgICAgICAgeSA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiBbeCwgeV07XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgICAgICAgICAgIC4uLnN0eWxlcy5jb250YWluZXIsIFxyXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6ICAgYCR7dGhpcy5zdGF0ZS54fXB4YCxcclxuICAgICAgICAgICAgICAgICAgICB0b3A6ICAgIGAke3RoaXMuc3RhdGUueX1weGAsXHJcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICBgJHt0aGlzLnByb3BzLnd9cHhgLFxyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogYCR7dGhpcy5wcm9wcy5ofXB4YCxcclxuICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXsoZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZT17c3R5bGVzLnRpdGxlfVxyXG4gICAgICAgICAgICAgICAgICAgIG9uTW91c2VEb3duPXsoZSkgPT4gdGhpcy5tb3VzZURvd24oZSl9XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAge3RoaXMucHJvcHMudGl0bGV9XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgLi4uc3R5bGVzLmJvZHksXHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBgY2FsYygke3RoaXMucHJvcHMuaH1weCAtIDIwcHhgLFxyXG4gICAgICAgICAgICAgICAgfX0+XHJcbiAgICAgICAgICAgICAgICAgICAgeyB0aGlzLnByb3BzLmNoaWxkcmVuIH1cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApXHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcclxuXHJcbmltcG9ydCBUb29sQm94IGZyb20gJy4vVG9vbEJveC5qcyc7XHJcblxyXG5pbXBvcnQge1xyXG4gICAgU1VfVG9vbEJveF9Nb3ZlRW5kLFxyXG59IGZyb20gJy4uL2FjdGlvbnNfc3UvdG9vbGJveC5qcyc7XHJcblxyXG5cclxuLy8gbWFwU3RhdGVUb1Byb3BzXHJcbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZSwgcHJvcHMpID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgLi4uc3RhdGUsXHJcbiAgICB9O1xyXG59XHJcblxyXG4vLyBtYXBEaXNwYXRjaFRvUHJvcHNcclxuY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0gKGRpc3BhdGNoLCBwcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBkaXNwYXRjaCxcclxuICAgIH07XHJcbn1cclxuXHJcbi8vIG1lcmdlUHJvcHMgXHJcbmNvbnN0IG1lcmdlUHJvcHMgPSAoc3RhdGUsIGRpc3BhdGNoLCBwcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAvLyB4eHg6IHl5eSxcclxuICAgICAgICAvLyBvblh4eHg6ICh4eHgpID0+IHtcclxuICAgICAgICAvLyAgICAgLi4uLi5cclxuICAgICAgICAvLyAgICAgZGlzcGF0Y2guZGlzcGF0Y2goU1VfWHh4eHh4X1h4eHh4X1h4eHgoKSk7XHJcbiAgICAgICAgLy8gfSxcclxuICAgICAgICAuLi5wcm9wcyxcclxuXHJcbiAgICAgICAgZW5kTW92ZUJveDogKHBheWxvYWQpID0+IHtcclxuICAgICAgICAgICAgZGlzcGF0Y2guZGlzcGF0Y2goU1VfVG9vbEJveF9Nb3ZlRW5kKHBheWxvYWQpKTtcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxyXG5cclxuLy8gY29ubmVjdFxyXG5jb25zdCBUb29sQm94TWFwID0gY29ubmVjdChcclxuICAgIG1hcFN0YXRlVG9Qcm9wcyxcclxuICAgIG1hcERpc3BhdGNoVG9Qcm9wcyxcclxuICAgIG1lcmdlUHJvcHNcclxuKShUb29sQm94KTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFRvb2xCb3hNYXA7XHJcbiIsIi8vXHJcbi8vIOOCpOODmeODs+ODiOezu1xyXG4vL1xyXG5cclxuZXhwb3J0IGNvbnN0IEV2ZW50ID0ge1xyXG4gICAgLy9cclxuICAgIC8vIOOCpOODmeODs+ODiOOCkueZuuihjOOBmeOCi1xyXG4gICAgLy9cclxuICAgIC8vIFtJTl1cclxuICAgIC8vICAgZWxlbWVudDog55m66KGM5YWI44Gu44Ko44Os44Oh44Oz44OIXHJcbiAgICAvLyAgIGV2ZW50OiDnmbrooYzjgZnjgovjgqTjg5njg7Pjg4hcclxuICAgIC8vXHJcbiAgICB0cmlnZ2VyRXZlbnQ6IChlbGVtZW50LCBldmVudCkgPT4ge1xyXG4gICAgICAgIGlmIChkb2N1bWVudC5jcmVhdGVFdmVudCkge1xyXG4gICAgICAgICAgICAvLyBJReS7peWkllxyXG4gICAgICAgICAgICB2YXIgZXZ0ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJIVE1MRXZlbnRzXCIpO1xyXG4gICAgICAgICAgICBldnQuaW5pdEV2ZW50KGV2ZW50LCB0cnVlLCB0cnVlKTsgLy8gZXZlbnQgdHlwZSwgYnViYmxpbmcsIGNhbmNlbGFibGVcclxuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQuZGlzcGF0Y2hFdmVudChldnQpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIElFXHJcbiAgICAgICAgICAgIHZhciBldnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudE9iamVjdCgpO1xyXG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudC5maXJlRXZlbnQoXCJvblwiICsgZXZlbnQsIGV2dClcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIFVzZSB0aGUgZmFzdGVzdCBtZWFucyBwb3NzaWJsZSB0byBleGVjdXRlIGEgdGFzayBpbiBpdHMgb3duIHR1cm4sIHdpdGhcbi8vIHByaW9yaXR5IG92ZXIgb3RoZXIgZXZlbnRzIGluY2x1ZGluZyBJTywgYW5pbWF0aW9uLCByZWZsb3csIGFuZCByZWRyYXdcbi8vIGV2ZW50cyBpbiBicm93c2Vycy5cbi8vXG4vLyBBbiBleGNlcHRpb24gdGhyb3duIGJ5IGEgdGFzayB3aWxsIHBlcm1hbmVudGx5IGludGVycnVwdCB0aGUgcHJvY2Vzc2luZyBvZlxuLy8gc3Vic2VxdWVudCB0YXNrcy4gVGhlIGhpZ2hlciBsZXZlbCBgYXNhcGAgZnVuY3Rpb24gZW5zdXJlcyB0aGF0IGlmIGFuXG4vLyBleGNlcHRpb24gaXMgdGhyb3duIGJ5IGEgdGFzaywgdGhhdCB0aGUgdGFzayBxdWV1ZSB3aWxsIGNvbnRpbnVlIGZsdXNoaW5nIGFzXG4vLyBzb29uIGFzIHBvc3NpYmxlLCBidXQgaWYgeW91IHVzZSBgcmF3QXNhcGAgZGlyZWN0bHksIHlvdSBhcmUgcmVzcG9uc2libGUgdG9cbi8vIGVpdGhlciBlbnN1cmUgdGhhdCBubyBleGNlcHRpb25zIGFyZSB0aHJvd24gZnJvbSB5b3VyIHRhc2ssIG9yIHRvIG1hbnVhbGx5XG4vLyBjYWxsIGByYXdBc2FwLnJlcXVlc3RGbHVzaGAgaWYgYW4gZXhjZXB0aW9uIGlzIHRocm93bi5cbm1vZHVsZS5leHBvcnRzID0gcmF3QXNhcDtcbmZ1bmN0aW9uIHJhd0FzYXAodGFzaykge1xuICAgIGlmICghcXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHJlcXVlc3RGbHVzaCgpO1xuICAgICAgICBmbHVzaGluZyA9IHRydWU7XG4gICAgfVxuICAgIC8vIEVxdWl2YWxlbnQgdG8gcHVzaCwgYnV0IGF2b2lkcyBhIGZ1bmN0aW9uIGNhbGwuXG4gICAgcXVldWVbcXVldWUubGVuZ3RoXSA9IHRhc2s7XG59XG5cbnZhciBxdWV1ZSA9IFtdO1xuLy8gT25jZSBhIGZsdXNoIGhhcyBiZWVuIHJlcXVlc3RlZCwgbm8gZnVydGhlciBjYWxscyB0byBgcmVxdWVzdEZsdXNoYCBhcmVcbi8vIG5lY2Vzc2FyeSB1bnRpbCB0aGUgbmV4dCBgZmx1c2hgIGNvbXBsZXRlcy5cbnZhciBmbHVzaGluZyA9IGZhbHNlO1xuLy8gYHJlcXVlc3RGbHVzaGAgaXMgYW4gaW1wbGVtZW50YXRpb24tc3BlY2lmaWMgbWV0aG9kIHRoYXQgYXR0ZW1wdHMgdG8ga2lja1xuLy8gb2ZmIGEgYGZsdXNoYCBldmVudCBhcyBxdWlja2x5IGFzIHBvc3NpYmxlLiBgZmx1c2hgIHdpbGwgYXR0ZW1wdCB0byBleGhhdXN0XG4vLyB0aGUgZXZlbnQgcXVldWUgYmVmb3JlIHlpZWxkaW5nIHRvIHRoZSBicm93c2VyJ3Mgb3duIGV2ZW50IGxvb3AuXG52YXIgcmVxdWVzdEZsdXNoO1xuLy8gVGhlIHBvc2l0aW9uIG9mIHRoZSBuZXh0IHRhc2sgdG8gZXhlY3V0ZSBpbiB0aGUgdGFzayBxdWV1ZS4gVGhpcyBpc1xuLy8gcHJlc2VydmVkIGJldHdlZW4gY2FsbHMgdG8gYGZsdXNoYCBzbyB0aGF0IGl0IGNhbiBiZSByZXN1bWVkIGlmXG4vLyBhIHRhc2sgdGhyb3dzIGFuIGV4Y2VwdGlvbi5cbnZhciBpbmRleCA9IDA7XG4vLyBJZiBhIHRhc2sgc2NoZWR1bGVzIGFkZGl0aW9uYWwgdGFza3MgcmVjdXJzaXZlbHksIHRoZSB0YXNrIHF1ZXVlIGNhbiBncm93XG4vLyB1bmJvdW5kZWQuIFRvIHByZXZlbnQgbWVtb3J5IGV4aGF1c3Rpb24sIHRoZSB0YXNrIHF1ZXVlIHdpbGwgcGVyaW9kaWNhbGx5XG4vLyB0cnVuY2F0ZSBhbHJlYWR5LWNvbXBsZXRlZCB0YXNrcy5cbnZhciBjYXBhY2l0eSA9IDEwMjQ7XG5cbi8vIFRoZSBmbHVzaCBmdW5jdGlvbiBwcm9jZXNzZXMgYWxsIHRhc2tzIHRoYXQgaGF2ZSBiZWVuIHNjaGVkdWxlZCB3aXRoXG4vLyBgcmF3QXNhcGAgdW5sZXNzIGFuZCB1bnRpbCBvbmUgb2YgdGhvc2UgdGFza3MgdGhyb3dzIGFuIGV4Y2VwdGlvbi5cbi8vIElmIGEgdGFzayB0aHJvd3MgYW4gZXhjZXB0aW9uLCBgZmx1c2hgIGVuc3VyZXMgdGhhdCBpdHMgc3RhdGUgd2lsbCByZW1haW5cbi8vIGNvbnNpc3RlbnQgYW5kIHdpbGwgcmVzdW1lIHdoZXJlIGl0IGxlZnQgb2ZmIHdoZW4gY2FsbGVkIGFnYWluLlxuLy8gSG93ZXZlciwgYGZsdXNoYCBkb2VzIG5vdCBtYWtlIGFueSBhcnJhbmdlbWVudHMgdG8gYmUgY2FsbGVkIGFnYWluIGlmIGFuXG4vLyBleGNlcHRpb24gaXMgdGhyb3duLlxuZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgd2hpbGUgKGluZGV4IDwgcXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHZhciBjdXJyZW50SW5kZXggPSBpbmRleDtcbiAgICAgICAgLy8gQWR2YW5jZSB0aGUgaW5kZXggYmVmb3JlIGNhbGxpbmcgdGhlIHRhc2suIFRoaXMgZW5zdXJlcyB0aGF0IHdlIHdpbGxcbiAgICAgICAgLy8gYmVnaW4gZmx1c2hpbmcgb24gdGhlIG5leHQgdGFzayB0aGUgdGFzayB0aHJvd3MgYW4gZXJyb3IuXG4gICAgICAgIGluZGV4ID0gaW5kZXggKyAxO1xuICAgICAgICBxdWV1ZVtjdXJyZW50SW5kZXhdLmNhbGwoKTtcbiAgICAgICAgLy8gUHJldmVudCBsZWFraW5nIG1lbW9yeSBmb3IgbG9uZyBjaGFpbnMgb2YgcmVjdXJzaXZlIGNhbGxzIHRvIGBhc2FwYC5cbiAgICAgICAgLy8gSWYgd2UgY2FsbCBgYXNhcGAgd2l0aGluIHRhc2tzIHNjaGVkdWxlZCBieSBgYXNhcGAsIHRoZSBxdWV1ZSB3aWxsXG4gICAgICAgIC8vIGdyb3csIGJ1dCB0byBhdm9pZCBhbiBPKG4pIHdhbGsgZm9yIGV2ZXJ5IHRhc2sgd2UgZXhlY3V0ZSwgd2UgZG9uJ3RcbiAgICAgICAgLy8gc2hpZnQgdGFza3Mgb2ZmIHRoZSBxdWV1ZSBhZnRlciB0aGV5IGhhdmUgYmVlbiBleGVjdXRlZC5cbiAgICAgICAgLy8gSW5zdGVhZCwgd2UgcGVyaW9kaWNhbGx5IHNoaWZ0IDEwMjQgdGFza3Mgb2ZmIHRoZSBxdWV1ZS5cbiAgICAgICAgaWYgKGluZGV4ID4gY2FwYWNpdHkpIHtcbiAgICAgICAgICAgIC8vIE1hbnVhbGx5IHNoaWZ0IGFsbCB2YWx1ZXMgc3RhcnRpbmcgYXQgdGhlIGluZGV4IGJhY2sgdG8gdGhlXG4gICAgICAgICAgICAvLyBiZWdpbm5pbmcgb2YgdGhlIHF1ZXVlLlxuICAgICAgICAgICAgZm9yICh2YXIgc2NhbiA9IDAsIG5ld0xlbmd0aCA9IHF1ZXVlLmxlbmd0aCAtIGluZGV4OyBzY2FuIDwgbmV3TGVuZ3RoOyBzY2FuKyspIHtcbiAgICAgICAgICAgICAgICBxdWV1ZVtzY2FuXSA9IHF1ZXVlW3NjYW4gKyBpbmRleF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBxdWV1ZS5sZW5ndGggLT0gaW5kZXg7XG4gICAgICAgICAgICBpbmRleCA9IDA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUubGVuZ3RoID0gMDtcbiAgICBpbmRleCA9IDA7XG4gICAgZmx1c2hpbmcgPSBmYWxzZTtcbn1cblxuLy8gYHJlcXVlc3RGbHVzaGAgaXMgaW1wbGVtZW50ZWQgdXNpbmcgYSBzdHJhdGVneSBiYXNlZCBvbiBkYXRhIGNvbGxlY3RlZCBmcm9tXG4vLyBldmVyeSBhdmFpbGFibGUgU2F1Y2VMYWJzIFNlbGVuaXVtIHdlYiBkcml2ZXIgd29ya2VyIGF0IHRpbWUgb2Ygd3JpdGluZy5cbi8vIGh0dHBzOi8vZG9jcy5nb29nbGUuY29tL3NwcmVhZHNoZWV0cy9kLzFtRy01VVlHdXA1cXhHZEVNV2toUDZCV0N6MDUzTlViMkUxUW9VVFUxNnVBL2VkaXQjZ2lkPTc4MzcyNDU5M1xuXG4vLyBTYWZhcmkgNiBhbmQgNi4xIGZvciBkZXNrdG9wLCBpUGFkLCBhbmQgaVBob25lIGFyZSB0aGUgb25seSBicm93c2VycyB0aGF0XG4vLyBoYXZlIFdlYktpdE11dGF0aW9uT2JzZXJ2ZXIgYnV0IG5vdCB1bi1wcmVmaXhlZCBNdXRhdGlvbk9ic2VydmVyLlxuLy8gTXVzdCB1c2UgYGdsb2JhbGAgb3IgYHNlbGZgIGluc3RlYWQgb2YgYHdpbmRvd2AgdG8gd29yayBpbiBib3RoIGZyYW1lcyBhbmQgd2ViXG4vLyB3b3JrZXJzLiBgZ2xvYmFsYCBpcyBhIHByb3Zpc2lvbiBvZiBCcm93c2VyaWZ5LCBNciwgTXJzLCBvciBNb3AuXG5cbi8qIGdsb2JhbHMgc2VsZiAqL1xudmFyIHNjb3BlID0gdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbCA6IHNlbGY7XG52YXIgQnJvd3Nlck11dGF0aW9uT2JzZXJ2ZXIgPSBzY29wZS5NdXRhdGlvbk9ic2VydmVyIHx8IHNjb3BlLldlYktpdE11dGF0aW9uT2JzZXJ2ZXI7XG5cbi8vIE11dGF0aW9uT2JzZXJ2ZXJzIGFyZSBkZXNpcmFibGUgYmVjYXVzZSB0aGV5IGhhdmUgaGlnaCBwcmlvcml0eSBhbmQgd29ya1xuLy8gcmVsaWFibHkgZXZlcnl3aGVyZSB0aGV5IGFyZSBpbXBsZW1lbnRlZC5cbi8vIFRoZXkgYXJlIGltcGxlbWVudGVkIGluIGFsbCBtb2Rlcm4gYnJvd3NlcnMuXG4vL1xuLy8gLSBBbmRyb2lkIDQtNC4zXG4vLyAtIENocm9tZSAyNi0zNFxuLy8gLSBGaXJlZm94IDE0LTI5XG4vLyAtIEludGVybmV0IEV4cGxvcmVyIDExXG4vLyAtIGlQYWQgU2FmYXJpIDYtNy4xXG4vLyAtIGlQaG9uZSBTYWZhcmkgNy03LjFcbi8vIC0gU2FmYXJpIDYtN1xuaWYgKHR5cGVvZiBCcm93c2VyTXV0YXRpb25PYnNlcnZlciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgcmVxdWVzdEZsdXNoID0gbWFrZVJlcXVlc3RDYWxsRnJvbU11dGF0aW9uT2JzZXJ2ZXIoZmx1c2gpO1xuXG4vLyBNZXNzYWdlQ2hhbm5lbHMgYXJlIGRlc2lyYWJsZSBiZWNhdXNlIHRoZXkgZ2l2ZSBkaXJlY3QgYWNjZXNzIHRvIHRoZSBIVE1MXG4vLyB0YXNrIHF1ZXVlLCBhcmUgaW1wbGVtZW50ZWQgaW4gSW50ZXJuZXQgRXhwbG9yZXIgMTAsIFNhZmFyaSA1LjAtMSwgYW5kIE9wZXJhXG4vLyAxMS0xMiwgYW5kIGluIHdlYiB3b3JrZXJzIGluIG1hbnkgZW5naW5lcy5cbi8vIEFsdGhvdWdoIG1lc3NhZ2UgY2hhbm5lbHMgeWllbGQgdG8gYW55IHF1ZXVlZCByZW5kZXJpbmcgYW5kIElPIHRhc2tzLCB0aGV5XG4vLyB3b3VsZCBiZSBiZXR0ZXIgdGhhbiBpbXBvc2luZyB0aGUgNG1zIGRlbGF5IG9mIHRpbWVycy5cbi8vIEhvd2V2ZXIsIHRoZXkgZG8gbm90IHdvcmsgcmVsaWFibHkgaW4gSW50ZXJuZXQgRXhwbG9yZXIgb3IgU2FmYXJpLlxuXG4vLyBJbnRlcm5ldCBFeHBsb3JlciAxMCBpcyB0aGUgb25seSBicm93c2VyIHRoYXQgaGFzIHNldEltbWVkaWF0ZSBidXQgZG9lc1xuLy8gbm90IGhhdmUgTXV0YXRpb25PYnNlcnZlcnMuXG4vLyBBbHRob3VnaCBzZXRJbW1lZGlhdGUgeWllbGRzIHRvIHRoZSBicm93c2VyJ3MgcmVuZGVyZXIsIGl0IHdvdWxkIGJlXG4vLyBwcmVmZXJyYWJsZSB0byBmYWxsaW5nIGJhY2sgdG8gc2V0VGltZW91dCBzaW5jZSBpdCBkb2VzIG5vdCBoYXZlXG4vLyB0aGUgbWluaW11bSA0bXMgcGVuYWx0eS5cbi8vIFVuZm9ydHVuYXRlbHkgdGhlcmUgYXBwZWFycyB0byBiZSBhIGJ1ZyBpbiBJbnRlcm5ldCBFeHBsb3JlciAxMCBNb2JpbGUgKGFuZFxuLy8gRGVza3RvcCB0byBhIGxlc3NlciBleHRlbnQpIHRoYXQgcmVuZGVycyBib3RoIHNldEltbWVkaWF0ZSBhbmRcbi8vIE1lc3NhZ2VDaGFubmVsIHVzZWxlc3MgZm9yIHRoZSBwdXJwb3NlcyBvZiBBU0FQLlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2tyaXNrb3dhbC9xL2lzc3Vlcy8zOTZcblxuLy8gVGltZXJzIGFyZSBpbXBsZW1lbnRlZCB1bml2ZXJzYWxseS5cbi8vIFdlIGZhbGwgYmFjayB0byB0aW1lcnMgaW4gd29ya2VycyBpbiBtb3N0IGVuZ2luZXMsIGFuZCBpbiBmb3JlZ3JvdW5kXG4vLyBjb250ZXh0cyBpbiB0aGUgZm9sbG93aW5nIGJyb3dzZXJzLlxuLy8gSG93ZXZlciwgbm90ZSB0aGF0IGV2ZW4gdGhpcyBzaW1wbGUgY2FzZSByZXF1aXJlcyBudWFuY2VzIHRvIG9wZXJhdGUgaW4gYVxuLy8gYnJvYWQgc3BlY3RydW0gb2YgYnJvd3NlcnMuXG4vL1xuLy8gLSBGaXJlZm94IDMtMTNcbi8vIC0gSW50ZXJuZXQgRXhwbG9yZXIgNi05XG4vLyAtIGlQYWQgU2FmYXJpIDQuM1xuLy8gLSBMeW54IDIuOC43XG59IGVsc2Uge1xuICAgIHJlcXVlc3RGbHVzaCA9IG1ha2VSZXF1ZXN0Q2FsbEZyb21UaW1lcihmbHVzaCk7XG59XG5cbi8vIGByZXF1ZXN0Rmx1c2hgIHJlcXVlc3RzIHRoYXQgdGhlIGhpZ2ggcHJpb3JpdHkgZXZlbnQgcXVldWUgYmUgZmx1c2hlZCBhc1xuLy8gc29vbiBhcyBwb3NzaWJsZS5cbi8vIFRoaXMgaXMgdXNlZnVsIHRvIHByZXZlbnQgYW4gZXJyb3IgdGhyb3duIGluIGEgdGFzayBmcm9tIHN0YWxsaW5nIHRoZSBldmVudFxuLy8gcXVldWUgaWYgdGhlIGV4Y2VwdGlvbiBoYW5kbGVkIGJ5IE5vZGUuanPigJlzXG4vLyBgcHJvY2Vzcy5vbihcInVuY2F1Z2h0RXhjZXB0aW9uXCIpYCBvciBieSBhIGRvbWFpbi5cbnJhd0FzYXAucmVxdWVzdEZsdXNoID0gcmVxdWVzdEZsdXNoO1xuXG4vLyBUbyByZXF1ZXN0IGEgaGlnaCBwcmlvcml0eSBldmVudCwgd2UgaW5kdWNlIGEgbXV0YXRpb24gb2JzZXJ2ZXIgYnkgdG9nZ2xpbmdcbi8vIHRoZSB0ZXh0IG9mIGEgdGV4dCBub2RlIGJldHdlZW4gXCIxXCIgYW5kIFwiLTFcIi5cbmZ1bmN0aW9uIG1ha2VSZXF1ZXN0Q2FsbEZyb21NdXRhdGlvbk9ic2VydmVyKGNhbGxiYWNrKSB7XG4gICAgdmFyIHRvZ2dsZSA9IDE7XG4gICAgdmFyIG9ic2VydmVyID0gbmV3IEJyb3dzZXJNdXRhdGlvbk9ic2VydmVyKGNhbGxiYWNrKTtcbiAgICB2YXIgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFwiXCIpO1xuICAgIG9ic2VydmVyLm9ic2VydmUobm9kZSwge2NoYXJhY3RlckRhdGE6IHRydWV9KTtcbiAgICByZXR1cm4gZnVuY3Rpb24gcmVxdWVzdENhbGwoKSB7XG4gICAgICAgIHRvZ2dsZSA9IC10b2dnbGU7XG4gICAgICAgIG5vZGUuZGF0YSA9IHRvZ2dsZTtcbiAgICB9O1xufVxuXG4vLyBUaGUgbWVzc2FnZSBjaGFubmVsIHRlY2huaXF1ZSB3YXMgZGlzY292ZXJlZCBieSBNYWx0ZSBVYmwgYW5kIHdhcyB0aGVcbi8vIG9yaWdpbmFsIGZvdW5kYXRpb24gZm9yIHRoaXMgbGlicmFyeS5cbi8vIGh0dHA6Ly93d3cubm9uYmxvY2tpbmcuaW8vMjAxMS8wNi93aW5kb3duZXh0dGljay5odG1sXG5cbi8vIFNhZmFyaSA2LjAuNSAoYXQgbGVhc3QpIGludGVybWl0dGVudGx5IGZhaWxzIHRvIGNyZWF0ZSBtZXNzYWdlIHBvcnRzIG9uIGFcbi8vIHBhZ2UncyBmaXJzdCBsb2FkLiBUaGFua2Z1bGx5LCB0aGlzIHZlcnNpb24gb2YgU2FmYXJpIHN1cHBvcnRzXG4vLyBNdXRhdGlvbk9ic2VydmVycywgc28gd2UgZG9uJ3QgbmVlZCB0byBmYWxsIGJhY2sgaW4gdGhhdCBjYXNlLlxuXG4vLyBmdW5jdGlvbiBtYWtlUmVxdWVzdENhbGxGcm9tTWVzc2FnZUNoYW5uZWwoY2FsbGJhY2spIHtcbi8vICAgICB2YXIgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuLy8gICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gY2FsbGJhY2s7XG4vLyAgICAgcmV0dXJuIGZ1bmN0aW9uIHJlcXVlc3RDYWxsKCkge1xuLy8gICAgICAgICBjaGFubmVsLnBvcnQyLnBvc3RNZXNzYWdlKDApO1xuLy8gICAgIH07XG4vLyB9XG5cbi8vIEZvciByZWFzb25zIGV4cGxhaW5lZCBhYm92ZSwgd2UgYXJlIGFsc28gdW5hYmxlIHRvIHVzZSBgc2V0SW1tZWRpYXRlYFxuLy8gdW5kZXIgYW55IGNpcmN1bXN0YW5jZXMuXG4vLyBFdmVuIGlmIHdlIHdlcmUsIHRoZXJlIGlzIGFub3RoZXIgYnVnIGluIEludGVybmV0IEV4cGxvcmVyIDEwLlxuLy8gSXQgaXMgbm90IHN1ZmZpY2llbnQgdG8gYXNzaWduIGBzZXRJbW1lZGlhdGVgIHRvIGByZXF1ZXN0Rmx1c2hgIGJlY2F1c2Vcbi8vIGBzZXRJbW1lZGlhdGVgIG11c3QgYmUgY2FsbGVkICpieSBuYW1lKiBhbmQgdGhlcmVmb3JlIG11c3QgYmUgd3JhcHBlZCBpbiBhXG4vLyBjbG9zdXJlLlxuLy8gTmV2ZXIgZm9yZ2V0LlxuXG4vLyBmdW5jdGlvbiBtYWtlUmVxdWVzdENhbGxGcm9tU2V0SW1tZWRpYXRlKGNhbGxiYWNrKSB7XG4vLyAgICAgcmV0dXJuIGZ1bmN0aW9uIHJlcXVlc3RDYWxsKCkge1xuLy8gICAgICAgICBzZXRJbW1lZGlhdGUoY2FsbGJhY2spO1xuLy8gICAgIH07XG4vLyB9XG5cbi8vIFNhZmFyaSA2LjAgaGFzIGEgcHJvYmxlbSB3aGVyZSB0aW1lcnMgd2lsbCBnZXQgbG9zdCB3aGlsZSB0aGUgdXNlciBpc1xuLy8gc2Nyb2xsaW5nLiBUaGlzIHByb2JsZW0gZG9lcyBub3QgaW1wYWN0IEFTQVAgYmVjYXVzZSBTYWZhcmkgNi4wIHN1cHBvcnRzXG4vLyBtdXRhdGlvbiBvYnNlcnZlcnMsIHNvIHRoYXQgaW1wbGVtZW50YXRpb24gaXMgdXNlZCBpbnN0ZWFkLlxuLy8gSG93ZXZlciwgaWYgd2UgZXZlciBlbGVjdCB0byB1c2UgdGltZXJzIGluIFNhZmFyaSwgdGhlIHByZXZhbGVudCB3b3JrLWFyb3VuZFxuLy8gaXMgdG8gYWRkIGEgc2Nyb2xsIGV2ZW50IGxpc3RlbmVyIHRoYXQgY2FsbHMgZm9yIGEgZmx1c2guXG5cbi8vIGBzZXRUaW1lb3V0YCBkb2VzIG5vdCBjYWxsIHRoZSBwYXNzZWQgY2FsbGJhY2sgaWYgdGhlIGRlbGF5IGlzIGxlc3MgdGhhblxuLy8gYXBwcm94aW1hdGVseSA3IGluIHdlYiB3b3JrZXJzIGluIEZpcmVmb3ggOCB0aHJvdWdoIDE4LCBhbmQgc29tZXRpbWVzIG5vdFxuLy8gZXZlbiB0aGVuLlxuXG5mdW5jdGlvbiBtYWtlUmVxdWVzdENhbGxGcm9tVGltZXIoY2FsbGJhY2spIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gcmVxdWVzdENhbGwoKSB7XG4gICAgICAgIC8vIFdlIGRpc3BhdGNoIGEgdGltZW91dCB3aXRoIGEgc3BlY2lmaWVkIGRlbGF5IG9mIDAgZm9yIGVuZ2luZXMgdGhhdFxuICAgICAgICAvLyBjYW4gcmVsaWFibHkgYWNjb21tb2RhdGUgdGhhdCByZXF1ZXN0LiBUaGlzIHdpbGwgdXN1YWxseSBiZSBzbmFwcGVkXG4gICAgICAgIC8vIHRvIGEgNCBtaWxpc2Vjb25kIGRlbGF5LCBidXQgb25jZSB3ZSdyZSBmbHVzaGluZywgdGhlcmUncyBubyBkZWxheVxuICAgICAgICAvLyBiZXR3ZWVuIGV2ZW50cy5cbiAgICAgICAgdmFyIHRpbWVvdXRIYW5kbGUgPSBzZXRUaW1lb3V0KGhhbmRsZVRpbWVyLCAwKTtcbiAgICAgICAgLy8gSG93ZXZlciwgc2luY2UgdGhpcyB0aW1lciBnZXRzIGZyZXF1ZW50bHkgZHJvcHBlZCBpbiBGaXJlZm94XG4gICAgICAgIC8vIHdvcmtlcnMsIHdlIGVubGlzdCBhbiBpbnRlcnZhbCBoYW5kbGUgdGhhdCB3aWxsIHRyeSB0byBmaXJlXG4gICAgICAgIC8vIGFuIGV2ZW50IDIwIHRpbWVzIHBlciBzZWNvbmQgdW50aWwgaXQgc3VjY2VlZHMuXG4gICAgICAgIHZhciBpbnRlcnZhbEhhbmRsZSA9IHNldEludGVydmFsKGhhbmRsZVRpbWVyLCA1MCk7XG5cbiAgICAgICAgZnVuY3Rpb24gaGFuZGxlVGltZXIoKSB7XG4gICAgICAgICAgICAvLyBXaGljaGV2ZXIgdGltZXIgc3VjY2VlZHMgd2lsbCBjYW5jZWwgYm90aCB0aW1lcnMgYW5kXG4gICAgICAgICAgICAvLyBleGVjdXRlIHRoZSBjYWxsYmFjay5cbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SGFuZGxlKTtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWxIYW5kbGUpO1xuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgfVxuICAgIH07XG59XG5cbi8vIFRoaXMgaXMgZm9yIGBhc2FwLmpzYCBvbmx5LlxuLy8gSXRzIG5hbWUgd2lsbCBiZSBwZXJpb2RpY2FsbHkgcmFuZG9taXplZCB0byBicmVhayBhbnkgY29kZSB0aGF0IGRlcGVuZHMgb25cbi8vIGl0cyBleGlzdGVuY2UuXG5yYXdBc2FwLm1ha2VSZXF1ZXN0Q2FsbEZyb21UaW1lciA9IG1ha2VSZXF1ZXN0Q2FsbEZyb21UaW1lcjtcblxuLy8gQVNBUCB3YXMgb3JpZ2luYWxseSBhIG5leHRUaWNrIHNoaW0gaW5jbHVkZWQgaW4gUS4gVGhpcyB3YXMgZmFjdG9yZWQgb3V0XG4vLyBpbnRvIHRoaXMgQVNBUCBwYWNrYWdlLiBJdCB3YXMgbGF0ZXIgYWRhcHRlZCB0byBSU1ZQIHdoaWNoIG1hZGUgZnVydGhlclxuLy8gYW1lbmRtZW50cy4gVGhlc2UgZGVjaXNpb25zLCBwYXJ0aWN1bGFybHkgdG8gbWFyZ2luYWxpemUgTWVzc2FnZUNoYW5uZWwgYW5kXG4vLyB0byBjYXB0dXJlIHRoZSBNdXRhdGlvbk9ic2VydmVyIGltcGxlbWVudGF0aW9uIGluIGEgY2xvc3VyZSwgd2VyZSBpbnRlZ3JhdGVkXG4vLyBiYWNrIGludG8gQVNBUCBwcm9wZXIuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGlsZGVpby9yc3ZwLmpzL2Jsb2IvY2RkZjcyMzI1NDZhOWNmODU4NTI0Yjc1Y2RlNmY5ZWRmNzI2MjBhNy9saWIvcnN2cC9hc2FwLmpzXG4iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzT2JqZWN0O1xuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgT2JqZWN0ICYmICFBcnJheS5pc0FycmF5KHZhbHVlKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBhZGROZXdWYWx1ZXNPbmx5O1xuZnVuY3Rpb24gYWRkSWZOZXcobGlzdCwgdmFsdWUpIHtcbiAgaWYgKGxpc3QuaW5kZXhPZih2YWx1ZSkgPT09IC0xKSB7XG4gICAgbGlzdC5wdXNoKHZhbHVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhZGROZXdWYWx1ZXNPbmx5KGxpc3QsIHZhbHVlcykge1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZXMpKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHZhbHVlcy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgICAgYWRkSWZOZXcobGlzdCwgdmFsdWVzW2ldKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYWRkSWZOZXcobGlzdCwgdmFsdWVzKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHByZWZpeFZhbHVlO1xuZnVuY3Rpb24gcHJlZml4VmFsdWUocGx1Z2lucywgcHJvcGVydHksIHZhbHVlLCBzdHlsZSwgbWV0YURhdGEpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHBsdWdpbnMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICB2YXIgcHJvY2Vzc2VkVmFsdWUgPSBwbHVnaW5zW2ldKHByb3BlcnR5LCB2YWx1ZSwgc3R5bGUsIG1ldGFEYXRhKTtcblxuICAgIC8vIHdlIGNhbiBzdG9wIHByb2Nlc3NpbmcgaWYgYSB2YWx1ZSBpcyByZXR1cm5lZFxuICAgIC8vIGFzIGFsbCBwbHVnaW4gY3JpdGVyaWEgYXJlIHVuaXF1ZVxuICAgIGlmIChwcm9jZXNzZWRWYWx1ZSkge1xuICAgICAgcmV0dXJuIHByb2Nlc3NlZFZhbHVlO1xuICAgIH1cbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBwcmVmaXhQcm9wZXJ0eTtcblxudmFyIF9jYXBpdGFsaXplU3RyaW5nID0gcmVxdWlyZSgnLi9jYXBpdGFsaXplU3RyaW5nJyk7XG5cbnZhciBfY2FwaXRhbGl6ZVN0cmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jYXBpdGFsaXplU3RyaW5nKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gcHJlZml4UHJvcGVydHkocHJlZml4UHJvcGVydGllcywgcHJvcGVydHksIHN0eWxlKSB7XG4gIGlmIChwcmVmaXhQcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KHByb3BlcnR5KSkge1xuICAgIHZhciBuZXdTdHlsZSA9IHt9O1xuICAgIHZhciByZXF1aXJlZFByZWZpeGVzID0gcHJlZml4UHJvcGVydGllc1twcm9wZXJ0eV07XG4gICAgdmFyIGNhcGl0YWxpemVkUHJvcGVydHkgPSAoMCwgX2NhcGl0YWxpemVTdHJpbmcyLmRlZmF1bHQpKHByb3BlcnR5KTtcbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHN0eWxlKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzdHlsZVByb3BlcnR5ID0ga2V5c1tpXTtcbiAgICAgIGlmIChzdHlsZVByb3BlcnR5ID09PSBwcm9wZXJ0eSkge1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHJlcXVpcmVkUHJlZml4ZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBuZXdTdHlsZVtyZXF1aXJlZFByZWZpeGVzW2pdICsgY2FwaXRhbGl6ZWRQcm9wZXJ0eV0gPSBzdHlsZVtwcm9wZXJ0eV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG5ld1N0eWxlW3N0eWxlUHJvcGVydHldID0gc3R5bGVbc3R5bGVQcm9wZXJ0eV07XG4gICAgfVxuICAgIHJldHVybiBuZXdTdHlsZTtcbiAgfVxuICByZXR1cm4gc3R5bGU7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciB1cHBlcmNhc2VQYXR0ZXJuID0gL1tBLVpdL2c7XG52YXIgbXNQYXR0ZXJuID0gL15tcy0vO1xudmFyIGNhY2hlID0ge307XG5cbmZ1bmN0aW9uIGh5cGhlbmF0ZVN0eWxlTmFtZShzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nIGluIGNhY2hlXG4gICAgPyBjYWNoZVtzdHJpbmddXG4gICAgOiBjYWNoZVtzdHJpbmddID0gc3RyaW5nXG4gICAgICAucmVwbGFjZSh1cHBlcmNhc2VQYXR0ZXJuLCAnLSQmJylcbiAgICAgIC50b0xvd2VyQ2FzZSgpXG4gICAgICAucmVwbGFjZShtc1BhdHRlcm4sICctbXMtJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaHlwaGVuYXRlU3R5bGVOYW1lO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaHlwaGVuYXRlUHJvcGVydHk7XG5cbnZhciBfaHlwaGVuYXRlU3R5bGVOYW1lID0gcmVxdWlyZSgnaHlwaGVuYXRlLXN0eWxlLW5hbWUnKTtcblxudmFyIF9oeXBoZW5hdGVTdHlsZU5hbWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaHlwaGVuYXRlU3R5bGVOYW1lKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gaHlwaGVuYXRlUHJvcGVydHkocHJvcGVydHkpIHtcbiAgcmV0dXJuICgwLCBfaHlwaGVuYXRlU3R5bGVOYW1lMi5kZWZhdWx0KShwcm9wZXJ0eSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBTdHlsZVNoZWV0LCBjc3MgfSBmcm9tICdhcGhyb2RpdGUnO1xyXG5cclxuaW1wb3J0IHsgRGVmaW5lIH0gZnJvbSAnLi4vZGVmaW5lLmpzJztcclxuaW1wb3J0IHsgWmFoeW8sIEN1cnNvciB9IGZyb20gJy4uL2xpYnMvemFoeW8uanMnO1xyXG5pbXBvcnQgeyBFdmVudCB9IGZyb20gJy4uL2xpYnMvZXZlbnQuanMnO1xyXG5cclxuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xyXG4gICAgY29udGFpbmVyOiB7XHJcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXHJcbiAgICAgICAgd2lkdGg6ICczMDBweCcsXHJcbiAgICAgICAgcGFkZGluZzogJzEwcHgnLFxyXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJyNmZWZlZmUnLFxyXG4gICAgICAgIGJvcmRlcjogJzFweCBzb2xpZCBsaWdodGdyYXknLFxyXG4gICAgICAgIGJveFNoYWRvdzogJzJweCAycHggMnB4IHJnYmEoMCwgMCwgMCwgMC40KScsXHJcbiAgICAgICAgY29sb3I6ICcjNTU1JyxcclxuICAgICAgICBmb250U2l6ZTogJzEycHgnLFxyXG4gICAgfSxcclxuICAgIGl0ZW06IHtcclxuICAgICAgICBwYWRkaW5nOiAnNXB4JyxcclxuICAgICAgICAnOmhvdmVyJzoge1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjZGRkJyxcclxuICAgICAgICAgICAgY3Vyc29yOiAncG9pbnRlcicsXHJcbiAgICAgICAgfSxcclxuICAgIH0sXHJcbiAgICBncmF5b3V0OiB7XHJcbiAgICAgICAgcGFkZGluZzogJzVweCcsXHJcbiAgICAgICAgY29sb3I6ICdsaWdodGdyYXknLFxyXG4gICAgICAgIGN1cnNvcjogJ2RlZmF1bHQnLFxyXG4gICAgfSxcclxufSk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb250ZXh0TWVudSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKTtcclxuXHJcbiAgICAgICAgdGhpcy5jbGlja0RvY3VtZW50ID0gdGhpcy5jbGlja0RvY3VtZW50LmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5jbGlja0Jhc2UgICAgID0gdGhpcy5jbGlja0Jhc2UuYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLmNsaWNrTmV3Qm94VGV4dCA9IHRoaXMuY2xpY2tOZXdCb3hUZXh0LmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5jbGlja05ld0JveEltYWdlID0gdGhpcy5jbGlja05ld0JveEltYWdlLmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5jbGlja0NvcHlCb3hPbkdyb3VwID0gdGhpcy5jbGlja0NvcHlCb3hPbkdyb3VwLmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5jbGlja0NvcHlCb3ggPSB0aGlzLmNsaWNrQ29weUJveC5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuY2xpY2tTb3phaVVubGluayA9IHRoaXMuY2xpY2tTb3phaVVubGluay5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuY2xpY2tCb3hSZW1vdmUgPSB0aGlzLmNsaWNrQm94UmVtb3ZlLmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5jbGlja0JveFRvRnJvbnQgPSB0aGlzLmNsaWNrQm94VG9Gcm9udC5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuY2xpY2tCb3hUb0JhY2sgPSB0aGlzLmNsaWNrQm94VG9CYWNrLmJpbmQodGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7XHJcbiAgICAgICAgdGhpcy5hZGRFdmVudCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xyXG4gICAgICAgIHRoaXMucmVtb3ZlRXZlbnQoKTtcclxuICAgIH1cclxuXHJcbiAgICBhZGRFdmVudCgpIHtcclxuICAgICAgICBsZXQgZWxlbTtcclxuXHJcbiAgICAgICAgLy8gZG9jdW1lbnQg44GuIG1vdXNlZG93biBhbmQgY2xpY2tcclxuICAgICAgICBlbGVtID0gZG9jdW1lbnQ7XHJcbiAgICAgICAgZWxlbS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICAgICB0aGlzLmNsaWNrRG9jdW1lbnQsIGZhbHNlKTtcclxuICAgICAgICBlbGVtLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMuY2xpY2tEb2N1bWVudCwgZmFsc2UpO1xyXG5cclxuICAgICAgICAvLyDjgrPjg7Pjg4bjgq3jgrnjg4jjg6Hjg4vjg6Xjg7zjga7jg5njg7zjgrnpg6jliIbjga4gbW91c2Vkb3duIGFuZCBjbGlja1xyXG4gICAgICAgIGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29udGV4dG1lbnUnKTtcclxuICAgICAgICBlbGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgICAgIHRoaXMuY2xpY2tCYXNlLCBmYWxzZSk7XHJcbiAgICAgICAgZWxlbS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLmNsaWNrQmFzZSwgZmFsc2UpO1xyXG5cclxuICAgICAgICAvLyDmlrDopo/kvZzmiJDvvIjjg4bjgq3jgrnjg4jjg5zjg4Pjgq/jgrnvvInjga4gbW91c2Vkb3duXHJcbiAgICAgICAgZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjbV9uZXdib3h0ZXh0Jyk7XHJcbiAgICAgICAgaWYgKGVsZW0pIHtcclxuICAgICAgICAgICAgZWxlbS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLmNsaWNrTmV3Qm94VGV4dCwgZmFsc2UpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8g5paw6KaP5L2c5oiQ77yI55S75YOP44Oc44OD44Kv44K577yJ44GuIG1vdXNlZG93blxyXG4gICAgICAgIGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY21fbmV3Ym94aW1hZ2UnKTtcclxuICAgICAgICBpZiAoZWxlbSkge1xyXG4gICAgICAgICAgICBlbGVtLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMuY2xpY2tOZXdCb3hJbWFnZSwgZmFsc2UpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8g44Oc44OD44Kv44K544KS6KSH6KO977yI44Kw44Or44O844OX5YyW44GZ44KL77yJ44GuIG1vdXNlZG93blxyXG4gICAgICAgIGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY21fY29weWJveG9uZ3JvdXAnKTtcclxuICAgICAgICBpZiAoZWxlbSkge1xyXG4gICAgICAgICAgICBlbGVtLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMuY2xpY2tDb3B5Qm94T25Hcm91cCwgZmFsc2UpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8g44Oc44OD44Kv44K544KS6KSH6KO9IOOBriBtb3VzZWRvd25cclxuICAgICAgICBlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NtX2NvcHlib3gnKTtcclxuICAgICAgICBpZiAoZWxlbSkge1xyXG4gICAgICAgICAgICBlbGVtLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMuY2xpY2tDb3B5Qm94LCBmYWxzZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDntKDmnZDjgpLjga/jgZrjgZlcclxuICAgICAgICBlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NtX3NvemFpdW5saW5rJyk7XHJcbiAgICAgICAgaWYgKGVsZW0pIHtcclxuICAgICAgICAgICAgZWxlbS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLmNsaWNrU296YWlVbmxpbmssIGZhbHNlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIOODnOODg+OCr+OCueOCkuWJiumZpFxyXG4gICAgICAgIGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY21fYm94cmVtb3ZlJyk7XHJcbiAgICAgICAgaWYgKGVsZW0pIHtcclxuICAgICAgICAgICAgZWxlbS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLmNsaWNrQm94UmVtb3ZlLCBmYWxzZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDmnIDliY3pnaLjgbgg44GuIG1vdXNlZG93blxyXG4gICAgICAgIGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY21fYm94dG9mcm9udCcpO1xyXG4gICAgICAgIGlmIChlbGVtKSB7XHJcbiAgICAgICAgICAgIGVsZW0uYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5jbGlja0JveFRvRnJvbnQsIGZhbHNlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIOacgOiDjOmdouOBuCDjga4gbW91c2Vkb3duXHJcbiAgICAgICAgZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjbV9ib3h0b2JhY2snKTtcclxuICAgICAgICBpZiAoZWxlbSkge1xyXG4gICAgICAgICAgICBlbGVtLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMuY2xpY2tCb3hUb0JhY2ssIGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHJlbW92ZUV2ZW50KCkge1xyXG4gICAgICAgIGxldCBlbGVtO1xyXG5cclxuICAgICAgICAvLyBkb2N1bWVudCDjga4gbW91c2Vkb3duIGFuZCBjbGlja1xyXG4gICAgICAgIGVsZW0gPSBkb2N1bWVudDtcclxuICAgICAgICBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgICAgIHRoaXMuY2xpY2tEb2N1bWVudCk7XHJcbiAgICAgICAgZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLmNsaWNrRG9jdW1lbnQpO1xyXG5cclxuICAgICAgICAvLyDjgrPjg7Pjg4bjgq3jgrnjg4jjg6Hjg4vjg6Xjg7zjga7jg5njg7zjgrnpg6jliIbjga4gbW91c2Vkb3duIGFuZCBjbGlja1xyXG4gICAgICAgIGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29udGV4dG1lbnUnKTtcclxuICAgICAgICBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgICAgIHRoaXMuY2xpY2tCYXNlKTtcclxuICAgICAgICBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMuY2xpY2tCYXNlKTtcclxuXHJcbiAgICAgICAgLy8g5paw6KaP5L2c5oiQ77yI44OG44Kt44K544OI44Oc44OD44Kv44K577yJ44GuIG1vdXNlZG93blxyXG4gICAgICAgIGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY21fbmV3Ym94dGV4dCcpO1xyXG4gICAgICAgIGlmIChlbGVtKSB7XHJcbiAgICAgICAgICAgIGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5jbGlja05ld0JveFRleHQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8g5paw6KaP5L2c5oiQ77yI55S75YOP44Oc44OD44Kv44K577yJ44GuIG1vdXNlZG93blxyXG4gICAgICAgIGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY21fbmV3Ym94aW1hZ2UnKTtcclxuICAgICAgICBpZiAoZWxlbSkge1xyXG4gICAgICAgICAgICBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMuY2xpY2tOZXdCb3hJbWFnZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDjg5zjg4Pjgq/jgrnjgpLopIfoo73vvIjjgrDjg6vjg7zjg5fljJbjgZnjgovvvInjga4gbW91c2Vkb3duXHJcbiAgICAgICAgZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjbV9jb3B5Ym94b25ncm91cCcpO1xyXG4gICAgICAgIGlmIChlbGVtKSB7XHJcbiAgICAgICAgICAgIGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5jbGlja0NvcHlCb3hPbkdyb3VwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIOODnOODg+OCr+OCueOCkuikh+ijvSDjga4gbW91c2Vkb3duXHJcbiAgICAgICAgZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjbV9jb3B5Ym94Jyk7XHJcbiAgICAgICAgaWYgKGVsZW0pIHtcclxuICAgICAgICAgICAgZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLmNsaWNrQ29weUJveCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDntKDmnZDjgpLjga/jgZrjgZlcclxuICAgICAgICBlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NtX3NvemFpdW5saW5rJyk7XHJcbiAgICAgICAgaWYgKGVsZW0pIHtcclxuICAgICAgICAgICAgZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLmNsaWNrU296YWlVbmxpbmspO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8g44Oc44OD44Kv44K544KS5YmK6ZmkXHJcbiAgICAgICAgZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjbV9ib3hyZW1vdmUnKTtcclxuICAgICAgICBpZiAoZWxlbSkge1xyXG4gICAgICAgICAgICBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMuY2xpY2tCb3hSZW1vdmUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8g5pyA5YmN6Z2i44G4IOOBriBtb3VzZWRvd25cclxuICAgICAgICBlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NtX2JveHRvZnJvbnQnKTtcclxuICAgICAgICBpZiAoZWxlbSkge1xyXG4gICAgICAgICAgICBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMuY2xpY2tCb3hUb0Zyb250KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIOacgOiDjOmdouOBuCDjga4gbW91c2Vkb3duXHJcbiAgICAgICAgZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjbV9ib3h0b2JhY2snKTtcclxuICAgICAgICBpZiAoZWxlbSkge1xyXG4gICAgICAgICAgICBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMuY2xpY2tCb3hUb0JhY2spO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBkb2N1bWVudCDjga7jgqTjg5njg7Pjg4jlh6bnkIZcclxuICAgIGNsaWNrRG9jdW1lbnQoZSkge1xyXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAvLyDjgrPjg7Pjg4bjgq3jgrnjg4jjg6Hjg4vjg6Xjg7zjgpLplonjgZjjgotcclxuICAgICAgICB0aGlzLnByb3BzLmNsb3NlQ29udGV4dE1lbnUoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOOCs+ODs+ODhuOCreOCueODiOODoeODi+ODpeODvOOBruODmeODvOOCuemDqOWIhuOBruOCpOODmeODs+ODiOWHpueQhlxyXG4gICAgY2xpY2tCYXNlKGUpIHtcclxuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g5paw6KaP5L2c5oiQ77yI44OG44Kt44K544OI44Oc44OD44Kv44K577yJ44Gu44Kk44OZ44Oz44OI5Yem55CGXHJcbiAgICBjbGlja05ld0JveFRleHQoZSkge1xyXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAvLyDjgrPjg7Pjg4bjgq3jgrnjg4jjg6Hjg4vjg6Xjg7zjga7lt6bkuIrluqfmqJnjgpLntJnpnaLluqfmqJnjgavlpInmj5vjgZnjgotcclxuICAgICAgICBjb25zdCBbY3VyX3gsIGN1cl95XSA9IHRoaXMuY2hhbmdlQ3Vyc29yVG9BcmVhKHRoaXMucHJvcHMueCwgdGhpcy5wcm9wcy55KTtcclxuXHJcbiAgICAgICAgLy8g5paw6KaP5L2c5oiQ77yI44OG44Kt44K544OI44Oc44OD44Kv44K577yJXHJcbiAgICAgICAgdGhpcy5wcm9wcy5uZXdCb3hUZXh0KHtcclxuICAgICAgICAgICAgY3VyX3g6IGN1cl94LFxyXG4gICAgICAgICAgICBjdXJfeTogY3VyX3ksXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIOOCs+ODs+ODhuOCreOCueODiOODoeODi+ODpeODvOOCkumWieOBmOOCi1xyXG4gICAgICAgIC8vIHRoaXMucHJvcHMuY2xvc2VDb250ZXh0TWVudSgpO1xyXG4gICAgICAgIEV2ZW50LnRyaWdnZXJFdmVudChkb2N1bWVudCwgJ2NsaWNrJyk7XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyDmlrDopo/kvZzmiJDvvIjnlLvlg4/jg5zjg4Pjgq/jgrnvvInjga7jgqTjg5njg7Pjg4jlh6bnkIZcclxuICAgIGNsaWNrTmV3Qm94SW1hZ2UoZSkge1xyXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAvLyDjgrPjg7Pjg4bjgq3jgrnjg4jjg6Hjg4vjg6Xjg7zjga7lt6bkuIrluqfmqJnjgpLntJnpnaLluqfmqJnjgavlpInmj5vjgZnjgotcclxuICAgICAgICBjb25zdCBbY3VyX3gsIGN1cl95XSA9IHRoaXMuY2hhbmdlQ3Vyc29yVG9BcmVhKHRoaXMucHJvcHMueCwgdGhpcy5wcm9wcy55KTtcclxuXHJcbiAgICAgICAgLy8g5paw6KaP5L2c5oiQ77yI55S75YOP44Oc44OD44Kv44K577yJXHJcbiAgICAgICAgdGhpcy5wcm9wcy5uZXdCb3hJbWFnZSh7XHJcbiAgICAgICAgICAgIGN1cl94OiBjdXJfeCxcclxuICAgICAgICAgICAgY3VyX3k6IGN1cl95LFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyDjgrPjg7Pjg4bjgq3jgrnjg4jjg6Hjg4vjg6Xjg7zjgpLplonjgZjjgotcclxuICAgICAgICAvLyB0aGlzLnByb3BzLmNsb3NlQ29udGV4dE1lbnUoKTtcclxuICAgICAgICBFdmVudC50cmlnZ2VyRXZlbnQoZG9jdW1lbnQsICdjbGljaycpO1xyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g44Oc44OD44Kv44K544Gu6KSH6KO977yI44Kw44Or44O844OX5YyW44GZ44KL77yJ44Gu44Kk44OZ44Oz44OI5Yem55CGXHJcbiAgICBjbGlja0NvcHlCb3hPbkdyb3VwKGUpIHtcclxuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgLy8g44Kz44Oz44OG44Kt44K544OI44Oh44OL44Ol44O844Gu5bem5LiK5bqn5qiZ44KS57SZ6Z2i5bqn5qiZ44Gr5aSJ5o+b44GZ44KLXHJcbiAgICAgICAgY29uc3QgW2N1cl94LCBjdXJfeV0gPSB0aGlzLmNoYW5nZUN1cnNvclRvQXJlYSh0aGlzLnByb3BzLngsIHRoaXMucHJvcHMueSk7XHJcblxyXG4gICAgICAgIC8vIOikh+ijveWFg+OBruODnOODg+OCr+OCueOBq+OCiOOCiuWHpueQhuOCkuWIhuOBkeOCi1xyXG4gICAgICAgIHN3aXRjaCAodGhpcy5wcm9wcy5mb2N1c2JveC50eXBlKSB7XHJcbiAgICAgICAgY2FzZSAndGV4dCc6ICAgIC8vIOODhuOCreOCueODiOODnOODg+OCr+OCuVxyXG4gICAgICAgICAgICB0aGlzLnByb3BzLmNvcHlCb3hUZXh0T25Hcm91cCh7XHJcbiAgICAgICAgICAgICAgICBjdXJfeDogY3VyX3gsXHJcbiAgICAgICAgICAgICAgICBjdXJfeTogY3VyX3ksXHJcbiAgICAgICAgICAgICAgICBib3hfaWQ6ICAgdGhpcy5wcm9wcy5mb2N1c2JveC5ib3hfaWQsXHJcbiAgICAgICAgICAgICAgICBncm91cF9pZDogdGhpcy5wcm9wcy5mb2N1c2JveC5ncm91cF9pZCxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ3RpdGxlJzogICAvLyDopovlh7rjgZfjg5zjg4Pjgq/jgrlcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDjgrPjg7Pjg4bjgq3jgrnjg4jjg6Hjg4vjg6Xjg7zjgpLplonjgZjjgotcclxuICAgICAgICAvLyB0aGlzLnByb3BzLmNsb3NlQ29udGV4dE1lbnUoKTtcclxuICAgICAgICBFdmVudC50cmlnZ2VyRXZlbnQoZG9jdW1lbnQsICdjbGljaycpO1xyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g44Oc44OD44Kv44K544Gu6KSH6KO9IOOBruOCpOODmeODs+ODiOWHpueQhlxyXG4gICAgY2xpY2tDb3B5Qm94KGUpIHtcclxuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgLy8g44Kz44Oz44OG44Kt44K544OI44Oh44OL44Ol44O844Gu5bem5LiK5bqn5qiZ44KS57SZ6Z2i5bqn5qiZ44Gr5aSJ5o+b44GZ44KLXHJcbiAgICAgICAgY29uc3QgW2N1cl94LCBjdXJfeV0gPSB0aGlzLmNoYW5nZUN1cnNvclRvQXJlYSh0aGlzLnByb3BzLngsIHRoaXMucHJvcHMueSk7XHJcblxyXG4gICAgICAgIC8vIOikh+ijveWFg+OBruODnOODg+OCr+OCueOBq+OCiOOCiuWHpueQhuOCkuWIhuOBkeOCi1xyXG4gICAgICAgIHN3aXRjaCAodGhpcy5wcm9wcy5mb2N1c2JveC50eXBlKSB7XHJcbiAgICAgICAgY2FzZSAndGV4dCc6ICAgIC8vIOODhuOCreOCueODiOODnOODg+OCr+OCuVxyXG4gICAgICAgICAgICB0aGlzLnByb3BzLmNvcHlCb3hUZXh0KHtcclxuICAgICAgICAgICAgICAgIGN1cl94OiBjdXJfeCxcclxuICAgICAgICAgICAgICAgIGN1cl95OiBjdXJfeSxcclxuICAgICAgICAgICAgICAgIGJveF9pZDogdGhpcy5wcm9wcy5mb2N1c2JveC5ib3hfaWQsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdpbWFnZSc6ICAgLy8g55S75YOP44Oc44OD44Kv44K5XHJcbiAgICAgICAgICAgIHRoaXMucHJvcHMuY29weUJveEltYWdlKHtcclxuICAgICAgICAgICAgICAgIGN1cl94OiBjdXJfeCxcclxuICAgICAgICAgICAgICAgIGN1cl95OiBjdXJfeSxcclxuICAgICAgICAgICAgICAgIGJveF9pZDogdGhpcy5wcm9wcy5mb2N1c2JveC5ib3hfaWQsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIGNhc2UgJ3RpdGxlJzogICAvLyDopovlh7rjgZfjg5zjg4Pjgq/jgrlcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDjgrPjg7Pjg4bjgq3jgrnjg4jjg6Hjg4vjg6Xjg7zjgpLplonjgZjjgotcclxuICAgICAgICAvLyB0aGlzLnByb3BzLmNsb3NlQ29udGV4dE1lbnUoKTtcclxuICAgICAgICBFdmVudC50cmlnZ2VyRXZlbnQoZG9jdW1lbnQsICdjbGljaycpO1xyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g44Km44Kj44Oz44OJ44Km5bqn5qiZ77yI44Kr44O844K944Or5bqn5qiZ77yJ44KS57SZ6Z2i44Ko44Oq44Ki77yIU1ZH44Kk44Oh44O844K477yJ5Y+z5LiK5Z+654K55bqn5qiZ44Gr5aSJ5o+b44GZ44KLXHJcbiAgICBjaGFuZ2VDdXJzb3JUb0FyZWEoY3gsIGN5KSB7XHJcbiAgICAgICAgY29uc3QgW3gsIHldID0gQ3Vyc29yLmN1ckVsZW1TY2FsZVNjcm9sbEtpdGVuKFxyXG4gICAgICAgICAgICBjeCwgY3ksXHJcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd2aWV3Ym94JyksXHJcbiAgICAgICAgICAgIHRoaXMucHJvcHMuc2NhbGUgLyAxMDBcclxuICAgICAgICApO1xyXG4gICAgICAgIGNvbnN0IGN1cl94ID0gWmFoeW8ubHVUb3J1WCh4LCBEZWZpbmUuc3ZnaW1hZ2VzaXplLndpZHRoKTtcclxuICAgICAgICBjb25zdCBjdXJfeSA9IFphaHlvLmx1VG9ydVkoeSwgRGVmaW5lLnN2Z2ltYWdlc2l6ZS5oZWlnaHQpO1xyXG5cclxuICAgICAgICByZXR1cm4gW2N1cl94LCBjdXJfeV07XHJcbiAgICB9XHJcblxyXG4gICAgLy8g57Sg5p2Q44KS44Gv44Ga44GZXHJcbiAgICBjbGlja1NvemFpVW5saW5rKGUpIHtcclxuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgLy8g57Sg5p2Q44KS44Gv44Ga44GZXHJcbiAgICAgICAgdGhpcy5wcm9wcy5zb3phaVVubGluayh7XHJcbiAgICAgICAgICAgIGdyb3VwX2lkOiB0aGlzLnByb3BzLmZvY3VzYm94Lmdyb3VwX2lkLFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyDjgrPjg7Pjg4bjgq3jgrnjg4jjg6Hjg4vjg6Xjg7zjgpLplonjgZjjgotcclxuICAgICAgICAvLyB0aGlzLnByb3BzLmNsb3NlQ29udGV4dE1lbnUoKTtcclxuICAgICAgICBFdmVudC50cmlnZ2VyRXZlbnQoZG9jdW1lbnQsICdjbGljaycpO1xyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g44Oc44OD44Kv44K544KS5YmK6ZmkXHJcbiAgICBjbGlja0JveFJlbW92ZShlKSB7XHJcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgIC8vIOOCs+ODs+ODhuOCreOCueODiOODoeODi+ODpeODvOOCkumWieOBmOOCi1xyXG4gICAgICAgIC8vIHRoaXMucHJvcHMuY2xvc2VDb250ZXh0TWVudSgpO1xyXG4gICAgICAgIEV2ZW50LnRyaWdnZXJFdmVudChkb2N1bWVudCwgJ2NsaWNrJyk7XHJcblxyXG4gICAgICAgIC8vIOWJiumZpOOBl+OBpuOCiOOBhOOBi+OCkueiuuiqjVxyXG4gICAgICAgIGlmIChjb25maXJtKCfjg5zjg4Pjgq/jgrnjgpLliYrpmaTjgZfjgb7jgZnjgILjgojjgo3jgZfjgYTjgafjgZnjgYvvvJ8nKSA9PSBmYWxzZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDjg5zjg4Pjgq/jgrnjgpLliYrpmaRcclxuICAgICAgICB0aGlzLnByb3BzLmJveFJlbW92ZSh7XHJcbiAgICAgICAgICAgIGJveF9pZDogdGhpcy5wcm9wcy5mb2N1c2JveC5ib3hfaWQsXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyDmnIDliY3pnaLjgbhcclxuICAgIGNsaWNrQm94VG9Gcm9udChlKSB7XHJcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgIC8vIOODnOODg+OCr+OCueOCkuacgOWJjemdouOBq+enu+WLleOBmeOCi1xyXG4gICAgICAgIHRoaXMucHJvcHMuYm94VG9Gcm9udCh7XHJcbiAgICAgICAgICAgIGJveF9pZDogdGhpcy5wcm9wcy5mb2N1c2JveC5ib3hfaWQsXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIOOCs+ODs+ODhuOCreOCueODiOODoeODi+ODpeODvOOCkumWieOBmOOCi1xyXG4gICAgICAgIC8vIHRoaXMucHJvcHMuY2xvc2VDb250ZXh0TWVudSgpO1xyXG4gICAgICAgIEV2ZW50LnRyaWdnZXJFdmVudChkb2N1bWVudCwgJ2NsaWNrJyk7XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyDlho3og4zpnaLjgbhcclxuICAgIGNsaWNrQm94VG9CYWNrKGUpIHtcclxuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgLy8g44Oc44OD44Kv44K544KS5pyA5YmN6Z2i44Gr56e75YuV44GZ44KLXHJcbiAgICAgICAgdGhpcy5wcm9wcy5ib3hUb0JhY2soe1xyXG4gICAgICAgICAgICBib3hfaWQ6IHRoaXMucHJvcHMuZm9jdXNib3guYm94X2lkLFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyDjgrPjg7Pjg4bjgq3jgrnjg4jjg6Hjg4vjg6Xjg7zjgpLplonjgZjjgotcclxuICAgICAgICAvLyB0aGlzLnByb3BzLmNsb3NlQ29udGV4dE1lbnUoKTtcclxuICAgICAgICBFdmVudC50cmlnZ2VyRXZlbnQoZG9jdW1lbnQsICdjbGljaycpO1xyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGl0ZW1zKCkge1xyXG4gICAgICAgIGxldCBpdGVtID0gW107XHJcblxyXG4gICAgICAgIC8vIOaWsOimj+ODnOODg+OCr+OCuVxyXG4gICAgICAgIGlmICh0aGlzLnByb3BzLmZvY3VzYm94LmJveF9pZCA9PSAnJykgeyAgICAgLy8g44Oc44OD44Kv44K544GM6YG45oqe44GV44KM44Gm44GE44Gq44GE5aC05ZCIXHJcbiAgICAgICAgICAgIC8vIOaWsOimj+ODnOODg+OCr+OCue+8iOODhuOCreOCueODiO+8iVxyXG4gICAgICAgICAgICBpdGVtLnB1c2goXHJcbiAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgaWQ9XCJjbV9uZXdib3h0ZXh0XCJcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NzcyhzdHlsZXMuaXRlbSl9XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAg5paw6KaP5L2c5oiQ77yI44OG44Kt44K544OI44Oc44OD44Kv44K577yJXHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgLy8g5paw6KaP44Oc44OD44Kv44K577yI55S75YOP77yJXHJcbiAgICAgICAgICAgIGl0ZW0ucHVzaChcclxuICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICBpZD1cImNtX25ld2JveGltYWdlXCJcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NzcyhzdHlsZXMuaXRlbSl9XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAg5paw6KaP5L2c5oiQ77yI55S75YOP44Oc44OD44Kv44K577yJXHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9IGVsc2UgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIOODnOODg+OCr+OCueOBjOmBuOaKnuOBleOCjOOBpuOBhOOBquOBhOWgtOWQiFxyXG4gICAgICAgICAgICAvLyDjg5zjg4Pjgq/jgrnjgpLopIfoo73vvIjjgrDjg6vjg7zjg5fljJbjgZnjgovvvIlcclxuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMuZm9jdXNib3gudHlwZSA9PSAndGV4dCdcclxuICAgICAgICAgICAgIHx8IHRoaXMucHJvcHMuZm9jdXNib3gudHlwZSA9PSAndGl0bGUnKSB7XHJcbiAgICAgICAgICAgICAgICBpdGVtLnB1c2goXHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZD1cImNtX2NvcHlib3hvbmdyb3VwXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjc3Moc3R5bGVzLml0ZW0pfVxyXG4gICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAg44Oc44OD44Kv44K544KS6KSH6KO977yI44Kw44Or44O844OX5YyW44GZ44KL77yJXHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIOODnOODg+OCr+OCueOCkuikh+ijvVxyXG4gICAgICAgICAgICBpdGVtLnB1c2goXHJcbiAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgaWQ9XCJjbV9jb3B5Ym94XCJcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NzcyhzdHlsZXMuaXRlbSl9XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAg44Oc44OD44Kv44K544KS6KSH6KO9XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIOe0oOadkOOCkuWkluOBmeOAgeODnOODg+OCr+OCueOCkuWJiumZpFxyXG4gICAgICAgIGlmICh0aGlzLnByb3BzLmZvY3VzYm94LmJveF9pZCA9PSAnJykgeyAgICAgLy8g44Oc44OD44Kv44K544GM6YG45oqe44GV44KM44Gm44GE44Gq44GE5aC05ZCIXHJcbiAgICAgICAgfSBlbHNlIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDjg5zjg4Pjgq/jgrnjgYzpgbjmip7jgZXjgozjgabjgYTjgovloLTlkIhcclxuICAgICAgICAgICAgLy8gPGhyPlxyXG4gICAgICAgICAgICBpdGVtLnB1c2goPGhyLz4pO1xyXG5cclxuICAgICAgICAgICAgLy8g57Sg5p2Q44KS44Gv44Ga44GZXHJcbiAgICAgICAgICAgIGl0ZW0ucHVzaChcclxuICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICBpZD1cImNtX3NvemFpdW5saW5rXCJcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NzcyhzdHlsZXMuaXRlbSl9XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAg57Sg5p2Q44KS44Gv44Ga44GZXHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgLy8g44Oc44OD44Kv44K544KS5YmK6ZmkXHJcbiAgICAgICAgICAgIGl0ZW0ucHVzaChcclxuICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICBpZD1cImNtX2JveHJlbW92ZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjc3Moc3R5bGVzLml0ZW0pfVxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIOODnOODg+OCr+OCueOCkuWJiumZpFxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIOacgOWJjemdouOBuCDmnIDog4zpnaLjgbhcclxuICAgICAgICBpZiAodGhpcy5wcm9wcy5mb2N1c2JveC5ib3hfaWQgPT0gJycpIHsgICAgIC8vIOODnOODg+OCr+OCueOBjOmBuOaKnuOBleOCjOOBpuOBhOOBquOBhOWgtOWQiFxyXG4gICAgICAgIH0gZWxzZSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g44Oc44OD44Kv44K544GM6YG45oqe44GV44KM44Gm44GE44KL5aC05ZCIXHJcbiAgICAgICAgICAgIC8vIDxocj5cclxuICAgICAgICAgICAgaXRlbS5wdXNoKDxoci8+KTtcclxuXHJcbiAgICAgICAgICAgIC8vIOacgOWJjemdouOBuFxyXG4gICAgICAgICAgICBpdGVtLnB1c2goXHJcbiAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgaWQ9XCJjbV9ib3h0b2Zyb250XCJcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NzcyhzdHlsZXMuaXRlbSl9XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAg5pyA5YmN6Z2i44G4XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgLy8g5YaN6IOM6Z2i44G4XHJcbiAgICAgICAgICAgIGl0ZW0ucHVzaChcclxuICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICBpZD1cImNtX2JveHRvYmFja1wiXHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjc3Moc3R5bGVzLml0ZW0pfVxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIOacgOiDjOmdouOBuFxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gaXRlbTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgIGlkPVwiY29udGV4dG1lbnVcIlxyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjc3Moc3R5bGVzLmNvbnRhaW5lcil9XHJcbiAgICAgICAgICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IHRoaXMucHJvcHMueCxcclxuICAgICAgICAgICAgICAgICAgICB0b3A6ICB0aGlzLnByb3BzLnksXHJcbiAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICB7dGhpcy5pdGVtcygpfVxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XHJcblxyXG5pbXBvcnQgQ29udGV4dE1lbnUgZnJvbSAnLi9Db250ZXh0TWVudS5qcyc7XHJcblxyXG5pbXBvcnQge1xyXG4gICAgU1VfQ29udGV4dE1lbnVfQ2xvc2UsXHJcbiAgICBTVV9Db250ZXh0TWVudV9OZXdCb3hUZXh0LFxyXG4gICAgU1VfQ29udGV4dE1lbnVfTmV3Qm94SW1hZ2UsXHJcbiAgICBTVV9Db250ZXh0TWVudV9Db3B5Qm94VGV4dE9uR3JvdXAsXHJcbiAgICBTVV9Db250ZXh0TWVudV9Db3B5Qm94VGV4dCxcclxuICAgIFNVX0NvbnRleHRNZW51X0NvcHlCb3hJbWFnZSxcclxuICAgIFNVX0NvbnRleHRNZW51X1NvemFpVW5saW5rLFxyXG4gICAgU1VfQ29udGV4dE1lbnVfQm94UmVtb3ZlLFxyXG4gICAgU1VfQ29udGV4dE1lbnVfQm94VG9Gcm9udCxcclxuICAgIFNVX0NvbnRleHRNZW51X0JveFRvQmFjayxcclxufSBmcm9tICcuLi9hY3Rpb25zX3N1L2NvbnRleHRtZW51LmpzJztcclxuXHJcblxyXG4vLyBtYXBTdGF0ZVRvUHJvcHNcclxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gKHN0YXRlLCBwcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAuLi5zdGF0ZSxcclxuICAgIH07XHJcbn1cclxuXHJcbi8vIG1hcERpc3BhdGNoVG9Qcm9wc1xyXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHMgPSAoZGlzcGF0Y2gsIHByb3BzKSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGRpc3BhdGNoLFxyXG4gICAgfTtcclxufVxyXG5cclxuLy8gbWVyZ2VQcm9wcyBcclxuY29uc3QgbWVyZ2VQcm9wcyA9IChzdGF0ZSwgZGlzcGF0Y2gsIHByb3BzKSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIC8vIHh4eDogeXl5LFxyXG4gICAgICAgIC8vIG9uQ29udGV4dE1lbnU6ICh4eHgpID0+IHtcclxuICAgICAgICAvLyAgICAgLi4uLi5cclxuICAgICAgICAvLyAgICAgZGlzcGF0Y2guZGlzcGF0Y2goU1VfQ29udGV4dE1lbnV4eF9Db250ZXh0TWVudXhfQ29udGV4dE1lbnUoKSk7XHJcbiAgICAgICAgLy8gfSxcclxuICAgICAgICAuLi5wcm9wcyxcclxuICAgICAgICBmb2N1c2JveDogc3RhdGUuZm9jdXNib3gsXHJcbiAgICAgICAgc2NhbGU6IHN0YXRlLnNjYWxlLFxyXG5cclxuICAgICAgICBjbG9zZUNvbnRleHRNZW51OiAoKSA9PiB7XHJcbiAgICAgICAgICAgIGRpc3BhdGNoLmRpc3BhdGNoKFNVX0NvbnRleHRNZW51X0Nsb3NlKCkpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIG5ld0JveFRleHQ6IChwYXlsb2FkKSA9PiB7XHJcbiAgICAgICAgICAgIGRpc3BhdGNoLmRpc3BhdGNoKFNVX0NvbnRleHRNZW51X05ld0JveFRleHQocGF5bG9hZCkpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbmV3Qm94SW1hZ2U6IChwYXlsb2FkKSA9PiB7XHJcbiAgICAgICAgICAgIGRpc3BhdGNoLmRpc3BhdGNoKFNVX0NvbnRleHRNZW51X05ld0JveEltYWdlKHBheWxvYWQpKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNvcHlCb3hUZXh0T25Hcm91cDogKHBheWxvYWQpID0+IHtcclxuICAgICAgICAgICAgZGlzcGF0Y2guZGlzcGF0Y2goU1VfQ29udGV4dE1lbnVfQ29weUJveFRleHRPbkdyb3VwKHBheWxvYWQpKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNvcHlCb3hUZXh0OiAocGF5bG9hZCkgPT4ge1xyXG4gICAgICAgICAgICBkaXNwYXRjaC5kaXNwYXRjaChTVV9Db250ZXh0TWVudV9Db3B5Qm94VGV4dChwYXlsb2FkKSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBjb3B5Qm94SW1hZ2U6IChwYXlsb2FkKSA9PiB7XHJcbiAgICAgICAgICAgIGRpc3BhdGNoLmRpc3BhdGNoKFNVX0NvbnRleHRNZW51X0NvcHlCb3hJbWFnZShwYXlsb2FkKSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzb3phaVVubGluazogKHBheWxvYWQpID0+IHtcclxuICAgICAgICAgICAgZGlzcGF0Y2guZGlzcGF0Y2goU1VfQ29udGV4dE1lbnVfU296YWlVbmxpbmsocGF5bG9hZCkpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYm94UmVtb3ZlOiAocGF5bG9hZCkgPT4ge1xyXG4gICAgICAgICAgICBkaXNwYXRjaC5kaXNwYXRjaChTVV9Db250ZXh0TWVudV9Cb3hSZW1vdmUocGF5bG9hZCkpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYm94VG9Gcm9udDogKHBheWxvYWQpID0+IHtcclxuICAgICAgICAgICAgZGlzcGF0Y2guZGlzcGF0Y2goU1VfQ29udGV4dE1lbnVfQm94VG9Gcm9udChwYXlsb2FkKSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBib3hUb0JhY2s6IChwYXlsb2FkKSA9PiB7XHJcbiAgICAgICAgICAgIGRpc3BhdGNoLmRpc3BhdGNoKFNVX0NvbnRleHRNZW51X0JveFRvQmFjayhwYXlsb2FkKSk7XHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuXHJcbi8vIGNvbm5lY3RcclxuY29uc3QgQ29udGV4dE1lbnVNYXAgPSBjb25uZWN0KFxyXG4gICAgbWFwU3RhdGVUb1Byb3BzLFxyXG4gICAgbWFwRGlzcGF0Y2hUb1Byb3BzLFxyXG4gICAgbWVyZ2VQcm9wc1xyXG4pKENvbnRleHRNZW51KTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IENvbnRleHRNZW51TWFwO1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5cclxuaW1wb3J0IHsgWmFoeW8gfSBmcm9tICcuLi9saWJzL3phaHlvLmpzJztcclxuaW1wb3J0IHsgRGVmaW5lIH0gZnJvbSAnLi4vZGVmaW5lLmpzJztcclxuXHJcbmNvbnN0IHN0eWxlcyA9IHtcclxuXHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZWxlY3RTb25vdGFCb3ggZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcblxyXG4gICAgICAgIHRoaXMuYm94Q2xpY2sgPSB0aGlzLmJveENsaWNrLmJpbmQodGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7XHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYHNlbGVjdGJveF8ke3RoaXMucHJvcHMuYm94X2lkfWApLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5ib3hDbGljaywgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGJveENsaWNrKGUpIHtcclxuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpOyAgICAvLyDjgZPjga7jgqTjg5njg7Pjg4jjgpLjgZPjga7jg6zjgqTjg6Tjg7zjgafmraLjgoHjgovjgILkuIvjg6zjgqTjg6Tjg7zjgavjgYLjgovopoHntKDjgavjgqTjg5njg7Pjg4jjgpLotbfjgZPjgZXjgarjgYRcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7ICAgICAvLyDjg5bjg6njgqbjgrbmqJnmupbmqZ/og73jga7jgqTjg5njg7Pjg4jjgpLmipHmraLjgZnjgotcclxuXHJcbiAgICAgICAgdGhpcy5wcm9wcy5vbkNsaWNrQm94KHtcclxuICAgICAgICAgICAgYm94X2lkOiAgIHRoaXMucHJvcHMuYm94X2lkLFxyXG4gICAgICAgICAgICBncm91cF9pZDogdGhpcy5wcm9wcy5ncm91cF9pZCxcclxuICAgICAgICAgICAgZ3JvdXBfbm86IHRoaXMucHJvcHMuZ3JvdXBfbm8sXHJcbiAgICAgICAgICAgIHR5cGU6ICAgICB0aGlzLnByb3BzLnR5cGUsXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGNvbnN0IHogPSBaYWh5by5ydVRvbHVSZWN0VG9BcmVhKHRoaXMucHJvcHMueDEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy55MSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLngyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMueTIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVmaW5lLnN2Z2ltYWdlc2l6ZS53aWR0aCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWZpbmUuc3ZnaW1hZ2VzaXplLmhlaWdodCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGc+XHJcbiAgICAgICAgICAgICAgICA8cmVjdFxyXG4gICAgICAgICAgICAgICAgICAgIGlkPXtgc2VsZWN0Ym94XyR7dGhpcy5wcm9wcy5ib3hfaWR9YH1cclxuICAgICAgICAgICAgICAgICAgICB4PXt6Lnh9XHJcbiAgICAgICAgICAgICAgICAgICAgeT17ei55fVxyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoPXt6Lnd9XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PXt6Lmh9XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsbDogJ2JsYWNrJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6ICcwLjAnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2ZpbGw6ICdub25lJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9zdHJva2U6ICdibHVlJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9zdHJva2VXaWR0aDogMixcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiAnbm9uZScsXHJcbiAgICAgICAgICAgICAgICAgICAgfX1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gb25Nb3VzZVVwPXsoZSkgPT4gdGhpcy5ib3hDbGljayhlKX1cclxuICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgIDwvZz4gXHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XHJcblxyXG5pbXBvcnQgU2VsZWN0U29ub3RhQm94IGZyb20gJy4vU2VsZWN0U29ub3RhQm94LmpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBTVV9TZWxlY3RCb3hfQm94X1NlbGVjdCxcclxufSBmcm9tICcuLi9hY3Rpb25zX3N1L3NlbGVjdGJveC5qcyc7XHJcblxyXG5pbXBvcnQge1xyXG4gICAgU1VfQ29udGV4dE1lbnVfQ2xvc2UsXHJcbn0gZnJvbSAnLi4vYWN0aW9uc19zdS9jb250ZXh0bWVudS5qcyc7XHJcblxyXG4vLyBtYXBTdGF0ZVRvUHJvcHNcclxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gKHN0YXRlLCBwcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAuLi5zdGF0ZSxcclxuICAgIH07XHJcbn1cclxuXHJcbi8vIG1hcERpc3BhdGNoVG9Qcm9wc1xyXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHMgPSAoZGlzcGF0Y2gsIHByb3BzKSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGRpc3BhdGNoLFxyXG4gICAgfTtcclxufVxyXG5cclxuLy8gbWVyZ2VQcm9wcyBcclxuY29uc3QgbWVyZ2VQcm9wcyA9IChzdGF0ZSwgZGlzcGF0Y2gsIHByb3BzKSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIC8vIHh4eDogeXl5LFxyXG4gICAgICAgIC8vIG9uWHh4eDogKHh4eCkgPT4ge1xyXG4gICAgICAgIC8vICAgICAuLi4uLlxyXG4gICAgICAgIC8vICAgICBkaXNwYXRjaC5kaXNwYXRjaChTVV9YeHh4eHhfWHh4eHhfWHh4eCgpKTtcclxuICAgICAgICAvLyB9LFxyXG4gICAgICAgIC4uLnByb3BzLFxyXG4gICAgICAgIG9uQ2xpY2tCb3g6IChwYXlsb2FkKSA9PiB7XHJcbiAgICAgICAgICAgIGRpc3BhdGNoLmRpc3BhdGNoKFNVX1NlbGVjdEJveF9Cb3hfU2VsZWN0KHBheWxvYWQpKTtcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxyXG5cclxuLy8gY29ubmVjdFxyXG5jb25zdCBTZWxlY3RTb25vdGFCb3hNYXAgPSBjb25uZWN0KFxyXG4gICAgbWFwU3RhdGVUb1Byb3BzLFxyXG4gICAgbWFwRGlzcGF0Y2hUb1Byb3BzLFxyXG4gICAgbWVyZ2VQcm9wc1xyXG4pKFNlbGVjdFNvbm90YUJveCk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBTZWxlY3RTb25vdGFCb3hNYXA7XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcblxyXG5pbXBvcnQgeyBaYWh5byB9IGZyb20gJy4uL2xpYnMvemFoeW8uanMnO1xyXG5pbXBvcnQgeyBEZWZpbmUgfSBmcm9tICcuLi9kZWZpbmUuanMnO1xyXG5cclxuY29uc3Qgc3R5bGVzID0ge1xyXG5cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlbGVjdEdyb3VwQm94IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG5cclxuICAgICAgICB0aGlzLmJveENsaWNrID0gdGhpcy5ib3hDbGljay5iaW5kKHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xyXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBzZWxlY3Rib3hfJHt0aGlzLnByb3BzLmJveF9pZH1gKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuYm94Q2xpY2ssIGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICBib3hDbGljayhlKSB7XHJcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTsgICAgLy8g44GT44Gu44Kk44OZ44Oz44OI44KS44GT44Gu44Os44Kk44Ok44O844Gn5q2i44KB44KL44CC5LiL44Os44Kk44Ok44O844Gr44GC44KL6KaB57Sg44Gr44Kk44OZ44Oz44OI44KS6LW344GT44GV44Gq44GEXHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOyAgICAgLy8g44OW44Op44Km44K25qiZ5rqW5qmf6IO944Gu44Kk44OZ44Oz44OI44KS5oqR5q2i44GZ44KLXHJcblxyXG4gICAgICAgIHRoaXMucHJvcHMub25DbGlja0JveCh7XHJcbiAgICAgICAgICAgIGJveF9pZDogICB0aGlzLnByb3BzLmJveF9pZCxcclxuICAgICAgICAgICAgZ3JvdXBfaWQ6IHRoaXMucHJvcHMuZ3JvdXBfaWQsXHJcbiAgICAgICAgICAgIGdyb3VwX25vOiB0aGlzLnByb3BzLmdyb3VwX25vLFxyXG4gICAgICAgICAgICB0eXBlOiAgICAgdGhpcy5wcm9wcy50eXBlLFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgY29uc3QgeiA9IFphaHlvLnJ1VG9sdVJlY3RUb0FyZWEodGhpcy5wcm9wcy54MSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLnkxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMueDIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy55MixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWZpbmUuc3ZnaW1hZ2VzaXplLndpZHRoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlZmluZS5zdmdpbWFnZXNpemUuaGVpZ2h0KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGc+XHJcbiAgICAgICAgICAgICAgICA8cmVjdFxyXG4gICAgICAgICAgICAgICAgICAgIGlkPXtgc2VsZWN0Ym94XyR7dGhpcy5wcm9wcy5ib3hfaWR9YH1cclxuICAgICAgICAgICAgICAgICAgICB4PXt6Lnh9XHJcbiAgICAgICAgICAgICAgICAgICAgeT17ei55fVxyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoPXt6Lnd9XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PXt6Lmh9XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsbDogJ2JsdWUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogJzAuMycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vZmlsbDogJ25vbmUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3N0cm9rZTogJ2JsdWUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3N0cm9rZVdpZHRoOiAyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJva2U6ICdub25lJyxcclxuICAgICAgICAgICAgICAgICAgICB9fVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBvbk1vdXNlVXA9eyhlKSA9PiB0aGlzLmJveENsaWNrKGUpfVxyXG4gICAgICAgICAgICAgICAgLz5cclxuXHJcbiAgICAgICAgICAgICAgICB7Lyog44Kw44Or44O844OXTm8gKi99XHJcbiAgICAgICAgICAgICAgICA8dGV4dFxyXG4gICAgICAgICAgICAgICAgICAgIHg9e3oueCArIDV9XHJcbiAgICAgICAgICAgICAgICAgICAgeT17ei55ICsgMjB9XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6IDE1LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJva2U6ICdub25lJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsbDogJ3doaXRlJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6ICcwLjcnLFxyXG4gICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAge3RoaXMucHJvcHMuZ3JvdXBfbm99XHJcbiAgICAgICAgICAgICAgICA8L3RleHQ+XHJcbiAgICAgICAgICAgIDwvZz4gXHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XHJcblxyXG5pbXBvcnQgU2VsZWN0R3JvdXBCb3ggZnJvbSAnLi9TZWxlY3RHcm91cEJveC5qcyc7XHJcblxyXG5pbXBvcnQge1xyXG4gICAgU1VfU2VsZWN0Qm94X0JveF9TZWxlY3QsXHJcbn0gZnJvbSAnLi4vYWN0aW9uc19zdS9zZWxlY3Rib3guanMnO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIFNVX0NvbnRleHRNZW51X0Nsb3NlLFxyXG59IGZyb20gJy4uL2FjdGlvbnNfc3UvY29udGV4dG1lbnUuanMnO1xyXG5cclxuLy8gbWFwU3RhdGVUb1Byb3BzXHJcbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZSwgcHJvcHMpID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgLi4uc3RhdGUsXHJcbiAgICB9O1xyXG59XHJcblxyXG4vLyBtYXBEaXNwYXRjaFRvUHJvcHNcclxuY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0gKGRpc3BhdGNoLCBwcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBkaXNwYXRjaCxcclxuICAgIH07XHJcbn1cclxuXHJcbi8vIG1lcmdlUHJvcHMgXHJcbmNvbnN0IG1lcmdlUHJvcHMgPSAoc3RhdGUsIGRpc3BhdGNoLCBwcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAvLyB4eHg6IHl5eSxcclxuICAgICAgICAvLyBvblh4eHg6ICh4eHgpID0+IHtcclxuICAgICAgICAvLyAgICAgLi4uLi5cclxuICAgICAgICAvLyAgICAgZGlzcGF0Y2guZGlzcGF0Y2goU1VfWHh4eHh4X1h4eHh4X1h4eHgoKSk7XHJcbiAgICAgICAgLy8gfSxcclxuICAgICAgICAuLi5wcm9wcyxcclxuICAgICAgICBvbkNsaWNrQm94OiAocGF5bG9hZCkgPT4ge1xyXG4gICAgICAgICAgICBkaXNwYXRjaC5kaXNwYXRjaChTVV9TZWxlY3RCb3hfQm94X1NlbGVjdChwYXlsb2FkKSk7XHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuXHJcbi8vIGNvbm5lY3RcclxuY29uc3QgU2VsZWN0R3JvdXBCb3hNYXAgPSBjb25uZWN0KFxyXG4gICAgbWFwU3RhdGVUb1Byb3BzLFxyXG4gICAgbWFwRGlzcGF0Y2hUb1Byb3BzLFxyXG4gICAgbWVyZ2VQcm9wc1xyXG4pKFNlbGVjdEdyb3VwQm94KTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNlbGVjdEdyb3VwQm94TWFwO1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5cclxuaW1wb3J0IHsgRGVmaW5lIH0gZnJvbSAnLi4vZGVmaW5lLmpzJztcclxuXHJcbmNvbnN0IHN0eWxlcyA9IHtcclxuXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhhbmRsZUQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8g56e75YuV5YmN44Gu44Ko44OH44Kj44OD44OI44Oc44OD44Kv44K5YXJlYeaDheWgsVxyXG4gICAgICAgIHRoaXMuYm94b3JncG9zID0ge1xyXG4gICAgICAgICAgICB4OiBwcm9wcy54LFxyXG4gICAgICAgICAgICB5OiBwcm9wcy55LFxyXG4gICAgICAgICAgICB3OiBwcm9wcy53LFxyXG4gICAgICAgICAgICBoOiBwcm9wcy5oLFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIOODj+ODs+ODieODq+OBruWFg++8iOenu+WLleWJje+8ieOBruS4reW/g+W6p+aomVxyXG4gICAgICAgIHRoaXMuaGFuZGxlb3JncG9zID0ge1xyXG4gICAgICAgICAgICB4OiBwcm9wcy54ICsgKHByb3BzLncgLyAyKSxcclxuICAgICAgICAgICAgeTogcHJvcHMueSArIHByb3BzLmgsXHJcbiAgICAgICAgfTtcclxuXHJcblx0XHQvLyDjg57jgqbjgrnjg4Djgqbjg7PkvY3nva5cclxuXHRcdHRoaXMubW91c2Vwb3MgPSB7XHJcblx0XHRcdHg6IDAsXHJcblx0XHRcdHk6IDAsXHJcbiAgICAgICAgfTtcclxuICAgICAgICBcclxuICAgICAgICAvLyDjg4/jg7Pjg4njg6vjga7kuK3lv4PluqfmqJnjgpLjgrvjg4Pjg4hcclxuICAgICAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICAgICAgICB4OiB0aGlzLmhhbmRsZW9yZ3Bvcy54LFxyXG4gICAgICAgICAgICB5OiB0aGlzLmhhbmRsZW9yZ3Bvcy55LFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMubW91c2VNb3ZlID0gdGhpcy5tb3VzZU1vdmUuYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLm1vdXNlVXAgICA9IHRoaXMubW91c2VVcC5iaW5kKHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XHJcbiAgICAgICAgaWYgKG5leHRQcm9wcy5oYW5kbGVSZWZyZXNoID09IHRydWUpIHtcclxuICAgICAgICAgICAgdGhpcy5ib3hvcmdwb3MgPSB7XHJcbiAgICAgICAgICAgICAgICB4OiBuZXh0UHJvcHMueCxcclxuICAgICAgICAgICAgICAgIHk6IG5leHRQcm9wcy55LFxyXG4gICAgICAgICAgICAgICAgdzogbmV4dFByb3BzLncsXHJcbiAgICAgICAgICAgICAgICBoOiBuZXh0UHJvcHMuaCxcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlb3JncG9zID0ge1xyXG4gICAgICAgICAgICAgICAgeDogbmV4dFByb3BzLnggKyAobmV4dFByb3BzLncgLyAyKSxcclxuICAgICAgICAgICAgICAgIHk6IG5leHRQcm9wcy55ICsgbmV4dFByb3BzLmgsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICB4OiBuZXh0UHJvcHMueCArIChuZXh0UHJvcHMudyAvIDIpLFxyXG4gICAgICAgICAgICB5OiBuZXh0UHJvcHMueSArIG5leHRQcm9wcy5oLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIG1vdXNlRG93bihlKSB7XHJcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTsgICAgLy8g44GT44Gu44Kk44OZ44Oz44OI44KS44GT44Gu44Os44Kk44Ok44O844Gn5q2i44KB44KL44CC5LiL44Os44Kk44Ok44O844Gr44GC44KL6KaB57Sg44Gr44Kk44OZ44Oz44OI44KS6LW344GT44GV44Gq44GEXHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOyAgICAgLy8g44OW44Op44Km44K25qiZ5rqW5qmf6IO944Gu44Kk44OZ44Oz44OI44KS5oqR5q2i44GZ44KLXHJcblxyXG4gICAgICAgIC8vIOODnuOCpuOCueODoOODvOODluOBqOODnuOCpuOCueOCouODg+ODl+OBruOCpOODmeODs+ODiOOCkueZu+mMsuOBmeOCi1xyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMubW91c2VNb3ZlLCBmYWxzZSk7XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsICAgdGhpcy5tb3VzZVVwLCBmYWxzZSk7XHJcblxyXG4gICAgICAgIC8vIOOCr+ODquODg+OCr+OBruODnuOCpuOCueOCpOODmeODs+ODiFxyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5jbGljaywgZmFsc2UpO1xyXG5cclxuICAgICAgICAvLyDjg57jgqbjgrnjg4Djgqbjg7PjgZfjgZ/jgqvjg7zjgr3jg6vkvY3nva7jgpLjgrvjg4Pjg4jjgZnjgotcclxuXHRcdHRoaXMubW91c2Vwb3MueCA9IGUucGFnZVggKiAxMDAgLyB0aGlzLnByb3BzLnNjYWxlO1xyXG4gICAgICAgIHRoaXMubW91c2Vwb3MueSA9IGUucGFnZVkgKiAxMDAgLyB0aGlzLnByb3BzLnNjYWxlO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIOODj+ODs+ODieODq+ODnuOCpuOCueODgOOCpuODs+WHpueQhlxyXG4gICAgICAgIHRoaXMucHJvcHMuaGFuZGxlTW91c2VEb3duKCk7XHJcbiAgICB9XHJcblxyXG4gICAgbW91c2VNb3ZlKGUpIHtcclxuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpOyAgICAvLyDjgZPjga7jgqTjg5njg7Pjg4jjgpLjgZPjga7jg6zjgqTjg6Tjg7zjgafmraLjgoHjgovjgILkuIvjg6zjgqTjg6Tjg7zjgavjgYLjgovopoHntKDjgavjgqTjg5njg7Pjg4jjgpLotbfjgZPjgZXjgarjgYRcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7ICAgICAvLyDjg5bjg6njgqbjgrbmqJnmupbmqZ/og73jga7jgqTjg5njg7Pjg4jjgpLmipHmraLjgZnjgotcclxuICAgICAgICBcclxuICAgICAgICAvLyDjg57jgqbjgrnjg6Djg7zjg5blvozjga7jgqvjg7zjgr3jg6vkvY3nva7jgpLlvpfjgotcclxuXHRcdC8vIGNvbnN0IG1vdmVYID0gZS5wYWdlWCAqIDEwMCAvIHRoaXMucHJvcHMuc2NhbGU7XHJcblx0XHRjb25zdCBtb3ZlWSA9IGUucGFnZVkgKiAxMDAgLyB0aGlzLnByb3BzLnNjYWxlO1xyXG5cclxuXHRcdC8vIOW9k+ODj+ODs+ODieODq+OBruaWsOOBn+OBquW6p+aomeOCkuaxguOCgeOCi1xyXG4gICAgICAgIC8vIGxldCB4ID0gdGhpcy5oYW5kbGVvcmdwb3MueCArIChtb3ZlWCAtIHRoaXMubW91c2Vwb3MueCk7XHJcbiAgICAgICAgbGV0IHggPSB0aGlzLmhhbmRsZW9yZ3Bvcy54O1xyXG4gICAgICAgIGxldCB5ID0gdGhpcy5oYW5kbGVvcmdwb3MueSArIChtb3ZlWSAtIHRoaXMubW91c2Vwb3MueSk7XHJcbiAgICAgICAgLy8gbGV0IHkgPSB0aGlzLmhhbmRsZW9yZ3Bvcy55O1xyXG5cclxuICAgICAgICAvLyDjg5zjg4Pjgq/jgrnjgYwx44Kw44Oq44OD44OJ5YiG44KI44KK5bCP44GV44GP44Gq44KJ44Gq44GE44KI44GG44Gr44GZ44KLXHJcbiAgICAgICAgW3gsIHldID0gdGhpcy5jaGVja2dyaWQxYmxvY2soeCwgeSk7XHJcblxyXG4gICAgICAgIC8vIOOCsOODquODg+ODieOCueODiuODg+ODl+WHpueQhlxyXG4gICAgICAgIFt4LCB5XSA9IHRoaXMucHJvcHMuZ3JpZHNuYXAoeCwgeSk7XHJcbiAgICAgICAgXHJcblx0XHQvLyDjg5njg7zjgrlTVkfjgqTjg6Hjg7zjgrjjga7nq6/jgavjg4/jg7Pjg4njg6vjgYzooYzjgaPjgZ/loLTlkIjjga7luqfmqJnlpInmj5tcclxuXHRcdFt4LCB5XSA9IHRoaXMucHJvcHMuaGFuZGxlc3RvcCh4LCB5KTtcclxuXHJcbiAgICAgICAgLy8g44Ko44OH44Kj44OD44OI44Oc44OD44Kv44K55pu05paw5Yem55CGXHJcbiAgICAgICAgdGhpcy5wcm9wcy5oYW5kbGVNb3ZlKFxyXG4gICAgICAgICAgICB0aGlzLmJveG9yZ3Bvcy54LFxyXG4gICAgICAgICAgICB0aGlzLmJveG9yZ3Bvcy55LFxyXG4gICAgICAgICAgICB0aGlzLmJveG9yZ3Bvcy53LFxyXG4gICAgICAgICAgICB5IC0gdGhpcy5ib3hvcmdwb3MueSxcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIG1vdXNlVXAoZSkge1xyXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7ICAgIC8vIOOBk+OBruOCpOODmeODs+ODiOOCkuOBk+OBruODrOOCpOODpOODvOOBp+atouOCgeOCi+OAguS4i+ODrOOCpOODpOODvOOBq+OBguOCi+imgee0oOOBq+OCpOODmeODs+ODiOOCkui1t+OBk+OBleOBquOBhFxyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTsgICAgIC8vIOODluODqeOCpuOCtuaomea6luapn+iDveOBruOCpOODmeODs+ODiOOCkuaKkeatouOBmeOCi1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIOOCpOODmeODs+ODiOOCkuWJiumZpOOBmeOCi1xyXG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMubW91c2VNb3ZlKTtcclxuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgICB0aGlzLm1vdXNlVXApO1xyXG5cclxuICAgICAgICAvLyBkb2N1bWVudOOBuOOBrmNsaWNr44Kk44OZ44Oz44OI44KS44Kt44Oj44Oz44K744Or44GZ44KLXHJcbiAgICAgICAgdmFyIGNhcHR1cmVDbGljayA9IChlKSA9PiB7XHJcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgY2FwdHVyZUNsaWNrLCB0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjYXB0dXJlQ2xpY2ssIHRydWUpO1xyXG5cclxuICAgICAgICAvLyDjg4/jg7Pjg4njg6tNb3VzZVVw5Yem55CGXHJcbiAgICAgICAgdGhpcy5wcm9wcy5oYW5kbGVNb3VzZVVwKCk7XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBjaGVja2dyaWQxYmxvY2soeCwgeSkge1xyXG4gICAgICAgIGNvbnN0IHkyID0gdGhpcy5ib3hvcmdwb3MueTtcclxuXHJcbiAgICAgICAgaWYgKHkgPCB5MiArIERlZmluZS5ncmlkLmhlaWdodCkge1xyXG4gICAgICAgICAgICB5ID0geTIgKyBEZWZpbmUuZ3JpZC5oZWlnaHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gW3gsIHldO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICAvLyDjg4/jg7Pjg4njg6vjga7jgrXjgqTjgrrjgpLmsYLjgoHjgotcclxuICAgICAgICBjb25zdCBodyA9IERlZmluZS5oYW5kbGUud2lkdGggICogMTAwIC8gdGhpcy5wcm9wcy5zY2FsZTtcclxuICAgICAgICBjb25zdCBoaCA9IERlZmluZS5oYW5kbGUuaGVpZ2h0ICogMTAwIC8gdGhpcy5wcm9wcy5zY2FsZTtcclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPHJlY3RcclxuICAgICAgICAgICAgICAgIHg9e3RoaXMuc3RhdGUueCAtIChodyAvIDIpfVxyXG4gICAgICAgICAgICAgICAgeT17dGhpcy5zdGF0ZS55IC0gKGhoIC8gMil9XHJcbiAgICAgICAgICAgICAgICB3aWR0aD17aHd9XHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ9e2hofVxyXG4gICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICBmaWxsOiAnYmx1ZScsXHJcbiAgICAgICAgICAgICAgICAgICAgY3Vyc29yOiAnbnMtcmVzaXplJyxcclxuICAgICAgICAgICAgICAgIH19XHJcblxyXG4gICAgICAgICAgICAgICAgb25DbGljaz17KGUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpOyAgICAvLyDjgZPjga7jgqTjg5njg7Pjg4jjgpLjgZPjga7jg6zjgqTjg6Tjg7zjgafmraLjgoHjgovjgILkuIvjg6zjgqTjg6Tjg7zjgavjgYLjgovopoHntKDjgavjgqTjg5njg7Pjg4jjgpLotbfjgZPjgZXjgarjgYRcclxuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7ICAgICAvLyDjg5bjg6njgqbjgrbmqJnmupbmqZ/og73jga7jgqTjg5njg7Pjg4jjgpLmipHmraLjgZnjgotcclxuICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICBvbk1vdXNlRG93bj17KGUpID0+IHRoaXMubW91c2VEb3duKGUpfVxyXG4gICAgICAgICAgICAvPlxyXG4gICAgICAgIClcclxuICAgIH1cclxufSIsImltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XHJcblxyXG5pbXBvcnQgSGFuZGxlRCBmcm9tICcuL0hhbmRsZUQuanMnO1xyXG5cclxuLy8gbWFwU3RhdGVUb1Byb3BzXHJcbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZSwgcHJvcHMpID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgLi4uc3RhdGUsXHJcbiAgICB9O1xyXG59XHJcblxyXG4vLyBtYXBEaXNwYXRjaFRvUHJvcHNcclxuY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0gKGRpc3BhdGNoLCBwcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBkaXNwYXRjaCxcclxuICAgIH07XHJcbn1cclxuXHJcbi8vIG1lcmdlUHJvcHMgXHJcbmNvbnN0IG1lcmdlUHJvcHMgPSAoc3RhdGUsIGRpc3BhdGNoLCBwcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAvLyB4eHg6IHl5eSxcclxuICAgICAgICAvLyBvbkhhbmRsZUQ6ICh4eHgpID0+IHtcclxuICAgICAgICAvLyAgICAgLi4uLi5cclxuICAgICAgICAvLyAgICAgZGlzcGF0Y2guZGlzcGF0Y2goU1VfSGFuZGxlRHh4X0hhbmRsZUR4X0hhbmRsZUQoKSk7XHJcbiAgICAgICAgLy8gfSxcclxuICAgICAgICAuLi5wcm9wcyxcclxuICAgICAgICBzY2FsZTogc3RhdGUuc2NhbGUsXHJcbiAgICB9O1xyXG59XHJcblxyXG4vLyBjb25uZWN0XHJcbmNvbnN0IEhhbmRsZURNYXAgPSBjb25uZWN0KFxyXG4gICAgbWFwU3RhdGVUb1Byb3BzLFxyXG4gICAgbWFwRGlzcGF0Y2hUb1Byb3BzLFxyXG4gICAgbWVyZ2VQcm9wc1xyXG4pKEhhbmRsZUQpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgSGFuZGxlRE1hcDtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuXHJcbmltcG9ydCB7IERlZmluZSB9IGZyb20gJy4uL2RlZmluZS5qcyc7XHJcblxyXG5jb25zdCBzdHlsZXMgPSB7XHJcblxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBIYW5kbGVSIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG4gXHJcbiAgICAgICAgLy8g56e75YuV5YmN44Gu44Ko44OH44Kj44OD44OI44Oc44OD44Kv44K5YXJlYeaDheWgsVxyXG4gICAgICAgIHRoaXMuYm94b3JncG9zID0ge1xyXG4gICAgICAgICAgICB4OiBwcm9wcy54LFxyXG4gICAgICAgICAgICB5OiBwcm9wcy55LFxyXG4gICAgICAgICAgICB3OiBwcm9wcy53LFxyXG4gICAgICAgICAgICBoOiBwcm9wcy5oLFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIOODj+ODs+ODieODq+OBruWFg++8iOenu+WLleWJje+8ieOBruS4reW/g+W6p+aomVxyXG4gICAgICAgIHRoaXMuaGFuZGxlb3JncG9zID0ge1xyXG4gICAgICAgICAgICB4OiBwcm9wcy54ICsgcHJvcHMudyxcclxuICAgICAgICAgICAgeTogcHJvcHMueSArIChwcm9wcy5oIC8gMiksXHJcbiAgICAgICAgfTtcclxuXHJcblx0XHQvLyDjg57jgqbjgrnjg4Djgqbjg7PkvY3nva5cclxuXHRcdHRoaXMubW91c2Vwb3MgPSB7XHJcblx0XHRcdHg6IDAsXHJcblx0XHRcdHk6IDAsXHJcbiAgICAgICAgfTtcclxuICAgICAgICBcclxuICAgICAgICAvLyDjg4/jg7Pjg4njg6vjga7kuK3lv4PluqfmqJnjgpLjgrvjg4Pjg4hcclxuICAgICAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICAgICAgICB4OiB0aGlzLmhhbmRsZW9yZ3Bvcy54LFxyXG4gICAgICAgICAgICB5OiB0aGlzLmhhbmRsZW9yZ3Bvcy55LFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMubW91c2VNb3ZlID0gdGhpcy5tb3VzZU1vdmUuYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLm1vdXNlVXAgICA9IHRoaXMubW91c2VVcC5iaW5kKHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XHJcbiAgICAgICAgaWYgKG5leHRQcm9wcy5oYW5kbGVSZWZyZXNoID09IHRydWUpIHtcclxuICAgICAgICAgICAgdGhpcy5ib3hvcmdwb3MgPSB7XHJcbiAgICAgICAgICAgICAgICB4OiBuZXh0UHJvcHMueCxcclxuICAgICAgICAgICAgICAgIHk6IG5leHRQcm9wcy55LFxyXG4gICAgICAgICAgICAgICAgdzogbmV4dFByb3BzLncsXHJcbiAgICAgICAgICAgICAgICBoOiBuZXh0UHJvcHMuaCxcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlb3JncG9zID0ge1xyXG4gICAgICAgICAgICAgICAgeDogbmV4dFByb3BzLnggKyBuZXh0UHJvcHMudyxcclxuICAgICAgICAgICAgICAgIHk6IG5leHRQcm9wcy55ICsgKG5leHRQcm9wcy5oIC8gMiksXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICB4OiBuZXh0UHJvcHMueCArIG5leHRQcm9wcy53LFxyXG4gICAgICAgICAgICB5OiBuZXh0UHJvcHMueSArIChuZXh0UHJvcHMuaCAvIDIpLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIG1vdXNlRG93bihlKSB7XHJcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTsgICAgLy8g44GT44Gu44Kk44OZ44Oz44OI44KS44GT44Gu44Os44Kk44Ok44O844Gn5q2i44KB44KL44CC5LiL44Os44Kk44Ok44O844Gr44GC44KL6KaB57Sg44Gr44Kk44OZ44Oz44OI44KS6LW344GT44GV44Gq44GEXHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOyAgICAgLy8g44OW44Op44Km44K25qiZ5rqW5qmf6IO944Gu44Kk44OZ44Oz44OI44KS5oqR5q2i44GZ44KLXHJcblxyXG4gICAgICAgIC8vIOODnuOCpuOCueODoOODvOODluOBqOODnuOCpuOCueOCouODg+ODl+OBruOCpOODmeODs+ODiOOCkueZu+mMsuOBmeOCi1xyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMubW91c2VNb3ZlLCBmYWxzZSk7XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsICAgdGhpcy5tb3VzZVVwLCBmYWxzZSk7XHJcblxyXG4gICAgICAgIC8vIOOCr+ODquODg+OCr+OBruODnuOCpuOCueOCpOODmeODs+ODiFxyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5jbGljaywgZmFsc2UpO1xyXG5cclxuICAgICAgICAvLyDjg57jgqbjgrnjg4Djgqbjg7PjgZfjgZ/jgqvjg7zjgr3jg6vkvY3nva7jgpLjgrvjg4Pjg4jjgZnjgotcclxuXHRcdHRoaXMubW91c2Vwb3MueCA9IGUucGFnZVggKiAxMDAgLyB0aGlzLnByb3BzLnNjYWxlO1xyXG4gICAgICAgIHRoaXMubW91c2Vwb3MueSA9IGUucGFnZVkgKiAxMDAgLyB0aGlzLnByb3BzLnNjYWxlO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIOODj+ODs+ODieODq+ODnuOCpuOCueODgOOCpuODs+WHpueQhlxyXG4gICAgICAgIHRoaXMucHJvcHMuaGFuZGxlTW91c2VEb3duKCk7XHJcbiAgICB9XHJcblxyXG4gICAgbW91c2VNb3ZlKGUpIHtcclxuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpOyAgICAvLyDjgZPjga7jgqTjg5njg7Pjg4jjgpLjgZPjga7jg6zjgqTjg6Tjg7zjgafmraLjgoHjgovjgILkuIvjg6zjgqTjg6Tjg7zjgavjgYLjgovopoHntKDjgavjgqTjg5njg7Pjg4jjgpLotbfjgZPjgZXjgarjgYRcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7ICAgICAvLyDjg5bjg6njgqbjgrbmqJnmupbmqZ/og73jga7jgqTjg5njg7Pjg4jjgpLmipHmraLjgZnjgotcclxuICAgICAgICBcclxuICAgICAgICAvLyDjg57jgqbjgrnjg6Djg7zjg5blvozjga7jgqvjg7zjgr3jg6vkvY3nva7jgpLlvpfjgotcclxuXHRcdGNvbnN0IG1vdmVYID0gZS5wYWdlWCAqIDEwMCAvIHRoaXMucHJvcHMuc2NhbGU7XHJcblx0XHQvLyBjb25zdCBtb3ZlWSA9IGUucGFnZVkgKiAxMDAgLyB0aGlzLnByb3BzLnNjYWxlO1xyXG5cclxuXHRcdC8vIOW9k+ODj+ODs+ODieODq+OBruaWsOOBn+OBquW6p+aomeOCkuaxguOCgeOCi1xyXG4gICAgICAgIGxldCB4ID0gdGhpcy5oYW5kbGVvcmdwb3MueCArIChtb3ZlWCAtIHRoaXMubW91c2Vwb3MueCk7XHJcbiAgICAgICAgLy8gbGV0IHggPSB0aGlzLmhhbmRsZW9yZ3Bvcy54O1xyXG4gICAgICAgIC8vIGxldCB5ID0gdGhpcy5oYW5kbGVvcmdwb3MueSArIChtb3ZlWSAtIHRoaXMubW91c2Vwb3MueSk7XHJcbiAgICAgICAgbGV0IHkgPSB0aGlzLmhhbmRsZW9yZ3Bvcy55O1xyXG5cclxuICAgICAgICAvLyDjg5zjg4Pjgq/jgrnjgYwx44Kw44Oq44OD44OJ5YiG44KI44KK5bCP44GV44GP44Gq44KJ44Gq44GE44KI44GG44Gr44GZ44KLXHJcbiAgICAgICAgW3gsIHldID0gdGhpcy5jaGVja2dyaWQxYmxvY2soeCwgeSk7XHJcblxyXG4gICAgICAgIC8vIOOCsOODquODg+ODieOCueODiuODg+ODl+WHpueQhlxyXG4gICAgICAgIFt4LCB5XSA9IHRoaXMucHJvcHMuZ3JpZHNuYXAoeCwgeSk7XHJcbiAgICAgICAgXHJcblx0XHQvLyDjg5njg7zjgrlTVkfjgqTjg6Hjg7zjgrjjga7nq6/jgavjg4/jg7Pjg4njg6vjgYzooYzjgaPjgZ/loLTlkIjjga7luqfmqJnlpInmj5tcclxuXHRcdFt4LCB5XSA9IHRoaXMucHJvcHMuaGFuZGxlc3RvcCh4LCB5KTtcclxuXHJcbiAgICAgICAgLy8g44Ko44OH44Kj44OD44OI44Oc44OD44Kv44K55pu05paw5Yem55CGXHJcbiAgICAgICAgdGhpcy5wcm9wcy5oYW5kbGVNb3ZlKFxyXG4gICAgICAgICAgICB0aGlzLmJveG9yZ3Bvcy54LFxyXG4gICAgICAgICAgICB0aGlzLmJveG9yZ3Bvcy55LFxyXG4gICAgICAgICAgICB4IC0gdGhpcy5ib3hvcmdwb3MueCxcclxuICAgICAgICAgICAgdGhpcy5ib3hvcmdwb3MuaCxcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIG1vdXNlVXAoZSkge1xyXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7ICAgIC8vIOOBk+OBruOCpOODmeODs+ODiOOCkuOBk+OBruODrOOCpOODpOODvOOBp+atouOCgeOCi+OAguS4i+ODrOOCpOODpOODvOOBq+OBguOCi+imgee0oOOBq+OCpOODmeODs+ODiOOCkui1t+OBk+OBleOBquOBhFxyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTsgICAgIC8vIOODluODqeOCpuOCtuaomea6luapn+iDveOBruOCpOODmeODs+ODiOOCkuaKkeatouOBmeOCi1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIOOCpOODmeODs+ODiOOCkuWJiumZpOOBmeOCi1xyXG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMubW91c2VNb3ZlKTtcclxuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgICB0aGlzLm1vdXNlVXApO1xyXG5cclxuICAgICAgICAvLyBkb2N1bWVudOOBuOOBrmNsaWNr44Kk44OZ44Oz44OI44KS44Kt44Oj44Oz44K744Or44GZ44KLXHJcbiAgICAgICAgdmFyIGNhcHR1cmVDbGljayA9IChlKSA9PiB7XHJcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgY2FwdHVyZUNsaWNrLCB0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjYXB0dXJlQ2xpY2ssIHRydWUpO1xyXG5cclxuICAgICAgICAvLyDjg4/jg7Pjg4njg6tNb3VzZVVw5Yem55CGXHJcbiAgICAgICAgdGhpcy5wcm9wcy5oYW5kbGVNb3VzZVVwKCk7XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBjaGVja2dyaWQxYmxvY2soeCwgeSkge1xyXG4gICAgICAgIGNvbnN0IHgyID0gdGhpcy5ib3hvcmdwb3MueDtcclxuXHJcbiAgICAgICAgaWYgKHggPCB4MiArIERlZmluZS5ncmlkLndpZHRoKSB7XHJcbiAgICAgICAgICAgIHggPSB4MiArIERlZmluZS5ncmlkLndpZHRoO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIFt4LCB5XTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgLy8g44OP44Oz44OJ44Or44Gu44K144Kk44K644KS5rGC44KB44KLXHJcbiAgICAgICAgY29uc3QgaHcgPSBEZWZpbmUuaGFuZGxlLndpZHRoICAqIDEwMCAvIHRoaXMucHJvcHMuc2NhbGU7XHJcbiAgICAgICAgY29uc3QgaGggPSBEZWZpbmUuaGFuZGxlLmhlaWdodCAqIDEwMCAvIHRoaXMucHJvcHMuc2NhbGU7XHJcblxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxyZWN0XHJcbiAgICAgICAgICAgICAgICB4PXt0aGlzLnN0YXRlLnggLSAoaHcgLyAyKX1cclxuICAgICAgICAgICAgICAgIHk9e3RoaXMuc3RhdGUueSAtIChoaCAvIDIpfVxyXG4gICAgICAgICAgICAgICAgd2lkdGg9e2h3fVxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0PXtoaH1cclxuICAgICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsbDogJ2JsdWUnLFxyXG4gICAgICAgICAgICAgICAgICAgIGN1cnNvcjogJ2V3LXJlc2l6ZScsXHJcbiAgICAgICAgICAgICAgICB9fVxyXG5cclxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9eyhlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgIG9uTW91c2VEb3duPXsoZSkgPT4gdGhpcy5tb3VzZURvd24oZSl9XHJcbiAgICAgICAgICAgIC8+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcclxuXHJcbmltcG9ydCBIYW5kbGVSIGZyb20gJy4vSGFuZGxlUi5qcyc7XHJcblxyXG4vLyBtYXBTdGF0ZVRvUHJvcHNcclxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gKHN0YXRlLCBwcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAuLi5zdGF0ZSxcclxuICAgIH07XHJcbn1cclxuXHJcbi8vIG1hcERpc3BhdGNoVG9Qcm9wc1xyXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHMgPSAoZGlzcGF0Y2gsIHByb3BzKSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGRpc3BhdGNoLFxyXG4gICAgfTtcclxufVxyXG5cclxuLy8gbWVyZ2VQcm9wcyBcclxuY29uc3QgbWVyZ2VQcm9wcyA9IChzdGF0ZSwgZGlzcGF0Y2gsIHByb3BzKSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIC8vIHh4eDogeXl5LFxyXG4gICAgICAgIC8vIG9uSGFuZGxlUjogKHh4eCkgPT4ge1xyXG4gICAgICAgIC8vICAgICAuLi4uLlxyXG4gICAgICAgIC8vICAgICBkaXNwYXRjaC5kaXNwYXRjaChTVV9IYW5kbGVSeHhfSGFuZGxlUnhfSGFuZGxlUigpKTtcclxuICAgICAgICAvLyB9LFxyXG4gICAgICAgIC4uLnByb3BzLFxyXG4gICAgICAgIHNjYWxlOiBzdGF0ZS5zY2FsZSxcclxuICAgIH07XHJcbn1cclxuXHJcbi8vIGNvbm5lY3RcclxuY29uc3QgSGFuZGxlUk1hcCA9IGNvbm5lY3QoXHJcbiAgICBtYXBTdGF0ZVRvUHJvcHMsXHJcbiAgICBtYXBEaXNwYXRjaFRvUHJvcHMsXHJcbiAgICBtZXJnZVByb3BzXHJcbikoSGFuZGxlUik7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBIYW5kbGVSTWFwO1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5cclxuaW1wb3J0IHsgRGVmaW5lIH0gZnJvbSAnLi4vZGVmaW5lLmpzJztcclxuXHJcbmNvbnN0IHN0eWxlcyA9IHtcclxuXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhhbmRsZUwgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcbiBcclxuICAgICAgICAvLyDnp7vli5XliY3jga7jgqjjg4fjgqPjg4Pjg4jjg5zjg4Pjgq/jgrlhcmVh5oOF5aCxXHJcbiAgICAgICAgdGhpcy5ib3hvcmdwb3MgPSB7XHJcbiAgICAgICAgICAgIHg6IHByb3BzLngsXHJcbiAgICAgICAgICAgIHk6IHByb3BzLnksXHJcbiAgICAgICAgICAgIHc6IHByb3BzLncsXHJcbiAgICAgICAgICAgIGg6IHByb3BzLmgsXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy8g44OP44Oz44OJ44Or44Gu5YWD77yI56e75YuV5YmN77yJ44Gu5Lit5b+D5bqn5qiZXHJcbiAgICAgICAgdGhpcy5oYW5kbGVvcmdwb3MgPSB7XHJcbiAgICAgICAgICAgIHg6IHByb3BzLngsXHJcbiAgICAgICAgICAgIHk6IHByb3BzLnkgKyAocHJvcHMuaCAvIDIpLFxyXG4gICAgICAgIH07XHJcblxyXG5cdFx0Ly8g44Oe44Km44K544OA44Km44Oz5L2N572uXHJcblx0XHR0aGlzLm1vdXNlcG9zID0ge1xyXG5cdFx0XHR4OiAwLFxyXG5cdFx0XHR5OiAwLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8g44OP44Oz44OJ44Or44Gu5Lit5b+D5bqn5qiZ44KS44K744OD44OIXHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgICAgICAgeDogdGhpcy5oYW5kbGVvcmdwb3MueCxcclxuICAgICAgICAgICAgeTogdGhpcy5oYW5kbGVvcmdwb3MueSxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLm1vdXNlTW92ZSA9IHRoaXMubW91c2VNb3ZlLmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5tb3VzZVVwICAgPSB0aGlzLm1vdXNlVXAuYmluZCh0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xyXG4gICAgICAgIGlmIChuZXh0UHJvcHMuaGFuZGxlUmVmcmVzaCA9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYm94b3JncG9zID0ge1xyXG4gICAgICAgICAgICAgICAgeDogbmV4dFByb3BzLngsXHJcbiAgICAgICAgICAgICAgICB5OiBuZXh0UHJvcHMueSxcclxuICAgICAgICAgICAgICAgIHc6IG5leHRQcm9wcy53LFxyXG4gICAgICAgICAgICAgICAgaDogbmV4dFByb3BzLmgsXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLmhhbmRsZW9yZ3BvcyA9IHtcclxuICAgICAgICAgICAgICAgIHg6IG5leHRQcm9wcy54LFxyXG4gICAgICAgICAgICAgICAgeTogbmV4dFByb3BzLnkgKyAobmV4dFByb3BzLmggLyAyKSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgIHg6IG5leHRQcm9wcy54LFxyXG4gICAgICAgICAgICB5OiBuZXh0UHJvcHMueSArIChuZXh0UHJvcHMuaCAvIDIpLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIG1vdXNlRG93bihlKSB7XHJcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTsgICAgLy8g44GT44Gu44Kk44OZ44Oz44OI44KS44GT44Gu44Os44Kk44Ok44O844Gn5q2i44KB44KL44CC5LiL44Os44Kk44Ok44O844Gr44GC44KL6KaB57Sg44Gr44Kk44OZ44Oz44OI44KS6LW344GT44GV44Gq44GEXHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOyAgICAgLy8g44OW44Op44Km44K25qiZ5rqW5qmf6IO944Gu44Kk44OZ44Oz44OI44KS5oqR5q2i44GZ44KLXHJcblxyXG4gICAgICAgIC8vIOODnuOCpuOCueODoOODvOODluOBqOODnuOCpuOCueOCouODg+ODl+OBruOCpOODmeODs+ODiOOCkueZu+mMsuOBmeOCi1xyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMubW91c2VNb3ZlLCBmYWxzZSk7XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsICAgdGhpcy5tb3VzZVVwLCBmYWxzZSk7XHJcblxyXG4gICAgICAgIC8vIOOCr+ODquODg+OCr+OBruODnuOCpuOCueOCpOODmeODs+ODiFxyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5jbGljaywgZmFsc2UpO1xyXG5cclxuICAgICAgICAvLyDjg57jgqbjgrnjg4Djgqbjg7PjgZfjgZ/jgqvjg7zjgr3jg6vkvY3nva7jgpLjgrvjg4Pjg4jjgZnjgotcclxuXHRcdHRoaXMubW91c2Vwb3MueCA9IGUucGFnZVggKiAxMDAgLyB0aGlzLnByb3BzLnNjYWxlO1xyXG4gICAgICAgIHRoaXMubW91c2Vwb3MueSA9IGUucGFnZVkgKiAxMDAgLyB0aGlzLnByb3BzLnNjYWxlO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIOODj+ODs+ODieODq+ODnuOCpuOCueODgOOCpuODs+WHpueQhlxyXG4gICAgICAgIHRoaXMucHJvcHMuaGFuZGxlTW91c2VEb3duKCk7XHJcbiAgICB9XHJcblxyXG4gICAgbW91c2VNb3ZlKGUpIHtcclxuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpOyAgICAvLyDjgZPjga7jgqTjg5njg7Pjg4jjgpLjgZPjga7jg6zjgqTjg6Tjg7zjgafmraLjgoHjgovjgILkuIvjg6zjgqTjg6Tjg7zjgavjgYLjgovopoHntKDjgavjgqTjg5njg7Pjg4jjgpLotbfjgZPjgZXjgarjgYRcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7ICAgICAvLyDjg5bjg6njgqbjgrbmqJnmupbmqZ/og73jga7jgqTjg5njg7Pjg4jjgpLmipHmraLjgZnjgotcclxuICAgICAgICBcclxuICAgICAgICAvLyDjg57jgqbjgrnjg6Djg7zjg5blvozjga7jgqvjg7zjgr3jg6vkvY3nva7jgpLlvpfjgotcclxuXHRcdGNvbnN0IG1vdmVYID0gZS5wYWdlWCAqIDEwMCAvIHRoaXMucHJvcHMuc2NhbGU7XHJcblx0XHQvLyBjb25zdCBtb3ZlWSA9IGUucGFnZVkgKiAxMDAgLyB0aGlzLnByb3BzLnNjYWxlO1xyXG5cclxuXHRcdC8vIOW9k+ODj+ODs+ODieODq+OBruaWsOOBn+OBquW6p+aomeOCkuaxguOCgeOCi1xyXG4gICAgICAgIGxldCB4ID0gdGhpcy5oYW5kbGVvcmdwb3MueCArIChtb3ZlWCAtIHRoaXMubW91c2Vwb3MueCk7XHJcbiAgICAgICAgLy8gbGV0IHggPSB0aGlzLmhhbmRsZW9yZ3Bvcy54O1xyXG4gICAgICAgIC8vIGxldCB5ID0gdGhpcy5oYW5kbGVvcmdwb3MueSArIChtb3ZlWSAtIHRoaXMubW91c2Vwb3MueSk7XHJcbiAgICAgICAgbGV0IHkgPSB0aGlzLmhhbmRsZW9yZ3Bvcy55O1xyXG5cclxuICAgICAgICAvLyDjg5zjg4Pjgq/jgrnjgYwx44Kw44Oq44OD44OJ5YiG44KI44KK5bCP44GV44GP44Gq44KJ44Gq44GE44KI44GG44Gr44GZ44KLXHJcbiAgICAgICAgW3gsIHldID0gdGhpcy5jaGVja2dyaWQxYmxvY2soeCwgeSk7XHJcblxyXG4gICAgICAgIC8vIOOCsOODquODg+ODieOCueODiuODg+ODl+WHpueQhlxyXG4gICAgICAgIFt4LCB5XSA9IHRoaXMucHJvcHMuZ3JpZHNuYXAoeCwgeSk7XHJcbiAgICAgICAgXHJcblx0XHQvLyDjg5njg7zjgrlTVkfjgqTjg6Hjg7zjgrjjga7nq6/jgavjg4/jg7Pjg4njg6vjgYzooYzjgaPjgZ/loLTlkIjjga7luqfmqJnlpInmj5tcclxuXHRcdFt4LCB5XSA9IHRoaXMucHJvcHMuaGFuZGxlc3RvcCh4LCB5KTtcclxuXHJcbiAgICAgICAgLy8g44Ko44OH44Kj44OD44OI44Oc44OD44Kv44K55pu05paw5Yem55CGXHJcbiAgICAgICAgdGhpcy5wcm9wcy5oYW5kbGVNb3ZlKFxyXG4gICAgICAgICAgICB4LFxyXG4gICAgICAgICAgICB0aGlzLmJveG9yZ3Bvcy55LFxyXG4gICAgICAgICAgICB0aGlzLmJveG9yZ3Bvcy54IC0geCArIHRoaXMuYm94b3JncG9zLncsXHJcbiAgICAgICAgICAgIHRoaXMuYm94b3JncG9zLmgsXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBtb3VzZVVwKGUpIHtcclxuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpOyAgICAvLyDjgZPjga7jgqTjg5njg7Pjg4jjgpLjgZPjga7jg6zjgqTjg6Tjg7zjgafmraLjgoHjgovjgILkuIvjg6zjgqTjg6Tjg7zjgavjgYLjgovopoHntKDjgavjgqTjg5njg7Pjg4jjgpLotbfjgZPjgZXjgarjgYRcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7ICAgICAvLyDjg5bjg6njgqbjgrbmqJnmupbmqZ/og73jga7jgqTjg5njg7Pjg4jjgpLmipHmraLjgZnjgotcclxuICAgICAgICBcclxuICAgICAgICAvLyDjgqTjg5njg7Pjg4jjgpLliYrpmaTjgZnjgotcclxuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLm1vdXNlTW92ZSk7XHJcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsICAgdGhpcy5tb3VzZVVwKTtcclxuXHJcbiAgICAgICAgLy8gZG9jdW1lbnTjgbjjga5jbGlja+OCpOODmeODs+ODiOOCkuOCreODo+ODs+OCu+ODq+OBmeOCi1xyXG4gICAgICAgIHZhciBjYXB0dXJlQ2xpY2sgPSAoZSkgPT4ge1xyXG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGNhcHR1cmVDbGljaywgdHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgY2FwdHVyZUNsaWNrLCB0cnVlKTtcclxuXHJcbiAgICAgICAgLy8g44OP44Oz44OJ44OrTW91c2VVcOWHpueQhlxyXG4gICAgICAgIHRoaXMucHJvcHMuaGFuZGxlTW91c2VVcCgpO1xyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgY2hlY2tncmlkMWJsb2NrKHgsIHkpIHtcclxuICAgICAgICBjb25zdCB4MiA9IHRoaXMuYm94b3JncG9zLnggKyB0aGlzLmJveG9yZ3Bvcy53O1xyXG5cclxuICAgICAgICBpZiAoeCA+IHgyIC0gRGVmaW5lLmdyaWQud2lkdGgpIHtcclxuICAgICAgICAgICAgeCA9IHgyIC0gRGVmaW5lLmdyaWQud2lkdGg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gW3gsIHldO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICAvLyDjg4/jg7Pjg4njg6vjga7jgrXjgqTjgrrjgpLmsYLjgoHjgotcclxuICAgICAgICBjb25zdCBodyA9IERlZmluZS5oYW5kbGUud2lkdGggICogMTAwIC8gdGhpcy5wcm9wcy5zY2FsZTtcclxuICAgICAgICBjb25zdCBoaCA9IERlZmluZS5oYW5kbGUuaGVpZ2h0ICogMTAwIC8gdGhpcy5wcm9wcy5zY2FsZTtcclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPHJlY3RcclxuICAgICAgICAgICAgICAgIHg9e3RoaXMuc3RhdGUueCAtIChodyAvIDIpfVxyXG4gICAgICAgICAgICAgICAgeT17dGhpcy5zdGF0ZS55IC0gKGhoIC8gMil9XHJcbiAgICAgICAgICAgICAgICB3aWR0aD17aHd9XHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ9e2hofVxyXG4gICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICBmaWxsOiAnYmx1ZScsXHJcbiAgICAgICAgICAgICAgICAgICAgY3Vyc29yOiAnZXctcmVzaXplJyxcclxuICAgICAgICAgICAgICAgIH19XHJcblxyXG4gICAgICAgICAgICAgICAgb25DbGljaz17KGUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAvLyByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgb25Nb3VzZURvd249eyhlKSA9PiB0aGlzLm1vdXNlRG93bihlKX1cclxuICAgICAgICAgICAgLz5cclxuICAgICAgICApXHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnO1xyXG5cclxuaW1wb3J0IEhhbmRsZUwgZnJvbSAnLi9IYW5kbGVMLmpzJztcclxuXHJcbi8vIG1hcFN0YXRlVG9Qcm9wc1xyXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSAoc3RhdGUsIHByb3BzKSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIC4uLnN0YXRlLFxyXG4gICAgfTtcclxufVxyXG5cclxuLy8gbWFwRGlzcGF0Y2hUb1Byb3BzXHJcbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcyA9IChkaXNwYXRjaCwgcHJvcHMpID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZGlzcGF0Y2gsXHJcbiAgICB9O1xyXG59XHJcblxyXG4vLyBtZXJnZVByb3BzIFxyXG5jb25zdCBtZXJnZVByb3BzID0gKHN0YXRlLCBkaXNwYXRjaCwgcHJvcHMpID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgLy8geHh4OiB5eXksXHJcbiAgICAgICAgLy8gb25IYW5kbGVMOiAoeHh4KSA9PiB7XHJcbiAgICAgICAgLy8gICAgIC4uLi4uXHJcbiAgICAgICAgLy8gICAgIGRpc3BhdGNoLmRpc3BhdGNoKFNVX0hhbmRsZUx4eF9IYW5kbGVMeF9IYW5kbGVMKCkpO1xyXG4gICAgICAgIC8vIH0sXHJcbiAgICAgICAgLi4ucHJvcHMsXHJcbiAgICAgICAgc2NhbGU6IHN0YXRlLnNjYWxlLFxyXG4gICAgfTtcclxufVxyXG5cclxuLy8gY29ubmVjdFxyXG5jb25zdCBIYW5kbGVMTWFwID0gY29ubmVjdChcclxuICAgIG1hcFN0YXRlVG9Qcm9wcyxcclxuICAgIG1hcERpc3BhdGNoVG9Qcm9wcyxcclxuICAgIG1lcmdlUHJvcHNcclxuKShIYW5kbGVMKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEhhbmRsZUxNYXA7XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcblxyXG5pbXBvcnQgeyBEZWZpbmUgfSBmcm9tICcuLi9kZWZpbmUuanMnO1xyXG5cclxuY29uc3Qgc3R5bGVzID0ge1xyXG5cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSGFuZGxlVSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyDnp7vli5XliY3jga7jgqjjg4fjgqPjg4Pjg4jjg5zjg4Pjgq/jgrlhcmVh5oOF5aCxXHJcbiAgICAgICAgdGhpcy5ib3hvcmdwb3MgPSB7XHJcbiAgICAgICAgICAgIHg6IHByb3BzLngsXHJcbiAgICAgICAgICAgIHk6IHByb3BzLnksXHJcbiAgICAgICAgICAgIHc6IHByb3BzLncsXHJcbiAgICAgICAgICAgIGg6IHByb3BzLmgsXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy8g44OP44Oz44OJ44Or44Gu5YWD77yI56e75YuV5YmN77yJ44Gu5Lit5b+D5bqn5qiZXHJcbiAgICAgICAgdGhpcy5oYW5kbGVvcmdwb3MgPSB7XHJcbiAgICAgICAgICAgIHg6IHByb3BzLnggKyAocHJvcHMudyAvIDIpLFxyXG4gICAgICAgICAgICB5OiBwcm9wcy55LFxyXG4gICAgICAgIH07XHJcblxyXG5cdFx0Ly8g44Oe44Km44K544OA44Km44Oz5L2N572uXHJcblx0XHR0aGlzLm1vdXNlcG9zID0ge1xyXG5cdFx0XHR4OiAwLFxyXG5cdFx0XHR5OiAwLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8g44OP44Oz44OJ44Or44Gu5Lit5b+D5bqn5qiZ44KS44K744OD44OIXHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgICAgICAgeDogdGhpcy5oYW5kbGVvcmdwb3MueCxcclxuICAgICAgICAgICAgeTogdGhpcy5oYW5kbGVvcmdwb3MueSxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLm1vdXNlTW92ZSA9IHRoaXMubW91c2VNb3ZlLmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5tb3VzZVVwICAgPSB0aGlzLm1vdXNlVXAuYmluZCh0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xyXG4gICAgICAgIGlmIChuZXh0UHJvcHMuaGFuZGxlUmVmcmVzaCA9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYm94b3JncG9zID0ge1xyXG4gICAgICAgICAgICAgICAgeDogbmV4dFByb3BzLngsXHJcbiAgICAgICAgICAgICAgICB5OiBuZXh0UHJvcHMueSxcclxuICAgICAgICAgICAgICAgIHc6IG5leHRQcm9wcy53LFxyXG4gICAgICAgICAgICAgICAgaDogbmV4dFByb3BzLmgsXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLmhhbmRsZW9yZ3BvcyA9IHtcclxuICAgICAgICAgICAgICAgIHg6IG5leHRQcm9wcy54ICsgKG5leHRQcm9wcy53IC8gMiksXHJcbiAgICAgICAgICAgICAgICB5OiBuZXh0UHJvcHMueSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgIHg6IG5leHRQcm9wcy54ICsgKG5leHRQcm9wcy53IC8gMiksXHJcbiAgICAgICAgICAgIHk6IG5leHRQcm9wcy55LFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIG1vdXNlRG93bihlKSB7XHJcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTsgICAgLy8g44GT44Gu44Kk44OZ44Oz44OI44KS44GT44Gu44Os44Kk44Ok44O844Gn5q2i44KB44KL44CC5LiL44Os44Kk44Ok44O844Gr44GC44KL6KaB57Sg44Gr44Kk44OZ44Oz44OI44KS6LW344GT44GV44Gq44GEXHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOyAgICAgLy8g44OW44Op44Km44K25qiZ5rqW5qmf6IO944Gu44Kk44OZ44Oz44OI44KS5oqR5q2i44GZ44KLXHJcblxyXG4gICAgICAgIC8vIOODnuOCpuOCueODoOODvOODluOBqOODnuOCpuOCueOCouODg+ODl+OBruOCpOODmeODs+ODiOOCkueZu+mMsuOBmeOCi1xyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMubW91c2VNb3ZlLCBmYWxzZSk7XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsICAgdGhpcy5tb3VzZVVwLCBmYWxzZSk7XHJcblxyXG4gICAgICAgIC8vIOOCr+ODquODg+OCr+OBruODnuOCpuOCueOCpOODmeODs+ODiFxyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5jbGljaywgZmFsc2UpO1xyXG5cclxuICAgICAgICAvLyDjg57jgqbjgrnjg4Djgqbjg7PjgZfjgZ/jgqvjg7zjgr3jg6vkvY3nva7jgpLjgrvjg4Pjg4jjgZnjgotcclxuXHRcdHRoaXMubW91c2Vwb3MueCA9IGUucGFnZVggKiAxMDAgLyB0aGlzLnByb3BzLnNjYWxlO1xyXG4gICAgICAgIHRoaXMubW91c2Vwb3MueSA9IGUucGFnZVkgKiAxMDAgLyB0aGlzLnByb3BzLnNjYWxlO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIOODj+ODs+ODieODq+ODnuOCpuOCueODgOOCpuODs+WHpueQhlxyXG4gICAgICAgIHRoaXMucHJvcHMuaGFuZGxlTW91c2VEb3duKCk7XHJcbiAgICB9XHJcblxyXG4gICAgbW91c2VNb3ZlKGUpIHtcclxuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpOyAgICAvLyDjgZPjga7jgqTjg5njg7Pjg4jjgpLjgZPjga7jg6zjgqTjg6Tjg7zjgafmraLjgoHjgovjgILkuIvjg6zjgqTjg6Tjg7zjgavjgYLjgovopoHntKDjgavjgqTjg5njg7Pjg4jjgpLotbfjgZPjgZXjgarjgYRcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7ICAgICAvLyDjg5bjg6njgqbjgrbmqJnmupbmqZ/og73jga7jgqTjg5njg7Pjg4jjgpLmipHmraLjgZnjgotcclxuICAgICAgICBcclxuICAgICAgICAvLyDjg57jgqbjgrnjg6Djg7zjg5blvozjga7jgqvjg7zjgr3jg6vkvY3nva7jgpLlvpfjgotcclxuXHRcdC8vIGNvbnN0IG1vdmVYID0gZS5wYWdlWCAqIDEwMCAvIHRoaXMucHJvcHMuc2NhbGU7XHJcblx0XHRjb25zdCBtb3ZlWSA9IGUucGFnZVkgKiAxMDAgLyB0aGlzLnByb3BzLnNjYWxlO1xyXG5cclxuXHRcdC8vIOW9k+ODj+ODs+ODieODq+OBruaWsOOBn+OBquW6p+aomeOCkuaxguOCgeOCi1xyXG4gICAgICAgIC8vIGxldCB4ID0gdGhpcy5oYW5kbGVvcmdwb3MueCArIChtb3ZlWCAtIHRoaXMubW91c2Vwb3MueCk7XHJcbiAgICAgICAgbGV0IHggPSB0aGlzLmhhbmRsZW9yZ3Bvcy54O1xyXG4gICAgICAgIGxldCB5ID0gdGhpcy5oYW5kbGVvcmdwb3MueSArIChtb3ZlWSAtIHRoaXMubW91c2Vwb3MueSk7XHJcbiAgICAgICAgLy8gbGV0IHkgPSB0aGlzLmhhbmRsZW9yZ3Bvcy55O1xyXG5cclxuICAgICAgICAvLyDjg5zjg4Pjgq/jgrnjgYwx44Kw44Oq44OD44OJ5YiG44KI44KK5bCP44GV44GP44Gq44KJ44Gq44GE44KI44GG44Gr44GZ44KLXHJcbiAgICAgICAgW3gsIHldID0gdGhpcy5jaGVja2dyaWQxYmxvY2soeCwgeSk7XHJcblxyXG4gICAgICAgIC8vIOOCsOODquODg+ODieOCueODiuODg+ODl+WHpueQhlxyXG4gICAgICAgIFt4LCB5XSA9IHRoaXMucHJvcHMuZ3JpZHNuYXAoeCwgeSk7XHJcbiAgICAgICAgXHJcblx0XHQvLyDjg5njg7zjgrlTVkfjgqTjg6Hjg7zjgrjjga7nq6/jgavjg4/jg7Pjg4njg6vjgYzooYzjgaPjgZ/loLTlkIjjga7luqfmqJnlpInmj5tcclxuXHRcdFt4LCB5XSA9IHRoaXMucHJvcHMuaGFuZGxlc3RvcCh4LCB5KTtcclxuXHJcbiAgICAgICAgLy8g44Ko44OH44Kj44OD44OI44Oc44OD44Kv44K55pu05paw5Yem55CGXHJcbiAgICAgICAgdGhpcy5wcm9wcy5oYW5kbGVNb3ZlKFxyXG4gICAgICAgICAgICB0aGlzLmJveG9yZ3Bvcy54LFxyXG4gICAgICAgICAgICB5LFxyXG4gICAgICAgICAgICB0aGlzLmJveG9yZ3Bvcy53LFxyXG4gICAgICAgICAgICB0aGlzLmJveG9yZ3Bvcy55IC0geSArIHRoaXMuYm94b3JncG9zLmgsXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBtb3VzZVVwKGUpIHtcclxuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpOyAgICAvLyDjgZPjga7jgqTjg5njg7Pjg4jjgpLjgZPjga7jg6zjgqTjg6Tjg7zjgafmraLjgoHjgovjgILkuIvjg6zjgqTjg6Tjg7zjgavjgYLjgovopoHntKDjgavjgqTjg5njg7Pjg4jjgpLotbfjgZPjgZXjgarjgYRcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7ICAgICAvLyDjg5bjg6njgqbjgrbmqJnmupbmqZ/og73jga7jgqTjg5njg7Pjg4jjgpLmipHmraLjgZnjgotcclxuICAgICAgICBcclxuICAgICAgICAvLyDjgqTjg5njg7Pjg4jjgpLliYrpmaTjgZnjgotcclxuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLm1vdXNlTW92ZSk7XHJcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsICAgdGhpcy5tb3VzZVVwKTtcclxuXHJcbiAgICAgICAgLy8gZG9jdW1lbnTjgbjjga5jbGlja+OCpOODmeODs+ODiOOCkuOCreODo+ODs+OCu+ODq+OBmeOCi1xyXG4gICAgICAgIHZhciBjYXB0dXJlQ2xpY2sgPSAoZSkgPT4ge1xyXG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGNhcHR1cmVDbGljaywgdHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgY2FwdHVyZUNsaWNrLCB0cnVlKTtcclxuXHJcbiAgICAgICAgLy8g44OP44Oz44OJ44OrTW91c2VVcOWHpueQhlxyXG4gICAgICAgIHRoaXMucHJvcHMuaGFuZGxlTW91c2VVcCgpO1xyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgY2hlY2tncmlkMWJsb2NrKHgsIHkpIHtcclxuICAgICAgICBjb25zdCB5MiA9IHRoaXMuYm94b3JncG9zLnkgKyB0aGlzLmJveG9yZ3Bvcy5oO1xyXG5cclxuICAgICAgICBpZiAoeSA+IHkyIC0gRGVmaW5lLmdyaWQuaGVpZ2h0KSB7XHJcbiAgICAgICAgICAgIHkgPSB5MiAtIERlZmluZS5ncmlkLmhlaWdodDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBbeCwgeV07XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIC8vIOODj+ODs+ODieODq+OBruOCteOCpOOCuuOCkuaxguOCgeOCi1xyXG4gICAgICAgIGNvbnN0IGh3ID0gRGVmaW5lLmhhbmRsZS53aWR0aCAgKiAxMDAgLyB0aGlzLnByb3BzLnNjYWxlO1xyXG4gICAgICAgIGNvbnN0IGhoID0gRGVmaW5lLmhhbmRsZS5oZWlnaHQgKiAxMDAgLyB0aGlzLnByb3BzLnNjYWxlO1xyXG5cclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8cmVjdFxyXG4gICAgICAgICAgICAgICAgeD17dGhpcy5zdGF0ZS54IC0gKGh3IC8gMil9XHJcbiAgICAgICAgICAgICAgICB5PXt0aGlzLnN0YXRlLnkgLSAoaGggLyAyKX1cclxuICAgICAgICAgICAgICAgIHdpZHRoPXtod31cclxuICAgICAgICAgICAgICAgIGhlaWdodD17aGh9XHJcbiAgICAgICAgICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbGw6ICdibHVlJyxcclxuICAgICAgICAgICAgICAgICAgICBjdXJzb3I6ICducy1yZXNpemUnLFxyXG4gICAgICAgICAgICAgICAgfX1cclxuXHJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXsoZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7ICAgIC8vIOOBk+OBruOCpOODmeODs+ODiOOCkuOBk+OBruODrOOCpOODpOODvOOBp+atouOCgeOCi+OAguS4i+ODrOOCpOODpOODvOOBq+OBguOCi+imgee0oOOBq+OCpOODmeODs+ODiOOCkui1t+OBk+OBleOBquOBhFxyXG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsgICAgIC8vIOODluODqeOCpuOCtuaomea6luapn+iDveOBruOCpOODmeODs+ODiOOCkuaKkeatouOBmeOCi1xyXG4gICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgIG9uTW91c2VEb3duPXsoZSkgPT4gdGhpcy5tb3VzZURvd24oZSl9XHJcbiAgICAgICAgICAgIC8+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcclxuXHJcbmltcG9ydCBIYW5kbGVVIGZyb20gJy4vSGFuZGxlVS5qcyc7XHJcblxyXG4vLyBtYXBTdGF0ZVRvUHJvcHNcclxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gKHN0YXRlLCBwcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAuLi5zdGF0ZSxcclxuICAgIH07XHJcbn1cclxuXHJcbi8vIG1hcERpc3BhdGNoVG9Qcm9wc1xyXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHMgPSAoZGlzcGF0Y2gsIHByb3BzKSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGRpc3BhdGNoLFxyXG4gICAgfTtcclxufVxyXG5cclxuLy8gbWVyZ2VQcm9wcyBcclxuY29uc3QgbWVyZ2VQcm9wcyA9IChzdGF0ZSwgZGlzcGF0Y2gsIHByb3BzKSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIC8vIHh4eDogeXl5LFxyXG4gICAgICAgIC8vIG9uSGFuZGxlVTogKHh4eCkgPT4ge1xyXG4gICAgICAgIC8vICAgICAuLi4uLlxyXG4gICAgICAgIC8vICAgICBkaXNwYXRjaC5kaXNwYXRjaChTVV9IYW5kbGVVeHhfSGFuZGxlVXhfSGFuZGxlVSgpKTtcclxuICAgICAgICAvLyB9LFxyXG4gICAgICAgIC4uLnByb3BzLFxyXG4gICAgICAgIHNjYWxlOiBzdGF0ZS5zY2FsZSxcclxuICAgIH07XHJcbn1cclxuXHJcbi8vIGNvbm5lY3RcclxuY29uc3QgSGFuZGxlVU1hcCA9IGNvbm5lY3QoXHJcbiAgICBtYXBTdGF0ZVRvUHJvcHMsXHJcbiAgICBtYXBEaXNwYXRjaFRvUHJvcHMsXHJcbiAgICBtZXJnZVByb3BzXHJcbikoSGFuZGxlVSk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBIYW5kbGVVTWFwO1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5cclxuaW1wb3J0IEhhbmRsZVVNYXAgZnJvbSAnLi9IYW5kbGVVTWFwLmpzJztcclxuaW1wb3J0IEhhbmRsZUxNYXAgZnJvbSAnLi9IYW5kbGVMTWFwLmpzJztcclxuaW1wb3J0IEhhbmRsZVJNYXAgZnJvbSAnLi9IYW5kbGVSTWFwLmpzJztcclxuaW1wb3J0IEhhbmRsZURNYXAgZnJvbSAnLi9IYW5kbGVETWFwLmpzJztcclxuXHJcbmltcG9ydCB7IERlZmluZSB9IGZyb20gJy4uL2RlZmluZS5qcyc7XHJcbmltcG9ydCB7IFphaHlvIH0gIGZyb20gJy4uL2xpYnMvemFoeW8uanMnO1xyXG5cclxuY29uc3Qgc3R5bGVzID0ge1xyXG5cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlbGVjdEVkaXRCb3ggZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcblxyXG4gICAgICAgIC8vIOW9k+ODnOODg+OCr+OCueOBruWFg++8iOenu+WLleWJje+8ieOBruW3puS4iuW6p+aomVxyXG4gICAgICAgIGNvbnN0IGsgPSBaYWh5by5ydVRvbHVSZWN0KHByb3BzLngxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzLnkxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzLngyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzLnkyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlZmluZS5zdmdpbWFnZXNpemUud2lkdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVmaW5lLnN2Z2ltYWdlc2l6ZS5oZWlnaHQpO1xyXG4gICAgICAgIHRoaXMuYm94b3JncG9zID0ge1xyXG4gICAgICAgICAgICB4OiBrLngxLFxyXG4gICAgICAgICAgICB5OiBrLnkxLFxyXG4gICAgICAgIH07XHJcblxyXG5cdFx0Ly8g44Oe44Km44K544OA44Km44Oz5L2N572uXHJcblx0XHR0aGlzLm1vdXNlcG9zID0ge1xyXG5cdFx0XHR4OiAwLFxyXG5cdFx0XHR5OiAwLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8g57eo6ZuG44Oc44OD44Kv44K544Gu5bem5LiK5bqn5qiZ44Go5bmF6auY44GV44KS44K744OD44OIXHJcbiAgICAgICAgY29uc3QgeiA9IFphaHlvLnJ1VG9sdVJlY3RUb0FyZWEocHJvcHMueDEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHMueTEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHMueDIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHMueTIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVmaW5lLnN2Z2ltYWdlc2l6ZS53aWR0aCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWZpbmUuc3ZnaW1hZ2VzaXplLmhlaWdodCk7XHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgICAgICAgZ3JvdXBfaWQ6IHByb3BzLmdyb3VwX2lkLFxyXG4gICAgICAgICAgICB4OiB6LngsXHJcbiAgICAgICAgICAgIHk6IHoueSxcclxuICAgICAgICAgICAgdzogei53LFxyXG4gICAgICAgICAgICBoOiB6LmgsXHJcbiAgICAgICAgICAgIGhhbmRsZV9yZWZyZXNoOiB0cnVlLFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMubW91c2VNb3ZlID0gdGhpcy5tb3VzZU1vdmUuYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLm1vdXNlVXAgICA9IHRoaXMubW91c2VVcC5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuYmFzZUNsaWNrID0gdGhpcy5iYXNlQ2xpY2suYmluZCh0aGlzKTtcclxuXHJcbiAgICAgICAgLy8g44OZ44O844K544Kv44Oq44OD44Kv44Gu44Kk44OZ44Oz44OI44KS55m76Yyy44GZ44KLXHJcbiAgICAgICAgdGhpcy5hZGRCYXNlQ2xpY2tFdmVudCgpO1xyXG5cclxuICAgICAgICB0aGlzLmtleVByZXNzID0gdGhpcy5rZXlQcmVzcy5iaW5kKHRoaXMpO1xyXG5cclxuICAgICAgICAvLyDjgq3jg7zlhaXlipvjga7jgqTjg5njg7Pjg4jjgpLnmbvpjLLjgZnjgotcclxuICAgICAgICB0aGlzLmFkZEtleVByZXNzRXZlbnQoKTtcclxuICAgIH1cclxuXHJcbiAgICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xyXG4gICAgICAgIGNvbnN0IGFyZWEgPSBaYWh5by5ydVRvbHVSZWN0VG9BcmVhKG5leHRQcm9wcy54MSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0UHJvcHMueTEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dFByb3BzLngyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHRQcm9wcy55MixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWZpbmUuc3ZnaW1hZ2VzaXplLndpZHRoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlZmluZS5zdmdpbWFnZXNpemUuaGVpZ2h0KTtcclxuXHJcbiAgICAgICAgdGhpcy5ib3hvcmdwb3MgPSB7XHJcbiAgICAgICAgICAgIHg6IGFyZWEueCxcclxuICAgICAgICAgICAgeTogYXJlYS55LFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICBncm91cF9pZDogbmV4dFByb3BzLmdyb3VwX2lkLFxyXG4gICAgICAgICAgICB4OiBhcmVhLngsXHJcbiAgICAgICAgICAgIHk6IGFyZWEueSxcclxuICAgICAgICAgICAgdzogYXJlYS53LFxyXG4gICAgICAgICAgICBoOiBhcmVhLmgsXHJcbiAgICAgICAgICAgIGhhbmRsZV9yZWZyZXNoOiB0cnVlLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xyXG4gICAgICAgIHRoaXMucmVtb3ZlQmFzZUNsaWNrRXZlbnQoKTtcclxuICAgICAgICB0aGlzLnJlbW92ZUtleVByZXNzRXZlbnQoKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyDjgq3jg7zlhaXlipvjga7jgqTjg5njg7Pjg4jnmbvpjLLlh6bnkIZcclxuICAgIGFkZEtleVByZXNzRXZlbnQoKSB7XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMua2V5UHJlc3MsIGZhbHNlKTtcclxuICAgIH1cclxuICAgIC8vIOOCreODvOWFpeWKm+OBruOCpOODmeODs+ODiOWJiumZpOWHpueQhlxyXG4gICAgcmVtb3ZlS2V5UHJlc3NFdmVudCgpIHtcclxuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5rZXlQcmVzcyk7XHJcbiAgICB9XHJcbiAgICAvLyDjgq3jg7zlhaXlipvlh6bnkIZcclxuICAgIGtleVByZXNzKGUpIHtcclxuICAgICAgICAvLyDjgIxEZWxldGXjgI3jgq3jg7zjgYzmirzjgZXjgozjgZ/loLTlkIhcclxuICAgICAgICBpZiAoZS5rZXlDb2RlID09IDQ2KSB7XHJcbiAgICAgICAgICAgIHRoaXMucHJvcHMuc296YWlSZW1vdmUoe1xyXG4gICAgICAgICAgICAgICAgZ3JvdXBfaWQ6IHRoaXMuc3RhdGUuZ3JvdXBfaWQsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8g44OZ44O844K544Kv44Oq44OD44Kv44Gu44Kk44OZ44Oz44OI55m76Yyy5Yem55CGXHJcbiAgICBhZGRCYXNlQ2xpY2tFdmVudCgpIHtcclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndmlld2JveCcpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5iYXNlQ2xpY2ssIGZhbHNlKTtcclxuICAgIH1cclxuICAgIC8vIOODmeODvOOCueOCr+ODquODg+OCr+OBruOCpOODmeODs+ODiOWJiumZpOWHpueQhlxyXG4gICAgcmVtb3ZlQmFzZUNsaWNrRXZlbnQoKSB7XHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ZpZXdib3gnKS5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuYmFzZUNsaWNrKTtcclxuICAgIH1cclxuXHJcbiAgICBiYXNlQ2xpY2soZSkge1xyXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7ICAgIC8vIOOBk+OBruOCpOODmeODs+ODiOOCkuOBk+OBruODrOOCpOODpOODvOOBp+atouOCgeOCi+OAguS4i+ODrOOCpOODpOODvOOBq+OBguOCi+imgee0oOOBq+OCpOODmeODs+ODiOOCkui1t+OBk+OBleOBquOBhFxyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTsgICAgIC8vIOODluODqeOCpuOCtuaomea6luapn+iDveOBruOCpOODmeODs+ODiOOCkuaKkeatouOBmeOCi1xyXG5cclxuICAgICAgICAvLyDjg5njg7zjgrnjgq/jg6rjg4Pjgq/jga7jgqTjg5njg7Pjg4jjgpLliYrpmaTjgZnjgotcclxuICAgICAgICB0aGlzLnJlbW92ZUJhc2VDbGlja0V2ZW50KCk7XHJcblxyXG4gICAgICAgIHRoaXMucHJvcHMub25DbGlja0Jhc2UoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIG1vdXNlRG93bihlKSB7XHJcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTsgICAgLy8g44GT44Gu44Kk44OZ44Oz44OI44KS44GT44Gu44Os44Kk44Ok44O844Gn5q2i44KB44KL44CC5LiL44Os44Kk44Ok44O844Gr44GC44KL6KaB57Sg44Gr44Kk44OZ44Oz44OI44KS6LW344GT44GV44Gq44GEXHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOyAgICAgLy8g44OW44Op44Km44K25qiZ5rqW5qmf6IO944Gu44Kk44OZ44Oz44OI44KS5oqR5q2i44GZ44KLXHJcblxyXG4gICAgICAgIC8vIOODmeODvOOCueOCr+ODquODg+OCr+OBruOCpOODmeODs+ODiOOCkuWJiumZpOOBmeOCi1xyXG4gICAgICAgIHRoaXMucmVtb3ZlQmFzZUNsaWNrRXZlbnQoKTtcclxuXHJcbiAgICAgICAgLy8g44Oe44Km44K544Og44O844OW44Go44Oe44Km44K544Ki44OD44OX44Gu44Kk44OZ44Oz44OI44KS55m76Yyy44GZ44KLXHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5tb3VzZU1vdmUsIGZhbHNlKTtcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgICB0aGlzLm1vdXNlVXAsIGZhbHNlKTtcclxuXHJcbiAgICAgICAgLy8g44Oe44Km44K544OA44Km44Oz44GX44Gf44Kr44O844K944Or5L2N572u44KS44K744OD44OI44GZ44KLXHJcblx0XHR0aGlzLm1vdXNlcG9zLnggPSBlLnBhZ2VYICogMTAwIC8gdGhpcy5wcm9wcy5zY2FsZTtcclxuXHRcdHRoaXMubW91c2Vwb3MueSA9IGUucGFnZVkgKiAxMDAgLyB0aGlzLnByb3BzLnNjYWxlO1xyXG4gICAgfVxyXG5cclxuICAgIG1vdXNlTW92ZShlKSB7XHJcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTsgICAgLy8g44GT44Gu44Kk44OZ44Oz44OI44KS44GT44Gu44Os44Kk44Ok44O844Gn5q2i44KB44KL44CC5LiL44Os44Kk44Ok44O844Gr44GC44KL6KaB57Sg44Gr44Kk44OZ44Oz44OI44KS6LW344GT44GV44Gq44GEXHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOyAgICAgLy8g44OW44Op44Km44K25qiZ5rqW5qmf6IO944Gu44Kk44OZ44Oz44OI44KS5oqR5q2i44GZ44KLXHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8g44Oe44Km44K544Og44O844OW5b6M44Gu44Kr44O844K944Or5L2N572u44KS5b6X44KLXHJcblx0XHRjb25zdCBtb3ZlWCA9IGUucGFnZVggKiAxMDAgLyB0aGlzLnByb3BzLnNjYWxlO1xyXG5cdFx0Y29uc3QgbW92ZVkgPSBlLnBhZ2VZICogMTAwIC8gdGhpcy5wcm9wcy5zY2FsZTtcclxuXHJcblx0XHQvLyDlvZPjg5zjg4Pjgq/jgrnjga7mlrDjgZ/jgarluqfmqJnjgpLmsYLjgoHjgotcclxuXHRcdGxldCB4ID0gdGhpcy5ib3hvcmdwb3MueCArIChtb3ZlWCAtIHRoaXMubW91c2Vwb3MueCk7XHJcbiAgICAgICAgbGV0IHkgPSB0aGlzLmJveG9yZ3Bvcy55ICsgKG1vdmVZIC0gdGhpcy5tb3VzZXBvcy55KTtcclxuXHJcbiAgICAgICAgLy8g44Kw44Oq44OD44OJ44K544OK44OD44OX5Yem55CGXHJcbiAgICAgICAgW3gsIHldID0gdGhpcy5ncmlkc25hcCh4LCB5KTtcclxuICAgICAgICBcclxuXHRcdC8vIOODmeODvOOCuVNWR+OCpOODoeODvOOCuOOBruerr+OBq+W9k+ODnOODg+OCr+OCueOBjOihjOOBo+OBn+WgtOWQiOOBruW6p+aomeWkieaPm1xyXG5cdFx0W3gsIHldID0gdGhpcy5ib3htb3Zlc3RvcCh4LCB5LCB0aGlzLnN0YXRlLncsIHRoaXMuc3RhdGUuaCk7XHJcblxyXG4gICAgICAgIC8vIOeUu+WDj+OBruW6p+aomeOCkuabtOaWsOOBl+OBpuaPj+eUu+OBl+ebtOOBmVxyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICB4OiB4LFxyXG4gICAgICAgICAgICB5OiB5LFxyXG4gICAgICAgICAgICBoYW5kbGVfcmVmcmVzaDogdHJ1ZSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBtb3VzZVVwKGUpIHtcclxuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpOyAgICAvLyDjgZPjga7jgqTjg5njg7Pjg4jjgpLjgZPjga7jg6zjgqTjg6Tjg7zjgafmraLjgoHjgovjgILkuIvjg6zjgqTjg6Tjg7zjgavjgYLjgovopoHntKDjgavjgqTjg5njg7Pjg4jjgpLotbfjgZPjgZXjgarjgYRcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7ICAgICAvLyDjg5bjg6njgqbjgrbmqJnmupbmqZ/og73jga7jgqTjg5njg7Pjg4jjgpLmipHmraLjgZnjgotcclxuICAgICAgICBcclxuICAgICAgICAvLyDjgqTjg5njg7Pjg4jjgpLliYrpmaTjgZnjgotcclxuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLm1vdXNlTW92ZSk7XHJcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsICAgdGhpcy5tb3VzZVVwKTtcclxuXHJcbiAgICAgICAgLy8gZG9jdW1lbnTjgbjjga5jbGlja+OCpOODmeODs+ODiOOCkuOCreODo+ODs+OCu+ODq+OBmeOCi1xyXG4gICAgICAgIHZhciBjYXB0dXJlQ2xpY2sgPSAoZSkgPT4ge1xyXG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGNhcHR1cmVDbGljaywgdHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgY2FwdHVyZUNsaWNrLCB0cnVlKTtcclxuXHJcbiAgICAgICAgLy8g44OZ44O844K544Kv44Oq44OD44Kv44Gu44Kk44OZ44Oz44OI44KS55m76Yyy44GZ44KLXHJcbiAgICAgICAgdGhpcy5hZGRCYXNlQ2xpY2tFdmVudCgpO1xyXG5cclxuICAgICAgICAvLyDnp7vli5XntYLkuoblh6bnkIbvvIjlj7PkuIrln7rngrnjga7luqfmqJnjgpLmuKHjgZnvvIlcclxuICAgICAgICBjb25zdCB6ID0gWmFoeW8ubHVUb3J1QXJlYVRvUmVjdCh0aGlzLnN0YXRlLngsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS55LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUudyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLmgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVmaW5lLnN2Z2ltYWdlc2l6ZS53aWR0aCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWZpbmUuc3ZnaW1hZ2VzaXplLmhlaWdodCk7XHJcbiAgICAgICAgdGhpcy5wcm9wcy5lbmRNb3ZlQm94KHtcclxuICAgICAgICAgICAgYm94X2lkOiB0aGlzLnByb3BzLmJveF9pZCxcclxuICAgICAgICAgICAgeDE6IHoueDEsXHJcbiAgICAgICAgICAgIHkxOiB6LnkxLFxyXG4gICAgICAgICAgICB4Mjogei54MixcclxuICAgICAgICAgICAgeTI6IHoueTIsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy9cclxuICAgIC8vIOOCsOODquODg+ODieOCueODiuODg+ODl+WHpueQhlxyXG4gICAgLy9cclxuICAgIGdyaWRzbmFwKHgsIHkpIHtcclxuICAgICAgICAvLyDlj7PkuIrln7rngrnjga7luqfmqJnjgavlpInmj5vjgZnjgotcclxuICAgICAgICBsZXQgcnVfeCA9IFphaHlvLmx1VG9ydVgoeCwgRGVmaW5lLnN2Z2ltYWdlc2l6ZS53aWR0aCk7XHJcbiAgICAgICAgbGV0IHJ1X3kgPSBaYWh5by5sdVRvcnVZKHksIERlZmluZS5zdmdpbWFnZXNpemUuaGVpZ2h0KTtcclxuXHJcbiAgICAgICAgLy8gWOW6p+aomeOCkuOCsOODquODg+ODieW5heOBp+WJsuOBo+OBpuOAgeS9meOCiuOBjDDjga7loLTlkIjjga/jgIFY5bqn5qiZ5rG65a6aXHJcbiAgICAgICAgbGV0IGFtYXJpLCBzaG8sIG1pblgsIG1heFg7XHJcbiAgICAgICAgYW1hcmkgPSBydV94ICUgRGVmaW5lLmdyaWQud2lkdGg7XHJcbiAgICAgICAgaWYgKGFtYXJpID09IDApIHtcclxuICAgICAgICAgICAgLy8gWOW6p+aomeOBr+axuuWumlxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIOOCsOODquODg+ODieOBruWwj+OBleOBhOaWueOBrljluqfmqJnjgpLmsYLjgoHjgotcclxuICAgICAgICAgICAgc2hvID0gTWF0aC5mbG9vcihydV94IC8gRGVmaW5lLmdyaWQud2lkdGgpO1xyXG4gICAgICAgICAgICBtaW5YID0gc2hvICogRGVmaW5lLmdyaWQud2lkdGg7XHJcbiAgICAgICAgICAgIC8vIOOCsOODquODg+ODieOBruWkp+OBjeOBhOaWueOBrljluqfmqJnjgpLmsYLjgoHjgotcclxuICAgICAgICAgICAgbWF4WCA9IChzaG8gKyAxKSAqIERlZmluZS5ncmlkLndpZHRoO1xyXG5cclxuICAgICAgICAgICAgLy8g5L2Z44KK44GM44CB44Kw44Oq44OD44OJ44Gu5Y2K5YiG44KI44KK5aSn44GN44GR44KM44Gw5aSn44GN44GE5pa544CB5bCP44GV44GR44KM44Gw5bCP44GV44GE5pa5XHJcbiAgICAgICAgICAgIGlmIChhbWFyaSA+PSAoRGVmaW5lLmdyaWQud2lkdGggLyAyKSkge1xyXG4gICAgICAgICAgICAgICAgcnVfeCA9IG1heFg7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBydV94ID0gbWluWDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gWeW6p+aomeOCkuOCsOODquODg+ODiemrmOOBleOBp+WJsuOBo+OBpuOAgeS9meOCiuOBjDDjga7loLTlkIjjga/jgIFZ5bqn5qiZ5rG65a6aXHJcbiAgICAgICAgbGV0IG1pblksIG1heFk7XHJcbiAgICAgICAgYW1hcmkgPSBydV95ICUgRGVmaW5lLmdyaWQuaGVpZ2h0O1xyXG4gICAgICAgIGlmIChhbWFyaSA9PSAwKSB7XHJcbiAgICAgICAgICAgIC8vIFnluqfmqJnjga/msbrlrppcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyDjgrDjg6rjg4Pjg4njga7lsI/jgZXjgYTmlrnjga5Z5bqn5qiZ44KS5rGC44KB44KLXHJcbiAgICAgICAgICAgIHNobyA9IE1hdGguZmxvb3IocnVfeSAvIERlZmluZS5ncmlkLmhlaWdodCk7XHJcbiAgICAgICAgICAgIG1pblkgPSBzaG8gKiBEZWZpbmUuZ3JpZC5oZWlnaHQ7XHJcbiAgICAgICAgICAgIC8vIOOCsOODquODg+ODieOBruWkp+OBjeOBhOaWueOBrljluqfmqJnjgpLmsYLjgoHjgotcclxuICAgICAgICAgICAgbWF4WSA9IChzaG8gKyAxKSAqIERlZmluZS5ncmlkLmhlaWdodDtcclxuXHJcbiAgICAgICAgICAgIC8vIOS9meOCiuOBjOOAgeOCsOODquODg+ODieOBruWNiuWIhuOCiOOCiuWkp+OBjeOBkeOCjOOBsOWkp+OBjeOBhOaWueOAgeWwj+OBleOBkeOCjOOBsOWwj+OBleOBhOaWuVxyXG4gICAgICAgICAgICBpZiAoYW1hcmkgPj0gKERlZmluZS5ncmlkLmhlaWdodCAvIDIpKSB7XHJcbiAgICAgICAgICAgICAgICBydV95ID0gbWF4WTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJ1X3kgPSBtaW5ZO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDlt6bkuIrln7rngrnjga7luqfmqJnjgavlpInmj5vjgZnjgotcclxuICAgICAgICB4ID0gWmFoeW8ucnVUb2x1WChydV94LCBEZWZpbmUuc3ZnaW1hZ2VzaXplLndpZHRoKTtcclxuICAgICAgICB5ID0gWmFoeW8ucnVUb2x1WShydV95LCBEZWZpbmUuc3ZnaW1hZ2VzaXplLmhlaWdodCk7XHJcblxyXG4gICAgICAgIHJldHVybiBbeCwgeV07XHJcbiAgICB9XHJcblxyXG4gICAgLy9cclxuXHQvLyDjg5zjg4Pjgq/jgrnjgYzjg5njg7zjgrlTVkfjgqTjg6Hjg7zjgrjjga7lpJbjgavlh7rjgarjgYTjgojjgYbjgavjgZnjgotcclxuXHQvL1xyXG5cdGJveG1vdmVzdG9wKHgsIHksIHcsIGgpIHtcclxuICAgICAgICAvLyDlj7PkuIrln7rngrnjga5hcmVh5bqn5qiZ44Gr5aSJ5o+b44GZ44KLXHJcbiAgICAgICAgY29uc3QgYXJlYSA9IFphaHlvLmx1VG9ydUFyZWEoeCwgeSwgdywgaCwgRGVmaW5lLnN2Z2ltYWdlc2l6ZS53aWR0aCwgRGVmaW5lLnN2Z2ltYWdlc2l6ZS5oZWlnaHQpO1xyXG5cclxuICAgICAgICAvLyBTVkfjgqTjg6Hjg7zjgrjjga7kuIDnlarlt6blgbTjga7jgrDjg6rjg4Pjg4njga7luqfmqJnjgpLlvpfjgotcclxuICAgICAgICBsZXQgc2hvLCBncmlkX2x4LCBncmlkX2R5O1xyXG4gICAgICAgIHNobyA9IE1hdGguZmxvb3IoRGVmaW5lLnN2Z2ltYWdlc2l6ZS53aWR0aCAvIERlZmluZS5ncmlkLndpZHRoKTtcclxuICAgICAgICBncmlkX2x4ID0gRGVmaW5lLmdyaWQud2lkdGggKiBzaG87XHJcbiAgICAgICAgLy8gU1ZH44Kk44Oh44O844K444Gu5LiA55Wq5LiL5YG044Gu44Kw44Oq44OD44OJ44Gu5bqn5qiZ44KS5b6X44KLXHJcbiAgICAgICAgc2hvID0gTWF0aC5mbG9vcihEZWZpbmUuc3ZnaW1hZ2VzaXplLmhlaWdodCAvIERlZmluZS5ncmlkLmhlaWdodCk7XHJcbiAgICAgICAgZ3JpZF9keSA9IERlZmluZS5ncmlkLmhlaWdodCAqIHNobztcclxuXHJcblx0XHRpZiAoYXJlYS54IDw9IDApIHtcclxuXHRcdFx0YXJlYS54ID0gMDtcclxuXHRcdH0gZWxzZSBpZiAoYXJlYS54ICsgdyA+PSBncmlkX2x4KSB7XHJcblx0XHRcdGFyZWEueCA9IGdyaWRfbHggLSBhcmVhLnc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG5cdFx0aWYgKGFyZWEueSA8PSAwKSB7XHJcblx0XHRcdGFyZWEueSA9IDA7XHJcblx0XHR9IGVsc2UgaWYgKGFyZWEueSArIGggPj0gZ3JpZF9keSkge1xyXG5cdFx0XHRhcmVhLnkgPSBncmlkX2R5IC0gYXJlYS5oO1xyXG5cdFx0fVxyXG5cclxuICAgICAgICAvLyDlt6bkuIrln7rngrnjga7luqfmqJnjgavlpInmj5vjgZnjgotcclxuICAgICAgICBjb25zdCB6ID0gWmFoeW8ucnVUb2x1QXJlYShhcmVhLngsIGFyZWEueSwgYXJlYS53LCBhcmVhLmgsIERlZmluZS5zdmdpbWFnZXNpemUud2lkdGgsIERlZmluZS5zdmdpbWFnZXNpemUuaGVpZ2h0KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIFt6LngsIHoueV07XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIOODj+ODs+ODieODq+OBjOODmeODvOOCuVNWR+OCpOODoeODvOOCuOOBruWkluOBq+WHuuOBquOBhOOCiOOBhuOBq+OBmeOCi1xyXG4gICAgaGFuZGxlc3RvcCh4LCB5KSB7XHJcbiAgICAgICAgLy8g5Y+z5LiK5Z+654K544Gu5bqn5qiZ44Gr5aSJ5o+b44GZ44KLXHJcbiAgICAgICAgbGV0IHJ4ID0gWmFoeW8ubHVUb3J1WCh4LCBEZWZpbmUuc3ZnaW1hZ2VzaXplLndpZHRoKTtcclxuICAgICAgICBsZXQgcnkgPSBaYWh5by5sdVRvcnVZKHksIERlZmluZS5zdmdpbWFnZXNpemUuaGVpZ2h0KTtcclxuXHJcbiAgICAgICAgLy8gU1ZH44Kk44Oh44O844K444Gu5LiA55Wq5bem5YG044Gu44Kw44Oq44OD44OJ44Gu5bqn5qiZ44KS5b6X44KLXHJcbiAgICAgICAgbGV0IHNobywgZ3JpZF9seCwgZ3JpZF9keTtcclxuICAgICAgICBzaG8gPSBNYXRoLmZsb29yKERlZmluZS5zdmdpbWFnZXNpemUud2lkdGggLyBEZWZpbmUuZ3JpZC53aWR0aCk7XHJcbiAgICAgICAgZ3JpZF9seCA9IERlZmluZS5ncmlkLndpZHRoICogc2hvO1xyXG4gICAgICAgIC8vIFNWR+OCpOODoeODvOOCuOOBruS4gOeVquS4i+WBtOOBruOCsOODquODg+ODieOBruW6p+aomeOCkuW+l+OCi1xyXG4gICAgICAgIHNobyA9IE1hdGguZmxvb3IoRGVmaW5lLnN2Z2ltYWdlc2l6ZS5oZWlnaHQgLyBEZWZpbmUuZ3JpZC5oZWlnaHQpO1xyXG4gICAgICAgIGdyaWRfZHkgPSBEZWZpbmUuZ3JpZC5oZWlnaHQgKiBzaG87XHJcblxyXG5cdFx0aWYgKHJ4IDw9IDApIHtcclxuXHRcdFx0cnggPSAwO1xyXG5cdFx0fSBlbHNlIGlmIChyeCA+PSBncmlkX2x4KSB7XHJcblx0XHRcdHJ4ID0gZ3JpZF9seDtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcblx0XHRpZiAocnkgPD0gMCkge1xyXG5cdFx0XHRyeSA9IDA7XHJcblx0XHR9IGVsc2UgaWYgKHJ5ID49IGdyaWRfZHkpIHtcclxuXHRcdFx0cnkgPSBncmlkX2R5O1xyXG5cdFx0fVxyXG5cclxuICAgICAgICAvLyDlt6bkuIrln7rngrnjga7luqfmqJnjgavlpInmj5vjgZnjgotcclxuICAgICAgICB4ID0gWmFoeW8ucnVUb2x1WChyeCwgRGVmaW5lLnN2Z2ltYWdlc2l6ZS53aWR0aCk7XHJcbiAgICAgICAgeSA9IFphaHlvLnJ1VG9sdVkocnksIERlZmluZS5zdmdpbWFnZXNpemUuaGVpZ2h0KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIFt4LCB5XTtcclxuICAgIH1cclxuXHJcbiAgICAvLyDjg4/jg7Pjg4njg6vjga7jg57jgqbjgrnjg4Djgqbjg7PmmYLjga7lh6bnkIZcclxuICAgIGhhbmRsZU1vdXNlRG93bigpIHtcclxuICAgICAgICAvLyDjg5njg7zjgrnjgq/jg6rjg4Pjgq/jgqTjg5njg7Pjg4jjgpLliYrpmaTjgZnjgotcclxuICAgICAgICB0aGlzLnJlbW92ZUJhc2VDbGlja0V2ZW50KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g44OP44Oz44OJ44Or44GuTW92ZeaZguOBruabtOaWsOWHpueQhlxyXG4gICAgaGFuZGxlTW92ZSh4LCB5LCB3LCBoKSB7XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgIHg6IHgsXHJcbiAgICAgICAgICAgIHk6IHksXHJcbiAgICAgICAgICAgIHc6IHcsXHJcbiAgICAgICAgICAgIGg6IGgsXHJcbiAgICAgICAgICAgIGhhbmRsZV9yZWZyZXNoOiBmYWxzZSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyDjg4/jg7Pjg4njg6vjga7jg57jgqbjgrnjgqLjg4Pjg5fmmYLjga7mm7TmlrDlh6bnkIZcclxuICAgIGhhbmRsZU1vdXNlVXAoKSB7XHJcbiAgICAgICAgLy8g44OZ44O844K544Kv44Oq44OD44Kv44Kk44OZ44Oz44OI44KS55m76Yyy44GZ44KLXHJcbiAgICAgICAgdGhpcy5hZGRCYXNlQ2xpY2tFdmVudCgpO1xyXG5cclxuICAgICAgICAvLyDnp7vli5XntYLkuoblh6bnkIbvvIjlj7PkuIrln7rngrnjga7luqfmqJnjgpLmuKHjgZnvvIlcclxuICAgICAgICBjb25zdCB6ID0gWmFoeW8ubHVUb3J1QXJlYVRvUmVjdCh0aGlzLnN0YXRlLngsXHJcbiAgICAgICAgICAgIHRoaXMuc3RhdGUueSxcclxuICAgICAgICAgICAgdGhpcy5zdGF0ZS53LFxyXG4gICAgICAgICAgICB0aGlzLnN0YXRlLmgsXHJcbiAgICAgICAgICAgIERlZmluZS5zdmdpbWFnZXNpemUud2lkdGgsXHJcbiAgICAgICAgICAgIERlZmluZS5zdmdpbWFnZXNpemUuaGVpZ2h0KTtcclxuXHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgIGhhbmRsZV9yZWZyZXNoOiB0cnVlLFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLnByb3BzLmVuZENoYW5nZVNpemVCb3goe1xyXG4gICAgICAgICAgICBib3hfaWQ6IHRoaXMucHJvcHMuYm94X2lkLFxyXG4gICAgICAgICAgICB4MTogei54MSxcclxuICAgICAgICAgICAgeTE6IHoueTEsXHJcbiAgICAgICAgICAgIHgyOiB6LngyLFxyXG4gICAgICAgICAgICB5Mjogei55MixcclxuICAgICAgICB9KTsgICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8Zz5cclxuICAgICAgICAgICAgICAgIDxyZWN0XHJcbiAgICAgICAgICAgICAgICAgICAgaWQ9e2BzZWxlY3Rib3hfJHt0aGlzLnByb3BzLmJveF9pZH1gfVxyXG4gICAgICAgICAgICAgICAgICAgIHg9e3RoaXMuc3RhdGUueH1cclxuICAgICAgICAgICAgICAgICAgICB5PXt0aGlzLnN0YXRlLnl9XHJcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg9e3RoaXMuc3RhdGUud31cclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ9e3RoaXMuc3RhdGUuaH1cclxuICAgICAgICAgICAgICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxsOiAnYmx1ZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAnMC4zJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZmlsbDogJ25vbmUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJva2U6ICdibHVlJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlV2lkdGg6IDIgKiAxMDAgLyB0aGlzLnByb3BzLnNjYWxlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJzb3I6ICdtb3ZlJyxcclxuICAgICAgICAgICAgICAgICAgICB9fVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpOyAgICAvLyDjgZPjga7jgqTjg5njg7Pjg4jjgpLjgZPjga7jg6zjgqTjg6Tjg7zjgafmraLjgoHjgovjgILkuIvjg6zjgqTjg6Tjg7zjgavjgYLjgovopoHntKDjgavjgqTjg5njg7Pjg4jjgpLotbfjgZPjgZXjgarjgYRcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOyAgICAgLy8g44OW44Op44Km44K25qiZ5rqW5qmf6IO944Gu44Kk44OZ44Oz44OI44KS5oqR5q2i44GZ44KLXHJcbiAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgICAgICBvbk1vdXNlRG93bj17KGUpID0+IHRoaXMubW91c2VEb3duKGUpfVxyXG4gICAgICAgICAgICAgICAgLz5cclxuXHJcbiAgICAgICAgICAgICAgICB7Lyog44Kw44Or44O844OXTm8gKi99XHJcbiAgICAgICAgICAgICAgICA8dGV4dFxyXG4gICAgICAgICAgICAgICAgICAgIHg9e3RoaXMuc3RhdGUueCArIDV9XHJcbiAgICAgICAgICAgICAgICAgICAgeT17dGhpcy5zdGF0ZS55ICsgMjB9XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6IDE1LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJva2U6ICdub25lJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsbDogJ3doaXRlJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6ICcwLjcnLFxyXG4gICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAge3RoaXMucHJvcHMuZ3JvdXBfbm99XHJcbiAgICAgICAgICAgICAgICA8L3RleHQ+XHJcblxyXG4gICAgICAgICAgICAgICAgPEhhbmRsZVVNYXBcclxuICAgICAgICAgICAgICAgICAgICB4PXt0aGlzLnN0YXRlLnh9XHJcbiAgICAgICAgICAgICAgICAgICAgeT17dGhpcy5zdGF0ZS55fVxyXG4gICAgICAgICAgICAgICAgICAgIHc9e3RoaXMuc3RhdGUud31cclxuICAgICAgICAgICAgICAgICAgICBoPXt0aGlzLnN0YXRlLmh9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZVJlZnJlc2g9e3RoaXMuc3RhdGUuaGFuZGxlX3JlZnJlc2h9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGdyaWRzbmFwPXsoeCwgeSkgPT4gdGhpcy5ncmlkc25hcCh4LCB5KX1cclxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVzdG9wPXsoeCwgeSwgdywgaCkgPT4gdGhpcy5oYW5kbGVzdG9wKHgsIHksIHcsIGgpfVxyXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZU1vdXNlRG93bj17KCkgPT4gdGhpcy5oYW5kbGVNb3VzZURvd24oKX1cclxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVNb3ZlPXsoeCwgeSwgdywgaCkgPT4gdGhpcy5oYW5kbGVNb3ZlKHgsIHksIHcsIGgpfVxyXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZU1vdXNlVXA9eygpID0+IHRoaXMuaGFuZGxlTW91c2VVcCgpfVxyXG4gICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgIDxIYW5kbGVMTWFwXHJcbiAgICAgICAgICAgICAgICAgICAgeD17dGhpcy5zdGF0ZS54fVxyXG4gICAgICAgICAgICAgICAgICAgIHk9e3RoaXMuc3RhdGUueX1cclxuICAgICAgICAgICAgICAgICAgICB3PXt0aGlzLnN0YXRlLnd9XHJcbiAgICAgICAgICAgICAgICAgICAgaD17dGhpcy5zdGF0ZS5ofVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVSZWZyZXNoPXt0aGlzLnN0YXRlLmhhbmRsZV9yZWZyZXNofVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBncmlkc25hcD17KHgsIHkpID0+IHRoaXMuZ3JpZHNuYXAoeCwgeSl9XHJcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlc3RvcD17KHgsIHksIHcsIGgpID0+IHRoaXMuaGFuZGxlc3RvcCh4LCB5LCB3LCBoKX1cclxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVNb3VzZURvd249eygpID0+IHRoaXMuaGFuZGxlTW91c2VEb3duKCl9XHJcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlTW92ZT17KHgsIHksIHcsIGgpID0+IHRoaXMuaGFuZGxlTW92ZSh4LCB5LCB3LCBoKX1cclxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVNb3VzZVVwPXsoKSA9PiB0aGlzLmhhbmRsZU1vdXNlVXAoKX1cclxuICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICA8SGFuZGxlUk1hcFxyXG4gICAgICAgICAgICAgICAgICAgIHg9e3RoaXMuc3RhdGUueH1cclxuICAgICAgICAgICAgICAgICAgICB5PXt0aGlzLnN0YXRlLnl9XHJcbiAgICAgICAgICAgICAgICAgICAgdz17dGhpcy5zdGF0ZS53fVxyXG4gICAgICAgICAgICAgICAgICAgIGg9e3RoaXMuc3RhdGUuaH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlUmVmcmVzaD17dGhpcy5zdGF0ZS5oYW5kbGVfcmVmcmVzaH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZ3JpZHNuYXA9eyh4LCB5KSA9PiB0aGlzLmdyaWRzbmFwKHgsIHkpfVxyXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZXN0b3A9eyh4LCB5LCB3LCBoKSA9PiB0aGlzLmhhbmRsZXN0b3AoeCwgeSwgdywgaCl9XHJcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlTW91c2VEb3duPXsoKSA9PiB0aGlzLmhhbmRsZU1vdXNlRG93bigpfVxyXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZU1vdmU9eyh4LCB5LCB3LCBoKSA9PiB0aGlzLmhhbmRsZU1vdmUoeCwgeSwgdywgaCl9XHJcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlTW91c2VVcD17KCkgPT4gdGhpcy5oYW5kbGVNb3VzZVVwKCl9XHJcbiAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgPEhhbmRsZURNYXBcclxuICAgICAgICAgICAgICAgICAgICB4PXt0aGlzLnN0YXRlLnh9XHJcbiAgICAgICAgICAgICAgICAgICAgeT17dGhpcy5zdGF0ZS55fVxyXG4gICAgICAgICAgICAgICAgICAgIHc9e3RoaXMuc3RhdGUud31cclxuICAgICAgICAgICAgICAgICAgICBoPXt0aGlzLnN0YXRlLmh9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZVJlZnJlc2g9e3RoaXMuc3RhdGUuaGFuZGxlX3JlZnJlc2h9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGdyaWRzbmFwPXsoeCwgeSkgPT4gdGhpcy5ncmlkc25hcCh4LCB5KX1cclxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVzdG9wPXsoeCwgeSwgdywgaCkgPT4gdGhpcy5oYW5kbGVzdG9wKHgsIHksIHcsIGgpfVxyXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZU1vdXNlRG93bj17KCkgPT4gdGhpcy5oYW5kbGVNb3VzZURvd24oKX1cclxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVNb3ZlPXsoeCwgeSwgdywgaCkgPT4gdGhpcy5oYW5kbGVNb3ZlKHgsIHksIHcsIGgpfVxyXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZU1vdXNlVXA9eygpID0+IHRoaXMuaGFuZGxlTW91c2VVcCgpfVxyXG4gICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgPC9nPiBcclxuICAgICAgICApXHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcclxuXHJcbmltcG9ydCBTZWxlY3RFZGl0Qm94IGZyb20gJy4vU2VsZWN0RWRpdEJveC5qcyc7XHJcblxyXG5pbXBvcnQge1xyXG4gICAgU1VfU2VsZWN0Qm94X0JveF9Ob25TZWxlY3QsXHJcbiAgICBTVV9TZWxlY3RCb3hfRWRpdEJveF9Nb3ZlRW5kLFxyXG4gICAgU1VfU2VsZWN0Qm94X0VkaXRCb3hfQ2hhbmdlU2l6ZSxcclxuICAgIFNVX1NlbGVjdEJveF9FZGl0Qm94X0RlbGV0ZUtleVByZXNzLFxyXG59IGZyb20gJy4uL2FjdGlvbnNfc3Uvc2VsZWN0Ym94LmpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBTVV9Db250ZXh0TWVudV9DbG9zZSxcclxufSBmcm9tICcuLi9hY3Rpb25zX3N1L2NvbnRleHRtZW51LmpzJztcclxuXHJcblxyXG4vLyBtYXBTdGF0ZVRvUHJvcHNcclxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gKHN0YXRlLCBwcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAuLi5zdGF0ZSxcclxuICAgIH07XHJcbn1cclxuXHJcbi8vIG1hcERpc3BhdGNoVG9Qcm9wc1xyXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHMgPSAoZGlzcGF0Y2gsIHByb3BzKSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGRpc3BhdGNoLFxyXG4gICAgfTtcclxufVxyXG5cclxuLy8gbWVyZ2VQcm9wcyBcclxuY29uc3QgbWVyZ2VQcm9wcyA9IChzdGF0ZSwgZGlzcGF0Y2gsIHByb3BzKSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIC8vIHh4eDogeXl5LFxyXG4gICAgICAgIC8vIG9uWHh4eDogKHh4eCkgPT4ge1xyXG4gICAgICAgIC8vICAgICAuLi4uLlxyXG4gICAgICAgIC8vICAgICBkaXNwYXRjaC5kaXNwYXRjaChTVV9YeHh4eHhfWHh4eHhfWHh4eCgpKTtcclxuICAgICAgICAvLyB9LFxyXG4gICAgICAgIC4uLnByb3BzLFxyXG4gICAgICAgIHNjYWxlOiBzdGF0ZS5zY2FsZSxcclxuXHJcbiAgICAgICAgZW5kTW92ZUJveDogKHBheWxvYWQpID0+IHtcclxuICAgICAgICAgICAgZGlzcGF0Y2guZGlzcGF0Y2goU1VfU2VsZWN0Qm94X0VkaXRCb3hfTW92ZUVuZChwYXlsb2FkKSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbmRDaGFuZ2VTaXplQm94OiAocGF5bG9hZCkgPT4ge1xyXG4gICAgICAgICAgICBkaXNwYXRjaC5kaXNwYXRjaChTVV9TZWxlY3RCb3hfRWRpdEJveF9DaGFuZ2VTaXplKHBheWxvYWQpKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBvbkNsaWNrQmFzZTogKCkgPT4ge1xyXG4gICAgICAgICAgICBkaXNwYXRjaC5kaXNwYXRjaChTVV9TZWxlY3RCb3hfQm94X05vblNlbGVjdCgpKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBzb3phaVJlbW92ZTogKHBheWxvYWQpID0+IHtcclxuICAgICAgICAgICAgZGlzcGF0Y2guZGlzcGF0Y2goU1VfU2VsZWN0Qm94X0VkaXRCb3hfRGVsZXRlS2V5UHJlc3MocGF5bG9hZCkpO1xyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XHJcblxyXG4vLyBjb25uZWN0XHJcbmNvbnN0IFNlbGVjdEVkaXRCb3hNYXAgPSBjb25uZWN0KFxyXG4gICAgbWFwU3RhdGVUb1Byb3BzLFxyXG4gICAgbWFwRGlzcGF0Y2hUb1Byb3BzLFxyXG4gICAgbWVyZ2VQcm9wc1xyXG4pKFNlbGVjdEVkaXRCb3gpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgU2VsZWN0RWRpdEJveE1hcDtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuXHJcbmltcG9ydCBTZWxlY3RFZGl0Qm94TWFwICAgZnJvbSAnLi9TZWxlY3RFZGl0Qm94TWFwLmpzJztcclxuaW1wb3J0IFNlbGVjdEdyb3VwQm94TWFwICBmcm9tICcuL1NlbGVjdEdyb3VwQm94TWFwLmpzJztcclxuaW1wb3J0IFNlbGVjdFNvbm90YUJveE1hcCBmcm9tICcuL1NlbGVjdFNvbm90YUJveE1hcC5qcyc7XHJcblxyXG5jb25zdCBzdHlsZXMgPSB7XHJcblxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VsZWN0Qm94cyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKTtcclxuICAgIH1cclxuXHJcbiAgICBzZWxlY3RBbGxTb25vdGFCb3goKSB7XHJcbiAgICAgICAgbGV0IHNlbGVjdGJveHMgPSBbXTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnByb3BzLmJveHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgc2VsZWN0Ym94cy5wdXNoKFxyXG4gICAgICAgICAgICAgICAgPFNlbGVjdFNvbm90YUJveE1hcFxyXG4gICAgICAgICAgICAgICAgICAgIGJveF9pZD17dGhpcy5wcm9wcy5ib3hzW2ldLmJveF9pZH1cclxuICAgICAgICAgICAgICAgICAgICBncm91cF9pZD17dGhpcy5wcm9wcy5ib3hzW2ldLmdyb3VwX2lkfVxyXG4gICAgICAgICAgICAgICAgICAgIGdyb3VwX25vPXt0aGlzLnByb3BzLmJveHNbaV0uZ3JvdXBfbm99XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZT17dGhpcy5wcm9wcy5ib3hzW2ldLnR5cGV9XHJcbiAgICAgICAgICAgICAgICAgICAgeDE9e3RoaXMucHJvcHMuYm94c1tpXS54MX1cclxuICAgICAgICAgICAgICAgICAgICB5MT17dGhpcy5wcm9wcy5ib3hzW2ldLnkxfVxyXG4gICAgICAgICAgICAgICAgICAgIHgyPXt0aGlzLnByb3BzLmJveHNbaV0ueDJ9XHJcbiAgICAgICAgICAgICAgICAgICAgeTI9e3RoaXMucHJvcHMuYm94c1tpXS55Mn1cclxuICAgICAgICAgICAgICAgIC8+ICAgICAgICAgICBcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHNlbGVjdGJveHM7XHJcbiAgICB9XHJcblxyXG4gICAgc2VsZWN0Qm94KCkge1xyXG4gICAgICAgIGxldCBzZWxlY3Rib3hzID0gW107XHJcbiAgICAgICAgbGV0IGVkaXRib3g7XHJcbiAgICAgICAgXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnByb3BzLmJveHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgLy8g6YG45oqe44GX44Gf44Oc44OD44Kv44K577yI44Ko44OH44Kj44OD44OI44Oc44OD44Kv44K577yJ44Gu5aC05ZCI44Gv44CB6YWN5YiX44Gu5pyA5b6M44Gr6L+95Yqg44GZ44KL44Gf44KB44CB5L+d5a2YXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLmZvY3VzYm94LmJveF9pZCA9PSB0aGlzLnByb3BzLmJveHNbaV0uYm94X2lkKSB7XHJcbiAgICAgICAgICAgICAgICBlZGl0Ym94ID0gKFxyXG4gICAgICAgICAgICAgICAgICAgIDxTZWxlY3RFZGl0Qm94TWFwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJveF9pZD17dGhpcy5wcm9wcy5ib3hzW2ldLmJveF9pZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBfaWQ9e3RoaXMucHJvcHMuYm94c1tpXS5ncm91cF9pZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBfbm89e3RoaXMucHJvcHMuYm94c1tpXS5ncm91cF9ub31cclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT17dGhpcy5wcm9wcy5ib3hzW2ldLnR5cGV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHgxPXt0aGlzLnByb3BzLmJveHNbaV0ueDF9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHkxPXt0aGlzLnByb3BzLmJveHNbaV0ueTF9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHgyPXt0aGlzLnByb3BzLmJveHNbaV0ueDJ9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHkyPXt0aGlzLnByb3BzLmJveHNbaV0ueTJ9XHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIOmBuOaKnuOBl+OBn+ODnOODg+OCr+OCueOBruOCsOODq+ODvOODl+ODnOODg+OCr+OCueOBruWgtOWQiFxyXG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5mb2N1c2JveC5ncm91cF9pZCA9PSB0aGlzLnByb3BzLmJveHNbaV0uZ3JvdXBfaWQpIHtcclxuICAgICAgICAgICAgICAgIHNlbGVjdGJveHMucHVzaChcclxuICAgICAgICAgICAgICAgICAgICA8U2VsZWN0R3JvdXBCb3hNYXBcclxuICAgICAgICAgICAgICAgICAgICAgICAgYm94X2lkPXt0aGlzLnByb3BzLmJveHNbaV0uYm94X2lkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBncm91cF9pZD17dGhpcy5wcm9wcy5ib3hzW2ldLmdyb3VwX2lkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBncm91cF9ubz17dGhpcy5wcm9wcy5ib3hzW2ldLmdyb3VwX25vfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlPXt0aGlzLnByb3BzLmJveHNbaV0udHlwZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgeDE9e3RoaXMucHJvcHMuYm94c1tpXS54MX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgeTE9e3RoaXMucHJvcHMuYm94c1tpXS55MX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgeDI9e3RoaXMucHJvcHMuYm94c1tpXS54Mn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgeTI9e3RoaXMucHJvcHMuYm94c1tpXS55Mn1cclxuICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8g44Gd44Gu5LuW44Gu44Oc44OD44Kv44K544Gu5aC05ZCIXHJcbiAgICAgICAgICAgIHNlbGVjdGJveHMucHVzaChcclxuICAgICAgICAgICAgICAgIDxTZWxlY3RTb25vdGFCb3hNYXBcclxuICAgICAgICAgICAgICAgICAgICBib3hfaWQ9e3RoaXMucHJvcHMuYm94c1tpXS5ib3hfaWR9XHJcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXBfaWQ9e3RoaXMucHJvcHMuYm94c1tpXS5ncm91cF9pZH1cclxuICAgICAgICAgICAgICAgICAgICBncm91cF9ubz17dGhpcy5wcm9wcy5ib3hzW2ldLmdyb3VwX25vfVxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU9e3RoaXMucHJvcHMuYm94c1tpXS50eXBlfVxyXG4gICAgICAgICAgICAgICAgICAgIHgxPXt0aGlzLnByb3BzLmJveHNbaV0ueDF9XHJcbiAgICAgICAgICAgICAgICAgICAgeTE9e3RoaXMucHJvcHMuYm94c1tpXS55MX1cclxuICAgICAgICAgICAgICAgICAgICB4Mj17dGhpcy5wcm9wcy5ib3hzW2ldLngyfVxyXG4gICAgICAgICAgICAgICAgICAgIHkyPXt0aGlzLnByb3BzLmJveHNbaV0ueTJ9XHJcbiAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8g44Ko44OH44Kj44OD44OI44Oc44OD44Kv44K544KS5pyA5b6M44Gr6L+95Yqg44GZ44KLXHJcbiAgICAgICAgc2VsZWN0Ym94cy5wdXNoKGVkaXRib3gpO1xyXG5cclxuICAgICAgICByZXR1cm4gc2VsZWN0Ym94cztcclxuICAgIH1cclxuXHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGxldCBzZWxlY3Rib3hzO1xyXG4gICAgICAgIGlmICh0aGlzLnByb3BzLmZvY3VzYm94LmJveF9pZCA9PSAnJykge1xyXG4gICAgICAgICAgICBzZWxlY3Rib3hzID0gdGhpcy5zZWxlY3RBbGxTb25vdGFCb3goKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBzZWxlY3Rib3hzID0gdGhpcy5zZWxlY3RCb3goKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxnPlxyXG4gICAgICAgICAgICAgICAge3NlbGVjdGJveHN9XHJcbiAgICAgICAgICAgIDwvZz4gICAgICAgICAgICBcclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XHJcblxyXG5pbXBvcnQgU2VsZWN0Qm94cyBmcm9tICcuL1NlbGVjdEJveHMuanMnO1xyXG5cclxuLy8gaW1wb3J0IHtcclxuLy8gICAgIFNVX1NlbGVjdEJveF9Cb3hfU2VsZWN0LFxyXG4vLyB9IGZyb20gJy4uL2FjdGlvbnNfc3Uvc2VsZWN0Ym94LmpzJztcclxuXHJcblxyXG4vLyBtYXBTdGF0ZVRvUHJvcHNcclxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gKHN0YXRlLCBwcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAuLi5zdGF0ZSxcclxuICAgIH07XHJcbn1cclxuXHJcbi8vIG1hcERpc3BhdGNoVG9Qcm9wc1xyXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHMgPSAoZGlzcGF0Y2gsIHByb3BzKSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGRpc3BhdGNoLFxyXG4gICAgfTtcclxufVxyXG5cclxuLy8gbWVyZ2VQcm9wcyBcclxuY29uc3QgbWVyZ2VQcm9wcyA9IChzdGF0ZSwgZGlzcGF0Y2gsIHByb3BzKSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIC8vIHh4eDogeXl5LFxyXG4gICAgICAgIC8vIG9uWHh4eDogKHh4eCkgPT4ge1xyXG4gICAgICAgIC8vICAgICAuLi4uLlxyXG4gICAgICAgIC8vICAgICBkaXNwYXRjaC5kaXNwYXRjaChTVV9YeHh4eHhfWHh4eHhfWHh4eCgpKTtcclxuICAgICAgICAvLyB9LFxyXG4gICAgICAgIC8vIC4uLnByb3BzLFxyXG4gICAgICAgIGJveHM6IHN0YXRlLmJveHMsXHJcbiAgICAgICAgZm9jdXNib3g6IHN0YXRlLmZvY3VzYm94LFxyXG4gICAgfTtcclxufVxyXG5cclxuLy8gY29ubmVjdFxyXG5jb25zdCBTZWxlY3RCb3hzTWFwID0gY29ubmVjdChcclxuICAgIG1hcFN0YXRlVG9Qcm9wcyxcclxuICAgIG1hcERpc3BhdGNoVG9Qcm9wcyxcclxuICAgIG1lcmdlUHJvcHNcclxuKShTZWxlY3RCb3hzKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNlbGVjdEJveHNNYXA7XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcblxyXG5pbXBvcnQgeyBEZWZpbmUgfSBmcm9tICcuLi9kZWZpbmUuanMnO1xyXG5pbXBvcnQgeyBaYWh5byB9IGZyb20gJy4uL2xpYnMvemFoeW8uanMnO1xyXG5cclxuY29uc3Qgc3R5bGVzID0ge1xyXG5cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExpbmVzIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZyBpZD17dGhpcy5wcm9wcy5pZH0+XHJcbiAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5saW5lcy5tYXAoKGxpbmUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGxpbmUudHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3JlY3QnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByeiA9IFphaHlvLnJ1VG9sdVJlY3RUb0FyZWEobGluZS54MSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmUueTEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lLngyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZS55MixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlZmluZS5zdmdpbWFnZXNpemUud2lkdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWZpbmUuc3ZnaW1hZ2VzaXplLmhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cmVjdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHg9e3J6Lnh9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeT17cnoueX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aD17cnoud31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ9e3J6Lmh9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiBsaW5lLmNvbG9yLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJva2VXaWR0aDogbGluZS53aWR0aCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbDogJ25vbmUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdsaW5lJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbHogPSBaYWh5by5ydVRvbHVSZWN0KGxpbmUueDEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lLnkxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZS54MixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmUueTIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWZpbmUuc3ZnaW1hZ2VzaXplLndpZHRoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVmaW5lLnN2Z2ltYWdlc2l6ZS5oZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpbmVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MT17bHoueDF9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeTE9e2x6LnkxfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgyPXtsei54Mn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5Mj17bHoueTJ9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiBsaW5lLmNvbG9yLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJva2VXaWR0aDogbGluZS53aWR0aCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbDogJ25vbmUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pfVxyXG4gICAgICAgICAgICA8L2c+ICAgICAgICAgICAgXHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XHJcblxyXG5pbXBvcnQgTGluZXMgZnJvbSAnLi9MaW5lcy5qcyc7XHJcblxyXG4vLyBtYXBTdGF0ZVRvUHJvcHNcclxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gKHN0YXRlLCBwcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAuLi5zdGF0ZSxcclxuICAgIH07XHJcbn1cclxuXHJcbi8vIG1hcERpc3BhdGNoVG9Qcm9wc1xyXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHMgPSAoZGlzcGF0Y2gsIHByb3BzKSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGRpc3BhdGNoLFxyXG4gICAgfTtcclxufVxyXG5cclxuLy8gbWVyZ2VQcm9wcyBcclxuY29uc3QgbWVyZ2VQcm9wcyA9IChzdGF0ZSwgZGlzcGF0Y2gsIHByb3BzKSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIC8vIHh4eDogeXl5LFxyXG4gICAgICAgIC8vIG9uWHh4eDogKHh4eCkgPT4ge1xyXG4gICAgICAgIC8vICAgICAuLi4uLlxyXG4gICAgICAgIC8vICAgICBkaXNwYXRjaC5kaXNwYXRjaChTVV9YeHh4eHhfWHh4eHhfWHh4eCgpKTtcclxuICAgICAgICAvLyB9LFxyXG4gICAgICAgIC4uLnByb3BzLFxyXG4gICAgICAgIGxpbmVzOiBzdGF0ZS5saW5lcyxcclxuICAgIH07XHJcbn1cclxuXHJcbi8vIGNvbm5lY3RcclxuY29uc3QgTGluZXNNYXAgPSBjb25uZWN0KFxyXG4gICAgbWFwU3RhdGVUb1Byb3BzLFxyXG4gICAgbWFwRGlzcGF0Y2hUb1Byb3BzLFxyXG4gICAgbWVyZ2VQcm9wc1xyXG4pKExpbmVzKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IExpbmVzTWFwO1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5cclxuaW1wb3J0IHsgWmFoeW8gfSBmcm9tICcuLi9saWJzL3phaHlvLmpzJztcclxuXHJcbmNvbnN0IHN0eWxlcyA9IHtcclxuICAgIGNvbnRhaW5lcjoge1xyXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3llbGxvdycsXHJcbiAgICB9LFxyXG59OyBcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEltYWdlQm94IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG4gICAgfVxyXG5cclxuICAgIGJveCgpIHtcclxuICAgICAgICBpZiAodGhpcy5wcm9wcy5lZGl0b25vZmYgPT0gJ29mZicpIHtcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8cmVjdFxyXG4gICAgICAgICAgICAgICAgeD1cIjBcIlxyXG4gICAgICAgICAgICAgICAgeT1cIjBcIlxyXG4gICAgICAgICAgICAgICAgd2lkdGg9e3RoaXMucHJvcHMud2lkdGh9XHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ9e3RoaXMucHJvcHMuaGVpZ2h0fVxyXG4gICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICBzdHJva2U6ICdub25lJyxcclxuICAgICAgICAgICAgICAgICAgICBmaWxsOiAnbGlnaHRjeWFuJyxcclxuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAnMC41JyxcclxuICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgIC8+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG5cclxuICAgIGltYWdlKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxpbWFnZVxyXG4gICAgICAgICAgICAgICAgeD1cIjBcIlxyXG4gICAgICAgICAgICAgICAgeT1cIjBcIlxyXG4gICAgICAgICAgICAgICAgd2lkdGg9e3RoaXMucHJvcHMud2lkdGh9XHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ9e3RoaXMucHJvcHMuaGVpZ2h0fVxyXG4gICAgICAgICAgICAgICAgeGxpbmtIcmVmPXt0aGlzLnByb3BzLmltYWdlVXJsfVxyXG4gICAgICAgICAgICAgICAgcHJlc2VydmVBc3BlY3RSYXRpbz17J3hNaWRZTWlkIG1lZXQnfVxyXG4gICAgICAgICAgICAvPlxyXG4gICAgICAgIClcclxuICAgIH1cclxuXHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxnXHJcbiAgICAgICAgICAgICAgICBpZD17dGhpcy5wcm9wcy5ib3hfaWR9XHJcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm09e2B0cmFuc2xhdGUoJHt0aGlzLnByb3BzLnh9LCR7dGhpcy5wcm9wcy55fSlgfVxyXG4gICAgICAgICAgICAgICAgd2lkdGg9e3RoaXMucHJvcHMud2lkdGh9XHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ9e3RoaXMucHJvcHMuaGVpZ2h0fVxyXG4gICAgICAgICAgICAgICAgc3R5bGU9e3N0eWxlcy5jb250YWluZXJ9XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIHsvKiDjgqTjg6Hjg7zjgrjjg5zjg4Pjgq/jgrnjga7og4zmma8gKi99XHJcbiAgICAgICAgICAgICAgICB7dGhpcy5ib3goKX1cclxuXHJcbiAgICAgICAgICAgICAgICB7Lyog44Kk44Oh44O844K4ICovfVxyXG4gICAgICAgICAgICAgICAge3RoaXMuaW1hZ2UoKX1cclxuICAgICAgICAgICAgPC9nPlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnO1xyXG5cclxuaW1wb3J0IEltYWdlQm94IGZyb20gJy4vSW1hZ2VCb3guanMnO1xyXG5cclxuXHJcbi8vIG1hcFN0YXRlVG9Qcm9wc1xyXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSAoc3RhdGUsIHByb3BzKSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIC4uLnN0YXRlLFxyXG4gICAgfTtcclxufVxyXG5cclxuLy8gbWFwRGlzcGF0Y2hUb1Byb3BzXHJcbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcyA9IChkaXNwYXRjaCwgcHJvcHMpID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZGlzcGF0Y2gsXHJcbiAgICB9O1xyXG59XHJcblxyXG4vLyBtZXJnZVByb3BzIFxyXG5jb25zdCBtZXJnZVByb3BzID0gKHN0YXRlLCBkaXNwYXRjaCwgcHJvcHMpID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgLy8geHh4OiB5eXksXHJcbiAgICAgICAgLy8gb25YeHh4OiAoeHh4KSA9PiB7XHJcbiAgICAgICAgLy8gICAgIC4uLi4uXHJcbiAgICAgICAgLy8gICAgIGRpc3BhdGNoLmRpc3BhdGNoKFNVX1h4eHh4eF9YeHh4eF9YeHh4KCkpO1xyXG4gICAgICAgIC8vIH0sXHJcbiAgICAgICAgLi4ucHJvcHMsXHJcbiAgICAgICAgZWRpdG9ub2ZmOiBzdGF0ZS5lZGl0b25vZmYsXHJcbiAgICB9O1xyXG59XHJcblxyXG4vLyBjb25uZWN0XHJcbmNvbnN0IEltYWdlQm94TWFwID0gY29ubmVjdChcclxuICAgIG1hcFN0YXRlVG9Qcm9wcyxcclxuICAgIG1hcERpc3BhdGNoVG9Qcm9wcyxcclxuICAgIG1lcmdlUHJvcHNcclxuKShJbWFnZUJveCk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBJbWFnZUJveE1hcDtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuXHJcbmltcG9ydCB7IFphaHlvIH0gZnJvbSAnLi4vbGlicy96YWh5by5qcyc7XHJcblxyXG5pbXBvcnQgeyBGb250IH0gZnJvbSAnLi4vZGVmaW5lLmpzJztcclxuXHJcbmNvbnN0IHN0eWxlcyA9IHtcclxuICAgIGNvbnRhaW5lcjoge1xyXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3llbGxvdycsXHJcbiAgICB9LFxyXG59OyBcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRleHRCb3ggZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcbiAgICB9XHJcblxyXG4gICAgYm94KCkge1xyXG4gICAgICAgIGlmICh0aGlzLnByb3BzLmVkaXRvbm9mZiA9PSAnb2ZmJykge1xyXG4gICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8cmVjdFxyXG4gICAgICAgICAgICAgICAgeD1cIjBcIlxyXG4gICAgICAgICAgICAgICAgeT1cIjBcIlxyXG4gICAgICAgICAgICAgICAgd2lkdGg9e3RoaXMucHJvcHMud2lkdGh9XHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ9e3RoaXMucHJvcHMuaGVpZ2h0fVxyXG4gICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICBzdHJva2U6ICdub25lJyxcclxuICAgICAgICAgICAgICAgICAgICBmaWxsOiAnbGlnaHR5ZWxsb3cnLFxyXG4gICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6ICcwLjUnLFxyXG4gICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgLz5cclxuICAgICAgICApXHJcbiAgICB9XHJcblxyXG4gICAgdGV4dGdyaWQoKSB7XHJcbiAgICAgICAgbGV0IGFyeSA9IFtdO1xyXG4gICAgICAgIGxldCB4LCB5O1xyXG5cclxuICAgICAgICBpZiAodGhpcy5wcm9wcy5lZGl0b25vZmYgPT0gJ29mZicpIHtcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnByb3BzLnRleHQuZ3JpZC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBsZXQgY2osIGNnLCB4LCB5LCBzaXplX3gsIHNpemVfeTtcclxuICAgICAgICAgICAgY2ogPSB0aGlzLnByb3BzLnRleHQuZ3JpZFtpXVswXTtcclxuICAgICAgICAgICAgY2cgPSB0aGlzLnByb3BzLnRleHQuZ3JpZFtpXVsxXTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLnRleHQua3VtaWhva28gPT0gJ3RhdGUnKSB7XHJcbiAgICAgICAgICAgICAgICB4ID0gWmFoeW8ucnVUb2x1WChjZywgdGhpcy5wcm9wcy53aWR0aCk7XHJcbiAgICAgICAgICAgICAgICB5ID0gWmFoeW8ucnVUb2x1WShjaiwgdGhpcy5wcm9wcy5oZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgc2l6ZV94ID0gdGhpcy5wcm9wcy50ZXh0LnNpemVfZztcclxuICAgICAgICAgICAgICAgIHNpemVfeSA9IHRoaXMucHJvcHMudGV4dC5zaXplX2o7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB4ID0gY2o7XHJcbiAgICAgICAgICAgICAgICB5ID0gY2c7XHJcbiAgICAgICAgICAgICAgICBzaXplX3ggPSB0aGlzLnByb3BzLnRleHQuc2l6ZV9qO1xyXG4gICAgICAgICAgICAgICAgc2l6ZV95ID0gdGhpcy5wcm9wcy50ZXh0LnNpemVfZztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgYXJ5LnB1c2goXHJcbiAgICAgICAgICAgICAgICA8cmVjdFxyXG4gICAgICAgICAgICAgICAgICAgIHg9e3ggLSAoc2l6ZV94IC8gMil9XHJcbiAgICAgICAgICAgICAgICAgICAgeT17eSAtIChzaXplX3kgLyAyKX1cclxuICAgICAgICAgICAgICAgICAgICB3aWR0aD17c2l6ZV94fVxyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodD17c2l6ZV95fVxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZTogJ2xpZ2h0Z3JheScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZVdpZHRoOiAnMScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw6ICdub25lJyxcclxuICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBhcnk7XHJcbiAgICB9XHJcblxyXG4gICAgdGV4dCgpIHtcclxuICAgICAgICBsZXQgYXJ5ID0gW107XHJcbiAgICAgICAgbGV0IHgsIHk7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5wcm9wcy50ZXh0LnJlc3VsdC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBsZXQgY2osIGNnLCB4LCB5LCBzaXplX3gsIHNpemVfeTtcclxuICAgICAgICAgICAgY2ogPSB0aGlzLnByb3BzLnRleHQucmVzdWx0W2ldLmo7XHJcbiAgICAgICAgICAgIGNnID0gdGhpcy5wcm9wcy50ZXh0LnJlc3VsdFtpXS5nO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMudGV4dC5rdW1paG9rbyA9PSAndGF0ZScpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLnRleHQucmVzdWx0W2ldLnNpemVfZyA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2l6ZV94ID0gdGhpcy5wcm9wcy50ZXh0LnNpemVfZztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2l6ZV94ID0gdGhpcy5wcm9wcy50ZXh0LnJlc3VsdFtpXS5zaXplX2c7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wcm9wcy50ZXh0LnJlc3VsdFtpXS5zaXplX2ogPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNpemVfeSA9IHRoaXMucHJvcHMudGV4dC5zaXplX2o7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHNpemVfeSA9IHRoaXMucHJvcHMudGV4dC5yZXN1bHRbaV0uc2l6ZV9qO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHggPSBaYWh5by5ydVRvbHVYKGNnLCB0aGlzLnByb3BzLndpZHRoKTtcclxuICAgICAgICAgICAgICAgIHkgPSBaYWh5by5ydVRvbHVZKGNqLCB0aGlzLnByb3BzLmhlaWdodCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wcm9wcy50ZXh0LnJlc3VsdFtpXS5zaXplX2ogPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNpemVfeCA9IHRoaXMucHJvcHMudGV4dC5zaXplX2o7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHNpemVfeCA9IHRoaXMucHJvcHMudGV4dC5yZXN1bHRbaV0uc2l6ZV9qO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMudGV4dC5yZXN1bHRbaV0uc2l6ZV9nID09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBzaXplX3kgPSB0aGlzLnByb3BzLnRleHQuc2l6ZV9nO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBzaXplX3kgPSB0aGlzLnByb3BzLnRleHQucmVzdWx0W2ldLnNpemVfZztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB4ID0gY2o7XHJcbiAgICAgICAgICAgICAgICB5ID0gY2c7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGJhc2VzaXplID0gKHNpemVfeCA+IHNpemVfeSkgPyBzaXplX3ggOiBzaXplX3k7XHJcbiAgICAgICAgICAgIGxldCByb3RhdGUgPSAwO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy50ZXh0Lmt1bWlob2tvID09ICd0YXRlJykge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLnByb3BzLnRleHQucmVzdWx0W2ldLm1vamkpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ+OAjCc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICfjgI0nOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAn77yIJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ++8iSc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICfjg7wnOlxyXG4gICAgICAgICAgICAgICAgICAgIHJvdGF0ZSA9IDkwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBhcnkucHVzaChcclxuICAgICAgICAgICAgICAgIDx0ZXh0XHJcbiAgICAgICAgICAgICAgICAgICAgLy8geD17eCAtIChzaXplX3ggLyAyKX1cclxuICAgICAgICAgICAgICAgICAgICAvLyB5PXt5ICsgKHNpemVfeSAvIDIpIC0gKHNpemVfeSAqIDEyLjUgLyAxMDAuMCl9XHJcbiAgICAgICAgICAgICAgICAgICAgeD17LTEgKiAoYmFzZXNpemUgLyAyKX1cclxuICAgICAgICAgICAgICAgICAgICB5PXsoYmFzZXNpemUgLyAyKSAtIChiYXNlc2l6ZSAqIDEyLjUgLyAxMDAuMCl9XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZm9udFNpemU6IHNpemVfeCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6IGJhc2VzaXplLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJva2U6ICdub25lJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsbDogJyMzMzMzMzMnLFxyXG4gICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtPXtgdHJhbnNsYXRlKCR7eH0sICR7eX0pIHNjYWxlKCR7c2l6ZV94IC8gYmFzZXNpemV9LCAke3NpemVfeSAvIGJhc2VzaXplfSkgcm90YXRlKCR7cm90YXRlfSlgfVxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIHt0aGlzLnByb3BzLnRleHQucmVzdWx0W2ldLm1vaml9XHJcbiAgICAgICAgICAgICAgICA8L3RleHQ+XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gYXJ5O1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGdcclxuICAgICAgICAgICAgICAgIGlkPXtgYm94XyR7dGhpcy5wcm9wcy5ib3hfaWR9YH1cclxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybT17YHRyYW5zbGF0ZSgke3RoaXMucHJvcHMueH0sJHt0aGlzLnByb3BzLnl9KWB9XHJcbiAgICAgICAgICAgICAgICB3aWR0aD17dGhpcy5wcm9wcy53aWR0aH1cclxuICAgICAgICAgICAgICAgIGhlaWdodD17dGhpcy5wcm9wcy5oZWlnaHR9XHJcbiAgICAgICAgICAgICAgICBzdHlsZT17c3R5bGVzLmNvbnRhaW5lcn1cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgey8qIOODhuOCreOCueODiOODnOODg+OCr+OCueOBruiDjOaZryAqL31cclxuICAgICAgICAgICAgICAgIHt0aGlzLmJveCgpfVxyXG5cclxuICAgICAgICAgICAgICAgIHsvKiDjg4bjgq3jgrnjg4jjgrDjg6rjg4Pjg4kgKi99XHJcbiAgICAgICAgICAgICAgICB7dGhpcy50ZXh0Z3JpZCgpfVxyXG5cclxuICAgICAgICAgICAgICAgIHsvKiDjg4bjgq3jgrnjg4ggKi99XHJcbiAgICAgICAgICAgICAgICA8Z1xyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEZvbnQuZm9udFt0aGlzLnByb3BzLnRleHQuZm9udCAtIDFdLFxyXG4gICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAge3RoaXMudGV4dCgpfVxyXG4gICAgICAgICAgICAgICAgPC9nPlxyXG4gICAgICAgICAgICA8L2c+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnO1xyXG5cclxuaW1wb3J0IFRleHRCb3ggZnJvbSAnLi9UZXh0Qm94LmpzJztcclxuXHJcblxyXG4vLyBtYXBTdGF0ZVRvUHJvcHNcclxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gKHN0YXRlLCBwcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAuLi5zdGF0ZSxcclxuICAgIH07XHJcbn1cclxuXHJcbi8vIG1hcERpc3BhdGNoVG9Qcm9wc1xyXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHMgPSAoZGlzcGF0Y2gsIHByb3BzKSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGRpc3BhdGNoLFxyXG4gICAgfTtcclxufVxyXG5cclxuLy8gbWVyZ2VQcm9wcyBcclxuY29uc3QgbWVyZ2VQcm9wcyA9IChzdGF0ZSwgZGlzcGF0Y2gsIHByb3BzKSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIC8vIHh4eDogeXl5LFxyXG4gICAgICAgIC8vIG9uWHh4eDogKHh4eCkgPT4ge1xyXG4gICAgICAgIC8vICAgICAuLi4uLlxyXG4gICAgICAgIC8vICAgICBkaXNwYXRjaC5kaXNwYXRjaChTVV9YeHh4eHhfWHh4eHhfWHh4eCgpKTtcclxuICAgICAgICAvLyB9LFxyXG4gICAgICAgIC4uLnByb3BzLFxyXG4gICAgICAgIGVkaXRvbm9mZjogc3RhdGUuZWRpdG9ub2ZmLFxyXG4gICAgICAgIGRhbmRkOiBzdGF0ZS5kYW5kZCxcclxuICAgIH07XHJcbn1cclxuXHJcbi8vIGNvbm5lY3RcclxuY29uc3QgVGV4dEJveE1hcCA9IGNvbm5lY3QoXHJcbiAgICBtYXBTdGF0ZVRvUHJvcHMsXHJcbiAgICBtYXBEaXNwYXRjaFRvUHJvcHMsXHJcbiAgICBtZXJnZVByb3BzXHJcbikoVGV4dEJveCk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBUZXh0Qm94TWFwO1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5cclxuaW1wb3J0IFRleHRCb3hNYXAgZnJvbSAnLi9UZXh0Qm94TWFwLmpzJztcclxuaW1wb3J0IEltYWdlQm94TWFwIGZyb20gJy4vSW1hZ2VCb3hNYXAuanMnO1xyXG5cclxuaW1wb3J0IHsgRGVmaW5lIH0gZnJvbSAnLi4vZGVmaW5lLmpzJztcclxuaW1wb3J0IHsgWmFoeW8gfSBmcm9tICcuLi9saWJzL3phaHlvLmpzJztcclxuXHJcbmNvbnN0IHN0eWxlcyA9IHtcclxuXHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCb3hzIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZyBpZD17dGhpcy5wcm9wcy5pZH0+XHJcbiAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5ib3hzLm1hcCgoYm94KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeiA9IFphaHlvLnJ1VG9sdVJlY3RUb0FyZWEoYm94LngxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJveC55MSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3gueDIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm94LnkyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlZmluZS5zdmdpbWFnZXNpemUud2lkdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVmaW5lLnN2Z2ltYWdlc2l6ZS5oZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoYm94LnR5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICd0ZXh0JzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGFmdXJlID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB4LCB5O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYm94LnRleHQuYWZ1cmUgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYm94LnRleHQua3VtaWhva28gPT0gJ3RhdGUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeCA9IHoueDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5ID0gei55ICsgei5oO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4ID0gei54ICsgei53IC0gMTU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeSA9IHoueSArIHouaDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZnVyZSA9IDx0ZXh0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4PXt4fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeT17eX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6IDExLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZTogJ25vbmUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw6ICdyZWQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6ICcwLjgnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2JveC50ZXh0LmFmdXJlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RleHQ+O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5lZGl0b25vZmYgPT0gJ29mZicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFmdXJlID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Zz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VGV4dEJveE1hcFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3hfaWQ9e2JveC5ib3hfaWR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwX2lkPXtib3guZ3JvdXBfaWR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwX25vPXtib3guZ3JvdXBfbm99XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHg9e3oueH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeT17ei55fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aD17ei53fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ9e3ouaH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ9e2JveC50ZXh0fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2FmdXJlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9nPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdpbWFnZSc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SW1hZ2VCb3hNYXBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3hfaWQ9e2JveC5ib3hfaWR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBfaWQ9e2JveC5ncm91cF9pZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBncm91cF9ubz17Ym94Lmdyb3VwX25vfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHg9e3oueH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5PXt6Lnl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg9e3oud31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ9e3ouaH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VVcmw9e2JveC5pbWFnZS51cmx9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pfVxyXG4gICAgICAgICAgICA8L2c+ICAgICAgICAgICAgXHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcclxuXHJcbmltcG9ydCBCb3hzIGZyb20gJy4vQm94cy5qcyc7XHJcblxyXG4vLyBtYXBTdGF0ZVRvUHJvcHNcclxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gKHN0YXRlLCBwcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAuLi5zdGF0ZSxcclxuICAgIH07XHJcbn1cclxuXHJcbi8vIG1hcERpc3BhdGNoVG9Qcm9wc1xyXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHMgPSAoZGlzcGF0Y2gsIHByb3BzKSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGRpc3BhdGNoLFxyXG4gICAgfTtcclxufVxyXG5cclxuLy8gbWVyZ2VQcm9wcyBcclxuY29uc3QgbWVyZ2VQcm9wcyA9IChzdGF0ZSwgZGlzcGF0Y2gsIHByb3BzKSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIC8vIHh4eDogeXl5LFxyXG4gICAgICAgIC8vIG9uWHh4eDogKHh4eCkgPT4ge1xyXG4gICAgICAgIC8vICAgICAuLi4uLlxyXG4gICAgICAgIC8vICAgICBkaXNwYXRjaC5kaXNwYXRjaChTVV9YeHh4eHhfWHh4eHhfWHh4eCgpKTtcclxuICAgICAgICAvLyB9LFxyXG4gICAgICAgIC4uLnByb3BzLFxyXG4gICAgICAgIGJveHM6IHN0YXRlLmJveHMsXHJcbiAgICAgICAgZWRpdG9ub2ZmOiBzdGF0ZS5lZGl0b25vZmYsXHJcbiAgICB9O1xyXG59XHJcblxyXG4vLyBjb25uZWN0XHJcbmNvbnN0IEJveHNNYXAgPSBjb25uZWN0KFxyXG4gICAgbWFwU3RhdGVUb1Byb3BzLFxyXG4gICAgbWFwRGlzcGF0Y2hUb1Byb3BzLFxyXG4gICAgbWVyZ2VQcm9wc1xyXG4pKEJveHMpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgQm94c01hcDtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuXHJcbmltcG9ydCB7IFphaHlvIH0gZnJvbSAnLi4vbGlicy96YWh5by5qcyc7XHJcbmltcG9ydCB7IERlZmluZSB9IGZyb20gJy4uL2RlZmluZS5qcyc7XHJcblxyXG5jb25zdCBzdHlsZXMgPSB7XHJcblxyXG59O1xyXG5cclxuY29uc3QgY29sXzEgPSAnI2Y5ZjlmOSc7XHJcbmNvbnN0IGNvbF8yID0gJyNlZmVmZjknO1xyXG5jb25zdCBjb2xfMyA9ICcjZjllZmVmJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdyaWQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG5cclxuICAgIHlva29rZWkoKSB7XHJcbiAgICAgICAgbGV0IGh0bWwgPSBbXTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgeSA9IDA7IHkgPD0gdGhpcy5wcm9wcy5oZWlnaHQ7IHkgKz0gRGVmaW5lLmdyaWQuaGVpZ2h0KSB7XHJcbiAgICAgICAgICAgIGxldCBsdyA9IDEgKiAxMDAgLyB0aGlzLnByb3BzLnNjYWxlO1xyXG4gICAgICAgICAgICBsZXQgY29sID0gY29sXzE7XHJcbiAgICAgICAgICAgIGlmICh5ICUgKERlZmluZS5ncmlkLmhlaWdodCAqIDUpID09IDApIHtcclxuICAgICAgICAgICAgICAgIGx3ID0gMiAqIDEwMCAvIHRoaXMucHJvcHMuc2NhbGU7XHJcbiAgICAgICAgICAgICAgICBjb2wgPSBjb2xfMjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoeSAlIChEZWZpbmUuZ3JpZC5oZWlnaHQgKiAxMCkgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgbHcgPSAzICogMTAwLyB0aGlzLnByb3BzLnNjYWxlO1xyXG4gICAgICAgICAgICAgICAgY29sID0gY29sXzM7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGh0bWwucHVzaChcclxuICAgICAgICAgICAgICAgIDxsaW5lXHJcbiAgICAgICAgICAgICAgICAgICAgeDE9ezB9XHJcbiAgICAgICAgICAgICAgICAgICAgeTE9e1phaHlvLmx1VG9ydVkoeSwgdGhpcy5wcm9wcy5oZWlnaHQpfVxyXG4gICAgICAgICAgICAgICAgICAgIHgyPXt0aGlzLnByb3BzLndpZHRofVxyXG4gICAgICAgICAgICAgICAgICAgIHkyPXtaYWh5by5sdVRvcnVZKHksIHRoaXMucHJvcHMuaGVpZ2h0KX1cclxuICAgICAgICAgICAgICAgICAgICBzdHJva2VXaWR0aD17bHd9XHJcbiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlPXtjb2x9XHJcbiAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGh0bWw7XHJcbiAgICB9XHJcblxyXG4gICAgdGF0ZWtlaSgpIHtcclxuICAgICAgICBsZXQgaHRtbCA9IFtdO1xyXG5cclxuICAgICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IHRoaXMucHJvcHMud2lkdGg7IHggKz0gRGVmaW5lLmdyaWQud2lkdGgpIHtcclxuICAgICAgICAgICAgbGV0IGx3ID0gMSAqIDEwMCAvIHRoaXMucHJvcHMuc2NhbGU7XHJcbiAgICAgICAgICAgIGxldCBjb2wgPSBjb2xfMTtcclxuICAgICAgICAgICAgaWYgKHggJSAoRGVmaW5lLmdyaWQud2lkdGggKiA1KSA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBsdyA9IDIgKiAxMDAgLyB0aGlzLnByb3BzLnNjYWxlO1xyXG4gICAgICAgICAgICAgICAgY29sID0gY29sXzI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHggJSAoRGVmaW5lLmdyaWQud2lkdGggKiAxMCkgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgbHcgPSAzICogMTAwIC8gdGhpcy5wcm9wcy5zY2FsZTtcclxuICAgICAgICAgICAgICAgIGNvbCA9IGNvbF8zO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBodG1sLnB1c2goXHJcbiAgICAgICAgICAgICAgICA8bGluZVxyXG4gICAgICAgICAgICAgICAgICAgIHgxPXtaYWh5by5sdVRvcnVYKHgsIHRoaXMucHJvcHMud2lkdGgpfVxyXG4gICAgICAgICAgICAgICAgICAgIHkxPXswfVxyXG4gICAgICAgICAgICAgICAgICAgIHgyPXtaYWh5by5sdVRvcnVYKHgsIHRoaXMucHJvcHMud2lkdGgpfVxyXG4gICAgICAgICAgICAgICAgICAgIHkyPXt0aGlzLnByb3BzLmhlaWdodH1cclxuICAgICAgICAgICAgICAgICAgICBzdHJva2VXaWR0aD17bHd9XHJcbiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlPXtjb2x9XHJcbiAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGh0bWw7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxnPlxyXG4gICAgICAgICAgICAgICAge3RoaXMueW9rb2tlaSgpfVxyXG4gICAgICAgICAgICAgICAge3RoaXMudGF0ZWtlaSgpfVxyXG4gICAgICAgICAgICA8L2c+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcblxyXG5pbXBvcnQgR3JpZCBmcm9tICcuL0dyaWQuanMnO1xyXG5pbXBvcnQgQm94c01hcCBmcm9tICcuL0JveHNNYXAuanMnO1xyXG5pbXBvcnQgTGluZXNNYXAgZnJvbSAnLi9MaW5lc01hcC5qcyc7XHJcbmltcG9ydCBTZWxlY3RCb3hzTWFwIGZyb20gJy4vU2VsZWN0Qm94c01hcC5qcyc7XHJcblxyXG5pbXBvcnQgeyBGb250IH0gZnJvbSAnLi4vZGVmaW5lLmpzJztcclxuXHJcbmltcG9ydCB7IEN1cnNvciB9IGZyb20gJy4uL2xpYnMvemFoeW8uanMnO1xyXG5cclxuY29uc3Qgc3R5bGVzID0ge1xyXG4gICAgY29udGFpbmVyOiB7XHJcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnI2ZmZicsXHJcbiAgICB9LFxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3ZnSW1hZ2UgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGxldCBncmlkID0gJyc7XHJcbiAgICAgICAgbGV0IHNlbGVjdGJveCA9ICcnO1xyXG4gICAgICAgIGlmICh0aGlzLnByb3BzLmVkaXRvbm9mZiA9PSAnb24nKSB7XHJcbiAgICAgICAgICAgIGdyaWQgPSA8R3JpZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aD17dGhpcy5wcm9wcy53aWR0aH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PXt0aGlzLnByb3BzLmhlaWdodH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2NhbGU9e3RoaXMucHJvcHMuc2NhbGV9XHJcbiAgICAgICAgICAgICAgICAgICAgLz47XHJcbiAgICAgICAgICAgIHNlbGVjdGJveCA9IDxTZWxlY3RCb3hzTWFwIC8+O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPHN2Z1xyXG4gICAgICAgICAgICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZlcnNpb249XCIxLjFcIlxyXG4gICAgICAgICAgICAgICAgeG1sbnNYbGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIlxyXG4gICAgICAgICAgICAgICAgd2lkdGg9e3RoaXMucHJvcHMud2lkdGggKiB0aGlzLnByb3BzLnNjYWxlIC8gMTAwfVxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0PXt0aGlzLnByb3BzLmhlaWdodCAqIHRoaXMucHJvcHMuc2NhbGUgLyAxMDB9XHJcbiAgICAgICAgICAgICAgICB2aWV3Qm94PXtgMCAwICR7dGhpcy5wcm9wcy53aWR0aH0gJHt0aGlzLnByb3BzLmhlaWdodH1gfVxyXG4gICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAuLi5zdHlsZXMuY29udGFpbmVyLFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGZvbnRGYW1pbHk6ICdGcDJtVzFXZWInXHJcbiAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICA8c3R5bGU+e0ZvbnQuZm9udGZhY2V9PC9zdHlsZT5cclxuXHJcbiAgICAgICAgICAgICAgICB7Lyog44Kw44Oq44OD44OJ44Gu5o+P55S7ICovfVxyXG4gICAgICAgICAgICAgICAge2dyaWR9XHJcblxyXG4gICAgICAgICAgICAgICAgey8qIOODnOODg+OCr+OCueOBruaPj+eUuyAqL31cclxuICAgICAgICAgICAgICAgIDxCb3hzTWFwIC8+XHJcblxyXG4gICAgICAgICAgICAgICAgey8qIOe9q+e3muOBruaPj+eUuyAqL31cclxuICAgICAgICAgICAgICAgIDxMaW5lc01hcCAvPlxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB7Lyog6YG45oqe44Oc44OD44Kv44K544Gu5o+P55S7ICovfVxyXG4gICAgICAgICAgICAgICAge3NlbGVjdGJveH1cclxuICAgICAgICAgICAgPC9zdmc+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XHJcblxyXG5pbXBvcnQgU3ZnSW1hZ2UgZnJvbSAnLi9TdmdJbWFnZS5qcyc7XHJcblxyXG5cclxuLy8gbWFwU3RhdGVUb1Byb3BzXHJcbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZSwgcHJvcHMpID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgLi4uc3RhdGUsXHJcbiAgICB9O1xyXG59XHJcblxyXG4vLyBtYXBEaXNwYXRjaFRvUHJvcHNcclxuY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0gKGRpc3BhdGNoLCBwcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBkaXNwYXRjaCxcclxuICAgIH07XHJcbn1cclxuXHJcbi8vIG1lcmdlUHJvcHMgXHJcbmNvbnN0IG1lcmdlUHJvcHMgPSAoc3RhdGUsIGRpc3BhdGNoLCBwcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAvLyB4eHg6IHl5eSxcclxuICAgICAgICAvLyBvblh4eHg6ICh4eHgpID0+IHtcclxuICAgICAgICAvLyAgICAgLi4uLi5cclxuICAgICAgICAvLyAgICAgZGlzcGF0Y2guZGlzcGF0Y2goU1VfWHh4eHh4X1h4eHh4X1h4eHgoKSk7XHJcbiAgICAgICAgLy8gfSxcclxuICAgICAgICB3aWR0aDogcHJvcHMud2lkdGgsXHJcbiAgICAgICAgaGVpZ2h0OiBwcm9wcy5oZWlnaHQsXHJcbiAgICAgICAgc2NhbGU6IHN0YXRlLnNjYWxlLFxyXG4gICAgICAgIGVkaXRvbm9mZjogc3RhdGUuZWRpdG9ub2ZmLFxyXG4gICAgfTtcclxufVxyXG5cclxuLy8gY29ubmVjdFxyXG5jb25zdCBTdmdJbWFnZU1hcCA9IGNvbm5lY3QoXHJcbiAgICBtYXBTdGF0ZVRvUHJvcHMsXHJcbiAgICBtYXBEaXNwYXRjaFRvUHJvcHMsXHJcbiAgICBtZXJnZVByb3BzXHJcbikoU3ZnSW1hZ2UpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgU3ZnSW1hZ2VNYXA7XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcblxyXG5pbXBvcnQgU3ZnSW1hZ2VNYXAgZnJvbSAnLi9TdmdJbWFnZU1hcC5qcyc7XHJcblxyXG5pbXBvcnQgeyBEZWZpbmUgfSBmcm9tICcuLi9kZWZpbmUuanMnO1xyXG5pbXBvcnQgQ29udGV4dE1lbnVNYXAgZnJvbSAnLi9Db250ZXh0TWVudU1hcC5qcyc7XHJcblxyXG5jb25zdCBzdHlsZXMgPSB7XHJcbiAgICBjb250YWluZXI6IHtcclxuICAgICAgICBvdmVyZmxvdzogJ3Njcm9sbCcsXHJcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnI2RkZCcsXHJcbiAgICAgICAgLy8gYm9yZGVyOiAnMnB4IHNvbGlkIHJlZCcsXHJcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcclxuICAgICAgICBoZWlnaHQ6ICcxMDB2aCcsXHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFZpZXdCb3ggZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcblxyXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgICAgICAgIGNvbnRlbnh0bWVudU9wZW5DbG9zZTogJ2Nsb3NlJyxcclxuICAgICAgICAgICAgY29udGV4dG1lbnVYOiAwLFxyXG4gICAgICAgICAgICBjb250ZXh0bWVudVk6IDAsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcclxuXHRcdC8vIC8vIOW9k+OCs+ODs+ODneODvOODjeODs+ODiOOBruW5heOBqOmrmOOBleOCkuOCu+ODg+ODiOOBmeOCi1xyXG5cdFx0Ly8gY29uc3Qgdmlld2JveCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd2aWV3Ym94Jyk7XHJcblx0XHQvLyB2aWV3Ym94LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIChlKSA9PiB7XHJcblx0XHQvLyBcdHRoaXMudmlld2JveC53ID0gZS5zcmNFbGVtZW50LmNsaWVudFdpZHRoO1xyXG5cdFx0Ly8gXHR0aGlzLnZpZXdib3guaCA9IGUuc3JjRWxlbWVudC5jbGllbnRIZWlnaHQ7XHJcblx0XHQvLyB9KTtcclxuXHJcblx0XHQvLyAvLyDjgqbjgqPjg7Pjg4njgqbjgYzjg6rjgrXjgqTjgrrjgZfjgZ/loLTlkIjjga7jgqTjg5njg7Pjg4jlh6bnkIZcclxuXHRcdC8vIHdpbmRvdy5vbnJlc2l6ZSA9ICgpID0+IHtcclxuXHRcdC8vIFx0Ly8gdmlld2JveOOBq3Jlc2l6ZeOCpOODmeODs+ODiOOCkueZuuihjOOBmeOCi1xyXG5cdFx0Ly8gXHRsZXQgZXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoXCJyZXNpemVcIik7XHJcblx0XHQvLyBcdHZpZXdib3guZGlzcGF0Y2hFdmVudChldmVudCk7XHQvLyDjgqTjg5njg7Pjg4jjg4jjg6rjgqzjg7xcclxuXHRcdC8vIH1cclxuXHJcblx0XHQvLyAvLyDliJ3lm57jgavvvJHluqbjgaDjgZHjgIF2aWV3Ym9444GrcmVzaXpl44Kk44OZ44Oz44OI44KS55m66KGM44GZ44KLXHJcblx0XHQvLyBsZXQgZXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoXCJyZXNpemVcIik7XHJcblx0XHQvLyB2aWV3Ym94LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1x0Ly8g44Kk44OZ44Oz44OI44OI44Oq44Ks44O8XHJcbiAgICB9XHJcblxyXG4gICAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgY29udGV4dG1lbnVPcGVuQ2xvc2U6IG5leHRQcm9wcy5jb250ZXh0bWVudS5vcGVuY2xvc2UsXHJcbiAgICAgICAgICAgIGNvbnRleHRtZW51WDogbmV4dFByb3BzLmNvbnRleHRtZW51LngsXHJcbiAgICAgICAgICAgIGNvbnRleHRtZW51WTogbmV4dFByb3BzLmNvbnRleHRtZW51LnksXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29udGV4dE1lbnUoKSB7XHJcbiAgICAgICAgbGV0IGNvbnRleHRtZW51ID0gJyc7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmNvbnRleHRtZW51T3BlbkNsb3NlID09ICdvcGVuJykge1xyXG4gICAgICAgICAgICBjb250ZXh0bWVudSA9IChcclxuICAgICAgICAgICAgICAgIDxDb250ZXh0TWVudU1hcFxyXG4gICAgICAgICAgICAgICAgICAgIHg9e3RoaXMuc3RhdGUuY29udGV4dG1lbnVYfVxyXG4gICAgICAgICAgICAgICAgICAgIHk9e3RoaXMuc3RhdGUuY29udGV4dG1lbnVZfVxyXG4gICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBjb250ZXh0bWVudTtcclxuICAgIH1cclxuICBcclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICBpZD1cInZpZXdib3hcIlxyXG4gICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAuLi5zdHlsZXMuY29udGFpbmVyLFxyXG4gICAgICAgICAgICAgICAgICAgIC4uLnRoaXMucHJvcHMuc3R5bGUsXHJcbiAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgb25Db250ZXh0TWVudT17KGUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLm9uQ29udGV4dE1lbnUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB4OiBlLnBhZ2VYLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiBlLnBhZ2VZLFxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgPFN2Z0ltYWdlTWFwXHJcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg9e0RlZmluZS5zdmdpbWFnZXNpemUud2lkdGh9XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PXtEZWZpbmUuc3ZnaW1hZ2VzaXplLmhlaWdodH1cclxuICAgICAgICAgICAgICAgIC8+XHJcblxyXG4gICAgICAgICAgICAgICAge3RoaXMuY29udGV4dE1lbnUoKX1cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnO1xyXG5cclxuaW1wb3J0IFZpZXdCb3ggZnJvbSAnLi9WaWV3Qm94LmpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBTVV9Db250ZXh0TWVudV9PcGVuLCBTVV9DT05URVhUTUVOVV9DTE9TRSwgU1VfQ29udGV4dE1lbnVfQ2xvc2UsXHJcbn0gZnJvbSAnLi4vYWN0aW9uc19zdS9jb250ZXh0bWVudS5qcyc7XHJcblxyXG5cclxuLy8gbWFwU3RhdGVUb1Byb3BzXHJcbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZSwgcHJvcHMpID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgLi4uc3RhdGUsXHJcbiAgICB9O1xyXG59XHJcblxyXG4vLyBtYXBEaXNwYXRjaFRvUHJvcHNcclxuY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0gKGRpc3BhdGNoLCBwcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBkaXNwYXRjaCxcclxuICAgIH07XHJcbn1cclxuXHJcbi8vIG1lcmdlUHJvcHMgXHJcbmNvbnN0IG1lcmdlUHJvcHMgPSAoc3RhdGUsIGRpc3BhdGNoLCBwcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAvLyB4eHg6IHl5eSxcclxuICAgICAgICAvLyBvblh4eHg6ICh4eHgpID0+IHtcclxuICAgICAgICAvLyAgICAgLi4uLi5cclxuICAgICAgICAvLyAgICAgZGlzcGF0Y2guZGlzcGF0Y2goU1VfWHh4eHh4X1h4eHh4X1h4eHgoKSk7XHJcbiAgICAgICAgLy8gfSxcclxuICAgICAgICAvLyAuLi5wcm9wcyxcclxuICAgICAgICBjb250ZXh0bWVudTogc3RhdGUuY29udGV4dG1lbnUsXHJcbiAgICAgICAgb25Db250ZXh0TWVudTogKHBheWxvYWQpID0+IHtcclxuICAgICAgICAgICAgZGlzcGF0Y2guZGlzcGF0Y2goU1VfQ29udGV4dE1lbnVfT3BlbihwYXlsb2FkKSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkNvbnRleHRNZW51Q2xvc2U6ICgpID0+IHtcclxuICAgICAgICAgICAgZGlzcGF0Y2guZGlzcGF0Y2goU1VfQ29udGV4dE1lbnVfQ2xvc2UoKSk7XHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuXHJcbi8vIGNvbm5lY3RcclxuY29uc3QgVmlld0JveE1hcCA9IGNvbm5lY3QoXHJcbiAgICBtYXBTdGF0ZVRvUHJvcHMsXHJcbiAgICBtYXBEaXNwYXRjaFRvUHJvcHMsXHJcbiAgICBtZXJnZVByb3BzXHJcbikoVmlld0JveCk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBWaWV3Qm94TWFwO1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5cclxuaW1wb3J0IFZpZXdCb3hNYXAgZnJvbSAnLi4vY29tcG9uZW50cy9WaWV3Qm94TWFwLmpzJztcclxuLy8gaW1wb3J0IHsgRGlhbG9nIH0gZnJvbSAnbWF0ZXJpYWwtdWknO1xyXG5pbXBvcnQgVG9vbEJveE1hcCBmcm9tICcuLi9jb21wb25lbnRzL1Rvb2xCb3hNYXAuanMnO1xyXG5pbXBvcnQgVG9vbEJveFNjYWxlTWFwIGZyb20gJy4uL2NvbXBvbmVudHMvVG9vbEJveFNjYWxlTWFwLmpzJztcclxuaW1wb3J0IFRvb2xCb3hCb3hEYXRhTWFwIGZyb20gJy4uL2NvbXBvbmVudHMvVG9vbEJveEJveERhdGFNYXAuanMnO1xyXG5pbXBvcnQgVG9vbEJveFRleHREYXRhTWFwIGZyb20gJy4uL2NvbXBvbmVudHMvVG9vbEJveFRleHREYXRhTWFwLmpzJztcclxuaW1wb3J0IFRvb2xCb3hTb3phaU1hcCBmcm9tICcuLi9jb21wb25lbnRzL1Rvb2xCb3hTb3phaU1hcC5qcyc7XHJcbmltcG9ydCBUb29sQm94TGlua01hcCBmcm9tICcuLi9jb21wb25lbnRzL1Rvb2xCb3hMaW5rTWFwLmpzJztcclxuaW1wb3J0IFRvb2xCb3hQcmVzZW5NYXAgZnJvbSAnLi4vY29tcG9uZW50cy9Ub29sQm94UHJlc2VuTWFwLmpzJztcclxuXHJcbmltcG9ydCB7IEN1cnNvciB9IGZyb20gJy4uL2xpYnMvemFoeW8uanMnO1xyXG5cclxuY29uc3Qgc3R5bGVzID0ge1xyXG4gICAgY29udGFpbmVyOiB7XHJcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXHJcbiAgICAgICAgZm9udFNpemU6ICcyMHB4JyxcclxuICAgICAgICBmb250V2VpZ2h0OiAnYm9sZCcsXHJcbiAgICAgICAgY29sb3I6ICdibGFjaycsXHJcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcclxuICAgICAgICBoZWlnaHQ6ICcxMDB2aCcsXHJcbiAgICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxyXG4gICAgfSxcclxuXHJcbiAgICBkYW5kZFRleHRCb3g6IHtcclxuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcclxuICAgICAgICB3aWR0aDogJzEyNXB4JyxcclxuICAgICAgICBoZWlnaHQ6ICcxMjVweCcsXHJcbiAgICAgICAgcGFkZGluZzogJzVweCcsXHJcbiAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcclxuICAgICAgICBjb2xvcjogJ2JsYWNrJyxcclxuICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXHJcbiAgICAgICAgdGV4dE92ZXJmbG93OiAnZWxsaXBzaXMnLFxyXG4gICAgICAgIC8vIHdoaXRlU3BhY2U6ICdub3dyYXAnLFxyXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ2xpZ2h0eWVsbG93JyxcclxuICAgICAgICBvcGFjaXR5OiAnMC41JyxcclxuICAgICAgICBjdXJzb3I6ICctbW96LWdyYWJiaW5nJyxcclxuICAgICAgICBjdXJzb3I6ICctd2Via2l0LWdyYWJiaW5nJyxcclxuICAgICAgICBjdXJzb3I6ICdwb2ludGVyJyxcclxuICAgIH0sXHJcbiAgICBkYW5kZEltYWdlQm94OiB7XHJcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXHJcbiAgICAgICAgLy8gZGlzcGxheTogJ3RhYmxlLWNlbGwnLCAgIC8vIHBvc2l0aW9uOmFic29sdXRlIOaMh+WumuOBl+OBpuOBhOOCi+ODnOODg+OCr+OCueOBqyBkaXNwbGF5OnRhYmxlLWNlbGwg44Gv5Yq544GL44Gq44GEIFxyXG4gICAgICAgIHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnLFxyXG4gICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXHJcbiAgICAgICAgd2lkdGg6ICcxMzBweCcsXHJcbiAgICAgICAgaGVpZ2h0OiAnMTMwcHgnLFxyXG4gICAgICAgIG9wYWNpdHk6ICcwLjUnLFxyXG4gICAgICAgIC8vIGJhY2tncm91bmRDb2xvcjogJ2xpZ2h0Ymx1ZScsXHJcbiAgICAgICAgY3Vyc29yOiAnLW1vei1ncmFiYmluZycsXHJcbiAgICAgICAgY3Vyc29yOiAnLXdlYmtpdC1ncmFiYmluZycsXHJcbiAgICAgICAgY3Vyc29yOiAncG9pbnRlcicsXHJcbiAgICB9LFxyXG4gICAgZGFuZGRJbWFnZToge1xyXG4gICAgICAgIG1heFdpZHRoOiAnMTMwcHgnLFxyXG4gICAgICAgIG1heEhlaWdodDogJzEzMHB4JyxcclxuICAgIH0sXHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUb3BTY3JlZW4gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcblxyXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgICAgICAgIHZpZXc6ICdmYWxzZScsXHJcbiAgICAgICAgICAgIHg6IDAsXHJcbiAgICAgICAgICAgIHk6IDAsXHJcbiAgICAgICAgICAgIHR5cGU6ICcnLFxyXG4gICAgICAgICAgICB2YWx1ZTogJycsXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy5kYW5kZE1vdXNlTW92ZSA9IHRoaXMuZGFuZGRNb3VzZU1vdmUuYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLmRhbmRkTW91c2VVcCAgID0gdGhpcy5kYW5kZE1vdXNlVXAuYmluZCh0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xyXG4gICAgICAgIC8vIOODieODqeODg+OCsOOCouODs+ODieODieODreODg+ODl+WHpueQhlxyXG4gICAgICAgIGlmIChuZXh0UHJvcHMuZGFuZGQudmlldyA9PSAndHJ1ZScpIHtcclxuICAgICAgICAgICAgLy8g44Kk44OZ44Oz44OI44Gu55m76YyyXHJcbiAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMuZGFuZGRNb3VzZU1vdmUsIGZhbHNlKTtcclxuICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsICAgdGhpcy5kYW5kZE1vdXNlVXAsIGZhbHNlKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICAgICAgLy8gdmlldzogJ3RydWUnLFxyXG4gICAgICAgICAgICAgICAgeDogbmV4dFByb3BzLmRhbmRkLngsXHJcbiAgICAgICAgICAgICAgICB5OiBuZXh0UHJvcHMuZGFuZGQueSxcclxuICAgICAgICAgICAgICAgIHR5cGU6IG5leHRQcm9wcy5kYW5kZC50eXBlLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IG5leHRQcm9wcy5kYW5kZC52YWx1ZSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGRhbmRkTW91c2VNb3ZlKGUpIHtcclxuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpOyAgICAvLyDjgZPjga7jgqTjg5njg7Pjg4jjgpLjgZPjga7jg6zjgqTjg6Tjg7zjgafmraLjgoHjgovjgILkuIvjg6zjgqTjg6Tjg7zjgavjgYLjgovopoHntKDjgavjgqTjg5njg7Pjg4jjgpLotbfjgZPjgZXjgarjgYRcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7ICAgICAvLyDjg5bjg6njgqbjgrbmqJnmupbmqZ/og73jga7jgqTjg5njg7Pjg4jjgpLmipHmraLjgZnjgotcclxuXHJcbiAgICAgICAgLy8g44Kr44O844K944Or44Gu44Oa44O844K455u45a++5bqn5qiZ44KS5b6X44KLXHJcbiAgICAgICAgY29uc3QgW3gsIHldID0gQ3Vyc29yLmN1clBhZ2VLaXRlbihlKTtcclxuXHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgIHZpZXc6ICd0cnVlJyxcclxuICAgICAgICAgICAgeDogeCxcclxuICAgICAgICAgICAgeTogeSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBkYW5kZE1vdXNlVXAoZSkge1xyXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7ICAgIC8vIOOBk+OBruOCpOODmeODs+ODiOOCkuOBk+OBruODrOOCpOODpOODvOOBp+atouOCgeOCi+OAguS4i+ODrOOCpOODpOODvOOBq+OBguOCi+imgee0oOOBq+OCpOODmeODs+ODiOOCkui1t+OBk+OBleOBquOBhFxyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTsgICAgIC8vIOODluODqeOCpuOCtuaomea6luapn+iDveOBruOCpOODmeODs+ODiOOCkuaKkeatouOBmeOCi1xyXG5cclxuICAgICAgICAvLyDjgqTjg5njg7Pjg4jjgpLliYrpmaTjgZnjgotcclxuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLmRhbmRkTW91c2VNb3ZlKTtcclxuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgICB0aGlzLmRhbmRkTW91c2VVcCk7XHJcblxyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICB2aWV3OiAnZmFsc2UnLFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyDjg4njg63jg4Pjg5fjgZfjgZ/luqfmqJnvvIhTVkfjgqTjg6Hjg7zjgrjkuIrjga7luqfmqJnvvInjgpLlvpfjgotcclxuICAgICAgICBjb25zdCBbeCwgeV0gPSBDdXJzb3IuY3VyRWxlbVNjYWxlU2Nyb2xsS2l0ZW4oXHJcbiAgICAgICAgICAgIHRoaXMuc3RhdGUueCxcclxuICAgICAgICAgICAgdGhpcy5zdGF0ZS55LFxyXG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndmlld2JveCcpLFxyXG4gICAgICAgICAgICB0aGlzLnByb3BzLnNjYWxlIC8gMTAwXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgLy8g44OJ44Op44OD44Kw44Ki44Oz44OJ44OJ44Ot44OD44OX44Gu44OJ44Ot44OD44OX5Yem55CGXHJcbiAgICAgICAgdGhpcy5wcm9wcy5kYW5kZE1vdXNlVXAoe1xyXG4gICAgICAgICAgICB0eXBlOiB0aGlzLnN0YXRlLnR5cGUsXHJcbiAgICAgICAgICAgIHZhbHVlOiB0aGlzLnN0YXRlLnZhbHVlLFxyXG4gICAgICAgICAgICB4OiB4LFxyXG4gICAgICAgICAgICB5OiB5LFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHRvb2xCb3hzKCkge1xyXG4gICAgICAgIGxldCB0b29sYm94cyA9IFtdO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucHJvcHMudG9vbGJveHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgc3dpdGNoICh0aGlzLnByb3BzLnRvb2xib3hzW2ldLnR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSAnc2NhbGUnOiAgIC8vIOaLoeWkp+e4ruWwj+ODhOODvOODq+ODnOODg+OCr+OCuVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMudG9vbGJveHNbaV0udmlldyA9PSAnZmFsc2UnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0b29sYm94cy5wdXNoKFxyXG4gICAgICAgICAgICAgICAgICAgIDxUb29sQm94TWFwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvb2xib3hfaWQ9e3RoaXMucHJvcHMudG9vbGJveHNbaV0udG9vbGJveF9pZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgeD17dGhpcy5wcm9wcy50b29sYm94c1tpXS54fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB5PXt0aGlzLnByb3BzLnRvb2xib3hzW2ldLnl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHc9e3RoaXMucHJvcHMudG9vbGJveHNbaV0ud31cclxuICAgICAgICAgICAgICAgICAgICAgICAgaD17dGhpcy5wcm9wcy50b29sYm94c1tpXS5ofVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT1cIuaLoeWkp+e4ruWwj1wiXHJcbiAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8VG9vbEJveFNjYWxlTWFwIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9Ub29sQm94TWFwPlxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgY2FzZSAnYm94ZGF0YSc6ICAgLy8g44Oc44OD44Kv44K55oOF5aCx44OE44O844Or44Oc44OD44Kv44K5XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wcm9wcy50b29sYm94c1tpXS52aWV3ID09ICdmYWxzZScpIHtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRvb2xib3hzLnB1c2goXHJcbiAgICAgICAgICAgICAgICAgICAgPFRvb2xCb3hNYXBcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9vbGJveF9pZD17dGhpcy5wcm9wcy50b29sYm94c1tpXS50b29sYm94X2lkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB4PXt0aGlzLnByb3BzLnRvb2xib3hzW2ldLnh9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHk9e3RoaXMucHJvcHMudG9vbGJveHNbaV0ueX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdz17dGhpcy5wcm9wcy50b29sYm94c1tpXS53fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBoPXt0aGlzLnByb3BzLnRvb2xib3hzW2ldLmh9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPVwi44Oc44OD44Kv44K55oOF5aCxXCJcclxuICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxUb29sQm94Qm94RGF0YU1hcCAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvVG9vbEJveE1hcD5cclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgIGNhc2UgJ3RleHRkYXRhJzogICAvLyDjg4bjgq3jgrnjg4jmg4XloLHjg4Tjg7zjg6vjg5zjg4Pjgq/jgrlcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLnRvb2xib3hzW2ldLnZpZXcgPT0gJ2ZhbHNlJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdG9vbGJveHMucHVzaChcclxuICAgICAgICAgICAgICAgICAgICA8VG9vbEJveE1hcFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b29sYm94X2lkPXt0aGlzLnByb3BzLnRvb2xib3hzW2ldLnRvb2xib3hfaWR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHg9e3RoaXMucHJvcHMudG9vbGJveHNbaV0ueH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgeT17dGhpcy5wcm9wcy50b29sYm94c1tpXS55fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3PXt0aGlzLnByb3BzLnRvb2xib3hzW2ldLnd9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGg9e3RoaXMucHJvcHMudG9vbGJveHNbaV0uaH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9XCLvvo7vvp7vva/vvbjvvb3vvoPvvbfvvb3vvoTmg4XloLFcIlxyXG4gICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPFRvb2xCb3hUZXh0RGF0YU1hcCAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvVG9vbEJveE1hcD5cclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgIGNhc2UgJ3NvemFpJzogICAgLy8g57Sg5p2Q44Oq44K544OI44OE44O844Or44Oc44OD44Kv44K5XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wcm9wcy50b29sYm94c1tpXS52aWV3ID09ICdmYWxzZScpIHtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRvb2xib3hzLnB1c2goXHJcbiAgICAgICAgICAgICAgICAgICAgPFRvb2xCb3hNYXBcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9vbGJveF9pZD17dGhpcy5wcm9wcy50b29sYm94c1tpXS50b29sYm94X2lkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB4PXt0aGlzLnByb3BzLnRvb2xib3hzW2ldLnh9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHk9e3RoaXMucHJvcHMudG9vbGJveHNbaV0ueX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdz17dGhpcy5wcm9wcy50b29sYm94c1tpXS53fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBoPXt0aGlzLnByb3BzLnRvb2xib3hzW2ldLmh9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPVwi57Sg5p2Q44Oq44K544OIXCJcclxuICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxUb29sQm94U296YWlNYXAgLz5cclxuICAgICAgICAgICAgICAgICAgICA8L1Rvb2xCb3hNYXA+XHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICBjYXNlICdsaW5rJzogICAgLy8g44Oq44Oz44Kv44Oq44K544OI44OE44O844Or44Oc44OD44Kv44K5XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wcm9wcy50b29sYm94c1tpXS52aWV3ID09ICdmYWxzZScpIHtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRvb2xib3hzLnB1c2goXHJcbiAgICAgICAgICAgICAgICAgICAgPFRvb2xCb3hNYXBcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9vbGJveF9pZD17dGhpcy5wcm9wcy50b29sYm94c1tpXS50b29sYm94X2lkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB4PXt0aGlzLnByb3BzLnRvb2xib3hzW2ldLnh9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHk9e3RoaXMucHJvcHMudG9vbGJveHNbaV0ueX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdz17dGhpcy5wcm9wcy50b29sYm94c1tpXS53fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBoPXt0aGlzLnByb3BzLnRvb2xib3hzW2ldLmh9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPVwi44Oq44Oz44Kv44Oq44K544OIXCJcclxuICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxUb29sQm94TGlua01hcCAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvVG9vbEJveE1hcD5cclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgIGNhc2UgJ3ByZXNlbic6ICAgIC8vIOODl+ODrOOCvOODs+eUqOODhOODvOODq+ODnOODg+OCr+OCuVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMudG9vbGJveHNbaV0udmlldyA9PSAnZmFsc2UnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0b29sYm94cy5wdXNoKFxyXG4gICAgICAgICAgICAgICAgICAgIDxUb29sQm94TWFwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvb2xib3hfaWQ9e3RoaXMucHJvcHMudG9vbGJveHNbaV0udG9vbGJveF9pZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgeD17dGhpcy5wcm9wcy50b29sYm94c1tpXS54fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB5PXt0aGlzLnByb3BzLnRvb2xib3hzW2ldLnl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHc9e3RoaXMucHJvcHMudG9vbGJveHNbaV0ud31cclxuICAgICAgICAgICAgICAgICAgICAgICAgaD17dGhpcy5wcm9wcy50b29sYm94c1tpXS5ofVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT1cIuODl+ODrOOCvOODs+eUqFwiXHJcbiAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8VG9vbEJveFByZXNlbk1hcCAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvVG9vbEJveE1hcD5cclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0b29sYm94cztcclxuICAgIH1cclxuXHJcbiAgICBkYW5kZCgpIHtcclxuICAgICAgICBsZXQgZHJvcG9iaiA9IFtdO1xyXG4gICAgICAgIGxldCBvYmpzdHlsZSA9IHt9O1xyXG4gICAgICAgIGxldCBjaGlsZHJlbiA9ICcnO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5zdGF0ZS52aWV3ID09ICdmYWxzZScpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGRyb3BvYmo7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzd2l0Y2ggKHRoaXMuc3RhdGUudHlwZSkge1xyXG4gICAgICAgIGNhc2UgJ3NvemFpJzogLy8g57Sg5p2QXHJcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5zdGF0ZS52YWx1ZS50eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ3RleHQnOiAvLyDjg4bjgq3jgrnjg4hcclxuICAgICAgICAgICAgICAgIGxldCB0ZXh0ID0gdGhpcy5zdGF0ZS52YWx1ZS50ZXh0O1xyXG4gICAgICAgICAgICAgICAgaWYgKHRleHQubGVuZ3RoID4gOTUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0ID0gdGV4dC5zbGljZSgwLCA5NCkgKyAnLi4uJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG9ianN0eWxlID0gc3R5bGVzLmRhbmRkVGV4dEJveDtcclxuICAgICAgICAgICAgICAgIGNoaWxkcmVuID0gdGV4dDtcclxuXHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgIGNhc2UgJ2ltYWdlJzogLy8g55S75YOPXHJcbiAgICAgICAgICAgICAgICBvYmpzdHlsZSA9IHN0eWxlcy5kYW5kZEltYWdlQm94O1xyXG4gICAgICAgICAgICAgICAgY2hpbGRyZW4gPSA8aW1nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjPXt0aGlzLnN0YXRlLnZhbHVlLmltYWdlVXJsfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXtzdHlsZXMuZGFuZGRJbWFnZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+O1xyXG5cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGRyb3BvYmoucHVzaChcclxuICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAuLi5vYmpzdHlsZSxcclxuICAgICAgICAgICAgICAgICAgICBsZWZ0OiB0aGlzLnN0YXRlLnggLSAoMTMwIC8gMikgKyAncHgnLFxyXG4gICAgICAgICAgICAgICAgICAgIC8vdG9wOiAgdGhpcy5zdGF0ZS55IC0gKDEzMCAvIDIpICsgJ3B4JyxcclxuICAgICAgICAgICAgICAgICAgICB0b3A6ICB0aGlzLnN0YXRlLnkgLSAxNSArICdweCcsXHJcbiAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICB7Y2hpbGRyZW59XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHJldHVybiBkcm9wb2JqO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgc3R5bGU9e3N0eWxlcy5jb250YWluZXJ9XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIHsvKiBTVkfjgqTjg6Hjg7zjgrjjg5zjg4Pjgq/jgrkgKi99XHJcbiAgICAgICAgICAgICAgICA8Vmlld0JveE1hcCAvPlxyXG5cclxuICAgICAgICAgICAgICAgIHsvKiDjg4Tjg7zjg6vjg5zjg4Pjgq/jgrkgKi99XHJcbiAgICAgICAgICAgICAgICB7IHRoaXMudG9vbEJveHMoKSB9XHJcblxyXG4gICAgICAgICAgICAgICAgey8qIOODieODqeODg+OCsOOCouODs+ODieODieODreODg+ODlyAqL31cclxuICAgICAgICAgICAgICAgIHsgdGhpcy5kYW5kZCgpIH1cclxuXHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcclxuXHJcbmltcG9ydCBUb3BTY3JlZW4gZnJvbSAnLi9Ub3BTY3JlZW4uanMnO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIFNVX0RBbmREX01vdXNlVXAsXHJcbn0gZnJvbSAnLi4vYWN0aW9uc19zdS9kYW5kZC5qcyc7XHJcblxyXG4vLyBtYXBTdGF0ZVRvUHJvcHNcclxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gKHN0YXRlLCBwcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAuLi5zdGF0ZSxcclxuICAgIH07XHJcbn1cclxuXHJcbi8vIG1hcERpc3BhdGNoVG9Qcm9wc1xyXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHMgPSAoZGlzcGF0Y2gsIHByb3BzKSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGRpc3BhdGNoLFxyXG4gICAgfTtcclxufVxyXG5cclxuLy8gbWVyZ2VQcm9wc1xyXG5jb25zdCBtZXJnZVByb3BzID0gKHN0YXRlLCBkaXNwYXRjaCwgcHJvcHMpID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgLy8geHh4OiB5eXksXHJcbiAgICAgICAgLy8gb25YeHh4OiAoeHh4KSA9PiB7XHJcbiAgICAgICAgLy8gICAgIC4uLi4uXHJcbiAgICAgICAgLy8gICAgIGRpc3BhdGNoLmRpc3BhdGNoKFNVX1h4eHh4eF9YeHh4eF9YeHh4KCkpO1xyXG4gICAgICAgIC8vIH0sXHJcbiAgICAgICAgdG9vbGJveHM6IHN0YXRlLnRvb2xib3hzLFxyXG4gICAgICAgIGRhbmRkOiBzdGF0ZS5kYW5kZCxcclxuICAgICAgICBzY2FsZTogc3RhdGUuc2NhbGUsXHJcblxyXG4gICAgICAgIGRhbmRkTW91c2VVcDogKHBheWxvYWQpID0+IHtcclxuICAgICAgICAgICAgZGlzcGF0Y2guZGlzcGF0Y2goU1VfREFuZERfTW91c2VVcChwYXlsb2FkKSk7XHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuXHJcbi8vIGNvbm5lY3RcclxuY29uc3QgVG9wU2NyZWVuTWFwID0gY29ubmVjdChcclxuICAgIG1hcFN0YXRlVG9Qcm9wcyxcclxuICAgIG1hcERpc3BhdGNoVG9Qcm9wcyxcclxuICAgIG1lcmdlUHJvcHNcclxuKShUb3BTY3JlZW4pO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgVG9wU2NyZWVuTWFwO1xyXG4iLCIhZnVuY3Rpb24oZSx0KXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZT90KGV4cG9ydHMpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW1wiZXhwb3J0c1wiXSx0KTp0KGUucmVkdXhMb2dnZXI9ZS5yZWR1eExvZ2dlcnx8e30pfSh0aGlzLGZ1bmN0aW9uKGUpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHQoZSx0KXtlLnN1cGVyXz10LGUucHJvdG90eXBlPU9iamVjdC5jcmVhdGUodC5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTplLGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pfWZ1bmN0aW9uIHIoZSx0KXtPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcImtpbmRcIix7dmFsdWU6ZSxlbnVtZXJhYmxlOiEwfSksdCYmdC5sZW5ndGgmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwicGF0aFwiLHt2YWx1ZTp0LGVudW1lcmFibGU6ITB9KX1mdW5jdGlvbiBuKGUsdCxyKXtuLnN1cGVyXy5jYWxsKHRoaXMsXCJFXCIsZSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJsaHNcIix7dmFsdWU6dCxlbnVtZXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJyaHNcIix7dmFsdWU6cixlbnVtZXJhYmxlOiEwfSl9ZnVuY3Rpb24gbyhlLHQpe28uc3VwZXJfLmNhbGwodGhpcyxcIk5cIixlKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcInJoc1wiLHt2YWx1ZTp0LGVudW1lcmFibGU6ITB9KX1mdW5jdGlvbiBpKGUsdCl7aS5zdXBlcl8uY2FsbCh0aGlzLFwiRFwiLGUpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwibGhzXCIse3ZhbHVlOnQsZW51bWVyYWJsZTohMH0pfWZ1bmN0aW9uIGEoZSx0LHIpe2Euc3VwZXJfLmNhbGwodGhpcyxcIkFcIixlKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcImluZGV4XCIse3ZhbHVlOnQsZW51bWVyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiaXRlbVwiLHt2YWx1ZTpyLGVudW1lcmFibGU6ITB9KX1mdW5jdGlvbiBmKGUsdCxyKXt2YXIgbj1lLnNsaWNlKChyfHx0KSsxfHxlLmxlbmd0aCk7cmV0dXJuIGUubGVuZ3RoPXQ8MD9lLmxlbmd0aCt0OnQsZS5wdXNoLmFwcGx5KGUsbiksZX1mdW5jdGlvbiB1KGUpe3ZhciB0PVwidW5kZWZpbmVkXCI9PXR5cGVvZiBlP1widW5kZWZpbmVkXCI6TihlKTtyZXR1cm5cIm9iamVjdFwiIT09dD90OmU9PT1NYXRoP1wibWF0aFwiOm51bGw9PT1lP1wibnVsbFwiOkFycmF5LmlzQXJyYXkoZSk/XCJhcnJheVwiOlwiW29iamVjdCBEYXRlXVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpP1wiZGF0ZVwiOlwiZnVuY3Rpb25cIj09dHlwZW9mIGUudG9TdHJpbmcmJi9eXFwvLipcXC8vLnRlc3QoZS50b1N0cmluZygpKT9cInJlZ2V4cFwiOlwib2JqZWN0XCJ9ZnVuY3Rpb24gbChlLHQscixjLHMsZCxwKXtzPXN8fFtdLHA9cHx8W107dmFyIGc9cy5zbGljZSgwKTtpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgZCl7aWYoYyl7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgYyYmYyhnLGQpKXJldHVybjtpZihcIm9iamVjdFwiPT09KFwidW5kZWZpbmVkXCI9PXR5cGVvZiBjP1widW5kZWZpbmVkXCI6TihjKSkpe2lmKGMucHJlZmlsdGVyJiZjLnByZWZpbHRlcihnLGQpKXJldHVybjtpZihjLm5vcm1hbGl6ZSl7dmFyIGg9Yy5ub3JtYWxpemUoZyxkLGUsdCk7aCYmKGU9aFswXSx0PWhbMV0pfX19Zy5wdXNoKGQpfVwicmVnZXhwXCI9PT11KGUpJiZcInJlZ2V4cFwiPT09dSh0KSYmKGU9ZS50b1N0cmluZygpLHQ9dC50b1N0cmluZygpKTt2YXIgeT1cInVuZGVmaW5lZFwiPT10eXBlb2YgZT9cInVuZGVmaW5lZFwiOk4oZSksdj1cInVuZGVmaW5lZFwiPT10eXBlb2YgdD9cInVuZGVmaW5lZFwiOk4odCksYj1cInVuZGVmaW5lZFwiIT09eXx8cCYmcFtwLmxlbmd0aC0xXS5saHMmJnBbcC5sZW5ndGgtMV0ubGhzLmhhc093blByb3BlcnR5KGQpLG09XCJ1bmRlZmluZWRcIiE9PXZ8fHAmJnBbcC5sZW5ndGgtMV0ucmhzJiZwW3AubGVuZ3RoLTFdLnJocy5oYXNPd25Qcm9wZXJ0eShkKTtpZighYiYmbSlyKG5ldyBvKGcsdCkpO2Vsc2UgaWYoIW0mJmIpcihuZXcgaShnLGUpKTtlbHNlIGlmKHUoZSkhPT11KHQpKXIobmV3IG4oZyxlLHQpKTtlbHNlIGlmKFwiZGF0ZVwiPT09dShlKSYmZS10IT09MClyKG5ldyBuKGcsZSx0KSk7ZWxzZSBpZihcIm9iamVjdFwiPT09eSYmbnVsbCE9PWUmJm51bGwhPT10KWlmKHAuZmlsdGVyKGZ1bmN0aW9uKHQpe3JldHVybiB0Lmxocz09PWV9KS5sZW5ndGgpZSE9PXQmJnIobmV3IG4oZyxlLHQpKTtlbHNle2lmKHAucHVzaCh7bGhzOmUscmhzOnR9KSxBcnJheS5pc0FycmF5KGUpKXt2YXIgdztlLmxlbmd0aDtmb3Iodz0wO3c8ZS5sZW5ndGg7dysrKXc+PXQubGVuZ3RoP3IobmV3IGEoZyx3LG5ldyBpKHZvaWQgMCxlW3ddKSkpOmwoZVt3XSx0W3ddLHIsYyxnLHcscCk7Zm9yKDt3PHQubGVuZ3RoOylyKG5ldyBhKGcsdyxuZXcgbyh2b2lkIDAsdFt3KytdKSkpfWVsc2V7dmFyIHg9T2JqZWN0LmtleXMoZSksUz1PYmplY3Qua2V5cyh0KTt4LmZvckVhY2goZnVuY3Rpb24obixvKXt2YXIgaT1TLmluZGV4T2Yobik7aT49MD8obChlW25dLHRbbl0scixjLGcsbixwKSxTPWYoUyxpKSk6bChlW25dLHZvaWQgMCxyLGMsZyxuLHApfSksUy5mb3JFYWNoKGZ1bmN0aW9uKGUpe2wodm9pZCAwLHRbZV0scixjLGcsZSxwKX0pfXAubGVuZ3RoPXAubGVuZ3RoLTF9ZWxzZSBlIT09dCYmKFwibnVtYmVyXCI9PT15JiZpc05hTihlKSYmaXNOYU4odCl8fHIobmV3IG4oZyxlLHQpKSl9ZnVuY3Rpb24gYyhlLHQscixuKXtyZXR1cm4gbj1ufHxbXSxsKGUsdCxmdW5jdGlvbihlKXtlJiZuLnB1c2goZSl9LHIpLG4ubGVuZ3RoP246dm9pZCAwfWZ1bmN0aW9uIHMoZSx0LHIpe2lmKHIucGF0aCYmci5wYXRoLmxlbmd0aCl7dmFyIG4sbz1lW3RdLGk9ci5wYXRoLmxlbmd0aC0xO2ZvcihuPTA7bjxpO24rKylvPW9bci5wYXRoW25dXTtzd2l0Y2goci5raW5kKXtjYXNlXCJBXCI6cyhvW3IucGF0aFtuXV0sci5pbmRleCxyLml0ZW0pO2JyZWFrO2Nhc2VcIkRcIjpkZWxldGUgb1tyLnBhdGhbbl1dO2JyZWFrO2Nhc2VcIkVcIjpjYXNlXCJOXCI6b1tyLnBhdGhbbl1dPXIucmhzfX1lbHNlIHN3aXRjaChyLmtpbmQpe2Nhc2VcIkFcIjpzKGVbdF0sci5pbmRleCxyLml0ZW0pO2JyZWFrO2Nhc2VcIkRcIjplPWYoZSx0KTticmVhaztjYXNlXCJFXCI6Y2FzZVwiTlwiOmVbdF09ci5yaHN9cmV0dXJuIGV9ZnVuY3Rpb24gZChlLHQscil7aWYoZSYmdCYmciYmci5raW5kKXtmb3IodmFyIG49ZSxvPS0xLGk9ci5wYXRoP3IucGF0aC5sZW5ndGgtMTowOysrbzxpOylcInVuZGVmaW5lZFwiPT10eXBlb2YgbltyLnBhdGhbb11dJiYobltyLnBhdGhbb11dPVwibnVtYmVyXCI9PXR5cGVvZiByLnBhdGhbb10/W106e30pLG49bltyLnBhdGhbb11dO3N3aXRjaChyLmtpbmQpe2Nhc2VcIkFcIjpzKHIucGF0aD9uW3IucGF0aFtvXV06bixyLmluZGV4LHIuaXRlbSk7YnJlYWs7Y2FzZVwiRFwiOmRlbGV0ZSBuW3IucGF0aFtvXV07YnJlYWs7Y2FzZVwiRVwiOmNhc2VcIk5cIjpuW3IucGF0aFtvXV09ci5yaHN9fX1mdW5jdGlvbiBwKGUsdCxyKXtpZihyLnBhdGgmJnIucGF0aC5sZW5ndGgpe3ZhciBuLG89ZVt0XSxpPXIucGF0aC5sZW5ndGgtMTtmb3Iobj0wO248aTtuKyspbz1vW3IucGF0aFtuXV07c3dpdGNoKHIua2luZCl7Y2FzZVwiQVwiOnAob1tyLnBhdGhbbl1dLHIuaW5kZXgsci5pdGVtKTticmVhaztjYXNlXCJEXCI6b1tyLnBhdGhbbl1dPXIubGhzO2JyZWFrO2Nhc2VcIkVcIjpvW3IucGF0aFtuXV09ci5saHM7YnJlYWs7Y2FzZVwiTlwiOmRlbGV0ZSBvW3IucGF0aFtuXV19fWVsc2Ugc3dpdGNoKHIua2luZCl7Y2FzZVwiQVwiOnAoZVt0XSxyLmluZGV4LHIuaXRlbSk7YnJlYWs7Y2FzZVwiRFwiOmVbdF09ci5saHM7YnJlYWs7Y2FzZVwiRVwiOmVbdF09ci5saHM7YnJlYWs7Y2FzZVwiTlwiOmU9ZihlLHQpfXJldHVybiBlfWZ1bmN0aW9uIGcoZSx0LHIpe2lmKGUmJnQmJnImJnIua2luZCl7dmFyIG4sbyxpPWU7Zm9yKG89ci5wYXRoLmxlbmd0aC0xLG49MDtuPG87bisrKVwidW5kZWZpbmVkXCI9PXR5cGVvZiBpW3IucGF0aFtuXV0mJihpW3IucGF0aFtuXV09e30pLGk9aVtyLnBhdGhbbl1dO3N3aXRjaChyLmtpbmQpe2Nhc2VcIkFcIjpwKGlbci5wYXRoW25dXSxyLmluZGV4LHIuaXRlbSk7YnJlYWs7Y2FzZVwiRFwiOmlbci5wYXRoW25dXT1yLmxoczticmVhaztjYXNlXCJFXCI6aVtyLnBhdGhbbl1dPXIubGhzO2JyZWFrO2Nhc2VcIk5cIjpkZWxldGUgaVtyLnBhdGhbbl1dfX19ZnVuY3Rpb24gaChlLHQscil7aWYoZSYmdCl7dmFyIG49ZnVuY3Rpb24obil7ciYmIXIoZSx0LG4pfHxkKGUsdCxuKX07bChlLHQsbil9fWZ1bmN0aW9uIHkoZSl7cmV0dXJuXCJjb2xvcjogXCIrRltlXS5jb2xvcitcIjsgZm9udC13ZWlnaHQ6IGJvbGRcIn1mdW5jdGlvbiB2KGUpe3ZhciB0PWUua2luZCxyPWUucGF0aCxuPWUubGhzLG89ZS5yaHMsaT1lLmluZGV4LGE9ZS5pdGVtO3N3aXRjaCh0KXtjYXNlXCJFXCI6cmV0dXJuW3Iuam9pbihcIi5cIiksbixcIuKGklwiLG9dO2Nhc2VcIk5cIjpyZXR1cm5bci5qb2luKFwiLlwiKSxvXTtjYXNlXCJEXCI6cmV0dXJuW3Iuam9pbihcIi5cIildO2Nhc2VcIkFcIjpyZXR1cm5bci5qb2luKFwiLlwiKStcIltcIitpK1wiXVwiLGFdO2RlZmF1bHQ6cmV0dXJuW119fWZ1bmN0aW9uIGIoZSx0LHIsbil7dmFyIG89YyhlLHQpO3RyeXtuP3IuZ3JvdXBDb2xsYXBzZWQoXCJkaWZmXCIpOnIuZ3JvdXAoXCJkaWZmXCIpfWNhdGNoKGUpe3IubG9nKFwiZGlmZlwiKX1vP28uZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgdD1lLmtpbmQsbj12KGUpO3IubG9nLmFwcGx5KHIsW1wiJWMgXCIrRlt0XS50ZXh0LHkodCldLmNvbmNhdChQKG4pKSl9KTpyLmxvZyhcIuKAlOKAlCBubyBkaWZmIOKAlOKAlFwiKTt0cnl7ci5ncm91cEVuZCgpfWNhdGNoKGUpe3IubG9nKFwi4oCU4oCUIGRpZmYgZW5kIOKAlOKAlCBcIil9fWZ1bmN0aW9uIG0oZSx0LHIsbil7c3dpdGNoKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBlP1widW5kZWZpbmVkXCI6TihlKSl7Y2FzZVwib2JqZWN0XCI6cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgZVtuXT9lW25dLmFwcGx5KGUsUChyKSk6ZVtuXTtjYXNlXCJmdW5jdGlvblwiOnJldHVybiBlKHQpO2RlZmF1bHQ6cmV0dXJuIGV9fWZ1bmN0aW9uIHcoZSl7dmFyIHQ9ZS50aW1lc3RhbXAscj1lLmR1cmF0aW9uO3JldHVybiBmdW5jdGlvbihlLG4sbyl7dmFyIGk9W1wiYWN0aW9uXCJdO3JldHVybiBpLnB1c2goXCIlY1wiK1N0cmluZyhlLnR5cGUpKSx0JiZpLnB1c2goXCIlY0AgXCIrbiksciYmaS5wdXNoKFwiJWMoaW4gXCIrby50b0ZpeGVkKDIpK1wiIG1zKVwiKSxpLmpvaW4oXCIgXCIpfX1mdW5jdGlvbiB4KGUsdCl7dmFyIHI9dC5sb2dnZXIsbj10LmFjdGlvblRyYW5zZm9ybWVyLG89dC50aXRsZUZvcm1hdHRlcixpPXZvaWQgMD09PW8/dyh0KTpvLGE9dC5jb2xsYXBzZWQsZj10LmNvbG9ycyx1PXQubGV2ZWwsbD10LmRpZmYsYz1cInVuZGVmaW5lZFwiPT10eXBlb2YgdC50aXRsZUZvcm1hdHRlcjtlLmZvckVhY2goZnVuY3Rpb24obyxzKXt2YXIgZD1vLnN0YXJ0ZWQscD1vLnN0YXJ0ZWRUaW1lLGc9by5hY3Rpb24saD1vLnByZXZTdGF0ZSx5PW8uZXJyb3Isdj1vLnRvb2ssdz1vLm5leHRTdGF0ZSx4PWVbcysxXTt4JiYodz14LnByZXZTdGF0ZSx2PXguc3RhcnRlZC1kKTt2YXIgUz1uKGcpLGs9XCJmdW5jdGlvblwiPT10eXBlb2YgYT9hKGZ1bmN0aW9uKCl7cmV0dXJuIHd9LGcsbyk6YSxqPUQocCksRT1mLnRpdGxlP1wiY29sb3I6IFwiK2YudGl0bGUoUykrXCI7XCI6XCJcIixBPVtcImNvbG9yOiBncmF5OyBmb250LXdlaWdodDogbGlnaHRlcjtcIl07QS5wdXNoKEUpLHQudGltZXN0YW1wJiZBLnB1c2goXCJjb2xvcjogZ3JheTsgZm9udC13ZWlnaHQ6IGxpZ2h0ZXI7XCIpLHQuZHVyYXRpb24mJkEucHVzaChcImNvbG9yOiBncmF5OyBmb250LXdlaWdodDogbGlnaHRlcjtcIik7dmFyIE89aShTLGosdik7dHJ5e2s/Zi50aXRsZSYmYz9yLmdyb3VwQ29sbGFwc2VkLmFwcGx5KHIsW1wiJWMgXCIrT10uY29uY2F0KEEpKTpyLmdyb3VwQ29sbGFwc2VkKE8pOmYudGl0bGUmJmM/ci5ncm91cC5hcHBseShyLFtcIiVjIFwiK09dLmNvbmNhdChBKSk6ci5ncm91cChPKX1jYXRjaChlKXtyLmxvZyhPKX12YXIgTj1tKHUsUyxbaF0sXCJwcmV2U3RhdGVcIiksUD1tKHUsUyxbU10sXCJhY3Rpb25cIiksQz1tKHUsUyxbeSxoXSxcImVycm9yXCIpLEY9bSh1LFMsW3ddLFwibmV4dFN0YXRlXCIpO2lmKE4paWYoZi5wcmV2U3RhdGUpe3ZhciBMPVwiY29sb3I6IFwiK2YucHJldlN0YXRlKGgpK1wiOyBmb250LXdlaWdodDogYm9sZFwiO3JbTl0oXCIlYyBwcmV2IHN0YXRlXCIsTCxoKX1lbHNlIHJbTl0oXCJwcmV2IHN0YXRlXCIsaCk7aWYoUClpZihmLmFjdGlvbil7dmFyIFQ9XCJjb2xvcjogXCIrZi5hY3Rpb24oUykrXCI7IGZvbnQtd2VpZ2h0OiBib2xkXCI7cltQXShcIiVjIGFjdGlvbiAgICBcIixULFMpfWVsc2UgcltQXShcImFjdGlvbiAgICBcIixTKTtpZih5JiZDKWlmKGYuZXJyb3Ipe3ZhciBNPVwiY29sb3I6IFwiK2YuZXJyb3IoeSxoKStcIjsgZm9udC13ZWlnaHQ6IGJvbGQ7XCI7cltDXShcIiVjIGVycm9yICAgICBcIixNLHkpfWVsc2UgcltDXShcImVycm9yICAgICBcIix5KTtpZihGKWlmKGYubmV4dFN0YXRlKXt2YXIgXz1cImNvbG9yOiBcIitmLm5leHRTdGF0ZSh3KStcIjsgZm9udC13ZWlnaHQ6IGJvbGRcIjtyW0ZdKFwiJWMgbmV4dCBzdGF0ZVwiLF8sdyl9ZWxzZSByW0ZdKFwibmV4dCBzdGF0ZVwiLHcpO2wmJmIoaCx3LHIsayk7dHJ5e3IuZ3JvdXBFbmQoKX1jYXRjaChlKXtyLmxvZyhcIuKAlOKAlCBsb2cgZW5kIOKAlOKAlFwiKX19KX1mdW5jdGlvbiBTKCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnt9LHQ9T2JqZWN0LmFzc2lnbih7fSxMLGUpLHI9dC5sb2dnZXIsbj10LnN0YXRlVHJhbnNmb3JtZXIsbz10LmVycm9yVHJhbnNmb3JtZXIsaT10LnByZWRpY2F0ZSxhPXQubG9nRXJyb3JzLGY9dC5kaWZmUHJlZGljYXRlO2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiByKXJldHVybiBmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24odCl7cmV0dXJuIGUodCl9fX07aWYoZS5nZXRTdGF0ZSYmZS5kaXNwYXRjaClyZXR1cm4gY29uc29sZS5lcnJvcihcIltyZWR1eC1sb2dnZXJdIHJlZHV4LWxvZ2dlciBub3QgaW5zdGFsbGVkLiBNYWtlIHN1cmUgdG8gcGFzcyBsb2dnZXIgaW5zdGFuY2UgYXMgbWlkZGxld2FyZTpcXG4vLyBMb2dnZXIgd2l0aCBkZWZhdWx0IG9wdGlvbnNcXG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICdyZWR1eC1sb2dnZXInXFxuY29uc3Qgc3RvcmUgPSBjcmVhdGVTdG9yZShcXG4gIHJlZHVjZXIsXFxuICBhcHBseU1pZGRsZXdhcmUobG9nZ2VyKVxcbilcXG4vLyBPciB5b3UgY2FuIGNyZWF0ZSB5b3VyIG93biBsb2dnZXIgd2l0aCBjdXN0b20gb3B0aW9ucyBodHRwOi8vYml0Lmx5L3JlZHV4LWxvZ2dlci1vcHRpb25zXFxuaW1wb3J0IGNyZWF0ZUxvZ2dlciBmcm9tICdyZWR1eC1sb2dnZXInXFxuY29uc3QgbG9nZ2VyID0gY3JlYXRlTG9nZ2VyKHtcXG4gIC8vIC4uLm9wdGlvbnNcXG59KTtcXG5jb25zdCBzdG9yZSA9IGNyZWF0ZVN0b3JlKFxcbiAgcmVkdWNlcixcXG4gIGFwcGx5TWlkZGxld2FyZShsb2dnZXIpXFxuKVxcblwiKSxmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24odCl7cmV0dXJuIGUodCl9fX07dmFyIHU9W107cmV0dXJuIGZ1bmN0aW9uKGUpe3ZhciByPWUuZ2V0U3RhdGU7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbihsKXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBpJiYhaShyLGwpKXJldHVybiBlKGwpO3ZhciBjPXt9O3UucHVzaChjKSxjLnN0YXJ0ZWQ9Ty5ub3coKSxjLnN0YXJ0ZWRUaW1lPW5ldyBEYXRlLGMucHJldlN0YXRlPW4ocigpKSxjLmFjdGlvbj1sO3ZhciBzPXZvaWQgMDtpZihhKXRyeXtzPWUobCl9Y2F0Y2goZSl7Yy5lcnJvcj1vKGUpfWVsc2Ugcz1lKGwpO2MudG9vaz1PLm5vdygpLWMuc3RhcnRlZCxjLm5leHRTdGF0ZT1uKHIoKSk7dmFyIGQ9dC5kaWZmJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBmP2YocixsKTp0LmRpZmY7aWYoeCh1LE9iamVjdC5hc3NpZ24oe30sdCx7ZGlmZjpkfSkpLHUubGVuZ3RoPTAsYy5lcnJvcil0aHJvdyBjLmVycm9yO3JldHVybiBzfX19fXZhciBrLGosRT1mdW5jdGlvbihlLHQpe3JldHVybiBuZXcgQXJyYXkodCsxKS5qb2luKGUpfSxBPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIEUoXCIwXCIsdC1lLnRvU3RyaW5nKCkubGVuZ3RoKStlfSxEPWZ1bmN0aW9uKGUpe3JldHVybiBBKGUuZ2V0SG91cnMoKSwyKStcIjpcIitBKGUuZ2V0TWludXRlcygpLDIpK1wiOlwiK0EoZS5nZXRTZWNvbmRzKCksMikrXCIuXCIrQShlLmdldE1pbGxpc2Vjb25kcygpLDMpfSxPPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBwZXJmb3JtYW5jZSYmbnVsbCE9PXBlcmZvcm1hbmNlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBwZXJmb3JtYW5jZS5ub3c/cGVyZm9ybWFuY2U6RGF0ZSxOPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbihlKXtyZXR1cm4gdHlwZW9mIGV9OmZ1bmN0aW9uKGUpe3JldHVybiBlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJmUuY29uc3RydWN0b3I9PT1TeW1ib2wmJmUhPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIGV9LFA9ZnVuY3Rpb24oZSl7aWYoQXJyYXkuaXNBcnJheShlKSl7Zm9yKHZhciB0PTAscj1BcnJheShlLmxlbmd0aCk7dDxlLmxlbmd0aDt0Kyspclt0XT1lW3RdO3JldHVybiByfXJldHVybiBBcnJheS5mcm9tKGUpfSxDPVtdO2s9XCJvYmplY3RcIj09PShcInVuZGVmaW5lZFwiPT10eXBlb2YgZ2xvYmFsP1widW5kZWZpbmVkXCI6TihnbG9iYWwpKSYmZ2xvYmFsP2dsb2JhbDpcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzp7fSxqPWsuRGVlcERpZmYsaiYmQy5wdXNoKGZ1bmN0aW9uKCl7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGomJmsuRGVlcERpZmY9PT1jJiYoay5EZWVwRGlmZj1qLGo9dm9pZCAwKX0pLHQobixyKSx0KG8sciksdChpLHIpLHQoYSxyKSxPYmplY3QuZGVmaW5lUHJvcGVydGllcyhjLHtkaWZmOnt2YWx1ZTpjLGVudW1lcmFibGU6ITB9LG9ic2VydmFibGVEaWZmOnt2YWx1ZTpsLGVudW1lcmFibGU6ITB9LGFwcGx5RGlmZjp7dmFsdWU6aCxlbnVtZXJhYmxlOiEwfSxhcHBseUNoYW5nZTp7dmFsdWU6ZCxlbnVtZXJhYmxlOiEwfSxyZXZlcnRDaGFuZ2U6e3ZhbHVlOmcsZW51bWVyYWJsZTohMH0saXNDb25mbGljdDp7dmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2Ygan0sZW51bWVyYWJsZTohMH0sbm9Db25mbGljdDp7dmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gQyYmKEMuZm9yRWFjaChmdW5jdGlvbihlKXtlKCl9KSxDPW51bGwpLGN9LGVudW1lcmFibGU6ITB9fSk7dmFyIEY9e0U6e2NvbG9yOlwiIzIxOTZGM1wiLHRleHQ6XCJDSEFOR0VEOlwifSxOOntjb2xvcjpcIiM0Q0FGNTBcIix0ZXh0OlwiQURERUQ6XCJ9LEQ6e2NvbG9yOlwiI0Y0NDMzNlwiLHRleHQ6XCJERUxFVEVEOlwifSxBOntjb2xvcjpcIiMyMTk2RjNcIix0ZXh0OlwiQVJSQVk6XCJ9fSxMPXtsZXZlbDpcImxvZ1wiLGxvZ2dlcjpjb25zb2xlLGxvZ0Vycm9yczohMCxjb2xsYXBzZWQ6dm9pZCAwLHByZWRpY2F0ZTp2b2lkIDAsZHVyYXRpb246ITEsdGltZXN0YW1wOiEwLHN0YXRlVHJhbnNmb3JtZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIGV9LGFjdGlvblRyYW5zZm9ybWVyOmZ1bmN0aW9uKGUpe3JldHVybiBlfSxlcnJvclRyYW5zZm9ybWVyOmZ1bmN0aW9uKGUpe3JldHVybiBlfSxjb2xvcnM6e3RpdGxlOmZ1bmN0aW9uKCl7cmV0dXJuXCJpbmhlcml0XCJ9LHByZXZTdGF0ZTpmdW5jdGlvbigpe3JldHVyblwiIzlFOUU5RVwifSxhY3Rpb246ZnVuY3Rpb24oKXtyZXR1cm5cIiMwM0E5RjRcIn0sbmV4dFN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuXCIjNENBRjUwXCJ9LGVycm9yOmZ1bmN0aW9uKCl7cmV0dXJuXCIjRjIwNDA0XCJ9fSxkaWZmOiExLGRpZmZQcmVkaWNhdGU6dm9pZCAwLHRyYW5zZm9ybWVyOnZvaWQgMH0sVD1mdW5jdGlvbigpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTp7fSx0PWUuZGlzcGF0Y2gscj1lLmdldFN0YXRlO3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIHR8fFwiZnVuY3Rpb25cIj09dHlwZW9mIHI/UygpKHtkaXNwYXRjaDp0LGdldFN0YXRlOnJ9KTp2b2lkIGNvbnNvbGUuZXJyb3IoXCJcXG5bcmVkdXgtbG9nZ2VyIHYzXSBCUkVBS0lORyBDSEFOR0VcXG5bcmVkdXgtbG9nZ2VyIHYzXSBTaW5jZSAzLjAuMCByZWR1eC1sb2dnZXIgZXhwb3J0cyBieSBkZWZhdWx0IGxvZ2dlciB3aXRoIGRlZmF1bHQgc2V0dGluZ3MuXFxuW3JlZHV4LWxvZ2dlciB2M10gQ2hhbmdlXFxuW3JlZHV4LWxvZ2dlciB2M10gaW1wb3J0IGNyZWF0ZUxvZ2dlciBmcm9tICdyZWR1eC1sb2dnZXInXFxuW3JlZHV4LWxvZ2dlciB2M10gdG9cXG5bcmVkdXgtbG9nZ2VyIHYzXSBpbXBvcnQgeyBjcmVhdGVMb2dnZXIgfSBmcm9tICdyZWR1eC1sb2dnZXInXFxuXCIpfTtlLmRlZmF1bHRzPUwsZS5jcmVhdGVMb2dnZXI9UyxlLmxvZ2dlcj1ULGUuZGVmYXVsdD1ULE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pfSk7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlc1NlY3JldDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJ2ZianMvbGliL2VtcHR5RnVuY3Rpb24nKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpbnZhcmlhbnQoXG4gICAgICBmYWxzZSxcbiAgICAgICdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICdVc2UgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKCkgdG8gY2FsbCB0aGVtLiAnICtcbiAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xuICAgICk7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltXG4gIH07XG5cbiAgUmVhY3RQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMgPSBlbXB0eUZ1bmN0aW9uO1xuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcmlnaW5hbE1vZHVsZSkge1xyXG5cdGlmICghb3JpZ2luYWxNb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XHJcblx0XHR2YXIgbW9kdWxlID0gT2JqZWN0LmNyZWF0ZShvcmlnaW5hbE1vZHVsZSk7XHJcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcclxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcclxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XHJcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXHJcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiZXhwb3J0c1wiLCB7XHJcblx0XHRcdGVudW1lcmFibGU6IHRydWVcclxuXHRcdH0pO1xyXG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XHJcblx0fVxyXG5cdHJldHVybiBtb2R1bGU7XHJcbn07XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IGNyZWF0ZVN0b3JlLCBhcHBseU1pZGRsZXdhcmUgfSBmcm9tICdyZWR1eCc7XHJcbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xyXG5pbXBvcnQgY3JlYXRlU2FnYU1pZGRsZXdhcmUgZnJvbSAncmVkdXgtc2FnYSc7XHJcbmltcG9ydCB7IGNyZWF0ZUxvZ2dlciB9IGZyb20gJ3JlZHV4LWxvZ2dlcic7XHJcblxyXG5pbXBvcnQgVG9wU2NyZWVuTWFwIGZyb20gJy4vVG9wU2NyZWVuTWFwLmpzJztcclxuaW1wb3J0IHJvb3RSZWR1Y2VyIGZyb20gJy4uL3JlZHVjZXJzL3Jvb3RSZWR1Y2VyLmpzJztcclxuXHJcbmltcG9ydCByb290U2FnYSBmcm9tICcuLi9zYWdhcy9yb290U2FnYS5qcyc7XHJcblxyXG5jb25zdCBzYWdhTWlkZGxld2FyZSA9IGNyZWF0ZVNhZ2FNaWRkbGV3YXJlKCk7XHJcbmNvbnN0IHN0b3JlID0gY3JlYXRlU3RvcmUocm9vdFJlZHVjZXIsIGFwcGx5TWlkZGxld2FyZShzYWdhTWlkZGxld2FyZSwgY3JlYXRlTG9nZ2VyKCkpKTtcclxuc2FnYU1pZGRsZXdhcmUucnVuKHJvb3RTYWdhKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJhc2UgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybihcclxuICAgICAgICAgICAgPFByb3ZpZGVyIHN0b3JlPXtzdG9yZX0+XHJcbiAgICAgICAgICAgICAgICA8VG9wU2NyZWVuTWFwIC8+XHJcbiAgICAgICAgICAgIDwvUHJvdmlkZXI+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChyZWdFeHAsIHJlcGxhY2UpIHtcbiAgdmFyIHJlcGxhY2VyID0gcmVwbGFjZSA9PT0gT2JqZWN0KHJlcGxhY2UpID8gZnVuY3Rpb24gKHBhcnQpIHtcbiAgICByZXR1cm4gcmVwbGFjZVtwYXJ0XTtcbiAgfSA6IHJlcGxhY2U7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gU3RyaW5nKGl0KS5yZXBsYWNlKHJlZ0V4cCwgcmVwbGFjZXIpO1xuICB9O1xufTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9iZW5qYW1pbmdyL1JleEV4cC5lc2NhcGVcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHJlID0gcmVxdWlyZSgnLi9fcmVwbGFjZXInKSgvW1xcXFxeJCorPy4oKXxbXFxde31dL2csICdcXFxcJCYnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWdFeHAnLCB7IGVzY2FwZTogZnVuY3Rpb24gZXNjYXBlKGl0KSB7IHJldHVybiAkcmUoaXQpOyB9IH0pO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9jb3JlLnJlZ2V4cC5lc2NhcGUnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLlJlZ0V4cC5lc2NhcGU7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBodHRwczovL3Jhdy5naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL21hc3Rlci9MSUNFTlNFIGZpbGUuIEFuXG4gKiBhZGRpdGlvbmFsIGdyYW50IG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW5cbiAqIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqL1xuXG4hKGZ1bmN0aW9uKGdsb2JhbCkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgT3AgPSBPYmplY3QucHJvdG90eXBlO1xuICB2YXIgaGFzT3duID0gT3AuaGFzT3duUHJvcGVydHk7XG4gIHZhciB1bmRlZmluZWQ7IC8vIE1vcmUgY29tcHJlc3NpYmxlIHRoYW4gdm9pZCAwLlxuICB2YXIgJFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbCA6IHt9O1xuICB2YXIgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiO1xuICB2YXIgYXN5bmNJdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuYXN5bmNJdGVyYXRvciB8fCBcIkBAYXN5bmNJdGVyYXRvclwiO1xuICB2YXIgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xuXG4gIHZhciBpbk1vZHVsZSA9IHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCI7XG4gIHZhciBydW50aW1lID0gZ2xvYmFsLnJlZ2VuZXJhdG9yUnVudGltZTtcbiAgaWYgKHJ1bnRpbWUpIHtcbiAgICBpZiAoaW5Nb2R1bGUpIHtcbiAgICAgIC8vIElmIHJlZ2VuZXJhdG9yUnVudGltZSBpcyBkZWZpbmVkIGdsb2JhbGx5IGFuZCB3ZSdyZSBpbiBhIG1vZHVsZSxcbiAgICAgIC8vIG1ha2UgdGhlIGV4cG9ydHMgb2JqZWN0IGlkZW50aWNhbCB0byByZWdlbmVyYXRvclJ1bnRpbWUuXG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IHJ1bnRpbWU7XG4gICAgfVxuICAgIC8vIERvbid0IGJvdGhlciBldmFsdWF0aW5nIHRoZSByZXN0IG9mIHRoaXMgZmlsZSBpZiB0aGUgcnVudGltZSB3YXNcbiAgICAvLyBhbHJlYWR5IGRlZmluZWQgZ2xvYmFsbHkuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRGVmaW5lIHRoZSBydW50aW1lIGdsb2JhbGx5IChhcyBleHBlY3RlZCBieSBnZW5lcmF0ZWQgY29kZSkgYXMgZWl0aGVyXG4gIC8vIG1vZHVsZS5leHBvcnRzIChpZiB3ZSdyZSBpbiBhIG1vZHVsZSkgb3IgYSBuZXcsIGVtcHR5IG9iamVjdC5cbiAgcnVudGltZSA9IGdsb2JhbC5yZWdlbmVyYXRvclJ1bnRpbWUgPSBpbk1vZHVsZSA/IG1vZHVsZS5leHBvcnRzIDoge307XG5cbiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIC8vIElmIG91dGVyRm4gcHJvdmlkZWQgYW5kIG91dGVyRm4ucHJvdG90eXBlIGlzIGEgR2VuZXJhdG9yLCB0aGVuIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yLlxuICAgIHZhciBwcm90b0dlbmVyYXRvciA9IG91dGVyRm4gJiYgb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IgPyBvdXRlckZuIDogR2VuZXJhdG9yO1xuICAgIHZhciBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSk7XG4gICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7XG5cbiAgICAvLyBUaGUgLl9pbnZva2UgbWV0aG9kIHVuaWZpZXMgdGhlIGltcGxlbWVudGF0aW9ucyBvZiB0aGUgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzLlxuICAgIGdlbmVyYXRvci5faW52b2tlID0gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcblxuICAgIHJldHVybiBnZW5lcmF0b3I7XG4gIH1cbiAgcnVudGltZS53cmFwID0gd3JhcDtcblxuICAvLyBUcnkvY2F0Y2ggaGVscGVyIHRvIG1pbmltaXplIGRlb3B0aW1pemF0aW9ucy4gUmV0dXJucyBhIGNvbXBsZXRpb25cbiAgLy8gcmVjb3JkIGxpa2UgY29udGV4dC50cnlFbnRyaWVzW2ldLmNvbXBsZXRpb24uIFRoaXMgaW50ZXJmYWNlIGNvdWxkXG4gIC8vIGhhdmUgYmVlbiAoYW5kIHdhcyBwcmV2aW91c2x5KSBkZXNpZ25lZCB0byB0YWtlIGEgY2xvc3VyZSB0byBiZVxuICAvLyBpbnZva2VkIHdpdGhvdXQgYXJndW1lbnRzLCBidXQgaW4gYWxsIHRoZSBjYXNlcyB3ZSBjYXJlIGFib3V0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhbiBleGlzdGluZyBtZXRob2Qgd2Ugd2FudCB0byBjYWxsLCBzbyB0aGVyZSdzIG5vIG5lZWRcbiAgLy8gdG8gY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIG9iamVjdC4gV2UgY2FuIGV2ZW4gZ2V0IGF3YXkgd2l0aCBhc3N1bWluZ1xuICAvLyB0aGUgbWV0aG9kIHRha2VzIGV4YWN0bHkgb25lIGFyZ3VtZW50LCBzaW5jZSB0aGF0IGhhcHBlbnMgdG8gYmUgdHJ1ZVxuICAvLyBpbiBldmVyeSBjYXNlLCBzbyB3ZSBkb24ndCBoYXZlIHRvIHRvdWNoIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBUaGVcbiAgLy8gb25seSBhZGRpdGlvbmFsIGFsbG9jYXRpb24gcmVxdWlyZWQgaXMgdGhlIGNvbXBsZXRpb24gcmVjb3JkLCB3aGljaFxuICAvLyBoYXMgYSBzdGFibGUgc2hhcGUgYW5kIHNvIGhvcGVmdWxseSBzaG91bGQgYmUgY2hlYXAgdG8gYWxsb2NhdGUuXG4gIGZ1bmN0aW9uIHRyeUNhdGNoKGZuLCBvYmosIGFyZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcIm5vcm1hbFwiLCBhcmc6IGZuLmNhbGwob2JqLCBhcmcpIH07XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcInRocm93XCIsIGFyZzogZXJyIH07XG4gICAgfVxuICB9XG5cbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkU3RhcnQgPSBcInN1c3BlbmRlZFN0YXJ0XCI7XG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkID0gXCJzdXNwZW5kZWRZaWVsZFwiO1xuICB2YXIgR2VuU3RhdGVFeGVjdXRpbmcgPSBcImV4ZWN1dGluZ1wiO1xuICB2YXIgR2VuU3RhdGVDb21wbGV0ZWQgPSBcImNvbXBsZXRlZFwiO1xuXG4gIC8vIFJldHVybmluZyB0aGlzIG9iamVjdCBmcm9tIHRoZSBpbm5lckZuIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXNcbiAgLy8gYnJlYWtpbmcgb3V0IG9mIHRoZSBkaXNwYXRjaCBzd2l0Y2ggc3RhdGVtZW50LlxuICB2YXIgQ29udGludWVTZW50aW5lbCA9IHt9O1xuXG4gIC8vIER1bW15IGNvbnN0cnVjdG9yIGZ1bmN0aW9ucyB0aGF0IHdlIHVzZSBhcyB0aGUgLmNvbnN0cnVjdG9yIGFuZFxuICAvLyAuY29uc3RydWN0b3IucHJvdG90eXBlIHByb3BlcnRpZXMgZm9yIGZ1bmN0aW9ucyB0aGF0IHJldHVybiBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0cy4gRm9yIGZ1bGwgc3BlYyBjb21wbGlhbmNlLCB5b3UgbWF5IHdpc2ggdG8gY29uZmlndXJlIHlvdXJcbiAgLy8gbWluaWZpZXIgbm90IHRvIG1hbmdsZSB0aGUgbmFtZXMgb2YgdGhlc2UgdHdvIGZ1bmN0aW9ucy5cbiAgZnVuY3Rpb24gR2VuZXJhdG9yKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9XG5cbiAgLy8gVGhpcyBpcyBhIHBvbHlmaWxsIGZvciAlSXRlcmF0b3JQcm90b3R5cGUlIGZvciBlbnZpcm9ubWVudHMgdGhhdFxuICAvLyBkb24ndCBuYXRpdmVseSBzdXBwb3J0IGl0LlxuICB2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcbiAgSXRlcmF0b3JQcm90b3R5cGVbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgdmFyIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8gJiYgZ2V0UHJvdG8oZ2V0UHJvdG8odmFsdWVzKFtdKSkpO1xuICBpZiAoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgJiZcbiAgICAgIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPcCAmJlxuICAgICAgaGFzT3duLmNhbGwoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sKSkge1xuICAgIC8vIFRoaXMgZW52aXJvbm1lbnQgaGFzIGEgbmF0aXZlICVJdGVyYXRvclByb3RvdHlwZSU7IHVzZSBpdCBpbnN0ZWFkXG4gICAgLy8gb2YgdGhlIHBvbHlmaWxsLlxuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gTmF0aXZlSXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cblxuICB2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPVxuICAgIEdlbmVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgR2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlID0gR3AuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvbjtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGVbdG9TdHJpbmdUYWdTeW1ib2xdID1cbiAgICBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcblxuICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZVxuICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLlxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICBwcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBydW50aW1lLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICB2YXIgY3RvciA9IHR5cGVvZiBnZW5GdW4gPT09IFwiZnVuY3Rpb25cIiAmJiBnZW5GdW4uY29uc3RydWN0b3I7XG4gICAgcmV0dXJuIGN0b3JcbiAgICAgID8gY3RvciA9PT0gR2VuZXJhdG9yRnVuY3Rpb24gfHxcbiAgICAgICAgLy8gRm9yIHRoZSBuYXRpdmUgR2VuZXJhdG9yRnVuY3Rpb24gY29uc3RydWN0b3IsIHRoZSBiZXN0IHdlIGNhblxuICAgICAgICAvLyBkbyBpcyB0byBjaGVjayBpdHMgLm5hbWUgcHJvcGVydHkuXG4gICAgICAgIChjdG9yLmRpc3BsYXlOYW1lIHx8IGN0b3IubmFtZSkgPT09IFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICAgICAgOiBmYWxzZTtcbiAgfTtcblxuICBydW50aW1lLm1hcmsgPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoZ2VuRnVuLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdlbkZ1bi5fX3Byb3RvX18gPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgICAgIGlmICghKHRvU3RyaW5nVGFnU3ltYm9sIGluIGdlbkZ1bikpIHtcbiAgICAgICAgZ2VuRnVuW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcbiAgICAgIH1cbiAgICB9XG4gICAgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApO1xuICAgIHJldHVybiBnZW5GdW47XG4gIH07XG5cbiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvXG4gIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0XG4gIC8vIGBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpYCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXNcbiAgLy8gbWVhbnQgdG8gYmUgYXdhaXRlZC5cbiAgcnVudGltZS5hd3JhcCA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB7IF9fYXdhaXQ6IGFyZyB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChnZW5lcmF0b3JbbWV0aG9kXSwgZ2VuZXJhdG9yLCBhcmcpO1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgcmVqZWN0KHJlY29yZC5hcmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlY29yZC5hcmc7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIikpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJ0aHJvd1wiLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uKHVud3JhcHBlZCkge1xuICAgICAgICAgIC8vIFdoZW4gYSB5aWVsZGVkIFByb21pc2UgaXMgcmVzb2x2ZWQsIGl0cyBmaW5hbCB2YWx1ZSBiZWNvbWVzXG4gICAgICAgICAgLy8gdGhlIC52YWx1ZSBvZiB0aGUgUHJvbWlzZTx7dmFsdWUsZG9uZX0+IHJlc3VsdCBmb3IgdGhlXG4gICAgICAgICAgLy8gY3VycmVudCBpdGVyYXRpb24uIElmIHRoZSBQcm9taXNlIGlzIHJlamVjdGVkLCBob3dldmVyLCB0aGVcbiAgICAgICAgICAvLyByZXN1bHQgZm9yIHRoaXMgaXRlcmF0aW9uIHdpbGwgYmUgcmVqZWN0ZWQgd2l0aCB0aGUgc2FtZVxuICAgICAgICAgIC8vIHJlYXNvbi4gTm90ZSB0aGF0IHJlamVjdGlvbnMgb2YgeWllbGRlZCBQcm9taXNlcyBhcmUgbm90XG4gICAgICAgICAgLy8gdGhyb3duIGJhY2sgaW50byB0aGUgZ2VuZXJhdG9yIGZ1bmN0aW9uLCBhcyBpcyB0aGUgY2FzZVxuICAgICAgICAgIC8vIHdoZW4gYW4gYXdhaXRlZCBQcm9taXNlIGlzIHJlamVjdGVkLiBUaGlzIGRpZmZlcmVuY2UgaW5cbiAgICAgICAgICAvLyBiZWhhdmlvciBiZXR3ZWVuIHlpZWxkIGFuZCBhd2FpdCBpcyBpbXBvcnRhbnQsIGJlY2F1c2UgaXRcbiAgICAgICAgICAvLyBhbGxvd3MgdGhlIGNvbnN1bWVyIHRvIGRlY2lkZSB3aGF0IHRvIGRvIHdpdGggdGhlIHlpZWxkZWRcbiAgICAgICAgICAvLyByZWplY3Rpb24gKHN3YWxsb3cgaXQgYW5kIGNvbnRpbnVlLCBtYW51YWxseSAudGhyb3cgaXQgYmFja1xuICAgICAgICAgIC8vIGludG8gdGhlIGdlbmVyYXRvciwgYWJhbmRvbiBpdGVyYXRpb24sIHdoYXRldmVyKS4gV2l0aFxuICAgICAgICAgIC8vIGF3YWl0LCBieSBjb250cmFzdCwgdGhlcmUgaXMgbm8gb3Bwb3J0dW5pdHkgdG8gZXhhbWluZSB0aGVcbiAgICAgICAgICAvLyByZWplY3Rpb24gcmVhc29uIG91dHNpZGUgdGhlIGdlbmVyYXRvciBmdW5jdGlvbiwgc28gdGhlXG4gICAgICAgICAgLy8gb25seSBvcHRpb24gaXMgdG8gdGhyb3cgaXQgZnJvbSB0aGUgYXdhaXQgZXhwcmVzc2lvbiwgYW5kXG4gICAgICAgICAgLy8gbGV0IHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24gaGFuZGxlIHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGdsb2JhbC5wcm9jZXNzID09PSBcIm9iamVjdFwiICYmIGdsb2JhbC5wcm9jZXNzLmRvbWFpbikge1xuICAgICAgaW52b2tlID0gZ2xvYmFsLnByb2Nlc3MuZG9tYWluLmJpbmQoaW52b2tlKTtcbiAgICB9XG5cbiAgICB2YXIgcHJldmlvdXNQcm9taXNlO1xuXG4gICAgZnVuY3Rpb24gZW5xdWV1ZShtZXRob2QsIGFyZykge1xuICAgICAgZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID1cbiAgICAgICAgLy8gSWYgZW5xdWV1ZSBoYXMgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIHdlIHdhbnQgdG8gd2FpdCB1bnRpbFxuICAgICAgICAvLyBhbGwgcHJldmlvdXMgUHJvbWlzZXMgaGF2ZSBiZWVuIHJlc29sdmVkIGJlZm9yZSBjYWxsaW5nIGludm9rZSxcbiAgICAgICAgLy8gc28gdGhhdCByZXN1bHRzIGFyZSBhbHdheXMgZGVsaXZlcmVkIGluIHRoZSBjb3JyZWN0IG9yZGVyLiBJZlxuICAgICAgICAvLyBlbnF1ZXVlIGhhcyBub3QgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIGl0IGlzIGltcG9ydGFudCB0b1xuICAgICAgICAvLyBjYWxsIGludm9rZSBpbW1lZGlhdGVseSwgd2l0aG91dCB3YWl0aW5nIG9uIGEgY2FsbGJhY2sgdG8gZmlyZSxcbiAgICAgICAgLy8gc28gdGhhdCB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhcyB0aGUgb3Bwb3J0dW5pdHkgdG8gZG9cbiAgICAgICAgLy8gYW55IG5lY2Vzc2FyeSBzZXR1cCBpbiBhIHByZWRpY3RhYmxlIHdheS4gVGhpcyBwcmVkaWN0YWJpbGl0eVxuICAgICAgICAvLyBpcyB3aHkgdGhlIFByb21pc2UgY29uc3RydWN0b3Igc3luY2hyb25vdXNseSBpbnZva2VzIGl0c1xuICAgICAgICAvLyBleGVjdXRvciBjYWxsYmFjaywgYW5kIHdoeSBhc3luYyBmdW5jdGlvbnMgc3luY2hyb25vdXNseVxuICAgICAgICAvLyBleGVjdXRlIGNvZGUgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdC4gU2luY2Ugd2UgaW1wbGVtZW50IHNpbXBsZVxuICAgICAgICAvLyBhc3luYyBmdW5jdGlvbnMgaW4gdGVybXMgb2YgYXN5bmMgZ2VuZXJhdG9ycywgaXQgaXMgZXNwZWNpYWxseVxuICAgICAgICAvLyBpbXBvcnRhbnQgdG8gZ2V0IHRoaXMgcmlnaHQsIGV2ZW4gdGhvdWdoIGl0IHJlcXVpcmVzIGNhcmUuXG4gICAgICAgIHByZXZpb3VzUHJvbWlzZSA/IHByZXZpb3VzUHJvbWlzZS50aGVuKFxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnLFxuICAgICAgICAgIC8vIEF2b2lkIHByb3BhZ2F0aW5nIGZhaWx1cmVzIHRvIFByb21pc2VzIHJldHVybmVkIGJ5IGxhdGVyXG4gICAgICAgICAgLy8gaW52b2NhdGlvbnMgb2YgdGhlIGl0ZXJhdG9yLlxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnXG4gICAgICAgICkgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpO1xuICAgIH1cblxuICAgIC8vIERlZmluZSB0aGUgdW5pZmllZCBoZWxwZXIgbWV0aG9kIHRoYXQgaXMgdXNlZCB0byBpbXBsZW1lbnQgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiAoc2VlIGRlZmluZUl0ZXJhdG9yTWV0aG9kcykuXG4gICAgdGhpcy5faW52b2tlID0gZW5xdWV1ZTtcbiAgfVxuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSk7XG4gIEFzeW5jSXRlcmF0b3IucHJvdG90eXBlW2FzeW5jSXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBydW50aW1lLkFzeW5jSXRlcmF0b3IgPSBBc3luY0l0ZXJhdG9yO1xuXG4gIC8vIE5vdGUgdGhhdCBzaW1wbGUgYXN5bmMgZnVuY3Rpb25zIGFyZSBpbXBsZW1lbnRlZCBvbiB0b3Agb2ZcbiAgLy8gQXN5bmNJdGVyYXRvciBvYmplY3RzOyB0aGV5IGp1c3QgcmV0dXJuIGEgUHJvbWlzZSBmb3IgdGhlIHZhbHVlIG9mXG4gIC8vIHRoZSBmaW5hbCByZXN1bHQgcHJvZHVjZWQgYnkgdGhlIGl0ZXJhdG9yLlxuICBydW50aW1lLmFzeW5jID0gZnVuY3Rpb24oaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKFxuICAgICAgd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdClcbiAgICApO1xuXG4gICAgcmV0dXJuIHJ1bnRpbWUuaXNHZW5lcmF0b3JGdW5jdGlvbihvdXRlckZuKVxuICAgICAgPyBpdGVyIC8vIElmIG91dGVyRm4gaXMgYSBnZW5lcmF0b3IsIHJldHVybiB0aGUgZnVsbCBpdGVyYXRvci5cbiAgICAgIDogaXRlci5uZXh0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0LmRvbmUgPyByZXN1bHQudmFsdWUgOiBpdGVyLm5leHQoKTtcbiAgICAgICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KSB7XG4gICAgdmFyIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydDtcblxuICAgIHJldHVybiBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcpIHtcbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVFeGVjdXRpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUNvbXBsZXRlZCkge1xuICAgICAgICBpZiAobWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICB0aHJvdyBhcmc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCZSBmb3JnaXZpbmcsIHBlciAyNS4zLjMuMy4zIG9mIHRoZSBzcGVjOlxuICAgICAgICAvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtZ2VuZXJhdG9ycmVzdW1lXG4gICAgICAgIHJldHVybiBkb25lUmVzdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnRleHQubWV0aG9kID0gbWV0aG9kO1xuICAgICAgY29udGV4dC5hcmcgPSBhcmc7XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGNvbnRleHQuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSkge1xuICAgICAgICAgIHZhciBkZWxlZ2F0ZVJlc3VsdCA9IG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0ID09PSBDb250aW51ZVNlbnRpbmVsKSBjb250aW51ZTtcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZVJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgICAgLy8gU2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgICAgICBjb250ZXh0LnNlbnQgPSBjb250ZXh0Ll9zZW50ID0gY29udGV4dC5hcmc7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0KSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgICAgdGhyb3cgY29udGV4dC5hcmc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZyk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICAgIGNvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIGNvbnRleHQuYXJnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlID0gR2VuU3RhdGVFeGVjdXRpbmc7XG5cbiAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIpIHtcbiAgICAgICAgICAvLyBJZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIGZyb20gaW5uZXJGbiwgd2UgbGVhdmUgc3RhdGUgPT09XG4gICAgICAgICAgLy8gR2VuU3RhdGVFeGVjdXRpbmcgYW5kIGxvb3AgYmFjayBmb3IgYW5vdGhlciBpbnZvY2F0aW9uLlxuICAgICAgICAgIHN0YXRlID0gY29udGV4dC5kb25lXG4gICAgICAgICAgICA/IEdlblN0YXRlQ29tcGxldGVkXG4gICAgICAgICAgICA6IEdlblN0YXRlU3VzcGVuZGVkWWllbGQ7XG5cbiAgICAgICAgICBpZiAocmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiByZWNvcmQuYXJnLFxuICAgICAgICAgICAgZG9uZTogY29udGV4dC5kb25lXG4gICAgICAgICAgfTtcblxuICAgICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgIC8vIERpc3BhdGNoIHRoZSBleGNlcHRpb24gYnkgbG9vcGluZyBiYWNrIGFyb3VuZCB0byB0aGVcbiAgICAgICAgICAvLyBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKSBjYWxsIGFib3ZlLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvLyBDYWxsIGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXShjb250ZXh0LmFyZykgYW5kIGhhbmRsZSB0aGVcbiAgLy8gcmVzdWx0LCBlaXRoZXIgYnkgcmV0dXJuaW5nIGEgeyB2YWx1ZSwgZG9uZSB9IHJlc3VsdCBmcm9tIHRoZVxuICAvLyBkZWxlZ2F0ZSBpdGVyYXRvciwgb3IgYnkgbW9kaWZ5aW5nIGNvbnRleHQubWV0aG9kIGFuZCBjb250ZXh0LmFyZyxcbiAgLy8gc2V0dGluZyBjb250ZXh0LmRlbGVnYXRlIHRvIG51bGwsIGFuZCByZXR1cm5pbmcgdGhlIENvbnRpbnVlU2VudGluZWwuXG4gIGZ1bmN0aW9uIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgbWV0aG9kID0gZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdO1xuICAgIGlmIChtZXRob2QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gQSAudGhyb3cgb3IgLnJldHVybiB3aGVuIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgbm8gLnRocm93XG4gICAgICAvLyBtZXRob2QgYWx3YXlzIHRlcm1pbmF0ZXMgdGhlIHlpZWxkKiBsb29wLlxuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIGlmIChkZWxlZ2F0ZS5pdGVyYXRvci5yZXR1cm4pIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIGEgcmV0dXJuIG1ldGhvZCwgZ2l2ZSBpdCBhXG4gICAgICAgICAgLy8gY2hhbmNlIHRvIGNsZWFuIHVwLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcblxuICAgICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICAvLyBJZiBtYXliZUludm9rZURlbGVnYXRlKGNvbnRleHQpIGNoYW5nZWQgY29udGV4dC5tZXRob2QgZnJvbVxuICAgICAgICAgICAgLy8gXCJyZXR1cm5cIiB0byBcInRocm93XCIsIGxldCB0aGF0IG92ZXJyaWRlIHRoZSBUeXBlRXJyb3IgYmVsb3cuXG4gICAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAndGhyb3cnIG1ldGhvZFwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKG1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGNvbnRleHQuYXJnKTtcblxuICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIGluZm8gPSByZWNvcmQuYXJnO1xuXG4gICAgaWYgKCEgaW5mbykge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKTtcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgaWYgKGluZm8uZG9uZSkge1xuICAgICAgLy8gQXNzaWduIHRoZSByZXN1bHQgb2YgdGhlIGZpbmlzaGVkIGRlbGVnYXRlIHRvIHRoZSB0ZW1wb3JhcnlcbiAgICAgIC8vIHZhcmlhYmxlIHNwZWNpZmllZCBieSBkZWxlZ2F0ZS5yZXN1bHROYW1lIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZTtcblxuICAgICAgLy8gUmVzdW1lIGV4ZWN1dGlvbiBhdCB0aGUgZGVzaXJlZCBsb2NhdGlvbiAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYztcblxuICAgICAgLy8gSWYgY29udGV4dC5tZXRob2Qgd2FzIFwidGhyb3dcIiBidXQgdGhlIGRlbGVnYXRlIGhhbmRsZWQgdGhlXG4gICAgICAvLyBleGNlcHRpb24sIGxldCB0aGUgb3V0ZXIgZ2VuZXJhdG9yIHByb2NlZWQgbm9ybWFsbHkuIElmXG4gICAgICAvLyBjb250ZXh0Lm1ldGhvZCB3YXMgXCJuZXh0XCIsIGZvcmdldCBjb250ZXh0LmFyZyBzaW5jZSBpdCBoYXMgYmVlblxuICAgICAgLy8gXCJjb25zdW1lZFwiIGJ5IHRoZSBkZWxlZ2F0ZSBpdGVyYXRvci4gSWYgY29udGV4dC5tZXRob2Qgd2FzXG4gICAgICAvLyBcInJldHVyblwiLCBhbGxvdyB0aGUgb3JpZ2luYWwgLnJldHVybiBjYWxsIHRvIGNvbnRpbnVlIGluIHRoZVxuICAgICAgLy8gb3V0ZXIgZ2VuZXJhdG9yLlxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kICE9PSBcInJldHVyblwiKSB7XG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlLXlpZWxkIHRoZSByZXN1bHQgcmV0dXJuZWQgYnkgdGhlIGRlbGVnYXRlIG1ldGhvZC5cbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cblxuICAgIC8vIFRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBpcyBmaW5pc2hlZCwgc28gZm9yZ2V0IGl0IGFuZCBjb250aW51ZSB3aXRoXG4gICAgLy8gdGhlIG91dGVyIGdlbmVyYXRvci5cbiAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgfVxuXG4gIC8vIERlZmluZSBHZW5lcmF0b3IucHJvdG90eXBlLntuZXh0LHRocm93LHJldHVybn0gaW4gdGVybXMgb2YgdGhlXG4gIC8vIHVuaWZpZWQgLl9pbnZva2UgaGVscGVyIG1ldGhvZC5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKTtcblxuICBHcFt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvclwiO1xuXG4gIC8vIEEgR2VuZXJhdG9yIHNob3VsZCBhbHdheXMgcmV0dXJuIGl0c2VsZiBhcyB0aGUgaXRlcmF0b3Igb2JqZWN0IHdoZW4gdGhlXG4gIC8vIEBAaXRlcmF0b3IgZnVuY3Rpb24gaXMgY2FsbGVkIG9uIGl0LiBTb21lIGJyb3dzZXJzJyBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlXG4gIC8vIGl0ZXJhdG9yIHByb3RvdHlwZSBjaGFpbiBpbmNvcnJlY3RseSBpbXBsZW1lbnQgdGhpcywgY2F1c2luZyB0aGUgR2VuZXJhdG9yXG4gIC8vIG9iamVjdCB0byBub3QgYmUgcmV0dXJuZWQgZnJvbSB0aGlzIGNhbGwuIFRoaXMgZW5zdXJlcyB0aGF0IGRvZXNuJ3QgaGFwcGVuLlxuICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL2lzc3Vlcy8yNzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgR3BbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgR3AudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCJbb2JqZWN0IEdlbmVyYXRvcl1cIjtcbiAgfTtcblxuICBmdW5jdGlvbiBwdXNoVHJ5RW50cnkobG9jcykge1xuICAgIHZhciBlbnRyeSA9IHsgdHJ5TG9jOiBsb2NzWzBdIH07XG5cbiAgICBpZiAoMSBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5jYXRjaExvYyA9IGxvY3NbMV07XG4gICAgfVxuXG4gICAgaWYgKDIgaW4gbG9jcykge1xuICAgICAgZW50cnkuZmluYWxseUxvYyA9IGxvY3NbMl07XG4gICAgICBlbnRyeS5hZnRlckxvYyA9IGxvY3NbM107XG4gICAgfVxuXG4gICAgdGhpcy50cnlFbnRyaWVzLnB1c2goZW50cnkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXRUcnlFbnRyeShlbnRyeSkge1xuICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uIHx8IHt9O1xuICAgIHJlY29yZC50eXBlID0gXCJub3JtYWxcIjtcbiAgICBkZWxldGUgcmVjb3JkLmFyZztcbiAgICBlbnRyeS5jb21wbGV0aW9uID0gcmVjb3JkO1xuICB9XG5cbiAgZnVuY3Rpb24gQ29udGV4dCh0cnlMb2NzTGlzdCkge1xuICAgIC8vIFRoZSByb290IGVudHJ5IG9iamVjdCAoZWZmZWN0aXZlbHkgYSB0cnkgc3RhdGVtZW50IHdpdGhvdXQgYSBjYXRjaFxuICAgIC8vIG9yIGEgZmluYWxseSBibG9jaykgZ2l2ZXMgdXMgYSBwbGFjZSB0byBzdG9yZSB2YWx1ZXMgdGhyb3duIGZyb21cbiAgICAvLyBsb2NhdGlvbnMgd2hlcmUgdGhlcmUgaXMgbm8gZW5jbG9zaW5nIHRyeSBzdGF0ZW1lbnQuXG4gICAgdGhpcy50cnlFbnRyaWVzID0gW3sgdHJ5TG9jOiBcInJvb3RcIiB9XTtcbiAgICB0cnlMb2NzTGlzdC5mb3JFYWNoKHB1c2hUcnlFbnRyeSwgdGhpcyk7XG4gICAgdGhpcy5yZXNldCh0cnVlKTtcbiAgfVxuXG4gIHJ1bnRpbWUua2V5cyA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgfVxuICAgIGtleXMucmV2ZXJzZSgpO1xuXG4gICAgLy8gUmF0aGVyIHRoYW4gcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGEgbmV4dCBtZXRob2QsIHdlIGtlZXBcbiAgICAvLyB0aGluZ3Mgc2ltcGxlIGFuZCByZXR1cm4gdGhlIG5leHQgZnVuY3Rpb24gaXRzZWxmLlxuICAgIHJldHVybiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgd2hpbGUgKGtleXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzLnBvcCgpO1xuICAgICAgICBpZiAoa2V5IGluIG9iamVjdCkge1xuICAgICAgICAgIG5leHQudmFsdWUgPSBrZXk7XG4gICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVG8gYXZvaWQgY3JlYXRpbmcgYW4gYWRkaXRpb25hbCBvYmplY3QsIHdlIGp1c3QgaGFuZyB0aGUgLnZhbHVlXG4gICAgICAvLyBhbmQgLmRvbmUgcHJvcGVydGllcyBvZmYgdGhlIG5leHQgZnVuY3Rpb24gb2JqZWN0IGl0c2VsZi4gVGhpc1xuICAgICAgLy8gYWxzbyBlbnN1cmVzIHRoYXQgdGhlIG1pbmlmaWVyIHdpbGwgbm90IGFub255bWl6ZSB0aGUgZnVuY3Rpb24uXG4gICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiB2YWx1ZXMoaXRlcmFibGUpIHtcbiAgICBpZiAoaXRlcmFibGUpIHtcbiAgICAgIHZhciBpdGVyYXRvck1ldGhvZCA9IGl0ZXJhYmxlW2l0ZXJhdG9yU3ltYm9sXTtcbiAgICAgIGlmIChpdGVyYXRvck1ldGhvZCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JNZXRob2QuY2FsbChpdGVyYWJsZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgaXRlcmFibGUubmV4dCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBpdGVyYWJsZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc05hTihpdGVyYWJsZS5sZW5ndGgpKSB7XG4gICAgICAgIHZhciBpID0gLTEsIG5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBpdGVyYWJsZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChpdGVyYWJsZSwgaSkpIHtcbiAgICAgICAgICAgICAgbmV4dC52YWx1ZSA9IGl0ZXJhYmxlW2ldO1xuICAgICAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV4dC52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuXG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG5leHQubmV4dCA9IG5leHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGFuIGl0ZXJhdG9yIHdpdGggbm8gdmFsdWVzLlxuICAgIHJldHVybiB7IG5leHQ6IGRvbmVSZXN1bHQgfTtcbiAgfVxuICBydW50aW1lLnZhbHVlcyA9IHZhbHVlcztcblxuICBmdW5jdGlvbiBkb25lUmVzdWx0KCkge1xuICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfVxuXG4gIENvbnRleHQucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBDb250ZXh0LFxuXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKHNraXBUZW1wUmVzZXQpIHtcbiAgICAgIHRoaXMucHJldiA9IDA7XG4gICAgICB0aGlzLm5leHQgPSAwO1xuICAgICAgLy8gUmVzZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICB0aGlzLnNlbnQgPSB0aGlzLl9zZW50ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICB0aGlzLmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuXG4gICAgICB0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChyZXNldFRyeUVudHJ5KTtcblxuICAgICAgaWYgKCFza2lwVGVtcFJlc2V0KSB7XG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcykge1xuICAgICAgICAgIC8vIE5vdCBzdXJlIGFib3V0IHRoZSBvcHRpbWFsIG9yZGVyIG9mIHRoZXNlIGNvbmRpdGlvbnM6XG4gICAgICAgICAgaWYgKG5hbWUuY2hhckF0KDApID09PSBcInRcIiAmJlxuICAgICAgICAgICAgICBoYXNPd24uY2FsbCh0aGlzLCBuYW1lKSAmJlxuICAgICAgICAgICAgICAhaXNOYU4oK25hbWUuc2xpY2UoMSkpKSB7XG4gICAgICAgICAgICB0aGlzW25hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG5cbiAgICAgIHZhciByb290RW50cnkgPSB0aGlzLnRyeUVudHJpZXNbMF07XG4gICAgICB2YXIgcm9vdFJlY29yZCA9IHJvb3RFbnRyeS5jb21wbGV0aW9uO1xuICAgICAgaWYgKHJvb3RSZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJvb3RSZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5ydmFsO1xuICAgIH0sXG5cbiAgICBkaXNwYXRjaEV4Y2VwdGlvbjogZnVuY3Rpb24oZXhjZXB0aW9uKSB7XG4gICAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAgIHRocm93IGV4Y2VwdGlvbjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuICAgICAgZnVuY3Rpb24gaGFuZGxlKGxvYywgY2F1Z2h0KSB7XG4gICAgICAgIHJlY29yZC50eXBlID0gXCJ0aHJvd1wiO1xuICAgICAgICByZWNvcmQuYXJnID0gZXhjZXB0aW9uO1xuICAgICAgICBjb250ZXh0Lm5leHQgPSBsb2M7XG5cbiAgICAgICAgaWYgKGNhdWdodCkge1xuICAgICAgICAgIC8vIElmIHRoZSBkaXNwYXRjaGVkIGV4Y2VwdGlvbiB3YXMgY2F1Z2h0IGJ5IGEgY2F0Y2ggYmxvY2ssXG4gICAgICAgICAgLy8gdGhlbiBsZXQgdGhhdCBjYXRjaCBibG9jayBoYW5kbGUgdGhlIGV4Y2VwdGlvbiBub3JtYWxseS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICEhIGNhdWdodDtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IFwicm9vdFwiKSB7XG4gICAgICAgICAgLy8gRXhjZXB0aW9uIHRocm93biBvdXRzaWRlIG9mIGFueSB0cnkgYmxvY2sgdGhhdCBjb3VsZCBoYW5kbGVcbiAgICAgICAgICAvLyBpdCwgc28gc2V0IHRoZSBjb21wbGV0aW9uIHZhbHVlIG9mIHRoZSBlbnRpcmUgZnVuY3Rpb24gdG9cbiAgICAgICAgICAvLyB0aHJvdyB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJldHVybiBoYW5kbGUoXCJlbmRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldikge1xuICAgICAgICAgIHZhciBoYXNDYXRjaCA9IGhhc093bi5jYWxsKGVudHJ5LCBcImNhdGNoTG9jXCIpO1xuICAgICAgICAgIHZhciBoYXNGaW5hbGx5ID0gaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKTtcblxuICAgICAgICAgIGlmIChoYXNDYXRjaCAmJiBoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzQ2F0Y2gpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYWJydXB0OiBmdW5jdGlvbih0eXBlLCBhcmcpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKSAmJlxuICAgICAgICAgICAgdGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgIHZhciBmaW5hbGx5RW50cnkgPSBlbnRyeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZmluYWxseUVudHJ5ICYmXG4gICAgICAgICAgKHR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgICB0eXBlID09PSBcImNvbnRpbnVlXCIpICYmXG4gICAgICAgICAgZmluYWxseUVudHJ5LnRyeUxvYyA8PSBhcmcgJiZcbiAgICAgICAgICBhcmcgPD0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgLy8gSWdub3JlIHRoZSBmaW5hbGx5IGVudHJ5IGlmIGNvbnRyb2wgaXMgbm90IGp1bXBpbmcgdG8gYVxuICAgICAgICAvLyBsb2NhdGlvbiBvdXRzaWRlIHRoZSB0cnkvY2F0Y2ggYmxvY2suXG4gICAgICAgIGZpbmFsbHlFbnRyeSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWNvcmQgPSBmaW5hbGx5RW50cnkgPyBmaW5hbGx5RW50cnkuY29tcGxldGlvbiA6IHt9O1xuICAgICAgcmVjb3JkLnR5cGUgPSB0eXBlO1xuICAgICAgcmVjb3JkLmFyZyA9IGFyZztcblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSkge1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICB0aGlzLm5leHQgPSBmaW5hbGx5RW50cnkuZmluYWxseUxvYztcbiAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmNvbXBsZXRlKHJlY29yZCk7XG4gICAgfSxcblxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbihyZWNvcmQsIGFmdGVyTG9jKSB7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgIHJlY29yZC50eXBlID09PSBcImNvbnRpbnVlXCIpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gcmVjb3JkLmFyZztcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgdGhpcy5ydmFsID0gdGhpcy5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgIHRoaXMubmV4dCA9IFwiZW5kXCI7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiICYmIGFmdGVyTG9jKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IGFmdGVyTG9jO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9LFxuXG4gICAgZmluaXNoOiBmdW5jdGlvbihmaW5hbGx5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB0aGlzLmNvbXBsZXRlKGVudHJ5LmNvbXBsZXRpb24sIGVudHJ5LmFmdGVyTG9jKTtcbiAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBcImNhdGNoXCI6IGZ1bmN0aW9uKHRyeUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IHRyeUxvYykge1xuICAgICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICB2YXIgdGhyb3duID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhyb3duO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBjb250ZXh0LmNhdGNoIG1ldGhvZCBtdXN0IG9ubHkgYmUgY2FsbGVkIHdpdGggYSBsb2NhdGlvblxuICAgICAgLy8gYXJndW1lbnQgdGhhdCBjb3JyZXNwb25kcyB0byBhIGtub3duIGNhdGNoIGJsb2NrLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xuICAgIH0sXG5cbiAgICBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbihpdGVyYWJsZSwgcmVzdWx0TmFtZSwgbmV4dExvYykge1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IHtcbiAgICAgICAgaXRlcmF0b3I6IHZhbHVlcyhpdGVyYWJsZSksXG4gICAgICAgIHJlc3VsdE5hbWU6IHJlc3VsdE5hbWUsXG4gICAgICAgIG5leHRMb2M6IG5leHRMb2NcbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgLy8gRGVsaWJlcmF0ZWx5IGZvcmdldCB0aGUgbGFzdCBzZW50IHZhbHVlIHNvIHRoYXQgd2UgZG9uJ3RcbiAgICAgICAgLy8gYWNjaWRlbnRhbGx5IHBhc3MgaXQgb24gdG8gdGhlIGRlbGVnYXRlLlxuICAgICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuICB9O1xufSkoXG4gIC8vIEFtb25nIHRoZSB2YXJpb3VzIHRyaWNrcyBmb3Igb2J0YWluaW5nIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWxcbiAgLy8gb2JqZWN0LCB0aGlzIHNlZW1zIHRvIGJlIHRoZSBtb3N0IHJlbGlhYmxlIHRlY2huaXF1ZSB0aGF0IGRvZXMgbm90XG4gIC8vIHVzZSBpbmRpcmVjdCBldmFsICh3aGljaCB2aW9sYXRlcyBDb250ZW50IFNlY3VyaXR5IFBvbGljeSkuXG4gIHR5cGVvZiBnbG9iYWwgPT09IFwib2JqZWN0XCIgPyBnbG9iYWwgOlxuICB0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiID8gd2luZG93IDpcbiAgdHlwZW9mIHNlbGYgPT09IFwib2JqZWN0XCIgPyBzZWxmIDogdGhpc1xuKTtcbiIsInZhciAkaXRlcmF0b3JzID0gcmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbnZhciBJVEVSQVRPUiA9IHdrcygnaXRlcmF0b3InKTtcbnZhciBUT19TVFJJTkdfVEFHID0gd2tzKCd0b1N0cmluZ1RhZycpO1xudmFyIEFycmF5VmFsdWVzID0gSXRlcmF0b3JzLkFycmF5O1xuXG52YXIgRE9NSXRlcmFibGVzID0ge1xuICBDU1NSdWxlTGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIENTU1N0eWxlRGVjbGFyYXRpb246IGZhbHNlLFxuICBDU1NWYWx1ZUxpc3Q6IGZhbHNlLFxuICBDbGllbnRSZWN0TGlzdDogZmFsc2UsXG4gIERPTVJlY3RMaXN0OiBmYWxzZSxcbiAgRE9NU3RyaW5nTGlzdDogZmFsc2UsXG4gIERPTVRva2VuTGlzdDogdHJ1ZSxcbiAgRGF0YVRyYW5zZmVySXRlbUxpc3Q6IGZhbHNlLFxuICBGaWxlTGlzdDogZmFsc2UsXG4gIEhUTUxBbGxDb2xsZWN0aW9uOiBmYWxzZSxcbiAgSFRNTENvbGxlY3Rpb246IGZhbHNlLFxuICBIVE1MRm9ybUVsZW1lbnQ6IGZhbHNlLFxuICBIVE1MU2VsZWN0RWxlbWVudDogZmFsc2UsXG4gIE1lZGlhTGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIE1pbWVUeXBlQXJyYXk6IGZhbHNlLFxuICBOYW1lZE5vZGVNYXA6IGZhbHNlLFxuICBOb2RlTGlzdDogdHJ1ZSxcbiAgUGFpbnRSZXF1ZXN0TGlzdDogZmFsc2UsXG4gIFBsdWdpbjogZmFsc2UsXG4gIFBsdWdpbkFycmF5OiBmYWxzZSxcbiAgU1ZHTGVuZ3RoTGlzdDogZmFsc2UsXG4gIFNWR051bWJlckxpc3Q6IGZhbHNlLFxuICBTVkdQYXRoU2VnTGlzdDogZmFsc2UsXG4gIFNWR1BvaW50TGlzdDogZmFsc2UsXG4gIFNWR1N0cmluZ0xpc3Q6IGZhbHNlLFxuICBTVkdUcmFuc2Zvcm1MaXN0OiBmYWxzZSxcbiAgU291cmNlQnVmZmVyTGlzdDogZmFsc2UsXG4gIFN0eWxlU2hlZXRMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgVGV4dFRyYWNrQ3VlTGlzdDogZmFsc2UsXG4gIFRleHRUcmFja0xpc3Q6IGZhbHNlLFxuICBUb3VjaExpc3Q6IGZhbHNlXG59O1xuXG5mb3IgKHZhciBjb2xsZWN0aW9ucyA9IGdldEtleXMoRE9NSXRlcmFibGVzKSwgaSA9IDA7IGkgPCBjb2xsZWN0aW9ucy5sZW5ndGg7IGkrKykge1xuICB2YXIgTkFNRSA9IGNvbGxlY3Rpb25zW2ldO1xuICB2YXIgZXhwbGljaXQgPSBET01JdGVyYWJsZXNbTkFNRV07XG4gIHZhciBDb2xsZWN0aW9uID0gZ2xvYmFsW05BTUVdO1xuICB2YXIgcHJvdG8gPSBDb2xsZWN0aW9uICYmIENvbGxlY3Rpb24ucHJvdG90eXBlO1xuICB2YXIga2V5O1xuICBpZiAocHJvdG8pIHtcbiAgICBpZiAoIXByb3RvW0lURVJBVE9SXSkgaGlkZShwcm90bywgSVRFUkFUT1IsIEFycmF5VmFsdWVzKTtcbiAgICBpZiAoIXByb3RvW1RPX1NUUklOR19UQUddKSBoaWRlKHByb3RvLCBUT19TVFJJTkdfVEFHLCBOQU1FKTtcbiAgICBJdGVyYXRvcnNbTkFNRV0gPSBBcnJheVZhbHVlcztcbiAgICBpZiAoZXhwbGljaXQpIGZvciAoa2V5IGluICRpdGVyYXRvcnMpIGlmICghcHJvdG9ba2V5XSkgcmVkZWZpbmUocHJvdG8sIGtleSwgJGl0ZXJhdG9yc1trZXldLCB0cnVlKTtcbiAgfVxufVxuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5CLCB7XG4gIHNldEltbWVkaWF0ZTogJHRhc2suc2V0LFxuICBjbGVhckltbWVkaWF0ZTogJHRhc2suY2xlYXJcbn0pO1xuIiwiLy8gaWU5LSBzZXRUaW1lb3V0ICYgc2V0SW50ZXJ2YWwgYWRkaXRpb25hbCBwYXJhbWV0ZXJzIGZpeFxudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuL191c2VyLWFnZW50Jyk7XG52YXIgc2xpY2UgPSBbXS5zbGljZTtcbnZhciBNU0lFID0gL01TSUUgLlxcLi8udGVzdCh1c2VyQWdlbnQpOyAvLyA8LSBkaXJ0eSBpZTktIGNoZWNrXG52YXIgd3JhcCA9IGZ1bmN0aW9uIChzZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChmbiwgdGltZSAvKiAsIC4uLmFyZ3MgKi8pIHtcbiAgICB2YXIgYm91bmRBcmdzID0gYXJndW1lbnRzLmxlbmd0aCA+IDI7XG4gICAgdmFyIGFyZ3MgPSBib3VuZEFyZ3MgPyBzbGljZS5jYWxsKGFyZ3VtZW50cywgMikgOiBmYWxzZTtcbiAgICByZXR1cm4gc2V0KGJvdW5kQXJncyA/IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgICAgKHR5cGVvZiBmbiA9PSAnZnVuY3Rpb24nID8gZm4gOiBGdW5jdGlvbihmbikpLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH0gOiBmbiwgdGltZSk7XG4gIH07XG59O1xuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkIgKyAkZXhwb3J0LkYgKiBNU0lFLCB7XG4gIHNldFRpbWVvdXQ6IHdyYXAoZ2xvYmFsLnNldFRpbWVvdXQpLFxuICBzZXRJbnRlcnZhbDogd3JhcChnbG9iYWwuc2V0SW50ZXJ2YWwpXG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96ZW5wYXJzaW5nL2VzLW9ic2VydmFibGVcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBtaWNyb3Rhc2sgPSByZXF1aXJlKCcuL19taWNyb3Rhc2snKSgpO1xudmFyIE9CU0VSVkFCTEUgPSByZXF1aXJlKCcuL193a3MnKSgnb2JzZXJ2YWJsZScpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIFJFVFVSTiA9IGZvck9mLlJFVFVSTjtcblxudmFyIGdldE1ldGhvZCA9IGZ1bmN0aW9uIChmbikge1xuICByZXR1cm4gZm4gPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGFGdW5jdGlvbihmbik7XG59O1xuXG52YXIgY2xlYW51cFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgdmFyIGNsZWFudXAgPSBzdWJzY3JpcHRpb24uX2M7XG4gIGlmIChjbGVhbnVwKSB7XG4gICAgc3Vic2NyaXB0aW9uLl9jID0gdW5kZWZpbmVkO1xuICAgIGNsZWFudXAoKTtcbiAgfVxufTtcblxudmFyIHN1YnNjcmlwdGlvbkNsb3NlZCA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgcmV0dXJuIHN1YnNjcmlwdGlvbi5fbyA9PT0gdW5kZWZpbmVkO1xufTtcblxudmFyIGNsb3NlU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICBpZiAoIXN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKSB7XG4gICAgc3Vic2NyaXB0aW9uLl9vID0gdW5kZWZpbmVkO1xuICAgIGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgfVxufTtcblxudmFyIFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIChvYnNlcnZlciwgc3Vic2NyaWJlcikge1xuICBhbk9iamVjdChvYnNlcnZlcik7XG4gIHRoaXMuX2MgPSB1bmRlZmluZWQ7XG4gIHRoaXMuX28gPSBvYnNlcnZlcjtcbiAgb2JzZXJ2ZXIgPSBuZXcgU3Vic2NyaXB0aW9uT2JzZXJ2ZXIodGhpcyk7XG4gIHRyeSB7XG4gICAgdmFyIGNsZWFudXAgPSBzdWJzY3JpYmVyKG9ic2VydmVyKTtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gY2xlYW51cDtcbiAgICBpZiAoY2xlYW51cCAhPSBudWxsKSB7XG4gICAgICBpZiAodHlwZW9mIGNsZWFudXAudW5zdWJzY3JpYmUgPT09ICdmdW5jdGlvbicpIGNsZWFudXAgPSBmdW5jdGlvbiAoKSB7IHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpOyB9O1xuICAgICAgZWxzZSBhRnVuY3Rpb24oY2xlYW51cCk7XG4gICAgICB0aGlzLl9jID0gY2xlYW51cDtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBvYnNlcnZlci5lcnJvcihlKTtcbiAgICByZXR1cm47XG4gIH0gaWYgKHN1YnNjcmlwdGlvbkNsb3NlZCh0aGlzKSkgY2xlYW51cFN1YnNjcmlwdGlvbih0aGlzKTtcbn07XG5cblN1YnNjcmlwdGlvbi5wcm90b3R5cGUgPSByZWRlZmluZUFsbCh7fSwge1xuICB1bnN1YnNjcmliZTogZnVuY3Rpb24gdW5zdWJzY3JpYmUoKSB7IGNsb3NlU3Vic2NyaXB0aW9uKHRoaXMpOyB9XG59KTtcblxudmFyIFN1YnNjcmlwdGlvbk9ic2VydmVyID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICB0aGlzLl9zID0gc3Vic2NyaXB0aW9uO1xufTtcblxuU3Vic2NyaXB0aW9uT2JzZXJ2ZXIucHJvdG90eXBlID0gcmVkZWZpbmVBbGwoe30sIHtcbiAgbmV4dDogZnVuY3Rpb24gbmV4dCh2YWx1ZSkge1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGlzLl9zO1xuICAgIGlmICghc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvbikpIHtcbiAgICAgIHZhciBvYnNlcnZlciA9IHN1YnNjcmlwdGlvbi5fbztcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBtID0gZ2V0TWV0aG9kKG9ic2VydmVyLm5leHQpO1xuICAgICAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvYnNlcnZlciwgdmFsdWUpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNsb3NlU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgZXJyb3I6IGZ1bmN0aW9uIGVycm9yKHZhbHVlKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuX3M7XG4gICAgaWYgKHN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKSB0aHJvdyB2YWx1ZTtcbiAgICB2YXIgb2JzZXJ2ZXIgPSBzdWJzY3JpcHRpb24uX287XG4gICAgc3Vic2NyaXB0aW9uLl9vID0gdW5kZWZpbmVkO1xuICAgIHRyeSB7XG4gICAgICB2YXIgbSA9IGdldE1ldGhvZChvYnNlcnZlci5lcnJvcik7XG4gICAgICBpZiAoIW0pIHRocm93IHZhbHVlO1xuICAgICAgdmFsdWUgPSBtLmNhbGwob2JzZXJ2ZXIsIHZhbHVlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH0gY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfSxcbiAgY29tcGxldGU6IGZ1bmN0aW9uIGNvbXBsZXRlKHZhbHVlKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuX3M7XG4gICAgaWYgKCFzdWJzY3JpcHRpb25DbG9zZWQoc3Vic2NyaXB0aW9uKSkge1xuICAgICAgdmFyIG9ic2VydmVyID0gc3Vic2NyaXB0aW9uLl9vO1xuICAgICAgc3Vic2NyaXB0aW9uLl9vID0gdW5kZWZpbmVkO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIG0gPSBnZXRNZXRob2Qob2JzZXJ2ZXIuY29tcGxldGUpO1xuICAgICAgICB2YWx1ZSA9IG0gPyBtLmNhbGwob2JzZXJ2ZXIsIHZhbHVlKSA6IHVuZGVmaW5lZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfSBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICB9XG59KTtcblxudmFyICRPYnNlcnZhYmxlID0gZnVuY3Rpb24gT2JzZXJ2YWJsZShzdWJzY3JpYmVyKSB7XG4gIGFuSW5zdGFuY2UodGhpcywgJE9ic2VydmFibGUsICdPYnNlcnZhYmxlJywgJ19mJykuX2YgPSBhRnVuY3Rpb24oc3Vic2NyaWJlcik7XG59O1xuXG5yZWRlZmluZUFsbCgkT2JzZXJ2YWJsZS5wcm90b3R5cGUsIHtcbiAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUob2JzZXJ2ZXIpIHtcbiAgICByZXR1cm4gbmV3IFN1YnNjcmlwdGlvbihvYnNlcnZlciwgdGhpcy5fZik7XG4gIH0sXG4gIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcbiAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgcmV0dXJuIG5ldyAoY29yZS5Qcm9taXNlIHx8IGdsb2JhbC5Qcm9taXNlKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBhRnVuY3Rpb24oZm4pO1xuICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoYXQuc3Vic2NyaWJlKHtcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBmbih2YWx1ZSk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBlcnJvcjogcmVqZWN0LFxuICAgICAgICBjb21wbGV0ZTogcmVzb2x2ZVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn0pO1xuXG5yZWRlZmluZUFsbCgkT2JzZXJ2YWJsZSwge1xuICBmcm9tOiBmdW5jdGlvbiBmcm9tKHgpIHtcbiAgICB2YXIgQyA9IHR5cGVvZiB0aGlzID09PSAnZnVuY3Rpb24nID8gdGhpcyA6ICRPYnNlcnZhYmxlO1xuICAgIHZhciBtZXRob2QgPSBnZXRNZXRob2QoYW5PYmplY3QoeClbT0JTRVJWQUJMRV0pO1xuICAgIGlmIChtZXRob2QpIHtcbiAgICAgIHZhciBvYnNlcnZhYmxlID0gYW5PYmplY3QobWV0aG9kLmNhbGwoeCkpO1xuICAgICAgcmV0dXJuIG9ic2VydmFibGUuY29uc3RydWN0b3IgPT09IEMgPyBvYnNlcnZhYmxlIDogbmV3IEMoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlLnN1YnNjcmliZShvYnNlcnZlcik7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBDKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgdmFyIGRvbmUgPSBmYWxzZTtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghZG9uZSkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoZm9yT2YoeCwgZmFsc2UsIGZ1bmN0aW9uIChpdCkge1xuICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KGl0KTtcbiAgICAgICAgICAgICAgaWYgKGRvbmUpIHJldHVybiBSRVRVUk47XG4gICAgICAgICAgICB9KSA9PT0gUkVUVVJOKSByZXR1cm47XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgaWYgKGRvbmUpIHRocm93IGU7XG4gICAgICAgICAgICBvYnNlcnZlci5lcnJvcihlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9IG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgZG9uZSA9IHRydWU7IH07XG4gICAgfSk7XG4gIH0sXG4gIG9mOiBmdW5jdGlvbiBvZigpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGgsIGl0ZW1zID0gbmV3IEFycmF5KGwpOyBpIDwgbDspIGl0ZW1zW2ldID0gYXJndW1lbnRzW2krK107XG4gICAgcmV0dXJuIG5ldyAodHlwZW9mIHRoaXMgPT09ICdmdW5jdGlvbicgPyB0aGlzIDogJE9ic2VydmFibGUpKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgdmFyIGRvbmUgPSBmYWxzZTtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghZG9uZSkge1xuICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgaXRlbXMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgIG9ic2VydmVyLm5leHQoaXRlbXNbal0pO1xuICAgICAgICAgICAgaWYgKGRvbmUpIHJldHVybjtcbiAgICAgICAgICB9IG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgZG9uZSA9IHRydWU7IH07XG4gICAgfSk7XG4gIH1cbn0pO1xuXG5oaWRlKCRPYnNlcnZhYmxlLnByb3RvdHlwZSwgT0JTRVJWQUJMRSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSk7XG5cbiRleHBvcnQoJGV4cG9ydC5HLCB7IE9ic2VydmFibGU6ICRPYnNlcnZhYmxlIH0pO1xuXG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKCdPYnNlcnZhYmxlJyk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vcndhbGRyb24vdGMzOS1ub3Rlcy9ibG9iL21hc3Rlci9lczYvMjAxNC0wOS9zZXB0LTI1Lm1kIzUxMC1nbG9iYWxhc2FwLWZvci1lbnF1ZXVpbmctYS1taWNyb3Rhc2tcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgbWljcm90YXNrID0gcmVxdWlyZSgnLi9fbWljcm90YXNrJykoKTtcbnZhciBwcm9jZXNzID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykucHJvY2VzcztcbnZhciBpc05vZGUgPSByZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG5cbiRleHBvcnQoJGV4cG9ydC5HLCB7XG4gIGFzYXA6IGZ1bmN0aW9uIGFzYXAoZm4pIHtcbiAgICB2YXIgZG9tYWluID0gaXNOb2RlICYmIHByb2Nlc3MuZG9tYWluO1xuICAgIG1pY3JvdGFzayhkb21haW4gPyBkb21haW4uYmluZChmbikgOiBmbik7XG4gIH1cbn0pO1xuIiwidmFyICRtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgdG9NZXRhS2V5ID0gJG1ldGFkYXRhLmtleTtcbnZhciBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhID0gJG1ldGFkYXRhLnNldDtcblxuJG1ldGFkYXRhLmV4cCh7IG1ldGFkYXRhOiBmdW5jdGlvbiBtZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24gZGVjb3JhdG9yKHRhcmdldCwgdGFyZ2V0S2V5KSB7XG4gICAgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YShcbiAgICAgIG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlLFxuICAgICAgKHRhcmdldEtleSAhPT0gdW5kZWZpbmVkID8gYW5PYmplY3QgOiBhRnVuY3Rpb24pKHRhcmdldCksXG4gICAgICB0b01ldGFLZXkodGFyZ2V0S2V5KVxuICAgICk7XG4gIH07XG59IH0pO1xuIiwidmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5oYXM7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xuXG5tZXRhZGF0YS5leHAoeyBoYXNPd25NZXRhZGF0YTogZnVuY3Rpb24gaGFzT3duTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xuICByZXR1cm4gb3JkaW5hcnlIYXNPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgYW5PYmplY3QodGFyZ2V0KVxuICAgICwgYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKSk7XG59IH0pO1xuIiwidmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5oYXM7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xuXG52YXIgb3JkaW5hcnlIYXNNZXRhZGF0YSA9IGZ1bmN0aW9uIChNZXRhZGF0YUtleSwgTywgUCkge1xuICB2YXIgaGFzT3duID0gb3JkaW5hcnlIYXNPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCk7XG4gIGlmIChoYXNPd24pIHJldHVybiB0cnVlO1xuICB2YXIgcGFyZW50ID0gZ2V0UHJvdG90eXBlT2YoTyk7XG4gIHJldHVybiBwYXJlbnQgIT09IG51bGwgPyBvcmRpbmFyeUhhc01ldGFkYXRhKE1ldGFkYXRhS2V5LCBwYXJlbnQsIFApIDogZmFsc2U7XG59O1xuXG5tZXRhZGF0YS5leHAoeyBoYXNNZXRhZGF0YTogZnVuY3Rpb24gaGFzTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xuICByZXR1cm4gb3JkaW5hcnlIYXNNZXRhZGF0YShtZXRhZGF0YUtleSwgYW5PYmplY3QodGFyZ2V0KSwgYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKSk7XG59IH0pO1xuIiwidmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzID0gbWV0YWRhdGEua2V5cztcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG5cbm1ldGFkYXRhLmV4cCh7IGdldE93bk1ldGFkYXRhS2V5czogZnVuY3Rpb24gZ2V0T3duTWV0YWRhdGFLZXlzKHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xuICByZXR1cm4gb3JkaW5hcnlPd25NZXRhZGF0YUtleXMoYW5PYmplY3QodGFyZ2V0KSwgYXJndW1lbnRzLmxlbmd0aCA8IDIgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzFdKSk7XG59IH0pO1xuIiwidmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEgPSBtZXRhZGF0YS5nZXQ7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xuXG5tZXRhZGF0YS5leHAoeyBnZXRPd25NZXRhZGF0YTogZnVuY3Rpb24gZ2V0T3duTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xuICByZXR1cm4gb3JkaW5hcnlHZXRPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgYW5PYmplY3QodGFyZ2V0KVxuICAgICwgYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKSk7XG59IH0pO1xuIiwidmFyIFNldCA9IHJlcXVpcmUoJy4vZXM2LnNldCcpO1xudmFyIGZyb20gPSByZXF1aXJlKCcuL19hcnJheS1mcm9tLWl0ZXJhYmxlJyk7XG52YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgb3JkaW5hcnlPd25NZXRhZGF0YUtleXMgPSBtZXRhZGF0YS5rZXlzO1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcblxudmFyIG9yZGluYXJ5TWV0YWRhdGFLZXlzID0gZnVuY3Rpb24gKE8sIFApIHtcbiAgdmFyIG9LZXlzID0gb3JkaW5hcnlPd25NZXRhZGF0YUtleXMoTywgUCk7XG4gIHZhciBwYXJlbnQgPSBnZXRQcm90b3R5cGVPZihPKTtcbiAgaWYgKHBhcmVudCA9PT0gbnVsbCkgcmV0dXJuIG9LZXlzO1xuICB2YXIgcEtleXMgPSBvcmRpbmFyeU1ldGFkYXRhS2V5cyhwYXJlbnQsIFApO1xuICByZXR1cm4gcEtleXMubGVuZ3RoID8gb0tleXMubGVuZ3RoID8gZnJvbShuZXcgU2V0KG9LZXlzLmNvbmNhdChwS2V5cykpKSA6IHBLZXlzIDogb0tleXM7XG59O1xuXG5tZXRhZGF0YS5leHAoeyBnZXRNZXRhZGF0YUtleXM6IGZ1bmN0aW9uIGdldE1ldGFkYXRhS2V5cyh0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgcmV0dXJuIG9yZGluYXJ5TWV0YWRhdGFLZXlzKGFuT2JqZWN0KHRhcmdldCksIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1sxXSkpO1xufSB9KTtcbiIsInZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBvcmRpbmFyeUhhc093bk1ldGFkYXRhID0gbWV0YWRhdGEuaGFzO1xudmFyIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEgPSBtZXRhZGF0YS5nZXQ7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xuXG52YXIgb3JkaW5hcnlHZXRNZXRhZGF0YSA9IGZ1bmN0aW9uIChNZXRhZGF0YUtleSwgTywgUCkge1xuICB2YXIgaGFzT3duID0gb3JkaW5hcnlIYXNPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCk7XG4gIGlmIChoYXNPd24pIHJldHVybiBvcmRpbmFyeUdldE93bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTtcbiAgdmFyIHBhcmVudCA9IGdldFByb3RvdHlwZU9mKE8pO1xuICByZXR1cm4gcGFyZW50ICE9PSBudWxsID8gb3JkaW5hcnlHZXRNZXRhZGF0YShNZXRhZGF0YUtleSwgcGFyZW50LCBQKSA6IHVuZGVmaW5lZDtcbn07XG5cbm1ldGFkYXRhLmV4cCh7IGdldE1ldGFkYXRhOiBmdW5jdGlvbiBnZXRNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeUdldE1ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTtcbn0gfSk7XG4iLCJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xudmFyIGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAgPSBtZXRhZGF0YS5tYXA7XG52YXIgc3RvcmUgPSBtZXRhZGF0YS5zdG9yZTtcblxubWV0YWRhdGEuZXhwKHsgZGVsZXRlTWV0YWRhdGE6IGZ1bmN0aW9uIGRlbGV0ZU1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgdmFyIHRhcmdldEtleSA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSk7XG4gIHZhciBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoYW5PYmplY3QodGFyZ2V0KSwgdGFyZ2V0S2V5LCBmYWxzZSk7XG4gIGlmIChtZXRhZGF0YU1hcCA9PT0gdW5kZWZpbmVkIHx8ICFtZXRhZGF0YU1hcFsnZGVsZXRlJ10obWV0YWRhdGFLZXkpKSByZXR1cm4gZmFsc2U7XG4gIGlmIChtZXRhZGF0YU1hcC5zaXplKSByZXR1cm4gdHJ1ZTtcbiAgdmFyIHRhcmdldE1ldGFkYXRhID0gc3RvcmUuZ2V0KHRhcmdldCk7XG4gIHRhcmdldE1ldGFkYXRhWydkZWxldGUnXSh0YXJnZXRLZXkpO1xuICByZXR1cm4gISF0YXJnZXRNZXRhZGF0YS5zaXplIHx8IHN0b3JlWydkZWxldGUnXSh0YXJnZXQpO1xufSB9KTtcbiIsInZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG52YXIgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSA9IG1ldGFkYXRhLnNldDtcblxubWV0YWRhdGEuZXhwKHsgZGVmaW5lTWV0YWRhdGE6IGZ1bmN0aW9uIGRlZmluZU1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlLCB0YXJnZXQsIHRhcmdldEtleSkge1xuICBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlLCBhbk9iamVjdCh0YXJnZXQpLCB0b01ldGFLZXkodGFyZ2V0S2V5KSk7XG59IH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtcHJvbWlzZS10cnlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSByZXF1aXJlKCcuL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG52YXIgcGVyZm9ybSA9IHJlcXVpcmUoJy4vX3BlcmZvcm0nKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdQcm9taXNlJywgeyAndHJ5JzogZnVuY3Rpb24gKGNhbGxiYWNrZm4pIHtcbiAgdmFyIHByb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkuZih0aGlzKTtcbiAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oY2FsbGJhY2tmbik7XG4gIChyZXN1bHQuZSA/IHByb21pc2VDYXBhYmlsaXR5LnJlamVjdCA6IHByb21pc2VDYXBhYmlsaXR5LnJlc29sdmUpKHJlc3VsdC52KTtcbiAgcmV0dXJuIHByb21pc2VDYXBhYmlsaXR5LnByb21pc2U7XG59IH0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtcHJvbWlzZS1maW5hbGx5XG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi9fcHJvbWlzZS1yZXNvbHZlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5SLCAnUHJvbWlzZScsIHsgJ2ZpbmFsbHknOiBmdW5jdGlvbiAob25GaW5hbGx5KSB7XG4gIHZhciBDID0gc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsIGNvcmUuUHJvbWlzZSB8fCBnbG9iYWwuUHJvbWlzZSk7XG4gIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIG9uRmluYWxseSA9PSAnZnVuY3Rpb24nO1xuICByZXR1cm4gdGhpcy50aGVuKFxuICAgIGlzRnVuY3Rpb24gPyBmdW5jdGlvbiAoeCkge1xuICAgICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKEMsIG9uRmluYWxseSgpKS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHg7IH0pO1xuICAgIH0gOiBvbkZpbmFsbHksXG4gICAgaXNGdW5jdGlvbiA/IGZ1bmN0aW9uIChlKSB7XG4gICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoQywgb25GaW5hbGx5KCkpLnRoZW4oZnVuY3Rpb24gKCkgeyB0aHJvdyBlOyB9KTtcbiAgICB9IDogb25GaW5hbGx5XG4gICk7XG59IH0pO1xuIiwiLy8gaHR0cDovL2pmYmFzdGllbi5naXRodWIuaW8vcGFwZXJzL01hdGguc2lnbmJpdC5odG1sXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IHNpZ25iaXQ6IGZ1bmN0aW9uIHNpZ25iaXQoeCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIHJldHVybiAoeCA9ICt4KSAhPSB4ID8geCA6IHggPT0gMCA/IDEgLyB4ID09IEluZmluaXR5IDogeCA+IDA7XG59IH0pO1xuIiwiLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vQnJlbmRhbkVpY2gvNDI5NGQ1YzIxMmE2ZDIyNTQ3MDNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgdW11bGg6IGZ1bmN0aW9uIHVtdWxoKHUsIHYpIHtcbiAgICB2YXIgVUlOVDE2ID0gMHhmZmZmO1xuICAgIHZhciAkdSA9ICt1O1xuICAgIHZhciAkdiA9ICt2O1xuICAgIHZhciB1MCA9ICR1ICYgVUlOVDE2O1xuICAgIHZhciB2MCA9ICR2ICYgVUlOVDE2O1xuICAgIHZhciB1MSA9ICR1ID4+PiAxNjtcbiAgICB2YXIgdjEgPSAkdiA+Pj4gMTY7XG4gICAgdmFyIHQgPSAodTEgKiB2MCA+Pj4gMCkgKyAodTAgKiB2MCA+Pj4gMTYpO1xuICAgIHJldHVybiB1MSAqIHYxICsgKHQgPj4+IDE2KSArICgodTAgKiB2MSA+Pj4gMCkgKyAodCAmIFVJTlQxNikgPj4+IDE2KTtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IHNjYWxlOiByZXF1aXJlKCcuL19tYXRoLXNjYWxlJykgfSk7XG4iLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIERFR19QRVJfUkFEID0gTWF0aC5QSSAvIDE4MDtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICByYWRpYW5zOiBmdW5jdGlvbiByYWRpYW5zKGRlZ3JlZXMpIHtcbiAgICByZXR1cm4gZGVncmVlcyAqIERFR19QRVJfUkFEO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgUkFEX1BFUl9ERUc6IDE4MCAvIE1hdGguUEkgfSk7XG4iLCIvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBpbXVsaDogZnVuY3Rpb24gaW11bGgodSwgdikge1xuICAgIHZhciBVSU5UMTYgPSAweGZmZmY7XG4gICAgdmFyICR1ID0gK3U7XG4gICAgdmFyICR2ID0gK3Y7XG4gICAgdmFyIHUwID0gJHUgJiBVSU5UMTY7XG4gICAgdmFyIHYwID0gJHYgJiBVSU5UMTY7XG4gICAgdmFyIHUxID0gJHUgPj4gMTY7XG4gICAgdmFyIHYxID0gJHYgPj4gMTY7XG4gICAgdmFyIHQgPSAodTEgKiB2MCA+Pj4gMCkgKyAodTAgKiB2MCA+Pj4gMTYpO1xuICAgIHJldHVybiB1MSAqIHYxICsgKHQgPj4gMTYpICsgKCh1MCAqIHYxID4+PiAwKSArICh0ICYgVUlOVDE2KSA+PiAxNik7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vQnJlbmRhbkVpY2gvNDI5NGQ1YzIxMmE2ZDIyNTQ3MDNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgaXN1Ymg6IGZ1bmN0aW9uIGlzdWJoKHgwLCB4MSwgeTAsIHkxKSB7XG4gICAgdmFyICR4MCA9IHgwID4+PiAwO1xuICAgIHZhciAkeDEgPSB4MSA+Pj4gMDtcbiAgICB2YXIgJHkwID0geTAgPj4+IDA7XG4gICAgcmV0dXJuICR4MSAtICh5MSA+Pj4gMCkgLSAoKH4keDAgJiAkeTAgfCB+KCR4MCBeICR5MCkgJiAkeDAgLSAkeTAgPj4+IDApID4+PiAzMSkgfCAwO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGlhZGRoOiBmdW5jdGlvbiBpYWRkaCh4MCwgeDEsIHkwLCB5MSkge1xuICAgIHZhciAkeDAgPSB4MCA+Pj4gMDtcbiAgICB2YXIgJHgxID0geDEgPj4+IDA7XG4gICAgdmFyICR5MCA9IHkwID4+PiAwO1xuICAgIHJldHVybiAkeDEgKyAoeTEgPj4+IDApICsgKCgkeDAgJiAkeTAgfCAoJHgwIHwgJHkwKSAmIH4oJHgwICsgJHkwID4+PiAwKSkgPj4+IDMxKSB8IDA7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBzY2FsZSA9IHJlcXVpcmUoJy4vX21hdGgtc2NhbGUnKTtcbnZhciBmcm91bmQgPSByZXF1aXJlKCcuL19tYXRoLWZyb3VuZCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGZzY2FsZTogZnVuY3Rpb24gZnNjYWxlKHgsIGluTG93LCBpbkhpZ2gsIG91dExvdywgb3V0SGlnaCkge1xuICAgIHJldHVybiBmcm91bmQoc2NhbGUoeCwgaW5Mb3csIGluSGlnaCwgb3V0TG93LCBvdXRIaWdoKSk7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBSQURfUEVSX0RFRyA9IDE4MCAvIE1hdGguUEk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgZGVncmVlczogZnVuY3Rpb24gZGVncmVlcyhyYWRpYW5zKSB7XG4gICAgcmV0dXJuIHJhZGlhbnMgKiBSQURfUEVSX0RFRztcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IERFR19QRVJfUkFEOiBNYXRoLlBJIC8gMTgwIH0pO1xuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjbGFtcDogZnVuY3Rpb24gY2xhbXAoeCwgbG93ZXIsIHVwcGVyKSB7XG4gICAgcmV0dXJuIE1hdGgubWluKHVwcGVyLCBNYXRoLm1heChsb3dlciwgeCkpO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9samhhcmIvcHJvcG9zYWwtaXMtZXJyb3JcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnRXJyb3InLCB7XG4gIGlzRXJyb3I6IGZ1bmN0aW9uIGlzRXJyb3IoaXQpIHtcbiAgICByZXR1cm4gY29mKGl0KSA9PT0gJ0Vycm9yJztcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1nbG9iYWxcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnU3lzdGVtJywgeyBnbG9iYWw6IHJlcXVpcmUoJy4vX2dsb2JhbCcpIH0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtZ2xvYmFsXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuRywgeyBnbG9iYWw6IHJlcXVpcmUoJy4vX2dsb2JhbCcpIH0pO1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtd2Vha3NldC5mcm9tXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1mcm9tJykoJ1dlYWtTZXQnKTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXdlYWttYXAuZnJvbVxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tZnJvbScpKCdXZWFrTWFwJyk7XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy1zZXQuZnJvbVxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tZnJvbScpKCdTZXQnKTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLW1hcC5mcm9tXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1mcm9tJykoJ01hcCcpO1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtd2Vha3NldC5vZlxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tb2YnKSgnV2Vha1NldCcpO1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtd2Vha21hcC5vZlxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tb2YnKSgnV2Vha01hcCcpO1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtc2V0Lm9mXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1vZicpKCdTZXQnKTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLW1hcC5vZlxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tb2YnKSgnTWFwJyk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vRGF2aWRCcnVhbnQvTWFwLVNldC5wcm90b3R5cGUudG9KU09OXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuUiwgJ1NldCcsIHsgdG9KU09OOiByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXRvLWpzb24nKSgnU2V0JykgfSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vRGF2aWRCcnVhbnQvTWFwLVNldC5wcm90b3R5cGUudG9KU09OXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuUiwgJ01hcCcsIHsgdG9KU09OOiByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXRvLWpzb24nKSgnTWFwJykgfSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG5cbi8vIEIuMi4yLjUgT2JqZWN0LnByb3RvdHlwZS5fX2xvb2t1cFNldHRlcl9fKFApXG5yZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICRleHBvcnQoJGV4cG9ydC5QICsgcmVxdWlyZSgnLi9fb2JqZWN0LWZvcmNlZC1wYW0nKSwgJ09iamVjdCcsIHtcbiAgX19sb29rdXBTZXR0ZXJfXzogZnVuY3Rpb24gX19sb29rdXBTZXR0ZXJfXyhQKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgSyA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICAgIHZhciBEO1xuICAgIGRvIHtcbiAgICAgIGlmIChEID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIEspKSByZXR1cm4gRC5zZXQ7XG4gICAgfSB3aGlsZSAoTyA9IGdldFByb3RvdHlwZU9mKE8pKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG5cbi8vIEIuMi4yLjQgT2JqZWN0LnByb3RvdHlwZS5fX2xvb2t1cEdldHRlcl9fKFApXG5yZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICRleHBvcnQoJGV4cG9ydC5QICsgcmVxdWlyZSgnLi9fb2JqZWN0LWZvcmNlZC1wYW0nKSwgJ09iamVjdCcsIHtcbiAgX19sb29rdXBHZXR0ZXJfXzogZnVuY3Rpb24gX19sb29rdXBHZXR0ZXJfXyhQKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgSyA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICAgIHZhciBEO1xuICAgIGRvIHtcbiAgICAgIGlmIChEID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIEspKSByZXR1cm4gRC5nZXQ7XG4gICAgfSB3aGlsZSAoTyA9IGdldFByb3RvdHlwZU9mKE8pKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xuXG4vLyBCLjIuMi4zIE9iamVjdC5wcm90b3R5cGUuX19kZWZpbmVTZXR0ZXJfXyhQLCBzZXR0ZXIpXG5yZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICRleHBvcnQoJGV4cG9ydC5QICsgcmVxdWlyZSgnLi9fb2JqZWN0LWZvcmNlZC1wYW0nKSwgJ09iamVjdCcsIHtcbiAgX19kZWZpbmVTZXR0ZXJfXzogZnVuY3Rpb24gX19kZWZpbmVTZXR0ZXJfXyhQLCBzZXR0ZXIpIHtcbiAgICAkZGVmaW5lUHJvcGVydHkuZih0b09iamVjdCh0aGlzKSwgUCwgeyBzZXQ6IGFGdW5jdGlvbihzZXR0ZXIpLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciAkZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcblxuLy8gQi4yLjIuMiBPYmplY3QucHJvdG90eXBlLl9fZGVmaW5lR2V0dGVyX18oUCwgZ2V0dGVyKVxucmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIHJlcXVpcmUoJy4vX29iamVjdC1mb3JjZWQtcGFtJyksICdPYmplY3QnLCB7XG4gIF9fZGVmaW5lR2V0dGVyX186IGZ1bmN0aW9uIF9fZGVmaW5lR2V0dGVyX18oUCwgZ2V0dGVyKSB7XG4gICAgJGRlZmluZVByb3BlcnR5LmYodG9PYmplY3QodGhpcyksIFAsIHsgZ2V0OiBhRnVuY3Rpb24oZ2V0dGVyKSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC12YWx1ZXMtZW50cmllc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZW50cmllcyA9IHJlcXVpcmUoJy4vX29iamVjdC10by1hcnJheScpKHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtcbiAgZW50cmllczogZnVuY3Rpb24gZW50cmllcyhpdCkge1xuICAgIHJldHVybiAkZW50cmllcyhpdCk7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LXZhbHVlcy1lbnRyaWVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICR2YWx1ZXMgPSByZXF1aXJlKCcuL19vYmplY3QtdG8tYXJyYXknKShmYWxzZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge1xuICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcyhpdCkge1xuICAgIHJldHVybiAkdmFsdWVzKGl0KTtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBvd25LZXlzID0gcmVxdWlyZSgnLi9fb3duLWtleXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnM6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob2JqZWN0KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3Qob2JqZWN0KTtcbiAgICB2YXIgZ2V0RGVzYyA9IGdPUEQuZjtcbiAgICB2YXIga2V5cyA9IG93bktleXMoTyk7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIga2V5LCBkZXNjO1xuICAgIHdoaWxlIChrZXlzLmxlbmd0aCA+IGkpIHtcbiAgICAgIGRlc2MgPSBnZXREZXNjKE8sIGtleSA9IGtleXNbaSsrXSk7XG4gICAgICBpZiAoZGVzYyAhPT0gdW5kZWZpbmVkKSBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGtleSwgZGVzYyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwicmVxdWlyZSgnLi9fd2tzLWRlZmluZScpKCdvYnNlcnZhYmxlJyk7XG4iLCJyZXF1aXJlKCcuL193a3MtZGVmaW5lJykoJ2FzeW5jSXRlcmF0b3InKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vU3RyaW5nLnByb3RvdHlwZS5tYXRjaEFsbC9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJyk7XG52YXIgZ2V0RmxhZ3MgPSByZXF1aXJlKCcuL19mbGFncycpO1xudmFyIFJlZ0V4cFByb3RvID0gUmVnRXhwLnByb3RvdHlwZTtcblxudmFyICRSZWdFeHBTdHJpbmdJdGVyYXRvciA9IGZ1bmN0aW9uIChyZWdleHAsIHN0cmluZykge1xuICB0aGlzLl9yID0gcmVnZXhwO1xuICB0aGlzLl9zID0gc3RyaW5nO1xufTtcblxucmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKSgkUmVnRXhwU3RyaW5nSXRlcmF0b3IsICdSZWdFeHAgU3RyaW5nJywgZnVuY3Rpb24gbmV4dCgpIHtcbiAgdmFyIG1hdGNoID0gdGhpcy5fci5leGVjKHRoaXMuX3MpO1xuICByZXR1cm4geyB2YWx1ZTogbWF0Y2gsIGRvbmU6IG1hdGNoID09PSBudWxsIH07XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIG1hdGNoQWxsOiBmdW5jdGlvbiBtYXRjaEFsbChyZWdleHApIHtcbiAgICBkZWZpbmVkKHRoaXMpO1xuICAgIGlmICghaXNSZWdFeHAocmVnZXhwKSkgdGhyb3cgVHlwZUVycm9yKHJlZ2V4cCArICcgaXMgbm90IGEgcmVnZXhwIScpO1xuICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuICAgIHZhciBmbGFncyA9ICdmbGFncycgaW4gUmVnRXhwUHJvdG8gPyBTdHJpbmcocmVnZXhwLmZsYWdzKSA6IGdldEZsYWdzLmNhbGwocmVnZXhwKTtcbiAgICB2YXIgcnggPSBuZXcgUmVnRXhwKHJlZ2V4cC5zb3VyY2UsIH5mbGFncy5pbmRleE9mKCdnJykgPyBmbGFncyA6ICdnJyArIGZsYWdzKTtcbiAgICByeC5sYXN0SW5kZXggPSB0b0xlbmd0aChyZWdleHAubGFzdEluZGV4KTtcbiAgICByZXR1cm4gbmV3ICRSZWdFeHBTdHJpbmdJdGVyYXRvcihyeCwgUyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3NlYm1hcmtiYWdlL2VjbWFzY3JpcHQtc3RyaW5nLWxlZnQtcmlnaHQtdHJpbVxucmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKSgndHJpbVJpZ2h0JywgZnVuY3Rpb24gKCR0cmltKSB7XG4gIHJldHVybiBmdW5jdGlvbiB0cmltUmlnaHQoKSB7XG4gICAgcmV0dXJuICR0cmltKHRoaXMsIDIpO1xuICB9O1xufSwgJ3RyaW1FbmQnKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zZWJtYXJrYmFnZS9lY21hc2NyaXB0LXN0cmluZy1sZWZ0LXJpZ2h0LXRyaW1cbnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW1MZWZ0JywgZnVuY3Rpb24gKCR0cmltKSB7XG4gIHJldHVybiBmdW5jdGlvbiB0cmltTGVmdCgpIHtcbiAgICByZXR1cm4gJHRyaW0odGhpcywgMSk7XG4gIH07XG59LCAndHJpbVN0YXJ0Jyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFkID0gcmVxdWlyZSgnLi9fc3RyaW5nLXBhZCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzI4MFxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAvVmVyc2lvblxcLzEwXFwuXFxkKyhcXC5cXGQrKT8gU2FmYXJpXFwvLy50ZXN0KHVzZXJBZ2VudCksICdTdHJpbmcnLCB7XG4gIHBhZEVuZDogZnVuY3Rpb24gcGFkRW5kKG1heExlbmd0aCAvKiAsIGZpbGxTdHJpbmcgPSAnICcgKi8pIHtcbiAgICByZXR1cm4gJHBhZCh0aGlzLCBtYXhMZW5ndGgsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCBmYWxzZSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmRcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhZCA9IHJlcXVpcmUoJy4vX3N0cmluZy1wYWQnKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuL191c2VyLWFnZW50Jyk7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8yODBcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogL1ZlcnNpb25cXC8xMFxcLlxcZCsoXFwuXFxkKyk/IFNhZmFyaVxcLy8udGVzdCh1c2VyQWdlbnQpLCAnU3RyaW5nJywge1xuICBwYWRTdGFydDogZnVuY3Rpb24gcGFkU3RhcnQobWF4TGVuZ3RoIC8qICwgZmlsbFN0cmluZyA9ICcgJyAqLykge1xuICAgIHJldHVybiAkcGFkKHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRydWUpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRoaWFzYnluZW5zL1N0cmluZy5wcm90b3R5cGUuYXRcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykodHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICBhdDogZnVuY3Rpb24gYXQocG9zKSB7XG4gICAgcmV0dXJuICRhdCh0aGlzLCBwb3MpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtZmxhdE1hcC8jc2VjLUFycmF5LnByb3RvdHlwZS5mbGF0dGVuXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGZsYXR0ZW5JbnRvQXJyYXkgPSByZXF1aXJlKCcuL19mbGF0dGVuLWludG8tYXJyYXknKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7XG4gIGZsYXR0ZW46IGZ1bmN0aW9uIGZsYXR0ZW4oLyogZGVwdGhBcmcgPSAxICovKSB7XG4gICAgdmFyIGRlcHRoQXJnID0gYXJndW1lbnRzWzBdO1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIHNvdXJjZUxlbiA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCAwKTtcbiAgICBmbGF0dGVuSW50b0FycmF5KEEsIE8sIE8sIHNvdXJjZUxlbiwgMCwgZGVwdGhBcmcgPT09IHVuZGVmaW5lZCA/IDEgOiB0b0ludGVnZXIoZGVwdGhBcmcpKTtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdmbGF0dGVuJyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLWZsYXRNYXAvI3NlYy1BcnJheS5wcm90b3R5cGUuZmxhdE1hcFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBmbGF0dGVuSW50b0FycmF5ID0gcmVxdWlyZSgnLi9fZmxhdHRlbi1pbnRvLWFycmF5Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5Jywge1xuICBmbGF0TWFwOiBmdW5jdGlvbiBmbGF0TWFwKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgc291cmNlTGVuLCBBO1xuICAgIGFGdW5jdGlvbihjYWxsYmFja2ZuKTtcbiAgICBzb3VyY2VMZW4gPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCAwKTtcbiAgICBmbGF0dGVuSW50b0FycmF5KEEsIE8sIE8sIHNvdXJjZUxlbiwgMCwgMSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdmbGF0TWFwJyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9BcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGluY2x1ZGVzID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKSh0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKGVsIC8qICwgZnJvbUluZGV4ID0gMCAqLykge1xuICAgIHJldHVybiAkaW5jbHVkZXModGhpcywgZWwsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdpbmNsdWRlcycpO1xuIiwiLy8gMjYuMS4xNCBSZWZsZWN0LnNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG8pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHNldFByb3RvID0gcmVxdWlyZSgnLi9fc2V0LXByb3RvJyk7XG5cbmlmIChzZXRQcm90bykgJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBzZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YodGFyZ2V0LCBwcm90bykge1xuICAgIHNldFByb3RvLmNoZWNrKHRhcmdldCwgcHJvdG8pO1xuICAgIHRyeSB7XG4gICAgICBzZXRQcm90by5zZXQodGFyZ2V0LCBwcm90byk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcbiIsIi8vIDI2LjEuMTMgUmVmbGVjdC5zZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSwgViBbLCByZWNlaXZlcl0pXG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbmZ1bmN0aW9uIHNldCh0YXJnZXQsIHByb3BlcnR5S2V5LCBWIC8qICwgcmVjZWl2ZXIgKi8pIHtcbiAgdmFyIHJlY2VpdmVyID0gYXJndW1lbnRzLmxlbmd0aCA8IDQgPyB0YXJnZXQgOiBhcmd1bWVudHNbM107XG4gIHZhciBvd25EZXNjID0gZ09QRC5mKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgdmFyIGV4aXN0aW5nRGVzY3JpcHRvciwgcHJvdG87XG4gIGlmICghb3duRGVzYykge1xuICAgIGlmIChpc09iamVjdChwcm90byA9IGdldFByb3RvdHlwZU9mKHRhcmdldCkpKSB7XG4gICAgICByZXR1cm4gc2V0KHByb3RvLCBwcm9wZXJ0eUtleSwgViwgcmVjZWl2ZXIpO1xuICAgIH1cbiAgICBvd25EZXNjID0gY3JlYXRlRGVzYygwKTtcbiAgfVxuICBpZiAoaGFzKG93bkRlc2MsICd2YWx1ZScpKSB7XG4gICAgaWYgKG93bkRlc2Mud3JpdGFibGUgPT09IGZhbHNlIHx8ICFpc09iamVjdChyZWNlaXZlcikpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoZXhpc3RpbmdEZXNjcmlwdG9yID0gZ09QRC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSkpIHtcbiAgICAgIGlmIChleGlzdGluZ0Rlc2NyaXB0b3IuZ2V0IHx8IGV4aXN0aW5nRGVzY3JpcHRvci5zZXQgfHwgZXhpc3RpbmdEZXNjcmlwdG9yLndyaXRhYmxlID09PSBmYWxzZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgZXhpc3RpbmdEZXNjcmlwdG9yLnZhbHVlID0gVjtcbiAgICAgIGRQLmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5LCBleGlzdGluZ0Rlc2NyaXB0b3IpO1xuICAgIH0gZWxzZSBkUC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSwgY3JlYXRlRGVzYygwLCBWKSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIG93bkRlc2Muc2V0ID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IChvd25EZXNjLnNldC5jYWxsKHJlY2VpdmVyLCBWKSwgdHJ1ZSk7XG59XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsgc2V0OiBzZXQgfSk7XG4iLCIvLyAyNi4xLjEyIFJlZmxlY3QucHJldmVudEV4dGVuc2lvbnModGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyICRwcmV2ZW50RXh0ZW5zaW9ucyA9IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBwcmV2ZW50RXh0ZW5zaW9uczogZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnModGFyZ2V0KSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICB0cnkge1xuICAgICAgaWYgKCRwcmV2ZW50RXh0ZW5zaW9ucykgJHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcbiIsIi8vIDI2LjEuMTEgUmVmbGVjdC5vd25LZXlzKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsgb3duS2V5czogcmVxdWlyZSgnLi9fb3duLWtleXMnKSB9KTtcbiIsIi8vIDI2LjEuMTAgUmVmbGVjdC5pc0V4dGVuc2libGUodGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyICRpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGlzRXh0ZW5zaWJsZTogZnVuY3Rpb24gaXNFeHRlbnNpYmxlKHRhcmdldCkge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgcmV0dXJuICRpc0V4dGVuc2libGUgPyAkaXNFeHRlbnNpYmxlKHRhcmdldCkgOiB0cnVlO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuOSBSZWZsZWN0Lmhhcyh0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBoYXM6IGZ1bmN0aW9uIGhhcyh0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgcmV0dXJuIHByb3BlcnR5S2V5IGluIHRhcmdldDtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjggUmVmbGVjdC5nZXRQcm90b3R5cGVPZih0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGdldFByb3RvID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZ2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKHRhcmdldCkge1xuICAgIHJldHVybiBnZXRQcm90byhhbk9iamVjdCh0YXJnZXQpKTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjcgUmVmbGVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eUtleSlcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgcmV0dXJuIGdPUEQuZihhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS42IFJlZmxlY3QuZ2V0KHRhcmdldCwgcHJvcGVydHlLZXkgWywgcmVjZWl2ZXJdKVxudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbmZ1bmN0aW9uIGdldCh0YXJnZXQsIHByb3BlcnR5S2V5IC8qICwgcmVjZWl2ZXIgKi8pIHtcbiAgdmFyIHJlY2VpdmVyID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB0YXJnZXQgOiBhcmd1bWVudHNbMl07XG4gIHZhciBkZXNjLCBwcm90bztcbiAgaWYgKGFuT2JqZWN0KHRhcmdldCkgPT09IHJlY2VpdmVyKSByZXR1cm4gdGFyZ2V0W3Byb3BlcnR5S2V5XTtcbiAgaWYgKGRlc2MgPSBnT1BELmYodGFyZ2V0LCBwcm9wZXJ0eUtleSkpIHJldHVybiBoYXMoZGVzYywgJ3ZhbHVlJylcbiAgICA/IGRlc2MudmFsdWVcbiAgICA6IGRlc2MuZ2V0ICE9PSB1bmRlZmluZWRcbiAgICAgID8gZGVzYy5nZXQuY2FsbChyZWNlaXZlcilcbiAgICAgIDogdW5kZWZpbmVkO1xuICBpZiAoaXNPYmplY3QocHJvdG8gPSBnZXRQcm90b3R5cGVPZih0YXJnZXQpKSkgcmV0dXJuIGdldChwcm90bywgcHJvcGVydHlLZXksIHJlY2VpdmVyKTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgeyBnZXQ6IGdldCB9KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDI2LjEuNSBSZWZsZWN0LmVudW1lcmF0ZSh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgRW51bWVyYXRlID0gZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHRoaXMuX3QgPSBhbk9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHZhciBrZXlzID0gdGhpcy5fayA9IFtdOyAgICAgIC8vIGtleXNcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gaXRlcmF0ZWQpIGtleXMucHVzaChrZXkpO1xufTtcbnJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJykoRW51bWVyYXRlLCAnT2JqZWN0JywgZnVuY3Rpb24gKCkge1xuICB2YXIgdGhhdCA9IHRoaXM7XG4gIHZhciBrZXlzID0gdGhhdC5faztcbiAgdmFyIGtleTtcbiAgZG8ge1xuICAgIGlmICh0aGF0Ll9pID49IGtleXMubGVuZ3RoKSByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH0gd2hpbGUgKCEoKGtleSA9IGtleXNbdGhhdC5faSsrXSkgaW4gdGhhdC5fdCkpO1xuICByZXR1cm4geyB2YWx1ZToga2V5LCBkb25lOiBmYWxzZSB9O1xufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZW51bWVyYXRlOiBmdW5jdGlvbiBlbnVtZXJhdGUodGFyZ2V0KSB7XG4gICAgcmV0dXJuIG5ldyBFbnVtZXJhdGUodGFyZ2V0KTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjQgUmVmbGVjdC5kZWxldGVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZGVsZXRlUHJvcGVydHk6IGZ1bmN0aW9uIGRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICB2YXIgZGVzYyA9IGdPUEQoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpO1xuICAgIHJldHVybiBkZXNjICYmICFkZXNjLmNvbmZpZ3VyYWJsZSA/IGZhbHNlIDogZGVsZXRlIHRhcmdldFtwcm9wZXJ0eUtleV07XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4zIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcylcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG5cbi8vIE1TIEVkZ2UgaGFzIGJyb2tlbiBSZWZsZWN0LmRlZmluZVByb3BlcnR5IC0gdGhyb3dpbmcgaW5zdGVhZCBvZiByZXR1cm5pbmcgZmFsc2VcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICBSZWZsZWN0LmRlZmluZVByb3BlcnR5KGRQLmYoe30sIDEsIHsgdmFsdWU6IDEgfSksIDEsIHsgdmFsdWU6IDIgfSk7XG59KSwgJ1JlZmxlY3QnLCB7XG4gIGRlZmluZVByb3BlcnR5OiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICBwcm9wZXJ0eUtleSA9IHRvUHJpbWl0aXZlKHByb3BlcnR5S2V5LCB0cnVlKTtcbiAgICBhbk9iamVjdChhdHRyaWJ1dGVzKTtcbiAgICB0cnkge1xuICAgICAgZFAuZih0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4yIFJlZmxlY3QuY29uc3RydWN0KHRhcmdldCwgYXJndW1lbnRzTGlzdCBbLCBuZXdUYXJnZXRdKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4vX2JpbmQnKTtcbnZhciByQ29uc3RydWN0ID0gKHJlcXVpcmUoJy4vX2dsb2JhbCcpLlJlZmxlY3QgfHwge30pLmNvbnN0cnVjdDtcblxuLy8gTVMgRWRnZSBzdXBwb3J0cyBvbmx5IDIgYXJndW1lbnRzIGFuZCBhcmd1bWVudHNMaXN0IGFyZ3VtZW50IGlzIG9wdGlvbmFsXG4vLyBGRiBOaWdodGx5IHNldHMgdGhpcmQgYXJndW1lbnQgYXMgYG5ldy50YXJnZXRgLCBidXQgZG9lcyBub3QgY3JlYXRlIGB0aGlzYCBmcm9tIGl0XG52YXIgTkVXX1RBUkdFVF9CVUcgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEYoKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuICEockNvbnN0cnVjdChmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sIFtdLCBGKSBpbnN0YW5jZW9mIEYpO1xufSk7XG52YXIgQVJHU19CVUcgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICByQ29uc3RydWN0KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTkVXX1RBUkdFVF9CVUcgfHwgQVJHU19CVUcpLCAnUmVmbGVjdCcsIHtcbiAgY29uc3RydWN0OiBmdW5jdGlvbiBjb25zdHJ1Y3QoVGFyZ2V0LCBhcmdzIC8qICwgbmV3VGFyZ2V0ICovKSB7XG4gICAgYUZ1bmN0aW9uKFRhcmdldCk7XG4gICAgYW5PYmplY3QoYXJncyk7XG4gICAgdmFyIG5ld1RhcmdldCA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gVGFyZ2V0IDogYUZ1bmN0aW9uKGFyZ3VtZW50c1syXSk7XG4gICAgaWYgKEFSR1NfQlVHICYmICFORVdfVEFSR0VUX0JVRykgcmV0dXJuIHJDb25zdHJ1Y3QoVGFyZ2V0LCBhcmdzLCBuZXdUYXJnZXQpO1xuICAgIGlmIChUYXJnZXQgPT0gbmV3VGFyZ2V0KSB7XG4gICAgICAvLyB3L28gYWx0ZXJlZCBuZXdUYXJnZXQsIG9wdGltaXphdGlvbiBmb3IgMC00IGFyZ3VtZW50c1xuICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgVGFyZ2V0KCk7XG4gICAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSk7XG4gICAgICAgIGNhc2UgMjogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgIGNhc2UgMzogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgIGNhc2UgNDogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gICAgICB9XG4gICAgICAvLyB3L28gYWx0ZXJlZCBuZXdUYXJnZXQsIGxvdCBvZiBhcmd1bWVudHMgY2FzZVxuICAgICAgdmFyICRhcmdzID0gW251bGxdO1xuICAgICAgJGFyZ3MucHVzaC5hcHBseSgkYXJncywgYXJncyk7XG4gICAgICByZXR1cm4gbmV3IChiaW5kLmFwcGx5KFRhcmdldCwgJGFyZ3MpKSgpO1xuICAgIH1cbiAgICAvLyB3aXRoIGFsdGVyZWQgbmV3VGFyZ2V0LCBub3Qgc3VwcG9ydCBidWlsdC1pbiBjb25zdHJ1Y3RvcnNcbiAgICB2YXIgcHJvdG8gPSBuZXdUYXJnZXQucHJvdG90eXBlO1xuICAgIHZhciBpbnN0YW5jZSA9IGNyZWF0ZShpc09iamVjdChwcm90bykgPyBwcm90byA6IE9iamVjdC5wcm90b3R5cGUpO1xuICAgIHZhciByZXN1bHQgPSBGdW5jdGlvbi5hcHBseS5jYWxsKFRhcmdldCwgaW5zdGFuY2UsIGFyZ3MpO1xuICAgIHJldHVybiBpc09iamVjdChyZXN1bHQpID8gcmVzdWx0IDogaW5zdGFuY2U7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4xIFJlZmxlY3QuYXBwbHkodGFyZ2V0LCB0aGlzQXJndW1lbnQsIGFyZ3VtZW50c0xpc3QpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHJBcHBseSA9IChyZXF1aXJlKCcuL19nbG9iYWwnKS5SZWZsZWN0IHx8IHt9KS5hcHBseTtcbnZhciBmQXBwbHkgPSBGdW5jdGlvbi5hcHBseTtcbi8vIE1TIEVkZ2UgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbFxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJBcHBseShmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xufSksICdSZWZsZWN0Jywge1xuICBhcHBseTogZnVuY3Rpb24gYXBwbHkodGFyZ2V0LCB0aGlzQXJndW1lbnQsIGFyZ3VtZW50c0xpc3QpIHtcbiAgICB2YXIgVCA9IGFGdW5jdGlvbih0YXJnZXQpO1xuICAgIHZhciBMID0gYW5PYmplY3QoYXJndW1lbnRzTGlzdCk7XG4gICAgcmV0dXJuIHJBcHBseSA/IHJBcHBseShULCB0aGlzQXJndW1lbnQsIEwpIDogZkFwcGx5LmNhbGwoVCwgdGhpc0FyZ3VtZW50LCBMKTtcbiAgfVxufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdGbG9hdDY0JywgOCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0NjRBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdGbG9hdDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50MzInLCA0LCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnSW50MzInLCA0LCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gSW50MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50MTYnLCAyLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDE2QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnSW50MTYnLCAyLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gSW50MTZBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50OCcsIDEsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50OENsYW1wZWRBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSwgdHJ1ZSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50OCcsIDEsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50OEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0ludDgnLCAxLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gSW50OEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL190eXBlZCcpLkFCViwge1xuICBEYXRhVmlldzogcmVxdWlyZSgnLi9fdHlwZWQtYnVmZmVyJykuRGF0YVZpZXdcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkdHlwZWQgPSByZXF1aXJlKCcuL190eXBlZCcpO1xudmFyIGJ1ZmZlciA9IHJlcXVpcmUoJy4vX3R5cGVkLWJ1ZmZlcicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgQXJyYXlCdWZmZXIgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5BcnJheUJ1ZmZlcjtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgJEFycmF5QnVmZmVyID0gYnVmZmVyLkFycmF5QnVmZmVyO1xudmFyICREYXRhVmlldyA9IGJ1ZmZlci5EYXRhVmlldztcbnZhciAkaXNWaWV3ID0gJHR5cGVkLkFCViAmJiBBcnJheUJ1ZmZlci5pc1ZpZXc7XG52YXIgJHNsaWNlID0gJEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZTtcbnZhciBWSUVXID0gJHR5cGVkLlZJRVc7XG52YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoQXJyYXlCdWZmZXIgIT09ICRBcnJheUJ1ZmZlciksIHsgQXJyYXlCdWZmZXI6ICRBcnJheUJ1ZmZlciB9KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhJHR5cGVkLkNPTlNUUiwgQVJSQVlfQlVGRkVSLCB7XG4gIC8vIDI0LjEuMy4xIEFycmF5QnVmZmVyLmlzVmlldyhhcmcpXG4gIGlzVmlldzogZnVuY3Rpb24gaXNWaWV3KGl0KSB7XG4gICAgcmV0dXJuICRpc1ZpZXcgJiYgJGlzVmlldyhpdCkgfHwgaXNPYmplY3QoaXQpICYmIFZJRVcgaW4gaXQ7XG4gIH1cbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuVSArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gIW5ldyAkQXJyYXlCdWZmZXIoMikuc2xpY2UoMSwgdW5kZWZpbmVkKS5ieXRlTGVuZ3RoO1xufSksIEFSUkFZX0JVRkZFUiwge1xuICAvLyAyNC4xLjQuMyBBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2Uoc3RhcnQsIGVuZClcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQpIHtcbiAgICBpZiAoJHNsaWNlICE9PSB1bmRlZmluZWQgJiYgZW5kID09PSB1bmRlZmluZWQpIHJldHVybiAkc2xpY2UuY2FsbChhbk9iamVjdCh0aGlzKSwgc3RhcnQpOyAvLyBGRiBmaXhcbiAgICB2YXIgbGVuID0gYW5PYmplY3QodGhpcykuYnl0ZUxlbmd0aDtcbiAgICB2YXIgZmlyc3QgPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbik7XG4gICAgdmFyIGZpbmFsID0gdG9BYnNvbHV0ZUluZGV4KGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogZW5kLCBsZW4pO1xuICAgIHZhciByZXN1bHQgPSBuZXcgKHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCAkQXJyYXlCdWZmZXIpKSh0b0xlbmd0aChmaW5hbCAtIGZpcnN0KSk7XG4gICAgdmFyIHZpZXdTID0gbmV3ICREYXRhVmlldyh0aGlzKTtcbiAgICB2YXIgdmlld1QgPSBuZXcgJERhdGFWaWV3KHJlc3VsdCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB3aGlsZSAoZmlyc3QgPCBmaW5hbCkge1xuICAgICAgdmlld1Quc2V0VWludDgoaW5kZXgrKywgdmlld1MuZ2V0VWludDgoZmlyc3QrKykpO1xuICAgIH0gcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoQVJSQVlfQlVGRkVSKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB3ZWFrID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi13ZWFrJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgV0VBS19TRVQgPSAnV2Vha1NldCc7XG5cbi8vIDIzLjQgV2Vha1NldCBPYmplY3RzXG5yZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoV0VBS19TRVQsIGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFdlYWtTZXQoKSB7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy40LjMuMSBXZWFrU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpXG4gIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKSB7XG4gICAgcmV0dXJuIHdlYWsuZGVmKHZhbGlkYXRlKHRoaXMsIFdFQUtfU0VUKSwgdmFsdWUsIHRydWUpO1xuICB9XG59LCB3ZWFrLCBmYWxzZSwgdHJ1ZSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciB0YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpLnNldDtcbnZhciBtaWNyb3Rhc2sgPSByZXF1aXJlKCcuL19taWNyb3Rhc2snKSgpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlID0gcmVxdWlyZSgnLi9fbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xudmFyIHBlcmZvcm0gPSByZXF1aXJlKCcuL19wZXJmb3JtJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi9fdXNlci1hZ2VudCcpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi9fcHJvbWlzZS1yZXNvbHZlJyk7XG52YXIgUFJPTUlTRSA9ICdQcm9taXNlJztcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciB2ZXJzaW9ucyA9IHByb2Nlc3MgJiYgcHJvY2Vzcy52ZXJzaW9ucztcbnZhciB2OCA9IHZlcnNpb25zICYmIHZlcnNpb25zLnY4IHx8ICcnO1xudmFyICRQcm9taXNlID0gZ2xvYmFsW1BST01JU0VdO1xudmFyIGlzTm9kZSA9IGNsYXNzb2YocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xudmFyIGVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xudmFyIEludGVybmFsLCBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHksIE93blByb21pc2VDYXBhYmlsaXR5LCBXcmFwcGVyO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZjtcblxudmFyIFVTRV9OQVRJVkUgPSAhIWZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICAvLyBjb3JyZWN0IHN1YmNsYXNzaW5nIHdpdGggQEBzcGVjaWVzIHN1cHBvcnRcbiAgICB2YXIgcHJvbWlzZSA9ICRQcm9taXNlLnJlc29sdmUoMSk7XG4gICAgdmFyIEZha2VQcm9taXNlID0gKHByb21pc2UuY29uc3RydWN0b3IgPSB7fSlbcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKV0gPSBmdW5jdGlvbiAoZXhlYykge1xuICAgICAgZXhlYyhlbXB0eSwgZW1wdHkpO1xuICAgIH07XG4gICAgLy8gdW5oYW5kbGVkIHJlamVjdGlvbnMgdHJhY2tpbmcgc3VwcG9ydCwgTm9kZUpTIFByb21pc2Ugd2l0aG91dCBpdCBmYWlscyBAQHNwZWNpZXMgdGVzdFxuICAgIHJldHVybiAoaXNOb2RlIHx8IHR5cGVvZiBQcm9taXNlUmVqZWN0aW9uRXZlbnQgPT0gJ2Z1bmN0aW9uJylcbiAgICAgICYmIHByb21pc2UudGhlbihlbXB0eSkgaW5zdGFuY2VvZiBGYWtlUHJvbWlzZVxuICAgICAgLy8gdjggNi42IChOb2RlIDEwIGFuZCBDaHJvbWUgNjYpIGhhdmUgYSBidWcgd2l0aCByZXNvbHZpbmcgY3VzdG9tIHRoZW5hYmxlc1xuICAgICAgLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9ODMwNTY1XG4gICAgICAvLyB3ZSBjYW4ndCBkZXRlY3QgaXQgc3luY2hyb25vdXNseSwgc28ganVzdCBjaGVjayB2ZXJzaW9uc1xuICAgICAgJiYgdjguaW5kZXhPZignNi42JykgIT09IDBcbiAgICAgICYmIHVzZXJBZ2VudC5pbmRleE9mKCdDaHJvbWUvNjYnKSA9PT0gLTE7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxufSgpO1xuXG4vLyBoZWxwZXJzXG52YXIgaXNUaGVuYWJsZSA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgdGhlbjtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiB0eXBlb2YgKHRoZW4gPSBpdC50aGVuKSA9PSAnZnVuY3Rpb24nID8gdGhlbiA6IGZhbHNlO1xufTtcbnZhciBub3RpZnkgPSBmdW5jdGlvbiAocHJvbWlzZSwgaXNSZWplY3QpIHtcbiAgaWYgKHByb21pc2UuX24pIHJldHVybjtcbiAgcHJvbWlzZS5fbiA9IHRydWU7XG4gIHZhciBjaGFpbiA9IHByb21pc2UuX2M7XG4gIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZhbHVlID0gcHJvbWlzZS5fdjtcbiAgICB2YXIgb2sgPSBwcm9taXNlLl9zID09IDE7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBydW4gPSBmdW5jdGlvbiAocmVhY3Rpb24pIHtcbiAgICAgIHZhciBoYW5kbGVyID0gb2sgPyByZWFjdGlvbi5vayA6IHJlYWN0aW9uLmZhaWw7XG4gICAgICB2YXIgcmVzb2x2ZSA9IHJlYWN0aW9uLnJlc29sdmU7XG4gICAgICB2YXIgcmVqZWN0ID0gcmVhY3Rpb24ucmVqZWN0O1xuICAgICAgdmFyIGRvbWFpbiA9IHJlYWN0aW9uLmRvbWFpbjtcbiAgICAgIHZhciByZXN1bHQsIHRoZW4sIGV4aXRlZDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgaWYgKCFvaykge1xuICAgICAgICAgICAgaWYgKHByb21pc2UuX2ggPT0gMikgb25IYW5kbGVVbmhhbmRsZWQocHJvbWlzZSk7XG4gICAgICAgICAgICBwcm9taXNlLl9oID0gMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGhhbmRsZXIgPT09IHRydWUpIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGRvbWFpbikgZG9tYWluLmVudGVyKCk7XG4gICAgICAgICAgICByZXN1bHQgPSBoYW5kbGVyKHZhbHVlKTsgLy8gbWF5IHRocm93XG4gICAgICAgICAgICBpZiAoZG9tYWluKSB7XG4gICAgICAgICAgICAgIGRvbWFpbi5leGl0KCk7XG4gICAgICAgICAgICAgIGV4aXRlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyZXN1bHQgPT09IHJlYWN0aW9uLnByb21pc2UpIHtcbiAgICAgICAgICAgIHJlamVjdChUeXBlRXJyb3IoJ1Byb21pc2UtY2hhaW4gY3ljbGUnKSk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0aGVuID0gaXNUaGVuYWJsZShyZXN1bHQpKSB7XG4gICAgICAgICAgICB0aGVuLmNhbGwocmVzdWx0LCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0gZWxzZSByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0gZWxzZSByZWplY3QodmFsdWUpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoZG9tYWluICYmICFleGl0ZWQpIGRvbWFpbi5leGl0KCk7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHdoaWxlIChjaGFpbi5sZW5ndGggPiBpKSBydW4oY2hhaW5baSsrXSk7IC8vIHZhcmlhYmxlIGxlbmd0aCAtIGNhbid0IHVzZSBmb3JFYWNoXG4gICAgcHJvbWlzZS5fYyA9IFtdO1xuICAgIHByb21pc2UuX24gPSBmYWxzZTtcbiAgICBpZiAoaXNSZWplY3QgJiYgIXByb21pc2UuX2gpIG9uVW5oYW5kbGVkKHByb21pc2UpO1xuICB9KTtcbn07XG52YXIgb25VbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZhbHVlID0gcHJvbWlzZS5fdjtcbiAgICB2YXIgdW5oYW5kbGVkID0gaXNVbmhhbmRsZWQocHJvbWlzZSk7XG4gICAgdmFyIHJlc3VsdCwgaGFuZGxlciwgY29uc29sZTtcbiAgICBpZiAodW5oYW5kbGVkKSB7XG4gICAgICByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGlzTm9kZSkge1xuICAgICAgICAgIHByb2Nlc3MuZW1pdCgndW5oYW5kbGVkUmVqZWN0aW9uJywgdmFsdWUsIHByb21pc2UpO1xuICAgICAgICB9IGVsc2UgaWYgKGhhbmRsZXIgPSBnbG9iYWwub251bmhhbmRsZWRyZWplY3Rpb24pIHtcbiAgICAgICAgICBoYW5kbGVyKHsgcHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiB2YWx1ZSB9KTtcbiAgICAgICAgfSBlbHNlIGlmICgoY29uc29sZSA9IGdsb2JhbC5jb25zb2xlKSAmJiBjb25zb2xlLmVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignVW5oYW5kbGVkIHByb21pc2UgcmVqZWN0aW9uJywgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIC8vIEJyb3dzZXJzIHNob3VsZCBub3QgdHJpZ2dlciBgcmVqZWN0aW9uSGFuZGxlZGAgZXZlbnQgaWYgaXQgd2FzIGhhbmRsZWQgaGVyZSwgTm9kZUpTIC0gc2hvdWxkXG4gICAgICBwcm9taXNlLl9oID0gaXNOb2RlIHx8IGlzVW5oYW5kbGVkKHByb21pc2UpID8gMiA6IDE7XG4gICAgfSBwcm9taXNlLl9hID0gdW5kZWZpbmVkO1xuICAgIGlmICh1bmhhbmRsZWQgJiYgcmVzdWx0LmUpIHRocm93IHJlc3VsdC52O1xuICB9KTtcbn07XG52YXIgaXNVbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICByZXR1cm4gcHJvbWlzZS5faCAhPT0gMSAmJiAocHJvbWlzZS5fYSB8fCBwcm9taXNlLl9jKS5sZW5ndGggPT09IDA7XG59O1xudmFyIG9uSGFuZGxlVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBoYW5kbGVyO1xuICAgIGlmIChpc05vZGUpIHtcbiAgICAgIHByb2Nlc3MuZW1pdCgncmVqZWN0aW9uSGFuZGxlZCcsIHByb21pc2UpO1xuICAgIH0gZWxzZSBpZiAoaGFuZGxlciA9IGdsb2JhbC5vbnJlamVjdGlvbmhhbmRsZWQpIHtcbiAgICAgIGhhbmRsZXIoeyBwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHByb21pc2UuX3YgfSk7XG4gICAgfVxuICB9KTtcbn07XG52YXIgJHJlamVjdCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gIGlmIChwcm9taXNlLl9kKSByZXR1cm47XG4gIHByb21pc2UuX2QgPSB0cnVlO1xuICBwcm9taXNlID0gcHJvbWlzZS5fdyB8fCBwcm9taXNlOyAvLyB1bndyYXBcbiAgcHJvbWlzZS5fdiA9IHZhbHVlO1xuICBwcm9taXNlLl9zID0gMjtcbiAgaWYgKCFwcm9taXNlLl9hKSBwcm9taXNlLl9hID0gcHJvbWlzZS5fYy5zbGljZSgpO1xuICBub3RpZnkocHJvbWlzZSwgdHJ1ZSk7XG59O1xudmFyICRyZXNvbHZlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHZhciBwcm9taXNlID0gdGhpcztcbiAgdmFyIHRoZW47XG4gIGlmIChwcm9taXNlLl9kKSByZXR1cm47XG4gIHByb21pc2UuX2QgPSB0cnVlO1xuICBwcm9taXNlID0gcHJvbWlzZS5fdyB8fCBwcm9taXNlOyAvLyB1bndyYXBcbiAgdHJ5IHtcbiAgICBpZiAocHJvbWlzZSA9PT0gdmFsdWUpIHRocm93IFR5cGVFcnJvcihcIlByb21pc2UgY2FuJ3QgYmUgcmVzb2x2ZWQgaXRzZWxmXCIpO1xuICAgIGlmICh0aGVuID0gaXNUaGVuYWJsZSh2YWx1ZSkpIHtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB3cmFwcGVyID0geyBfdzogcHJvbWlzZSwgX2Q6IGZhbHNlIH07IC8vIHdyYXBcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGVuLmNhbGwodmFsdWUsIGN0eCgkcmVzb2x2ZSwgd3JhcHBlciwgMSksIGN0eCgkcmVqZWN0LCB3cmFwcGVyLCAxKSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAkcmVqZWN0LmNhbGwod3JhcHBlciwgZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9taXNlLl92ID0gdmFsdWU7XG4gICAgICBwcm9taXNlLl9zID0gMTtcbiAgICAgIG5vdGlmeShwcm9taXNlLCBmYWxzZSk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgJHJlamVjdC5jYWxsKHsgX3c6IHByb21pc2UsIF9kOiBmYWxzZSB9LCBlKTsgLy8gd3JhcFxuICB9XG59O1xuXG4vLyBjb25zdHJ1Y3RvciBwb2x5ZmlsbFxuaWYgKCFVU0VfTkFUSVZFKSB7XG4gIC8vIDI1LjQuMy4xIFByb21pc2UoZXhlY3V0b3IpXG4gICRQcm9taXNlID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIGFuSW5zdGFuY2UodGhpcywgJFByb21pc2UsIFBST01JU0UsICdfaCcpO1xuICAgIGFGdW5jdGlvbihleGVjdXRvcik7XG4gICAgSW50ZXJuYWwuY2FsbCh0aGlzKTtcbiAgICB0cnkge1xuICAgICAgZXhlY3V0b3IoY3R4KCRyZXNvbHZlLCB0aGlzLCAxKSwgY3R4KCRyZWplY3QsIHRoaXMsIDEpKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICRyZWplY3QuY2FsbCh0aGlzLCBlcnIpO1xuICAgIH1cbiAgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIEludGVybmFsID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIHRoaXMuX2MgPSBbXTsgICAgICAgICAgICAgLy8gPC0gYXdhaXRpbmcgcmVhY3Rpb25zXG4gICAgdGhpcy5fYSA9IHVuZGVmaW5lZDsgICAgICAvLyA8LSBjaGVja2VkIGluIGlzVW5oYW5kbGVkIHJlYWN0aW9uc1xuICAgIHRoaXMuX3MgPSAwOyAgICAgICAgICAgICAgLy8gPC0gc3RhdGVcbiAgICB0aGlzLl9kID0gZmFsc2U7ICAgICAgICAgIC8vIDwtIGRvbmVcbiAgICB0aGlzLl92ID0gdW5kZWZpbmVkOyAgICAgIC8vIDwtIHZhbHVlXG4gICAgdGhpcy5faCA9IDA7ICAgICAgICAgICAgICAvLyA8LSByZWplY3Rpb24gc3RhdGUsIDAgLSBkZWZhdWx0LCAxIC0gaGFuZGxlZCwgMiAtIHVuaGFuZGxlZFxuICAgIHRoaXMuX24gPSBmYWxzZTsgICAgICAgICAgLy8gPC0gbm90aWZ5XG4gIH07XG4gIEludGVybmFsLnByb3RvdHlwZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpKCRQcm9taXNlLnByb3RvdHlwZSwge1xuICAgIC8vIDI1LjQuNS4zIFByb21pc2UucHJvdG90eXBlLnRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpXG4gICAgdGhlbjogZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICAgICAgdmFyIHJlYWN0aW9uID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsICRQcm9taXNlKSk7XG4gICAgICByZWFjdGlvbi5vayA9IHR5cGVvZiBvbkZ1bGZpbGxlZCA9PSAnZnVuY3Rpb24nID8gb25GdWxmaWxsZWQgOiB0cnVlO1xuICAgICAgcmVhY3Rpb24uZmFpbCA9IHR5cGVvZiBvblJlamVjdGVkID09ICdmdW5jdGlvbicgJiYgb25SZWplY3RlZDtcbiAgICAgIHJlYWN0aW9uLmRvbWFpbiA9IGlzTm9kZSA/IHByb2Nlc3MuZG9tYWluIDogdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fYy5wdXNoKHJlYWN0aW9uKTtcbiAgICAgIGlmICh0aGlzLl9hKSB0aGlzLl9hLnB1c2gocmVhY3Rpb24pO1xuICAgICAgaWYgKHRoaXMuX3MpIG5vdGlmeSh0aGlzLCBmYWxzZSk7XG4gICAgICByZXR1cm4gcmVhY3Rpb24ucHJvbWlzZTtcbiAgICB9LFxuICAgIC8vIDI1LjQuNS4xIFByb21pc2UucHJvdG90eXBlLmNhdGNoKG9uUmVqZWN0ZWQpXG4gICAgJ2NhdGNoJzogZnVuY3Rpb24gKG9uUmVqZWN0ZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnRoZW4odW5kZWZpbmVkLCBvblJlamVjdGVkKTtcbiAgICB9XG4gIH0pO1xuICBPd25Qcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBJbnRlcm5hbCgpO1xuICAgIHRoaXMucHJvbWlzZSA9IHByb21pc2U7XG4gICAgdGhpcy5yZXNvbHZlID0gY3R4KCRyZXNvbHZlLCBwcm9taXNlLCAxKTtcbiAgICB0aGlzLnJlamVjdCA9IGN0eCgkcmVqZWN0LCBwcm9taXNlLCAxKTtcbiAgfTtcbiAgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKEMpIHtcbiAgICByZXR1cm4gQyA9PT0gJFByb21pc2UgfHwgQyA9PT0gV3JhcHBlclxuICAgICAgPyBuZXcgT3duUHJvbWlzZUNhcGFiaWxpdHkoQylcbiAgICAgIDogbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICB9O1xufVxuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7IFByb21pc2U6ICRQcm9taXNlIH0pO1xucmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKSgkUHJvbWlzZSwgUFJPTUlTRSk7XG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKFBST01JU0UpO1xuV3JhcHBlciA9IHJlcXVpcmUoJy4vX2NvcmUnKVtQUk9NSVNFXTtcblxuLy8gc3RhdGljc1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuNSBQcm9taXNlLnJlamVjdChyKVxuICByZWplY3Q6IGZ1bmN0aW9uIHJlamVjdChyKSB7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSh0aGlzKTtcbiAgICB2YXIgJCRyZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICAkJHJlamVjdChyKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKExJQlJBUlkgfHwgIVVTRV9OQVRJVkUpLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC42IFByb21pc2UucmVzb2x2ZSh4KVxuICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKHgpIHtcbiAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoTElCUkFSWSAmJiB0aGlzID09PSBXcmFwcGVyID8gJFByb21pc2UgOiB0aGlzLCB4KTtcbiAgfVxufSk7XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoVVNFX05BVElWRSAmJiByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpKGZ1bmN0aW9uIChpdGVyKSB7XG4gICRQcm9taXNlLmFsbChpdGVyKVsnY2F0Y2gnXShlbXB0eSk7XG59KSksIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjEgUHJvbWlzZS5hbGwoaXRlcmFibGUpXG4gIGFsbDogZnVuY3Rpb24gYWxsKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICB2YXIgcmVtYWluaW5nID0gMTtcbiAgICAgIGZvck9mKGl0ZXJhYmxlLCBmYWxzZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgdmFyICRpbmRleCA9IGluZGV4Kys7XG4gICAgICAgIHZhciBhbHJlYWR5Q2FsbGVkID0gZmFsc2U7XG4gICAgICAgIHZhbHVlcy5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIHJlbWFpbmluZysrO1xuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeUNhbGxlZCkgcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgIHZhbHVlc1skaW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lKSByZWplY3QocmVzdWx0LnYpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH0sXG4gIC8vIDI1LjQuNC40IFByb21pc2UucmFjZShpdGVyYWJsZSlcbiAgcmFjZTogZnVuY3Rpb24gcmFjZShpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIEMucmVzb2x2ZShwcm9taXNlKS50aGVuKGNhcGFiaWxpdHkucmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZSkgcmVqZWN0KHJlc3VsdC52KTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiIsIi8vIEBAc3BsaXQgbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnc3BsaXQnLCAyLCBmdW5jdGlvbiAoZGVmaW5lZCwgU1BMSVQsICRzcGxpdCkge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xuICB2YXIgX3NwbGl0ID0gJHNwbGl0O1xuICB2YXIgJHB1c2ggPSBbXS5wdXNoO1xuICB2YXIgJFNQTElUID0gJ3NwbGl0JztcbiAgdmFyIExFTkdUSCA9ICdsZW5ndGgnO1xuICB2YXIgTEFTVF9JTkRFWCA9ICdsYXN0SW5kZXgnO1xuICBpZiAoXG4gICAgJ2FiYmMnWyRTUExJVF0oLyhiKSovKVsxXSA9PSAnYycgfHxcbiAgICAndGVzdCdbJFNQTElUXSgvKD86KS8sIC0xKVtMRU5HVEhdICE9IDQgfHxcbiAgICAnYWInWyRTUExJVF0oLyg/OmFiKSovKVtMRU5HVEhdICE9IDIgfHxcbiAgICAnLidbJFNQTElUXSgvKC4/KSguPykvKVtMRU5HVEhdICE9IDQgfHxcbiAgICAnLidbJFNQTElUXSgvKCkoKS8pW0xFTkdUSF0gPiAxIHx8XG4gICAgJydbJFNQTElUXSgvLj8vKVtMRU5HVEhdXG4gICkge1xuICAgIHZhciBOUENHID0gLygpPz8vLmV4ZWMoJycpWzFdID09PSB1bmRlZmluZWQ7IC8vIG5vbnBhcnRpY2lwYXRpbmcgY2FwdHVyaW5nIGdyb3VwXG4gICAgLy8gYmFzZWQgb24gZXM1LXNoaW0gaW1wbGVtZW50YXRpb24sIG5lZWQgdG8gcmV3b3JrIGl0XG4gICAgJHNwbGl0ID0gZnVuY3Rpb24gKHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHZhciBzdHJpbmcgPSBTdHJpbmcodGhpcyk7XG4gICAgICBpZiAoc2VwYXJhdG9yID09PSB1bmRlZmluZWQgJiYgbGltaXQgPT09IDApIHJldHVybiBbXTtcbiAgICAgIC8vIElmIGBzZXBhcmF0b3JgIGlzIG5vdCBhIHJlZ2V4LCB1c2UgbmF0aXZlIHNwbGl0XG4gICAgICBpZiAoIWlzUmVnRXhwKHNlcGFyYXRvcikpIHJldHVybiBfc3BsaXQuY2FsbChzdHJpbmcsIHNlcGFyYXRvciwgbGltaXQpO1xuICAgICAgdmFyIG91dHB1dCA9IFtdO1xuICAgICAgdmFyIGZsYWdzID0gKHNlcGFyYXRvci5pZ25vcmVDYXNlID8gJ2knIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IubXVsdGlsaW5lID8gJ20nIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IudW5pY29kZSA/ICd1JyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnN0aWNreSA/ICd5JyA6ICcnKTtcbiAgICAgIHZhciBsYXN0TGFzdEluZGV4ID0gMDtcbiAgICAgIHZhciBzcGxpdExpbWl0ID0gbGltaXQgPT09IHVuZGVmaW5lZCA/IDQyOTQ5NjcyOTUgOiBsaW1pdCA+Pj4gMDtcbiAgICAgIC8vIE1ha2UgYGdsb2JhbGAgYW5kIGF2b2lkIGBsYXN0SW5kZXhgIGlzc3VlcyBieSB3b3JraW5nIHdpdGggYSBjb3B5XG4gICAgICB2YXIgc2VwYXJhdG9yQ29weSA9IG5ldyBSZWdFeHAoc2VwYXJhdG9yLnNvdXJjZSwgZmxhZ3MgKyAnZycpO1xuICAgICAgdmFyIHNlcGFyYXRvcjIsIG1hdGNoLCBsYXN0SW5kZXgsIGxhc3RMZW5ndGgsIGk7XG4gICAgICAvLyBEb2Vzbid0IG5lZWQgZmxhZ3MgZ3ksIGJ1dCB0aGV5IGRvbid0IGh1cnRcbiAgICAgIGlmICghTlBDRykgc2VwYXJhdG9yMiA9IG5ldyBSZWdFeHAoJ14nICsgc2VwYXJhdG9yQ29weS5zb3VyY2UgKyAnJCg/IVxcXFxzKScsIGZsYWdzKTtcbiAgICAgIHdoaWxlIChtYXRjaCA9IHNlcGFyYXRvckNvcHkuZXhlYyhzdHJpbmcpKSB7XG4gICAgICAgIC8vIGBzZXBhcmF0b3JDb3B5Lmxhc3RJbmRleGAgaXMgbm90IHJlbGlhYmxlIGNyb3NzLWJyb3dzZXJcbiAgICAgICAgbGFzdEluZGV4ID0gbWF0Y2guaW5kZXggKyBtYXRjaFswXVtMRU5HVEhdO1xuICAgICAgICBpZiAobGFzdEluZGV4ID4gbGFzdExhc3RJbmRleCkge1xuICAgICAgICAgIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4LCBtYXRjaC5pbmRleCkpO1xuICAgICAgICAgIC8vIEZpeCBicm93c2VycyB3aG9zZSBgZXhlY2AgbWV0aG9kcyBkb24ndCBjb25zaXN0ZW50bHkgcmV0dXJuIGB1bmRlZmluZWRgIGZvciBOUENHXG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxvb3AtZnVuY1xuICAgICAgICAgIGlmICghTlBDRyAmJiBtYXRjaFtMRU5HVEhdID4gMSkgbWF0Y2hbMF0ucmVwbGFjZShzZXBhcmF0b3IyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBmb3IgKGkgPSAxOyBpIDwgYXJndW1lbnRzW0xFTkdUSF0gLSAyOyBpKyspIGlmIChhcmd1bWVudHNbaV0gPT09IHVuZGVmaW5lZCkgbWF0Y2hbaV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKG1hdGNoW0xFTkdUSF0gPiAxICYmIG1hdGNoLmluZGV4IDwgc3RyaW5nW0xFTkdUSF0pICRwdXNoLmFwcGx5KG91dHB1dCwgbWF0Y2guc2xpY2UoMSkpO1xuICAgICAgICAgIGxhc3RMZW5ndGggPSBtYXRjaFswXVtMRU5HVEhdO1xuICAgICAgICAgIGxhc3RMYXN0SW5kZXggPSBsYXN0SW5kZXg7XG4gICAgICAgICAgaWYgKG91dHB1dFtMRU5HVEhdID49IHNwbGl0TGltaXQpIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZXBhcmF0b3JDb3B5W0xBU1RfSU5ERVhdID09PSBtYXRjaC5pbmRleCkgc2VwYXJhdG9yQ29weVtMQVNUX0lOREVYXSsrOyAvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wXG4gICAgICB9XG4gICAgICBpZiAobGFzdExhc3RJbmRleCA9PT0gc3RyaW5nW0xFTkdUSF0pIHtcbiAgICAgICAgaWYgKGxhc3RMZW5ndGggfHwgIXNlcGFyYXRvckNvcHkudGVzdCgnJykpIG91dHB1dC5wdXNoKCcnKTtcbiAgICAgIH0gZWxzZSBvdXRwdXQucHVzaChzdHJpbmcuc2xpY2UobGFzdExhc3RJbmRleCkpO1xuICAgICAgcmV0dXJuIG91dHB1dFtMRU5HVEhdID4gc3BsaXRMaW1pdCA/IG91dHB1dC5zbGljZSgwLCBzcGxpdExpbWl0KSA6IG91dHB1dDtcbiAgICB9O1xuICAvLyBDaGFrcmEsIFY4XG4gIH0gZWxzZSBpZiAoJzAnWyRTUExJVF0odW5kZWZpbmVkLCAwKVtMRU5HVEhdKSB7XG4gICAgJHNwbGl0ID0gZnVuY3Rpb24gKHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHJldHVybiBzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCAmJiBsaW1pdCA9PT0gMCA/IFtdIDogX3NwbGl0LmNhbGwodGhpcywgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgfTtcbiAgfVxuICAvLyAyMS4xLjMuMTcgU3RyaW5nLnByb3RvdHlwZS5zcGxpdChzZXBhcmF0b3IsIGxpbWl0KVxuICByZXR1cm4gW2Z1bmN0aW9uIHNwbGl0KHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgdmFyIGZuID0gc2VwYXJhdG9yID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlcGFyYXRvcltTUExJVF07XG4gICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHNlcGFyYXRvciwgTywgbGltaXQpIDogJHNwbGl0LmNhbGwoU3RyaW5nKE8pLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgfSwgJHNwbGl0XTtcbn0pO1xuIiwiLy8gQEBzZWFyY2ggbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnc2VhcmNoJywgMSwgZnVuY3Rpb24gKGRlZmluZWQsIFNFQVJDSCwgJHNlYXJjaCkge1xuICAvLyAyMS4xLjMuMTUgU3RyaW5nLnByb3RvdHlwZS5zZWFyY2gocmVnZXhwKVxuICByZXR1cm4gW2Z1bmN0aW9uIHNlYXJjaChyZWdleHApIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgIHZhciBmbiA9IHJlZ2V4cCA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiByZWdleHBbU0VBUkNIXTtcbiAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZCA/IGZuLmNhbGwocmVnZXhwLCBPKSA6IG5ldyBSZWdFeHAocmVnZXhwKVtTRUFSQ0hdKFN0cmluZyhPKSk7XG4gIH0sICRzZWFyY2hdO1xufSk7XG4iLCIvLyBAQHJlcGxhY2UgbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgncmVwbGFjZScsIDIsIGZ1bmN0aW9uIChkZWZpbmVkLCBSRVBMQUNFLCAkcmVwbGFjZSkge1xuICAvLyAyMS4xLjMuMTQgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpXG4gIHJldHVybiBbZnVuY3Rpb24gcmVwbGFjZShzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICB2YXIgZm4gPSBzZWFyY2hWYWx1ZSA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZWFyY2hWYWx1ZVtSRVBMQUNFXTtcbiAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZFxuICAgICAgPyBmbi5jYWxsKHNlYXJjaFZhbHVlLCBPLCByZXBsYWNlVmFsdWUpXG4gICAgICA6ICRyZXBsYWNlLmNhbGwoU3RyaW5nKE8pLCBzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKTtcbiAgfSwgJHJlcGxhY2VdO1xufSk7XG4iLCIvLyBAQG1hdGNoIGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ21hdGNoJywgMSwgZnVuY3Rpb24gKGRlZmluZWQsIE1BVENILCAkbWF0Y2gpIHtcbiAgLy8gMjEuMS4zLjExIFN0cmluZy5wcm90b3R5cGUubWF0Y2gocmVnZXhwKVxuICByZXR1cm4gW2Z1bmN0aW9uIG1hdGNoKHJlZ2V4cCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgdmFyIGZuID0gcmVnZXhwID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHJlZ2V4cFtNQVRDSF07XG4gICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHJlZ2V4cCwgTykgOiBuZXcgUmVnRXhwKHJlZ2V4cClbTUFUQ0hdKFN0cmluZyhPKSk7XG4gIH0sICRtYXRjaF07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnJlcXVpcmUoJy4vZXM2LnJlZ2V4cC5mbGFncycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgJGZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciAkdG9TdHJpbmcgPSAvLi9bVE9fU1RSSU5HXTtcblxudmFyIGRlZmluZSA9IGZ1bmN0aW9uIChmbikge1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKFJlZ0V4cC5wcm90b3R5cGUsIFRPX1NUUklORywgZm4sIHRydWUpO1xufTtcblxuLy8gMjEuMi41LjE0IFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcoKVxuaWYgKHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkgeyByZXR1cm4gJHRvU3RyaW5nLmNhbGwoeyBzb3VyY2U6ICdhJywgZmxhZ3M6ICdiJyB9KSAhPSAnL2EvYic7IH0pKSB7XG4gIGRlZmluZShmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICB2YXIgUiA9IGFuT2JqZWN0KHRoaXMpO1xuICAgIHJldHVybiAnLycuY29uY2F0KFIuc291cmNlLCAnLycsXG4gICAgICAnZmxhZ3MnIGluIFIgPyBSLmZsYWdzIDogIURFU0NSSVBUT1JTICYmIFIgaW5zdGFuY2VvZiBSZWdFeHAgPyAkZmxhZ3MuY2FsbChSKSA6IHVuZGVmaW5lZCk7XG4gIH0pO1xuLy8gRkY0NC0gUmVnRXhwI3RvU3RyaW5nIGhhcyBhIHdyb25nIG5hbWVcbn0gZWxzZSBpZiAoJHRvU3RyaW5nLm5hbWUgIT0gVE9fU1RSSU5HKSB7XG4gIGRlZmluZShmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gJHRvU3RyaW5nLmNhbGwodGhpcyk7XG4gIH0pO1xufVxuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi9faW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJyk7XG52YXIgJGZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcbnZhciAkUmVnRXhwID0gZ2xvYmFsLlJlZ0V4cDtcbnZhciBCYXNlID0gJFJlZ0V4cDtcbnZhciBwcm90byA9ICRSZWdFeHAucHJvdG90eXBlO1xudmFyIHJlMSA9IC9hL2c7XG52YXIgcmUyID0gL2EvZztcbi8vIFwibmV3XCIgY3JlYXRlcyBhIG5ldyBvYmplY3QsIG9sZCB3ZWJraXQgYnVnZ3kgaGVyZVxudmFyIENPUlJFQ1RfTkVXID0gbmV3ICRSZWdFeHAocmUxKSAhPT0gcmUxO1xuXG5pZiAocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAoIUNPUlJFQ1RfTkVXIHx8IHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZTJbcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyldID0gZmFsc2U7XG4gIC8vIFJlZ0V4cCBjb25zdHJ1Y3RvciBjYW4gYWx0ZXIgZmxhZ3MgYW5kIElzUmVnRXhwIHdvcmtzIGNvcnJlY3Qgd2l0aCBAQG1hdGNoXG4gIHJldHVybiAkUmVnRXhwKHJlMSkgIT0gcmUxIHx8ICRSZWdFeHAocmUyKSA9PSByZTIgfHwgJFJlZ0V4cChyZTEsICdpJykgIT0gJy9hL2knO1xufSkpKSB7XG4gICRSZWdFeHAgPSBmdW5jdGlvbiBSZWdFeHAocCwgZikge1xuICAgIHZhciB0aVJFID0gdGhpcyBpbnN0YW5jZW9mICRSZWdFeHA7XG4gICAgdmFyIHBpUkUgPSBpc1JlZ0V4cChwKTtcbiAgICB2YXIgZmlVID0gZiA9PT0gdW5kZWZpbmVkO1xuICAgIHJldHVybiAhdGlSRSAmJiBwaVJFICYmIHAuY29uc3RydWN0b3IgPT09ICRSZWdFeHAgJiYgZmlVID8gcFxuICAgICAgOiBpbmhlcml0SWZSZXF1aXJlZChDT1JSRUNUX05FV1xuICAgICAgICA/IG5ldyBCYXNlKHBpUkUgJiYgIWZpVSA/IHAuc291cmNlIDogcCwgZilcbiAgICAgICAgOiBCYXNlKChwaVJFID0gcCBpbnN0YW5jZW9mICRSZWdFeHApID8gcC5zb3VyY2UgOiBwLCBwaVJFICYmIGZpVSA/ICRmbGFncy5jYWxsKHApIDogZilcbiAgICAgICwgdGlSRSA/IHRoaXMgOiBwcm90bywgJFJlZ0V4cCk7XG4gIH07XG4gIHZhciBwcm94eSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICBrZXkgaW4gJFJlZ0V4cCB8fCBkUCgkUmVnRXhwLCBrZXksIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gQmFzZVtrZXldOyB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiAoaXQpIHsgQmFzZVtrZXldID0gaXQ7IH1cbiAgICB9KTtcbiAgfTtcbiAgZm9yICh2YXIga2V5cyA9IGdPUE4oQmFzZSksIGkgPSAwOyBrZXlzLmxlbmd0aCA+IGk7KSBwcm94eShrZXlzW2krK10pO1xuICBwcm90by5jb25zdHJ1Y3RvciA9ICRSZWdFeHA7XG4gICRSZWdFeHAucHJvdG90eXBlID0gcHJvdG87XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoZ2xvYmFsLCAnUmVnRXhwJywgJFJlZ0V4cCk7XG59XG5cbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoJ1JlZ0V4cCcpO1xuIiwicmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKSgnQXJyYXknKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy45IEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXgocHJlZGljYXRlLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmluZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSg2KTtcbnZhciBLRVkgPSAnZmluZEluZGV4JztcbnZhciBmb3JjZWQgPSB0cnVlO1xuLy8gU2hvdWxkbid0IHNraXAgaG9sZXNcbmlmIChLRVkgaW4gW10pIEFycmF5KDEpW0tFWV0oZnVuY3Rpb24gKCkgeyBmb3JjZWQgPSBmYWxzZTsgfSk7XG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZvcmNlZCwgJ0FycmF5Jywge1xuICBmaW5kSW5kZXg6IGZ1bmN0aW9uIGZpbmRJbmRleChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgIHJldHVybiAkZmluZCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoS0VZKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy44IEFycmF5LnByb3RvdHlwZS5maW5kKHByZWRpY2F0ZSwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZpbmQgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNSk7XG52YXIgS0VZID0gJ2ZpbmQnO1xudmFyIGZvcmNlZCA9IHRydWU7XG4vLyBTaG91bGRuJ3Qgc2tpcCBob2xlc1xuaWYgKEtFWSBpbiBbXSkgQXJyYXkoMSlbS0VZXShmdW5jdGlvbiAoKSB7IGZvcmNlZCA9IGZhbHNlOyB9KTtcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZm9yY2VkLCAnQXJyYXknLCB7XG4gIGZpbmQ6IGZ1bmN0aW9uIGZpbmQoY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICByZXR1cm4gJGZpbmQodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKEtFWSk7XG4iLCIvLyAyMi4xLjMuNiBBcnJheS5wcm90b3R5cGUuZmlsbCh2YWx1ZSwgc3RhcnQgPSAwLCBlbmQgPSB0aGlzLmxlbmd0aClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7IGZpbGw6IHJlcXVpcmUoJy4vX2FycmF5LWZpbGwnKSB9KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2ZpbGwnKTtcbiIsIi8vIDIyLjEuMy4zIEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluKHRhcmdldCwgc3RhcnQsIGVuZCA9IHRoaXMubGVuZ3RoKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHsgY29weVdpdGhpbjogcmVxdWlyZSgnLi9fYXJyYXktY29weS13aXRoaW4nKSB9KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2NvcHlXaXRoaW4nKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyICRuYXRpdmUgPSBbXS5sYXN0SW5kZXhPZjtcbnZhciBORUdBVElWRV9aRVJPID0gISEkbmF0aXZlICYmIDEgLyBbMV0ubGFzdEluZGV4T2YoMSwgLTApIDwgMDtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoTkVHQVRJVkVfWkVSTyB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKCRuYXRpdmUpKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTQgLyAxNS40LjQuMTUgQXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgWywgZnJvbUluZGV4XSlcbiAgbGFzdEluZGV4T2Y6IGZ1bmN0aW9uIGxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggPSBAWyotMV0gKi8pIHtcbiAgICAvLyBjb252ZXJ0IC0wIHRvICswXG4gICAgaWYgKE5FR0FUSVZFX1pFUk8pIHJldHVybiAkbmF0aXZlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgMDtcbiAgICB2YXIgTyA9IHRvSU9iamVjdCh0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IGxlbmd0aCAtIDE7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSBpbmRleCA9IE1hdGgubWluKGluZGV4LCB0b0ludGVnZXIoYXJndW1lbnRzWzFdKSk7XG4gICAgaWYgKGluZGV4IDwgMCkgaW5kZXggPSBsZW5ndGggKyBpbmRleDtcbiAgICBmb3IgKDtpbmRleCA+PSAwOyBpbmRleC0tKSBpZiAoaW5kZXggaW4gTykgaWYgKE9baW5kZXhdID09PSBzZWFyY2hFbGVtZW50KSByZXR1cm4gaW5kZXggfHwgMDtcbiAgICByZXR1cm4gLTE7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkaW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpO1xudmFyICRuYXRpdmUgPSBbXS5pbmRleE9mO1xudmFyIE5FR0FUSVZFX1pFUk8gPSAhISRuYXRpdmUgJiYgMSAvIFsxXS5pbmRleE9mKDEsIC0wKSA8IDA7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKE5FR0FUSVZFX1pFUk8gfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkbmF0aXZlKSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjExIC8gMTUuNC40LjE0IEFycmF5LnByb3RvdHlwZS5pbmRleE9mKHNlYXJjaEVsZW1lbnQgWywgZnJvbUluZGV4XSlcbiAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ID0gMCAqLykge1xuICAgIHJldHVybiBORUdBVElWRV9aRVJPXG4gICAgICAvLyBjb252ZXJ0IC0wIHRvICswXG4gICAgICA/ICRuYXRpdmUuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCAwXG4gICAgICA6ICRpbmRleE9mKHRoaXMsIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcmVkdWNlID0gcmVxdWlyZSgnLi9fYXJyYXktcmVkdWNlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5yZWR1Y2VSaWdodCwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE5IC8gMTUuNC40LjIyIEFycmF5LnByb3RvdHlwZS5yZWR1Y2VSaWdodChjYWxsYmFja2ZuIFssIGluaXRpYWxWYWx1ZV0pXG4gIHJlZHVjZVJpZ2h0OiBmdW5jdGlvbiByZWR1Y2VSaWdodChjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gICAgcmV0dXJuICRyZWR1Y2UodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzWzFdLCB0cnVlKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRyZWR1Y2UgPSByZXF1aXJlKCcuL19hcnJheS1yZWR1Y2UnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLnJlZHVjZSwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE4IC8gMTUuNC40LjIxIEFycmF5LnByb3RvdHlwZS5yZWR1Y2UoY2FsbGJhY2tmbiBbLCBpbml0aWFsVmFsdWVdKVxuICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gICAgcmV0dXJuICRyZWR1Y2UodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzWzFdLCBmYWxzZSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZXZlcnkgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNCk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5ldmVyeSwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjUgLyAxNS40LjQuMTYgQXJyYXkucHJvdG90eXBlLmV2ZXJ5KGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGV2ZXJ5OiBmdW5jdGlvbiBldmVyeShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkZXZlcnkodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRzb21lID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDMpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uc29tZSwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjIzIC8gMTUuNC40LjE3IEFycmF5LnByb3RvdHlwZS5zb21lKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIHNvbWU6IGZ1bmN0aW9uIHNvbWUoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJHNvbWUodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmaWx0ZXIgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMik7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5maWx0ZXIsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy43IC8gMTUuNC40LjIwIEFycmF5LnByb3RvdHlwZS5maWx0ZXIoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGZpbHRlcih0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJG1hcCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgxKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLm1hcCwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE1IC8gMTUuNC40LjE5IEFycmF5LnByb3RvdHlwZS5tYXAoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgbWFwOiBmdW5jdGlvbiBtYXAoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJG1hcCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL19pcy1hcnJheScpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbCkge1xuICB2YXIgQztcbiAgaWYgKGlzQXJyYXkob3JpZ2luYWwpKSB7XG4gICAgQyA9IG9yaWdpbmFsLmNvbnN0cnVjdG9yO1xuICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgaWYgKHR5cGVvZiBDID09ICdmdW5jdGlvbicgJiYgKEMgPT09IEFycmF5IHx8IGlzQXJyYXkoQy5wcm90b3R5cGUpKSkgQyA9IHVuZGVmaW5lZDtcbiAgICBpZiAoaXNPYmplY3QoQykpIHtcbiAgICAgIEMgPSBDW1NQRUNJRVNdO1xuICAgICAgaWYgKEMgPT09IG51bGwpIEMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9IHJldHVybiBDID09PSB1bmRlZmluZWQgPyBBcnJheSA6IEM7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZm9yRWFjaCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgwKTtcbnZhciBTVFJJQ1QgPSByZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZm9yRWFjaCwgdHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIVNUUklDVCwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTAgLyAxNS40LjQuMTggQXJyYXkucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkZm9yRWFjaCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyICRzb3J0ID0gW10uc29ydDtcbnZhciB0ZXN0ID0gWzEsIDIsIDNdO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIElFOC1cbiAgdGVzdC5zb3J0KHVuZGVmaW5lZCk7XG59KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBWOCBidWdcbiAgdGVzdC5zb3J0KG51bGwpO1xuICAvLyBPbGQgV2ViS2l0XG59KSB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKCRzb3J0KSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjI1IEFycmF5LnByb3RvdHlwZS5zb3J0KGNvbXBhcmVmbilcbiAgc29ydDogZnVuY3Rpb24gc29ydChjb21wYXJlZm4pIHtcbiAgICByZXR1cm4gY29tcGFyZWZuID09PSB1bmRlZmluZWRcbiAgICAgID8gJHNvcnQuY2FsbCh0b09iamVjdCh0aGlzKSlcbiAgICAgIDogJHNvcnQuY2FsbCh0b09iamVjdCh0aGlzKSwgYUZ1bmN0aW9uKGNvbXBhcmVmbikpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4vX2h0bWwnKTtcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgYXJyYXlTbGljZSA9IFtdLnNsaWNlO1xuXG4vLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2UgRVMzIHN0cmluZ3MgYW5kIERPTSBvYmplY3RzXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICBpZiAoaHRtbCkgYXJyYXlTbGljZS5jYWxsKGh0bWwpO1xufSksICdBcnJheScsIHtcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKGJlZ2luLCBlbmQpIHtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgodGhpcy5sZW5ndGgpO1xuICAgIHZhciBrbGFzcyA9IGNvZih0aGlzKTtcbiAgICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IGVuZDtcbiAgICBpZiAoa2xhc3MgPT0gJ0FycmF5JykgcmV0dXJuIGFycmF5U2xpY2UuY2FsbCh0aGlzLCBiZWdpbiwgZW5kKTtcbiAgICB2YXIgc3RhcnQgPSB0b0Fic29sdXRlSW5kZXgoYmVnaW4sIGxlbik7XG4gICAgdmFyIHVwVG8gPSB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW4pO1xuICAgIHZhciBzaXplID0gdG9MZW5ndGgodXBUbyAtIHN0YXJ0KTtcbiAgICB2YXIgY2xvbmVkID0gbmV3IEFycmF5KHNpemUpO1xuICAgIHZhciBpID0gMDtcbiAgICBmb3IgKDsgaSA8IHNpemU7IGkrKykgY2xvbmVkW2ldID0ga2xhc3MgPT0gJ1N0cmluZydcbiAgICAgID8gdGhpcy5jaGFyQXQoc3RhcnQgKyBpKVxuICAgICAgOiB0aGlzW3N0YXJ0ICsgaV07XG4gICAgcmV0dXJuIGNsb25lZDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmpvaW4oc2VwYXJhdG9yKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgYXJyYXlKb2luID0gW10uam9pbjtcblxuLy8gZmFsbGJhY2sgZm9yIG5vdCBhcnJheS1saWtlIHN0cmluZ3NcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKHJlcXVpcmUoJy4vX2lvYmplY3QnKSAhPSBPYmplY3QgfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShhcnJheUpvaW4pKSwgJ0FycmF5Jywge1xuICBqb2luOiBmdW5jdGlvbiBqb2luKHNlcGFyYXRvcikge1xuICAgIHJldHVybiBhcnJheUpvaW4uY2FsbCh0b0lPYmplY3QodGhpcyksIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkID8gJywnIDogc2VwYXJhdG9yKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fY3JlYXRlLXByb3BlcnR5Jyk7XG5cbi8vIFdlYktpdCBBcnJheS5vZiBpc24ndCBnZW5lcmljXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGKCkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiAhKEFycmF5Lm9mLmNhbGwoRikgaW5zdGFuY2VvZiBGKTtcbn0pLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMi4zIEFycmF5Lm9mKCAuLi5pdGVtcylcbiAgb2Y6IGZ1bmN0aW9uIG9mKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgcmVzdWx0ID0gbmV3ICh0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nID8gdGhpcyA6IEFycmF5KShhTGVuKTtcbiAgICB3aGlsZSAoYUxlbiA+IGluZGV4KSBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgIHJlc3VsdC5sZW5ndGggPSBhTGVuO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuL19pdGVyLWNhbGwnKTtcbnZhciBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgZ2V0SXRlckZuID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKShmdW5jdGlvbiAoaXRlcikgeyBBcnJheS5mcm9tKGl0ZXIpOyB9KSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjIuMSBBcnJheS5mcm9tKGFycmF5TGlrZSwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gIGZyb206IGZ1bmN0aW9uIGZyb20oYXJyYXlMaWtlIC8qICwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KGFycmF5TGlrZSk7XG4gICAgdmFyIEMgPSB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nID8gdGhpcyA6IEFycmF5O1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgbWFwZm4gPSBhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWQ7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgaXRlckZuID0gZ2V0SXRlckZuKE8pO1xuICAgIHZhciBsZW5ndGgsIHJlc3VsdCwgc3RlcCwgaXRlcmF0b3I7XG4gICAgaWYgKG1hcHBpbmcpIG1hcGZuID0gY3R4KG1hcGZuLCBhTGVuID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCwgMik7XG4gICAgLy8gaWYgb2JqZWN0IGlzbid0IGl0ZXJhYmxlIG9yIGl0J3MgYXJyYXkgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yIC0gdXNlIHNpbXBsZSBjYXNlXG4gICAgaWYgKGl0ZXJGbiAhPSB1bmRlZmluZWQgJiYgIShDID09IEFycmF5ICYmIGlzQXJyYXlJdGVyKGl0ZXJGbikpKSB7XG4gICAgICBmb3IgKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoTyksIHJlc3VsdCA9IG5ldyBDKCk7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaW5kZXgrKykge1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBtYXBwaW5nID8gY2FsbChpdGVyYXRvciwgbWFwZm4sIFtzdGVwLnZhbHVlLCBpbmRleF0sIHRydWUpIDogc3RlcC52YWx1ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICAgIGZvciAocmVzdWx0ID0gbmV3IEMobGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IG1hcGZuKE9baW5kZXhdLCBpbmRleCkgOiBPW2luZGV4XSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdC5sZW5ndGggPSBpbmRleDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIi8vIDIyLjEuMi4yIC8gMTUuNC4zLjIgQXJyYXkuaXNBcnJheShhcmcpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ0FycmF5JywgeyBpc0FycmF5OiByZXF1aXJlKCcuL19pcy1hcnJheScpIH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBOVU1CRVIgPSAnbnVtYmVyJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaGludCkge1xuICBpZiAoaGludCAhPT0gJ3N0cmluZycgJiYgaGludCAhPT0gTlVNQkVSICYmIGhpbnQgIT09ICdkZWZhdWx0JykgdGhyb3cgVHlwZUVycm9yKCdJbmNvcnJlY3QgaGludCcpO1xuICByZXR1cm4gdG9QcmltaXRpdmUoYW5PYmplY3QodGhpcyksIGhpbnQgIT0gTlVNQkVSKTtcbn07XG4iLCJ2YXIgVE9fUFJJTUlUSVZFID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvUHJpbWl0aXZlJyk7XG52YXIgcHJvdG8gPSBEYXRlLnByb3RvdHlwZTtcblxuaWYgKCEoVE9fUFJJTUlUSVZFIGluIHByb3RvKSkgcmVxdWlyZSgnLi9faGlkZScpKHByb3RvLCBUT19QUklNSVRJVkUsIHJlcXVpcmUoJy4vX2RhdGUtdG8tcHJpbWl0aXZlJykpO1xuIiwidmFyIERhdGVQcm90byA9IERhdGUucHJvdG90eXBlO1xudmFyIElOVkFMSURfREFURSA9ICdJbnZhbGlkIERhdGUnO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgJHRvU3RyaW5nID0gRGF0ZVByb3RvW1RPX1NUUklOR107XG52YXIgZ2V0VGltZSA9IERhdGVQcm90by5nZXRUaW1lO1xuaWYgKG5ldyBEYXRlKE5hTikgKyAnJyAhPSBJTlZBTElEX0RBVEUpIHtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShEYXRlUHJvdG8sIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgdmFyIHZhbHVlID0gZ2V0VGltZS5jYWxsKHRoaXMpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlID8gJHRvU3RyaW5nLmNhbGwodGhpcykgOiBJTlZBTElEX0RBVEU7XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjAuMy40LjM2IC8gMTUuOS41LjQzIERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nKClcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgZ2V0VGltZSA9IERhdGUucHJvdG90eXBlLmdldFRpbWU7XG52YXIgJHRvSVNPU3RyaW5nID0gRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmc7XG5cbnZhciBseiA9IGZ1bmN0aW9uIChudW0pIHtcbiAgcmV0dXJuIG51bSA+IDkgPyBudW0gOiAnMCcgKyBudW07XG59O1xuXG4vLyBQaGFudG9tSlMgLyBvbGQgV2ViS2l0IGhhcyBhIGJyb2tlbiBpbXBsZW1lbnRhdGlvbnNcbm1vZHVsZS5leHBvcnRzID0gKGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICR0b0lTT1N0cmluZy5jYWxsKG5ldyBEYXRlKC01ZTEzIC0gMSkpICE9ICcwMzg1LTA3LTI1VDA3OjA2OjM5Ljk5OVonO1xufSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgJHRvSVNPU3RyaW5nLmNhbGwobmV3IERhdGUoTmFOKSk7XG59KSkgPyBmdW5jdGlvbiB0b0lTT1N0cmluZygpIHtcbiAgaWYgKCFpc0Zpbml0ZShnZXRUaW1lLmNhbGwodGhpcykpKSB0aHJvdyBSYW5nZUVycm9yKCdJbnZhbGlkIHRpbWUgdmFsdWUnKTtcbiAgdmFyIGQgPSB0aGlzO1xuICB2YXIgeSA9IGQuZ2V0VVRDRnVsbFllYXIoKTtcbiAgdmFyIG0gPSBkLmdldFVUQ01pbGxpc2Vjb25kcygpO1xuICB2YXIgcyA9IHkgPCAwID8gJy0nIDogeSA+IDk5OTkgPyAnKycgOiAnJztcbiAgcmV0dXJuIHMgKyAoJzAwMDAwJyArIE1hdGguYWJzKHkpKS5zbGljZShzID8gLTYgOiAtNCkgK1xuICAgICctJyArIGx6KGQuZ2V0VVRDTW9udGgoKSArIDEpICsgJy0nICsgbHooZC5nZXRVVENEYXRlKCkpICtcbiAgICAnVCcgKyBseihkLmdldFVUQ0hvdXJzKCkpICsgJzonICsgbHooZC5nZXRVVENNaW51dGVzKCkpICtcbiAgICAnOicgKyBseihkLmdldFVUQ1NlY29uZHMoKSkgKyAnLicgKyAobSA+IDk5ID8gbSA6ICcwJyArIGx6KG0pKSArICdaJztcbn0gOiAkdG9JU09TdHJpbmc7XG4iLCIvLyAyMC4zLjQuMzYgLyAxNS45LjUuNDMgRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcoKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0lTT1N0cmluZyA9IHJlcXVpcmUoJy4vX2RhdGUtdG8taXNvLXN0cmluZycpO1xuXG4vLyBQaGFudG9tSlMgLyBvbGQgV2ViS2l0IGhhcyBhIGJyb2tlbiBpbXBsZW1lbnRhdGlvbnNcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nICE9PSB0b0lTT1N0cmluZyksICdEYXRlJywge1xuICB0b0lTT1N0cmluZzogdG9JU09TdHJpbmdcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBuZXcgRGF0ZShOYU4pLnRvSlNPTigpICE9PSBudWxsXG4gICAgfHwgRGF0ZS5wcm90b3R5cGUudG9KU09OLmNhbGwoeyB0b0lTT1N0cmluZzogZnVuY3Rpb24gKCkgeyByZXR1cm4gMTsgfSB9KSAhPT0gMTtcbn0pLCAnRGF0ZScsIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIHRvSlNPTjogZnVuY3Rpb24gdG9KU09OKGtleSkge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIHB2ID0gdG9QcmltaXRpdmUoTyk7XG4gICAgcmV0dXJuIHR5cGVvZiBwdiA9PSAnbnVtYmVyJyAmJiAhaXNGaW5pdGUocHYpID8gbnVsbCA6IE8udG9JU09TdHJpbmcoKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4zLjMuMSAvIDE1LjkuNC40IERhdGUubm93KClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnRGF0ZScsIHsgbm93OiBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTsgfSB9KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjE0IFN0cmluZy5wcm90b3R5cGUuc3VwKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3N1cCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzdXAoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N1cCcsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjEzIFN0cmluZy5wcm90b3R5cGUuc3ViKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3N1YicsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzdWIoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N1YicsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjEyIFN0cmluZy5wcm90b3R5cGUuc3RyaWtlKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3N0cmlrZScsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzdHJpa2UoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N0cmlrZScsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjExIFN0cmluZy5wcm90b3R5cGUuc21hbGwoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc21hbGwnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc21hbGwoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3NtYWxsJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTAgU3RyaW5nLnByb3RvdHlwZS5saW5rKHVybClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2xpbmsnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gbGluayh1cmwpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYScsICdocmVmJywgdXJsKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuOSBTdHJpbmcucHJvdG90eXBlLml0YWxpY3MoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnaXRhbGljcycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpdGFsaWNzKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdpJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuOCBTdHJpbmcucHJvdG90eXBlLmZvbnRzaXplKHNpemUpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdmb250c2l6ZScsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmb250c2l6ZShzaXplKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2ZvbnQnLCAnc2l6ZScsIHNpemUpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy43IFN0cmluZy5wcm90b3R5cGUuZm9udGNvbG9yKGNvbG9yKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnZm9udGNvbG9yJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZvbnRjb2xvcihjb2xvcikge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdmb250JywgJ2NvbG9yJywgY29sb3IpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy42IFN0cmluZy5wcm90b3R5cGUuZml4ZWQoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnZml4ZWQnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gZml4ZWQoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3R0JywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNSBTdHJpbmcucHJvdG90eXBlLmJvbGQoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYm9sZCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBib2xkKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdiJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNCBTdHJpbmcucHJvdG90eXBlLmJsaW5rKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JsaW5rJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGJsaW5rKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdibGluaycsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjMgU3RyaW5nLnByb3RvdHlwZS5iaWcoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYmlnJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGJpZygpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYmlnJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMiBTdHJpbmcucHJvdG90eXBlLmFuY2hvcihuYW1lKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYW5jaG9yJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGFuY2hvcihuYW1lKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2EnLCAnbmFtZScsIG5hbWUpO1xuICB9O1xufSk7XG4iLCIvLyAyMS4xLjMuMTggU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoKHNlYXJjaFN0cmluZyBbLCBwb3NpdGlvbiBdKVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGNvbnRleHQgPSByZXF1aXJlKCcuL19zdHJpbmctY29udGV4dCcpO1xudmFyIFNUQVJUU19XSVRIID0gJ3N0YXJ0c1dpdGgnO1xudmFyICRzdGFydHNXaXRoID0gJydbU1RBUlRTX1dJVEhdO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKFNUQVJUU19XSVRIKSwgJ1N0cmluZycsIHtcbiAgc3RhcnRzV2l0aDogZnVuY3Rpb24gc3RhcnRzV2l0aChzZWFyY2hTdHJpbmcgLyogLCBwb3NpdGlvbiA9IDAgKi8pIHtcbiAgICB2YXIgdGhhdCA9IGNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBTVEFSVFNfV0lUSCk7XG4gICAgdmFyIGluZGV4ID0gdG9MZW5ndGgoTWF0aC5taW4oYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRoYXQubGVuZ3RoKSk7XG4gICAgdmFyIHNlYXJjaCA9IFN0cmluZyhzZWFyY2hTdHJpbmcpO1xuICAgIHJldHVybiAkc3RhcnRzV2l0aFxuICAgICAgPyAkc3RhcnRzV2l0aC5jYWxsKHRoYXQsIHNlYXJjaCwgaW5kZXgpXG4gICAgICA6IHRoYXQuc2xpY2UoaW5kZXgsIGluZGV4ICsgc2VhcmNoLmxlbmd0aCkgPT09IHNlYXJjaDtcbiAgfVxufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4zLjEzIFN0cmluZy5wcm90b3R5cGUucmVwZWF0KGNvdW50KVxuICByZXBlYXQ6IHJlcXVpcmUoJy4vX3N0cmluZy1yZXBlYXQnKVxufSk7XG4iLCIvLyAyMS4xLjMuNyBTdHJpbmcucHJvdG90eXBlLmluY2x1ZGVzKHNlYXJjaFN0cmluZywgcG9zaXRpb24gPSAwKVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjb250ZXh0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWNvbnRleHQnKTtcbnZhciBJTkNMVURFUyA9ICdpbmNsdWRlcyc7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMtaXMtcmVnZXhwJykoSU5DTFVERVMpLCAnU3RyaW5nJywge1xuICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoU3RyaW5nIC8qICwgcG9zaXRpb24gPSAwICovKSB7XG4gICAgcmV0dXJuICEhfmNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBJTkNMVURFUylcbiAgICAgIC5pbmRleE9mKHNlYXJjaFN0cmluZywgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsIi8vIDIxLjEuMy42IFN0cmluZy5wcm90b3R5cGUuZW5kc1dpdGgoc2VhcmNoU3RyaW5nIFssIGVuZFBvc2l0aW9uXSlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjb250ZXh0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWNvbnRleHQnKTtcbnZhciBFTkRTX1dJVEggPSAnZW5kc1dpdGgnO1xudmFyICRlbmRzV2l0aCA9ICcnW0VORFNfV0lUSF07XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMtaXMtcmVnZXhwJykoRU5EU19XSVRIKSwgJ1N0cmluZycsIHtcbiAgZW5kc1dpdGg6IGZ1bmN0aW9uIGVuZHNXaXRoKHNlYXJjaFN0cmluZyAvKiAsIGVuZFBvc2l0aW9uID0gQGxlbmd0aCAqLykge1xuICAgIHZhciB0aGF0ID0gY29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIEVORFNfV0lUSCk7XG4gICAgdmFyIGVuZFBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRoYXQubGVuZ3RoKTtcbiAgICB2YXIgZW5kID0gZW5kUG9zaXRpb24gPT09IHVuZGVmaW5lZCA/IGxlbiA6IE1hdGgubWluKHRvTGVuZ3RoKGVuZFBvc2l0aW9uKSwgbGVuKTtcbiAgICB2YXIgc2VhcmNoID0gU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuICRlbmRzV2l0aFxuICAgICAgPyAkZW5kc1dpdGguY2FsbCh0aGF0LCBzZWFyY2gsIGVuZClcbiAgICAgIDogdGhhdC5zbGljZShlbmQgLSBzZWFyY2gubGVuZ3RoLCBlbmQpID09PSBzZWFyY2g7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkYXQgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKShmYWxzZSk7XG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4zLjMgU3RyaW5nLnByb3RvdHlwZS5jb2RlUG9pbnRBdChwb3MpXG4gIGNvZGVQb2ludEF0OiBmdW5jdGlvbiBjb2RlUG9pbnRBdChwb3MpIHtcbiAgICByZXR1cm4gJGF0KHRoaXMsIHBvcyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4vLyAyMS4xLjMuMjcgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKFN0cmluZywgJ1N0cmluZycsIGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICB0aGlzLl90ID0gU3RyaW5nKGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4vLyAyMS4xLjUuMi4xICVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBPID0gdGhpcy5fdDtcbiAgdmFyIGluZGV4ID0gdGhpcy5faTtcbiAgdmFyIHBvaW50O1xuICBpZiAoaW5kZXggPj0gTy5sZW5ndGgpIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgcG9pbnQgPSAkYXQoTywgaW5kZXgpO1xuICB0aGlzLl9pICs9IHBvaW50Lmxlbmd0aDtcbiAgcmV0dXJuIHsgdmFsdWU6IHBvaW50LCBkb25lOiBmYWxzZSB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMS4xLjMuMjUgU3RyaW5nLnByb3RvdHlwZS50cmltKClcbnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW0nLCBmdW5jdGlvbiAoJHRyaW0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW0oKSB7XG4gICAgcmV0dXJuICR0cmltKHRoaXMsIDMpO1xuICB9O1xufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4yLjQgU3RyaW5nLnJhdyhjYWxsU2l0ZSwgLi4uc3Vic3RpdHV0aW9ucylcbiAgcmF3OiBmdW5jdGlvbiByYXcoY2FsbFNpdGUpIHtcbiAgICB2YXIgdHBsID0gdG9JT2JqZWN0KGNhbGxTaXRlLnJhdyk7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRwbC5sZW5ndGgpO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgcmVzID0gW107XG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChsZW4gPiBpKSB7XG4gICAgICByZXMucHVzaChTdHJpbmcodHBsW2krK10pKTtcbiAgICAgIGlmIChpIDwgYUxlbikgcmVzLnB1c2goU3RyaW5nKGFyZ3VtZW50c1tpXSkpO1xuICAgIH0gcmV0dXJuIHJlcy5qb2luKCcnKTtcbiAgfVxufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgZnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZTtcbnZhciAkZnJvbUNvZGVQb2ludCA9IFN0cmluZy5mcm9tQ29kZVBvaW50O1xuXG4vLyBsZW5ndGggc2hvdWxkIGJlIDEsIG9sZCBGRiBwcm9ibGVtXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghISRmcm9tQ29kZVBvaW50ICYmICRmcm9tQ29kZVBvaW50Lmxlbmd0aCAhPSAxKSwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4yLjIgU3RyaW5nLmZyb21Db2RlUG9pbnQoLi4uY29kZVBvaW50cylcbiAgZnJvbUNvZGVQb2ludDogZnVuY3Rpb24gZnJvbUNvZGVQb2ludCh4KSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICB2YXIgcmVzID0gW107XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgY29kZTtcbiAgICB3aGlsZSAoYUxlbiA+IGkpIHtcbiAgICAgIGNvZGUgPSArYXJndW1lbnRzW2krK107XG4gICAgICBpZiAodG9BYnNvbHV0ZUluZGV4KGNvZGUsIDB4MTBmZmZmKSAhPT0gY29kZSkgdGhyb3cgUmFuZ2VFcnJvcihjb2RlICsgJyBpcyBub3QgYSB2YWxpZCBjb2RlIHBvaW50Jyk7XG4gICAgICByZXMucHVzaChjb2RlIDwgMHgxMDAwMFxuICAgICAgICA/IGZyb21DaGFyQ29kZShjb2RlKVxuICAgICAgICA6IGZyb21DaGFyQ29kZSgoKGNvZGUgLT0gMHgxMDAwMCkgPj4gMTApICsgMHhkODAwLCBjb2RlICUgMHg0MDAgKyAweGRjMDApXG4gICAgICApO1xuICAgIH0gcmV0dXJuIHJlcy5qb2luKCcnKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMzQgTWF0aC50cnVuYyh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICB0cnVuYzogZnVuY3Rpb24gdHJ1bmMoaXQpIHtcbiAgICByZXR1cm4gKGl0ID4gMCA/IE1hdGguZmxvb3IgOiBNYXRoLmNlaWwpKGl0KTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMzMgTWF0aC50YW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGV4cG0xID0gcmVxdWlyZSgnLi9fbWF0aC1leHBtMScpO1xudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHRhbmg6IGZ1bmN0aW9uIHRhbmgoeCkge1xuICAgIHZhciBhID0gZXhwbTEoeCA9ICt4KTtcbiAgICB2YXIgYiA9IGV4cG0xKC14KTtcbiAgICByZXR1cm4gYSA9PSBJbmZpbml0eSA/IDEgOiBiID09IEluZmluaXR5ID8gLTEgOiAoYSAtIGIpIC8gKGV4cCh4KSArIGV4cCgteCkpO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4zMCBNYXRoLnNpbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZXhwbTEgPSByZXF1aXJlKCcuL19tYXRoLWV4cG0xJyk7XG52YXIgZXhwID0gTWF0aC5leHA7XG5cbi8vIFY4IG5lYXIgQ2hyb21pdW0gMzggaGFzIGEgcHJvYmxlbSB3aXRoIHZlcnkgc21hbGwgbnVtYmVyc1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICFNYXRoLnNpbmgoLTJlLTE3KSAhPSAtMmUtMTc7XG59KSwgJ01hdGgnLCB7XG4gIHNpbmg6IGZ1bmN0aW9uIHNpbmgoeCkge1xuICAgIHJldHVybiBNYXRoLmFicyh4ID0gK3gpIDwgMVxuICAgICAgPyAoZXhwbTEoeCkgLSBleHBtMSgteCkpIC8gMlxuICAgICAgOiAoZXhwKHggLSAxKSAtIGV4cCgteCAtIDEpKSAqIChNYXRoLkUgLyAyKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMjggTWF0aC5zaWduKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IHNpZ246IHJlcXVpcmUoJy4vX21hdGgtc2lnbicpIH0pO1xuIiwiLy8gMjAuMi4yLjIyIE1hdGgubG9nMih4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBsb2cyOiBmdW5jdGlvbiBsb2cyKHgpIHtcbiAgICByZXR1cm4gTWF0aC5sb2coeCkgLyBNYXRoLkxOMjtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMjAgTWF0aC5sb2cxcCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBsb2cxcDogcmVxdWlyZSgnLi9fbWF0aC1sb2cxcCcpIH0pO1xuIiwiLy8gMjAuMi4yLjIxIE1hdGgubG9nMTAoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgbG9nMTA6IGZ1bmN0aW9uIGxvZzEwKHgpIHtcbiAgICByZXR1cm4gTWF0aC5sb2coeCkgKiBNYXRoLkxPRzEwRTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMTggTWF0aC5pbXVsKHgsIHkpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRpbXVsID0gTWF0aC5pbXVsO1xuXG4vLyBzb21lIFdlYktpdCB2ZXJzaW9ucyBmYWlscyB3aXRoIGJpZyBudW1iZXJzLCBzb21lIGhhcyB3cm9uZyBhcml0eVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICRpbXVsKDB4ZmZmZmZmZmYsIDUpICE9IC01IHx8ICRpbXVsLmxlbmd0aCAhPSAyO1xufSksICdNYXRoJywge1xuICBpbXVsOiBmdW5jdGlvbiBpbXVsKHgsIHkpIHtcbiAgICB2YXIgVUlOVDE2ID0gMHhmZmZmO1xuICAgIHZhciB4biA9ICt4O1xuICAgIHZhciB5biA9ICt5O1xuICAgIHZhciB4bCA9IFVJTlQxNiAmIHhuO1xuICAgIHZhciB5bCA9IFVJTlQxNiAmIHluO1xuICAgIHJldHVybiAwIHwgeGwgKiB5bCArICgoVUlOVDE2ICYgeG4gPj4+IDE2KSAqIHlsICsgeGwgKiAoVUlOVDE2ICYgeW4gPj4+IDE2KSA8PCAxNiA+Pj4gMCk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjE3IE1hdGguaHlwb3QoW3ZhbHVlMVssIHZhbHVlMlssIOKApiBdXV0pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFicyA9IE1hdGguYWJzO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGh5cG90OiBmdW5jdGlvbiBoeXBvdCh2YWx1ZTEsIHZhbHVlMikgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgdmFyIHN1bSA9IDA7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgbGFyZyA9IDA7XG4gICAgdmFyIGFyZywgZGl2O1xuICAgIHdoaWxlIChpIDwgYUxlbikge1xuICAgICAgYXJnID0gYWJzKGFyZ3VtZW50c1tpKytdKTtcbiAgICAgIGlmIChsYXJnIDwgYXJnKSB7XG4gICAgICAgIGRpdiA9IGxhcmcgLyBhcmc7XG4gICAgICAgIHN1bSA9IHN1bSAqIGRpdiAqIGRpdiArIDE7XG4gICAgICAgIGxhcmcgPSBhcmc7XG4gICAgICB9IGVsc2UgaWYgKGFyZyA+IDApIHtcbiAgICAgICAgZGl2ID0gYXJnIC8gbGFyZztcbiAgICAgICAgc3VtICs9IGRpdiAqIGRpdjtcbiAgICAgIH0gZWxzZSBzdW0gKz0gYXJnO1xuICAgIH1cbiAgICByZXR1cm4gbGFyZyA9PT0gSW5maW5pdHkgPyBJbmZpbml0eSA6IGxhcmcgKiBNYXRoLnNxcnQoc3VtKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMTYgTWF0aC5mcm91bmQoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgZnJvdW5kOiByZXF1aXJlKCcuL19tYXRoLWZyb3VuZCcpIH0pO1xuIiwiLy8gMjAuMi4yLjE0IE1hdGguZXhwbTEoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGV4cG0xID0gcmVxdWlyZSgnLi9fbWF0aC1leHBtMScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICgkZXhwbTEgIT0gTWF0aC5leHBtMSksICdNYXRoJywgeyBleHBtMTogJGV4cG0xIH0pO1xuIiwiLy8gMjAuMi4yLjEyIE1hdGguY29zaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBleHAgPSBNYXRoLmV4cDtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjb3NoOiBmdW5jdGlvbiBjb3NoKHgpIHtcbiAgICByZXR1cm4gKGV4cCh4ID0gK3gpICsgZXhwKC14KSkgLyAyO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4xMSBNYXRoLmNsejMyKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNsejMyOiBmdW5jdGlvbiBjbHozMih4KSB7XG4gICAgcmV0dXJuICh4ID4+Pj0gMCkgPyAzMSAtIE1hdGguZmxvb3IoTWF0aC5sb2coeCArIDAuNSkgKiBNYXRoLkxPRzJFKSA6IDMyO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi45IE1hdGguY2JydCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBzaWduID0gcmVxdWlyZSgnLi9fbWF0aC1zaWduJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY2JydDogZnVuY3Rpb24gY2JydCh4KSB7XG4gICAgcmV0dXJuIHNpZ24oeCA9ICt4KSAqIE1hdGgucG93KE1hdGguYWJzKHgpLCAxIC8gMyk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjcgTWF0aC5hdGFuaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkYXRhbmggPSBNYXRoLmF0YW5oO1xuXG4vLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYXRhbmgoLTApIC0+IDBcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYXRhbmggJiYgMSAvICRhdGFuaCgtMCkgPCAwKSwgJ01hdGgnLCB7XG4gIGF0YW5oOiBmdW5jdGlvbiBhdGFuaCh4KSB7XG4gICAgcmV0dXJuICh4ID0gK3gpID09IDAgPyB4IDogTWF0aC5sb2coKDEgKyB4KSAvICgxIC0geCkpIC8gMjtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuNSBNYXRoLmFzaW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRhc2luaCA9IE1hdGguYXNpbmg7XG5cbmZ1bmN0aW9uIGFzaW5oKHgpIHtcbiAgcmV0dXJuICFpc0Zpbml0ZSh4ID0gK3gpIHx8IHggPT0gMCA/IHggOiB4IDwgMCA/IC1hc2luaCgteCkgOiBNYXRoLmxvZyh4ICsgTWF0aC5zcXJ0KHggKiB4ICsgMSkpO1xufVxuXG4vLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYXNpbmgoMCkgLT4gLTBcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYXNpbmggJiYgMSAvICRhc2luaCgwKSA+IDApLCAnTWF0aCcsIHsgYXNpbmg6IGFzaW5oIH0pO1xuIiwiLy8gMjAuMi4yLjMgTWF0aC5hY29zaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBsb2cxcCA9IHJlcXVpcmUoJy4vX21hdGgtbG9nMXAnKTtcbnZhciBzcXJ0ID0gTWF0aC5zcXJ0O1xudmFyICRhY29zaCA9IE1hdGguYWNvc2g7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYWNvc2hcbiAgLy8gVjggYnVnOiBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzUwOVxuICAmJiBNYXRoLmZsb29yKCRhY29zaChOdW1iZXIuTUFYX1ZBTFVFKSkgPT0gNzEwXG4gIC8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hY29zaChJbmZpbml0eSkgLT4gTmFOXG4gICYmICRhY29zaChJbmZpbml0eSkgPT0gSW5maW5pdHlcbiksICdNYXRoJywge1xuICBhY29zaDogZnVuY3Rpb24gYWNvc2goeCkge1xuICAgIHJldHVybiAoeCA9ICt4KSA8IDEgPyBOYU4gOiB4ID4gOTQ5MDYyNjUuNjI0MjUxNTZcbiAgICAgID8gTWF0aC5sb2coeCkgKyBNYXRoLkxOMlxuICAgICAgOiBsb2cxcCh4IC0gMSArIHNxcnQoeCAtIDEpICogc3FydCh4ICsgMSkpO1xuICB9XG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fcGFyc2UtaW50Jyk7XG4vLyAyMC4xLjIuMTMgTnVtYmVyLnBhcnNlSW50KHN0cmluZywgcmFkaXgpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChOdW1iZXIucGFyc2VJbnQgIT0gJHBhcnNlSW50KSwgJ051bWJlcicsIHsgcGFyc2VJbnQ6ICRwYXJzZUludCB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19wYXJzZS1mbG9hdCcpO1xuLy8gMjAuMS4yLjEyIE51bWJlci5wYXJzZUZsb2F0KHN0cmluZylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKE51bWJlci5wYXJzZUZsb2F0ICE9ICRwYXJzZUZsb2F0KSwgJ051bWJlcicsIHsgcGFyc2VGbG9hdDogJHBhcnNlRmxvYXQgfSk7XG4iLCIvLyAyMC4xLjIuMTAgTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBNSU5fU0FGRV9JTlRFR0VSOiAtMHgxZmZmZmZmZmZmZmZmZiB9KTtcbiIsIi8vIDIwLjEuMi42IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgTUFYX1NBRkVfSU5URUdFUjogMHgxZmZmZmZmZmZmZmZmZiB9KTtcbiIsIi8vIDIwLjEuMi41IE51bWJlci5pc1NhZmVJbnRlZ2VyKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaXNJbnRlZ2VyID0gcmVxdWlyZSgnLi9faXMtaW50ZWdlcicpO1xudmFyIGFicyA9IE1hdGguYWJzO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtcbiAgaXNTYWZlSW50ZWdlcjogZnVuY3Rpb24gaXNTYWZlSW50ZWdlcihudW1iZXIpIHtcbiAgICByZXR1cm4gaXNJbnRlZ2VyKG51bWJlcikgJiYgYWJzKG51bWJlcikgPD0gMHgxZmZmZmZmZmZmZmZmZjtcbiAgfVxufSk7XG4iLCIvLyAyMC4xLjIuNCBOdW1iZXIuaXNOYU4obnVtYmVyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7XG4gIGlzTmFOOiBmdW5jdGlvbiBpc05hTihudW1iZXIpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgcmV0dXJuIG51bWJlciAhPSBudW1iZXI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMS4yLjMgTnVtYmVyLmlzSW50ZWdlcihudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgaXNJbnRlZ2VyOiByZXF1aXJlKCcuL19pcy1pbnRlZ2VyJykgfSk7XG4iLCIvLyAyMC4xLjIuMiBOdW1iZXIuaXNGaW5pdGUobnVtYmVyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBfaXNGaW5pdGUgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5pc0Zpbml0ZTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7XG4gIGlzRmluaXRlOiBmdW5jdGlvbiBpc0Zpbml0ZShpdCkge1xuICAgIHJldHVybiB0eXBlb2YgaXQgPT0gJ251bWJlcicgJiYgX2lzRmluaXRlKGl0KTtcbiAgfVxufSk7XG4iLCIvLyAyMC4xLjIuMSBOdW1iZXIuRVBTSUxPTlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IEVQU0lMT046IE1hdGgucG93KDIsIC01MikgfSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgYU51bWJlclZhbHVlID0gcmVxdWlyZSgnLi9fYS1udW1iZXItdmFsdWUnKTtcbnZhciAkdG9QcmVjaXNpb24gPSAxLjAudG9QcmVjaXNpb247XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKCRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIElFNy1cbiAgcmV0dXJuICR0b1ByZWNpc2lvbi5jYWxsKDEsIHVuZGVmaW5lZCkgIT09ICcxJztcbn0pIHx8ICEkZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBWOCB+IEFuZHJvaWQgNC4zLVxuICAkdG9QcmVjaXNpb24uY2FsbCh7fSk7XG59KSksICdOdW1iZXInLCB7XG4gIHRvUHJlY2lzaW9uOiBmdW5jdGlvbiB0b1ByZWNpc2lvbihwcmVjaXNpb24pIHtcbiAgICB2YXIgdGhhdCA9IGFOdW1iZXJWYWx1ZSh0aGlzLCAnTnVtYmVyI3RvUHJlY2lzaW9uOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnKTtcbiAgICByZXR1cm4gcHJlY2lzaW9uID09PSB1bmRlZmluZWQgPyAkdG9QcmVjaXNpb24uY2FsbCh0aGF0KSA6ICR0b1ByZWNpc2lvbi5jYWxsKHRoYXQsIHByZWNpc2lvbik7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgYU51bWJlclZhbHVlID0gcmVxdWlyZSgnLi9fYS1udW1iZXItdmFsdWUnKTtcbnZhciByZXBlYXQgPSByZXF1aXJlKCcuL19zdHJpbmctcmVwZWF0Jyk7XG52YXIgJHRvRml4ZWQgPSAxLjAudG9GaXhlZDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgZGF0YSA9IFswLCAwLCAwLCAwLCAwLCAwXTtcbnZhciBFUlJPUiA9ICdOdW1iZXIudG9GaXhlZDogaW5jb3JyZWN0IGludm9jYXRpb24hJztcbnZhciBaRVJPID0gJzAnO1xuXG52YXIgbXVsdGlwbHkgPSBmdW5jdGlvbiAobiwgYykge1xuICB2YXIgaSA9IC0xO1xuICB2YXIgYzIgPSBjO1xuICB3aGlsZSAoKytpIDwgNikge1xuICAgIGMyICs9IG4gKiBkYXRhW2ldO1xuICAgIGRhdGFbaV0gPSBjMiAlIDFlNztcbiAgICBjMiA9IGZsb29yKGMyIC8gMWU3KTtcbiAgfVxufTtcbnZhciBkaXZpZGUgPSBmdW5jdGlvbiAobikge1xuICB2YXIgaSA9IDY7XG4gIHZhciBjID0gMDtcbiAgd2hpbGUgKC0taSA+PSAwKSB7XG4gICAgYyArPSBkYXRhW2ldO1xuICAgIGRhdGFbaV0gPSBmbG9vcihjIC8gbik7XG4gICAgYyA9IChjICUgbikgKiAxZTc7XG4gIH1cbn07XG52YXIgbnVtVG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBpID0gNjtcbiAgdmFyIHMgPSAnJztcbiAgd2hpbGUgKC0taSA+PSAwKSB7XG4gICAgaWYgKHMgIT09ICcnIHx8IGkgPT09IDAgfHwgZGF0YVtpXSAhPT0gMCkge1xuICAgICAgdmFyIHQgPSBTdHJpbmcoZGF0YVtpXSk7XG4gICAgICBzID0gcyA9PT0gJycgPyB0IDogcyArIHJlcGVhdC5jYWxsKFpFUk8sIDcgLSB0Lmxlbmd0aCkgKyB0O1xuICAgIH1cbiAgfSByZXR1cm4gcztcbn07XG52YXIgcG93ID0gZnVuY3Rpb24gKHgsIG4sIGFjYykge1xuICByZXR1cm4gbiA9PT0gMCA/IGFjYyA6IG4gJSAyID09PSAxID8gcG93KHgsIG4gLSAxLCBhY2MgKiB4KSA6IHBvdyh4ICogeCwgbiAvIDIsIGFjYyk7XG59O1xudmFyIGxvZyA9IGZ1bmN0aW9uICh4KSB7XG4gIHZhciBuID0gMDtcbiAgdmFyIHgyID0geDtcbiAgd2hpbGUgKHgyID49IDQwOTYpIHtcbiAgICBuICs9IDEyO1xuICAgIHgyIC89IDQwOTY7XG4gIH1cbiAgd2hpbGUgKHgyID49IDIpIHtcbiAgICBuICs9IDE7XG4gICAgeDIgLz0gMjtcbiAgfSByZXR1cm4gbjtcbn07XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKCEhJHRvRml4ZWQgJiYgKFxuICAwLjAwMDA4LnRvRml4ZWQoMykgIT09ICcwLjAwMCcgfHxcbiAgMC45LnRvRml4ZWQoMCkgIT09ICcxJyB8fFxuICAxLjI1NS50b0ZpeGVkKDIpICE9PSAnMS4yNScgfHxcbiAgMTAwMDAwMDAwMDAwMDAwMDEyOC4wLnRvRml4ZWQoMCkgIT09ICcxMDAwMDAwMDAwMDAwMDAwMTI4J1xuKSB8fCAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIC8vIFY4IH4gQW5kcm9pZCA0LjMtXG4gICR0b0ZpeGVkLmNhbGwoe30pO1xufSkpLCAnTnVtYmVyJywge1xuICB0b0ZpeGVkOiBmdW5jdGlvbiB0b0ZpeGVkKGZyYWN0aW9uRGlnaXRzKSB7XG4gICAgdmFyIHggPSBhTnVtYmVyVmFsdWUodGhpcywgRVJST1IpO1xuICAgIHZhciBmID0gdG9JbnRlZ2VyKGZyYWN0aW9uRGlnaXRzKTtcbiAgICB2YXIgcyA9ICcnO1xuICAgIHZhciBtID0gWkVSTztcbiAgICB2YXIgZSwgeiwgaiwgaztcbiAgICBpZiAoZiA8IDAgfHwgZiA+IDIwKSB0aHJvdyBSYW5nZUVycm9yKEVSUk9SKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKHggIT0geCkgcmV0dXJuICdOYU4nO1xuICAgIGlmICh4IDw9IC0xZTIxIHx8IHggPj0gMWUyMSkgcmV0dXJuIFN0cmluZyh4KTtcbiAgICBpZiAoeCA8IDApIHtcbiAgICAgIHMgPSAnLSc7XG4gICAgICB4ID0gLXg7XG4gICAgfVxuICAgIGlmICh4ID4gMWUtMjEpIHtcbiAgICAgIGUgPSBsb2coeCAqIHBvdygyLCA2OSwgMSkpIC0gNjk7XG4gICAgICB6ID0gZSA8IDAgPyB4ICogcG93KDIsIC1lLCAxKSA6IHggLyBwb3coMiwgZSwgMSk7XG4gICAgICB6ICo9IDB4MTAwMDAwMDAwMDAwMDA7XG4gICAgICBlID0gNTIgLSBlO1xuICAgICAgaWYgKGUgPiAwKSB7XG4gICAgICAgIG11bHRpcGx5KDAsIHopO1xuICAgICAgICBqID0gZjtcbiAgICAgICAgd2hpbGUgKGogPj0gNykge1xuICAgICAgICAgIG11bHRpcGx5KDFlNywgMCk7XG4gICAgICAgICAgaiAtPSA3O1xuICAgICAgICB9XG4gICAgICAgIG11bHRpcGx5KHBvdygxMCwgaiwgMSksIDApO1xuICAgICAgICBqID0gZSAtIDE7XG4gICAgICAgIHdoaWxlIChqID49IDIzKSB7XG4gICAgICAgICAgZGl2aWRlKDEgPDwgMjMpO1xuICAgICAgICAgIGogLT0gMjM7XG4gICAgICAgIH1cbiAgICAgICAgZGl2aWRlKDEgPDwgaik7XG4gICAgICAgIG11bHRpcGx5KDEsIDEpO1xuICAgICAgICBkaXZpZGUoMik7XG4gICAgICAgIG0gPSBudW1Ub1N0cmluZygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbXVsdGlwbHkoMCwgeik7XG4gICAgICAgIG11bHRpcGx5KDEgPDwgLWUsIDApO1xuICAgICAgICBtID0gbnVtVG9TdHJpbmcoKSArIHJlcGVhdC5jYWxsKFpFUk8sIGYpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZiA+IDApIHtcbiAgICAgIGsgPSBtLmxlbmd0aDtcbiAgICAgIG0gPSBzICsgKGsgPD0gZiA/ICcwLicgKyByZXBlYXQuY2FsbChaRVJPLCBmIC0gaykgKyBtIDogbS5zbGljZSgwLCBrIC0gZikgKyAnLicgKyBtLnNsaWNlKGsgLSBmKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSBzICsgbTtcbiAgICB9IHJldHVybiBtO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyICR0cmltID0gcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKS50cmltO1xudmFyIE5VTUJFUiA9ICdOdW1iZXInO1xudmFyICROdW1iZXIgPSBnbG9iYWxbTlVNQkVSXTtcbnZhciBCYXNlID0gJE51bWJlcjtcbnZhciBwcm90byA9ICROdW1iZXIucHJvdG90eXBlO1xuLy8gT3BlcmEgfjEyIGhhcyBicm9rZW4gT2JqZWN0I3RvU3RyaW5nXG52YXIgQlJPS0VOX0NPRiA9IGNvZihyZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJykocHJvdG8pKSA9PSBOVU1CRVI7XG52YXIgVFJJTSA9ICd0cmltJyBpbiBTdHJpbmcucHJvdG90eXBlO1xuXG4vLyA3LjEuMyBUb051bWJlcihhcmd1bWVudClcbnZhciB0b051bWJlciA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICB2YXIgaXQgPSB0b1ByaW1pdGl2ZShhcmd1bWVudCwgZmFsc2UpO1xuICBpZiAodHlwZW9mIGl0ID09ICdzdHJpbmcnICYmIGl0Lmxlbmd0aCA+IDIpIHtcbiAgICBpdCA9IFRSSU0gPyBpdC50cmltKCkgOiAkdHJpbShpdCwgMyk7XG4gICAgdmFyIGZpcnN0ID0gaXQuY2hhckNvZGVBdCgwKTtcbiAgICB2YXIgdGhpcmQsIHJhZGl4LCBtYXhDb2RlO1xuICAgIGlmIChmaXJzdCA9PT0gNDMgfHwgZmlyc3QgPT09IDQ1KSB7XG4gICAgICB0aGlyZCA9IGl0LmNoYXJDb2RlQXQoMik7XG4gICAgICBpZiAodGhpcmQgPT09IDg4IHx8IHRoaXJkID09PSAxMjApIHJldHVybiBOYU47IC8vIE51bWJlcignKzB4MScpIHNob3VsZCBiZSBOYU4sIG9sZCBWOCBmaXhcbiAgICB9IGVsc2UgaWYgKGZpcnN0ID09PSA0OCkge1xuICAgICAgc3dpdGNoIChpdC5jaGFyQ29kZUF0KDEpKSB7XG4gICAgICAgIGNhc2UgNjY6IGNhc2UgOTg6IHJhZGl4ID0gMjsgbWF4Q29kZSA9IDQ5OyBicmVhazsgLy8gZmFzdCBlcXVhbCAvXjBiWzAxXSskL2lcbiAgICAgICAgY2FzZSA3OTogY2FzZSAxMTE6IHJhZGl4ID0gODsgbWF4Q29kZSA9IDU1OyBicmVhazsgLy8gZmFzdCBlcXVhbCAvXjBvWzAtN10rJC9pXG4gICAgICAgIGRlZmF1bHQ6IHJldHVybiAraXQ7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBkaWdpdHMgPSBpdC5zbGljZSgyKSwgaSA9IDAsIGwgPSBkaWdpdHMubGVuZ3RoLCBjb2RlOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGNvZGUgPSBkaWdpdHMuY2hhckNvZGVBdChpKTtcbiAgICAgICAgLy8gcGFyc2VJbnQgcGFyc2VzIGEgc3RyaW5nIHRvIGEgZmlyc3QgdW5hdmFpbGFibGUgc3ltYm9sXG4gICAgICAgIC8vIGJ1dCBUb051bWJlciBzaG91bGQgcmV0dXJuIE5hTiBpZiBhIHN0cmluZyBjb250YWlucyB1bmF2YWlsYWJsZSBzeW1ib2xzXG4gICAgICAgIGlmIChjb2RlIDwgNDggfHwgY29kZSA+IG1heENvZGUpIHJldHVybiBOYU47XG4gICAgICB9IHJldHVybiBwYXJzZUludChkaWdpdHMsIHJhZGl4KTtcbiAgICB9XG4gIH0gcmV0dXJuICtpdDtcbn07XG5cbmlmICghJE51bWJlcignIDBvMScpIHx8ICEkTnVtYmVyKCcwYjEnKSB8fCAkTnVtYmVyKCcrMHgxJykpIHtcbiAgJE51bWJlciA9IGZ1bmN0aW9uIE51bWJlcih2YWx1ZSkge1xuICAgIHZhciBpdCA9IGFyZ3VtZW50cy5sZW5ndGggPCAxID8gMCA6IHZhbHVlO1xuICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICByZXR1cm4gdGhhdCBpbnN0YW5jZW9mICROdW1iZXJcbiAgICAgIC8vIGNoZWNrIG9uIDEuLmNvbnN0cnVjdG9yKGZvbykgY2FzZVxuICAgICAgJiYgKEJST0tFTl9DT0YgPyBmYWlscyhmdW5jdGlvbiAoKSB7IHByb3RvLnZhbHVlT2YuY2FsbCh0aGF0KTsgfSkgOiBjb2YodGhhdCkgIT0gTlVNQkVSKVxuICAgICAgICA/IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBCYXNlKHRvTnVtYmVyKGl0KSksIHRoYXQsICROdW1iZXIpIDogdG9OdW1iZXIoaXQpO1xuICB9O1xuICBmb3IgKHZhciBrZXlzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGdPUE4oQmFzZSkgOiAoXG4gICAgLy8gRVMzOlxuICAgICdNQVhfVkFMVUUsTUlOX1ZBTFVFLE5hTixORUdBVElWRV9JTkZJTklUWSxQT1NJVElWRV9JTkZJTklUWSwnICtcbiAgICAvLyBFUzYgKGluIGNhc2UsIGlmIG1vZHVsZXMgd2l0aCBFUzYgTnVtYmVyIHN0YXRpY3MgcmVxdWlyZWQgYmVmb3JlKTpcbiAgICAnRVBTSUxPTixpc0Zpbml0ZSxpc0ludGVnZXIsaXNOYU4saXNTYWZlSW50ZWdlcixNQVhfU0FGRV9JTlRFR0VSLCcgK1xuICAgICdNSU5fU0FGRV9JTlRFR0VSLHBhcnNlRmxvYXQscGFyc2VJbnQsaXNJbnRlZ2VyJ1xuICApLnNwbGl0KCcsJyksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajsgaisrKSB7XG4gICAgaWYgKGhhcyhCYXNlLCBrZXkgPSBrZXlzW2pdKSAmJiAhaGFzKCROdW1iZXIsIGtleSkpIHtcbiAgICAgIGRQKCROdW1iZXIsIGtleSwgZ09QRChCYXNlLCBrZXkpKTtcbiAgICB9XG4gIH1cbiAgJE51bWJlci5wcm90b3R5cGUgPSBwcm90bztcbiAgcHJvdG8uY29uc3RydWN0b3IgPSAkTnVtYmVyO1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKGdsb2JhbCwgTlVNQkVSLCAkTnVtYmVyKTtcbn1cbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19wYXJzZS1mbG9hdCcpO1xuLy8gMTguMi40IHBhcnNlRmxvYXQoc3RyaW5nKVxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkYgKiAocGFyc2VGbG9hdCAhPSAkcGFyc2VGbG9hdCksIHsgcGFyc2VGbG9hdDogJHBhcnNlRmxvYXQgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX3BhcnNlLWludCcpO1xuLy8gMTguMi41IHBhcnNlSW50KHN0cmluZywgcmFkaXgpXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuRiAqIChwYXJzZUludCAhPSAkcGFyc2VJbnQpLCB7IHBhcnNlSW50OiAkcGFyc2VJbnQgfSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBIQVNfSU5TVEFOQ0UgPSByZXF1aXJlKCcuL193a3MnKSgnaGFzSW5zdGFuY2UnKTtcbnZhciBGdW5jdGlvblByb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuLy8gMTkuMi4zLjYgRnVuY3Rpb24ucHJvdG90eXBlW0BAaGFzSW5zdGFuY2VdKFYpXG5pZiAoIShIQVNfSU5TVEFOQ0UgaW4gRnVuY3Rpb25Qcm90bykpIHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYoRnVuY3Rpb25Qcm90bywgSEFTX0lOU1RBTkNFLCB7IHZhbHVlOiBmdW5jdGlvbiAoTykge1xuICBpZiAodHlwZW9mIHRoaXMgIT0gJ2Z1bmN0aW9uJyB8fCAhaXNPYmplY3QoTykpIHJldHVybiBmYWxzZTtcbiAgaWYgKCFpc09iamVjdCh0aGlzLnByb3RvdHlwZSkpIHJldHVybiBPIGluc3RhbmNlb2YgdGhpcztcbiAgLy8gZm9yIGVudmlyb25tZW50IHcvbyBuYXRpdmUgYEBAaGFzSW5zdGFuY2VgIGxvZ2ljIGVub3VnaCBgaW5zdGFuY2VvZmAsIGJ1dCBhZGQgdGhpczpcbiAgd2hpbGUgKE8gPSBnZXRQcm90b3R5cGVPZihPKSkgaWYgKHRoaXMucHJvdG90eXBlID09PSBPKSByZXR1cm4gdHJ1ZTtcbiAgcmV0dXJuIGZhbHNlO1xufSB9KTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgRlByb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xudmFyIG5hbWVSRSA9IC9eXFxzKmZ1bmN0aW9uIChbXiAoXSopLztcbnZhciBOQU1FID0gJ25hbWUnO1xuXG4vLyAxOS4yLjQuMiBuYW1lXG5OQU1FIGluIEZQcm90byB8fCByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmIGRQKEZQcm90bywgTkFNRSwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gKCcnICsgdGhpcykubWF0Y2gobmFtZVJFKVsxXTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9XG59KTtcbiIsIi8vIDE5LjIuMy4yIC8gMTUuMy40LjUgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQodGhpc0FyZywgYXJncy4uLilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnRnVuY3Rpb24nLCB7IGJpbmQ6IHJlcXVpcmUoJy4vX2JpbmQnKSB9KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgdGVzdCA9IHt9O1xudGVzdFtyZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKV0gPSAneic7XG5pZiAodGVzdCArICcnICE9ICdbb2JqZWN0IHpdJykge1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKE9iamVjdC5wcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiAnW29iamVjdCAnICsgY2xhc3NvZih0aGlzKSArICddJztcbiAgfSwgdHJ1ZSk7XG59XG4iLCIvLyAxOS4xLjMuMTkgT2JqZWN0LnNldFByb3RvdHlwZU9mKE8sIHByb3RvKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBzZXRQcm90b3R5cGVPZjogcmVxdWlyZSgnLi9fc2V0LXByb3RvJykuc2V0IH0pO1xuIiwiLy8gNy4yLjkgU2FtZVZhbHVlKHgsIHkpXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5pcyB8fCBmdW5jdGlvbiBpcyh4LCB5KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgcmV0dXJuIHggPT09IHkgPyB4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geSA6IHggIT0geCAmJiB5ICE9IHk7XG59O1xuIiwiLy8gMTkuMS4zLjEwIE9iamVjdC5pcyh2YWx1ZTEsIHZhbHVlMilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgaXM6IHJlcXVpcmUoJy4vX3NhbWUtdmFsdWUnKSB9KTtcbiIsIi8vIDE5LjEuMy4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiwgJ09iamVjdCcsIHsgYXNzaWduOiByZXF1aXJlKCcuL19vYmplY3QtYXNzaWduJykgfSk7XG4iLCIvLyAxOS4xLjIuMTEgT2JqZWN0LmlzRXh0ZW5zaWJsZShPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNFeHRlbnNpYmxlJywgZnVuY3Rpb24gKCRpc0V4dGVuc2libGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZShpdCkge1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNFeHRlbnNpYmxlID8gJGlzRXh0ZW5zaWJsZShpdCkgOiB0cnVlIDogZmFsc2U7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xMyBPYmplY3QuaXNTZWFsZWQoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2lzU2VhbGVkJywgZnVuY3Rpb24gKCRpc1NlYWxlZCkge1xuICByZXR1cm4gZnVuY3Rpb24gaXNTZWFsZWQoaXQpIHtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzU2VhbGVkID8gJGlzU2VhbGVkKGl0KSA6IGZhbHNlIDogdHJ1ZTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjEyIE9iamVjdC5pc0Zyb3plbihPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNGcm96ZW4nLCBmdW5jdGlvbiAoJGlzRnJvemVuKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpc0Zyb3plbihpdCkge1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNGcm96ZW4gPyAkaXNGcm96ZW4oaXQpIDogZmFsc2UgOiB0cnVlO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTUgT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpLm9uRnJlZXplO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ3ByZXZlbnRFeHRlbnNpb25zJywgZnVuY3Rpb24gKCRwcmV2ZW50RXh0ZW5zaW9ucykge1xuICByZXR1cm4gZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnMoaXQpIHtcbiAgICByZXR1cm4gJHByZXZlbnRFeHRlbnNpb25zICYmIGlzT2JqZWN0KGl0KSA/ICRwcmV2ZW50RXh0ZW5zaW9ucyhtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjE3IE9iamVjdC5zZWFsKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpLm9uRnJlZXplO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ3NlYWwnLCBmdW5jdGlvbiAoJHNlYWwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHNlYWwoaXQpIHtcbiAgICByZXR1cm4gJHNlYWwgJiYgaXNPYmplY3QoaXQpID8gJHNlYWwobWV0YShpdCkpIDogaXQ7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi41IE9iamVjdC5mcmVlemUoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJykub25GcmVlemU7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZnJlZXplJywgZnVuY3Rpb24gKCRmcmVlemUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZyZWV6ZShpdCkge1xuICAgIHJldHVybiAkZnJlZXplICYmIGlzT2JqZWN0KGl0KSA/ICRmcmVlemUobWV0YShpdCkpIDogaXQ7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldE93blByb3BlcnR5TmFtZXMnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiByZXF1aXJlKCcuL19vYmplY3QtZ29wbi1leHQnKS5mO1xufSk7XG4iLCIvLyAxOS4xLjIuMTQgT2JqZWN0LmtleXMoTylcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdrZXlzJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24ga2V5cyhpdCkge1xuICAgIHJldHVybiAka2V5cyh0b09iamVjdChpdCkpO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuOSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyICRnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRQcm90b3R5cGVPZicsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKGl0KSB7XG4gICAgcmV0dXJuICRnZXRQcm90b3R5cGVPZih0b09iamVjdChpdCkpO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgICByZXR1cm4gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0b0lPYmplY3QoaXQpLCBrZXkpO1xuICB9O1xufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjMgLyAxNS4yLjMuNyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSwgJ09iamVjdCcsIHsgZGVmaW5lUHJvcGVydGllczogcmVxdWlyZSgnLi9fb2JqZWN0LWRwcycpIH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi40IC8gMTUuMi4zLjYgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpLCAnT2JqZWN0JywgeyBkZWZpbmVQcm9wZXJ0eTogcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZiB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBjcmVhdGU6IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKSB9KTtcbiIsIi8vIGFsbCBlbnVtZXJhYmxlIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBzeW1ib2xzXG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHJlc3VsdCA9IGdldEtleXMoaXQpO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgaWYgKGdldFN5bWJvbHMpIHtcbiAgICB2YXIgc3ltYm9scyA9IGdldFN5bWJvbHMoaXQpO1xuICAgIHZhciBpc0VudW0gPSBwSUUuZjtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAoc3ltYm9scy5sZW5ndGggPiBpKSBpZiAoaXNFbnVtLmNhbGwoaXQsIGtleSA9IHN5bWJvbHNbaSsrXSkpIHJlc3VsdC5wdXNoKGtleSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyBFQ01BU2NyaXB0IDYgc3ltYm9scyBzaGltXG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgTUVUQSA9IHJlcXVpcmUoJy4vX21ldGEnKS5LRVk7XG52YXIgJGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgd2tzRXh0ID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpO1xudmFyIHdrc0RlZmluZSA9IHJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKTtcbnZhciBlbnVtS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0ta2V5cycpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL19pcy1hcnJheScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIF9jcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgZ09QTkV4dCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuLWV4dCcpO1xudmFyICRHT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciAkRFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QRCA9ICRHT1BELmY7XG52YXIgZFAgPSAkRFAuZjtcbnZhciBnT1BOID0gZ09QTkV4dC5mO1xudmFyICRTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyICRKU09OID0gZ2xvYmFsLkpTT047XG52YXIgX3N0cmluZ2lmeSA9ICRKU09OICYmICRKU09OLnN0cmluZ2lmeTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBISURERU4gPSB3a3MoJ19oaWRkZW4nKTtcbnZhciBUT19QUklNSVRJVkUgPSB3a3MoJ3RvUHJpbWl0aXZlJyk7XG52YXIgaXNFbnVtID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG52YXIgU3ltYm9sUmVnaXN0cnkgPSBzaGFyZWQoJ3N5bWJvbC1yZWdpc3RyeScpO1xudmFyIEFsbFN5bWJvbHMgPSBzaGFyZWQoJ3N5bWJvbHMnKTtcbnZhciBPUFN5bWJvbHMgPSBzaGFyZWQoJ29wLXN5bWJvbHMnKTtcbnZhciBPYmplY3RQcm90byA9IE9iamVjdFtQUk9UT1RZUEVdO1xudmFyIFVTRV9OQVRJVkUgPSB0eXBlb2YgJFN5bWJvbCA9PSAnZnVuY3Rpb24nO1xudmFyIFFPYmplY3QgPSBnbG9iYWwuUU9iamVjdDtcbi8vIERvbid0IHVzZSBzZXR0ZXJzIGluIFF0IFNjcmlwdCwgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzE3M1xudmFyIHNldHRlciA9ICFRT2JqZWN0IHx8ICFRT2JqZWN0W1BST1RPVFlQRV0gfHwgIVFPYmplY3RbUFJPVE9UWVBFXS5maW5kQ2hpbGQ7XG5cbi8vIGZhbGxiYWNrIGZvciBvbGQgQW5kcm9pZCwgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTY4N1xudmFyIHNldFN5bWJvbERlc2MgPSBERVNDUklQVE9SUyAmJiAkZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gX2NyZWF0ZShkUCh7fSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkUCh0aGlzLCAnYScsIHsgdmFsdWU6IDcgfSkuYTsgfVxuICB9KSkuYSAhPSA3O1xufSkgPyBmdW5jdGlvbiAoaXQsIGtleSwgRCkge1xuICB2YXIgcHJvdG9EZXNjID0gZ09QRChPYmplY3RQcm90bywga2V5KTtcbiAgaWYgKHByb3RvRGVzYykgZGVsZXRlIE9iamVjdFByb3RvW2tleV07XG4gIGRQKGl0LCBrZXksIEQpO1xuICBpZiAocHJvdG9EZXNjICYmIGl0ICE9PSBPYmplY3RQcm90bykgZFAoT2JqZWN0UHJvdG8sIGtleSwgcHJvdG9EZXNjKTtcbn0gOiBkUDtcblxudmFyIHdyYXAgPSBmdW5jdGlvbiAodGFnKSB7XG4gIHZhciBzeW0gPSBBbGxTeW1ib2xzW3RhZ10gPSBfY3JlYXRlKCRTeW1ib2xbUFJPVE9UWVBFXSk7XG4gIHN5bS5fayA9IHRhZztcbiAgcmV0dXJuIHN5bTtcbn07XG5cbnZhciBpc1N5bWJvbCA9IFVTRV9OQVRJVkUgJiYgdHlwZW9mICRTeW1ib2wuaXRlcmF0b3IgPT0gJ3N5bWJvbCcgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJztcbn0gOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0IGluc3RhbmNlb2YgJFN5bWJvbDtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBEKSB7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG8pICRkZWZpbmVQcm9wZXJ0eShPUFN5bWJvbHMsIGtleSwgRCk7XG4gIGFuT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgYW5PYmplY3QoRCk7XG4gIGlmIChoYXMoQWxsU3ltYm9scywga2V5KSkge1xuICAgIGlmICghRC5lbnVtZXJhYmxlKSB7XG4gICAgICBpZiAoIWhhcyhpdCwgSElEREVOKSkgZFAoaXQsIEhJRERFTiwgY3JlYXRlRGVzYygxLCB7fSkpO1xuICAgICAgaXRbSElEREVOXVtrZXldID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pIGl0W0hJRERFTl1ba2V5XSA9IGZhbHNlO1xuICAgICAgRCA9IF9jcmVhdGUoRCwgeyBlbnVtZXJhYmxlOiBjcmVhdGVEZXNjKDAsIGZhbHNlKSB9KTtcbiAgICB9IHJldHVybiBzZXRTeW1ib2xEZXNjKGl0LCBrZXksIEQpO1xuICB9IHJldHVybiBkUChpdCwga2V5LCBEKTtcbn07XG52YXIgJGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKGl0LCBQKSB7XG4gIGFuT2JqZWN0KGl0KTtcbiAgdmFyIGtleXMgPSBlbnVtS2V5cyhQID0gdG9JT2JqZWN0KFApKTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgbCA9IGtleXMubGVuZ3RoO1xuICB2YXIga2V5O1xuICB3aGlsZSAobCA+IGkpICRkZWZpbmVQcm9wZXJ0eShpdCwga2V5ID0ga2V5c1tpKytdLCBQW2tleV0pO1xuICByZXR1cm4gaXQ7XG59O1xudmFyICRjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaXQsIFApIHtcbiAgcmV0dXJuIFAgPT09IHVuZGVmaW5lZCA/IF9jcmVhdGUoaXQpIDogJGRlZmluZVByb3BlcnRpZXMoX2NyZWF0ZShpdCksIFApO1xufTtcbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShrZXkpIHtcbiAgdmFyIEUgPSBpc0VudW0uY2FsbCh0aGlzLCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKTtcbiAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBFIHx8ICFoYXModGhpcywga2V5KSB8fCAhaGFzKEFsbFN5bWJvbHMsIGtleSkgfHwgaGFzKHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW2tleV0gPyBFIDogdHJ1ZTtcbn07XG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gIGl0ID0gdG9JT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSkgcmV0dXJuO1xuICB2YXIgRCA9IGdPUEQoaXQsIGtleSk7XG4gIGlmIChEICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICEoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkpIEQuZW51bWVyYWJsZSA9IHRydWU7XG4gIHJldHVybiBEO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgdmFyIG5hbWVzID0gZ09QTih0b0lPYmplY3QoaXQpKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgaSA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSB7XG4gICAgaWYgKCFoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYga2V5ICE9IEhJRERFTiAmJiBrZXkgIT0gTUVUQSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSB7XG4gIHZhciBJU19PUCA9IGl0ID09PSBPYmplY3RQcm90bztcbiAgdmFyIG5hbWVzID0gZ09QTihJU19PUCA/IE9QU3ltYm9scyA6IHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIChJU19PUCA/IGhhcyhPYmplY3RQcm90bywga2V5KSA6IHRydWUpKSByZXN1bHQucHVzaChBbGxTeW1ib2xzW2tleV0pO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyAxOS40LjEuMSBTeW1ib2woW2Rlc2NyaXB0aW9uXSlcbmlmICghVVNFX05BVElWRSkge1xuICAkU3ltYm9sID0gZnVuY3Rpb24gU3ltYm9sKCkge1xuICAgIGlmICh0aGlzIGluc3RhbmNlb2YgJFN5bWJvbCkgdGhyb3cgVHlwZUVycm9yKCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3IhJyk7XG4gICAgdmFyIHRhZyA9IHVpZChhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7XG4gICAgdmFyICRzZXQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmICh0aGlzID09PSBPYmplY3RQcm90bykgJHNldC5jYWxsKE9QU3ltYm9scywgdmFsdWUpO1xuICAgICAgaWYgKGhhcyh0aGlzLCBISURERU4pICYmIGhhcyh0aGlzW0hJRERFTl0sIHRhZykpIHRoaXNbSElEREVOXVt0YWddID0gZmFsc2U7XG4gICAgICBzZXRTeW1ib2xEZXNjKHRoaXMsIHRhZywgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xuICAgIH07XG4gICAgaWYgKERFU0NSSVBUT1JTICYmIHNldHRlcikgc2V0U3ltYm9sRGVzYyhPYmplY3RQcm90bywgdGFnLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgc2V0OiAkc2V0IH0pO1xuICAgIHJldHVybiB3cmFwKHRhZyk7XG4gIH07XG4gIHJlZGVmaW5lKCRTeW1ib2xbUFJPVE9UWVBFXSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2s7XG4gIH0pO1xuXG4gICRHT1BELmYgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICAkRFAuZiA9ICRkZWZpbmVQcm9wZXJ0eTtcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mID0gZ09QTkV4dC5mID0gJGdldE93blByb3BlcnR5TmFtZXM7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1waWUnKS5mID0gJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuICByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpLmYgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4gIGlmIChERVNDUklQVE9SUyAmJiAhcmVxdWlyZSgnLi9fbGlicmFyeScpKSB7XG4gICAgcmVkZWZpbmUoT2JqZWN0UHJvdG8sICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsICRwcm9wZXJ0eUlzRW51bWVyYWJsZSwgdHJ1ZSk7XG4gIH1cblxuICB3a3NFeHQuZiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIHdyYXAod2tzKG5hbWUpKTtcbiAgfTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgeyBTeW1ib2w6ICRTeW1ib2wgfSk7XG5cbmZvciAodmFyIGVzNlN5bWJvbHMgPSAoXG4gIC8vIDE5LjQuMi4yLCAxOS40LjIuMywgMTkuNC4yLjQsIDE5LjQuMi42LCAxOS40LjIuOCwgMTkuNC4yLjksIDE5LjQuMi4xMCwgMTkuNC4yLjExLCAxOS40LjIuMTIsIDE5LjQuMi4xMywgMTkuNC4yLjE0XG4gICdoYXNJbnN0YW5jZSxpc0NvbmNhdFNwcmVhZGFibGUsaXRlcmF0b3IsbWF0Y2gscmVwbGFjZSxzZWFyY2gsc3BlY2llcyxzcGxpdCx0b1ByaW1pdGl2ZSx0b1N0cmluZ1RhZyx1bnNjb3BhYmxlcydcbikuc3BsaXQoJywnKSwgaiA9IDA7IGVzNlN5bWJvbHMubGVuZ3RoID4gajspd2tzKGVzNlN5bWJvbHNbaisrXSk7XG5cbmZvciAodmFyIHdlbGxLbm93blN5bWJvbHMgPSAka2V5cyh3a3Muc3RvcmUpLCBrID0gMDsgd2VsbEtub3duU3ltYm9scy5sZW5ndGggPiBrOykgd2tzRGVmaW5lKHdlbGxLbm93blN5bWJvbHNbaysrXSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdTeW1ib2wnLCB7XG4gIC8vIDE5LjQuMi4xIFN5bWJvbC5mb3Ioa2V5KVxuICAnZm9yJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBoYXMoU3ltYm9sUmVnaXN0cnksIGtleSArPSAnJylcbiAgICAgID8gU3ltYm9sUmVnaXN0cnlba2V5XVxuICAgICAgOiBTeW1ib2xSZWdpc3RyeVtrZXldID0gJFN5bWJvbChrZXkpO1xuICB9LFxuICAvLyAxOS40LjIuNSBTeW1ib2wua2V5Rm9yKHN5bSlcbiAga2V5Rm9yOiBmdW5jdGlvbiBrZXlGb3Ioc3ltKSB7XG4gICAgaWYgKCFpc1N5bWJvbChzeW0pKSB0aHJvdyBUeXBlRXJyb3Ioc3ltICsgJyBpcyBub3QgYSBzeW1ib2whJyk7XG4gICAgZm9yICh2YXIga2V5IGluIFN5bWJvbFJlZ2lzdHJ5KSBpZiAoU3ltYm9sUmVnaXN0cnlba2V5XSA9PT0gc3ltKSByZXR1cm4ga2V5O1xuICB9LFxuICB1c2VTZXR0ZXI6IGZ1bmN0aW9uICgpIHsgc2V0dGVyID0gdHJ1ZTsgfSxcbiAgdXNlU2ltcGxlOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IGZhbHNlOyB9XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ09iamVjdCcsIHtcbiAgLy8gMTkuMS4yLjIgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxuICBjcmVhdGU6ICRjcmVhdGUsXG4gIC8vIDE5LjEuMi40IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuICBkZWZpbmVQcm9wZXJ0eTogJGRlZmluZVByb3BlcnR5LFxuICAvLyAxOS4xLjIuMyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKVxuICBkZWZpbmVQcm9wZXJ0aWVzOiAkZGVmaW5lUHJvcGVydGllcyxcbiAgLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKVxuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsXG4gIC8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG4gIGdldE93blByb3BlcnR5TmFtZXM6ICRnZXRPd25Qcm9wZXJ0eU5hbWVzLFxuICAvLyAxOS4xLjIuOCBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKE8pXG4gIGdldE93blByb3BlcnR5U3ltYm9sczogJGdldE93blByb3BlcnR5U3ltYm9sc1xufSk7XG5cbi8vIDI0LjMuMiBKU09OLnN0cmluZ2lmeSh2YWx1ZSBbLCByZXBsYWNlciBbLCBzcGFjZV1dKVxuJEpTT04gJiYgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoIVVTRV9OQVRJVkUgfHwgJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIFMgPSAkU3ltYm9sKCk7XG4gIC8vIE1TIEVkZ2UgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIHt9XG4gIC8vIFdlYktpdCBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMgbnVsbFxuICAvLyBWOCB0aHJvd3Mgb24gYm94ZWQgc3ltYm9sc1xuICByZXR1cm4gX3N0cmluZ2lmeShbU10pICE9ICdbbnVsbF0nIHx8IF9zdHJpbmdpZnkoeyBhOiBTIH0pICE9ICd7fScgfHwgX3N0cmluZ2lmeShPYmplY3QoUykpICE9ICd7fSc7XG59KSksICdKU09OJywge1xuICBzdHJpbmdpZnk6IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCkge1xuICAgIHZhciBhcmdzID0gW2l0XTtcbiAgICB2YXIgaSA9IDE7XG4gICAgdmFyIHJlcGxhY2VyLCAkcmVwbGFjZXI7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgICRyZXBsYWNlciA9IHJlcGxhY2VyID0gYXJnc1sxXTtcbiAgICBpZiAoIWlzT2JqZWN0KHJlcGxhY2VyKSAmJiBpdCA9PT0gdW5kZWZpbmVkIHx8IGlzU3ltYm9sKGl0KSkgcmV0dXJuOyAvLyBJRTggcmV0dXJucyBzdHJpbmcgb24gdW5kZWZpbmVkXG4gICAgaWYgKCFpc0FycmF5KHJlcGxhY2VyKSkgcmVwbGFjZXIgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiAkcmVwbGFjZXIgPT0gJ2Z1bmN0aW9uJykgdmFsdWUgPSAkcmVwbGFjZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgIGlmICghaXNTeW1ib2wodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgICBhcmdzWzFdID0gcmVwbGFjZXI7XG4gICAgcmV0dXJuIF9zdHJpbmdpZnkuYXBwbHkoJEpTT04sIGFyZ3MpO1xuICB9XG59KTtcblxuLy8gMTkuNC4zLjQgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXShoaW50KVxuJFN5bWJvbFtQUk9UT1RZUEVdW1RPX1BSSU1JVElWRV0gfHwgcmVxdWlyZSgnLi9faGlkZScpKCRTeW1ib2xbUFJPVE9UWVBFXSwgVE9fUFJJTUlUSVZFLCAkU3ltYm9sW1BST1RPVFlQRV0udmFsdWVPZik7XG4vLyAxOS40LjMuNSBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZygkU3ltYm9sLCAnU3ltYm9sJyk7XG4vLyAyMC4yLjEuOSBNYXRoW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhNYXRoLCAnTWF0aCcsIHRydWUpO1xuLy8gMjQuMy4zIEpTT05bQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKGdsb2JhbC5KU09OLCAnSlNPTicsIHRydWUpO1xuIiwicmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zeW1ib2wnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydGllcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5mcmVlemUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnNlYWwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnByZXZlbnQtZXh0ZW5zaW9ucycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZnJvemVuJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1zZWFsZWQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmlzLWV4dGVuc2libGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5mdW5jdGlvbi5iaW5kJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmZ1bmN0aW9uLm5hbWUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZnVuY3Rpb24uaGFzLWluc3RhbmNlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnBhcnNlLWludCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5wYXJzZS1mbG9hdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuY29uc3RydWN0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLnRvLWZpeGVkJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci50by1wcmVjaXNpb24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmVwc2lsb24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmlzLWZpbml0ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtaW50ZWdlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtbmFuJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5pcy1zYWZlLWludGVnZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLm1heC1zYWZlLWludGVnZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLm1pbi1zYWZlLWludGVnZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWZsb2F0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1pbnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5hY29zaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmFzaW5oJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguYXRhbmgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5jYnJ0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguY2x6MzInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5jb3NoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguZXhwbTEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5mcm91bmQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5oeXBvdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmltdWwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5sb2cxMCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmxvZzFwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGgubG9nMicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLnNpZ24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5zaW5oJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGgudGFuaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLnRydW5jJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5mcm9tLWNvZGUtcG9pbnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnJhdycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcudHJpbScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmNvZGUtcG9pbnQtYXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmVuZHMtd2l0aCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuaW5jbHVkZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnJlcGVhdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3RhcnRzLXdpdGgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmFuY2hvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuYmlnJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5ibGluaycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuYm9sZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZml4ZWQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRjb2xvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udHNpemUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLml0YWxpY3MnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmxpbmsnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnNtYWxsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5zdHJpa2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnN1YicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3VwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUubm93Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUudG8tanNvbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5kYXRlLnRvLWlzby1zdHJpbmcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZGF0ZS50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZGF0ZS50by1wcmltaXRpdmUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuaXMtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZnJvbScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5qb2luJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnNsaWNlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnNvcnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZm9yLWVhY2gnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkubWFwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZpbHRlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5zb21lJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmV2ZXJ5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UtcmlnaHQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuaW5kZXgtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkubGFzdC1pbmRleC1vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5jb3B5LXdpdGhpbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5maWxsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZpbmQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZmluZC1pbmRleCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5zcGVjaWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5jb25zdHJ1Y3RvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5mbGFncycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAubWF0Y2gnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLnJlcGxhY2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLnNlYXJjaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAuc3BsaXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucHJvbWlzZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc2V0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LndlYWstbWFwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LndlYWstc2V0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmFycmF5LWJ1ZmZlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5kYXRhLXZpZXcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuaW50OC1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1jbGFtcGVkLWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmludDE2LWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQxNi1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5pbnQzMi1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC51aW50MzItYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuZmxvYXQzMi1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5mbG9hdDY0LWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuYXBwbHknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5jb25zdHJ1Y3QnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5kZWZpbmUtcHJvcGVydHknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5kZWxldGUtcHJvcGVydHknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5lbnVtZXJhdGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuaGFzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuaXMtZXh0ZW5zaWJsZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0Lm93bi1rZXlzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QucHJldmVudC1leHRlbnNpb25zJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5hcnJheS5pbmNsdWRlcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5hcnJheS5mbGF0LW1hcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5hcnJheS5mbGF0dGVuJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy5hdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLXN0YXJ0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtZW5kJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy50cmltLWxlZnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tcmlnaHQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLm1hdGNoLWFsbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LnZhbHVlcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QuZW50cmllcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QuZGVmaW5lLWdldHRlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QuZGVmaW5lLXNldHRlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QubG9va3VwLWdldHRlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QubG9va3VwLXNldHRlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXAudG8tanNvbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zZXQudG8tanNvbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXAub2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc2V0Lm9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LndlYWstbWFwLm9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LndlYWstc2V0Lm9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hcC5mcm9tJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnNldC5mcm9tJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LndlYWstbWFwLmZyb20nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcud2Vhay1zZXQuZnJvbScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5nbG9iYWwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3lzdGVtLmdsb2JhbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5lcnJvci5pcy1lcnJvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmNsYW1wJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguZGVnLXBlci1yYWQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5kZWdyZWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguZnNjYWxlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguaWFkZGgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5pc3ViaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmltdWxoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGgucmFkLXBlci1kZWcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5yYWRpYW5zJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguc2NhbGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC51bXVsaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLnNpZ25iaXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucHJvbWlzZS5maW5hbGx5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnByb21pc2UudHJ5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZGVmaW5lLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZGVsZXRlLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhLWtleXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtb3duLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YS1rZXlzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuaGFzLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuaGFzLW93bi1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0Lm1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LmFzYXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JzZXJ2YWJsZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL3dlYi50aW1lcnMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy93ZWIuaW1tZWRpYXRlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL21vZHVsZXMvX2NvcmUnKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9zaGltXCIpO1xuXG5yZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lXCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9yZWdleHAvZXNjYXBlXCIpO1xuXG5pZiAoZ2xvYmFsLl9iYWJlbFBvbHlmaWxsKSB7XG4gIHRocm93IG5ldyBFcnJvcihcIm9ubHkgb25lIGluc3RhbmNlIG9mIGJhYmVsLXBvbHlmaWxsIGlzIGFsbG93ZWRcIik7XG59XG5nbG9iYWwuX2JhYmVsUG9seWZpbGwgPSB0cnVlO1xuXG52YXIgREVGSU5FX1BST1BFUlRZID0gXCJkZWZpbmVQcm9wZXJ0eVwiO1xuZnVuY3Rpb24gZGVmaW5lKE8sIGtleSwgdmFsdWUpIHtcbiAgT1trZXldIHx8IE9iamVjdFtERUZJTkVfUFJPUEVSVFldKE8sIGtleSwge1xuICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfSk7XG59XG5cbmRlZmluZShTdHJpbmcucHJvdG90eXBlLCBcInBhZExlZnRcIiwgXCJcIi5wYWRTdGFydCk7XG5kZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgXCJwYWRSaWdodFwiLCBcIlwiLnBhZEVuZCk7XG5cblwicG9wLHJldmVyc2Usc2hpZnQsa2V5cyx2YWx1ZXMsZW50cmllcyxpbmRleE9mLGV2ZXJ5LHNvbWUsZm9yRWFjaCxtYXAsZmlsdGVyLGZpbmQsZmluZEluZGV4LGluY2x1ZGVzLGpvaW4sc2xpY2UsY29uY2F0LHB1c2gsc3BsaWNlLHVuc2hpZnQsc29ydCxsYXN0SW5kZXhPZixyZWR1Y2UscmVkdWNlUmlnaHQsY29weVdpdGhpbixmaWxsXCIuc3BsaXQoXCIsXCIpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBbXVtrZXldICYmIGRlZmluZShBcnJheSwga2V5LCBGdW5jdGlvbi5jYWxsLmJpbmQoW11ba2V5XSkpO1xufSk7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuLyoqXG4gKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBvciBub3QgdGhlIG9iamVjdCBpcyBhIERPTSBub2RlLlxuICovXG5mdW5jdGlvbiBpc05vZGUob2JqZWN0KSB7XG4gIHZhciBkb2MgPSBvYmplY3QgPyBvYmplY3Qub3duZXJEb2N1bWVudCB8fCBvYmplY3QgOiBkb2N1bWVudDtcbiAgdmFyIGRlZmF1bHRWaWV3ID0gZG9jLmRlZmF1bHRWaWV3IHx8IHdpbmRvdztcbiAgcmV0dXJuICEhKG9iamVjdCAmJiAodHlwZW9mIGRlZmF1bHRWaWV3Lk5vZGUgPT09ICdmdW5jdGlvbicgPyBvYmplY3QgaW5zdGFuY2VvZiBkZWZhdWx0Vmlldy5Ob2RlIDogdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG9iamVjdC5ub2RlVHlwZSA9PT0gJ251bWJlcicgJiYgdHlwZW9mIG9iamVjdC5ub2RlTmFtZSA9PT0gJ3N0cmluZycpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc05vZGU7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxudmFyIGlzTm9kZSA9IHJlcXVpcmUoJy4vaXNOb2RlJyk7XG5cbi8qKlxuICogQHBhcmFtIHsqfSBvYmplY3QgVGhlIG9iamVjdCB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgb3Igbm90IHRoZSBvYmplY3QgaXMgYSBET00gdGV4dCBub2RlLlxuICovXG5mdW5jdGlvbiBpc1RleHROb2RlKG9iamVjdCkge1xuICByZXR1cm4gaXNOb2RlKG9iamVjdCkgJiYgb2JqZWN0Lm5vZGVUeXBlID09IDM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNUZXh0Tm9kZTsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKi9cblxudmFyIGlzVGV4dE5vZGUgPSByZXF1aXJlKCcuL2lzVGV4dE5vZGUnKTtcblxuLyplc2xpbnQtZGlzYWJsZSBuby1iaXR3aXNlICovXG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgZ2l2ZW4gRE9NIG5vZGUgY29udGFpbnMgb3IgaXMgYW5vdGhlciBET00gbm9kZS5cbiAqL1xuZnVuY3Rpb24gY29udGFpbnNOb2RlKG91dGVyTm9kZSwgaW5uZXJOb2RlKSB7XG4gIGlmICghb3V0ZXJOb2RlIHx8ICFpbm5lck5vZGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSBpZiAob3V0ZXJOb2RlID09PSBpbm5lck5vZGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIGlmIChpc1RleHROb2RlKG91dGVyTm9kZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSBpZiAoaXNUZXh0Tm9kZShpbm5lck5vZGUpKSB7XG4gICAgcmV0dXJuIGNvbnRhaW5zTm9kZShvdXRlck5vZGUsIGlubmVyTm9kZS5wYXJlbnROb2RlKTtcbiAgfSBlbHNlIGlmICgnY29udGFpbnMnIGluIG91dGVyTm9kZSkge1xuICAgIHJldHVybiBvdXRlck5vZGUuY29udGFpbnMoaW5uZXJOb2RlKTtcbiAgfSBlbHNlIGlmIChvdXRlck5vZGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24pIHtcbiAgICByZXR1cm4gISEob3V0ZXJOb2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGlubmVyTm9kZSkgJiAxNik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29udGFpbnNOb2RlOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqIFxuICovXG5cbi8qZXNsaW50LWRpc2FibGUgbm8tc2VsZi1jb21wYXJlICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBpbmxpbmVkIE9iamVjdC5pcyBwb2x5ZmlsbCB0byBhdm9pZCByZXF1aXJpbmcgY29uc3VtZXJzIHNoaXAgdGhlaXIgb3duXG4gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvaXNcbiAqL1xuZnVuY3Rpb24gaXMoeCwgeSkge1xuICAvLyBTYW1lVmFsdWUgYWxnb3JpdGhtXG4gIGlmICh4ID09PSB5KSB7XG4gICAgLy8gU3RlcHMgMS01LCA3LTEwXG4gICAgLy8gU3RlcHMgNi5iLTYuZTogKzAgIT0gLTBcbiAgICAvLyBBZGRlZCB0aGUgbm9uemVybyB5IGNoZWNrIHRvIG1ha2UgRmxvdyBoYXBweSwgYnV0IGl0IGlzIHJlZHVuZGFudFxuICAgIHJldHVybiB4ICE9PSAwIHx8IHkgIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICB9IGVsc2Uge1xuICAgIC8vIFN0ZXAgNi5hOiBOYU4gPT0gTmFOXG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG4vKipcbiAqIFBlcmZvcm1zIGVxdWFsaXR5IGJ5IGl0ZXJhdGluZyB0aHJvdWdoIGtleXMgb24gYW4gb2JqZWN0IGFuZCByZXR1cm5pbmcgZmFsc2VcbiAqIHdoZW4gYW55IGtleSBoYXMgdmFsdWVzIHdoaWNoIGFyZSBub3Qgc3RyaWN0bHkgZXF1YWwgYmV0d2VlbiB0aGUgYXJndW1lbnRzLlxuICogUmV0dXJucyB0cnVlIHdoZW4gdGhlIHZhbHVlcyBvZiBhbGwga2V5cyBhcmUgc3RyaWN0bHkgZXF1YWwuXG4gKi9cbmZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCKSB7XG4gIGlmIChpcyhvYmpBLCBvYmpCKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvYmpBICE9PSAnb2JqZWN0JyB8fCBvYmpBID09PSBudWxsIHx8IHR5cGVvZiBvYmpCICE9PSAnb2JqZWN0JyB8fCBvYmpCID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKG9iakIpO1xuXG4gIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXNCLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIFRlc3QgZm9yIEEncyBrZXlzIGRpZmZlcmVudCBmcm9tIEIuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5c0EubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwob2JqQiwga2V5c0FbaV0pIHx8ICFpcyhvYmpBW2tleXNBW2ldXSwgb2JqQltrZXlzQVtpXV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hhbGxvd0VxdWFsOyIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbi8qIGVzbGludC1kaXNhYmxlIGZiLXd3dy90eXBlb2YtdW5kZWZpbmVkICovXG5cbi8qKlxuICogU2FtZSBhcyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGJ1dCB3cmFwcyBpbiBhIHRyeS1jYXRjaCBibG9jay4gSW4gSUUgaXQgaXNcbiAqIG5vdCBzYWZlIHRvIGNhbGwgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBpZiB0aGVyZSBpcyBub3RoaW5nIGZvY3VzZWQuXG4gKlxuICogVGhlIGFjdGl2ZUVsZW1lbnQgd2lsbCBiZSBudWxsIG9ubHkgaWYgdGhlIGRvY3VtZW50IG9yIGRvY3VtZW50IGJvZHkgaXMgbm90XG4gKiB5ZXQgZGVmaW5lZC5cbiAqXG4gKiBAcGFyYW0gez9ET01Eb2N1bWVudH0gZG9jIERlZmF1bHRzIHRvIGN1cnJlbnQgZG9jdW1lbnQuXG4gKiBAcmV0dXJuIHs/RE9NRWxlbWVudH1cbiAqL1xuZnVuY3Rpb24gZ2V0QWN0aXZlRWxlbWVudChkb2MpIC8qP0RPTUVsZW1lbnQqL3tcbiAgZG9jID0gZG9jIHx8ICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnID8gZG9jdW1lbnQgOiB1bmRlZmluZWQpO1xuICBpZiAodHlwZW9mIGRvYyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICB0cnkge1xuICAgIHJldHVybiBkb2MuYWN0aXZlRWxlbWVudCB8fCBkb2MuYm9keTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBkb2MuYm9keTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEFjdGl2ZUVsZW1lbnQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblxuLyoqXG4gKiBTaW1wbGUsIGxpZ2h0d2VpZ2h0IG1vZHVsZSBhc3Npc3Rpbmcgd2l0aCB0aGUgZGV0ZWN0aW9uIGFuZCBjb250ZXh0IG9mXG4gKiBXb3JrZXIuIEhlbHBzIGF2b2lkIGNpcmN1bGFyIGRlcGVuZGVuY2llcyBhbmQgYWxsb3dzIGNvZGUgdG8gcmVhc29uIGFib3V0XG4gKiB3aGV0aGVyIG9yIG5vdCB0aGV5IGFyZSBpbiBhIFdvcmtlciwgZXZlbiBpZiB0aGV5IG5ldmVyIGluY2x1ZGUgdGhlIG1haW5cbiAqIGBSZWFjdFdvcmtlcmAgZGVwZW5kZW5jeS5cbiAqL1xudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0ge1xuXG4gIGNhblVzZURPTTogY2FuVXNlRE9NLFxuXG4gIGNhblVzZVdvcmtlcnM6IHR5cGVvZiBXb3JrZXIgIT09ICd1bmRlZmluZWQnLFxuXG4gIGNhblVzZUV2ZW50TGlzdGVuZXJzOiBjYW5Vc2VET00gJiYgISEod2luZG93LmFkZEV2ZW50TGlzdGVuZXIgfHwgd2luZG93LmF0dGFjaEV2ZW50KSxcblxuICBjYW5Vc2VWaWV3cG9ydDogY2FuVXNlRE9NICYmICEhd2luZG93LnNjcmVlbixcblxuICBpc0luV29ya2VyOiAhY2FuVXNlRE9NIC8vIEZvciBub3csIHRoaXMgaXMgdHJ1ZSAtIG1pZ2h0IGNoYW5nZSBpbiB0aGUgZnV0dXJlLlxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV4ZWN1dGlvbkVudmlyb25tZW50OyIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMy4yXG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYmE9cmVxdWlyZShcImZianMvbGliL2ludmFyaWFudFwiKSxlYT1yZXF1aXJlKFwicmVhY3RcIiksbT1yZXF1aXJlKFwiZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnRcIiksQT1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxDPXJlcXVpcmUoXCJmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uXCIpLGZhPXJlcXVpcmUoXCJmYmpzL2xpYi9nZXRBY3RpdmVFbGVtZW50XCIpLGhhPXJlcXVpcmUoXCJmYmpzL2xpYi9zaGFsbG93RXF1YWxcIiksamE9cmVxdWlyZShcImZianMvbGliL2NvbnRhaW5zTm9kZVwiKSxrYT1yZXF1aXJlKFwiZmJqcy9saWIvZW1wdHlPYmplY3RcIik7XG5mdW5jdGlvbiBEKGEpe2Zvcih2YXIgYj1hcmd1bWVudHMubGVuZ3RoLTEsYz1cImh0dHA6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnRcXHgzZFwiK2EsZD0wO2Q8YjtkKyspYys9XCJcXHgyNmFyZ3NbXVxceDNkXCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tkKzFdKTtiYSghMSxcIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCAlcyBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuIFwiLGMpfWVhP3ZvaWQgMDpEKFwiMjI3XCIpO1xuZnVuY3Rpb24gbWEoYSxiLGMsZCxlLGYsaCxnLGspe3RoaXMuX2hhc0NhdWdodEVycm9yPSExO3RoaXMuX2NhdWdodEVycm9yPW51bGw7dmFyIHY9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsdil9Y2F0Y2gobCl7dGhpcy5fY2F1Z2h0RXJyb3I9bCx0aGlzLl9oYXNDYXVnaHRFcnJvcj0hMH19XG52YXIgRT17X2NhdWdodEVycm9yOm51bGwsX2hhc0NhdWdodEVycm9yOiExLF9yZXRocm93RXJyb3I6bnVsbCxfaGFzUmV0aHJvd0Vycm9yOiExLGludm9rZUd1YXJkZWRDYWxsYmFjazpmdW5jdGlvbihhLGIsYyxkLGUsZixoLGcsayl7bWEuYXBwbHkoRSxhcmd1bWVudHMpfSxpbnZva2VHdWFyZGVkQ2FsbGJhY2tBbmRDYXRjaEZpcnN0RXJyb3I6ZnVuY3Rpb24oYSxiLGMsZCxlLGYsaCxnLGspe0UuaW52b2tlR3VhcmRlZENhbGxiYWNrLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihFLmhhc0NhdWdodEVycm9yKCkpe3ZhciB2PUUuY2xlYXJDYXVnaHRFcnJvcigpO0UuX2hhc1JldGhyb3dFcnJvcnx8KEUuX2hhc1JldGhyb3dFcnJvcj0hMCxFLl9yZXRocm93RXJyb3I9dil9fSxyZXRocm93Q2F1Z2h0RXJyb3I6ZnVuY3Rpb24oKXtyZXR1cm4gbmEuYXBwbHkoRSxhcmd1bWVudHMpfSxoYXNDYXVnaHRFcnJvcjpmdW5jdGlvbigpe3JldHVybiBFLl9oYXNDYXVnaHRFcnJvcn0sY2xlYXJDYXVnaHRFcnJvcjpmdW5jdGlvbigpe2lmKEUuX2hhc0NhdWdodEVycm9yKXt2YXIgYT1cbkUuX2NhdWdodEVycm9yO0UuX2NhdWdodEVycm9yPW51bGw7RS5faGFzQ2F1Z2h0RXJyb3I9ITE7cmV0dXJuIGF9RChcIjE5OFwiKX19O2Z1bmN0aW9uIG5hKCl7aWYoRS5faGFzUmV0aHJvd0Vycm9yKXt2YXIgYT1FLl9yZXRocm93RXJyb3I7RS5fcmV0aHJvd0Vycm9yPW51bGw7RS5faGFzUmV0aHJvd0Vycm9yPSExO3Rocm93IGE7fX12YXIgb2E9bnVsbCxwYT17fTtcbmZ1bmN0aW9uIHFhKCl7aWYob2EpZm9yKHZhciBhIGluIHBhKXt2YXIgYj1wYVthXSxjPW9hLmluZGV4T2YoYSk7LTE8Yz92b2lkIDA6RChcIjk2XCIsYSk7aWYoIXJhW2NdKXtiLmV4dHJhY3RFdmVudHM/dm9pZCAwOkQoXCI5N1wiLGEpO3JhW2NdPWI7Yz1iLmV2ZW50VHlwZXM7Zm9yKHZhciBkIGluIGMpe3ZhciBlPXZvaWQgMDt2YXIgZj1jW2RdLGg9YixnPWQ7c2EuaGFzT3duUHJvcGVydHkoZyk/RChcIjk5XCIsZyk6dm9pZCAwO3NhW2ddPWY7dmFyIGs9Zi5waGFzZWRSZWdpc3RyYXRpb25OYW1lcztpZihrKXtmb3IoZSBpbiBrKWsuaGFzT3duUHJvcGVydHkoZSkmJnRhKGtbZV0saCxnKTtlPSEwfWVsc2UgZi5yZWdpc3RyYXRpb25OYW1lPyh0YShmLnJlZ2lzdHJhdGlvbk5hbWUsaCxnKSxlPSEwKTplPSExO2U/dm9pZCAwOkQoXCI5OFwiLGQsYSl9fX19XG5mdW5jdGlvbiB0YShhLGIsYyl7dWFbYV0/RChcIjEwMFwiLGEpOnZvaWQgMDt1YVthXT1iO3ZhW2FdPWIuZXZlbnRUeXBlc1tjXS5kZXBlbmRlbmNpZXN9dmFyIHJhPVtdLHNhPXt9LHVhPXt9LHZhPXt9O2Z1bmN0aW9uIHdhKGEpe29hP0QoXCIxMDFcIik6dm9pZCAwO29hPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGEpO3FhKCl9ZnVuY3Rpb24geGEoYSl7dmFyIGI9ITEsYztmb3IoYyBpbiBhKWlmKGEuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPWFbY107cGEuaGFzT3duUHJvcGVydHkoYykmJnBhW2NdPT09ZHx8KHBhW2NdP0QoXCIxMDJcIixjKTp2b2lkIDAscGFbY109ZCxiPSEwKX1iJiZxYSgpfVxudmFyIENhPU9iamVjdC5mcmVlemUoe3BsdWdpbnM6cmEsZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzOnNhLHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzOnVhLHJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXM6dmEscG9zc2libGVSZWdpc3RyYXRpb25OYW1lczpudWxsLGluamVjdEV2ZW50UGx1Z2luT3JkZXI6d2EsaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lOnhhfSksRGE9bnVsbCxFYT1udWxsLEZhPW51bGw7ZnVuY3Rpb24gR2EoYSxiLGMsZCl7Yj1hLnR5cGV8fFwidW5rbm93bi1ldmVudFwiO2EuY3VycmVudFRhcmdldD1GYShkKTtFLmludm9rZUd1YXJkZWRDYWxsYmFja0FuZENhdGNoRmlyc3RFcnJvcihiLGMsdm9pZCAwLGEpO2EuY3VycmVudFRhcmdldD1udWxsfVxuZnVuY3Rpb24gSGEoYSxiKXtudWxsPT1iP0QoXCIzMFwiKTp2b2lkIDA7aWYobnVsbD09YSlyZXR1cm4gYjtpZihBcnJheS5pc0FycmF5KGEpKXtpZihBcnJheS5pc0FycmF5KGIpKXJldHVybiBhLnB1c2guYXBwbHkoYSxiKSxhO2EucHVzaChiKTtyZXR1cm4gYX1yZXR1cm4gQXJyYXkuaXNBcnJheShiKT9bYV0uY29uY2F0KGIpOlthLGJdfWZ1bmN0aW9uIElhKGEsYixjKXtBcnJheS5pc0FycmF5KGEpP2EuZm9yRWFjaChiLGMpOmEmJmIuY2FsbChjLGEpfXZhciBKYT1udWxsO1xuZnVuY3Rpb24gS2EoYSxiKXtpZihhKXt2YXIgYz1hLl9kaXNwYXRjaExpc3RlbmVycyxkPWEuX2Rpc3BhdGNoSW5zdGFuY2VzO2lmKEFycmF5LmlzQXJyYXkoYykpZm9yKHZhciBlPTA7ZTxjLmxlbmd0aCYmIWEuaXNQcm9wYWdhdGlvblN0b3BwZWQoKTtlKyspR2EoYSxiLGNbZV0sZFtlXSk7ZWxzZSBjJiZHYShhLGIsYyxkKTthLl9kaXNwYXRjaExpc3RlbmVycz1udWxsO2EuX2Rpc3BhdGNoSW5zdGFuY2VzPW51bGw7YS5pc1BlcnNpc3RlbnQoKXx8YS5jb25zdHJ1Y3Rvci5yZWxlYXNlKGEpfX1mdW5jdGlvbiBMYShhKXtyZXR1cm4gS2EoYSwhMCl9ZnVuY3Rpb24gTWEoYSl7cmV0dXJuIEthKGEsITEpfXZhciBOYT17aW5qZWN0RXZlbnRQbHVnaW5PcmRlcjp3YSxpbmplY3RFdmVudFBsdWdpbnNCeU5hbWU6eGF9O1xuZnVuY3Rpb24gT2EoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtpZighYylyZXR1cm4gbnVsbDt2YXIgZD1EYShjKTtpZighZClyZXR1cm4gbnVsbDtjPWRbYl07YTpzd2l0Y2goYil7Y2FzZSBcIm9uQ2xpY2tcIjpjYXNlIFwib25DbGlja0NhcHR1cmVcIjpjYXNlIFwib25Eb3VibGVDbGlja1wiOmNhc2UgXCJvbkRvdWJsZUNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRG93blwiOmNhc2UgXCJvbk1vdXNlRG93bkNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZU1vdmVcIjpjYXNlIFwib25Nb3VzZU1vdmVDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VVcFwiOmNhc2UgXCJvbk1vdXNlVXBDYXB0dXJlXCI6KGQ9IWQuZGlzYWJsZWQpfHwoYT1hLnR5cGUsZD0hKFwiYnV0dG9uXCI9PT1hfHxcImlucHV0XCI9PT1hfHxcInNlbGVjdFwiPT09YXx8XCJ0ZXh0YXJlYVwiPT09YSkpO2E9IWQ7YnJlYWsgYTtkZWZhdWx0OmE9ITF9aWYoYSlyZXR1cm4gbnVsbDtjJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYz9EKFwiMjMxXCIsYix0eXBlb2YgYyk6dm9pZCAwO1xucmV0dXJuIGN9ZnVuY3Rpb24gUGEoYSxiKXtudWxsIT09YSYmKEphPUhhKEphLGEpKTthPUphO0phPW51bGw7YSYmKGI/SWEoYSxMYSk6SWEoYSxNYSksSmE/RChcIjk1XCIpOnZvaWQgMCxFLnJldGhyb3dDYXVnaHRFcnJvcigpKX1mdW5jdGlvbiBRYShhLGIsYyxkKXtmb3IodmFyIGU9bnVsbCxmPTA7ZjxyYS5sZW5ndGg7ZisrKXt2YXIgaD1yYVtmXTtoJiYoaD1oLmV4dHJhY3RFdmVudHMoYSxiLGMsZCkpJiYoZT1IYShlLGgpKX1QYShlLCExKX12YXIgUmE9T2JqZWN0LmZyZWV6ZSh7aW5qZWN0aW9uOk5hLGdldExpc3RlbmVyOk9hLHJ1bkV2ZW50c0luQmF0Y2g6UGEscnVuRXh0cmFjdGVkRXZlbnRzSW5CYXRjaDpRYX0pLFNhPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLEY9XCJfX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSRcIitTYSxUYT1cIl9fcmVhY3RFdmVudEhhbmRsZXJzJFwiK1NhO1xuZnVuY3Rpb24gVWEoYSl7aWYoYVtGXSlyZXR1cm4gYVtGXTtmb3IoOyFhW0ZdOylpZihhLnBhcmVudE5vZGUpYT1hLnBhcmVudE5vZGU7ZWxzZSByZXR1cm4gbnVsbDthPWFbRl07cmV0dXJuIDU9PT1hLnRhZ3x8Nj09PWEudGFnP2E6bnVsbH1mdW5jdGlvbiBWYShhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7RChcIjMzXCIpfWZ1bmN0aW9uIFhhKGEpe3JldHVybiBhW1RhXXx8bnVsbH12YXIgYmI9T2JqZWN0LmZyZWV6ZSh7cHJlY2FjaGVGaWJlck5vZGU6ZnVuY3Rpb24oYSxiKXtiW0ZdPWF9LGdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlOlVhLGdldEluc3RhbmNlRnJvbU5vZGU6ZnVuY3Rpb24oYSl7YT1hW0ZdO3JldHVybiFhfHw1IT09YS50YWcmJjYhPT1hLnRhZz9udWxsOmF9LGdldE5vZGVGcm9tSW5zdGFuY2U6VmEsZ2V0RmliZXJDdXJyZW50UHJvcHNGcm9tTm9kZTpYYSx1cGRhdGVGaWJlclByb3BzOmZ1bmN0aW9uKGEsYil7YVtUYV09Yn19KTtcbmZ1bmN0aW9uIEwoYSl7ZG8gYT1hW1wicmV0dXJuXCJdO3doaWxlKGEmJjUhPT1hLnRhZyk7cmV0dXJuIGE/YTpudWxsfWZ1bmN0aW9uIGNiKGEsYixjKXtmb3IodmFyIGQ9W107YTspZC5wdXNoKGEpLGE9TChhKTtmb3IoYT1kLmxlbmd0aDswPGEtLTspYihkW2FdLFwiY2FwdHVyZWRcIixjKTtmb3IoYT0wO2E8ZC5sZW5ndGg7YSsrKWIoZFthXSxcImJ1YmJsZWRcIixjKX1mdW5jdGlvbiBkYihhLGIsYyl7aWYoYj1PYShhLGMuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXNbYl0pKWMuX2Rpc3BhdGNoTGlzdGVuZXJzPUhhKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPUhhKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpfWZ1bmN0aW9uIGViKGEpe2EmJmEuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMmJmNiKGEuX3RhcmdldEluc3QsZGIsYSl9XG5mdW5jdGlvbiBmYihhKXtpZihhJiZhLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKXt2YXIgYj1hLl90YXJnZXRJbnN0O2I9Yj9MKGIpOm51bGw7Y2IoYixkYixhKX19ZnVuY3Rpb24gZ2IoYSxiLGMpe2EmJmMmJmMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmKGI9T2EoYSxjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUpKSYmKGMuX2Rpc3BhdGNoTGlzdGVuZXJzPUhhKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPUhhKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpKX1mdW5jdGlvbiBoYihhKXthJiZhLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJmdiKGEuX3RhcmdldEluc3QsbnVsbCxhKX1mdW5jdGlvbiBpYihhKXtJYShhLGViKX1cbmZ1bmN0aW9uIGpiKGEsYixjLGQpe2lmKGMmJmQpYTp7dmFyIGU9Yztmb3IodmFyIGY9ZCxoPTAsZz1lO2c7Zz1MKGcpKWgrKztnPTA7Zm9yKHZhciBrPWY7aztrPUwoaykpZysrO2Zvcig7MDxoLWc7KWU9TChlKSxoLS07Zm9yKDswPGctaDspZj1MKGYpLGctLTtmb3IoO2gtLTspe2lmKGU9PT1mfHxlPT09Zi5hbHRlcm5hdGUpYnJlYWsgYTtlPUwoZSk7Zj1MKGYpfWU9bnVsbH1lbHNlIGU9bnVsbDtmPWU7Zm9yKGU9W107YyYmYyE9PWY7KXtoPWMuYWx0ZXJuYXRlO2lmKG51bGwhPT1oJiZoPT09ZilicmVhaztlLnB1c2goYyk7Yz1MKGMpfWZvcihjPVtdO2QmJmQhPT1mOyl7aD1kLmFsdGVybmF0ZTtpZihudWxsIT09aCYmaD09PWYpYnJlYWs7Yy5wdXNoKGQpO2Q9TChkKX1mb3IoZD0wO2Q8ZS5sZW5ndGg7ZCsrKWdiKGVbZF0sXCJidWJibGVkXCIsYSk7Zm9yKGE9Yy5sZW5ndGg7MDxhLS07KWdiKGNbYV0sXCJjYXB0dXJlZFwiLGIpfVxudmFyIGtiPU9iamVjdC5mcmVlemUoe2FjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXM6aWIsYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NraXBUYXJnZXQ6ZnVuY3Rpb24oYSl7SWEoYSxmYil9LGFjY3VtdWxhdGVFbnRlckxlYXZlRGlzcGF0Y2hlczpqYixhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlczpmdW5jdGlvbihhKXtJYShhLGhiKX19KSxsYj1udWxsO2Z1bmN0aW9uIG1iKCl7IWxiJiZtLmNhblVzZURPTSYmKGxiPVwidGV4dENvbnRlbnRcImluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudD9cInRleHRDb250ZW50XCI6XCJpbm5lclRleHRcIik7cmV0dXJuIGxifXZhciBNPXtfcm9vdDpudWxsLF9zdGFydFRleHQ6bnVsbCxfZmFsbGJhY2tUZXh0Om51bGx9O1xuZnVuY3Rpb24gbmIoKXtpZihNLl9mYWxsYmFja1RleHQpcmV0dXJuIE0uX2ZhbGxiYWNrVGV4dDt2YXIgYSxiPU0uX3N0YXJ0VGV4dCxjPWIubGVuZ3RoLGQsZT1vYigpLGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGg9Yy1hO2ZvcihkPTE7ZDw9aCYmYltjLWRdPT09ZVtmLWRdO2QrKyk7TS5fZmFsbGJhY2tUZXh0PWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCk7cmV0dXJuIE0uX2ZhbGxiYWNrVGV4dH1mdW5jdGlvbiBvYigpe3JldHVyblwidmFsdWVcImluIE0uX3Jvb3Q/TS5fcm9vdC52YWx1ZTpNLl9yb290W21iKCldfVxudmFyIHBiPVwiZGlzcGF0Y2hDb25maWcgX3RhcmdldEluc3QgbmF0aXZlRXZlbnQgaXNEZWZhdWx0UHJldmVudGVkIGlzUHJvcGFnYXRpb25TdG9wcGVkIF9kaXNwYXRjaExpc3RlbmVycyBfZGlzcGF0Y2hJbnN0YW5jZXNcIi5zcGxpdChcIiBcIikscWI9e3R5cGU6bnVsbCx0YXJnZXQ6bnVsbCxjdXJyZW50VGFyZ2V0OkMudGhhdFJldHVybnNOdWxsLGV2ZW50UGhhc2U6bnVsbCxidWJibGVzOm51bGwsY2FuY2VsYWJsZTpudWxsLHRpbWVTdGFtcDpmdW5jdGlvbihhKXtyZXR1cm4gYS50aW1lU3RhbXB8fERhdGUubm93KCl9LGRlZmF1bHRQcmV2ZW50ZWQ6bnVsbCxpc1RydXN0ZWQ6bnVsbH07XG5mdW5jdGlvbiBOKGEsYixjLGQpe3RoaXMuZGlzcGF0Y2hDb25maWc9YTt0aGlzLl90YXJnZXRJbnN0PWI7dGhpcy5uYXRpdmVFdmVudD1jO2E9dGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2U7Zm9yKHZhciBlIGluIGEpYS5oYXNPd25Qcm9wZXJ0eShlKSYmKChiPWFbZV0pP3RoaXNbZV09YihjKTpcInRhcmdldFwiPT09ZT90aGlzLnRhcmdldD1kOnRoaXNbZV09Y1tlXSk7dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9KG51bGwhPWMuZGVmYXVsdFByZXZlbnRlZD9jLmRlZmF1bHRQcmV2ZW50ZWQ6ITE9PT1jLnJldHVyblZhbHVlKT9DLnRoYXRSZXR1cm5zVHJ1ZTpDLnRoYXRSZXR1cm5zRmFsc2U7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1DLnRoYXRSZXR1cm5zRmFsc2U7cmV0dXJuIHRoaXN9XG5BKE4ucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiYoYS5yZXR1cm5WYWx1ZT0hMSksdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9Qy50aGF0UmV0dXJuc1RydWUpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnN0b3BQcm9wYWdhdGlvbj9hLnN0b3BQcm9wYWdhdGlvbigpOlwidW5rbm93blwiIT09dHlwZW9mIGEuY2FuY2VsQnViYmxlJiYoYS5jYW5jZWxCdWJibGU9ITApLHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9Qy50aGF0UmV0dXJuc1RydWUpfSxwZXJzaXN0OmZ1bmN0aW9uKCl7dGhpcy5pc1BlcnNpc3RlbnQ9Qy50aGF0UmV0dXJuc1RydWV9LGlzUGVyc2lzdGVudDpDLnRoYXRSZXR1cm5zRmFsc2UsXG5kZXN0cnVjdG9yOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2UsYjtmb3IoYiBpbiBhKXRoaXNbYl09bnVsbDtmb3IoYT0wO2E8cGIubGVuZ3RoO2ErKyl0aGlzW3BiW2FdXT1udWxsfX0pO04uSW50ZXJmYWNlPXFiO04uZXh0ZW5kPWZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIoKXt9ZnVuY3Rpb24gYygpe3JldHVybiBkLmFwcGx5KHRoaXMsYXJndW1lbnRzKX12YXIgZD10aGlzO2IucHJvdG90eXBlPWQucHJvdG90eXBlO3ZhciBlPW5ldyBiO0EoZSxjLnByb3RvdHlwZSk7Yy5wcm90b3R5cGU9ZTtjLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1jO2MuSW50ZXJmYWNlPUEoe30sZC5JbnRlcmZhY2UsYSk7Yy5leHRlbmQ9ZC5leHRlbmQ7cmIoYyk7cmV0dXJuIGN9O3JiKE4pO1xuZnVuY3Rpb24gc2IoYSxiLGMsZCl7aWYodGhpcy5ldmVudFBvb2wubGVuZ3RoKXt2YXIgZT10aGlzLmV2ZW50UG9vbC5wb3AoKTt0aGlzLmNhbGwoZSxhLGIsYyxkKTtyZXR1cm4gZX1yZXR1cm4gbmV3IHRoaXMoYSxiLGMsZCl9ZnVuY3Rpb24gdGIoYSl7YSBpbnN0YW5jZW9mIHRoaXM/dm9pZCAwOkQoXCIyMjNcIik7YS5kZXN0cnVjdG9yKCk7MTA+dGhpcy5ldmVudFBvb2wubGVuZ3RoJiZ0aGlzLmV2ZW50UG9vbC5wdXNoKGEpfWZ1bmN0aW9uIHJiKGEpe2EuZXZlbnRQb29sPVtdO2EuZ2V0UG9vbGVkPXNiO2EucmVsZWFzZT10Yn12YXIgdWI9Ti5leHRlbmQoe2RhdGE6bnVsbH0pLHZiPU4uZXh0ZW5kKHtkYXRhOm51bGx9KSx3Yj1bOSwxMywyNywzMl0seGI9bS5jYW5Vc2VET00mJlwiQ29tcG9zaXRpb25FdmVudFwiaW4gd2luZG93LHliPW51bGw7bS5jYW5Vc2VET00mJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmKHliPWRvY3VtZW50LmRvY3VtZW50TW9kZSk7XG52YXIgemI9bS5jYW5Vc2VET00mJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiF5YixBYj1tLmNhblVzZURPTSYmKCF4Ynx8eWImJjg8eWImJjExPj15YiksQmI9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksS2I9e2JlZm9yZUlucHV0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQmVmb3JlSW5wdXRcIixjYXB0dXJlZDpcIm9uQmVmb3JlSW5wdXRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbXCJ0b3BDb21wb3NpdGlvbkVuZFwiLFwidG9wS2V5UHJlc3NcIixcInRvcFRleHRJbnB1dFwiLFwidG9wUGFzdGVcIl19LGNvbXBvc2l0aW9uRW5kOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25FbmRcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25FbmRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcInRvcEJsdXIgdG9wQ29tcG9zaXRpb25FbmQgdG9wS2V5RG93biB0b3BLZXlQcmVzcyB0b3BLZXlVcCB0b3BNb3VzZURvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uU3RhcnQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblN0YXJ0XCIsXG5jYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25TdGFydENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwidG9wQmx1ciB0b3BDb21wb3NpdGlvblN0YXJ0IHRvcEtleURvd24gdG9wS2V5UHJlc3MgdG9wS2V5VXAgdG9wTW91c2VEb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblVwZGF0ZTp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uVXBkYXRlXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uVXBkYXRlQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJ0b3BCbHVyIHRvcENvbXBvc2l0aW9uVXBkYXRlIHRvcEtleURvd24gdG9wS2V5UHJlc3MgdG9wS2V5VXAgdG9wTW91c2VEb3duXCIuc3BsaXQoXCIgXCIpfX0sTGI9ITE7XG5mdW5jdGlvbiBNYihhLGIpe3N3aXRjaChhKXtjYXNlIFwidG9wS2V5VXBcIjpyZXR1cm4tMSE9PXdiLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwidG9wS2V5RG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcInRvcEtleVByZXNzXCI6Y2FzZSBcInRvcE1vdXNlRG93blwiOmNhc2UgXCJ0b3BCbHVyXCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gTmIoYSl7YT1hLmRldGFpbDtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJlwiZGF0YVwiaW4gYT9hLmRhdGE6bnVsbH12YXIgT2I9ITE7ZnVuY3Rpb24gUGIoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcInRvcENvbXBvc2l0aW9uRW5kXCI6cmV0dXJuIE5iKGIpO2Nhc2UgXCJ0b3BLZXlQcmVzc1wiOmlmKDMyIT09Yi53aGljaClyZXR1cm4gbnVsbDtMYj0hMDtyZXR1cm4gQmI7Y2FzZSBcInRvcFRleHRJbnB1dFwiOnJldHVybiBhPWIuZGF0YSxhPT09QmImJkxiP251bGw6YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIFFiKGEsYil7aWYoT2IpcmV0dXJuXCJ0b3BDb21wb3NpdGlvbkVuZFwiPT09YXx8IXhiJiZNYihhLGIpPyhhPW5iKCksTS5fcm9vdD1udWxsLE0uX3N0YXJ0VGV4dD1udWxsLE0uX2ZhbGxiYWNrVGV4dD1udWxsLE9iPSExLGEpOm51bGw7c3dpdGNoKGEpe2Nhc2UgXCJ0b3BQYXN0ZVwiOnJldHVybiBudWxsO2Nhc2UgXCJ0b3BLZXlQcmVzc1wiOmlmKCEoYi5jdHJsS2V5fHxiLmFsdEtleXx8Yi5tZXRhS2V5KXx8Yi5jdHJsS2V5JiZiLmFsdEtleSl7aWYoYi5jaGFyJiYxPGIuY2hhci5sZW5ndGgpcmV0dXJuIGIuY2hhcjtpZihiLndoaWNoKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGIud2hpY2gpfXJldHVybiBudWxsO2Nhc2UgXCJ0b3BDb21wb3NpdGlvbkVuZFwiOnJldHVybiBBYj9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciBSYj17ZXZlbnRUeXBlczpLYixleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPXZvaWQgMDt2YXIgZj12b2lkIDA7aWYoeGIpYjp7c3dpdGNoKGEpe2Nhc2UgXCJ0b3BDb21wb3NpdGlvblN0YXJ0XCI6ZT1LYi5jb21wb3NpdGlvblN0YXJ0O2JyZWFrIGI7Y2FzZSBcInRvcENvbXBvc2l0aW9uRW5kXCI6ZT1LYi5jb21wb3NpdGlvbkVuZDticmVhayBiO2Nhc2UgXCJ0b3BDb21wb3NpdGlvblVwZGF0ZVwiOmU9S2IuY29tcG9zaXRpb25VcGRhdGU7YnJlYWsgYn1lPXZvaWQgMH1lbHNlIE9iP01iKGEsYykmJihlPUtiLmNvbXBvc2l0aW9uRW5kKTpcInRvcEtleURvd25cIj09PWEmJjIyOT09PWMua2V5Q29kZSYmKGU9S2IuY29tcG9zaXRpb25TdGFydCk7ZT8oQWImJihPYnx8ZSE9PUtiLmNvbXBvc2l0aW9uU3RhcnQ/ZT09PUtiLmNvbXBvc2l0aW9uRW5kJiZPYiYmKGY9bmIoKSk6KE0uX3Jvb3Q9ZCxNLl9zdGFydFRleHQ9b2IoKSxPYj0hMCkpLGU9dWIuZ2V0UG9vbGVkKGUsXG5iLGMsZCksZj9lLmRhdGE9ZjooZj1OYihjKSxudWxsIT09ZiYmKGUuZGF0YT1mKSksaWIoZSksZj1lKTpmPW51bGw7KGE9emI/UGIoYSxjKTpRYihhLGMpKT8oYj12Yi5nZXRQb29sZWQoS2IuYmVmb3JlSW5wdXQsYixjLGQpLGIuZGF0YT1hLGliKGIpKTpiPW51bGw7cmV0dXJuIG51bGw9PT1mP2I6bnVsbD09PWI/ZjpbZixiXX19LFNiPW51bGwsVGI9e2luamVjdEZpYmVyQ29udHJvbGxlZEhvc3RDb21wb25lbnQ6ZnVuY3Rpb24oYSl7U2I9YX19LFViPW51bGwsVmI9bnVsbDtmdW5jdGlvbiBXYihhKXtpZihhPUVhKGEpKXtTYiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIFNiLnJlc3RvcmVDb250cm9sbGVkU3RhdGU/dm9pZCAwOkQoXCIxOTRcIik7dmFyIGI9RGEoYS5zdGF0ZU5vZGUpO1NiLnJlc3RvcmVDb250cm9sbGVkU3RhdGUoYS5zdGF0ZU5vZGUsYS50eXBlLGIpfX1mdW5jdGlvbiBYYihhKXtVYj9WYj9WYi5wdXNoKGEpOlZiPVthXTpVYj1hfVxuZnVuY3Rpb24gWWIoKXtyZXR1cm4gbnVsbCE9PVVifHxudWxsIT09VmJ9ZnVuY3Rpb24gWmIoKXtpZihVYil7dmFyIGE9VWIsYj1WYjtWYj1VYj1udWxsO1diKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKylXYihiW2FdKX19dmFyICRiPU9iamVjdC5mcmVlemUoe2luamVjdGlvbjpUYixlbnF1ZXVlU3RhdGVSZXN0b3JlOlhiLG5lZWRzU3RhdGVSZXN0b3JlOlliLHJlc3RvcmVTdGF0ZUlmTmVlZGVkOlpifSk7ZnVuY3Rpb24gYWMoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBiYyhhLGIsYyl7cmV0dXJuIGEoYixjKX1mdW5jdGlvbiBjYygpe312YXIgZGM9ITE7ZnVuY3Rpb24gZWMoYSxiKXtpZihkYylyZXR1cm4gYShiKTtkYz0hMDt0cnl7cmV0dXJuIGFjKGEsYil9ZmluYWxseXtkYz0hMSxZYigpJiYoY2MoKSxaYigpKX19XG52YXIgZmM9e2NvbG9yOiEwLGRhdGU6ITAsZGF0ZXRpbWU6ITAsXCJkYXRldGltZS1sb2NhbFwiOiEwLGVtYWlsOiEwLG1vbnRoOiEwLG51bWJlcjohMCxwYXNzd29yZDohMCxyYW5nZTohMCxzZWFyY2g6ITAsdGVsOiEwLHRleHQ6ITAsdGltZTohMCx1cmw6ITAsd2VlazohMH07ZnVuY3Rpb24gZ2MoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWI/ISFmY1thLnR5cGVdOlwidGV4dGFyZWFcIj09PWI/ITA6ITF9ZnVuY3Rpb24gaGMoYSl7YT1hLnRhcmdldHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX1cbmZ1bmN0aW9uIGljKGEsYil7aWYoIW0uY2FuVXNlRE9NfHxiJiYhKFwiYWRkRXZlbnRMaXN0ZW5lclwiaW4gZG9jdW1lbnQpKXJldHVybiExO2E9XCJvblwiK2E7Yj1hIGluIGRvY3VtZW50O2J8fChiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYi5zZXRBdHRyaWJ1dGUoYSxcInJldHVybjtcIiksYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgYlthXSk7cmV0dXJuIGJ9ZnVuY3Rpb24gamMoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIGtjKGEpe3ZhciBiPWpjKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGMuZ2V0LmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtjLnNldC5jYWxsKHRoaXMsYSl9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KSx7Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1udWxsO2RlbGV0ZSBhW2JdfX19XG5mdW5jdGlvbiBsYyhhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9a2MoYSkpfWZ1bmN0aW9uIG1jKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD1qYyhhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfVxudmFyIG5jPWVhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELlJlYWN0Q3VycmVudE93bmVyLE89XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sW1wiZm9yXCJdLG9jPU8/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxwYz1PP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmNhbGxcIik6NjAxMDQscWM9Tz9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5yZXR1cm5cIik6NjAxMDUscmM9Tz9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsc2M9Tz9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyx0Yz1PP1N5bWJvbFtcImZvclwiXShcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LHVjPU8/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksdmM9Tz9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLHdjPU8/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxcbnhjPU8/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIseWM9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIHpjKGEpe2lmKG51bGw9PT1hfHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT15YyYmYVt5Y118fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1cbmZ1bmN0aW9uIEFjKGEpe2E9YS50eXBlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBhLmRpc3BsYXlOYW1lfHxhLm5hbWU7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVybiBhO3N3aXRjaChhKXtjYXNlIHNjOnJldHVyblwiUmVhY3RGcmFnbWVudFwiO2Nhc2UgcmM6cmV0dXJuXCJSZWFjdFBvcnRhbFwiO2Nhc2UgcGM6cmV0dXJuXCJSZWFjdENhbGxcIjtjYXNlIHFjOnJldHVyblwiUmVhY3RSZXR1cm5cIn1pZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHhjOnJldHVybiBhPWEucmVuZGVyLmRpc3BsYXlOYW1lfHxhLnJlbmRlci5uYW1lfHxcIlwiLFwiXCIhPT1hP1wiRm9yd2FyZFJlZihcIithK1wiKVwiOlwiRm9yd2FyZFJlZlwifXJldHVybiBudWxsfVxuZnVuY3Rpb24gQmMoYSl7dmFyIGI9XCJcIjtkb3thOnN3aXRjaChhLnRhZyl7Y2FzZSAwOmNhc2UgMTpjYXNlIDI6Y2FzZSA1OnZhciBjPWEuX2RlYnVnT3duZXIsZD1hLl9kZWJ1Z1NvdXJjZTt2YXIgZT1BYyhhKTt2YXIgZj1udWxsO2MmJihmPUFjKGMpKTtjPWQ7ZT1cIlxcbiAgICBpbiBcIisoZXx8XCJVbmtub3duXCIpKyhjP1wiIChhdCBcIitjLmZpbGVOYW1lLnJlcGxhY2UoL14uKltcXFxcXFwvXS8sXCJcIikrXCI6XCIrYy5saW5lTnVtYmVyK1wiKVwiOmY/XCIgKGNyZWF0ZWQgYnkgXCIrZitcIilcIjpcIlwiKTticmVhayBhO2RlZmF1bHQ6ZT1cIlwifWIrPWU7YT1hW1wicmV0dXJuXCJdfXdoaWxlKGEpO3JldHVybiBifVxudmFyIENjPS9eWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXVs6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcLS4wLTlcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwXSokLyxEYz17fSxFYz17fTtmdW5jdGlvbiBGYyhhKXtpZihFYy5oYXNPd25Qcm9wZXJ0eShhKSlyZXR1cm4hMDtpZihEYy5oYXNPd25Qcm9wZXJ0eShhKSlyZXR1cm4hMTtpZihDYy50ZXN0KGEpKXJldHVybiBFY1thXT0hMDtEY1thXT0hMDtyZXR1cm4hMX1cbmZ1bmN0aW9uIEdjKGEsYixjLGQpe2lmKG51bGwhPT1jJiYwPT09Yy50eXBlKXJldHVybiExO3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcImZ1bmN0aW9uXCI6Y2FzZSBcInN5bWJvbFwiOnJldHVybiEwO2Nhc2UgXCJib29sZWFuXCI6aWYoZClyZXR1cm4hMTtpZihudWxsIT09YylyZXR1cm4hYy5hY2NlcHRzQm9vbGVhbnM7YT1hLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw1KTtyZXR1cm5cImRhdGEtXCIhPT1hJiZcImFyaWEtXCIhPT1hO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIEhjKGEsYixjLGQpe2lmKG51bGw9PT1ifHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGJ8fEdjKGEsYixjLGQpKXJldHVybiEwO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfVxuZnVuY3Rpb24gVShhLGIsYyxkLGUpe3RoaXMuYWNjZXB0c0Jvb2xlYW5zPTI9PT1ifHwzPT09Ynx8ND09PWI7dGhpcy5hdHRyaWJ1dGVOYW1lPWQ7dGhpcy5hdHRyaWJ1dGVOYW1lc3BhY2U9ZTt0aGlzLm11c3RVc2VQcm9wZXJ0eT1jO3RoaXMucHJvcGVydHlOYW1lPWE7dGhpcy50eXBlPWJ9dmFyIFY9e307XCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtWW2FdPW5ldyBVKGEsMCwhMSxhLG51bGwpfSk7XG5bW1wiYWNjZXB0Q2hhcnNldFwiLFwiYWNjZXB0LWNoYXJzZXRcIl0sW1wiY2xhc3NOYW1lXCIsXCJjbGFzc1wiXSxbXCJodG1sRm9yXCIsXCJmb3JcIl0sW1wiaHR0cEVxdWl2XCIsXCJodHRwLWVxdWl2XCJdXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWFbMF07VltiXT1uZXcgVShiLDEsITEsYVsxXSxudWxsKX0pO1tcImNvbnRlbnRFZGl0YWJsZVwiLFwiZHJhZ2dhYmxlXCIsXCJzcGVsbENoZWNrXCIsXCJ2YWx1ZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1ZbYV09bmV3IFUoYSwyLCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1tcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7VlthXT1uZXcgVShhLDIsITEsYSxudWxsKX0pO1xuXCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZm9ybU5vVmFsaWRhdGUgaGlkZGVuIGxvb3Agbm9Nb2R1bGUgbm9WYWxpZGF0ZSBvcGVuIHBsYXlzSW5saW5lIHJlYWRPbmx5IHJlcXVpcmVkIHJldmVyc2VkIHNjb3BlZCBzZWFtbGVzcyBpdGVtU2NvcGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtWW2FdPW5ldyBVKGEsMywhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtbXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7VlthXT1uZXcgVShhLDMsITAsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7W1wiY2FwdHVyZVwiLFwiZG93bmxvYWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtWW2FdPW5ldyBVKGEsNCwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtcbltcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtWW2FdPW5ldyBVKGEsNiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtbXCJyb3dTcGFuXCIsXCJzdGFydFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1ZbYV09bmV3IFUoYSw1LCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO3ZhciBTYz0vW1xcLTpdKFthLXpdKS9nO2Z1bmN0aW9uIFRjKGEpe3JldHVybiBhWzFdLnRvVXBwZXJDYXNlKCl9XG5cImFjY2VudC1oZWlnaHQgYWxpZ25tZW50LWJhc2VsaW5lIGFyYWJpYy1mb3JtIGJhc2VsaW5lLXNoaWZ0IGNhcC1oZWlnaHQgY2xpcC1wYXRoIGNsaXAtcnVsZSBjb2xvci1pbnRlcnBvbGF0aW9uIGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycyBjb2xvci1wcm9maWxlIGNvbG9yLXJlbmRlcmluZyBkb21pbmFudC1iYXNlbGluZSBlbmFibGUtYmFja2dyb3VuZCBmaWxsLW9wYWNpdHkgZmlsbC1ydWxlIGZsb29kLWNvbG9yIGZsb29kLW9wYWNpdHkgZm9udC1mYW1pbHkgZm9udC1zaXplIGZvbnQtc2l6ZS1hZGp1c3QgZm9udC1zdHJldGNoIGZvbnQtc3R5bGUgZm9udC12YXJpYW50IGZvbnQtd2VpZ2h0IGdseXBoLW5hbWUgZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCBnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbCBob3Jpei1hZHYteCBob3Jpei1vcmlnaW4teCBpbWFnZS1yZW5kZXJpbmcgbGV0dGVyLXNwYWNpbmcgbGlnaHRpbmctY29sb3IgbWFya2VyLWVuZCBtYXJrZXItbWlkIG1hcmtlci1zdGFydCBvdmVybGluZS1wb3NpdGlvbiBvdmVybGluZS10aGlja25lc3MgcGFpbnQtb3JkZXIgcGFub3NlLTEgcG9pbnRlci1ldmVudHMgcmVuZGVyaW5nLWludGVudCBzaGFwZS1yZW5kZXJpbmcgc3RvcC1jb2xvciBzdG9wLW9wYWNpdHkgc3RyaWtldGhyb3VnaC1wb3NpdGlvbiBzdHJpa2V0aHJvdWdoLXRoaWNrbmVzcyBzdHJva2UtZGFzaGFycmF5IHN0cm9rZS1kYXNob2Zmc2V0IHN0cm9rZS1saW5lY2FwIHN0cm9rZS1saW5lam9pbiBzdHJva2UtbWl0ZXJsaW1pdCBzdHJva2Utb3BhY2l0eSBzdHJva2Utd2lkdGggdGV4dC1hbmNob3IgdGV4dC1kZWNvcmF0aW9uIHRleHQtcmVuZGVyaW5nIHVuZGVybGluZS1wb3NpdGlvbiB1bmRlcmxpbmUtdGhpY2tuZXNzIHVuaWNvZGUtYmlkaSB1bmljb2RlLXJhbmdlIHVuaXRzLXBlci1lbSB2LWFscGhhYmV0aWMgdi1oYW5naW5nIHYtaWRlb2dyYXBoaWMgdi1tYXRoZW1hdGljYWwgdmVjdG9yLWVmZmVjdCB2ZXJ0LWFkdi15IHZlcnQtb3JpZ2luLXggdmVydC1vcmlnaW4teSB3b3JkLXNwYWNpbmcgd3JpdGluZy1tb2RlIHhtbG5zOnhsaW5rIHgtaGVpZ2h0XCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKFNjLFxuVGMpO1ZbYl09bmV3IFUoYiwxLCExLGEsbnVsbCl9KTtcInhsaW5rOmFjdHVhdGUgeGxpbms6YXJjcm9sZSB4bGluazpocmVmIHhsaW5rOnJvbGUgeGxpbms6c2hvdyB4bGluazp0aXRsZSB4bGluazp0eXBlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKFNjLFRjKTtWW2JdPW5ldyBVKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiKX0pO1tcInhtbDpiYXNlXCIsXCJ4bWw6bGFuZ1wiLFwieG1sOnNwYWNlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKFNjLFRjKTtWW2JdPW5ldyBVKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIpfSk7Vi50YWJJbmRleD1uZXcgVShcInRhYkluZGV4XCIsMSwhMSxcInRhYmluZGV4XCIsbnVsbCk7XG5mdW5jdGlvbiBVYyhhLGIsYyxkKXt2YXIgZT1WLmhhc093blByb3BlcnR5KGIpP1ZbYl06bnVsbDt2YXIgZj1udWxsIT09ZT8wPT09ZS50eXBlOmQ/ITE6ISgyPGIubGVuZ3RoKXx8XCJvXCIhPT1iWzBdJiZcIk9cIiE9PWJbMF18fFwiblwiIT09YlsxXSYmXCJOXCIhPT1iWzFdPyExOiEwO2Z8fChIYyhiLGMsZSxkKSYmKGM9bnVsbCksZHx8bnVsbD09PWU/RmMoYikmJihudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTphLnNldEF0dHJpYnV0ZShiLFwiXCIrYykpOmUubXVzdFVzZVByb3BlcnR5P2FbZS5wcm9wZXJ0eU5hbWVdPW51bGw9PT1jPzM9PT1lLnR5cGU/ITE6XCJcIjpjOihiPWUuYXR0cmlidXRlTmFtZSxkPWUuYXR0cmlidXRlTmFtZXNwYWNlLG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOihlPWUudHlwZSxjPTM9PT1lfHw0PT09ZSYmITA9PT1jP1wiXCI6XCJcIitjLGQ/YS5zZXRBdHRyaWJ1dGVOUyhkLGIsYyk6YS5zZXRBdHRyaWJ1dGUoYixjKSkpKX1cbmZ1bmN0aW9uIFZjKGEsYil7dmFyIGM9Yi5jaGVja2VkO3JldHVybiBBKHt9LGIse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOnZvaWQgMCxjaGVja2VkOm51bGwhPWM/YzphLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWR9KX1mdW5jdGlvbiBXYyhhLGIpe3ZhciBjPW51bGw9PWIuZGVmYXVsdFZhbHVlP1wiXCI6Yi5kZWZhdWx0VmFsdWUsZD1udWxsIT1iLmNoZWNrZWQ/Yi5jaGVja2VkOmIuZGVmYXVsdENoZWNrZWQ7Yz1YYyhudWxsIT1iLnZhbHVlP2IudmFsdWU6Yyk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsQ2hlY2tlZDpkLGluaXRpYWxWYWx1ZTpjLGNvbnRyb2xsZWQ6XCJjaGVja2JveFwiPT09Yi50eXBlfHxcInJhZGlvXCI9PT1iLnR5cGU/bnVsbCE9Yi5jaGVja2VkOm51bGwhPWIudmFsdWV9fWZ1bmN0aW9uIFljKGEsYil7Yj1iLmNoZWNrZWQ7bnVsbCE9YiYmVWMoYSxcImNoZWNrZWRcIixiLCExKX1cbmZ1bmN0aW9uIFpjKGEsYil7WWMoYSxiKTt2YXIgYz1YYyhiLnZhbHVlKTtpZihudWxsIT1jKWlmKFwibnVtYmVyXCI9PT1iLnR5cGUpe2lmKDA9PT1jJiZcIlwiPT09YS52YWx1ZXx8YS52YWx1ZSE9YylhLnZhbHVlPVwiXCIrY31lbHNlIGEudmFsdWUhPT1cIlwiK2MmJihhLnZhbHVlPVwiXCIrYyk7Yi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpPyRjKGEsYi50eXBlLGMpOmIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikmJiRjKGEsYi50eXBlLFhjKGIuZGVmYXVsdFZhbHVlKSk7bnVsbD09Yi5jaGVja2VkJiZudWxsIT1iLmRlZmF1bHRDaGVja2VkJiYoYS5kZWZhdWx0Q2hlY2tlZD0hIWIuZGVmYXVsdENoZWNrZWQpfVxuZnVuY3Rpb24gYWQoYSxiKXtpZihiLmhhc093blByb3BlcnR5KFwidmFsdWVcIil8fGIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikpXCJcIj09PWEudmFsdWUmJihhLnZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSksYS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlO2I9YS5uYW1lO1wiXCIhPT1iJiYoYS5uYW1lPVwiXCIpO2EuZGVmYXVsdENoZWNrZWQ9IWEuZGVmYXVsdENoZWNrZWQ7YS5kZWZhdWx0Q2hlY2tlZD0hYS5kZWZhdWx0Q2hlY2tlZDtcIlwiIT09YiYmKGEubmFtZT1iKX1mdW5jdGlvbiAkYyhhLGIsYyl7aWYoXCJudW1iZXJcIiE9PWJ8fGEub3duZXJEb2N1bWVudC5hY3RpdmVFbGVtZW50IT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9XG5mdW5jdGlvbiBYYyhhKXtzd2l0Y2godHlwZW9mIGEpe2Nhc2UgXCJib29sZWFuXCI6Y2FzZSBcIm51bWJlclwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcInVuZGVmaW5lZFwiOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuXCJcIn19dmFyIGJkPXtjaGFuZ2U6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25DaGFuZ2VcIixjYXB0dXJlZDpcIm9uQ2hhbmdlQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJ0b3BCbHVyIHRvcENoYW5nZSB0b3BDbGljayB0b3BGb2N1cyB0b3BJbnB1dCB0b3BLZXlEb3duIHRvcEtleVVwIHRvcFNlbGVjdGlvbkNoYW5nZVwiLnNwbGl0KFwiIFwiKX19O2Z1bmN0aW9uIGNkKGEsYixjKXthPU4uZ2V0UG9vbGVkKGJkLmNoYW5nZSxhLGIsYyk7YS50eXBlPVwiY2hhbmdlXCI7WGIoYyk7aWIoYSk7cmV0dXJuIGF9dmFyIGRkPW51bGwsZWQ9bnVsbDtmdW5jdGlvbiBmZChhKXtQYShhLCExKX1cbmZ1bmN0aW9uIGdkKGEpe3ZhciBiPVZhKGEpO2lmKG1jKGIpKXJldHVybiBhfWZ1bmN0aW9uIGhkKGEsYil7aWYoXCJ0b3BDaGFuZ2VcIj09PWEpcmV0dXJuIGJ9dmFyIGlkPSExO20uY2FuVXNlRE9NJiYoaWQ9aWMoXCJpbnB1dFwiKSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKSk7ZnVuY3Rpb24gamQoKXtkZCYmKGRkLmRldGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLGtkKSxlZD1kZD1udWxsKX1mdW5jdGlvbiBrZChhKXtcInZhbHVlXCI9PT1hLnByb3BlcnR5TmFtZSYmZ2QoZWQpJiYoYT1jZChlZCxhLGhjKGEpKSxlYyhmZCxhKSl9ZnVuY3Rpb24gbGQoYSxiLGMpe1widG9wRm9jdXNcIj09PWE/KGpkKCksZGQ9YixlZD1jLGRkLmF0dGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLGtkKSk6XCJ0b3BCbHVyXCI9PT1hJiZqZCgpfVxuZnVuY3Rpb24gbWQoYSl7aWYoXCJ0b3BTZWxlY3Rpb25DaGFuZ2VcIj09PWF8fFwidG9wS2V5VXBcIj09PWF8fFwidG9wS2V5RG93blwiPT09YSlyZXR1cm4gZ2QoZWQpfWZ1bmN0aW9uIG5kKGEsYil7aWYoXCJ0b3BDbGlja1wiPT09YSlyZXR1cm4gZ2QoYil9ZnVuY3Rpb24gb2QoYSxiKXtpZihcInRvcElucHV0XCI9PT1hfHxcInRvcENoYW5nZVwiPT09YSlyZXR1cm4gZ2QoYil9XG52YXIgcGQ9e2V2ZW50VHlwZXM6YmQsX2lzSW5wdXRFdmVudFN1cHBvcnRlZDppZCxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWI/VmEoYik6d2luZG93LGY9dm9pZCAwLGg9dm9pZCAwLGc9ZS5ub2RlTmFtZSYmZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1wic2VsZWN0XCI9PT1nfHxcImlucHV0XCI9PT1nJiZcImZpbGVcIj09PWUudHlwZT9mPWhkOmdjKGUpP2lkP2Y9b2Q6KGY9bWQsaD1sZCk6KGc9ZS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWcudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWUudHlwZXx8XCJyYWRpb1wiPT09ZS50eXBlKSYmKGY9bmQpO2lmKGYmJihmPWYoYSxiKSkpcmV0dXJuIGNkKGYsYyxkKTtoJiZoKGEsZSxiKTtcInRvcEJsdXJcIj09PWEmJm51bGwhPWImJihhPWIuX3dyYXBwZXJTdGF0ZXx8ZS5fd3JhcHBlclN0YXRlKSYmYS5jb250cm9sbGVkJiZcIm51bWJlclwiPT09ZS50eXBlJiYkYyhlLFwibnVtYmVyXCIsZS52YWx1ZSl9fSxxZD1OLmV4dGVuZCh7dmlldzpudWxsLFxuZGV0YWlsOm51bGx9KSxyZD17QWx0OlwiYWx0S2V5XCIsQ29udHJvbDpcImN0cmxLZXlcIixNZXRhOlwibWV0YUtleVwiLFNoaWZ0Olwic2hpZnRLZXlcIn07ZnVuY3Rpb24gc2QoYSl7dmFyIGI9dGhpcy5uYXRpdmVFdmVudDtyZXR1cm4gYi5nZXRNb2RpZmllclN0YXRlP2IuZ2V0TW9kaWZpZXJTdGF0ZShhKTooYT1yZFthXSk/ISFiW2FdOiExfWZ1bmN0aW9uIHRkKCl7cmV0dXJuIHNkfVxudmFyIHVkPXFkLmV4dGVuZCh7c2NyZWVuWDpudWxsLHNjcmVlblk6bnVsbCxjbGllbnRYOm51bGwsY2xpZW50WTpudWxsLHBhZ2VYOm51bGwscGFnZVk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTp0ZCxidXR0b246bnVsbCxidXR0b25zOm51bGwscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gYS5yZWxhdGVkVGFyZ2V0fHwoYS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50KX19KSx2ZD17bW91c2VFbnRlcjp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uTW91c2VFbnRlclwiLGRlcGVuZGVuY2llczpbXCJ0b3BNb3VzZU91dFwiLFwidG9wTW91c2VPdmVyXCJdfSxtb3VzZUxlYXZlOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUxlYXZlXCIsZGVwZW5kZW5jaWVzOltcInRvcE1vdXNlT3V0XCIsXCJ0b3BNb3VzZU92ZXJcIl19fSx3ZD17ZXZlbnRUeXBlczp2ZCxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsXG5iLGMsZCl7aWYoXCJ0b3BNb3VzZU92ZXJcIj09PWEmJihjLnJlbGF0ZWRUYXJnZXR8fGMuZnJvbUVsZW1lbnQpfHxcInRvcE1vdXNlT3V0XCIhPT1hJiZcInRvcE1vdXNlT3ZlclwiIT09YSlyZXR1cm4gbnVsbDt2YXIgZT1kLndpbmRvdz09PWQ/ZDooZT1kLm93bmVyRG9jdW1lbnQpP2UuZGVmYXVsdFZpZXd8fGUucGFyZW50V2luZG93OndpbmRvdztcInRvcE1vdXNlT3V0XCI9PT1hPyhhPWIsYj0oYj1jLnJlbGF0ZWRUYXJnZXR8fGMudG9FbGVtZW50KT9VYShiKTpudWxsKTphPW51bGw7aWYoYT09PWIpcmV0dXJuIG51bGw7dmFyIGY9bnVsbD09YT9lOlZhKGEpO2U9bnVsbD09Yj9lOlZhKGIpO3ZhciBoPXVkLmdldFBvb2xlZCh2ZC5tb3VzZUxlYXZlLGEsYyxkKTtoLnR5cGU9XCJtb3VzZWxlYXZlXCI7aC50YXJnZXQ9ZjtoLnJlbGF0ZWRUYXJnZXQ9ZTtjPXVkLmdldFBvb2xlZCh2ZC5tb3VzZUVudGVyLGIsYyxkKTtjLnR5cGU9XCJtb3VzZWVudGVyXCI7Yy50YXJnZXQ9ZTtjLnJlbGF0ZWRUYXJnZXQ9XG5mO2piKGgsYyxhLGIpO3JldHVybltoLGNdfX07ZnVuY3Rpb24geGQoYSl7dmFyIGI9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2JbXCJyZXR1cm5cIl07KWI9YltcInJldHVyblwiXTtlbHNle2lmKDAhPT0oYi5lZmZlY3RUYWcmMikpcmV0dXJuIDE7Zm9yKDtiW1wicmV0dXJuXCJdOylpZihiPWJbXCJyZXR1cm5cIl0sMCE9PShiLmVmZmVjdFRhZyYyKSlyZXR1cm4gMX1yZXR1cm4gMz09PWIudGFnPzI6M31mdW5jdGlvbiB5ZChhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFsRmliZXIpPzI9PT14ZChhKTohMX1mdW5jdGlvbiB6ZChhKXsyIT09eGQoYSk/RChcIjE4OFwiKTp2b2lkIDB9XG5mdW5jdGlvbiBBZChhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYilyZXR1cm4gYj14ZChhKSwzPT09Yj9EKFwiMTg4XCIpOnZvaWQgMCwxPT09Yj9udWxsOmE7Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWNbXCJyZXR1cm5cIl0sZj1lP2UuYWx0ZXJuYXRlOm51bGw7aWYoIWV8fCFmKWJyZWFrO2lmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IodmFyIGg9ZS5jaGlsZDtoOyl7aWYoaD09PWMpcmV0dXJuIHpkKGUpLGE7aWYoaD09PWQpcmV0dXJuIHpkKGUpLGI7aD1oLnNpYmxpbmd9RChcIjE4OFwiKX1pZihjW1wicmV0dXJuXCJdIT09ZFtcInJldHVyblwiXSljPWUsZD1mO2Vsc2V7aD0hMTtmb3IodmFyIGc9ZS5jaGlsZDtnOyl7aWYoZz09PWMpe2g9ITA7Yz1lO2Q9ZjticmVha31pZihnPT09ZCl7aD0hMDtkPWU7Yz1mO2JyZWFrfWc9Zy5zaWJsaW5nfWlmKCFoKXtmb3IoZz1mLmNoaWxkO2c7KXtpZihnPT09Yyl7aD0hMDtjPWY7ZD1lO2JyZWFrfWlmKGc9PT1kKXtoPSEwO2Q9ZjtjPWU7YnJlYWt9Zz1nLnNpYmxpbmd9aD9cbnZvaWQgMDpEKFwiMTg5XCIpfX1jLmFsdGVybmF0ZSE9PWQ/RChcIjE5MFwiKTp2b2lkIDB9MyE9PWMudGFnP0QoXCIxODhcIik6dm9pZCAwO3JldHVybiBjLnN0YXRlTm9kZS5jdXJyZW50PT09Yz9hOmJ9ZnVuY3Rpb24gQmQoYSl7YT1BZChhKTtpZighYSlyZXR1cm4gbnVsbDtmb3IodmFyIGI9YTs7KXtpZig1PT09Yi50YWd8fDY9PT1iLnRhZylyZXR1cm4gYjtpZihiLmNoaWxkKWIuY2hpbGRbXCJyZXR1cm5cIl09YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYltcInJldHVyblwiXXx8YltcInJldHVyblwiXT09PWEpcmV0dXJuIG51bGw7Yj1iW1wicmV0dXJuXCJdfWIuc2libGluZ1tcInJldHVyblwiXT1iW1wicmV0dXJuXCJdO2I9Yi5zaWJsaW5nfX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIENkKGEpe2E9QWQoYSk7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKHZhciBiPWE7Oyl7aWYoNT09PWIudGFnfHw2PT09Yi50YWcpcmV0dXJuIGI7aWYoYi5jaGlsZCYmNCE9PWIudGFnKWIuY2hpbGRbXCJyZXR1cm5cIl09YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYltcInJldHVyblwiXXx8YltcInJldHVyblwiXT09PWEpcmV0dXJuIG51bGw7Yj1iW1wicmV0dXJuXCJdfWIuc2libGluZ1tcInJldHVyblwiXT1iW1wicmV0dXJuXCJdO2I9Yi5zaWJsaW5nfX1yZXR1cm4gbnVsbH12YXIgRGQ9Ti5leHRlbmQoe2FuaW1hdGlvbk5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLEVkPU4uZXh0ZW5kKHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSksRmQ9cWQuZXh0ZW5kKHtyZWxhdGVkVGFyZ2V0Om51bGx9KTtcbmZ1bmN0aW9uIEdkKGEpe3ZhciBiPWEua2V5Q29kZTtcImNoYXJDb2RlXCJpbiBhPyhhPWEuY2hhckNvZGUsMD09PWEmJjEzPT09YiYmKGE9MTMpKTphPWI7MTA9PT1hJiYoYT0xMyk7cmV0dXJuIDMyPD1hfHwxMz09PWE/YTowfVxudmFyIEhkPXtFc2M6XCJFc2NhcGVcIixTcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxJZD17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIixcbjExNjpcIkY1XCIsMTE3OlwiRjZcIiwxMTg6XCJGN1wiLDExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0sSmQ9cWQuZXh0ZW5kKHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPUhkW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPUdkKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9JZFthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGxvY2F0aW9uOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLHJlcGVhdDpudWxsLGxvY2FsZTpudWxsLGdldE1vZGlmaWVyU3RhdGU6dGQsY2hhckNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09XG5hLnR5cGU/R2QoYSk6MH0sa2V5Q29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfSx3aGljaDpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/R2QoYSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH19KSxLZD11ZC5leHRlbmQoe2RhdGFUcmFuc2ZlcjpudWxsfSksTGQ9cWQuZXh0ZW5kKHt0b3VjaGVzOm51bGwsdGFyZ2V0VG91Y2hlczpudWxsLGNoYW5nZWRUb3VjaGVzOm51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6dGR9KSxNZD1OLmV4dGVuZCh7cHJvcGVydHlOYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSxOZD11ZC5leHRlbmQoe2RlbHRhWDpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWFwiaW4gYT9hLmRlbHRhWDpcIndoZWVsRGVsdGFYXCJpblxuYT8tYS53aGVlbERlbHRhWDowfSxkZWx0YVk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVlcImluIGE/YS5kZWx0YVk6XCJ3aGVlbERlbHRhWVwiaW4gYT8tYS53aGVlbERlbHRhWTpcIndoZWVsRGVsdGFcImluIGE/LWEud2hlZWxEZWx0YTowfSxkZWx0YVo6bnVsbCxkZWx0YU1vZGU6bnVsbH0pLE9kPXt9LFBkPXt9O2Z1bmN0aW9uIFFkKGEsYil7dmFyIGM9YVswXS50b1VwcGVyQ2FzZSgpK2Euc2xpY2UoMSksZD1cIm9uXCIrYztjPVwidG9wXCIrYztiPXtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpkLGNhcHR1cmVkOmQrXCJDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbY10saXNJbnRlcmFjdGl2ZTpifTtPZFthXT1iO1BkW2NdPWJ9XG5cImJsdXIgY2FuY2VsIGNsaWNrIGNsb3NlIGNvbnRleHRNZW51IGNvcHkgY3V0IGRvdWJsZUNsaWNrIGRyYWdFbmQgZHJhZ1N0YXJ0IGRyb3AgZm9jdXMgaW5wdXQgaW52YWxpZCBrZXlEb3duIGtleVByZXNzIGtleVVwIG1vdXNlRG93biBtb3VzZVVwIHBhc3RlIHBhdXNlIHBsYXkgcmF0ZUNoYW5nZSByZXNldCBzZWVrZWQgc3VibWl0IHRvdWNoQ2FuY2VsIHRvdWNoRW5kIHRvdWNoU3RhcnQgdm9sdW1lQ2hhbmdlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7UWQoYSwhMCl9KTtcblwiYWJvcnQgYW5pbWF0aW9uRW5kIGFuaW1hdGlvbkl0ZXJhdGlvbiBhbmltYXRpb25TdGFydCBjYW5QbGF5IGNhblBsYXlUaHJvdWdoIGRyYWcgZHJhZ0VudGVyIGRyYWdFeGl0IGRyYWdMZWF2ZSBkcmFnT3ZlciBkdXJhdGlvbkNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBsb2FkIGxvYWRlZERhdGEgbG9hZGVkTWV0YWRhdGEgbG9hZFN0YXJ0IG1vdXNlTW92ZSBtb3VzZU91dCBtb3VzZU92ZXIgcGxheWluZyBwcm9ncmVzcyBzY3JvbGwgc2Vla2luZyBzdGFsbGVkIHN1c3BlbmQgdGltZVVwZGF0ZSB0b2dnbGUgdG91Y2hNb3ZlIHRyYW5zaXRpb25FbmQgd2FpdGluZyB3aGVlbFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1FkKGEsITEpfSk7XG52YXIgUmQ9e2V2ZW50VHlwZXM6T2QsaXNJbnRlcmFjdGl2ZVRvcExldmVsRXZlbnRUeXBlOmZ1bmN0aW9uKGEpe2E9UGRbYV07cmV0dXJuIHZvaWQgMCE9PWEmJiEwPT09YS5pc0ludGVyYWN0aXZlfSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPVBkW2FdO2lmKCFlKXJldHVybiBudWxsO3N3aXRjaChhKXtjYXNlIFwidG9wS2V5UHJlc3NcIjppZigwPT09R2QoYykpcmV0dXJuIG51bGw7Y2FzZSBcInRvcEtleURvd25cIjpjYXNlIFwidG9wS2V5VXBcIjphPUpkO2JyZWFrO2Nhc2UgXCJ0b3BCbHVyXCI6Y2FzZSBcInRvcEZvY3VzXCI6YT1GZDticmVhaztjYXNlIFwidG9wQ2xpY2tcIjppZigyPT09Yy5idXR0b24pcmV0dXJuIG51bGw7Y2FzZSBcInRvcERvdWJsZUNsaWNrXCI6Y2FzZSBcInRvcE1vdXNlRG93blwiOmNhc2UgXCJ0b3BNb3VzZU1vdmVcIjpjYXNlIFwidG9wTW91c2VVcFwiOmNhc2UgXCJ0b3BNb3VzZU91dFwiOmNhc2UgXCJ0b3BNb3VzZU92ZXJcIjpjYXNlIFwidG9wQ29udGV4dE1lbnVcIjphPVxudWQ7YnJlYWs7Y2FzZSBcInRvcERyYWdcIjpjYXNlIFwidG9wRHJhZ0VuZFwiOmNhc2UgXCJ0b3BEcmFnRW50ZXJcIjpjYXNlIFwidG9wRHJhZ0V4aXRcIjpjYXNlIFwidG9wRHJhZ0xlYXZlXCI6Y2FzZSBcInRvcERyYWdPdmVyXCI6Y2FzZSBcInRvcERyYWdTdGFydFwiOmNhc2UgXCJ0b3BEcm9wXCI6YT1LZDticmVhaztjYXNlIFwidG9wVG91Y2hDYW5jZWxcIjpjYXNlIFwidG9wVG91Y2hFbmRcIjpjYXNlIFwidG9wVG91Y2hNb3ZlXCI6Y2FzZSBcInRvcFRvdWNoU3RhcnRcIjphPUxkO2JyZWFrO2Nhc2UgXCJ0b3BBbmltYXRpb25FbmRcIjpjYXNlIFwidG9wQW5pbWF0aW9uSXRlcmF0aW9uXCI6Y2FzZSBcInRvcEFuaW1hdGlvblN0YXJ0XCI6YT1EZDticmVhaztjYXNlIFwidG9wVHJhbnNpdGlvbkVuZFwiOmE9TWQ7YnJlYWs7Y2FzZSBcInRvcFNjcm9sbFwiOmE9cWQ7YnJlYWs7Y2FzZSBcInRvcFdoZWVsXCI6YT1OZDticmVhaztjYXNlIFwidG9wQ29weVwiOmNhc2UgXCJ0b3BDdXRcIjpjYXNlIFwidG9wUGFzdGVcIjphPUVkO2JyZWFrO2RlZmF1bHQ6YT1cbk59Yj1hLmdldFBvb2xlZChlLGIsYyxkKTtpYihiKTtyZXR1cm4gYn19LFNkPVJkLmlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZSxUZD1bXTtmdW5jdGlvbiBVZChhKXt2YXIgYj1hLnRhcmdldEluc3Q7ZG97aWYoIWIpe2EuYW5jZXN0b3JzLnB1c2goYik7YnJlYWt9dmFyIGM7Zm9yKGM9YjtjW1wicmV0dXJuXCJdOyljPWNbXCJyZXR1cm5cIl07Yz0zIT09Yy50YWc/bnVsbDpjLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2lmKCFjKWJyZWFrO2EuYW5jZXN0b3JzLnB1c2goYik7Yj1VYShjKX13aGlsZShiKTtmb3IoYz0wO2M8YS5hbmNlc3RvcnMubGVuZ3RoO2MrKyliPWEuYW5jZXN0b3JzW2NdLFFhKGEudG9wTGV2ZWxUeXBlLGIsYS5uYXRpdmVFdmVudCxoYyhhLm5hdGl2ZUV2ZW50KSl9dmFyIFZkPSEwO2Z1bmN0aW9uIFdkKGEpe1ZkPSEhYX1cbmZ1bmN0aW9uIFcoYSxiLGMpe2lmKCFjKXJldHVybiBudWxsO2E9KFNkKGEpP1hkOllkKS5iaW5kKG51bGwsYSk7Yy5hZGRFdmVudExpc3RlbmVyKGIsYSwhMSl9ZnVuY3Rpb24gWmQoYSxiLGMpe2lmKCFjKXJldHVybiBudWxsO2E9KFNkKGEpP1hkOllkKS5iaW5kKG51bGwsYSk7Yy5hZGRFdmVudExpc3RlbmVyKGIsYSwhMCl9ZnVuY3Rpb24gWGQoYSxiKXtiYyhZZCxhLGIpfVxuZnVuY3Rpb24gWWQoYSxiKXtpZihWZCl7dmFyIGM9aGMoYik7Yz1VYShjKTtudWxsIT09YyYmXCJudW1iZXJcIj09PXR5cGVvZiBjLnRhZyYmMiE9PXhkKGMpJiYoYz1udWxsKTtpZihUZC5sZW5ndGgpe3ZhciBkPVRkLnBvcCgpO2QudG9wTGV2ZWxUeXBlPWE7ZC5uYXRpdmVFdmVudD1iO2QudGFyZ2V0SW5zdD1jO2E9ZH1lbHNlIGE9e3RvcExldmVsVHlwZTphLG5hdGl2ZUV2ZW50OmIsdGFyZ2V0SW5zdDpjLGFuY2VzdG9yczpbXX07dHJ5e2VjKFVkLGEpfWZpbmFsbHl7YS50b3BMZXZlbFR5cGU9bnVsbCxhLm5hdGl2ZUV2ZW50PW51bGwsYS50YXJnZXRJbnN0PW51bGwsYS5hbmNlc3RvcnMubGVuZ3RoPTAsMTA+VGQubGVuZ3RoJiZUZC5wdXNoKGEpfX19XG52YXIgJGQ9T2JqZWN0LmZyZWV6ZSh7Z2V0IF9lbmFibGVkKCl7cmV0dXJuIFZkfSxzZXRFbmFibGVkOldkLGlzRW5hYmxlZDpmdW5jdGlvbigpe3JldHVybiBWZH0sdHJhcEJ1YmJsZWRFdmVudDpXLHRyYXBDYXB0dXJlZEV2ZW50OlpkLGRpc3BhdGNoRXZlbnQ6WWR9KTtmdW5jdGlvbiBhZShhLGIpe3ZhciBjPXt9O2NbYS50b0xvd2VyQ2FzZSgpXT1iLnRvTG93ZXJDYXNlKCk7Y1tcIldlYmtpdFwiK2FdPVwid2Via2l0XCIrYjtjW1wiTW96XCIrYV09XCJtb3pcIitiO2NbXCJtc1wiK2FdPVwiTVNcIitiO2NbXCJPXCIrYV09XCJvXCIrYi50b0xvd2VyQ2FzZSgpO3JldHVybiBjfVxudmFyIGJlPXthbmltYXRpb25lbmQ6YWUoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkVuZFwiKSxhbmltYXRpb25pdGVyYXRpb246YWUoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkl0ZXJhdGlvblwiKSxhbmltYXRpb25zdGFydDphZShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uU3RhcnRcIiksdHJhbnNpdGlvbmVuZDphZShcIlRyYW5zaXRpb25cIixcIlRyYW5zaXRpb25FbmRcIil9LGNlPXt9LGRlPXt9O20uY2FuVXNlRE9NJiYoZGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZSxcIkFuaW1hdGlvbkV2ZW50XCJpbiB3aW5kb3d8fChkZWxldGUgYmUuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbixkZWxldGUgYmUuYW5pbWF0aW9uaXRlcmF0aW9uLmFuaW1hdGlvbixkZWxldGUgYmUuYW5pbWF0aW9uc3RhcnQuYW5pbWF0aW9uKSxcIlRyYW5zaXRpb25FdmVudFwiaW4gd2luZG93fHxkZWxldGUgYmUudHJhbnNpdGlvbmVuZC50cmFuc2l0aW9uKTtcbmZ1bmN0aW9uIGVlKGEpe2lmKGNlW2FdKXJldHVybiBjZVthXTtpZighYmVbYV0pcmV0dXJuIGE7dmFyIGI9YmVbYV0sYztmb3IoYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykmJmMgaW4gZGUpcmV0dXJuIGNlW2FdPWJbY107cmV0dXJuIGF9XG52YXIgZmU9e3RvcEFuaW1hdGlvbkVuZDplZShcImFuaW1hdGlvbmVuZFwiKSx0b3BBbmltYXRpb25JdGVyYXRpb246ZWUoXCJhbmltYXRpb25pdGVyYXRpb25cIiksdG9wQW5pbWF0aW9uU3RhcnQ6ZWUoXCJhbmltYXRpb25zdGFydFwiKSx0b3BCbHVyOlwiYmx1clwiLHRvcENhbmNlbDpcImNhbmNlbFwiLHRvcENoYW5nZTpcImNoYW5nZVwiLHRvcENsaWNrOlwiY2xpY2tcIix0b3BDbG9zZTpcImNsb3NlXCIsdG9wQ29tcG9zaXRpb25FbmQ6XCJjb21wb3NpdGlvbmVuZFwiLHRvcENvbXBvc2l0aW9uU3RhcnQ6XCJjb21wb3NpdGlvbnN0YXJ0XCIsdG9wQ29tcG9zaXRpb25VcGRhdGU6XCJjb21wb3NpdGlvbnVwZGF0ZVwiLHRvcENvbnRleHRNZW51OlwiY29udGV4dG1lbnVcIix0b3BDb3B5OlwiY29weVwiLHRvcEN1dDpcImN1dFwiLHRvcERvdWJsZUNsaWNrOlwiZGJsY2xpY2tcIix0b3BEcmFnOlwiZHJhZ1wiLHRvcERyYWdFbmQ6XCJkcmFnZW5kXCIsdG9wRHJhZ0VudGVyOlwiZHJhZ2VudGVyXCIsdG9wRHJhZ0V4aXQ6XCJkcmFnZXhpdFwiLHRvcERyYWdMZWF2ZTpcImRyYWdsZWF2ZVwiLFxudG9wRHJhZ092ZXI6XCJkcmFnb3ZlclwiLHRvcERyYWdTdGFydDpcImRyYWdzdGFydFwiLHRvcERyb3A6XCJkcm9wXCIsdG9wRm9jdXM6XCJmb2N1c1wiLHRvcElucHV0OlwiaW5wdXRcIix0b3BLZXlEb3duOlwia2V5ZG93blwiLHRvcEtleVByZXNzOlwia2V5cHJlc3NcIix0b3BLZXlVcDpcImtleXVwXCIsdG9wTG9hZDpcImxvYWRcIix0b3BMb2FkU3RhcnQ6XCJsb2Fkc3RhcnRcIix0b3BNb3VzZURvd246XCJtb3VzZWRvd25cIix0b3BNb3VzZU1vdmU6XCJtb3VzZW1vdmVcIix0b3BNb3VzZU91dDpcIm1vdXNlb3V0XCIsdG9wTW91c2VPdmVyOlwibW91c2VvdmVyXCIsdG9wTW91c2VVcDpcIm1vdXNldXBcIix0b3BQYXN0ZTpcInBhc3RlXCIsdG9wU2Nyb2xsOlwic2Nyb2xsXCIsdG9wU2VsZWN0aW9uQ2hhbmdlOlwic2VsZWN0aW9uY2hhbmdlXCIsdG9wVGV4dElucHV0OlwidGV4dElucHV0XCIsdG9wVG9nZ2xlOlwidG9nZ2xlXCIsdG9wVG91Y2hDYW5jZWw6XCJ0b3VjaGNhbmNlbFwiLHRvcFRvdWNoRW5kOlwidG91Y2hlbmRcIix0b3BUb3VjaE1vdmU6XCJ0b3VjaG1vdmVcIixcbnRvcFRvdWNoU3RhcnQ6XCJ0b3VjaHN0YXJ0XCIsdG9wVHJhbnNpdGlvbkVuZDplZShcInRyYW5zaXRpb25lbmRcIiksdG9wV2hlZWw6XCJ3aGVlbFwifSxnZT17dG9wQWJvcnQ6XCJhYm9ydFwiLHRvcENhblBsYXk6XCJjYW5wbGF5XCIsdG9wQ2FuUGxheVRocm91Z2g6XCJjYW5wbGF5dGhyb3VnaFwiLHRvcER1cmF0aW9uQ2hhbmdlOlwiZHVyYXRpb25jaGFuZ2VcIix0b3BFbXB0aWVkOlwiZW1wdGllZFwiLHRvcEVuY3J5cHRlZDpcImVuY3J5cHRlZFwiLHRvcEVuZGVkOlwiZW5kZWRcIix0b3BFcnJvcjpcImVycm9yXCIsdG9wTG9hZGVkRGF0YTpcImxvYWRlZGRhdGFcIix0b3BMb2FkZWRNZXRhZGF0YTpcImxvYWRlZG1ldGFkYXRhXCIsdG9wTG9hZFN0YXJ0OlwibG9hZHN0YXJ0XCIsdG9wUGF1c2U6XCJwYXVzZVwiLHRvcFBsYXk6XCJwbGF5XCIsdG9wUGxheWluZzpcInBsYXlpbmdcIix0b3BQcm9ncmVzczpcInByb2dyZXNzXCIsdG9wUmF0ZUNoYW5nZTpcInJhdGVjaGFuZ2VcIix0b3BTZWVrZWQ6XCJzZWVrZWRcIix0b3BTZWVraW5nOlwic2Vla2luZ1wiLFxudG9wU3RhbGxlZDpcInN0YWxsZWRcIix0b3BTdXNwZW5kOlwic3VzcGVuZFwiLHRvcFRpbWVVcGRhdGU6XCJ0aW1ldXBkYXRlXCIsdG9wVm9sdW1lQ2hhbmdlOlwidm9sdW1lY2hhbmdlXCIsdG9wV2FpdGluZzpcIndhaXRpbmdcIn0saGU9e30saWU9MCxqZT1cIl9yZWFjdExpc3RlbmVyc0lEXCIrKFwiXCIrTWF0aC5yYW5kb20oKSkuc2xpY2UoMik7ZnVuY3Rpb24ga2UoYSl7T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGEsamUpfHwoYVtqZV09aWUrKyxoZVthW2plXV09e30pO3JldHVybiBoZVthW2plXV19ZnVuY3Rpb24gbGUoYSl7Zm9yKDthJiZhLmZpcnN0Q2hpbGQ7KWE9YS5maXJzdENoaWxkO3JldHVybiBhfVxuZnVuY3Rpb24gbWUoYSxiKXt2YXIgYz1sZShhKTthPTA7Zm9yKHZhciBkO2M7KXtpZigzPT09Yy5ub2RlVHlwZSl7ZD1hK2MudGV4dENvbnRlbnQubGVuZ3RoO2lmKGE8PWImJmQ+PWIpcmV0dXJue25vZGU6YyxvZmZzZXQ6Yi1hfTthPWR9YTp7Zm9yKDtjOyl7aWYoYy5uZXh0U2libGluZyl7Yz1jLm5leHRTaWJsaW5nO2JyZWFrIGF9Yz1jLnBhcmVudE5vZGV9Yz12b2lkIDB9Yz1sZShjKX19ZnVuY3Rpb24gbmUoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmXCJ0ZXh0XCI9PT1hLnR5cGV8fFwidGV4dGFyZWFcIj09PWJ8fFwidHJ1ZVwiPT09YS5jb250ZW50RWRpdGFibGUpfVxudmFyIG9lPW0uY2FuVXNlRE9NJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJjExPj1kb2N1bWVudC5kb2N1bWVudE1vZGUscGU9e3NlbGVjdDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvblNlbGVjdFwiLGNhcHR1cmVkOlwib25TZWxlY3RDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcInRvcEJsdXIgdG9wQ29udGV4dE1lbnUgdG9wRm9jdXMgdG9wS2V5RG93biB0b3BLZXlVcCB0b3BNb3VzZURvd24gdG9wTW91c2VVcCB0b3BTZWxlY3Rpb25DaGFuZ2VcIi5zcGxpdChcIiBcIil9fSxxZT1udWxsLHJlPW51bGwsc2U9bnVsbCx0ZT0hMTtcbmZ1bmN0aW9uIHVlKGEsYil7aWYodGV8fG51bGw9PXFlfHxxZSE9PWZhKCkpcmV0dXJuIG51bGw7dmFyIGM9cWU7XCJzZWxlY3Rpb25TdGFydFwiaW4gYyYmbmUoYyk/Yz17c3RhcnQ6Yy5zZWxlY3Rpb25TdGFydCxlbmQ6Yy5zZWxlY3Rpb25FbmR9OndpbmRvdy5nZXRTZWxlY3Rpb24/KGM9d2luZG93LmdldFNlbGVjdGlvbigpLGM9e2FuY2hvck5vZGU6Yy5hbmNob3JOb2RlLGFuY2hvck9mZnNldDpjLmFuY2hvck9mZnNldCxmb2N1c05vZGU6Yy5mb2N1c05vZGUsZm9jdXNPZmZzZXQ6Yy5mb2N1c09mZnNldH0pOmM9dm9pZCAwO3JldHVybiBzZSYmaGEoc2UsYyk/bnVsbDooc2U9YyxhPU4uZ2V0UG9vbGVkKHBlLnNlbGVjdCxyZSxhLGIpLGEudHlwZT1cInNlbGVjdFwiLGEudGFyZ2V0PXFlLGliKGEpLGEpfVxudmFyIHZlPXtldmVudFR5cGVzOnBlLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9ZC53aW5kb3c9PT1kP2QuZG9jdW1lbnQ6OT09PWQubm9kZVR5cGU/ZDpkLm93bmVyRG9jdW1lbnQsZjtpZighKGY9IWUpKXthOntlPWtlKGUpO2Y9dmEub25TZWxlY3Q7Zm9yKHZhciBoPTA7aDxmLmxlbmd0aDtoKyspe3ZhciBnPWZbaF07aWYoIWUuaGFzT3duUHJvcGVydHkoZyl8fCFlW2ddKXtlPSExO2JyZWFrIGF9fWU9ITB9Zj0hZX1pZihmKXJldHVybiBudWxsO2U9Yj9WYShiKTp3aW5kb3c7c3dpdGNoKGEpe2Nhc2UgXCJ0b3BGb2N1c1wiOmlmKGdjKGUpfHxcInRydWVcIj09PWUuY29udGVudEVkaXRhYmxlKXFlPWUscmU9YixzZT1udWxsO2JyZWFrO2Nhc2UgXCJ0b3BCbHVyXCI6c2U9cmU9cWU9bnVsbDticmVhaztjYXNlIFwidG9wTW91c2VEb3duXCI6dGU9ITA7YnJlYWs7Y2FzZSBcInRvcENvbnRleHRNZW51XCI6Y2FzZSBcInRvcE1vdXNlVXBcIjpyZXR1cm4gdGU9ITEsdWUoYyxkKTtjYXNlIFwidG9wU2VsZWN0aW9uQ2hhbmdlXCI6aWYob2UpYnJlYWs7XG5jYXNlIFwidG9wS2V5RG93blwiOmNhc2UgXCJ0b3BLZXlVcFwiOnJldHVybiB1ZShjLGQpfXJldHVybiBudWxsfX07TmEuaW5qZWN0RXZlbnRQbHVnaW5PcmRlcihcIlJlc3BvbmRlckV2ZW50UGx1Z2luIFNpbXBsZUV2ZW50UGx1Z2luIFRhcEV2ZW50UGx1Z2luIEVudGVyTGVhdmVFdmVudFBsdWdpbiBDaGFuZ2VFdmVudFBsdWdpbiBTZWxlY3RFdmVudFBsdWdpbiBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luXCIuc3BsaXQoXCIgXCIpKTtEYT1iYi5nZXRGaWJlckN1cnJlbnRQcm9wc0Zyb21Ob2RlO0VhPWJiLmdldEluc3RhbmNlRnJvbU5vZGU7RmE9YmIuZ2V0Tm9kZUZyb21JbnN0YW5jZTtOYS5pbmplY3RFdmVudFBsdWdpbnNCeU5hbWUoe1NpbXBsZUV2ZW50UGx1Z2luOlJkLEVudGVyTGVhdmVFdmVudFBsdWdpbjp3ZCxDaGFuZ2VFdmVudFBsdWdpbjpwZCxTZWxlY3RFdmVudFBsdWdpbjp2ZSxCZWZvcmVJbnB1dEV2ZW50UGx1Z2luOlJifSk7XG5mdW5jdGlvbiB4ZShhLGIsYyxkKXt0aGlzLnRhZz1hO3RoaXMua2V5PWM7dGhpcy5zdGF0ZU5vZGU9dGhpcy50eXBlPW51bGw7dGhpcy5zaWJsaW5nPXRoaXMuY2hpbGQ9dGhpc1tcInJldHVyblwiXT1udWxsO3RoaXMuaW5kZXg9MDt0aGlzLnJlZj1udWxsO3RoaXMucGVuZGluZ1Byb3BzPWI7dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPW51bGw7dGhpcy5tb2RlPWQ7dGhpcy5lZmZlY3RUYWc9MDt0aGlzLmxhc3RFZmZlY3Q9dGhpcy5maXJzdEVmZmVjdD10aGlzLm5leHRFZmZlY3Q9bnVsbDt0aGlzLmV4cGlyYXRpb25UaW1lPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1cbmZ1bmN0aW9uIHplKGEsYixjKXt2YXIgZD1hLmFsdGVybmF0ZTtudWxsPT09ZD8oZD1uZXcgeGUoYS50YWcsYixhLmtleSxhLm1vZGUpLGQudHlwZT1hLnR5cGUsZC5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsZC5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1kKTooZC5wZW5kaW5nUHJvcHM9YixkLmVmZmVjdFRhZz0wLGQubmV4dEVmZmVjdD1udWxsLGQuZmlyc3RFZmZlY3Q9bnVsbCxkLmxhc3RFZmZlY3Q9bnVsbCk7ZC5leHBpcmF0aW9uVGltZT1jO2QuY2hpbGQ9YS5jaGlsZDtkLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2QubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZC51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2Quc2libGluZz1hLnNpYmxpbmc7ZC5pbmRleD1hLmluZGV4O2QucmVmPWEucmVmO3JldHVybiBkfVxuZnVuY3Rpb24gQWUoYSxiLGMpe3ZhciBkPWEudHlwZSxlPWEua2V5O2E9YS5wcm9wczt2YXIgZj12b2lkIDA7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpZj1kLnByb3RvdHlwZSYmZC5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD8yOjA7ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIGQpZj01O2Vsc2Ugc3dpdGNoKGQpe2Nhc2Ugc2M6cmV0dXJuIEJlKGEuY2hpbGRyZW4sYixjLGUpO2Nhc2Ugd2M6Zj0xMTtifD0zO2JyZWFrO2Nhc2UgdGM6Zj0xMTtifD0yO2JyZWFrO2Nhc2UgcGM6Zj03O2JyZWFrO2Nhc2UgcWM6Zj05O2JyZWFrO2RlZmF1bHQ6aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZClzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSB1YzpmPTEzO2JyZWFrO2Nhc2UgdmM6Zj0xMjticmVhaztjYXNlIHhjOmY9MTQ7YnJlYWs7ZGVmYXVsdDppZihcIm51bWJlclwiPT09dHlwZW9mIGQudGFnKXJldHVybiBiPWQsYi5wZW5kaW5nUHJvcHM9YSxiLmV4cGlyYXRpb25UaW1lPWMsXG5iO0QoXCIxMzBcIixudWxsPT1kP2Q6dHlwZW9mIGQsXCJcIil9ZWxzZSBEKFwiMTMwXCIsbnVsbD09ZD9kOnR5cGVvZiBkLFwiXCIpfWI9bmV3IHhlKGYsYSxlLGIpO2IudHlwZT1kO2IuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYn1mdW5jdGlvbiBCZShhLGIsYyxkKXthPW5ldyB4ZSgxMCxhLGQsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfWZ1bmN0aW9uIENlKGEsYixjKXthPW5ldyB4ZSg2LGEsbnVsbCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9ZnVuY3Rpb24gRGUoYSxiLGMpe2I9bmV3IHhlKDQsbnVsbCE9PWEuY2hpbGRyZW4/YS5jaGlsZHJlbjpbXSxhLmtleSxiKTtiLmV4cGlyYXRpb25UaW1lPWM7Yi5zdGF0ZU5vZGU9e2NvbnRhaW5lckluZm86YS5jb250YWluZXJJbmZvLHBlbmRpbmdDaGlsZHJlbjpudWxsLGltcGxlbWVudGF0aW9uOmEuaW1wbGVtZW50YXRpb259O3JldHVybiBifXZhciBFZT1udWxsLEZlPW51bGw7XG5mdW5jdGlvbiBHZShhKXtyZXR1cm4gZnVuY3Rpb24oYil7dHJ5e3JldHVybiBhKGIpfWNhdGNoKGMpe319fWZ1bmN0aW9uIEhlKGEpe2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXJldHVybiExO3ZhciBiPV9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztpZihiLmlzRGlzYWJsZWR8fCFiLnN1cHBvcnRzRmliZXIpcmV0dXJuITA7dHJ5e3ZhciBjPWIuaW5qZWN0KGEpO0VlPUdlKGZ1bmN0aW9uKGEpe3JldHVybiBiLm9uQ29tbWl0RmliZXJSb290KGMsYSl9KTtGZT1HZShmdW5jdGlvbihhKXtyZXR1cm4gYi5vbkNvbW1pdEZpYmVyVW5tb3VudChjLGEpfSl9Y2F0Y2goZCl7fXJldHVybiEwfWZ1bmN0aW9uIEllKGEpe1wiZnVuY3Rpb25cIj09PXR5cGVvZiBFZSYmRWUoYSl9ZnVuY3Rpb24gSmUoYSl7XCJmdW5jdGlvblwiPT09dHlwZW9mIEZlJiZGZShhKX1uZXcgU2V0O1xuZnVuY3Rpb24gS2UoYSl7cmV0dXJue2Jhc2VTdGF0ZTphLGV4cGlyYXRpb25UaW1lOjAsZmlyc3Q6bnVsbCxsYXN0Om51bGwsY2FsbGJhY2tMaXN0Om51bGwsaGFzRm9yY2VVcGRhdGU6ITEsaXNJbml0aWFsaXplZDohMSxjYXB0dXJlZFZhbHVlczpudWxsfX1mdW5jdGlvbiBMZShhLGIpe251bGw9PT1hLmxhc3Q/YS5maXJzdD1hLmxhc3Q9YjooYS5sYXN0Lm5leHQ9YixhLmxhc3Q9Yik7aWYoMD09PWEuZXhwaXJhdGlvblRpbWV8fGEuZXhwaXJhdGlvblRpbWU+Yi5leHBpcmF0aW9uVGltZSlhLmV4cGlyYXRpb25UaW1lPWIuZXhwaXJhdGlvblRpbWV9dmFyIE1lPXZvaWQgMCxOZT12b2lkIDA7XG5mdW5jdGlvbiBPZShhKXtNZT1OZT1udWxsO3ZhciBiPWEuYWx0ZXJuYXRlLGM9YS51cGRhdGVRdWV1ZTtudWxsPT09YyYmKGM9YS51cGRhdGVRdWV1ZT1LZShudWxsKSk7bnVsbCE9PWI/KGE9Yi51cGRhdGVRdWV1ZSxudWxsPT09YSYmKGE9Yi51cGRhdGVRdWV1ZT1LZShudWxsKSkpOmE9bnVsbDtNZT1jO05lPWEhPT1jP2E6bnVsbH1mdW5jdGlvbiBQZShhLGIpe09lKGEpO2E9TWU7dmFyIGM9TmU7bnVsbD09PWM/TGUoYSxiKTpudWxsPT09YS5sYXN0fHxudWxsPT09Yy5sYXN0PyhMZShhLGIpLExlKGMsYikpOihMZShhLGIpLGMubGFzdD1iKX1mdW5jdGlvbiBRZShhLGIsYyxkKXthPWEucGFydGlhbFN0YXRlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2EuY2FsbChiLGMsZCk6YX1cbmZ1bmN0aW9uIFJlKGEsYixjLGQsZSxmKXtudWxsIT09YSYmYS51cGRhdGVRdWV1ZT09PWMmJihjPWIudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTpjLmJhc2VTdGF0ZSxleHBpcmF0aW9uVGltZTpjLmV4cGlyYXRpb25UaW1lLGZpcnN0OmMuZmlyc3QsbGFzdDpjLmxhc3QsaXNJbml0aWFsaXplZDpjLmlzSW5pdGlhbGl6ZWQsY2FwdHVyZWRWYWx1ZXM6Yy5jYXB0dXJlZFZhbHVlcyxjYWxsYmFja0xpc3Q6bnVsbCxoYXNGb3JjZVVwZGF0ZTohMX0pO2MuZXhwaXJhdGlvblRpbWU9MDtjLmlzSW5pdGlhbGl6ZWQ/YT1jLmJhc2VTdGF0ZTooYT1jLmJhc2VTdGF0ZT1iLm1lbW9pemVkU3RhdGUsYy5pc0luaXRpYWxpemVkPSEwKTtmb3IodmFyIGg9ITAsZz1jLmZpcnN0LGs9ITE7bnVsbCE9PWc7KXt2YXIgdj1nLmV4cGlyYXRpb25UaW1lO2lmKHY+Zil7dmFyIGw9Yy5leHBpcmF0aW9uVGltZTtpZigwPT09bHx8bD52KWMuZXhwaXJhdGlvblRpbWU9djtrfHwoaz0hMCxjLmJhc2VTdGF0ZT1hKX1lbHNle2t8fFxuKGMuZmlyc3Q9Zy5uZXh0LG51bGw9PT1jLmZpcnN0JiYoYy5sYXN0PW51bGwpKTtpZihnLmlzUmVwbGFjZSlhPVFlKGcsZCxhLGUpLGg9ITA7ZWxzZSBpZih2PVFlKGcsZCxhLGUpKWE9aD9BKHt9LGEsdik6QShhLHYpLGg9ITE7Zy5pc0ZvcmNlZCYmKGMuaGFzRm9yY2VVcGRhdGU9ITApO251bGwhPT1nLmNhbGxiYWNrJiYodj1jLmNhbGxiYWNrTGlzdCxudWxsPT09diYmKHY9Yy5jYWxsYmFja0xpc3Q9W10pLHYucHVzaChnKSk7bnVsbCE9PWcuY2FwdHVyZWRWYWx1ZSYmKHY9Yy5jYXB0dXJlZFZhbHVlcyxudWxsPT09dj9jLmNhcHR1cmVkVmFsdWVzPVtnLmNhcHR1cmVkVmFsdWVdOnYucHVzaChnLmNhcHR1cmVkVmFsdWUpKX1nPWcubmV4dH1udWxsIT09Yy5jYWxsYmFja0xpc3Q/Yi5lZmZlY3RUYWd8PTMyOm51bGwhPT1jLmZpcnN0fHxjLmhhc0ZvcmNlVXBkYXRlfHxudWxsIT09Yy5jYXB0dXJlZFZhbHVlc3x8KGIudXBkYXRlUXVldWU9bnVsbCk7a3x8KGMuYmFzZVN0YXRlPWEpO1xucmV0dXJuIGF9ZnVuY3Rpb24gU2UoYSxiKXt2YXIgYz1hLmNhbGxiYWNrTGlzdDtpZihudWxsIT09Yylmb3IoYS5jYWxsYmFja0xpc3Q9bnVsbCxhPTA7YTxjLmxlbmd0aDthKyspe3ZhciBkPWNbYV0sZT1kLmNhbGxiYWNrO2QuY2FsbGJhY2s9bnVsbDtcImZ1bmN0aW9uXCIhPT10eXBlb2YgZT9EKFwiMTkxXCIsZSk6dm9pZCAwO2UuY2FsbChiKX19XG5mdW5jdGlvbiBUZShhLGIsYyxkLGUpe2Z1bmN0aW9uIGYoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1ifHxudWxsIT09YS51cGRhdGVRdWV1ZSYmYS51cGRhdGVRdWV1ZS5oYXNGb3JjZVVwZGF0ZSlyZXR1cm4hMDt2YXIgbj1hLnN0YXRlTm9kZTthPWEudHlwZTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2Ygbi5zaG91bGRDb21wb25lbnRVcGRhdGU/bi5zaG91bGRDb21wb25lbnRVcGRhdGUoYyxlLGYpOmEucHJvdG90eXBlJiZhLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudD8haGEoYixjKXx8IWhhKGQsZSk6ITB9ZnVuY3Rpb24gaChhLGIpe2IudXBkYXRlcj1yO2Euc3RhdGVOb2RlPWI7Yi5fcmVhY3RJbnRlcm5hbEZpYmVyPWF9ZnVuY3Rpb24gZyhhLGIsYyxkKXthPWIuc3RhdGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlxuYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZyLmVucXVldWVSZXBsYWNlU3RhdGUoYixiLnN0YXRlLG51bGwpfWZ1bmN0aW9uIGsoYSxiLGMsZCl7YT1hLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKXJldHVybiBhLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcy5jYWxsKG51bGwsYyxkKX12YXIgdj1hLmNhY2hlQ29udGV4dCxsPWEuZ2V0TWFza2VkQ29udGV4dCxwPWEuZ2V0VW5tYXNrZWRDb250ZXh0LHo9YS5pc0NvbnRleHRDb25zdW1lcixCPWEuaGFzQ29udGV4dENoYW5nZWQscj17aXNNb3VudGVkOnlkLGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihhLGQsZSl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7ZT12b2lkIDA9PT1lP251bGw6ZTt2YXIgZj1jKGEpO1BlKGEse2V4cGlyYXRpb25UaW1lOmYscGFydGlhbFN0YXRlOmQsY2FsbGJhY2s6ZSxpc1JlcGxhY2U6ITEsaXNGb3JjZWQ6ITEsXG5jYXB0dXJlZFZhbHVlOm51bGwsbmV4dDpudWxsfSk7YihhLGYpfSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKGEsZCxlKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjtlPXZvaWQgMD09PWU/bnVsbDplO3ZhciBmPWMoYSk7UGUoYSx7ZXhwaXJhdGlvblRpbWU6ZixwYXJ0aWFsU3RhdGU6ZCxjYWxsYmFjazplLGlzUmVwbGFjZTohMCxpc0ZvcmNlZDohMSxjYXB0dXJlZFZhbHVlOm51bGwsbmV4dDpudWxsfSk7YihhLGYpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYSxkKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBlPWMoYSk7UGUoYSx7ZXhwaXJhdGlvblRpbWU6ZSxwYXJ0aWFsU3RhdGU6bnVsbCxjYWxsYmFjazpkLGlzUmVwbGFjZTohMSxpc0ZvcmNlZDohMCxjYXB0dXJlZFZhbHVlOm51bGwsbmV4dDpudWxsfSk7YihhLGUpfX07cmV0dXJue2Fkb3B0Q2xhc3NJbnN0YW5jZTpoLGNhbGxHZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM6ayxcbmNvbnN0cnVjdENsYXNzSW5zdGFuY2U6ZnVuY3Rpb24oYSxiKXt2YXIgYz1hLnR5cGUsZD1wKGEpLGU9eihhKSxmPWU/bChhLGQpOmthO2M9bmV3IGMoYixmKTt2YXIgbj1udWxsIT09Yy5zdGF0ZSYmdm9pZCAwIT09Yy5zdGF0ZT9jLnN0YXRlOm51bGw7aChhLGMpO2EubWVtb2l6ZWRTdGF0ZT1uO2I9ayhhLGMsYixuKTtudWxsIT09YiYmdm9pZCAwIT09YiYmKGEubWVtb2l6ZWRTdGF0ZT1BKHt9LGEubWVtb2l6ZWRTdGF0ZSxiKSk7ZSYmdihhLGQsZik7cmV0dXJuIGN9LG1vdW50Q2xhc3NJbnN0YW5jZTpmdW5jdGlvbihhLGIpe3ZhciBjPWEudHlwZSxkPWEuYWx0ZXJuYXRlLGU9YS5zdGF0ZU5vZGUsZj1hLnBlbmRpbmdQcm9wcyxuPXAoYSk7ZS5wcm9wcz1mO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2UucmVmcz1rYTtlLmNvbnRleHQ9bChhLG4pO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc3x8XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fFxuXCJmdW5jdGlvblwiIT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50fHwoYz1lLnN0YXRlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudCYmZS5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSxjIT09ZS5zdGF0ZSYmci5lbnF1ZXVlUmVwbGFjZVN0YXRlKGUsZS5zdGF0ZSxudWxsKSxjPWEudXBkYXRlUXVldWUsbnVsbCE9PWMmJihlLnN0YXRlPVJlKGQsYSxjLGUsZixiKSkpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudERpZE1vdW50JiYoYS5lZmZlY3RUYWd8PTQpfSxyZXN1bWVNb3VudENsYXNzSW5zdGFuY2U6ZnVuY3Rpb24oYSxiKXt2YXIgYz1hLnR5cGUsbj1hLnN0YXRlTm9kZTtuLnByb3BzPWEubWVtb2l6ZWRQcm9wcztuLnN0YXRlPVxuYS5tZW1vaXplZFN0YXRlO3ZhciBoPWEubWVtb2l6ZWRQcm9wcyxyPWEucGVuZGluZ1Byb3BzLHo9bi5jb250ZXh0LHE9cChhKTtxPWwoYSxxKTsoYz1cImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIG4uVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBuLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09cnx8eiE9PXEpJiZnKGEsbixyLHEpO3o9YS5tZW1vaXplZFN0YXRlO2I9bnVsbCE9PWEudXBkYXRlUXVldWU/UmUobnVsbCxhLGEudXBkYXRlUXVldWUsbixyLGIpOno7dmFyIHU9dm9pZCAwO2ghPT1yJiYodT1rKGEsbixyLGIpKTtpZihudWxsIT09dSYmdm9pZCAwIT09dSl7Yj1udWxsPT09Ynx8dm9pZCAwPT09Yj91OkEoe30sYix1KTt2YXIgdD1hLnVwZGF0ZVF1ZXVlO1xubnVsbCE9PXQmJih0LmJhc2VTdGF0ZT1BKHt9LHQuYmFzZVN0YXRlLHUpKX1pZighKGghPT1yfHx6IT09Ynx8QigpfHxudWxsIT09YS51cGRhdGVRdWV1ZSYmYS51cGRhdGVRdWV1ZS5oYXNGb3JjZVVwZGF0ZSkpcmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIG4uY29tcG9uZW50RGlkTW91bnQmJihhLmVmZmVjdFRhZ3w9NCksITE7KGg9ZihhLGgscix6LGIscSkpPyhjfHxcImZ1bmN0aW9uXCIhPT10eXBlb2Ygbi5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2Ygbi5jb21wb25lbnRXaWxsTW91bnR8fChcImZ1bmN0aW9uXCI9PT10eXBlb2Ygbi5jb21wb25lbnRXaWxsTW91bnQmJm4uY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIG4uVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmbi5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuLmNvbXBvbmVudERpZE1vdW50JiYoYS5lZmZlY3RUYWd8PVxuNCkpOihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygbi5jb21wb25lbnREaWRNb3VudCYmKGEuZWZmZWN0VGFnfD00KSxkKGEsciksZShhLGIpKTtuLnByb3BzPXI7bi5zdGF0ZT1iO24uY29udGV4dD1xO3JldHVybiBofSx1cGRhdGVDbGFzc0luc3RhbmNlOmZ1bmN0aW9uKGEsYixjKXt2YXIgbj1iLnR5cGUseD1iLnN0YXRlTm9kZTt4LnByb3BzPWIubWVtb2l6ZWRQcm9wczt4LnN0YXRlPWIubWVtb2l6ZWRTdGF0ZTt2YXIgaD1iLm1lbW9pemVkUHJvcHMscj1iLnBlbmRpbmdQcm9wcyxxPXguY29udGV4dCx1PXAoYik7dT1sKGIsdSk7KG49XCJmdW5jdGlvblwiPT09dHlwZW9mIG4uZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgeC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB4LlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgeC5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHxcbihoIT09cnx8cSE9PXUpJiZnKGIseCxyLHUpO3E9Yi5tZW1vaXplZFN0YXRlO2M9bnVsbCE9PWIudXBkYXRlUXVldWU/UmUoYSxiLGIudXBkYXRlUXVldWUseCxyLGMpOnE7dmFyIHQ9dm9pZCAwO2ghPT1yJiYodD1rKGIseCxyLGMpKTtpZihudWxsIT09dCYmdm9pZCAwIT09dCl7Yz1udWxsPT09Y3x8dm9pZCAwPT09Yz90OkEoe30sYyx0KTt2YXIgeT1iLnVwZGF0ZVF1ZXVlO251bGwhPT15JiYoeS5iYXNlU3RhdGU9QSh7fSx5LmJhc2VTdGF0ZSx0KSl9aWYoIShoIT09cnx8cSE9PWN8fEIoKXx8bnVsbCE9PWIudXBkYXRlUXVldWUmJmIudXBkYXRlUXVldWUuaGFzRm9yY2VVcGRhdGUpKXJldHVyblwiZnVuY3Rpb25cIiE9PXR5cGVvZiB4LmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcT09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgeC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmXG5xPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTIwNDgpLCExOyh0PWYoYixoLHIscSxjLHUpKT8obnx8XCJmdW5jdGlvblwiIT09dHlwZW9mIHguVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiB4LmNvbXBvbmVudFdpbGxVcGRhdGV8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgeC5jb21wb25lbnRXaWxsVXBkYXRlJiZ4LmNvbXBvbmVudFdpbGxVcGRhdGUocixjLHUpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiB4LlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZ4LlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKHIsYyx1KSksXCJmdW5jdGlvblwiPT09dHlwZW9mIHguY29tcG9uZW50RGlkVXBkYXRlJiYoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiB4LmdldFNuYXBzaG90QmVmb3JlVXBkYXRlJiYoYi5lZmZlY3RUYWd8PTIwNDgpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIHguY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZcbnE9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIHguZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnE9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjA0OCksZChiLHIpLGUoYixjKSk7eC5wcm9wcz1yO3guc3RhdGU9Yzt4LmNvbnRleHQ9dTtyZXR1cm4gdH19fXZhciBVZT1BcnJheS5pc0FycmF5O1xuZnVuY3Rpb24gVmUoYSxiLGMpe2E9Yy5yZWY7aWYobnVsbCE9PWEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZcIm9iamVjdFwiIT09dHlwZW9mIGEpe2lmKGMuX293bmVyKXtjPWMuX293bmVyO3ZhciBkPXZvaWQgMDtjJiYoMiE9PWMudGFnP0QoXCIxMTBcIik6dm9pZCAwLGQ9Yy5zdGF0ZU5vZGUpO2Q/dm9pZCAwOkQoXCIxNDdcIixhKTt2YXIgZT1cIlwiK2E7aWYobnVsbCE9PWImJm51bGwhPT1iLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWUpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZC5yZWZzPT09a2E/ZC5yZWZzPXt9OmQucmVmcztudWxsPT09YT9kZWxldGUgYltlXTpiW2VdPWF9O2IuX3N0cmluZ1JlZj1lO3JldHVybiBifVwic3RyaW5nXCIhPT10eXBlb2YgYT9EKFwiMTQ4XCIpOnZvaWQgMDtjLl9vd25lcj92b2lkIDA6RChcIjI1NFwiLGEpfXJldHVybiBhfVxuZnVuY3Rpb24gV2UoYSxiKXtcInRleHRhcmVhXCIhPT1hLnR5cGUmJkQoXCIzMVwiLFwiW29iamVjdCBPYmplY3RdXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYik/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhiKS5qb2luKFwiLCBcIikrXCJ9XCI6YixcIlwiKX1cbmZ1bmN0aW9uIFhlKGEpe2Z1bmN0aW9uIGIoYixjKXtpZihhKXt2YXIgZD1iLmxhc3RFZmZlY3Q7bnVsbCE9PWQ/KGQubmV4dEVmZmVjdD1jLGIubGFzdEVmZmVjdD1jKTpiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1jO2MubmV4dEVmZmVjdD1udWxsO2MuZWZmZWN0VGFnPTh9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiLGMpe2E9emUoYSxiLGMpO2EuaW5kZXg9MDthLnNpYmxpbmc9bnVsbDtyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyxkKXtiLmluZGV4PWQ7aWYoIWEpcmV0dXJuIGM7ZD1iLmFsdGVybmF0ZTtpZihudWxsIT09ZClyZXR1cm4gZD1kLmluZGV4LGQ8Yz8oYi5lZmZlY3RUYWc9XG4yLGMpOmQ7Yi5lZmZlY3RUYWc9MjtyZXR1cm4gY31mdW5jdGlvbiBoKGIpe2EmJm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZWZmZWN0VGFnPTIpO3JldHVybiBifWZ1bmN0aW9uIGcoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDYhPT1iLnRhZylyZXR1cm4gYj1DZShjLGEubW9kZSxkKSxiW1wicmV0dXJuXCJdPWEsYjtiPWUoYixjLGQpO2JbXCJyZXR1cm5cIl09YTtyZXR1cm4gYn1mdW5jdGlvbiBrKGEsYixjLGQpe2lmKG51bGwhPT1iJiZiLnR5cGU9PT1jLnR5cGUpcmV0dXJuIGQ9ZShiLGMucHJvcHMsZCksZC5yZWY9VmUoYSxiLGMpLGRbXCJyZXR1cm5cIl09YSxkO2Q9QWUoYyxhLm1vZGUsZCk7ZC5yZWY9VmUoYSxiLGMpO2RbXCJyZXR1cm5cIl09YTtyZXR1cm4gZH1mdW5jdGlvbiB2KGEsYixjLGQpe2lmKG51bGw9PT1ifHw0IT09Yi50YWd8fGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09Yy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj1cbkRlKGMsYS5tb2RlLGQpLGJbXCJyZXR1cm5cIl09YSxiO2I9ZShiLGMuY2hpbGRyZW58fFtdLGQpO2JbXCJyZXR1cm5cIl09YTtyZXR1cm4gYn1mdW5jdGlvbiBsKGEsYixjLGQsZil7aWYobnVsbD09PWJ8fDEwIT09Yi50YWcpcmV0dXJuIGI9QmUoYyxhLm1vZGUsZCxmKSxiW1wicmV0dXJuXCJdPWEsYjtiPWUoYixjLGQpO2JbXCJyZXR1cm5cIl09YTtyZXR1cm4gYn1mdW5jdGlvbiBwKGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGJ8fFwibnVtYmVyXCI9PT10eXBlb2YgYilyZXR1cm4gYj1DZShcIlwiK2IsYS5tb2RlLGMpLGJbXCJyZXR1cm5cIl09YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIG9jOnJldHVybiBjPUFlKGIsYS5tb2RlLGMpLGMucmVmPVZlKGEsbnVsbCxiKSxjW1wicmV0dXJuXCJdPWEsYztjYXNlIHJjOnJldHVybiBiPURlKGIsYS5tb2RlLGMpLGJbXCJyZXR1cm5cIl09YSxifWlmKFVlKGIpfHx6YyhiKSlyZXR1cm4gYj1CZShiLFxuYS5tb2RlLGMsbnVsbCksYltcInJldHVyblwiXT1hLGI7V2UoYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB6KGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6ZyhhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIG9jOnJldHVybiBjLmtleT09PWU/Yy50eXBlPT09c2M/bChhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGUpOmsoYSxiLGMsZCk6bnVsbDtjYXNlIHJjOnJldHVybiBjLmtleT09PWU/dihhLGIsYyxkKTpudWxsfWlmKFVlKGMpfHx6YyhjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDpsKGEsYixjLGQsbnVsbCk7V2UoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBCKGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9YS5nZXQoYyl8fFxubnVsbCxnKGIsYSxcIlwiK2QsZSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2Ugb2M6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGQudHlwZT09PXNjP2woYixhLGQucHJvcHMuY2hpbGRyZW4sZSxkLmtleSk6ayhiLGEsZCxlKTtjYXNlIHJjOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCx2KGIsYSxkLGUpfWlmKFVlKGQpfHx6YyhkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxsKGIsYSxkLGUsbnVsbCk7V2UoYixkKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiByKGUsbCxnLGgpe2Zvcih2YXIgcj1udWxsLGs9bnVsbCxxPWwsdT1sPTAsdD1udWxsO251bGwhPT1xJiZ1PGcubGVuZ3RoO3UrKyl7cS5pbmRleD51Pyh0PXEscT1udWxsKTp0PXEuc2libGluZzt2YXIgbj16KGUscSxnW3VdLGgpO2lmKG51bGw9PT1uKXtudWxsPT09cSYmKHE9dCk7YnJlYWt9YSYmcSYmbnVsbD09PVxubi5hbHRlcm5hdGUmJmIoZSxxKTtsPWYobixsLHUpO251bGw9PT1rP3I9bjprLnNpYmxpbmc9bjtrPW47cT10fWlmKHU9PT1nLmxlbmd0aClyZXR1cm4gYyhlLHEpLHI7aWYobnVsbD09PXEpe2Zvcig7dTxnLmxlbmd0aDt1KyspaWYocT1wKGUsZ1t1XSxoKSlsPWYocSxsLHUpLG51bGw9PT1rP3I9cTprLnNpYmxpbmc9cSxrPXE7cmV0dXJuIHJ9Zm9yKHE9ZChlLHEpO3U8Zy5sZW5ndGg7dSsrKWlmKHQ9QihxLGUsdSxnW3VdLGgpKXtpZihhJiZudWxsIT09dC5hbHRlcm5hdGUpcVtcImRlbGV0ZVwiXShudWxsPT09dC5rZXk/dTp0LmtleSk7bD1mKHQsbCx1KTtudWxsPT09az9yPXQ6ay5zaWJsaW5nPXQ7az10fWEmJnEuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIHJ9ZnVuY3Rpb24gUShlLGwsZyxoKXt2YXIgcj16YyhnKTtcImZ1bmN0aW9uXCIhPT10eXBlb2Ygcj9EKFwiMTUwXCIpOnZvaWQgMDtnPXIuY2FsbChnKTtudWxsPT1nP0QoXCIxNTFcIik6dm9pZCAwO2Zvcih2YXIgaz1cbnI9bnVsbCxxPWwsdT1sPTAsdD1udWxsLG49Zy5uZXh0KCk7bnVsbCE9PXEmJiFuLmRvbmU7dSsrLG49Zy5uZXh0KCkpe3EuaW5kZXg+dT8odD1xLHE9bnVsbCk6dD1xLnNpYmxpbmc7dmFyIEg9eihlLHEsbi52YWx1ZSxoKTtpZihudWxsPT09SCl7cXx8KHE9dCk7YnJlYWt9YSYmcSYmbnVsbD09PUguYWx0ZXJuYXRlJiZiKGUscSk7bD1mKEgsbCx1KTtudWxsPT09az9yPUg6ay5zaWJsaW5nPUg7az1IO3E9dH1pZihuLmRvbmUpcmV0dXJuIGMoZSxxKSxyO2lmKG51bGw9PT1xKXtmb3IoOyFuLmRvbmU7dSsrLG49Zy5uZXh0KCkpbj1wKGUsbi52YWx1ZSxoKSxudWxsIT09biYmKGw9ZihuLGwsdSksbnVsbD09PWs/cj1uOmsuc2libGluZz1uLGs9bik7cmV0dXJuIHJ9Zm9yKHE9ZChlLHEpOyFuLmRvbmU7dSsrLG49Zy5uZXh0KCkpaWYobj1CKHEsZSx1LG4udmFsdWUsaCksbnVsbCE9PW4pe2lmKGEmJm51bGwhPT1uLmFsdGVybmF0ZSlxW1wiZGVsZXRlXCJdKG51bGw9PT1uLmtleT91Om4ua2V5KTtcbmw9ZihuLGwsdSk7bnVsbD09PWs/cj1uOmsuc2libGluZz1uO2s9bn1hJiZxLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiByfXJldHVybiBmdW5jdGlvbihhLGQsZixsKXtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLnR5cGU9PT1zYyYmbnVsbD09PWYua2V5JiYoZj1mLnByb3BzLmNoaWxkcmVuKTt2YXIgZz1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mO2lmKGcpc3dpdGNoKGYuJCR0eXBlb2Ype2Nhc2Ugb2M6YTp7dmFyIGs9Zi5rZXk7Zm9yKGc9ZDtudWxsIT09Zzspe2lmKGcua2V5PT09aylpZigxMD09PWcudGFnP2YudHlwZT09PXNjOmcudHlwZT09PWYudHlwZSl7YyhhLGcuc2libGluZyk7ZD1lKGcsZi50eXBlPT09c2M/Zi5wcm9wcy5jaGlsZHJlbjpmLnByb3BzLGwpO2QucmVmPVZlKGEsZyxmKTtkW1wicmV0dXJuXCJdPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsZyk7YnJlYWt9ZWxzZSBiKGEsZyk7Zz1nLnNpYmxpbmd9Zi50eXBlPT09XG5zYz8oZD1CZShmLnByb3BzLmNoaWxkcmVuLGEubW9kZSxsLGYua2V5KSxkW1wicmV0dXJuXCJdPWEsYT1kKToobD1BZShmLGEubW9kZSxsKSxsLnJlZj1WZShhLGQsZiksbFtcInJldHVyblwiXT1hLGE9bCl9cmV0dXJuIGgoYSk7Y2FzZSByYzphOntmb3IoZz1mLmtleTtudWxsIT09ZDspe2lmKGQua2V5PT09ZylpZig0PT09ZC50YWcmJmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm89PT1mLmNvbnRhaW5lckluZm8mJmQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uPT09Zi5pbXBsZW1lbnRhdGlvbil7YyhhLGQuc2libGluZyk7ZD1lKGQsZi5jaGlsZHJlbnx8W10sbCk7ZFtcInJldHVyblwiXT1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGQpO2JyZWFrfWVsc2UgYihhLGQpO2Q9ZC5zaWJsaW5nfWQ9RGUoZixhLm1vZGUsbCk7ZFtcInJldHVyblwiXT1hO2E9ZH1yZXR1cm4gaChhKX1pZihcInN0cmluZ1wiPT09dHlwZW9mIGZ8fFwibnVtYmVyXCI9PT10eXBlb2YgZilyZXR1cm4gZj1cIlwiK2YsbnVsbCE9PWQmJlxuNj09PWQudGFnPyhjKGEsZC5zaWJsaW5nKSxkPWUoZCxmLGwpLGRbXCJyZXR1cm5cIl09YSxhPWQpOihjKGEsZCksZD1DZShmLGEubW9kZSxsKSxkW1wicmV0dXJuXCJdPWEsYT1kKSxoKGEpO2lmKFVlKGYpKXJldHVybiByKGEsZCxmLGwpO2lmKHpjKGYpKXJldHVybiBRKGEsZCxmLGwpO2cmJldlKGEsZik7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBmKXN3aXRjaChhLnRhZyl7Y2FzZSAyOmNhc2UgMTpsPWEudHlwZSxEKFwiMTUyXCIsbC5kaXNwbGF5TmFtZXx8bC5uYW1lfHxcIkNvbXBvbmVudFwiKX1yZXR1cm4gYyhhLGQpfX12YXIgWWU9WGUoITApLFplPVhlKCExKTtcbmZ1bmN0aW9uICRlKGEsYixjLGQsZSxmLGgpe2Z1bmN0aW9uIGcoYSxiLGMpe2soYSxiLGMsYi5leHBpcmF0aW9uVGltZSl9ZnVuY3Rpb24gayhhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP1plKGIsbnVsbCxjLGQpOlllKGIsYS5jaGlsZCxjLGQpfWZ1bmN0aW9uIHYoYSxiKXt2YXIgYz1iLnJlZjtpZihudWxsPT09YSYmbnVsbCE9PWN8fG51bGwhPT1hJiZhLnJlZiE9PWMpYi5lZmZlY3RUYWd8PTEyOH1mdW5jdGlvbiBsKGEsYixjLGQsZSxmKXt2KGEsYik7aWYoIWMmJiFlKXJldHVybiBkJiZ5KGIsITEpLHIoYSxiKTtjPWIuc3RhdGVOb2RlO25jLmN1cnJlbnQ9Yjt2YXIgbD1lP251bGw6Yy5yZW5kZXIoKTtiLmVmZmVjdFRhZ3w9MTtlJiYoayhhLGIsbnVsbCxmKSxiLmNoaWxkPW51bGwpO2soYSxiLGwsZik7Yi5tZW1vaXplZFN0YXRlPWMuc3RhdGU7Yi5tZW1vaXplZFByb3BzPWMucHJvcHM7ZCYmeShiLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBwKGEpe3ZhciBiPWEuc3RhdGVOb2RlO1xuYi5wZW5kaW5nQ29udGV4dD90KGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJnQoYSxiLmNvbnRleHQsITEpO1koYSxiLmNvbnRhaW5lckluZm8pfWZ1bmN0aW9uIHooYSxiLGMsZCl7dmFyIGU9YS5jaGlsZDtmb3IobnVsbCE9PWUmJihlW1wicmV0dXJuXCJdPWEpO251bGwhPT1lOyl7c3dpdGNoKGUudGFnKXtjYXNlIDEyOnZhciBmPWUuc3RhdGVOb2RlfDA7aWYoZS50eXBlPT09YiYmMCE9PShmJmMpKXtmb3IoZj1lO251bGwhPT1mOyl7dmFyIGw9Zi5hbHRlcm5hdGU7aWYoMD09PWYuZXhwaXJhdGlvblRpbWV8fGYuZXhwaXJhdGlvblRpbWU+ZClmLmV4cGlyYXRpb25UaW1lPWQsbnVsbCE9PWwmJigwPT09bC5leHBpcmF0aW9uVGltZXx8bC5leHBpcmF0aW9uVGltZT5kKSYmKGwuZXhwaXJhdGlvblRpbWU9ZCk7ZWxzZSBpZihudWxsIT09bCYmKDA9PT1sLmV4cGlyYXRpb25UaW1lfHxsLmV4cGlyYXRpb25UaW1lPmQpKWwuZXhwaXJhdGlvblRpbWU9XG5kO2Vsc2UgYnJlYWs7Zj1mW1wicmV0dXJuXCJdfWY9bnVsbH1lbHNlIGY9ZS5jaGlsZDticmVhaztjYXNlIDEzOmY9ZS50eXBlPT09YS50eXBlP251bGw6ZS5jaGlsZDticmVhaztkZWZhdWx0OmY9ZS5jaGlsZH1pZihudWxsIT09ZilmW1wicmV0dXJuXCJdPWU7ZWxzZSBmb3IoZj1lO251bGwhPT1mOyl7aWYoZj09PWEpe2Y9bnVsbDticmVha31lPWYuc2libGluZztpZihudWxsIT09ZSl7Zj1lO2JyZWFrfWY9ZltcInJldHVyblwiXX1lPWZ9fWZ1bmN0aW9uIEIoYSxiLGMpe3ZhciBkPWIudHlwZS5fY29udGV4dCxlPWIucGVuZGluZ1Byb3BzLGY9Yi5tZW1vaXplZFByb3BzO2lmKCFxKCkmJmY9PT1lKXJldHVybiBiLnN0YXRlTm9kZT0wLEcoYikscihhLGIpO3ZhciBsPWUudmFsdWU7Yi5tZW1vaXplZFByb3BzPWU7aWYobnVsbD09PWYpbD0xMDczNzQxODIzO2Vsc2UgaWYoZi52YWx1ZT09PWUudmFsdWUpe2lmKGYuY2hpbGRyZW49PT1lLmNoaWxkcmVuKXJldHVybiBiLnN0YXRlTm9kZT0wLEcoYiksXG5yKGEsYik7bD0wfWVsc2V7dmFyIGg9Zi52YWx1ZTtpZihoPT09bCYmKDAhPT1ofHwxL2g9PT0xL2wpfHxoIT09aCYmbCE9PWwpe2lmKGYuY2hpbGRyZW49PT1lLmNoaWxkcmVuKXJldHVybiBiLnN0YXRlTm9kZT0wLEcoYikscihhLGIpO2w9MH1lbHNlIGlmKGw9XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzP2QuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzKGgsbCk6MTA3Mzc0MTgyMyxsfD0wLDA9PT1sKXtpZihmLmNoaWxkcmVuPT09ZS5jaGlsZHJlbilyZXR1cm4gYi5zdGF0ZU5vZGU9MCxHKGIpLHIoYSxiKX1lbHNlIHooYixkLGwsYyl9Yi5zdGF0ZU5vZGU9bDtHKGIpO2coYSxiLGUuY2hpbGRyZW4pO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIHIoYSxiKXtudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQ/RChcIjE1M1wiKTp2b2lkIDA7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDt2YXIgYz16ZShhLGEucGVuZGluZ1Byb3BzLGEuZXhwaXJhdGlvblRpbWUpO1xuYi5jaGlsZD1jO2ZvcihjW1wicmV0dXJuXCJdPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9emUoYSxhLnBlbmRpbmdQcm9wcyxhLmV4cGlyYXRpb25UaW1lKSxjW1wicmV0dXJuXCJdPWI7Yy5zaWJsaW5nPW51bGx9cmV0dXJuIGIuY2hpbGR9dmFyIFE9YS5zaG91bGRTZXRUZXh0Q29udGVudCxuPWEuc2hvdWxkRGVwcmlvcml0aXplU3VidHJlZSx4PWIucHVzaEhvc3RDb250ZXh0LFk9Yi5wdXNoSG9zdENvbnRhaW5lcixHPWQucHVzaFByb3ZpZGVyLFI9Yy5nZXRNYXNrZWRDb250ZXh0LFM9Yy5nZXRVbm1hc2tlZENvbnRleHQscT1jLmhhc0NvbnRleHRDaGFuZ2VkLHU9Yy5wdXNoQ29udGV4dFByb3ZpZGVyLHQ9Yy5wdXNoVG9wTGV2ZWxDb250ZXh0T2JqZWN0LHk9Yy5pbnZhbGlkYXRlQ29udGV4dFByb3ZpZGVyLEg9ZS5lbnRlckh5ZHJhdGlvblN0YXRlLFdhPWUucmVzZXRIeWRyYXRpb25TdGF0ZSxDYj1lLnRyeVRvQ2xhaW1OZXh0SHlkcmF0YWJsZUluc3RhbmNlO1xuYT1UZShjLGYsaCxmdW5jdGlvbihhLGIpe2EubWVtb2l6ZWRQcm9wcz1ifSxmdW5jdGlvbihhLGIpe2EubWVtb2l6ZWRTdGF0ZT1ifSk7dmFyIEpjPWEuYWRvcHRDbGFzc0luc3RhbmNlLEtjPWEuY2FsbEdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyxMYz1hLmNvbnN0cnVjdENsYXNzSW5zdGFuY2UsRGI9YS5tb3VudENsYXNzSW5zdGFuY2UsTWM9YS5yZXN1bWVNb3VudENsYXNzSW5zdGFuY2UsRWI9YS51cGRhdGVDbGFzc0luc3RhbmNlO3JldHVybntiZWdpbldvcms6ZnVuY3Rpb24oYSxiLGMpe2lmKDA9PT1iLmV4cGlyYXRpb25UaW1lfHxiLmV4cGlyYXRpb25UaW1lPmMpe3N3aXRjaChiLnRhZyl7Y2FzZSAzOnAoYik7YnJlYWs7Y2FzZSAyOnUoYik7YnJlYWs7Y2FzZSA0OlkoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTticmVhaztjYXNlIDEzOkcoYil9cmV0dXJuIG51bGx9c3dpdGNoKGIudGFnKXtjYXNlIDA6bnVsbCE9PWE/RChcIjE1NVwiKTp2b2lkIDA7dmFyIGQ9Yi50eXBlLFxuZT1iLnBlbmRpbmdQcm9wcyxmPVMoYik7Zj1SKGIsZik7ZD1kKGUsZik7Yi5lZmZlY3RUYWd8PTE7XCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQucmVuZGVyJiZ2b2lkIDA9PT1kLiQkdHlwZW9mPyhmPWIudHlwZSxiLnRhZz0yLGIubWVtb2l6ZWRTdGF0ZT1udWxsIT09ZC5zdGF0ZSYmdm9pZCAwIT09ZC5zdGF0ZT9kLnN0YXRlOm51bGwsXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzJiYoZT1LYyhiLGQsZSxiLm1lbW9pemVkU3RhdGUpLG51bGwhPT1lJiZ2b2lkIDAhPT1lJiYoYi5tZW1vaXplZFN0YXRlPUEoe30sYi5tZW1vaXplZFN0YXRlLGUpKSksZT11KGIpLEpjKGIsZCksRGIoYixjKSxhPWwoYSxiLCEwLGUsITEsYykpOihiLnRhZz0xLGcoYSxiLGQpLGIubWVtb2l6ZWRQcm9wcz1lLGE9Yi5jaGlsZCk7cmV0dXJuIGE7Y2FzZSAxOnJldHVybiBlPWIudHlwZSxjPWIucGVuZGluZ1Byb3BzLHEoKXx8XG5iLm1lbW9pemVkUHJvcHMhPT1jPyhkPVMoYiksZD1SKGIsZCksZT1lKGMsZCksYi5lZmZlY3RUYWd8PTEsZyhhLGIsZSksYi5tZW1vaXplZFByb3BzPWMsYT1iLmNoaWxkKTphPXIoYSxiKSxhO2Nhc2UgMjplPXUoYik7bnVsbD09PWE/bnVsbD09PWIuc3RhdGVOb2RlPyhMYyhiLGIucGVuZGluZ1Byb3BzKSxEYihiLGMpLGQ9ITApOmQ9TWMoYixjKTpkPUViKGEsYixjKTtmPSExO3ZhciBoPWIudXBkYXRlUXVldWU7bnVsbCE9PWgmJm51bGwhPT1oLmNhcHR1cmVkVmFsdWVzJiYoZj1kPSEwKTtyZXR1cm4gbChhLGIsZCxlLGYsYyk7Y2FzZSAzOmE6aWYocChiKSxkPWIudXBkYXRlUXVldWUsbnVsbCE9PWQpe2Y9Yi5tZW1vaXplZFN0YXRlO2U9UmUoYSxiLGQsbnVsbCxudWxsLGMpO2IubWVtb2l6ZWRTdGF0ZT1lO2Q9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09ZCYmbnVsbCE9PWQuY2FwdHVyZWRWYWx1ZXMpZD1udWxsO2Vsc2UgaWYoZj09PWUpe1dhKCk7YT1yKGEsYik7YnJlYWsgYX1lbHNlIGQ9XG5lLmVsZW1lbnQ7Zj1iLnN0YXRlTm9kZTsobnVsbD09PWF8fG51bGw9PT1hLmNoaWxkKSYmZi5oeWRyYXRlJiZIKGIpPyhiLmVmZmVjdFRhZ3w9MixiLmNoaWxkPVplKGIsbnVsbCxkLGMpKTooV2EoKSxnKGEsYixkKSk7Yi5tZW1vaXplZFN0YXRlPWU7YT1iLmNoaWxkfWVsc2UgV2EoKSxhPXIoYSxiKTtyZXR1cm4gYTtjYXNlIDU6YTp7eChiKTtudWxsPT09YSYmQ2IoYik7ZT1iLnR5cGU7aD1iLm1lbW9pemVkUHJvcHM7ZD1iLnBlbmRpbmdQcm9wcztmPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpudWxsO2lmKCFxKCkmJmg9PT1kKXtpZihoPWIubW9kZSYxJiZuKGUsZCkpYi5leHBpcmF0aW9uVGltZT0xMDczNzQxODIzO2lmKCFofHwxMDczNzQxODIzIT09Yyl7YT1yKGEsYik7YnJlYWsgYX19aD1kLmNoaWxkcmVuO1EoZSxkKT9oPW51bGw6ZiYmUShlLGYpJiYoYi5lZmZlY3RUYWd8PTE2KTt2KGEsYik7MTA3Mzc0MTgyMyE9PWMmJmIubW9kZSYxJiZuKGUsZCk/KGIuZXhwaXJhdGlvblRpbWU9XG4xMDczNzQxODIzLGIubWVtb2l6ZWRQcm9wcz1kLGE9bnVsbCk6KGcoYSxiLGgpLGIubWVtb2l6ZWRQcm9wcz1kLGE9Yi5jaGlsZCl9cmV0dXJuIGE7Y2FzZSA2OnJldHVybiBudWxsPT09YSYmQ2IoYiksYi5tZW1vaXplZFByb3BzPWIucGVuZGluZ1Byb3BzLG51bGw7Y2FzZSA4OmIudGFnPTc7Y2FzZSA3OnJldHVybiBlPWIucGVuZGluZ1Byb3BzLHEoKXx8Yi5tZW1vaXplZFByb3BzIT09ZXx8KGU9Yi5tZW1vaXplZFByb3BzKSxkPWUuY2hpbGRyZW4sYi5zdGF0ZU5vZGU9bnVsbD09PWE/WmUoYixiLnN0YXRlTm9kZSxkLGMpOlllKGIsYS5zdGF0ZU5vZGUsZCxjKSxiLm1lbW9pemVkUHJvcHM9ZSxiLnN0YXRlTm9kZTtjYXNlIDk6cmV0dXJuIG51bGw7Y2FzZSA0OnJldHVybiBZKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksZT1iLnBlbmRpbmdQcm9wcyxxKCl8fGIubWVtb2l6ZWRQcm9wcyE9PWU/KG51bGw9PT1hP2IuY2hpbGQ9WWUoYixudWxsLGUsYyk6ZyhhLGIsZSksYi5tZW1vaXplZFByb3BzPVxuZSxhPWIuY2hpbGQpOmE9cihhLGIpLGE7Y2FzZSAxNDpyZXR1cm4gYz1iLnR5cGUucmVuZGVyLGM9YyhiLnBlbmRpbmdQcm9wcyxiLnJlZiksZyhhLGIsYyksYi5tZW1vaXplZFByb3BzPWMsYi5jaGlsZDtjYXNlIDEwOnJldHVybiBjPWIucGVuZGluZ1Byb3BzLHEoKXx8Yi5tZW1vaXplZFByb3BzIT09Yz8oZyhhLGIsYyksYi5tZW1vaXplZFByb3BzPWMsYT1iLmNoaWxkKTphPXIoYSxiKSxhO2Nhc2UgMTE6cmV0dXJuIGM9Yi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4scSgpfHxudWxsIT09YyYmYi5tZW1vaXplZFByb3BzIT09Yz8oZyhhLGIsYyksYi5tZW1vaXplZFByb3BzPWMsYT1iLmNoaWxkKTphPXIoYSxiKSxhO2Nhc2UgMTM6cmV0dXJuIEIoYSxiLGMpO2Nhc2UgMTI6YTp7ZD1iLnR5cGU7Zj1iLnBlbmRpbmdQcm9wcztoPWIubWVtb2l6ZWRQcm9wcztlPWQuX2N1cnJlbnRWYWx1ZTt2YXIgdD1kLl9jaGFuZ2VkQml0cztpZihxKCl8fDAhPT10fHxoIT09Zil7Yi5tZW1vaXplZFByb3BzPVxuZjt2YXIgaz1mLnVuc3RhYmxlX29ic2VydmVkQml0cztpZih2b2lkIDA9PT1rfHxudWxsPT09aylrPTEwNzM3NDE4MjM7Yi5zdGF0ZU5vZGU9aztpZigwIT09KHQmaykpeihiLGQsdCxjKTtlbHNlIGlmKGg9PT1mKXthPXIoYSxiKTticmVhayBhfWM9Zi5jaGlsZHJlbjtjPWMoZSk7ZyhhLGIsYyk7YT1iLmNoaWxkfWVsc2UgYT1yKGEsYil9cmV0dXJuIGE7ZGVmYXVsdDpEKFwiMTU2XCIpfX19fVxuZnVuY3Rpb24gYWYoYSxiLGMsZCxlKXtmdW5jdGlvbiBmKGEpe2EuZWZmZWN0VGFnfD00fXZhciBoPWEuY3JlYXRlSW5zdGFuY2UsZz1hLmNyZWF0ZVRleHRJbnN0YW5jZSxrPWEuYXBwZW5kSW5pdGlhbENoaWxkLHY9YS5maW5hbGl6ZUluaXRpYWxDaGlsZHJlbixsPWEucHJlcGFyZVVwZGF0ZSxwPWEucGVyc2lzdGVuY2Usej1iLmdldFJvb3RIb3N0Q29udGFpbmVyLEI9Yi5wb3BIb3N0Q29udGV4dCxyPWIuZ2V0SG9zdENvbnRleHQsUT1iLnBvcEhvc3RDb250YWluZXIsbj1jLnBvcENvbnRleHRQcm92aWRlcix4PWMucG9wVG9wTGV2ZWxDb250ZXh0T2JqZWN0LFk9ZC5wb3BQcm92aWRlcixHPWUucHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZSxSPWUucHJlcGFyZVRvSHlkcmF0ZUhvc3RUZXh0SW5zdGFuY2UsUz1lLnBvcEh5ZHJhdGlvblN0YXRlLHE9dm9pZCAwLHU9dm9pZCAwLHQ9dm9pZCAwO2EubXV0YXRpb24/KHE9ZnVuY3Rpb24oKXt9LHU9ZnVuY3Rpb24oYSxiLGMpeyhiLnVwZGF0ZVF1ZXVlPVxuYykmJmYoYil9LHQ9ZnVuY3Rpb24oYSxiLGMsZCl7YyE9PWQmJmYoYil9KTpwP0QoXCIyMzVcIik6RChcIjIzNlwiKTtyZXR1cm57Y29tcGxldGVXb3JrOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcztzd2l0Y2goYi50YWcpe2Nhc2UgMTpyZXR1cm4gbnVsbDtjYXNlIDI6cmV0dXJuIG4oYiksYT1iLnN0YXRlTm9kZSxkPWIudXBkYXRlUXVldWUsbnVsbCE9PWQmJm51bGwhPT1kLmNhcHR1cmVkVmFsdWVzJiYoYi5lZmZlY3RUYWcmPS02NSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5jb21wb25lbnREaWRDYXRjaD9iLmVmZmVjdFRhZ3w9MjU2OmQuY2FwdHVyZWRWYWx1ZXM9bnVsbCksbnVsbDtjYXNlIDM6UShiKTt4KGIpO2Q9Yi5zdGF0ZU5vZGU7ZC5wZW5kaW5nQ29udGV4dCYmKGQuY29udGV4dD1kLnBlbmRpbmdDb250ZXh0LGQucGVuZGluZ0NvbnRleHQ9bnVsbCk7aWYobnVsbD09PWF8fG51bGw9PT1hLmNoaWxkKVMoYiksYi5lZmZlY3RUYWcmPS0zO3EoYik7YT1iLnVwZGF0ZVF1ZXVlO1xubnVsbCE9PWEmJm51bGwhPT1hLmNhcHR1cmVkVmFsdWVzJiYoYi5lZmZlY3RUYWd8PTI1Nik7cmV0dXJuIG51bGw7Y2FzZSA1OkIoYik7Yz16KCk7dmFyIGU9Yi50eXBlO2lmKG51bGwhPT1hJiZudWxsIT1iLnN0YXRlTm9kZSl7dmFyIHA9YS5tZW1vaXplZFByb3BzLEg9Yi5zdGF0ZU5vZGUseT1yKCk7SD1sKEgsZSxwLGQsYyx5KTt1KGEsYixILGUscCxkLGMseSk7YS5yZWYhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpfWVsc2V7aWYoIWQpcmV0dXJuIG51bGw9PT1iLnN0YXRlTm9kZT9EKFwiMTY2XCIpOnZvaWQgMCxudWxsO2E9cigpO2lmKFMoYikpRyhiLGMsYSkmJmYoYik7ZWxzZXtwPWgoZSxkLGMsYSxiKTthOmZvcih5PWIuY2hpbGQ7bnVsbCE9PXk7KXtpZig1PT09eS50YWd8fDY9PT15LnRhZylrKHAseS5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PXkudGFnJiZudWxsIT09eS5jaGlsZCl7eS5jaGlsZFtcInJldHVyblwiXT15O3k9eS5jaGlsZDtjb250aW51ZX1pZih5PT09YilicmVhaztcbmZvcig7bnVsbD09PXkuc2libGluZzspe2lmKG51bGw9PT15W1wicmV0dXJuXCJdfHx5W1wicmV0dXJuXCJdPT09YilicmVhayBhO3k9eVtcInJldHVyblwiXX15LnNpYmxpbmdbXCJyZXR1cm5cIl09eVtcInJldHVyblwiXTt5PXkuc2libGluZ312KHAsZSxkLGMsYSkmJmYoYik7Yi5zdGF0ZU5vZGU9cH1udWxsIT09Yi5yZWYmJihiLmVmZmVjdFRhZ3w9MTI4KX1yZXR1cm4gbnVsbDtjYXNlIDY6aWYoYSYmbnVsbCE9Yi5zdGF0ZU5vZGUpdChhLGIsYS5tZW1vaXplZFByb3BzLGQpO2Vsc2V7aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBkKXJldHVybiBudWxsPT09Yi5zdGF0ZU5vZGU/RChcIjE2NlwiKTp2b2lkIDAsbnVsbDthPXooKTtjPXIoKTtTKGIpP1IoYikmJmYoYik6Yi5zdGF0ZU5vZGU9ZyhkLGEsYyxiKX1yZXR1cm4gbnVsbDtjYXNlIDc6KGQ9Yi5tZW1vaXplZFByb3BzKT92b2lkIDA6RChcIjE2NVwiKTtiLnRhZz04O2U9W107YTpmb3IoKHA9Yi5zdGF0ZU5vZGUpJiYocFtcInJldHVyblwiXT1iKTtudWxsIT09XG5wOyl7aWYoNT09PXAudGFnfHw2PT09cC50YWd8fDQ9PT1wLnRhZylEKFwiMjQ3XCIpO2Vsc2UgaWYoOT09PXAudGFnKWUucHVzaChwLnBlbmRpbmdQcm9wcy52YWx1ZSk7ZWxzZSBpZihudWxsIT09cC5jaGlsZCl7cC5jaGlsZFtcInJldHVyblwiXT1wO3A9cC5jaGlsZDtjb250aW51ZX1mb3IoO251bGw9PT1wLnNpYmxpbmc7KXtpZihudWxsPT09cFtcInJldHVyblwiXXx8cFtcInJldHVyblwiXT09PWIpYnJlYWsgYTtwPXBbXCJyZXR1cm5cIl19cC5zaWJsaW5nW1wicmV0dXJuXCJdPXBbXCJyZXR1cm5cIl07cD1wLnNpYmxpbmd9cD1kLmhhbmRsZXI7ZD1wKGQucHJvcHMsZSk7Yi5jaGlsZD1ZZShiLG51bGwhPT1hP2EuY2hpbGQ6bnVsbCxkLGMpO3JldHVybiBiLmNoaWxkO2Nhc2UgODpyZXR1cm4gYi50YWc9NyxudWxsO2Nhc2UgOTpyZXR1cm4gbnVsbDtjYXNlIDE0OnJldHVybiBudWxsO2Nhc2UgMTA6cmV0dXJuIG51bGw7Y2FzZSAxMTpyZXR1cm4gbnVsbDtjYXNlIDQ6cmV0dXJuIFEoYikscShiKSxudWxsO1xuY2FzZSAxMzpyZXR1cm4gWShiKSxudWxsO2Nhc2UgMTI6cmV0dXJuIG51bGw7Y2FzZSAwOkQoXCIxNjdcIik7ZGVmYXVsdDpEKFwiMTU2XCIpfX19fVxuZnVuY3Rpb24gYmYoYSxiLGMsZCxlKXt2YXIgZj1hLnBvcEhvc3RDb250YWluZXIsaD1hLnBvcEhvc3RDb250ZXh0LGc9Yi5wb3BDb250ZXh0UHJvdmlkZXIsaz1iLnBvcFRvcExldmVsQ29udGV4dE9iamVjdCx2PWMucG9wUHJvdmlkZXI7cmV0dXJue3Rocm93RXhjZXB0aW9uOmZ1bmN0aW9uKGEsYixjKXtiLmVmZmVjdFRhZ3w9NTEyO2IuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PW51bGw7Yj17dmFsdWU6Yyxzb3VyY2U6YixzdGFjazpCYyhiKX07ZG97c3dpdGNoKGEudGFnKXtjYXNlIDM6T2UoYSk7YS51cGRhdGVRdWV1ZS5jYXB0dXJlZFZhbHVlcz1bYl07YS5lZmZlY3RUYWd8PTEwMjQ7cmV0dXJuO2Nhc2UgMjppZihjPWEuc3RhdGVOb2RlLDA9PT0oYS5lZmZlY3RUYWcmNjQpJiZudWxsIT09YyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuY29tcG9uZW50RGlkQ2F0Y2gmJiFlKGMpKXtPZShhKTtjPWEudXBkYXRlUXVldWU7dmFyIGQ9Yy5jYXB0dXJlZFZhbHVlcztudWxsPT09ZD9cbmMuY2FwdHVyZWRWYWx1ZXM9W2JdOmQucHVzaChiKTthLmVmZmVjdFRhZ3w9MTAyNDtyZXR1cm59fWE9YVtcInJldHVyblwiXX13aGlsZShudWxsIT09YSl9LHVud2luZFdvcms6ZnVuY3Rpb24oYSl7c3dpdGNoKGEudGFnKXtjYXNlIDI6ZyhhKTt2YXIgYj1hLmVmZmVjdFRhZztyZXR1cm4gYiYxMDI0PyhhLmVmZmVjdFRhZz1iJi0xMDI1fDY0LGEpOm51bGw7Y2FzZSAzOnJldHVybiBmKGEpLGsoYSksYj1hLmVmZmVjdFRhZyxiJjEwMjQ/KGEuZWZmZWN0VGFnPWImLTEwMjV8NjQsYSk6bnVsbDtjYXNlIDU6cmV0dXJuIGgoYSksbnVsbDtjYXNlIDQ6cmV0dXJuIGYoYSksbnVsbDtjYXNlIDEzOnJldHVybiB2KGEpLG51bGw7ZGVmYXVsdDpyZXR1cm4gbnVsbH19LHVud2luZEludGVycnVwdGVkV29yazpmdW5jdGlvbihhKXtzd2l0Y2goYS50YWcpe2Nhc2UgMjpnKGEpO2JyZWFrO2Nhc2UgMzpmKGEpO2soYSk7YnJlYWs7Y2FzZSA1OmgoYSk7YnJlYWs7Y2FzZSA0OmYoYSk7YnJlYWs7Y2FzZSAxMzp2KGEpfX19fVxuZnVuY3Rpb24gY2YoYSxiKXt2YXIgYz1iLnNvdXJjZTtudWxsPT09Yi5zdGFjayYmQmMoYyk7bnVsbCE9PWMmJkFjKGMpO2I9Yi52YWx1ZTtudWxsIT09YSYmMj09PWEudGFnJiZBYyhhKTt0cnl7YiYmYi5zdXBwcmVzc1JlYWN0RXJyb3JMb2dnaW5nfHxjb25zb2xlLmVycm9yKGIpfWNhdGNoKGQpe2QmJmQuc3VwcHJlc3NSZWFjdEVycm9yTG9nZ2luZ3x8Y29uc29sZS5lcnJvcihkKX19XG5mdW5jdGlvbiBkZihhLGIsYyxkLGUpe2Z1bmN0aW9uIGYoYSl7dmFyIGM9YS5yZWY7aWYobnVsbCE9PWMpaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMpdHJ5e2MobnVsbCl9Y2F0Y2godCl7YihhLHQpfWVsc2UgYy5jdXJyZW50PW51bGx9ZnVuY3Rpb24gaChhKXtcImZ1bmN0aW9uXCI9PT10eXBlb2YgSmUmJkplKGEpO3N3aXRjaChhLnRhZyl7Y2FzZSAyOmYoYSk7dmFyIGM9YS5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuY29tcG9uZW50V2lsbFVubW91bnQpdHJ5e2MucHJvcHM9YS5tZW1vaXplZFByb3BzLGMuc3RhdGU9YS5tZW1vaXplZFN0YXRlLGMuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaCh0KXtiKGEsdCl9YnJlYWs7Y2FzZSA1OmYoYSk7YnJlYWs7Y2FzZSA3OmcoYS5zdGF0ZU5vZGUpO2JyZWFrO2Nhc2UgNDpwJiZ2KGEpfX1mdW5jdGlvbiBnKGEpe2Zvcih2YXIgYj1hOzspaWYoaChiKSxudWxsPT09Yi5jaGlsZHx8cCYmND09PWIudGFnKXtpZihiPT09XG5hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iW1wicmV0dXJuXCJdfHxiW1wicmV0dXJuXCJdPT09YSlyZXR1cm47Yj1iW1wicmV0dXJuXCJdfWIuc2libGluZ1tcInJldHVyblwiXT1iW1wicmV0dXJuXCJdO2I9Yi5zaWJsaW5nfWVsc2UgYi5jaGlsZFtcInJldHVyblwiXT1iLGI9Yi5jaGlsZH1mdW5jdGlvbiBrKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfWZ1bmN0aW9uIHYoYSl7Zm9yKHZhciBiPWEsYz0hMSxkPXZvaWQgMCxlPXZvaWQgMDs7KXtpZighYyl7Yz1iW1wicmV0dXJuXCJdO2E6Zm9yKDs7KXtudWxsPT09Yz9EKFwiMTYwXCIpOnZvaWQgMDtzd2l0Y2goYy50YWcpe2Nhc2UgNTpkPWMuc3RhdGVOb2RlO2U9ITE7YnJlYWsgYTtjYXNlIDM6ZD1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2U9ITA7YnJlYWsgYTtjYXNlIDQ6ZD1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2U9ITA7YnJlYWsgYX1jPWNbXCJyZXR1cm5cIl19Yz0hMH1pZig1PT09XG5iLnRhZ3x8Nj09PWIudGFnKWcoYiksZT9TKGQsYi5zdGF0ZU5vZGUpOlIoZCxiLnN0YXRlTm9kZSk7ZWxzZSBpZig0PT09Yi50YWc/ZD1iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOmgoYiksbnVsbCE9PWIuY2hpbGQpe2IuY2hpbGRbXCJyZXR1cm5cIl09YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWJbXCJyZXR1cm5cIl18fGJbXCJyZXR1cm5cIl09PT1hKXJldHVybjtiPWJbXCJyZXR1cm5cIl07ND09PWIudGFnJiYoYz0hMSl9Yi5zaWJsaW5nW1wicmV0dXJuXCJdPWJbXCJyZXR1cm5cIl07Yj1iLnNpYmxpbmd9fXZhciBsPWEuZ2V0UHVibGljSW5zdGFuY2UscD1hLm11dGF0aW9uO2E9YS5wZXJzaXN0ZW5jZTtwfHwoYT9EKFwiMjM1XCIpOkQoXCIyMzZcIikpO3ZhciB6PXAuY29tbWl0TW91bnQsQj1wLmNvbW1pdFVwZGF0ZSxyPXAucmVzZXRUZXh0Q29udGVudCxRPXAuY29tbWl0VGV4dFVwZGF0ZSxuPXAuYXBwZW5kQ2hpbGQsXG54PXAuYXBwZW5kQ2hpbGRUb0NvbnRhaW5lcixZPXAuaW5zZXJ0QmVmb3JlLEc9cC5pbnNlcnRJbkNvbnRhaW5lckJlZm9yZSxSPXAucmVtb3ZlQ2hpbGQsUz1wLnJlbW92ZUNoaWxkRnJvbUNvbnRhaW5lcjtyZXR1cm57Y29tbWl0QmVmb3JlTXV0YXRpb25MaWZlQ3ljbGVzOmZ1bmN0aW9uKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDI6aWYoYi5lZmZlY3RUYWcmMjA0OCYmbnVsbCE9PWEpe3ZhciBjPWEubWVtb2l6ZWRQcm9wcyxkPWEubWVtb2l6ZWRTdGF0ZTthPWIuc3RhdGVOb2RlO2EucHJvcHM9Yi5tZW1vaXplZFByb3BzO2Euc3RhdGU9Yi5tZW1vaXplZFN0YXRlO2I9YS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShjLGQpO2EuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGU9Yn1icmVhaztjYXNlIDM6Y2FzZSA1OmNhc2UgNjpjYXNlIDQ6YnJlYWs7ZGVmYXVsdDpEKFwiMTYzXCIpfX0sY29tbWl0UmVzZXRUZXh0Q29udGVudDpmdW5jdGlvbihhKXtyKGEuc3RhdGVOb2RlKX0sXG5jb21taXRQbGFjZW1lbnQ6ZnVuY3Rpb24oYSl7YTp7Zm9yKHZhciBiPWFbXCJyZXR1cm5cIl07bnVsbCE9PWI7KXtpZihrKGIpKXt2YXIgYz1iO2JyZWFrIGF9Yj1iW1wicmV0dXJuXCJdfUQoXCIxNjBcIik7Yz12b2lkIDB9dmFyIGQ9Yj12b2lkIDA7c3dpdGNoKGMudGFnKXtjYXNlIDU6Yj1jLnN0YXRlTm9kZTtkPSExO2JyZWFrO2Nhc2UgMzpiPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztjYXNlIDQ6Yj1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7ZGVmYXVsdDpEKFwiMTYxXCIpfWMuZWZmZWN0VGFnJjE2JiYocihiKSxjLmVmZmVjdFRhZyY9LTE3KTthOmI6Zm9yKGM9YTs7KXtmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Y1tcInJldHVyblwiXXx8ayhjW1wicmV0dXJuXCJdKSl7Yz1udWxsO2JyZWFrIGF9Yz1jW1wicmV0dXJuXCJdfWMuc2libGluZ1tcInJldHVyblwiXT1jW1wicmV0dXJuXCJdO2ZvcihjPWMuc2libGluZzs1IT09Yy50YWcmJjYhPT1cbmMudGFnOyl7aWYoYy5lZmZlY3RUYWcmMiljb250aW51ZSBiO2lmKG51bGw9PT1jLmNoaWxkfHw0PT09Yy50YWcpY29udGludWUgYjtlbHNlIGMuY2hpbGRbXCJyZXR1cm5cIl09YyxjPWMuY2hpbGR9aWYoIShjLmVmZmVjdFRhZyYyKSl7Yz1jLnN0YXRlTm9kZTticmVhayBhfX1mb3IodmFyIGU9YTs7KXtpZig1PT09ZS50YWd8fDY9PT1lLnRhZyljP2Q/RyhiLGUuc3RhdGVOb2RlLGMpOlkoYixlLnN0YXRlTm9kZSxjKTpkP3goYixlLnN0YXRlTm9kZSk6bihiLGUuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1lLnRhZyYmbnVsbCE9PWUuY2hpbGQpe2UuY2hpbGRbXCJyZXR1cm5cIl09ZTtlPWUuY2hpbGQ7Y29udGludWV9aWYoZT09PWEpYnJlYWs7Zm9yKDtudWxsPT09ZS5zaWJsaW5nOyl7aWYobnVsbD09PWVbXCJyZXR1cm5cIl18fGVbXCJyZXR1cm5cIl09PT1hKXJldHVybjtlPWVbXCJyZXR1cm5cIl19ZS5zaWJsaW5nW1wicmV0dXJuXCJdPWVbXCJyZXR1cm5cIl07ZT1lLnNpYmxpbmd9fSxjb21taXREZWxldGlvbjpmdW5jdGlvbihhKXt2KGEpO1xuYVtcInJldHVyblwiXT1udWxsO2EuY2hpbGQ9bnVsbDthLmFsdGVybmF0ZSYmKGEuYWx0ZXJuYXRlLmNoaWxkPW51bGwsYS5hbHRlcm5hdGVbXCJyZXR1cm5cIl09bnVsbCl9LGNvbW1pdFdvcms6ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMjpicmVhaztjYXNlIDU6dmFyIGM9Yi5zdGF0ZU5vZGU7aWYobnVsbCE9Yyl7dmFyIGQ9Yi5tZW1vaXplZFByb3BzO2E9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOmQ7dmFyIGU9Yi50eXBlLGY9Yi51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPW51bGw7bnVsbCE9PWYmJkIoYyxmLGUsYSxkLGIpfWJyZWFrO2Nhc2UgNjpudWxsPT09Yi5zdGF0ZU5vZGU/RChcIjE2MlwiKTp2b2lkIDA7Yz1iLm1lbW9pemVkUHJvcHM7UShiLnN0YXRlTm9kZSxudWxsIT09YT9hLm1lbW9pemVkUHJvcHM6YyxjKTticmVhaztjYXNlIDM6YnJlYWs7ZGVmYXVsdDpEKFwiMTYzXCIpfX0sY29tbWl0TGlmZUN5Y2xlczpmdW5jdGlvbihhLGIsYyl7c3dpdGNoKGMudGFnKXtjYXNlIDI6YT1cbmMuc3RhdGVOb2RlO2lmKGMuZWZmZWN0VGFnJjQpaWYobnVsbD09PWIpYS5wcm9wcz1jLm1lbW9pemVkUHJvcHMsYS5zdGF0ZT1jLm1lbW9pemVkU3RhdGUsYS5jb21wb25lbnREaWRNb3VudCgpO2Vsc2V7dmFyIGQ9Yi5tZW1vaXplZFByb3BzO2I9Yi5tZW1vaXplZFN0YXRlO2EucHJvcHM9Yy5tZW1vaXplZFByb3BzO2Euc3RhdGU9Yy5tZW1vaXplZFN0YXRlO2EuY29tcG9uZW50RGlkVXBkYXRlKGQsYixhLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlKX1jPWMudXBkYXRlUXVldWU7bnVsbCE9PWMmJlNlKGMsYSk7YnJlYWs7Y2FzZSAzOmI9Yy51cGRhdGVRdWV1ZTtpZihudWxsIT09Yil7YT1udWxsO2lmKG51bGwhPT1jLmNoaWxkKXN3aXRjaChjLmNoaWxkLnRhZyl7Y2FzZSA1OmE9bChjLmNoaWxkLnN0YXRlTm9kZSk7YnJlYWs7Y2FzZSAyOmE9Yy5jaGlsZC5zdGF0ZU5vZGV9U2UoYixhKX1icmVhaztjYXNlIDU6YT1jLnN0YXRlTm9kZTtudWxsPT09YiYmYy5lZmZlY3RUYWcmXG40JiZ6KGEsYy50eXBlLGMubWVtb2l6ZWRQcm9wcyxjKTticmVhaztjYXNlIDY6YnJlYWs7Y2FzZSA0OmJyZWFrO2RlZmF1bHQ6RChcIjE2M1wiKX19LGNvbW1pdEVycm9yTG9nZ2luZzpmdW5jdGlvbihhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSAyOnZhciBjPWEudHlwZTtiPWEuc3RhdGVOb2RlO3ZhciBkPWEudXBkYXRlUXVldWU7bnVsbD09PWR8fG51bGw9PT1kLmNhcHR1cmVkVmFsdWVzP0QoXCIyNjRcIik6dm9pZCAwO3ZhciBmPWQuY2FwdHVyZWRWYWx1ZXM7ZC5jYXB0dXJlZFZhbHVlcz1udWxsO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21DYXRjaCYmZShiKTtiLnByb3BzPWEubWVtb2l6ZWRQcm9wcztiLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtmb3IoYz0wO2M8Zi5sZW5ndGg7YysrKXtkPWZbY107dmFyIGw9ZC52YWx1ZSxnPWQuc3RhY2s7Y2YoYSxkKTtiLmNvbXBvbmVudERpZENhdGNoKGwse2NvbXBvbmVudFN0YWNrOm51bGwhPT1nP2c6XCJcIn0pfWJyZWFrO1xuY2FzZSAzOmM9YS51cGRhdGVRdWV1ZTtudWxsPT09Y3x8bnVsbD09PWMuY2FwdHVyZWRWYWx1ZXM/RChcIjI2NFwiKTp2b2lkIDA7Zj1jLmNhcHR1cmVkVmFsdWVzO2MuY2FwdHVyZWRWYWx1ZXM9bnVsbDtmb3IoYz0wO2M8Zi5sZW5ndGg7YysrKWQ9ZltjXSxjZihhLGQpLGIoZC52YWx1ZSk7YnJlYWs7ZGVmYXVsdDpEKFwiMjY1XCIpfX0sY29tbWl0QXR0YWNoUmVmOmZ1bmN0aW9uKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKXt2YXIgYz1hLnN0YXRlTm9kZTtzd2l0Y2goYS50YWcpe2Nhc2UgNTphPWwoYyk7YnJlYWs7ZGVmYXVsdDphPWN9XCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihhKTpiLmN1cnJlbnQ9YX19LGNvbW1pdERldGFjaFJlZjpmdW5jdGlvbihhKXthPWEucmVmO251bGwhPT1hJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YShudWxsKTphLmN1cnJlbnQ9bnVsbCl9fX12YXIgZWY9e307XG5mdW5jdGlvbiBmZihhLGIpe2Z1bmN0aW9uIGMoYSl7YT09PWVmP0QoXCIxNzRcIik6dm9pZCAwO3JldHVybiBhfXZhciBkPWEuZ2V0Q2hpbGRIb3N0Q29udGV4dCxlPWEuZ2V0Um9vdEhvc3RDb250ZXh0O2E9Yi5jcmVhdGVDdXJzb3I7dmFyIGY9Yi5wdXNoLGg9Yi5wb3AsZz1hKGVmKSxrPWEoZWYpLHY9YShlZik7cmV0dXJue2dldEhvc3RDb250ZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIGMoZy5jdXJyZW50KX0sZ2V0Um9vdEhvc3RDb250YWluZXI6ZnVuY3Rpb24oKXtyZXR1cm4gYyh2LmN1cnJlbnQpfSxwb3BIb3N0Q29udGFpbmVyOmZ1bmN0aW9uKGEpe2goZyxhKTtoKGssYSk7aCh2LGEpfSxwb3BIb3N0Q29udGV4dDpmdW5jdGlvbihhKXtrLmN1cnJlbnQ9PT1hJiYoaChnLGEpLGgoayxhKSl9LHB1c2hIb3N0Q29udGFpbmVyOmZ1bmN0aW9uKGEsYil7Zih2LGIsYSk7ZihrLGEsYSk7ZihnLGVmLGEpO2I9ZShiKTtoKGcsYSk7ZihnLGIsYSl9LHB1c2hIb3N0Q29udGV4dDpmdW5jdGlvbihhKXt2YXIgYj1cbmModi5jdXJyZW50KSxlPWMoZy5jdXJyZW50KTtiPWQoZSxhLnR5cGUsYik7ZSE9PWImJihmKGssYSxhKSxmKGcsYixhKSl9fX1cbmZ1bmN0aW9uIGdmKGEpe2Z1bmN0aW9uIGIoYSxiKXt2YXIgYz1uZXcgeGUoNSxudWxsLG51bGwsMCk7Yy50eXBlPVwiREVMRVRFRFwiO2Muc3RhdGVOb2RlPWI7Y1tcInJldHVyblwiXT1hO2MuZWZmZWN0VGFnPTg7bnVsbCE9PWEubGFzdEVmZmVjdD8oYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YyxhLmxhc3RFZmZlY3Q9Yyk6YS5maXJzdEVmZmVjdD1hLmxhc3RFZmZlY3Q9Y31mdW5jdGlvbiBjKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDU6cmV0dXJuIGI9ZihiLGEudHlwZSxhLnBlbmRpbmdQcm9wcyksbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgNjpyZXR1cm4gYj1oKGIsYS5wZW5kaW5nUHJvcHMpLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBkKGEpe2ZvcihhPWFbXCJyZXR1cm5cIl07bnVsbCE9PWEmJjUhPT1hLnRhZyYmMyE9PWEudGFnOylhPWFbXCJyZXR1cm5cIl07cD1hfXZhciBlPWEuc2hvdWxkU2V0VGV4dENvbnRlbnQ7XG5hPWEuaHlkcmF0aW9uO2lmKCFhKXJldHVybntlbnRlckh5ZHJhdGlvblN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuITF9LHJlc2V0SHlkcmF0aW9uU3RhdGU6ZnVuY3Rpb24oKXt9LHRyeVRvQ2xhaW1OZXh0SHlkcmF0YWJsZUluc3RhbmNlOmZ1bmN0aW9uKCl7fSxwcmVwYXJlVG9IeWRyYXRlSG9zdEluc3RhbmNlOmZ1bmN0aW9uKCl7RChcIjE3NVwiKX0scHJlcGFyZVRvSHlkcmF0ZUhvc3RUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oKXtEKFwiMTc2XCIpfSxwb3BIeWRyYXRpb25TdGF0ZTpmdW5jdGlvbigpe3JldHVybiExfX07dmFyIGY9YS5jYW5IeWRyYXRlSW5zdGFuY2UsaD1hLmNhbkh5ZHJhdGVUZXh0SW5zdGFuY2UsZz1hLmdldE5leHRIeWRyYXRhYmxlU2libGluZyxrPWEuZ2V0Rmlyc3RIeWRyYXRhYmxlQ2hpbGQsdj1hLmh5ZHJhdGVJbnN0YW5jZSxsPWEuaHlkcmF0ZVRleHRJbnN0YW5jZSxwPW51bGwsej1udWxsLEI9ITE7cmV0dXJue2VudGVySHlkcmF0aW9uU3RhdGU6ZnVuY3Rpb24oYSl7ej1cbmsoYS5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7cD1hO3JldHVybiBCPSEwfSxyZXNldEh5ZHJhdGlvblN0YXRlOmZ1bmN0aW9uKCl7ej1wPW51bGw7Qj0hMX0sdHJ5VG9DbGFpbU5leHRIeWRyYXRhYmxlSW5zdGFuY2U6ZnVuY3Rpb24oYSl7aWYoQil7dmFyIGQ9ejtpZihkKXtpZighYyhhLGQpKXtkPWcoZCk7aWYoIWR8fCFjKGEsZCkpe2EuZWZmZWN0VGFnfD0yO0I9ITE7cD1hO3JldHVybn1iKHAseil9cD1hO3o9ayhkKX1lbHNlIGEuZWZmZWN0VGFnfD0yLEI9ITEscD1hfX0scHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZTpmdW5jdGlvbihhLGIsYyl7Yj12KGEuc3RhdGVOb2RlLGEudHlwZSxhLm1lbW9pemVkUHJvcHMsYixjLGEpO2EudXBkYXRlUXVldWU9YjtyZXR1cm4gbnVsbCE9PWI/ITA6ITF9LHByZXBhcmVUb0h5ZHJhdGVIb3N0VGV4dEluc3RhbmNlOmZ1bmN0aW9uKGEpe3JldHVybiBsKGEuc3RhdGVOb2RlLGEubWVtb2l6ZWRQcm9wcyxhKX0scG9wSHlkcmF0aW9uU3RhdGU6ZnVuY3Rpb24oYSl7aWYoYSE9PVxucClyZXR1cm4hMTtpZighQilyZXR1cm4gZChhKSxCPSEwLCExO3ZhciBjPWEudHlwZTtpZig1IT09YS50YWd8fFwiaGVhZFwiIT09YyYmXCJib2R5XCIhPT1jJiYhZShjLGEubWVtb2l6ZWRQcm9wcykpZm9yKGM9ejtjOyliKGEsYyksYz1nKGMpO2QoYSk7ej1wP2coYS5zdGF0ZU5vZGUpOm51bGw7cmV0dXJuITB9fX1cbmZ1bmN0aW9uIGhmKGEpe2Z1bmN0aW9uIGIoYSxiLGMpe2E9YS5zdGF0ZU5vZGU7YS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWI7YS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1jfWZ1bmN0aW9uIGMoYSl7cmV0dXJuIDI9PT1hLnRhZyYmbnVsbCE9YS50eXBlLmNoaWxkQ29udGV4dFR5cGVzfWZ1bmN0aW9uIGQoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZSxkPWEudHlwZS5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGI7Yz1jLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBjKWUgaW4gZD92b2lkIDA6RChcIjEwOFwiLEFjKGEpfHxcIlVua25vd25cIixlKTtyZXR1cm4gQSh7fSxiLGMpfXZhciBlPWEuY3JlYXRlQ3Vyc29yLGY9YS5wdXNoLGg9YS5wb3AsZz1lKGthKSxrPWUoITEpLHY9a2E7cmV0dXJue2dldFVubWFza2VkQ29udGV4dDpmdW5jdGlvbihhKXtyZXR1cm4gYyhhKT9cbnY6Zy5jdXJyZW50fSxjYWNoZUNvbnRleHQ6YixnZXRNYXNrZWRDb250ZXh0OmZ1bmN0aW9uKGEsYyl7dmFyIGQ9YS50eXBlLmNvbnRleHRUeXBlcztpZighZClyZXR1cm4ga2E7dmFyIGU9YS5zdGF0ZU5vZGU7aWYoZSYmZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YylyZXR1cm4gZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZj17fSxnO2ZvcihnIGluIGQpZltnXT1jW2ddO2UmJmIoYSxjLGYpO3JldHVybiBmfSxoYXNDb250ZXh0Q2hhbmdlZDpmdW5jdGlvbigpe3JldHVybiBrLmN1cnJlbnR9LGlzQ29udGV4dENvbnN1bWVyOmZ1bmN0aW9uKGEpe3JldHVybiAyPT09YS50YWcmJm51bGwhPWEudHlwZS5jb250ZXh0VHlwZXN9LGlzQ29udGV4dFByb3ZpZGVyOmMscG9wQ29udGV4dFByb3ZpZGVyOmZ1bmN0aW9uKGEpe2MoYSkmJihoKGssYSksaChnLGEpKX0scG9wVG9wTGV2ZWxDb250ZXh0T2JqZWN0OmZ1bmN0aW9uKGEpe2goayxcbmEpO2goZyxhKX0scHVzaFRvcExldmVsQ29udGV4dE9iamVjdDpmdW5jdGlvbihhLGIsYyl7bnVsbCE9Zy5jdXJzb3I/RChcIjE2OFwiKTp2b2lkIDA7ZihnLGIsYSk7ZihrLGMsYSl9LHByb2Nlc3NDaGlsZENvbnRleHQ6ZCxwdXNoQ29udGV4dFByb3ZpZGVyOmZ1bmN0aW9uKGEpe2lmKCFjKGEpKXJldHVybiExO3ZhciBiPWEuc3RhdGVOb2RlO2I9YiYmYi5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dHx8a2E7dj1nLmN1cnJlbnQ7ZihnLGIsYSk7ZihrLGsuY3VycmVudCxhKTtyZXR1cm4hMH0saW52YWxpZGF0ZUNvbnRleHRQcm92aWRlcjpmdW5jdGlvbihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2M/dm9pZCAwOkQoXCIxNjlcIik7aWYoYil7dmFyIGU9ZChhLHYpO2MuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9ZTtoKGssYSk7aChnLGEpO2YoZyxlLGEpfWVsc2UgaChrLGEpO2YoayxiLGEpfSxmaW5kQ3VycmVudFVubWFza2VkQ29udGV4dDpmdW5jdGlvbihhKXtmb3IoMiE9PVxueGQoYSl8fDIhPT1hLnRhZz9EKFwiMTcwXCIpOnZvaWQgMDszIT09YS50YWc7KXtpZihjKGEpKXJldHVybiBhLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDsoYT1hW1wicmV0dXJuXCJdKT92b2lkIDA6RChcIjE3MVwiKX1yZXR1cm4gYS5zdGF0ZU5vZGUuY29udGV4dH19fVxuZnVuY3Rpb24gamYoYSl7dmFyIGI9YS5jcmVhdGVDdXJzb3IsYz1hLnB1c2gsZD1hLnBvcCxlPWIobnVsbCksZj1iKG51bGwpLGg9YigwKTtyZXR1cm57cHVzaFByb3ZpZGVyOmZ1bmN0aW9uKGEpe3ZhciBiPWEudHlwZS5fY29udGV4dDtjKGgsYi5fY2hhbmdlZEJpdHMsYSk7YyhmLGIuX2N1cnJlbnRWYWx1ZSxhKTtjKGUsYSxhKTtiLl9jdXJyZW50VmFsdWU9YS5wZW5kaW5nUHJvcHMudmFsdWU7Yi5fY2hhbmdlZEJpdHM9YS5zdGF0ZU5vZGV9LHBvcFByb3ZpZGVyOmZ1bmN0aW9uKGEpe3ZhciBiPWguY3VycmVudCxjPWYuY3VycmVudDtkKGUsYSk7ZChmLGEpO2QoaCxhKTthPWEudHlwZS5fY29udGV4dDthLl9jdXJyZW50VmFsdWU9YzthLl9jaGFuZ2VkQml0cz1ifX19XG5mdW5jdGlvbiBrZigpe3ZhciBhPVtdLGI9LTE7cmV0dXJue2NyZWF0ZUN1cnNvcjpmdW5jdGlvbihhKXtyZXR1cm57Y3VycmVudDphfX0saXNFbXB0eTpmdW5jdGlvbigpe3JldHVybi0xPT09Yn0scG9wOmZ1bmN0aW9uKGMpezA+Ynx8KGMuY3VycmVudD1hW2JdLGFbYl09bnVsbCxiLS0pfSxwdXNoOmZ1bmN0aW9uKGMsZCl7YisrO2FbYl09Yy5jdXJyZW50O2MuY3VycmVudD1kfSxjaGVja1RoYXRTdGFja0lzRW1wdHk6ZnVuY3Rpb24oKXt9LHJlc2V0U3RhY2tBZnRlckZhdGFsRXJyb3JJbkRldjpmdW5jdGlvbigpe319fVxuZnVuY3Rpb24gbGYoYSl7ZnVuY3Rpb24gYigpe2lmKG51bGwhPT1JKWZvcih2YXIgYT1JW1wicmV0dXJuXCJdO251bGwhPT1hOylMYyhhKSxhPWFbXCJyZXR1cm5cIl07WWE9bnVsbDtaPTA7ST1udWxsO05jPSExfWZ1bmN0aW9uIGMoYSl7cmV0dXJuIG51bGwhPT15YSYmeWEuaGFzKGEpfWZ1bmN0aW9uIGQoYSl7Zm9yKDs7KXt2YXIgYj1hLmFsdGVybmF0ZSxjPWFbXCJyZXR1cm5cIl0sZD1hLnNpYmxpbmc7aWYoMD09PShhLmVmZmVjdFRhZyY1MTIpKXtiPUNiKGIsYSxaKTt2YXIgZT1hO2lmKDEwNzM3NDE4MjM9PT1afHwxMDczNzQxODIzIT09ZS5leHBpcmF0aW9uVGltZSl7Yjpzd2l0Y2goZS50YWcpe2Nhc2UgMzpjYXNlIDI6dmFyIGY9ZS51cGRhdGVRdWV1ZTtmPW51bGw9PT1mPzA6Zi5leHBpcmF0aW9uVGltZTticmVhayBiO2RlZmF1bHQ6Zj0wfWZvcih2YXIgZz1lLmNoaWxkO251bGwhPT1nOykwIT09Zy5leHBpcmF0aW9uVGltZSYmKDA9PT1mfHxmPmcuZXhwaXJhdGlvblRpbWUpJiYoZj1cbmcuZXhwaXJhdGlvblRpbWUpLGc9Zy5zaWJsaW5nO2UuZXhwaXJhdGlvblRpbWU9Zn1pZihudWxsIT09YilyZXR1cm4gYjtudWxsIT09YyYmMD09PShjLmVmZmVjdFRhZyY1MTIpJiYobnVsbD09PWMuZmlyc3RFZmZlY3QmJihjLmZpcnN0RWZmZWN0PWEuZmlyc3RFZmZlY3QpLG51bGwhPT1hLmxhc3RFZmZlY3QmJihudWxsIT09Yy5sYXN0RWZmZWN0JiYoYy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YS5maXJzdEVmZmVjdCksYy5sYXN0RWZmZWN0PWEubGFzdEVmZmVjdCksMTxhLmVmZmVjdFRhZyYmKG51bGwhPT1jLmxhc3RFZmZlY3Q/Yy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YTpjLmZpcnN0RWZmZWN0PWEsYy5sYXN0RWZmZWN0PWEpKTtpZihudWxsIT09ZClyZXR1cm4gZDtpZihudWxsIT09YylhPWM7ZWxzZXtOYz0hMDticmVha319ZWxzZXthPUtjKGEpO2lmKG51bGwhPT1hKXJldHVybiBhLmVmZmVjdFRhZyY9MjU1OSxhO251bGwhPT1jJiYoYy5maXJzdEVmZmVjdD1jLmxhc3RFZmZlY3Q9XG5udWxsLGMuZWZmZWN0VGFnfD01MTIpO2lmKG51bGwhPT1kKXJldHVybiBkO2lmKG51bGwhPT1jKWE9YztlbHNlIGJyZWFrfX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBlKGEpe3ZhciBiPVdhKGEuYWx0ZXJuYXRlLGEsWik7bnVsbD09PWImJihiPWQoYSkpO25jLmN1cnJlbnQ9bnVsbDtyZXR1cm4gYn1mdW5jdGlvbiBmKGEsYyxmKXtjYT9EKFwiMjQzXCIpOnZvaWQgMDtjYT0hMDtpZihjIT09Wnx8YSE9PVlhfHxudWxsPT09SSliKCksWWE9YSxaPWMsST16ZShZYS5jdXJyZW50LG51bGwsWiksYS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9MDt2YXIgZz0hMTtkb3t0cnl7aWYoZilmb3IoO251bGwhPT1JJiYhUygpOylJPWUoSSk7ZWxzZSBmb3IoO251bGwhPT1JOylJPWUoSSl9Y2F0Y2goT2Mpe2lmKG51bGw9PT1JKXtnPSEwO3EoT2MpO2JyZWFrfWY9STt2YXIgaD1mW1wicmV0dXJuXCJdO2lmKG51bGw9PT1oKXtnPSEwO3EoT2MpO2JyZWFrfUpjKGgsZixPYyk7ST1kKGYpfWJyZWFrfXdoaWxlKDEpO1xuY2E9ITE7aWYoZ3x8bnVsbCE9PUkpcmV0dXJuIG51bGw7aWYoTmMpcmV0dXJuIGEucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPWMsYS5jdXJyZW50LmFsdGVybmF0ZTtEKFwiMjYyXCIpfWZ1bmN0aW9uIGgoYSxiLGMsZCl7YT17dmFsdWU6Yyxzb3VyY2U6YSxzdGFjazpCYyhhKX07UGUoYix7ZXhwaXJhdGlvblRpbWU6ZCxwYXJ0aWFsU3RhdGU6bnVsbCxjYWxsYmFjazpudWxsLGlzUmVwbGFjZTohMSxpc0ZvcmNlZDohMSxjYXB0dXJlZFZhbHVlOmEsbmV4dDpudWxsfSk7dihiLGQpfWZ1bmN0aW9uIGcoYSxiKXthOntjYSYmIVphP0QoXCIyNjNcIik6dm9pZCAwO2Zvcih2YXIgZD1hW1wicmV0dXJuXCJdO251bGwhPT1kOyl7c3dpdGNoKGQudGFnKXtjYXNlIDI6dmFyIGU9ZC5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tQ2F0Y2h8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudERpZENhdGNoJiYhYyhlKSl7aChhLGQsYixcbjEpO2E9dm9pZCAwO2JyZWFrIGF9YnJlYWs7Y2FzZSAzOmgoYSxkLGIsMSk7YT12b2lkIDA7YnJlYWsgYX1kPWRbXCJyZXR1cm5cIl19Mz09PWEudGFnJiZoKGEsYSxiLDEpO2E9dm9pZCAwfXJldHVybiBhfWZ1bmN0aW9uIGsoYSl7YT0wIT09aWE/aWE6Y2E/WmE/MTpaOmEubW9kZSYxP3phPzEwKigoKGwoKSsxNSkvMTB8MCkrMSk6MjUqKCgobCgpKzUwMCkvMjV8MCkrMSk6MTt6YSYmKDA9PT1kYXx8YT5kYSkmJihkYT1hKTtyZXR1cm4gYX1mdW5jdGlvbiB2KGEsYyl7YTp7Zm9yKDtudWxsIT09YTspe2lmKDA9PT1hLmV4cGlyYXRpb25UaW1lfHxhLmV4cGlyYXRpb25UaW1lPmMpYS5leHBpcmF0aW9uVGltZT1jO251bGwhPT1hLmFsdGVybmF0ZSYmKDA9PT1hLmFsdGVybmF0ZS5leHBpcmF0aW9uVGltZXx8YS5hbHRlcm5hdGUuZXhwaXJhdGlvblRpbWU+YykmJihhLmFsdGVybmF0ZS5leHBpcmF0aW9uVGltZT1jKTtpZihudWxsPT09YVtcInJldHVyblwiXSlpZigzPT09YS50YWcpe3ZhciBkPVxuYS5zdGF0ZU5vZGU7IWNhJiYwIT09WiYmYzxaJiZiKCk7Y2EmJiFaYSYmWWE9PT1kfHxCKGQsYyk7RmI+eGcmJkQoXCIxODVcIil9ZWxzZXtjPXZvaWQgMDticmVhayBhfWE9YVtcInJldHVyblwiXX1jPXZvaWQgMH1yZXR1cm4gY31mdW5jdGlvbiBsKCl7eWU9SWMoKS1QYztyZXR1cm4geWc9KHllLzEwfDApKzJ9ZnVuY3Rpb24gcChhLGIsYyxkLGUpe3ZhciBmPWlhO2lhPTE7dHJ5e3JldHVybiBhKGIsYyxkLGUpfWZpbmFsbHl7aWE9Zn19ZnVuY3Rpb24geihhKXtpZigwIT09R2Ipe2lmKGE+R2IpcmV0dXJuO21nKFFjKX12YXIgYj1JYygpLVBjO0diPWE7UWM9bGcoUSx7dGltZW91dDoxMCooYS0yKS1ifSl9ZnVuY3Rpb24gQihhLGIpe2lmKG51bGw9PT1hLm5leHRTY2hlZHVsZWRSb290KWEucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9YixudWxsPT09Sz8obGE9Sz1hLGEubmV4dFNjaGVkdWxlZFJvb3Q9YSk6KEs9Sy5uZXh0U2NoZWR1bGVkUm9vdD1hLEsubmV4dFNjaGVkdWxlZFJvb3Q9bGEpO1xuZWxzZXt2YXIgYz1hLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lO2lmKDA9PT1jfHxiPGMpYS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT1ifVR8fChKP0hiJiYoYWE9YSxQPTEsRyhhLDEsITEpKToxPT09Yj9uKCk6eihiKSl9ZnVuY3Rpb24gcigpe3ZhciBhPTAsYj1udWxsO2lmKG51bGwhPT1LKWZvcih2YXIgYz1LLGQ9bGE7bnVsbCE9PWQ7KXt2YXIgZT1kLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lO2lmKDA9PT1lKXtudWxsPT09Y3x8bnVsbD09PUs/RChcIjI0NFwiKTp2b2lkIDA7aWYoZD09PWQubmV4dFNjaGVkdWxlZFJvb3Qpe2xhPUs9ZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2JyZWFrfWVsc2UgaWYoZD09PWxhKWxhPWU9ZC5uZXh0U2NoZWR1bGVkUm9vdCxLLm5leHRTY2hlZHVsZWRSb290PWUsZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2Vsc2UgaWYoZD09PUspe0s9YztLLm5leHRTY2hlZHVsZWRSb290PWxhO2QubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDticmVha31lbHNlIGMubmV4dFNjaGVkdWxlZFJvb3Q9XG5kLm5leHRTY2hlZHVsZWRSb290LGQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDtkPWMubmV4dFNjaGVkdWxlZFJvb3R9ZWxzZXtpZigwPT09YXx8ZTxhKWE9ZSxiPWQ7aWYoZD09PUspYnJlYWs7Yz1kO2Q9ZC5uZXh0U2NoZWR1bGVkUm9vdH19Yz1hYTtudWxsIT09YyYmYz09PWImJjE9PT1hP0ZiKys6RmI9MDthYT1iO1A9YX1mdW5jdGlvbiBRKGEpe3goMCwhMCxhKX1mdW5jdGlvbiBuKCl7eCgxLCExLG51bGwpfWZ1bmN0aW9uIHgoYSxiLGMpeyRhPWM7cigpO2lmKGIpZm9yKDtudWxsIT09YWEmJjAhPT1QJiYoMD09PWF8fGE+PVApJiYoIUlifHxsKCk+PVApOylHKGFhLFAsIUliKSxyKCk7ZWxzZSBmb3IoO251bGwhPT1hYSYmMCE9PVAmJigwPT09YXx8YT49UCk7KUcoYWEsUCwhMSkscigpO251bGwhPT0kYSYmKEdiPTAsUWM9LTEpOzAhPT1QJiZ6KFApOyRhPW51bGw7SWI9ITE7WSgpfWZ1bmN0aW9uIFkoKXtGYj0wO2lmKG51bGwhPT1BYSl7dmFyIGE9QWE7QWE9bnVsbDtmb3IodmFyIGI9XG4wO2I8YS5sZW5ndGg7YisrKXt2YXIgYz1hW2JdO3RyeXtjLl9vbkNvbXBsZXRlKCl9Y2F0Y2god2cpe0JhfHwoQmE9ITAsSmI9d2cpfX19aWYoQmEpdGhyb3cgYT1KYixKYj1udWxsLEJhPSExLGE7fWZ1bmN0aW9uIEcoYSxiLGMpe1Q/RChcIjI0NVwiKTp2b2lkIDA7VD0hMDtjPyhjPWEuZmluaXNoZWRXb3JrLG51bGwhPT1jP1IoYSxjLGIpOihhLmZpbmlzaGVkV29yaz1udWxsLGM9ZihhLGIsITApLG51bGwhPT1jJiYoUygpP2EuZmluaXNoZWRXb3JrPWM6UihhLGMsYikpKSk6KGM9YS5maW5pc2hlZFdvcmssbnVsbCE9PWM/UihhLGMsYik6KGEuZmluaXNoZWRXb3JrPW51bGwsYz1mKGEsYiwhMSksbnVsbCE9PWMmJlIoYSxjLGIpKSk7VD0hMX1mdW5jdGlvbiBSKGEsYixjKXt2YXIgZD1hLmZpcnN0QmF0Y2g7aWYobnVsbCE9PWQmJmQuX2V4cGlyYXRpb25UaW1lPD1jJiYobnVsbD09PUFhP0FhPVtkXTpBYS5wdXNoKGQpLGQuX2RlZmVyKSl7YS5maW5pc2hlZFdvcms9YjthLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPVxuMDtyZXR1cm59YS5maW5pc2hlZFdvcms9bnVsbDtaYT1jYT0hMDtjPWIuc3RhdGVOb2RlO2MuY3VycmVudD09PWI/RChcIjE3N1wiKTp2b2lkIDA7ZD1jLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZTswPT09ZD9EKFwiMjYxXCIpOnZvaWQgMDtjLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT0wO3ZhciBlPWwoKTtuYy5jdXJyZW50PW51bGw7aWYoMTxiLmVmZmVjdFRhZylpZihudWxsIT09Yi5sYXN0RWZmZWN0KXtiLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1iO3ZhciBmPWIuZmlyc3RFZmZlY3R9ZWxzZSBmPWI7ZWxzZSBmPWIuZmlyc3RFZmZlY3Q7emcoYy5jb250YWluZXJJbmZvKTtmb3Iodz1mO251bGwhPT13Oyl7dmFyIGg9ITEsaz12b2lkIDA7dHJ5e2Zvcig7bnVsbCE9PXc7KXcuZWZmZWN0VGFnJjIwNDgmJkRiKHcuYWx0ZXJuYXRlLHcpLHc9dy5uZXh0RWZmZWN0fWNhdGNoKGFiKXtoPSEwLGs9YWJ9aCYmKG51bGw9PT13P0QoXCIxNzhcIik6dm9pZCAwLGcodyxrKSxudWxsIT09XG53JiYodz13Lm5leHRFZmZlY3QpKX1mb3Iodz1mO251bGwhPT13Oyl7aD0hMTtrPXZvaWQgMDt0cnl7Zm9yKDtudWxsIT09dzspe3ZhciBwPXcuZWZmZWN0VGFnO3AmMTYmJk1jKHcpO2lmKHAmMTI4KXt2YXIgbj13LmFsdGVybmF0ZTtudWxsIT09biYma2cobil9c3dpdGNoKHAmMTQpe2Nhc2UgMjpFYih3KTt3LmVmZmVjdFRhZyY9LTM7YnJlYWs7Y2FzZSA2OkViKHcpO3cuZWZmZWN0VGFnJj0tMzt3ZSh3LmFsdGVybmF0ZSx3KTticmVhaztjYXNlIDQ6d2Uody5hbHRlcm5hdGUsdyk7YnJlYWs7Y2FzZSA4OmdnKHcpfXc9dy5uZXh0RWZmZWN0fX1jYXRjaChhYil7aD0hMCxrPWFifWgmJihudWxsPT09dz9EKFwiMTc4XCIpOnZvaWQgMCxnKHcsayksbnVsbCE9PXcmJih3PXcubmV4dEVmZmVjdCkpfUFnKGMuY29udGFpbmVySW5mbyk7Yy5jdXJyZW50PWI7Zm9yKHc9ZjtudWxsIT09dzspe3A9ITE7bj12b2lkIDA7dHJ5e2ZvcihmPWMsaD1lLGs9ZDtudWxsIT09dzspe3ZhciByPXcuZWZmZWN0VGFnO1xuciYzNiYmaGcoZix3LmFsdGVybmF0ZSx3LGgsayk7ciYyNTYmJmlnKHcscSk7ciYxMjgmJmpnKHcpO3ZhciB0PXcubmV4dEVmZmVjdDt3Lm5leHRFZmZlY3Q9bnVsbDt3PXR9fWNhdGNoKGFiKXtwPSEwLG49YWJ9cCYmKG51bGw9PT13P0QoXCIxNzhcIik6dm9pZCAwLGcodyxuKSxudWxsIT09dyYmKHc9dy5uZXh0RWZmZWN0KSl9Y2E9WmE9ITE7XCJmdW5jdGlvblwiPT09dHlwZW9mIEllJiZJZShiLnN0YXRlTm9kZSk7Yj1jLmN1cnJlbnQuZXhwaXJhdGlvblRpbWU7MD09PWImJih5YT1udWxsKTthLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPWJ9ZnVuY3Rpb24gUygpe3JldHVybiBudWxsPT09JGF8fCRhLnRpbWVSZW1haW5pbmcoKT5CZz8hMTpJYj0hMH1mdW5jdGlvbiBxKGEpe251bGw9PT1hYT9EKFwiMjQ2XCIpOnZvaWQgMDthYS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT0wO0JhfHwoQmE9ITAsSmI9YSl9dmFyIHU9a2YoKSx0PWZmKGEsdSkseT1oZih1KTt1PWpmKHUpO3ZhciBIPWdmKGEpLFxuV2E9JGUoYSx0LHksdSxILHYsaykuYmVnaW5Xb3JrLENiPWFmKGEsdCx5LHUsSCkuY29tcGxldGVXb3JrO3Q9YmYodCx5LHUsdixjKTt2YXIgSmM9dC50aHJvd0V4Y2VwdGlvbixLYz10LnVud2luZFdvcmssTGM9dC51bndpbmRJbnRlcnJ1cHRlZFdvcms7dD1kZihhLGcsdixrLGZ1bmN0aW9uKGEpe251bGw9PT15YT95YT1uZXcgU2V0KFthXSk6eWEuYWRkKGEpfSxsKTt2YXIgRGI9dC5jb21taXRCZWZvcmVNdXRhdGlvbkxpZmVDeWNsZXMsTWM9dC5jb21taXRSZXNldFRleHRDb250ZW50LEViPXQuY29tbWl0UGxhY2VtZW50LGdnPXQuY29tbWl0RGVsZXRpb24sd2U9dC5jb21taXRXb3JrLGhnPXQuY29tbWl0TGlmZUN5Y2xlcyxpZz10LmNvbW1pdEVycm9yTG9nZ2luZyxqZz10LmNvbW1pdEF0dGFjaFJlZixrZz10LmNvbW1pdERldGFjaFJlZixJYz1hLm5vdyxsZz1hLnNjaGVkdWxlRGVmZXJyZWRDYWxsYmFjayxtZz1hLmNhbmNlbERlZmVycmVkQ2FsbGJhY2ssemc9YS5wcmVwYXJlRm9yQ29tbWl0LFxuQWc9YS5yZXNldEFmdGVyQ29tbWl0LFBjPUljKCkseWc9Mix5ZT1QYyxSYz0wLGlhPTAsY2E9ITEsST1udWxsLFlhPW51bGwsWj0wLHc9bnVsbCxaYT0hMSxOYz0hMSx5YT1udWxsLGxhPW51bGwsSz1udWxsLEdiPTAsUWM9LTEsVD0hMSxhYT1udWxsLFA9MCxkYT0wLEliPSExLEJhPSExLEpiPW51bGwsJGE9bnVsbCxKPSExLEhiPSExLHphPSExLEFhPW51bGwseGc9MUUzLEZiPTAsQmc9MTtyZXR1cm57cmVjYWxjdWxhdGVDdXJyZW50VGltZTpsLGNvbXB1dGVFeHBpcmF0aW9uRm9yRmliZXI6ayxzY2hlZHVsZVdvcms6dixyZXF1ZXN0V29yazpCLGZsdXNoUm9vdDpmdW5jdGlvbihhLGIpe1Q/RChcIjI1M1wiKTp2b2lkIDA7YWE9YTtQPWI7RyhhLGIsITEpO24oKTtZKCl9LGJhdGNoZWRVcGRhdGVzOmZ1bmN0aW9uKGEsYil7dmFyIGM9SjtKPSEwO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5eyhKPWMpfHxUfHxuKCl9fSx1bmJhdGNoZWRVcGRhdGVzOmZ1bmN0aW9uKGEsYil7aWYoSiYmIUhiKXtIYj1cbiEwO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e0hiPSExfX1yZXR1cm4gYShiKX0sZmx1c2hTeW5jOmZ1bmN0aW9uKGEsYil7VD9EKFwiMTg3XCIpOnZvaWQgMDt2YXIgYz1KO0o9ITA7dHJ5e3JldHVybiBwKGEsYil9ZmluYWxseXtKPWMsbigpfX0sZmx1c2hDb250cm9sbGVkOmZ1bmN0aW9uKGEpe3ZhciBiPUo7Sj0hMDt0cnl7cChhKX1maW5hbGx5eyhKPWIpfHxUfHx4KDEsITEsbnVsbCl9fSxkZWZlcnJlZFVwZGF0ZXM6ZnVuY3Rpb24oYSl7dmFyIGI9aWE7aWE9MjUqKCgobCgpKzUwMCkvMjV8MCkrMSk7dHJ5e3JldHVybiBhKCl9ZmluYWxseXtpYT1ifX0sc3luY1VwZGF0ZXM6cCxpbnRlcmFjdGl2ZVVwZGF0ZXM6ZnVuY3Rpb24oYSxiLGMpe2lmKHphKXJldHVybiBhKGIsYyk7Snx8VHx8MD09PWRhfHwoeChkYSwhMSxudWxsKSxkYT0wKTt2YXIgZD16YSxlPUo7Sj16YT0hMDt0cnl7cmV0dXJuIGEoYixjKX1maW5hbGx5e3phPWQsKEo9ZSl8fFR8fG4oKX19LGZsdXNoSW50ZXJhY3RpdmVVcGRhdGVzOmZ1bmN0aW9uKCl7VHx8XG4wPT09ZGF8fCh4KGRhLCExLG51bGwpLGRhPTApfSxjb21wdXRlVW5pcXVlQXN5bmNFeHBpcmF0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9MjUqKCgobCgpKzUwMCkvMjV8MCkrMSk7YTw9UmMmJihhPVJjKzEpO3JldHVybiBSYz1hfSxsZWdhY3lDb250ZXh0Onl9fVxuZnVuY3Rpb24gbWYoYSl7ZnVuY3Rpb24gYihhLGIsYyxkLGUsaCl7ZD1iLmN1cnJlbnQ7aWYoYyl7Yz1jLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGw9ZyhjKTtjPWsoYyk/dihjLGwpOmx9ZWxzZSBjPWthO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9aDtQZShkLHtleHBpcmF0aW9uVGltZTplLHBhcnRpYWxTdGF0ZTp7ZWxlbWVudDphfSxjYWxsYmFjazp2b2lkIDA9PT1iP251bGw6Yixpc1JlcGxhY2U6ITEsaXNGb3JjZWQ6ITEsY2FwdHVyZWRWYWx1ZTpudWxsLG5leHQ6bnVsbH0pO2YoZCxlKTtyZXR1cm4gZX12YXIgYz1hLmdldFB1YmxpY0luc3RhbmNlO2E9bGYoYSk7dmFyIGQ9YS5yZWNhbGN1bGF0ZUN1cnJlbnRUaW1lLGU9YS5jb21wdXRlRXhwaXJhdGlvbkZvckZpYmVyLGY9YS5zY2hlZHVsZVdvcmssaD1hLmxlZ2FjeUNvbnRleHQsZz1oLmZpbmRDdXJyZW50VW5tYXNrZWRDb250ZXh0LGs9aC5pc0NvbnRleHRQcm92aWRlcix2PVxuaC5wcm9jZXNzQ2hpbGRDb250ZXh0O3JldHVybntjcmVhdGVDb250YWluZXI6ZnVuY3Rpb24oYSxiLGMpe2I9bmV3IHhlKDMsbnVsbCxudWxsLGI/MzowKTthPXtjdXJyZW50OmIsY29udGFpbmVySW5mbzphLHBlbmRpbmdDaGlsZHJlbjpudWxsLHBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZTowLGZpbmlzaGVkV29yazpudWxsLGNvbnRleHQ6bnVsbCxwZW5kaW5nQ29udGV4dDpudWxsLGh5ZHJhdGU6YyxyZW1haW5pbmdFeHBpcmF0aW9uVGltZTowLGZpcnN0QmF0Y2g6bnVsbCxuZXh0U2NoZWR1bGVkUm9vdDpudWxsfTtyZXR1cm4gYi5zdGF0ZU5vZGU9YX0sdXBkYXRlQ29udGFpbmVyOmZ1bmN0aW9uKGEsYyxmLGgpe3ZhciBnPWMuY3VycmVudCxrPWQoKTtnPWUoZyk7cmV0dXJuIGIoYSxjLGYsayxnLGgpfSx1cGRhdGVDb250YWluZXJBdEV4cGlyYXRpb25UaW1lOmZ1bmN0aW9uKGEsYyxlLGYsZyl7dmFyIGg9ZCgpO3JldHVybiBiKGEsYyxlLGgsZixnKX0sZmx1c2hSb290OmEuZmx1c2hSb290LFxucmVxdWVzdFdvcms6YS5yZXF1ZXN0V29yayxjb21wdXRlVW5pcXVlQXN5bmNFeHBpcmF0aW9uOmEuY29tcHV0ZVVuaXF1ZUFzeW5jRXhwaXJhdGlvbixiYXRjaGVkVXBkYXRlczphLmJhdGNoZWRVcGRhdGVzLHVuYmF0Y2hlZFVwZGF0ZXM6YS51bmJhdGNoZWRVcGRhdGVzLGRlZmVycmVkVXBkYXRlczphLmRlZmVycmVkVXBkYXRlcyxzeW5jVXBkYXRlczphLnN5bmNVcGRhdGVzLGludGVyYWN0aXZlVXBkYXRlczphLmludGVyYWN0aXZlVXBkYXRlcyxmbHVzaEludGVyYWN0aXZlVXBkYXRlczphLmZsdXNoSW50ZXJhY3RpdmVVcGRhdGVzLGZsdXNoQ29udHJvbGxlZDphLmZsdXNoQ29udHJvbGxlZCxmbHVzaFN5bmM6YS5mbHVzaFN5bmMsZ2V0UHVibGljUm9vdEluc3RhbmNlOmZ1bmN0aW9uKGEpe2E9YS5jdXJyZW50O2lmKCFhLmNoaWxkKXJldHVybiBudWxsO3N3aXRjaChhLmNoaWxkLnRhZyl7Y2FzZSA1OnJldHVybiBjKGEuY2hpbGQuc3RhdGVOb2RlKTtkZWZhdWx0OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZX19LFxuZmluZEhvc3RJbnN0YW5jZTpmdW5jdGlvbihhKXt2YXIgYj1hLl9yZWFjdEludGVybmFsRmliZXI7dm9pZCAwPT09YiYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnJlbmRlcj9EKFwiMTg4XCIpOkQoXCIyNjhcIixPYmplY3Qua2V5cyhhKSkpO2E9QmQoYik7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRIb3N0SW5zdGFuY2VXaXRoTm9Qb3J0YWxzOmZ1bmN0aW9uKGEpe2E9Q2QoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGluamVjdEludG9EZXZUb29sczpmdW5jdGlvbihhKXt2YXIgYj1hLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlO3JldHVybiBIZShBKHt9LGEse2ZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9QmQoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOmZ1bmN0aW9uKGEpe3JldHVybiBiP2IoYSk6bnVsbH19KSl9fX1cbnZhciBuZj1PYmplY3QuZnJlZXplKHtkZWZhdWx0Om1mfSksb2Y9bmYmJm1mfHxuZixwZj1vZltcImRlZmF1bHRcIl0/b2ZbXCJkZWZhdWx0XCJdOm9mO2Z1bmN0aW9uIHFmKGEsYixjKXt2YXIgZD0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bnVsbDtyZXR1cm57JCR0eXBlb2Y6cmMsa2V5Om51bGw9PWQ/bnVsbDpcIlwiK2QsY2hpbGRyZW46YSxjb250YWluZXJJbmZvOmIsaW1wbGVtZW50YXRpb246Y319dmFyIHJmPVwib2JqZWN0XCI9PT10eXBlb2YgcGVyZm9ybWFuY2UmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBwZXJmb3JtYW5jZS5ub3csc2Y9dm9pZCAwO3NmPXJmP2Z1bmN0aW9uKCl7cmV0dXJuIHBlcmZvcm1hbmNlLm5vdygpfTpmdW5jdGlvbigpe3JldHVybiBEYXRlLm5vdygpfTt2YXIgdGY9dm9pZCAwLHVmPXZvaWQgMDtcbmlmKG0uY2FuVXNlRE9NKWlmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiByZXF1ZXN0SWRsZUNhbGxiYWNrfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgY2FuY2VsSWRsZUNhbGxiYWNrKXt2YXIgdmY9bnVsbCx3Zj0hMSx4Zj0tMSx5Zj0hMSx6Zj0wLEFmPTMzLEJmPTMzLENmPXZvaWQgMDtDZj1yZj97ZGlkVGltZW91dDohMSx0aW1lUmVtYWluaW5nOmZ1bmN0aW9uKCl7dmFyIGE9emYtcGVyZm9ybWFuY2Uubm93KCk7cmV0dXJuIDA8YT9hOjB9fTp7ZGlkVGltZW91dDohMSx0aW1lUmVtYWluaW5nOmZ1bmN0aW9uKCl7dmFyIGE9emYtRGF0ZS5ub3coKTtyZXR1cm4gMDxhP2E6MH19O3ZhciBEZj1cIl9fcmVhY3RJZGxlQ2FsbGJhY2skXCIrTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMik7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsZnVuY3Rpb24oYSl7aWYoYS5zb3VyY2U9PT13aW5kb3cmJmEuZGF0YT09PURmKXt3Zj0hMTthPXNmKCk7aWYoMD49emYtYSlpZigtMSE9PVxueGYmJnhmPD1hKUNmLmRpZFRpbWVvdXQ9ITA7ZWxzZXt5Znx8KHlmPSEwLHJlcXVlc3RBbmltYXRpb25GcmFtZShFZikpO3JldHVybn1lbHNlIENmLmRpZFRpbWVvdXQ9ITE7eGY9LTE7YT12Zjt2Zj1udWxsO251bGwhPT1hJiZhKENmKX19LCExKTt2YXIgRWY9ZnVuY3Rpb24oYSl7eWY9ITE7dmFyIGI9YS16ZitCZjtiPEJmJiZBZjxCZj8oOD5iJiYoYj04KSxCZj1iPEFmP0FmOmIpOkFmPWI7emY9YStCZjt3Znx8KHdmPSEwLHdpbmRvdy5wb3N0TWVzc2FnZShEZixcIipcIikpfTt0Zj1mdW5jdGlvbihhLGIpe3ZmPWE7bnVsbCE9YiYmXCJudW1iZXJcIj09PXR5cGVvZiBiLnRpbWVvdXQmJih4Zj1zZigpK2IudGltZW91dCk7eWZ8fCh5Zj0hMCxyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoRWYpKTtyZXR1cm4gMH07dWY9ZnVuY3Rpb24oKXt2Zj1udWxsO3dmPSExO3hmPS0xfX1lbHNlIHRmPXdpbmRvdy5yZXF1ZXN0SWRsZUNhbGxiYWNrLHVmPXdpbmRvdy5jYW5jZWxJZGxlQ2FsbGJhY2s7ZWxzZSB0Zj1cbmZ1bmN0aW9uKGEpe3JldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7YSh7dGltZVJlbWFpbmluZzpmdW5jdGlvbigpe3JldHVybiBJbmZpbml0eX0sZGlkVGltZW91dDohMX0pfSl9LHVmPWZ1bmN0aW9uKGEpe2NsZWFyVGltZW91dChhKX07ZnVuY3Rpb24gRmYoYSl7dmFyIGI9XCJcIjtlYS5DaGlsZHJlbi5mb3JFYWNoKGEsZnVuY3Rpb24oYSl7bnVsbD09YXx8XCJzdHJpbmdcIiE9PXR5cGVvZiBhJiZcIm51bWJlclwiIT09dHlwZW9mIGF8fChiKz1hKX0pO3JldHVybiBifWZ1bmN0aW9uIEdmKGEsYil7YT1BKHtjaGlsZHJlbjp2b2lkIDB9LGIpO2lmKGI9RmYoYi5jaGlsZHJlbikpYS5jaGlsZHJlbj1iO3JldHVybiBhfVxuZnVuY3Rpb24gSGYoYSxiLGMsZCl7YT1hLm9wdGlvbnM7aWYoYil7Yj17fTtmb3IodmFyIGU9MDtlPGMubGVuZ3RoO2UrKyliW1wiJFwiK2NbZV1dPSEwO2ZvcihjPTA7YzxhLmxlbmd0aDtjKyspZT1iLmhhc093blByb3BlcnR5KFwiJFwiK2FbY10udmFsdWUpLGFbY10uc2VsZWN0ZWQhPT1lJiYoYVtjXS5zZWxlY3RlZD1lKSxlJiZkJiYoYVtjXS5kZWZhdWx0U2VsZWN0ZWQ9ITApfWVsc2V7Yz1cIlwiK2M7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIElmKGEsYil7dmFyIGM9Yi52YWx1ZTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpudWxsIT1jP2M6Yi5kZWZhdWx0VmFsdWUsd2FzTXVsdGlwbGU6ISFiLm11bHRpcGxlfX1mdW5jdGlvbiBKZihhLGIpe251bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/RChcIjkxXCIpOnZvaWQgMDtyZXR1cm4gQSh7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiBLZihhLGIpe3ZhciBjPWIudmFsdWU7bnVsbD09YyYmKGM9Yi5kZWZhdWx0VmFsdWUsYj1iLmNoaWxkcmVuLG51bGwhPWImJihudWxsIT1jP0QoXCI5MlwiKTp2b2lkIDAsQXJyYXkuaXNBcnJheShiKSYmKDE+PWIubGVuZ3RoP3ZvaWQgMDpEKFwiOTNcIiksYj1iWzBdKSxjPVwiXCIrYiksbnVsbD09YyYmKGM9XCJcIikpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOlwiXCIrY319XG5mdW5jdGlvbiBMZihhLGIpe3ZhciBjPWIudmFsdWU7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1iLmRlZmF1bHRWYWx1ZSYmKGEuZGVmYXVsdFZhbHVlPWIuZGVmYXVsdFZhbHVlKX1mdW5jdGlvbiBNZihhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiYoYS52YWx1ZT1iKX12YXIgTmY9e2h0bWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsbWF0aG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLHN2ZzpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJ9O1xuZnVuY3Rpb24gT2YoYSl7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Y2FzZSBcIm1hdGhcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtkZWZhdWx0OnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwifX1mdW5jdGlvbiBQZihhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/T2YoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgUWY9dm9pZCAwLFJmPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGIsYyxkLGUpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX06YX0oZnVuY3Rpb24oYSxiKXtpZihhLm5hbWVzcGFjZVVSSSE9PU5mLnN2Z3x8XCJpbm5lckhUTUxcImluIGEpYS5pbm5lckhUTUw9YjtlbHNle1FmPVFmfHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1FmLmlubmVySFRNTD1cIlxceDNjc3ZnXFx4M2VcIitiK1wiXFx4M2Mvc3ZnXFx4M2VcIjtmb3IoYj1RZi5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBTZihhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifVxudmFyIFRmPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMCxmaWxsT3BhY2l0eTohMCxmbG9vZE9wYWNpdHk6ITAsXG5zdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LFVmPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhUZikuZm9yRWFjaChmdW5jdGlvbihhKXtVZi5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO1RmW2JdPVRmW2FdfSl9KTtcbmZ1bmN0aW9uIFZmKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKTt2YXIgZT1jO3ZhciBmPWJbY107ZT1udWxsPT1mfHxcImJvb2xlYW5cIj09PXR5cGVvZiBmfHxcIlwiPT09Zj9cIlwiOmR8fFwibnVtYmVyXCIhPT10eXBlb2YgZnx8MD09PWZ8fFRmLmhhc093blByb3BlcnR5KGUpJiZUZltlXT8oXCJcIitmKS50cmltKCk6ZitcInB4XCI7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciBXZj1BKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gWGYoYSxiLGMpe2ImJihXZlthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/RChcIjEzN1wiLGEsYygpKTp2b2lkIDApLG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJihudWxsIT1iLmNoaWxkcmVuP0QoXCI2MFwiKTp2b2lkIDAsXCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTD92b2lkIDA6RChcIjYxXCIpKSxudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGU/RChcIjYyXCIsYygpKTp2b2lkIDApfVxuZnVuY3Rpb24gWWYoYSxiKXtpZigtMT09PWEuaW5kZXhPZihcIi1cIikpcmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzO3N3aXRjaChhKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITB9fXZhciBaZj1DLnRoYXRSZXR1cm5zKFwiXCIpO1xuZnVuY3Rpb24gJGYoYSxiKXthPTk9PT1hLm5vZGVUeXBlfHwxMT09PWEubm9kZVR5cGU/YTphLm93bmVyRG9jdW1lbnQ7dmFyIGM9a2UoYSk7Yj12YVtiXTtmb3IodmFyIGQ9MDtkPGIubGVuZ3RoO2QrKyl7dmFyIGU9YltkXTtjLmhhc093blByb3BlcnR5KGUpJiZjW2VdfHwoXCJ0b3BTY3JvbGxcIj09PWU/WmQoXCJ0b3BTY3JvbGxcIixcInNjcm9sbFwiLGEpOlwidG9wRm9jdXNcIj09PWV8fFwidG9wQmx1clwiPT09ZT8oWmQoXCJ0b3BGb2N1c1wiLFwiZm9jdXNcIixhKSxaZChcInRvcEJsdXJcIixcImJsdXJcIixhKSxjLnRvcEJsdXI9ITAsYy50b3BGb2N1cz0hMCk6XCJ0b3BDYW5jZWxcIj09PWU/KGljKFwiY2FuY2VsXCIsITApJiZaZChcInRvcENhbmNlbFwiLFwiY2FuY2VsXCIsYSksYy50b3BDYW5jZWw9ITApOlwidG9wQ2xvc2VcIj09PWU/KGljKFwiY2xvc2VcIiwhMCkmJlpkKFwidG9wQ2xvc2VcIixcImNsb3NlXCIsYSksYy50b3BDbG9zZT0hMCk6ZmUuaGFzT3duUHJvcGVydHkoZSkmJlcoZSxmZVtlXSxhKSxjW2VdPSEwKX19XG5mdW5jdGlvbiBhZyhhLGIsYyxkKXtjPTk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50O2Q9PT1OZi5odG1sJiYoZD1PZihhKSk7ZD09PU5mLmh0bWw/XCJzY3JpcHRcIj09PWE/KGE9Yy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGEuaW5uZXJIVE1MPVwiXFx4M2NzY3JpcHRcXHgzZVxceDNjL3NjcmlwdFxceDNlXCIsYT1hLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCkpOmE9XCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzP2MuY3JlYXRlRWxlbWVudChhLHtpczpiLmlzfSk6Yy5jcmVhdGVFbGVtZW50KGEpOmE9Yy5jcmVhdGVFbGVtZW50TlMoZCxhKTtyZXR1cm4gYX1mdW5jdGlvbiBiZyhhLGIpe3JldHVybig5PT09Yi5ub2RlVHlwZT9iOmIub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoYSl9XG5mdW5jdGlvbiBjZyhhLGIsYyxkKXt2YXIgZT1ZZihiLGMpO3N3aXRjaChiKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOlcoXCJ0b3BMb2FkXCIsXCJsb2FkXCIsYSk7dmFyIGY9YzticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoZiBpbiBnZSlnZS5oYXNPd25Qcm9wZXJ0eShmKSYmVyhmLGdlW2ZdLGEpO2Y9YzticmVhaztjYXNlIFwic291cmNlXCI6VyhcInRvcEVycm9yXCIsXCJlcnJvclwiLGEpO2Y9YzticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpXKFwidG9wRXJyb3JcIixcImVycm9yXCIsYSk7VyhcInRvcExvYWRcIixcImxvYWRcIixhKTtmPWM7YnJlYWs7Y2FzZSBcImZvcm1cIjpXKFwidG9wUmVzZXRcIixcInJlc2V0XCIsYSk7VyhcInRvcFN1Ym1pdFwiLFwic3VibWl0XCIsYSk7Zj1jO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6VyhcInRvcFRvZ2dsZVwiLFwidG9nZ2xlXCIsYSk7Zj1jO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOldjKGEsYyk7Zj1WYyhhLGMpO1coXCJ0b3BJbnZhbGlkXCIsXG5cImludmFsaWRcIixhKTskZihkLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmY9R2YoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6SWYoYSxjKTtmPUEoe30sYyx7dmFsdWU6dm9pZCAwfSk7VyhcInRvcEludmFsaWRcIixcImludmFsaWRcIixhKTskZihkLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6S2YoYSxjKTtmPUpmKGEsYyk7VyhcInRvcEludmFsaWRcIixcImludmFsaWRcIixhKTskZihkLFwib25DaGFuZ2VcIik7YnJlYWs7ZGVmYXVsdDpmPWN9WGYoYixmLFpmKTt2YXIgaD1mLGc7Zm9yKGcgaW4gaClpZihoLmhhc093blByb3BlcnR5KGcpKXt2YXIgaz1oW2ddO1wic3R5bGVcIj09PWc/VmYoYSxrLFpmKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1nPyhrPWs/ay5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJlJmKGEsaykpOlwiY2hpbGRyZW5cIj09PWc/XCJzdHJpbmdcIj09PXR5cGVvZiBrPyhcInRleHRhcmVhXCIhPT1ifHxcIlwiIT09aykmJlNmKGEsayk6XCJudW1iZXJcIj09PXR5cGVvZiBrJiZcblNmKGEsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09ZyYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWcmJlwiYXV0b0ZvY3VzXCIhPT1nJiYodWEuaGFzT3duUHJvcGVydHkoZyk/bnVsbCE9ayYmJGYoZCxnKTpudWxsIT1rJiZVYyhhLGcsayxlKSl9c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOmxjKGEpO2FkKGEsYyk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6bGMoYSk7TWYoYSxjKTticmVhaztjYXNlIFwib3B0aW9uXCI6bnVsbCE9Yy52YWx1ZSYmYS5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLGMudmFsdWUpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLm11bHRpcGxlPSEhYy5tdWx0aXBsZTtiPWMudmFsdWU7bnVsbCE9Yj9IZihhLCEhYy5tdWx0aXBsZSxiLCExKTpudWxsIT1jLmRlZmF1bHRWYWx1ZSYmSGYoYSwhIWMubXVsdGlwbGUsYy5kZWZhdWx0VmFsdWUsITApO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGYub25DbGljayYmKGEub25jbGljaz1DKX19XG5mdW5jdGlvbiBkZyhhLGIsYyxkLGUpe3ZhciBmPW51bGw7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOmM9VmMoYSxjKTtkPVZjKGEsZCk7Zj1bXTticmVhaztjYXNlIFwib3B0aW9uXCI6Yz1HZihhLGMpO2Q9R2YoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjPUEoe30sYyx7dmFsdWU6dm9pZCAwfSk7ZD1BKHt9LGQse3ZhbHVlOnZvaWQgMH0pO2Y9W107YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6Yz1KZihhLGMpO2Q9SmYoYSxkKTtmPVtdO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiIT09dHlwZW9mIGMub25DbGljayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGEub25jbGljaz1DKX1YZihiLGQsWmYpO2I9YT12b2lkIDA7dmFyIGg9bnVsbDtmb3IoYSBpbiBjKWlmKCFkLmhhc093blByb3BlcnR5KGEpJiZjLmhhc093blByb3BlcnR5KGEpJiZudWxsIT1jW2FdKWlmKFwic3R5bGVcIj09PWEpe3ZhciBnPWNbYV07Zm9yKGIgaW4gZylnLmhhc093blByb3BlcnR5KGIpJiYoaHx8XG4oaD17fSksaFtiXT1cIlwiKX1lbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09YSYmXCJjaGlsZHJlblwiIT09YSYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWEmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1hJiZcImF1dG9Gb2N1c1wiIT09YSYmKHVhLmhhc093blByb3BlcnR5KGEpP2Z8fChmPVtdKTooZj1mfHxbXSkucHVzaChhLG51bGwpKTtmb3IoYSBpbiBkKXt2YXIgaz1kW2FdO2c9bnVsbCE9Yz9jW2FdOnZvaWQgMDtpZihkLmhhc093blByb3BlcnR5KGEpJiZrIT09ZyYmKG51bGwhPWt8fG51bGwhPWcpKWlmKFwic3R5bGVcIj09PWEpaWYoZyl7Zm9yKGIgaW4gZykhZy5oYXNPd25Qcm9wZXJ0eShiKXx8ayYmay5oYXNPd25Qcm9wZXJ0eShiKXx8KGh8fChoPXt9KSxoW2JdPVwiXCIpO2ZvcihiIGluIGspay5oYXNPd25Qcm9wZXJ0eShiKSYmZ1tiXSE9PWtbYl0mJihofHwoaD17fSksaFtiXT1rW2JdKX1lbHNlIGh8fChmfHwoZj1bXSksZi5wdXNoKGEsaCkpLFxuaD1rO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1hPyhrPWs/ay5fX2h0bWw6dm9pZCAwLGc9Zz9nLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmZyE9PWsmJihmPWZ8fFtdKS5wdXNoKGEsXCJcIitrKSk6XCJjaGlsZHJlblwiPT09YT9nPT09a3x8XCJzdHJpbmdcIiE9PXR5cGVvZiBrJiZcIm51bWJlclwiIT09dHlwZW9mIGt8fChmPWZ8fFtdKS5wdXNoKGEsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09YSYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWEmJih1YS5oYXNPd25Qcm9wZXJ0eShhKT8obnVsbCE9ayYmJGYoZSxhKSxmfHxnPT09a3x8KGY9W10pKTooZj1mfHxbXSkucHVzaChhLGspKX1oJiYoZj1mfHxbXSkucHVzaChcInN0eWxlXCIsaCk7cmV0dXJuIGZ9XG5mdW5jdGlvbiBlZyhhLGIsYyxkLGUpe1wiaW5wdXRcIj09PWMmJlwicmFkaW9cIj09PWUudHlwZSYmbnVsbCE9ZS5uYW1lJiZZYyhhLGUpO1lmKGMsZCk7ZD1ZZihjLGUpO2Zvcih2YXIgZj0wO2Y8Yi5sZW5ndGg7Zis9Mil7dmFyIGg9YltmXSxnPWJbZisxXTtcInN0eWxlXCI9PT1oP1ZmKGEsZyxaZik6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09aD9SZihhLGcpOlwiY2hpbGRyZW5cIj09PWg/U2YoYSxnKTpVYyhhLGgsZyxkKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6WmMoYSxlKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpMZihhLGUpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlPXZvaWQgMCxiPWEuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZSxhLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU9ISFlLm11bHRpcGxlLGM9ZS52YWx1ZSxudWxsIT1jP0hmKGEsISFlLm11bHRpcGxlLGMsITEpOmIhPT0hIWUubXVsdGlwbGUmJihudWxsIT1lLmRlZmF1bHRWYWx1ZT9cbkhmKGEsISFlLm11bHRpcGxlLGUuZGVmYXVsdFZhbHVlLCEwKTpIZihhLCEhZS5tdWx0aXBsZSxlLm11bHRpcGxlP1tdOlwiXCIsITEpKX19XG5mdW5jdGlvbiBmZyhhLGIsYyxkLGUpe3N3aXRjaChiKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOlcoXCJ0b3BMb2FkXCIsXCJsb2FkXCIsYSk7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKHZhciBmIGluIGdlKWdlLmhhc093blByb3BlcnR5KGYpJiZXKGYsZ2VbZl0sYSk7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOlcoXCJ0b3BFcnJvclwiLFwiZXJyb3JcIixhKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpXKFwidG9wRXJyb3JcIixcImVycm9yXCIsYSk7VyhcInRvcExvYWRcIixcImxvYWRcIixhKTticmVhaztjYXNlIFwiZm9ybVwiOlcoXCJ0b3BSZXNldFwiLFwicmVzZXRcIixhKTtXKFwidG9wU3VibWl0XCIsXCJzdWJtaXRcIixhKTticmVhaztjYXNlIFwiZGV0YWlsc1wiOlcoXCJ0b3BUb2dnbGVcIixcInRvZ2dsZVwiLGEpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOldjKGEsYyk7VyhcInRvcEludmFsaWRcIixcImludmFsaWRcIixhKTskZihlLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOklmKGEsXG5jKTtXKFwidG9wSW52YWxpZFwiLFwiaW52YWxpZFwiLGEpOyRmKGUsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpLZihhLGMpLFcoXCJ0b3BJbnZhbGlkXCIsXCJpbnZhbGlkXCIsYSksJGYoZSxcIm9uQ2hhbmdlXCIpfVhmKGIsYyxaZik7ZD1udWxsO2Zvcih2YXIgaCBpbiBjKWMuaGFzT3duUHJvcGVydHkoaCkmJihmPWNbaF0sXCJjaGlsZHJlblwiPT09aD9cInN0cmluZ1wiPT09dHlwZW9mIGY/YS50ZXh0Q29udGVudCE9PWYmJihkPVtcImNoaWxkcmVuXCIsZl0pOlwibnVtYmVyXCI9PT10eXBlb2YgZiYmYS50ZXh0Q29udGVudCE9PVwiXCIrZiYmKGQ9W1wiY2hpbGRyZW5cIixcIlwiK2ZdKTp1YS5oYXNPd25Qcm9wZXJ0eShoKSYmbnVsbCE9ZiYmJGYoZSxoKSk7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOmxjKGEpO2FkKGEsYyk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6bGMoYSk7TWYoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGMub25DbGljayYmXG4oYS5vbmNsaWNrPUMpfXJldHVybiBkfWZ1bmN0aW9uIG5nKGEsYil7cmV0dXJuIGEubm9kZVZhbHVlIT09Yn1cbnZhciBvZz1PYmplY3QuZnJlZXplKHtjcmVhdGVFbGVtZW50OmFnLGNyZWF0ZVRleHROb2RlOmJnLHNldEluaXRpYWxQcm9wZXJ0aWVzOmNnLGRpZmZQcm9wZXJ0aWVzOmRnLHVwZGF0ZVByb3BlcnRpZXM6ZWcsZGlmZkh5ZHJhdGVkUHJvcGVydGllczpmZyxkaWZmSHlkcmF0ZWRUZXh0Om5nLHdhcm5Gb3JVbm1hdGNoZWRUZXh0OmZ1bmN0aW9uKCl7fSx3YXJuRm9yRGVsZXRlZEh5ZHJhdGFibGVFbGVtZW50OmZ1bmN0aW9uKCl7fSx3YXJuRm9yRGVsZXRlZEh5ZHJhdGFibGVUZXh0OmZ1bmN0aW9uKCl7fSx3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZEVsZW1lbnQ6ZnVuY3Rpb24oKXt9LHdhcm5Gb3JJbnNlcnRlZEh5ZHJhdGVkVGV4dDpmdW5jdGlvbigpe30scmVzdG9yZUNvbnRyb2xsZWRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOlpjKGEsYyk7Yj1jLm5hbWU7aWYoXCJyYWRpb1wiPT09Yy50eXBlJiZudWxsIT1iKXtmb3IoYz1hO2MucGFyZW50Tm9kZTspYz1cbmMucGFyZW50Tm9kZTtjPWMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWVcXHgzZFwiK0pTT04uc3RyaW5naWZ5KFwiXCIrYikrJ11bdHlwZVxceDNkXCJyYWRpb1wiXScpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspe3ZhciBkPWNbYl07aWYoZCE9PWEmJmQuZm9ybT09PWEuZm9ybSl7dmFyIGU9WGEoZCk7ZT92b2lkIDA6RChcIjkwXCIpO21jKGQpO1pjKGQsZSl9fX1icmVhaztjYXNlIFwidGV4dGFyZWFcIjpMZihhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMudmFsdWUsbnVsbCE9YiYmSGYoYSwhIWMubXVsdGlwbGUsYiwhMSl9fX0pO1RiLmluamVjdEZpYmVyQ29udHJvbGxlZEhvc3RDb21wb25lbnQob2cpO3ZhciBwZz1udWxsLHFnPW51bGw7XG5mdW5jdGlvbiByZyhhKXt0aGlzLl9leHBpcmF0aW9uVGltZT1YLmNvbXB1dGVVbmlxdWVBc3luY0V4cGlyYXRpb24oKTt0aGlzLl9yb290PWE7dGhpcy5fY2FsbGJhY2tzPXRoaXMuX25leHQ9bnVsbDt0aGlzLl9oYXNDaGlsZHJlbj10aGlzLl9kaWRDb21wbGV0ZT0hMTt0aGlzLl9jaGlsZHJlbj1udWxsO3RoaXMuX2RlZmVyPSEwfXJnLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSl7dGhpcy5fZGVmZXI/dm9pZCAwOkQoXCIyNTBcIik7dGhpcy5faGFzQ2hpbGRyZW49ITA7dGhpcy5fY2hpbGRyZW49YTt2YXIgYj10aGlzLl9yb290Ll9pbnRlcm5hbFJvb3QsYz10aGlzLl9leHBpcmF0aW9uVGltZSxkPW5ldyBzZztYLnVwZGF0ZUNvbnRhaW5lckF0RXhwaXJhdGlvblRpbWUoYSxiLG51bGwsYyxkLl9vbkNvbW1pdCk7cmV0dXJuIGR9O1xucmcucHJvdG90eXBlLnRoZW49ZnVuY3Rpb24oYSl7aWYodGhpcy5fZGlkQ29tcGxldGUpYSgpO2Vsc2V7dmFyIGI9dGhpcy5fY2FsbGJhY2tzO251bGw9PT1iJiYoYj10aGlzLl9jYWxsYmFja3M9W10pO2IucHVzaChhKX19O1xucmcucHJvdG90eXBlLmNvbW1pdD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuX3Jvb3QuX2ludGVybmFsUm9vdCxiPWEuZmlyc3RCYXRjaDt0aGlzLl9kZWZlciYmbnVsbCE9PWI/dm9pZCAwOkQoXCIyNTFcIik7aWYodGhpcy5faGFzQ2hpbGRyZW4pe3ZhciBjPXRoaXMuX2V4cGlyYXRpb25UaW1lO2lmKGIhPT10aGlzKXt0aGlzLl9oYXNDaGlsZHJlbiYmKGM9dGhpcy5fZXhwaXJhdGlvblRpbWU9Yi5fZXhwaXJhdGlvblRpbWUsdGhpcy5yZW5kZXIodGhpcy5fY2hpbGRyZW4pKTtmb3IodmFyIGQ9bnVsbCxlPWI7ZSE9PXRoaXM7KWQ9ZSxlPWUuX25leHQ7bnVsbD09PWQ/RChcIjI1MVwiKTp2b2lkIDA7ZC5fbmV4dD1lLl9uZXh0O3RoaXMuX25leHQ9YjthLmZpcnN0QmF0Y2g9dGhpc310aGlzLl9kZWZlcj0hMTtYLmZsdXNoUm9vdChhLGMpO2I9dGhpcy5fbmV4dDt0aGlzLl9uZXh0PW51bGw7Yj1hLmZpcnN0QmF0Y2g9YjtudWxsIT09YiYmYi5faGFzQ2hpbGRyZW4mJmIucmVuZGVyKGIuX2NoaWxkcmVuKX1lbHNlIHRoaXMuX25leHQ9XG5udWxsLHRoaXMuX2RlZmVyPSExfTtyZy5wcm90b3R5cGUuX29uQ29tcGxldGU9ZnVuY3Rpb24oKXtpZighdGhpcy5fZGlkQ29tcGxldGUpe3RoaXMuX2RpZENvbXBsZXRlPSEwO3ZhciBhPXRoaXMuX2NhbGxiYWNrcztpZihudWxsIT09YSlmb3IodmFyIGI9MDtiPGEubGVuZ3RoO2IrKykoMCxhW2JdKSgpfX07ZnVuY3Rpb24gc2coKXt0aGlzLl9jYWxsYmFja3M9bnVsbDt0aGlzLl9kaWRDb21taXQ9ITE7dGhpcy5fb25Db21taXQ9dGhpcy5fb25Db21taXQuYmluZCh0aGlzKX1zZy5wcm90b3R5cGUudGhlbj1mdW5jdGlvbihhKXtpZih0aGlzLl9kaWRDb21taXQpYSgpO2Vsc2V7dmFyIGI9dGhpcy5fY2FsbGJhY2tzO251bGw9PT1iJiYoYj10aGlzLl9jYWxsYmFja3M9W10pO2IucHVzaChhKX19O1xuc2cucHJvdG90eXBlLl9vbkNvbW1pdD1mdW5jdGlvbigpe2lmKCF0aGlzLl9kaWRDb21taXQpe3RoaXMuX2RpZENvbW1pdD0hMDt2YXIgYT10aGlzLl9jYWxsYmFja3M7aWYobnVsbCE9PWEpZm9yKHZhciBiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBjPWFbYl07XCJmdW5jdGlvblwiIT09dHlwZW9mIGM/RChcIjE5MVwiLGMpOnZvaWQgMDtjKCl9fX07ZnVuY3Rpb24gdGcoYSxiLGMpe3RoaXMuX2ludGVybmFsUm9vdD1YLmNyZWF0ZUNvbnRhaW5lcihhLGIsYyl9dGcucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuX2ludGVybmFsUm9vdCxkPW5ldyBzZztiPXZvaWQgMD09PWI/bnVsbDpiO251bGwhPT1iJiZkLnRoZW4oYik7WC51cGRhdGVDb250YWluZXIoYSxjLG51bGwsZC5fb25Db21taXQpO3JldHVybiBkfTtcbnRnLnByb3RvdHlwZS51bm1vdW50PWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuX2ludGVybmFsUm9vdCxjPW5ldyBzZzthPXZvaWQgMD09PWE/bnVsbDphO251bGwhPT1hJiZjLnRoZW4oYSk7WC51cGRhdGVDb250YWluZXIobnVsbCxiLG51bGwsYy5fb25Db21taXQpO3JldHVybiBjfTt0Zy5wcm90b3R5cGUubGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD10aGlzLl9pbnRlcm5hbFJvb3QsZT1uZXcgc2c7Yz12b2lkIDA9PT1jP251bGw6YztudWxsIT09YyYmZS50aGVuKGMpO1gudXBkYXRlQ29udGFpbmVyKGIsZCxhLGUuX29uQ29tbWl0KTtyZXR1cm4gZX07XG50Zy5wcm90b3R5cGUuY3JlYXRlQmF0Y2g9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgcmcodGhpcyksYj1hLl9leHBpcmF0aW9uVGltZSxjPXRoaXMuX2ludGVybmFsUm9vdCxkPWMuZmlyc3RCYXRjaDtpZihudWxsPT09ZCljLmZpcnN0QmF0Y2g9YSxhLl9uZXh0PW51bGw7ZWxzZXtmb3IoYz1udWxsO251bGwhPT1kJiZkLl9leHBpcmF0aW9uVGltZTw9YjspYz1kLGQ9ZC5fbmV4dDthLl9uZXh0PWQ7bnVsbCE9PWMmJihjLl9uZXh0PWEpfXJldHVybiBhfTtmdW5jdGlvbiB1ZyhhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9XG5mdW5jdGlvbiB2ZyhhLGIpe3N3aXRjaChhKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOnJldHVybiEhYi5hdXRvRm9jdXN9cmV0dXJuITF9XG52YXIgWD1wZih7Z2V0Um9vdEhvc3RDb250ZXh0OmZ1bmN0aW9uKGEpe3ZhciBiPWEubm9kZVR5cGU7c3dpdGNoKGIpe2Nhc2UgOTpjYXNlIDExOmE9KGE9YS5kb2N1bWVudEVsZW1lbnQpP2EubmFtZXNwYWNlVVJJOlBmKG51bGwsXCJcIik7YnJlYWs7ZGVmYXVsdDpiPTg9PT1iP2EucGFyZW50Tm9kZTphLGE9Yi5uYW1lc3BhY2VVUkl8fG51bGwsYj1iLnRhZ05hbWUsYT1QZihhLGIpfXJldHVybiBhfSxnZXRDaGlsZEhvc3RDb250ZXh0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIFBmKGEsYil9LGdldFB1YmxpY0luc3RhbmNlOmZ1bmN0aW9uKGEpe3JldHVybiBhfSxwcmVwYXJlRm9yQ29tbWl0OmZ1bmN0aW9uKCl7cGc9VmQ7dmFyIGE9ZmEoKTtpZihuZShhKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gYSl2YXIgYj17c3RhcnQ6YS5zZWxlY3Rpb25TdGFydCxlbmQ6YS5zZWxlY3Rpb25FbmR9O2Vsc2UgYTp7dmFyIGM9d2luZG93LmdldFNlbGVjdGlvbiYmd2luZG93LmdldFNlbGVjdGlvbigpO1xuaWYoYyYmMCE9PWMucmFuZ2VDb3VudCl7Yj1jLmFuY2hvck5vZGU7dmFyIGQ9Yy5hbmNob3JPZmZzZXQsZT1jLmZvY3VzTm9kZTtjPWMuZm9jdXNPZmZzZXQ7dHJ5e2Iubm9kZVR5cGUsZS5ub2RlVHlwZX1jYXRjaChCKXtiPW51bGw7YnJlYWsgYX12YXIgZj0wLGg9LTEsZz0tMSxrPTAsdj0wLGw9YSxwPW51bGw7Yjpmb3IoOzspe2Zvcih2YXIgejs7KXtsIT09Ynx8MCE9PWQmJjMhPT1sLm5vZGVUeXBlfHwoaD1mK2QpO2whPT1lfHwwIT09YyYmMyE9PWwubm9kZVR5cGV8fChnPWYrYyk7Mz09PWwubm9kZVR5cGUmJihmKz1sLm5vZGVWYWx1ZS5sZW5ndGgpO2lmKG51bGw9PT0oej1sLmZpcnN0Q2hpbGQpKWJyZWFrO3A9bDtsPXp9Zm9yKDs7KXtpZihsPT09YSlicmVhayBiO3A9PT1iJiYrK2s9PT1kJiYoaD1mKTtwPT09ZSYmKyt2PT09YyYmKGc9Zik7aWYobnVsbCE9PSh6PWwubmV4dFNpYmxpbmcpKWJyZWFrO2w9cDtwPWwucGFyZW50Tm9kZX1sPXp9Yj0tMT09PWh8fC0xPT09Zz9udWxsOlxue3N0YXJ0OmgsZW5kOmd9fWVsc2UgYj1udWxsfWI9Ynx8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgYj1udWxsO3FnPXtmb2N1c2VkRWxlbTphLHNlbGVjdGlvblJhbmdlOmJ9O1dkKCExKX0scmVzZXRBZnRlckNvbW1pdDpmdW5jdGlvbigpe3ZhciBhPXFnLGI9ZmEoKSxjPWEuZm9jdXNlZEVsZW0sZD1hLnNlbGVjdGlvblJhbmdlO2lmKGIhPT1jJiZqYShkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsYykpe2lmKG5lKGMpKWlmKGI9ZC5zdGFydCxhPWQuZW5kLHZvaWQgMD09PWEmJihhPWIpLFwic2VsZWN0aW9uU3RhcnRcImluIGMpYy5zZWxlY3Rpb25TdGFydD1iLGMuc2VsZWN0aW9uRW5kPU1hdGgubWluKGEsYy52YWx1ZS5sZW5ndGgpO2Vsc2UgaWYod2luZG93LmdldFNlbGVjdGlvbil7Yj13aW5kb3cuZ2V0U2VsZWN0aW9uKCk7dmFyIGU9Y1ttYigpXS5sZW5ndGg7YT1NYXRoLm1pbihkLnN0YXJ0LGUpO2Q9dm9pZCAwPT09ZC5lbmQ/YTpNYXRoLm1pbihkLmVuZCxlKTshYi5leHRlbmQmJmE+XG5kJiYoZT1kLGQ9YSxhPWUpO2U9bWUoYyxhKTt2YXIgZj1tZShjLGQpO2lmKGUmJmYmJigxIT09Yi5yYW5nZUNvdW50fHxiLmFuY2hvck5vZGUhPT1lLm5vZGV8fGIuYW5jaG9yT2Zmc2V0IT09ZS5vZmZzZXR8fGIuZm9jdXNOb2RlIT09Zi5ub2RlfHxiLmZvY3VzT2Zmc2V0IT09Zi5vZmZzZXQpKXt2YXIgaD1kb2N1bWVudC5jcmVhdGVSYW5nZSgpO2guc2V0U3RhcnQoZS5ub2RlLGUub2Zmc2V0KTtiLnJlbW92ZUFsbFJhbmdlcygpO2E+ZD8oYi5hZGRSYW5nZShoKSxiLmV4dGVuZChmLm5vZGUsZi5vZmZzZXQpKTooaC5zZXRFbmQoZi5ub2RlLGYub2Zmc2V0KSxiLmFkZFJhbmdlKGgpKX19Yj1bXTtmb3IoYT1jO2E9YS5wYXJlbnROb2RlOykxPT09YS5ub2RlVHlwZSYmYi5wdXNoKHtlbGVtZW50OmEsbGVmdDphLnNjcm9sbExlZnQsdG9wOmEuc2Nyb2xsVG9wfSk7Yy5mb2N1cygpO2ZvcihjPTA7YzxiLmxlbmd0aDtjKyspYT1iW2NdLGEuZWxlbWVudC5zY3JvbGxMZWZ0PWEubGVmdCxcbmEuZWxlbWVudC5zY3JvbGxUb3A9YS50b3B9cWc9bnVsbDtXZChwZyk7cGc9bnVsbH0sY3JlYXRlSW5zdGFuY2U6ZnVuY3Rpb24oYSxiLGMsZCxlKXthPWFnKGEsYixjLGQpO2FbRl09ZTthW1RhXT1iO3JldHVybiBhfSxhcHBlbmRJbml0aWFsQ2hpbGQ6ZnVuY3Rpb24oYSxiKXthLmFwcGVuZENoaWxkKGIpfSxmaW5hbGl6ZUluaXRpYWxDaGlsZHJlbjpmdW5jdGlvbihhLGIsYyxkKXtjZyhhLGIsYyxkKTtyZXR1cm4gdmcoYixjKX0scHJlcGFyZVVwZGF0ZTpmdW5jdGlvbihhLGIsYyxkLGUpe3JldHVybiBkZyhhLGIsYyxkLGUpfSxzaG91bGRTZXRUZXh0Q29udGVudDpmdW5jdGlvbihhLGIpe3JldHVyblwidGV4dGFyZWFcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcInN0cmluZ1wiPT09XG50eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWx9LHNob3VsZERlcHJpb3JpdGl6ZVN1YnRyZWU6ZnVuY3Rpb24oYSxiKXtyZXR1cm4hIWIuaGlkZGVufSxjcmVhdGVUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oYSxiLGMsZCl7YT1iZyhhLGIpO2FbRl09ZDtyZXR1cm4gYX0sbm93OnNmLG11dGF0aW9uOntjb21taXRNb3VudDpmdW5jdGlvbihhLGIsYyl7dmcoYixjKSYmYS5mb2N1cygpfSxjb21taXRVcGRhdGU6ZnVuY3Rpb24oYSxiLGMsZCxlKXthW1RhXT1lO2VnKGEsYixjLGQsZSl9LHJlc2V0VGV4dENvbnRlbnQ6ZnVuY3Rpb24oYSl7U2YoYSxcIlwiKX0sY29tbWl0VGV4dFVwZGF0ZTpmdW5jdGlvbihhLGIsYyl7YS5ub2RlVmFsdWU9Y30sYXBwZW5kQ2hpbGQ6ZnVuY3Rpb24oYSxiKXthLmFwcGVuZENoaWxkKGIpfSxhcHBlbmRDaGlsZFRvQ29udGFpbmVyOmZ1bmN0aW9uKGEsYil7OD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShiLGEpOmEuYXBwZW5kQ2hpbGQoYil9LFxuaW5zZXJ0QmVmb3JlOmZ1bmN0aW9uKGEsYixjKXthLmluc2VydEJlZm9yZShiLGMpfSxpbnNlcnRJbkNvbnRhaW5lckJlZm9yZTpmdW5jdGlvbihhLGIsYyl7OD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShiLGMpOmEuaW5zZXJ0QmVmb3JlKGIsYyl9LHJlbW92ZUNoaWxkOmZ1bmN0aW9uKGEsYil7YS5yZW1vdmVDaGlsZChiKX0scmVtb3ZlQ2hpbGRGcm9tQ29udGFpbmVyOmZ1bmN0aW9uKGEsYil7OD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGIpOmEucmVtb3ZlQ2hpbGQoYil9fSxoeWRyYXRpb246e2Nhbkh5ZHJhdGVJbnN0YW5jZTpmdW5jdGlvbihhLGIpe3JldHVybiAxIT09YS5ub2RlVHlwZXx8Yi50b0xvd2VyQ2FzZSgpIT09YS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpP251bGw6YX0sY2FuSHlkcmF0ZVRleHRJbnN0YW5jZTpmdW5jdGlvbihhLGIpe3JldHVyblwiXCI9PT1ifHwzIT09YS5ub2RlVHlwZT9udWxsOmF9LGdldE5leHRIeWRyYXRhYmxlU2libGluZzpmdW5jdGlvbihhKXtmb3IoYT1cbmEubmV4dFNpYmxpbmc7YSYmMSE9PWEubm9kZVR5cGUmJjMhPT1hLm5vZGVUeXBlOylhPWEubmV4dFNpYmxpbmc7cmV0dXJuIGF9LGdldEZpcnN0SHlkcmF0YWJsZUNoaWxkOmZ1bmN0aW9uKGEpe2ZvcihhPWEuZmlyc3RDaGlsZDthJiYxIT09YS5ub2RlVHlwZSYmMyE9PWEubm9kZVR5cGU7KWE9YS5uZXh0U2libGluZztyZXR1cm4gYX0saHlkcmF0ZUluc3RhbmNlOmZ1bmN0aW9uKGEsYixjLGQsZSxmKXthW0ZdPWY7YVtUYV09YztyZXR1cm4gZmcoYSxiLGMsZSxkKX0saHlkcmF0ZVRleHRJbnN0YW5jZTpmdW5jdGlvbihhLGIsYyl7YVtGXT1jO3JldHVybiBuZyhhLGIpfSxkaWROb3RNYXRjaEh5ZHJhdGVkQ29udGFpbmVyVGV4dEluc3RhbmNlOmZ1bmN0aW9uKCl7fSxkaWROb3RNYXRjaEh5ZHJhdGVkVGV4dEluc3RhbmNlOmZ1bmN0aW9uKCl7fSxkaWROb3RIeWRyYXRlQ29udGFpbmVySW5zdGFuY2U6ZnVuY3Rpb24oKXt9LGRpZE5vdEh5ZHJhdGVJbnN0YW5jZTpmdW5jdGlvbigpe30sXG5kaWROb3RGaW5kSHlkcmF0YWJsZUNvbnRhaW5lckluc3RhbmNlOmZ1bmN0aW9uKCl7fSxkaWROb3RGaW5kSHlkcmF0YWJsZUNvbnRhaW5lclRleHRJbnN0YW5jZTpmdW5jdGlvbigpe30sZGlkTm90RmluZEh5ZHJhdGFibGVJbnN0YW5jZTpmdW5jdGlvbigpe30sZGlkTm90RmluZEh5ZHJhdGFibGVUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oKXt9fSxzY2hlZHVsZURlZmVycmVkQ2FsbGJhY2s6dGYsY2FuY2VsRGVmZXJyZWRDYWxsYmFjazp1Zn0pLENnPVg7YWM9Q2cuYmF0Y2hlZFVwZGF0ZXM7YmM9Q2cuaW50ZXJhY3RpdmVVcGRhdGVzO2NjPUNnLmZsdXNoSW50ZXJhY3RpdmVVcGRhdGVzO1xuZnVuY3Rpb24gRGcoYSxiKXtifHwoYj1hPzk9PT1hLm5vZGVUeXBlP2EuZG9jdW1lbnRFbGVtZW50OmEuZmlyc3RDaGlsZDpudWxsLGI9ISghYnx8MSE9PWIubm9kZVR5cGV8fCFiLmhhc0F0dHJpYnV0ZShcImRhdGEtcmVhY3Ryb290XCIpKSk7aWYoIWIpZm9yKHZhciBjO2M9YS5sYXN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYyk7cmV0dXJuIG5ldyB0ZyhhLCExLGIpfVxuZnVuY3Rpb24gRWcoYSxiLGMsZCxlKXt1ZyhjKT92b2lkIDA6RChcIjIwMFwiKTt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXI7aWYoZil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBoPWU7ZT1mdW5jdGlvbigpe3ZhciBhPVguZ2V0UHVibGljUm9vdEluc3RhbmNlKGYuX2ludGVybmFsUm9vdCk7aC5jYWxsKGEpfX1udWxsIT1hP2YubGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKGEsYixlKTpmLnJlbmRlcihiLGUpfWVsc2V7Zj1jLl9yZWFjdFJvb3RDb250YWluZXI9RGcoYyxkKTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGc9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9WC5nZXRQdWJsaWNSb290SW5zdGFuY2UoZi5faW50ZXJuYWxSb290KTtnLmNhbGwoYSl9fVgudW5iYXRjaGVkVXBkYXRlcyhmdW5jdGlvbigpe251bGwhPWE/Zi5sZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIoYSxiLGUpOmYucmVuZGVyKGIsZSl9KX1yZXR1cm4gWC5nZXRQdWJsaWNSb290SW5zdGFuY2UoZi5faW50ZXJuYWxSb290KX1cbmZ1bmN0aW9uIEZnKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7dWcoYik/dm9pZCAwOkQoXCIyMDBcIik7cmV0dXJuIHFmKGEsYixudWxsLGMpfVxudmFyIEdnPXtjcmVhdGVQb3J0YWw6RmcsZmluZERPTU5vZGU6ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGw9PWE/bnVsbDoxPT09YS5ub2RlVHlwZT9hOlguZmluZEhvc3RJbnN0YW5jZShhKX0saHlkcmF0ZTpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIEVnKG51bGwsYSxiLCEwLGMpfSxyZW5kZXI6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBFZyhudWxsLGEsYiwhMSxjKX0sdW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI6ZnVuY3Rpb24oYSxiLGMsZCl7bnVsbD09YXx8dm9pZCAwPT09YS5fcmVhY3RJbnRlcm5hbEZpYmVyP0QoXCIzOFwiKTp2b2lkIDA7cmV0dXJuIEVnKGEsYixjLCExLGQpfSx1bm1vdW50Q29tcG9uZW50QXROb2RlOmZ1bmN0aW9uKGEpe3VnKGEpP3ZvaWQgMDpEKFwiNDBcIik7cmV0dXJuIGEuX3JlYWN0Um9vdENvbnRhaW5lcj8oWC51bmJhdGNoZWRVcGRhdGVzKGZ1bmN0aW9uKCl7RWcobnVsbCxudWxsLGEsITEsZnVuY3Rpb24oKXthLl9yZWFjdFJvb3RDb250YWluZXI9XG5udWxsfSl9KSwhMCk6ITF9LHVuc3RhYmxlX2NyZWF0ZVBvcnRhbDpmdW5jdGlvbigpe3JldHVybiBGZy5hcHBseSh2b2lkIDAsYXJndW1lbnRzKX0sdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM6WC5iYXRjaGVkVXBkYXRlcyx1bnN0YWJsZV9kZWZlcnJlZFVwZGF0ZXM6WC5kZWZlcnJlZFVwZGF0ZXMsZmx1c2hTeW5jOlguZmx1c2hTeW5jLHVuc3RhYmxlX2ZsdXNoQ29udHJvbGxlZDpYLmZsdXNoQ29udHJvbGxlZCxfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDp7RXZlbnRQbHVnaW5IdWI6UmEsRXZlbnRQbHVnaW5SZWdpc3RyeTpDYSxFdmVudFByb3BhZ2F0b3JzOmtiLFJlYWN0Q29udHJvbGxlZENvbXBvbmVudDokYixSZWFjdERPTUNvbXBvbmVudFRyZWU6YmIsUmVhY3RET01FdmVudExpc3RlbmVyOiRkfSx1bnN0YWJsZV9jcmVhdGVSb290OmZ1bmN0aW9uKGEsYil7cmV0dXJuIG5ldyB0ZyhhLCEwLG51bGwhPWImJiEwPT09Yi5oeWRyYXRlKX19O1xuWC5pbmplY3RJbnRvRGV2VG9vbHMoe2ZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOlVhLGJ1bmRsZVR5cGU6MCx2ZXJzaW9uOlwiMTYuMy4yXCIscmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifSk7dmFyIEhnPU9iamVjdC5mcmVlemUoe2RlZmF1bHQ6R2d9KSxJZz1IZyYmR2d8fEhnO21vZHVsZS5leHBvcnRzPUlnW1wiZGVmYXVsdFwiXT9JZ1tcImRlZmF1bHRcIl06SWc7XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjMuMlxuICogcmVhY3QucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIG09cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksbj1yZXF1aXJlKFwiZmJqcy9saWIvaW52YXJpYW50XCIpLHA9cmVxdWlyZShcImZianMvbGliL2VtcHR5T2JqZWN0XCIpLHE9cmVxdWlyZShcImZianMvbGliL2VtcHR5RnVuY3Rpb25cIikscj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2xbXCJmb3JcIl0sdD1yP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsdT1yP1N5bWJvbFtcImZvclwiXShcInJlYWN0LnBvcnRhbFwiKTo2MDEwNix2PXI/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsdz1yP1N5bWJvbFtcImZvclwiXShcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LHg9cj9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSx5PXI/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCx6PXI/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxBPXI/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6XG42MDExMixCPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBDKGEpe2Zvcih2YXIgYj1hcmd1bWVudHMubGVuZ3RoLTEsZT1cImh0dHA6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnRcXHgzZFwiK2EsYz0wO2M8YjtjKyspZSs9XCJcXHgyNmFyZ3NbXVxceDNkXCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjKzFdKTtuKCExLFwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0ICVzIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4gXCIsZSl9dmFyIEQ9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319O1xuZnVuY3Rpb24gRShhLGIsZSl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1wO3RoaXMudXBkYXRlcj1lfHxEfUUucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9e307RS5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYSxiKXtcIm9iamVjdFwiIT09dHlwZW9mIGEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZudWxsIT1hP0MoXCI4NVwiKTp2b2lkIDA7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtFLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtmdW5jdGlvbiBGKCl7fUYucHJvdG90eXBlPUUucHJvdG90eXBlO2Z1bmN0aW9uIEcoYSxiLGUpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9cDt0aGlzLnVwZGF0ZXI9ZXx8RH12YXIgSD1HLnByb3RvdHlwZT1uZXcgRjtcbkguY29uc3RydWN0b3I9RzttKEgsRS5wcm90b3R5cGUpO0guaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEk9e2N1cnJlbnQ6bnVsbH0sSj1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEs9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIEwoYSxiLGUpe3ZhciBjPXZvaWQgMCxkPXt9LGc9bnVsbCxoPW51bGw7aWYobnVsbCE9Yilmb3IoYyBpbiB2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYpLHZvaWQgMCE9PWIua2V5JiYoZz1cIlwiK2Iua2V5KSxiKUouY2FsbChiLGMpJiYhSy5oYXNPd25Qcm9wZXJ0eShjKSYmKGRbY109YltjXSk7dmFyIGY9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1mKWQuY2hpbGRyZW49ZTtlbHNlIGlmKDE8Zil7Zm9yKHZhciBrPUFycmF5KGYpLGw9MDtsPGY7bCsrKWtbbF09YXJndW1lbnRzW2wrMl07ZC5jaGlsZHJlbj1rfWlmKGEmJmEuZGVmYXVsdFByb3BzKWZvcihjIGluIGY9YS5kZWZhdWx0UHJvcHMsZil2b2lkIDA9PT1kW2NdJiYoZFtjXT1mW2NdKTtyZXR1cm57JCR0eXBlb2Y6dCx0eXBlOmEsa2V5OmcscmVmOmgscHJvcHM6ZCxfb3duZXI6SS5jdXJyZW50fX1cbmZ1bmN0aW9uIE0oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PXR9ZnVuY3Rpb24gZXNjYXBlKGEpe3ZhciBiPXtcIlxceDNkXCI6XCJcXHgzZDBcIixcIjpcIjpcIlxceDNkMlwifTtyZXR1cm5cIiRcIisoXCJcIithKS5yZXBsYWNlKC9bPTpdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV19KX12YXIgTj0vXFwvKy9nLE89W107ZnVuY3Rpb24gUChhLGIsZSxjKXtpZihPLmxlbmd0aCl7dmFyIGQ9Ty5wb3AoKTtkLnJlc3VsdD1hO2Qua2V5UHJlZml4PWI7ZC5mdW5jPWU7ZC5jb250ZXh0PWM7ZC5jb3VudD0wO3JldHVybiBkfXJldHVybntyZXN1bHQ6YSxrZXlQcmVmaXg6YixmdW5jOmUsY29udGV4dDpjLGNvdW50OjB9fWZ1bmN0aW9uIFEoYSl7YS5yZXN1bHQ9bnVsbDthLmtleVByZWZpeD1udWxsO2EuZnVuYz1udWxsO2EuY29udGV4dD1udWxsO2EuY291bnQ9MDsxMD5PLmxlbmd0aCYmTy5wdXNoKGEpfVxuZnVuY3Rpb24gUihhLGIsZSxjKXt2YXIgZD10eXBlb2YgYTtpZihcInVuZGVmaW5lZFwiPT09ZHx8XCJib29sZWFuXCI9PT1kKWE9bnVsbDt2YXIgZz0hMTtpZihudWxsPT09YSlnPSEwO2Vsc2Ugc3dpdGNoKGQpe2Nhc2UgXCJzdHJpbmdcIjpjYXNlIFwibnVtYmVyXCI6Zz0hMDticmVhaztjYXNlIFwib2JqZWN0XCI6c3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgdDpjYXNlIHU6Zz0hMH19aWYoZylyZXR1cm4gZShjLGEsXCJcIj09PWI/XCIuXCIrUyhhLDApOmIpLDE7Zz0wO2I9XCJcIj09PWI/XCIuXCI6YitcIjpcIjtpZihBcnJheS5pc0FycmF5KGEpKWZvcih2YXIgaD0wO2g8YS5sZW5ndGg7aCsrKXtkPWFbaF07dmFyIGY9YitTKGQsaCk7Zys9UihkLGYsZSxjKX1lbHNlIGlmKG51bGw9PT1hfHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGE/Zj1udWxsOihmPUImJmFbQl18fGFbXCJAQGl0ZXJhdG9yXCJdLGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIGY/ZjpudWxsKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZilmb3IoYT1mLmNhbGwoYSksXG5oPTA7IShkPWEubmV4dCgpKS5kb25lOylkPWQudmFsdWUsZj1iK1MoZCxoKyspLGcrPVIoZCxmLGUsYyk7ZWxzZVwib2JqZWN0XCI9PT1kJiYoZT1cIlwiK2EsQyhcIjMxXCIsXCJbb2JqZWN0IE9iamVjdF1cIj09PWU/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6ZSxcIlwiKSk7cmV0dXJuIGd9ZnVuY3Rpb24gUyhhLGIpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJm51bGwhPWEua2V5P2VzY2FwZShhLmtleSk6Yi50b1N0cmluZygzNil9ZnVuY3Rpb24gVChhLGIpe2EuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyl9XG5mdW5jdGlvbiBVKGEsYixlKXt2YXIgYz1hLnJlc3VsdCxkPWEua2V5UHJlZml4O2E9YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKTtBcnJheS5pc0FycmF5KGEpP1YoYSxjLGUscS50aGF0UmV0dXJuc0FyZ3VtZW50KTpudWxsIT1hJiYoTShhKSYmKGI9ZCsoIWEua2V5fHxiJiZiLmtleT09PWEua2V5P1wiXCI6KFwiXCIrYS5rZXkpLnJlcGxhY2UoTixcIiRcXHgyNi9cIikrXCIvXCIpK2UsYT17JCR0eXBlb2Y6dCx0eXBlOmEudHlwZSxrZXk6YixyZWY6YS5yZWYscHJvcHM6YS5wcm9wcyxfb3duZXI6YS5fb3duZXJ9KSxjLnB1c2goYSkpfWZ1bmN0aW9uIFYoYSxiLGUsYyxkKXt2YXIgZz1cIlwiO251bGwhPWUmJihnPShcIlwiK2UpLnJlcGxhY2UoTixcIiRcXHgyNi9cIikrXCIvXCIpO2I9UChiLGcsYyxkKTtudWxsPT1hfHxSKGEsXCJcIixVLGIpO1EoYil9XG52YXIgVz17Q2hpbGRyZW46e21hcDpmdW5jdGlvbihhLGIsZSl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgYz1bXTtWKGEsYyxudWxsLGIsZSk7cmV0dXJuIGN9LGZvckVhY2g6ZnVuY3Rpb24oYSxiLGUpe2lmKG51bGw9PWEpcmV0dXJuIGE7Yj1QKG51bGwsbnVsbCxiLGUpO251bGw9PWF8fFIoYSxcIlwiLFQsYik7UShiKX0sY291bnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGw9PWE/MDpSKGEsXCJcIixxLnRoYXRSZXR1cm5zTnVsbCxudWxsKX0sdG9BcnJheTpmdW5jdGlvbihhKXt2YXIgYj1bXTtWKGEsYixudWxsLHEudGhhdFJldHVybnNBcmd1bWVudCk7cmV0dXJuIGJ9LG9ubHk6ZnVuY3Rpb24oYSl7TShhKT92b2lkIDA6QyhcIjE0M1wiKTtyZXR1cm4gYX19LGNyZWF0ZVJlZjpmdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fSxDb21wb25lbnQ6RSxQdXJlQ29tcG9uZW50OkcsY3JlYXRlQ29udGV4dDpmdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPW51bGwpO2E9eyQkdHlwZW9mOnksXG5fY2FsY3VsYXRlQ2hhbmdlZEJpdHM6YixfZGVmYXVsdFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTphLF9jaGFuZ2VkQml0czowLFByb3ZpZGVyOm51bGwsQ29uc3VtZXI6bnVsbH07YS5Qcm92aWRlcj17JCR0eXBlb2Y6eCxfY29udGV4dDphfTtyZXR1cm4gYS5Db25zdW1lcj1hfSxmb3J3YXJkUmVmOmZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjpBLHJlbmRlcjphfX0sRnJhZ21lbnQ6dixTdHJpY3RNb2RlOncsdW5zdGFibGVfQXN5bmNNb2RlOnosY3JlYXRlRWxlbWVudDpMLGNsb25lRWxlbWVudDpmdW5jdGlvbihhLGIsZSl7bnVsbD09PWF8fHZvaWQgMD09PWE/QyhcIjI2N1wiLGEpOnZvaWQgMDt2YXIgYz12b2lkIDAsZD1tKHt9LGEucHJvcHMpLGc9YS5rZXksaD1hLnJlZixmPWEuX293bmVyO2lmKG51bGwhPWIpe3ZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZixmPUkuY3VycmVudCk7dm9pZCAwIT09Yi5rZXkmJihnPVwiXCIrYi5rZXkpO3ZhciBrPXZvaWQgMDthLnR5cGUmJmEudHlwZS5kZWZhdWx0UHJvcHMmJlxuKGs9YS50eXBlLmRlZmF1bHRQcm9wcyk7Zm9yKGMgaW4gYilKLmNhbGwoYixjKSYmIUsuaGFzT3duUHJvcGVydHkoYykmJihkW2NdPXZvaWQgMD09PWJbY10mJnZvaWQgMCE9PWs/a1tjXTpiW2NdKX1jPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09YylkLmNoaWxkcmVuPWU7ZWxzZSBpZigxPGMpe2s9QXJyYXkoYyk7Zm9yKHZhciBsPTA7bDxjO2wrKylrW2xdPWFyZ3VtZW50c1tsKzJdO2QuY2hpbGRyZW49a31yZXR1cm57JCR0eXBlb2Y6dCx0eXBlOmEudHlwZSxrZXk6ZyxyZWY6aCxwcm9wczpkLF9vd25lcjpmfX0sY3JlYXRlRmFjdG9yeTpmdW5jdGlvbihhKXt2YXIgYj1MLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn0saXNWYWxpZEVsZW1lbnQ6TSx2ZXJzaW9uOlwiMTYuMy4yXCIsX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ6e1JlYWN0Q3VycmVudE93bmVyOkksYXNzaWduOm19fSxYPU9iamVjdC5mcmVlemUoe2RlZmF1bHQ6V30pLFxuWT1YJiZXfHxYO21vZHVsZS5leHBvcnRzPVlbXCJkZWZhdWx0XCJdP1lbXCJkZWZhdWx0XCJdOlk7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcclxuXHJcbmltcG9ydCAnYmFiZWwtcG9seWZpbGwnO1xyXG5cclxuaW1wb3J0IEJhc2UgZnJvbSAnLi9zY3JlZW5zL0Jhc2UuanMnO1xyXG5cclxuLy8gJ3JlYWN0LXRhcC1ldmVudC1wbHVnaW4n44KS44Kk44Oz44K544OI44O844Or44GX44Gf5aC05ZCI44CB5Lul5LiL44Gu44Kz44Oh44Oz44OI44KS5aSW44GZXHJcbi8vaW1wb3J0IGluamVjdFRhcEV2ZW50UGx1Z2luIGZyb20gJ3JlYWN0LXRhcC1ldmVudC1wbHVnaW4nO1xyXG4vL2luamVjdFRhcEV2ZW50UGx1Z2luKCk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBcHAgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxCYXNlIC8+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG5cclxuUmVhY3RET00ucmVuZGVyKFxyXG4gICAgPEFwcCAvPixcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhcHAnKVxyXG4pO1xyXG4iLCIvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG5leHBvcnQgZGVmYXVsdCBmcmVlR2xvYmFsO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==