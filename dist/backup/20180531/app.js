!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=435)}([function(e,t,n){"use strict";n.d(t,"x",function(){return i}),n.d(t,"e",function(){return a}),n.d(t,"b",function(){return c}),n.d(t,"a",function(){return s}),n.d(t,"c",function(){return l}),n.d(t,"d",function(){return f}),n.d(t,"r",function(){return d}),n.d(t,"u",function(){return h}),n.d(t,"o",function(){return v}),n.d(t,"h",function(){return y}),n.d(t,"q",function(){return m}),n.d(t,"v",function(){return x}),n.d(t,"w",function(){return _}),n.d(t,"f",function(){return w}),n.d(t,"l",function(){return O}),n.d(t,"g",function(){return S}),n.d(t,"m",function(){return E}),n.d(t,"j",function(){return k}),n.d(t,"y",function(){return T}),n.d(t,"t",function(){return P}),n.d(t,"s",function(){return A}),n.d(t,"n",function(){return M}),n.d(t,"z",function(){return D}),n.d(t,"p",function(){return B}),n.d(t,"k",function(){return N}),n.d(t,"A",function(){return L}),n.d(t,"i",function(){return I});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i=function(e){return"@@redux-saga/"+e},a=i("TASK"),u=i("HELPER"),c=i("MATCH"),s=i("CANCEL_PROMISE"),l=i("SAGA_ACTION"),f=i("SELF_CANCELLATION"),p=function(e){return function(){return e}},d=p(!0),h=function(){},v=function(e){return e};function y(e,t,n){if(!t(e))throw A("error","uncaught at check",n),new Error(n)}var g=Object.prototype.hasOwnProperty;function b(e,t){return m.notUndef(e)&&g.call(e,t)}var m={undef:function(e){return null===e||void 0===e},notUndef:function(e){return null!==e&&void 0!==e},func:function(e){return"function"==typeof e},number:function(e){return"number"==typeof e},string:function(e){return"string"==typeof e},array:Array.isArray,object:function(e){return e&&!m.array(e)&&"object"===(void 0===e?"undefined":o(e))},promise:function(e){return e&&m.func(e.then)},iterator:function(e){return e&&m.func(e.next)&&m.func(e.throw)},iterable:function(e){return e&&m.func(Symbol)?m.func(e[Symbol.iterator]):m.array(e)},task:function(e){return e&&e[a]},observable:function(e){return e&&m.func(e.subscribe)},buffer:function(e){return e&&m.func(e.isEmpty)&&m.func(e.take)&&m.func(e.put)},pattern:function(e){return e&&(m.string(e)||"symbol"===(void 0===e?"undefined":o(e))||m.func(e)||m.array(e))},channel:function(e){return e&&m.func(e.take)&&m.func(e.close)},helper:function(e){return e&&e[u]},stringableFunc:function(e){return m.func(e)&&b(e,"toString")}},x={assign:function(e,t){for(var n in t)b(t,n)&&(e[n]=t[n])}};function _(e,t){var n=e.indexOf(t);n>=0&&e.splice(n,1)}var w={from:function(e){var t=Array(e.length);for(var n in e)b(e,n)&&(t[n]=e[n]);return t}};function O(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=r({},e),n=new Promise(function(e,n){t.resolve=e,t.reject=n});return t.promise=n,t}function S(e){for(var t=[],n=0;n<e;n++)t.push(O());return t}function E(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=void 0,r=new Promise(function(r){n=setTimeout(function(){return r(t)},e)});return r[s]=function(){return clearTimeout(n)},r}function k(){var e,t=!0,n=void 0,r=void 0;return(e={})[a]=!0,e.isRunning=function(){return t},e.result=function(){return n},e.error=function(){return r},e.setRunning=function(e){return t=e},e.setResult=function(e){return n=e},e.setError=function(e){return r=e},e}var T=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return function(){return++e}}(),C=function(e){throw e},j=function(e){return{value:e,done:!0}};function P(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:C,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",r=arguments[3],o={name:n,next:e,throw:t,return:j};return r&&(o[u]=!0),"undefined"!=typeof Symbol&&(o[Symbol.iterator]=function(){return o}),o}function A(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";"undefined"==typeof window?console.log("redux-saga "+e+": "+t+"\n"+(n&&n.stack||n)):console[e](t,n)}function M(e,t){return function(){return e.apply(void 0,arguments)}}var D=function(e,t){return e+" has been deprecated in favor of "+t+", please update your code"},B=function(e){return new Error("\n  redux-saga: Error checking hooks detected an inconsistent state. This is likely a bug\n  in redux-saga code and not yours. Thanks for reporting this in the project's github repo.\n  Error: "+e+"\n")},N=function(e,t){return(e?e+".":"")+"setContext(props): argument "+t+" is not a plain object"},L=function(e){return function(t){return e(Object.defineProperty(t,l,{value:!0}))}},I=function e(t){return function(){for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var i=[],a=t.apply(void 0,r);return{next:function(e){return i.push(e),a.next(e)},clone:function(){var n=e(t).apply(void 0,r);return i.forEach(function(e){return n.next(e)}),n},return:function(e){return a.return(e)},throw:function(e){return a.throw(e)}}}}},function(e,t,n){var r=n(4),o=n(28),i=n(19),a=n(18),u=n(27),c=function(e,t,n){var s,l,f,p,d=e&c.F,h=e&c.G,v=e&c.S,y=e&c.P,g=e&c.B,b=h?r:v?r[t]||(r[t]={}):(r[t]||{}).prototype,m=h?o:o[t]||(o[t]={}),x=m.prototype||(m.prototype={});for(s in h&&(n=t),n)f=((l=!d&&b&&void 0!==b[s])?b:n)[s],p=g&&l?u(f,r):y&&"function"==typeof f?u(Function.call,f):f,b&&a(b,s,f,e&c.U),m[s]!=f&&i(m,s,p),y&&x[s]!=f&&(x[s]=f)};r.core=o,c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,c.U=64,c.R=128,e.exports=c},function(e,t,n){"use strict";n.d(t,"i",function(){return O}),n.d(t,"s",function(){return S}),n.d(t,"v",function(){return E}),n.d(t,"n",function(){return k}),n.d(t,"b",function(){return T}),n.d(t,"o",function(){return C}),n.d(t,"e",function(){return P}),n.d(t,"c",function(){return A}),n.d(t,"h",function(){return M}),n.d(t,"k",function(){return D}),n.d(t,"r",function(){return B}),n.d(t,"m",function(){return N}),n.d(t,"f",function(){return L}),n.d(t,"p",function(){return I}),n.d(t,"a",function(){return R}),n.d(t,"g",function(){return U}),n.d(t,"j",function(){return z}),n.d(t,"l",function(){return F}),n.d(t,"q",function(){return X}),n.d(t,"t",function(){return G}),n.d(t,"u",function(){return H}),n.d(t,"w",function(){return W}),n.d(t,"d",function(){return V});var r=n(0),o=n(41),i=Object(r.x)("IO"),a="TAKE",u="PUT",c="ALL",s="RACE",l="CALL",f="CPS",p="FORK",d="JOIN",h="CANCEL",v="SELECT",y="ACTION_CHANNEL",g="CANCELLED",b="FLUSH",m="GET_CONTEXT",x="SET_CONTEXT",_="\n(HINT: if you are getting this errors in tests, consider using createMockTask from redux-saga/utils)",w=function(e,t){var n;return(n={})[i]=!0,n[e]=t,n},O=function(e){return Object(r.h)(V.fork(e),r.q.object,"detach(eff): argument must be a fork effect"),e[p].detached=!0,e};function S(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"*";if(arguments.length&&Object(r.h)(arguments[0],r.q.notUndef,"take(patternOrChannel): patternOrChannel is undefined"),r.q.pattern(e))return w(a,{pattern:e});if(r.q.channel(e))return w(a,{channel:e});throw new Error("take(patternOrChannel): argument "+String(e)+" is not valid channel or a valid pattern")}S.maybe=function(){var e=S.apply(void 0,arguments);return e[a].maybe=!0,e};var E=Object(r.n)(S.maybe,Object(r.z)("takem","take.maybe"));function k(e,t){return arguments.length>1?(Object(r.h)(e,r.q.notUndef,"put(channel, action): argument channel is undefined"),Object(r.h)(e,r.q.channel,"put(channel, action): argument "+e+" is not a valid channel"),Object(r.h)(t,r.q.notUndef,"put(channel, action): argument action is undefined")):(Object(r.h)(e,r.q.notUndef,"put(action): argument action is undefined"),t=e,e=null),w(u,{channel:e,action:t})}function T(e){return w(c,e)}function C(e){return w(s,e)}function j(e,t,n){Object(r.h)(t,r.q.notUndef,e+": argument fn is undefined");var o=null;if(r.q.array(t)){var i=t;o=i[0],t=i[1]}else if(t.fn){var a=t;o=a.context,t=a.fn}return o&&r.q.string(t)&&r.q.func(o[t])&&(t=o[t]),Object(r.h)(t,r.q.func,e+": argument "+t+" is not a function"),{context:o,fn:t,args:n}}function P(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return w(l,j("call",e,n))}function A(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[];return w(l,j("apply",{context:e,fn:t},n))}function M(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return w(f,j("cps",e,n))}function D(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return w(p,j("fork",e,n))}function B(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return O(D.apply(void 0,[e].concat(n)))}function N(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];if(t.length>1)return T(t.map(function(e){return N(e)}));var o=t[0];return Object(r.h)(o,r.q.notUndef,"join(task): argument task is undefined"),Object(r.h)(o,r.q.task,"join(task): argument "+o+" is not a valid Task object "+_),w(d,o)}function L(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];if(t.length>1)return T(t.map(function(e){return L(e)}));var o=t[0];return 1===t.length&&(Object(r.h)(o,r.q.notUndef,"cancel(task): argument task is undefined"),Object(r.h)(o,r.q.task,"cancel(task): argument "+o+" is not a valid Task object "+_)),w(h,o||r.d)}function I(e){for(var t=arguments.length,n=Array(t>1?t-1:0),o=1;o<t;o++)n[o-1]=arguments[o];return 0===arguments.length?e=r.o:(Object(r.h)(e,r.q.notUndef,"select(selector,[...]): argument selector is undefined"),Object(r.h)(e,r.q.func,"select(selector,[...]): argument "+e+" is not a function")),w(v,{selector:e,args:n})}function R(e,t){return Object(r.h)(e,r.q.notUndef,"actionChannel(pattern,...): argument pattern is undefined"),arguments.length>1&&(Object(r.h)(t,r.q.notUndef,"actionChannel(pattern, buffer): argument buffer is undefined"),Object(r.h)(t,r.q.buffer,"actionChannel(pattern, buffer): argument "+t+" is not a valid buffer")),w(y,{pattern:e,buffer:t})}function U(){return w(g,{})}function z(e){return Object(r.h)(e,r.q.channel,"flush(channel): argument "+e+" is not valid channel"),w(b,e)}function F(e){return Object(r.h)(e,r.q.string,"getContext(prop): argument "+e+" is not a string"),w(m,e)}function X(e){return Object(r.h)(e,r.q.object,Object(r.k)(null,e)),w(x,e)}function G(e,t){for(var n=arguments.length,r=Array(n>2?n-2:0),i=2;i<n;i++)r[i-2]=arguments[i];return D.apply(void 0,[o.b,e,t].concat(r))}function H(e,t){for(var n=arguments.length,r=Array(n>2?n-2:0),i=2;i<n;i++)r[i-2]=arguments[i];return D.apply(void 0,[o.d,e,t].concat(r))}function W(e,t,n){for(var r=arguments.length,i=Array(r>3?r-3:0),a=3;a<r;a++)i[a-3]=arguments[a];return D.apply(void 0,[o.f,e,t,n].concat(i))}k.resolve=function(){var e=k.apply(void 0,arguments);return e[u].resolve=!0,e},k.sync=Object(r.n)(k.resolve,Object(r.z)("put.sync","put.resolve"));var q=function(e){return function(t){return t&&t[i]&&t[e]}},V={take:q(a),put:q(u),all:q(c),race:q(s),call:q(l),cps:q(f),fork:q(p),join:q(d),cancel:q(h),select:q(v),actionChannel:q(y),cancelled:q(g),flush:q(b),getContext:q(m),setContext:q(x)}},function(e,t,n){var r=n(6);e.exports=function(e){if(!r(e))throw TypeError(e+" is not an object!");return e}},function(e,t){var n=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t,n){"use strict";e.exports=n(434)},function(e,t,n){var r=n(81)("wks"),o=n(51),i=n(4).Symbol,a="function"==typeof i;(e.exports=function(e){return r[e]||(r[e]=a&&i[e]||(a?i:o)("Symbol."+e))}).store=r},function(e,t,n){var r=n(32),o=Math.min;e.exports=function(e){return e>0?o(r(e),9007199254740991):0}},function(e,t,n){var r=n(3),o=n(161),i=n(34),a=Object.defineProperty;t.f=n(11)?Object.defineProperty:function(e,t,n){if(r(e),t=i(t,!0),r(n),o)try{return a(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(e[t]=n.value),e}},function(e,t,n){e.exports=!n(5)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(e,t,n){"use strict";n.r(t);var r=n(7),o=n(24),i=n.n(o),a=i.a.shape({trySubscribe:i.a.func.isRequired,tryUnsubscribe:i.a.func.isRequired,notifyNestedSubs:i.a.func.isRequired,isSubscribed:i.a.func.isRequired}),u=i.a.shape({subscribe:i.a.func.isRequired,dispatch:i.a.func.isRequired,getState:i.a.func.isRequired});function c(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"store",n=arguments[1]||t+"Subscription",o=function(e){function o(n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,o);var i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.call(this,n,r));return i[t]=n.store,i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(o,e),o.prototype.getChildContext=function(){var e;return(e={})[t]=this[t],e[n]=null,e},o.prototype.render=function(){return r.Children.only(this.props.children)},o}(r.Component);return o.propTypes={store:u.isRequired,children:i.a.element.isRequired},o.childContextTypes=((e={})[t]=u.isRequired,e[n]=a,e),o}var s=c(),l=n(164),f=n.n(l),p=n(82),d=n.n(p);var h=null,v={notify:function(){}};var y=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.store=t,this.parentSub=n,this.onStateChange=r,this.unsubscribe=null,this.listeners=v}return e.prototype.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},e.prototype.notifyNestedSubs=function(){this.listeners.notify()},e.prototype.isSubscribed=function(){return Boolean(this.unsubscribe)},e.prototype.trySubscribe=function(){var e,t;this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.onStateChange):this.store.subscribe(this.onStateChange),this.listeners=(e=[],t=[],{clear:function(){t=h,e=h},notify:function(){for(var n=e=t,r=0;r<n.length;r++)n[r]()},get:function(){return t},subscribe:function(n){var r=!0;return t===e&&(t=e.slice()),t.push(n),function(){r&&e!==h&&(r=!1,t===e&&(t=e.slice()),t.splice(t.indexOf(n),1))}}}))},e.prototype.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=v)},e}(),g=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var b=0,m={};function x(){}function _(e){var t,n,o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=o.getDisplayName,c=void 0===i?function(e){return"ConnectAdvanced("+e+")"}:i,s=o.methodName,l=void 0===s?"connectAdvanced":s,p=o.renderCountProp,h=void 0===p?void 0:p,v=o.shouldHandleStateChanges,_=void 0===v||v,w=o.storeKey,O=void 0===w?"store":w,S=o.withRef,E=void 0!==S&&S,k=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(o,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef"]),T=O+"Subscription",C=b++,j=((t={})[O]=u,t[T]=a,t),P=((n={})[T]=a,n);return function(t){d()("function"==typeof t,"You must pass a component to the function returned by "+l+". Instead received "+JSON.stringify(t));var n=t.displayName||t.name||"Component",o=c(n),i=g({},k,{getDisplayName:c,methodName:l,renderCountProp:h,shouldHandleStateChanges:_,storeKey:O,withRef:E,displayName:o,wrappedComponentName:n,WrappedComponent:t}),a=function(n){function a(e,t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,n.call(this,e,t));return r.version=C,r.state={},r.renderCount=0,r.store=e[O]||t[O],r.propsMode=Boolean(e[O]),r.setWrappedInstance=r.setWrappedInstance.bind(r),d()(r.store,'Could not find "'+O+'" in either the context or props of "'+o+'". Either wrap the root component in a <Provider>, or explicitly pass "'+O+'" as a prop to "'+o+'".'),r.initSelector(),r.initSubscription(),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(a,n),a.prototype.getChildContext=function(){var e,t=this.propsMode?null:this.subscription;return(e={})[T]=t||this.context[T],e},a.prototype.componentDidMount=function(){_&&(this.subscription.trySubscribe(),this.selector.run(this.props),this.selector.shouldComponentUpdate&&this.forceUpdate())},a.prototype.componentWillReceiveProps=function(e){this.selector.run(e)},a.prototype.shouldComponentUpdate=function(){return this.selector.shouldComponentUpdate},a.prototype.componentWillUnmount=function(){this.subscription&&this.subscription.tryUnsubscribe(),this.subscription=null,this.notifyNestedSubs=x,this.store=null,this.selector.run=x,this.selector.shouldComponentUpdate=!1},a.prototype.getWrappedInstance=function(){return d()(E,"To access the wrapped instance, you need to specify { withRef: true } in the options argument of the "+l+"() call."),this.wrappedInstance},a.prototype.setWrappedInstance=function(e){this.wrappedInstance=e},a.prototype.initSelector=function(){var t=e(this.store.dispatch,i);this.selector=function(e,t){var n={run:function(r){try{var o=e(t.getState(),r);(o!==n.props||n.error)&&(n.shouldComponentUpdate=!0,n.props=o,n.error=null)}catch(e){n.shouldComponentUpdate=!0,n.error=e}}};return n}(t,this.store),this.selector.run(this.props)},a.prototype.initSubscription=function(){if(_){var e=(this.propsMode?this.props:this.context)[T];this.subscription=new y(this.store,e,this.onStateChange.bind(this)),this.notifyNestedSubs=this.subscription.notifyNestedSubs.bind(this.subscription)}},a.prototype.onStateChange=function(){this.selector.run(this.props),this.selector.shouldComponentUpdate?(this.componentDidUpdate=this.notifyNestedSubsOnComponentDidUpdate,this.setState(m)):this.notifyNestedSubs()},a.prototype.notifyNestedSubsOnComponentDidUpdate=function(){this.componentDidUpdate=void 0,this.notifyNestedSubs()},a.prototype.isSubscribed=function(){return Boolean(this.subscription)&&this.subscription.isSubscribed()},a.prototype.addExtraProps=function(e){if(!(E||h||this.propsMode&&this.subscription))return e;var t=g({},e);return E&&(t.ref=this.setWrappedInstance),h&&(t[h]=this.renderCount++),this.propsMode&&this.subscription&&(t[T]=this.subscription),t},a.prototype.render=function(){var e=this.selector;if(e.shouldComponentUpdate=!1,e.error)throw e.error;return Object(r.createElement)(t,this.addExtraProps(e.props))},a}(r.Component);return a.WrappedComponent=t,a.displayName=o,a.childContextTypes=P,a.contextTypes=j,a.propTypes=j,f()(a,t)}}var w=Object.prototype.hasOwnProperty;function O(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function S(e,t){if(O(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!w.call(t,n[o])||!O(e[n[o]],t[n[o]]))return!1;return!0}var E=n(114),k=n(436),T="object"==typeof self&&self&&self.Object===Object&&self,C=(k.a||T||Function("return this")()).Symbol,j=Object.prototype;j.hasOwnProperty,j.toString,C&&C.toStringTag;Object.prototype.toString;C&&C.toStringTag;Object.getPrototypeOf,Object;var P=Function.prototype,A=Object.prototype,M=P.toString;A.hasOwnProperty,M.call(Object);function D(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function B(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function N(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=B(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=B(o),o=r(t,n)),o},r}}var L=[function(e){return"function"==typeof e?N(e):void 0},function(e){return e?void 0:D(function(e){return{dispatch:e}})},function(e){return e&&"object"==typeof e?D(function(t){return Object(E.bindActionCreators)(e,t)}):void 0}];var I=[function(e){return"function"==typeof e?N(e):void 0},function(e){return e?void 0:D(function(){return{}})}],R=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function U(e,t,n){return R({},n,e,t)}var z=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r=n.pure,o=n.areMergedPropsEqual,i=!1,a=void 0;return function(t,n,u){var c=e(t,n,u);return i?r&&o(c,a)||(a=c):(i=!0,a=c),a}}}(e):void 0},function(e){return e?void 0:function(){return U}}];function F(e,t,n,r){return function(o,i){return n(e(o,i),t(r,i),i)}}function X(e,t,n,r,o){var i=o.areStatesEqual,a=o.areOwnPropsEqual,u=o.areStatePropsEqual,c=!1,s=void 0,l=void 0,f=void 0,p=void 0,d=void 0;function h(o,c){var h,v,y=!a(c,l),g=!i(o,s);return s=o,l=c,y&&g?(f=e(s,l),t.dependsOnOwnProps&&(p=t(r,l)),d=n(f,p,l)):y?(e.dependsOnOwnProps&&(f=e(s,l)),t.dependsOnOwnProps&&(p=t(r,l)),d=n(f,p,l)):g?(h=e(s,l),v=!u(h,f),f=h,v&&(d=n(f,p,l)),d):d}return function(o,i){return c?h(o,i):(f=e(s=o,l=i),p=t(r,l),d=n(f,p,l),c=!0,d)}}function G(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,i=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),a=n(e,i),u=r(e,i),c=o(e,i);return(i.pure?X:F)(a,u,c,e,i)}var H=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function W(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function q(e,t){return e===t}var V=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.connectHOC,n=void 0===t?_:t,r=e.mapStateToPropsFactories,o=void 0===r?I:r,i=e.mapDispatchToPropsFactories,a=void 0===i?L:i,u=e.mergePropsFactories,c=void 0===u?z:u,s=e.selectorFactory,l=void 0===s?G:s;return function(e,t,r){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},u=i.pure,s=void 0===u||u,f=i.areStatesEqual,p=void 0===f?q:f,d=i.areOwnPropsEqual,h=void 0===d?S:d,v=i.areStatePropsEqual,y=void 0===v?S:v,g=i.areMergedPropsEqual,b=void 0===g?S:g,m=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(i,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),x=W(e,o,"mapStateToProps"),_=W(t,a,"mapDispatchToProps"),w=W(r,c,"mergeProps");return n(l,H({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:x,initMapDispatchToProps:_,initMergeProps:w,pure:s,areStatesEqual:p,areOwnPropsEqual:h,areStatePropsEqual:y,areMergedPropsEqual:b},m))}}();n.d(t,"Provider",function(){return s}),n.d(t,"createProvider",function(){return c}),n.d(t,"connectAdvanced",function(){return _}),n.d(t,"connect",function(){return V})},function(e,t,n){var r=n(33);e.exports=function(e){return Object(r(e))}},function(e,t,n){"use strict";n.d(t,"a",function(){return u}),n.d(t,"e",function(){return c}),n.d(t,"c",function(){return s}),n.d(t,"b",function(){return p}),n.d(t,"d",function(){return d}),n.d(t,"f",function(){return h});var r=n(0),o=n(37),i=n(57),a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},u={type:"@@redux-saga/CHANNEL_END"},c=function(e){return e&&"@@redux-saga/CHANNEL_END"===e.type};function s(){var e=[];return{subscribe:function(t){return e.push(t),function(){return Object(r.w)(e,t)}},emit:function(t){for(var n=e.slice(),r=0,o=n.length;r<o;r++)n[r](t)}}}var l="invalid buffer passed to channel factory function",f="Saga was provided with an undefined action";function p(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:o.a.fixed(),t=!1,n=[];function i(){if(t&&n.length)throw Object(r.p)("Cannot have a closed channel with pending takers");if(n.length&&!e.isEmpty())throw Object(r.p)("Cannot have pending takers with non empty buffer")}return Object(r.h)(e,r.q.buffer,l),{take:function(o){i(),Object(r.h)(o,r.q.func,"channel.take's callback must be a function"),t&&e.isEmpty()?o(u):e.isEmpty()?(n.push(o),o.cancel=function(){return Object(r.w)(n,o)}):o(e.take())},put:function(o){if(i(),Object(r.h)(o,r.q.notUndef,f),!t){if(!n.length)return e.put(o);for(var a=0;a<n.length;a++){var u=n[a];if(!u[r.b]||u[r.b](o))return n.splice(a,1),u(o)}}},flush:function(n){i(),Object(r.h)(n,r.q.func,"channel.flush' callback must be a function"),t&&e.isEmpty()?n(u):n(e.flush())},close:function(){if(i(),!t&&(t=!0,n.length)){var e=n;n=[];for(var r=0,o=e.length;r<o;r++)e[r](u)}},get __takers__(){return n},get __closed__(){return t}}}function d(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:o.a.none(),n=arguments[2];arguments.length>2&&Object(r.h)(n,r.q.func,"Invalid match function passed to eventChannel");var i=p(t),a=function(){i.__closed__||(u&&u(),i.close())},u=e(function(e){c(e)?a():n&&!n(e)||i.put(e)});if(i.__closed__&&u(),!r.q.func(u))throw new Error("in eventChannel: subscribe should return a function to unsubscribe");return{take:i.take,flush:i.flush,close:a}}function h(e){var t=d(function(t){return e(function(e){e[r.c]?t(e):Object(i.a)(function(){return t(e)})})});return a({},t,{take:function(e,n){arguments.length>1&&(Object(r.h)(n,r.q.func,"channel.take's matcher argument must be a function"),e[r.b]=n),t.take(e)}})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=t.Zahyo={windowArea:function(){return{w:document.documentElement.clientWidth,h:document.documentElement.clientHeight}},luToruX:function(e,t){return t-e},luToruY:function(e,t){return e},ruToluX:function(e,t){return t-e},ruToluY:function(e,t){return e},changeRectToArea:function(e,t,n,r){var o={};return o.x=e,o.y=t,o.w=n-e,o.h=r-t,o},changeAreaToRect:function(e,t,n,r){var o={};return o.x1=e,o.y1=t,o.x2=e+n,o.y2=t+r,o},luToruRect:function(e,t,n,o,i,a){var u={};return u.x1=r.luToruX(n,i),u.y1=r.luToruY(t,a),u.x2=r.luToruX(e,i),u.y2=r.luToruX(o,a),u},ruToluRect:function(e,t,n,o,i,a){var u={};return u.x1=r.ruToluX(n,i),u.y1=r.ruToluY(t,a),u.x2=r.ruToluX(e,i),u.y2=r.ruToluY(o,a),u},luToruArea:function(e,t,n,o,i,a){var u={};return u.x=r.luToruX(e+n,i),u.y=r.luToruY(t,a),u.w=n,u.h=o,u},ruToluArea:function(e,t,n,o,i,a){var u={};return u.x=r.ruToluX(e+n,i),u.y=r.ruToluY(t,a),u.w=n,u.h=o,u},luToruRectToArea:function(e,t,n,o,i,a){var u={};return u.x=r.luToruX(n,i),u.y=r.luToruY(t,a),u.w=n-e,u.h=o-t,u},ruToluRectToArea:function(e,t,n,o,i,a){var u={};return u.x=r.ruToluX(n,i),u.y=r.ruToluY(t,a),u.w=n-e,u.h=o-t,u},luToruAreaToRect:function(e,t,n,o,i,a){var u={};return u.x1=r.luToruX(e+n,i),u.y1=r.luToruY(t,a),u.x2=r.luToruX(e,i),u.y2=r.luToruY(t+o,a),u},ruToluAreaToRect:function(e,t,n,o,i,a){var u={};return u.x1=r.ruToluX(e+n,i),u.y1=r.ruToluY(t,a),u.x2=r.ruToluX(e,i),u.y2=r.ruToluY(t+o,a),u}}},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},function(e,t,n){var r=n(1),o=n(5),i=n(33),a=/"/g,u=function(e,t,n,r){var o=String(i(e)),u="<"+t;return""!==n&&(u+=" "+n+'="'+String(r).replace(a,"&quot;")+'"'),u+">"+o+"</"+t+">"};e.exports=function(e,t){var n={};n[e]=t(u),r(r.P+r.F*o(function(){var t=""[e]('"');return t!==t.toLowerCase()||t.split('"').length>3}),"String",n)}},function(e,t,n){var r=n(4),o=n(19),i=n(23),a=n(51)("src"),u=Function.toString,c=(""+u).split("toString");n(28).inspectSource=function(e){return u.call(e)},(e.exports=function(e,t,n,u){var s="function"==typeof n;s&&(i(n,"name")||o(n,"name",t)),e[t]!==n&&(s&&(i(n,a)||o(n,a,e[t]?""+e[t]:c.join(String(t)))),e===r?e[t]=n:u?e[t]?e[t]=n:o(e,t,n):(delete e[t],o(e,t,n)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[a]||u.call(this)})},function(e,t,n){var r=n(10),o=n(52);e.exports=n(11)?function(e,t,n){return r.f(e,t,o(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t,n){var r=n(23),o=n(13),i=n(109)("IE_PROTO"),a=Object.prototype;e.exports=Object.getPrototypeOf||function(e){return e=o(e),r(e,i)?e[i]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?a:null}},function(e,t,n){var r=n(61),o=n(52),i=n(22),a=n(34),u=n(23),c=n(161),s=Object.getOwnPropertyDescriptor;t.f=n(11)?s:function(e,t){if(e=i(e),t=a(t,!0),c)try{return s(e,t)}catch(e){}if(u(e,t))return o(!r.f.call(e,t),e[t])}},function(e,t,n){var r=n(62),o=n(33);e.exports=function(e){return r(o(e))}},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t,n){e.exports=n(221)()},function(e,t,n){"use strict";var r=n(5);e.exports=function(e,t){return!!e&&r(function(){t?e.call(null,function(){},1):e.call(null)})}},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t,n){var r=n(16);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,o){return e.call(t,n,r,o)}}return function(){return e.apply(t,arguments)}}},function(e,t){var n=e.exports={version:"2.5.6"};"number"==typeof __e&&(__e=n)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.Define={svgimagesize:{width:842,height:1192},grid:{width:10,height:10},handle:{width:10,height:10}}},function(e,t,n){var r=n(27),o=n(62),i=n(13),a=n(9),u=n(92);e.exports=function(e,t){var n=1==e,c=2==e,s=3==e,l=4==e,f=6==e,p=5==e||f,d=t||u;return function(t,u,h){for(var v,y,g=i(t),b=o(g),m=r(u,h,3),x=a(b.length),_=0,w=n?d(t,x):c?d(t,0):void 0;x>_;_++)if((p||_ in b)&&(y=m(v=b[_],_,g),e))if(n)w[_]=y;else if(y)switch(e){case 3:return!0;case 5:return v;case 6:return _;case 2:w.push(v)}else if(l)return!1;return f?-1:s||l?l:w}}},function(e,t,n){var r=n(1),o=n(28),i=n(5);e.exports=function(e,t){var n=(o.Object||{})[e]||Object[e],a={};a[e]=t(n),r(r.S+r.F*i(function(){n(1)}),"Object",a)}},function(e,t){var n=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:n)(e)}},function(e,t){e.exports=function(e){if(void 0==e)throw TypeError("Can't call method on  "+e);return e}},function(e,t,n){var r=n(6);e.exports=function(e,t){if(!r(e))return e;var n,o;if(t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;if("function"==typeof(n=e.valueOf)&&!r(o=n.call(e)))return o;if(!t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},function(e,t,n){var r=n(140),o=n(1),i=n(81)("metadata"),a=i.store||(i.store=new(n(137))),u=function(e,t,n){var o=a.get(e);if(!o){if(!n)return;a.set(e,o=new r)}var i=o.get(t);if(!i){if(!n)return;o.set(t,i=new r)}return i};e.exports={store:a,map:u,has:function(e,t,n){var r=u(t,n,!1);return void 0!==r&&r.has(e)},get:function(e,t,n){var r=u(t,n,!1);return void 0===r?void 0:r.get(e)},set:function(e,t,n,r){u(n,r,!0).set(e,t)},keys:function(e,t){var n=u(e,t,!1),r=[];return n&&n.forEach(function(e,t){r.push(t)}),r},key:function(e){return void 0===e||"symbol"==typeof e?e:String(e)},exp:function(e){o(o.S,"Reflect",e)}}},function(e,t,n){"use strict";if(n(11)){var r=n(39),o=n(4),i=n(5),a=n(1),u=n(70),c=n(86),s=n(27),l=n(45),f=n(52),p=n(19),d=n(43),h=n(32),v=n(9),y=n(135),g=n(49),b=n(34),m=n(23),x=n(60),_=n(6),w=n(13),O=n(95),S=n(48),E=n(20),k=n(47).f,T=n(93),C=n(51),j=n(8),P=n(30),A=n(80),M=n(73),D=n(90),B=n(54),N=n(76),L=n(46),I=n(91),R=n(145),U=n(10),z=n(21),F=U.f,X=z.f,G=o.RangeError,H=o.TypeError,W=o.Uint8Array,q=Array.prototype,V=c.ArrayBuffer,K=c.DataView,Z=P(0),Y=P(2),$=P(3),Q=P(4),J=P(5),ee=P(6),te=A(!0),ne=A(!1),re=D.values,oe=D.keys,ie=D.entries,ae=q.lastIndexOf,ue=q.reduce,ce=q.reduceRight,se=q.join,le=q.sort,fe=q.slice,pe=q.toString,de=q.toLocaleString,he=j("iterator"),ve=j("toStringTag"),ye=C("typed_constructor"),ge=C("def_constructor"),be=u.CONSTR,me=u.TYPED,xe=u.VIEW,_e=P(1,function(e,t){return ke(M(e,e[ge]),t)}),we=i(function(){return 1===new W(new Uint16Array([1]).buffer)[0]}),Oe=!!W&&!!W.prototype.set&&i(function(){new W(1).set({})}),Se=function(e,t){var n=h(e);if(n<0||n%t)throw G("Wrong offset!");return n},Ee=function(e){if(_(e)&&me in e)return e;throw H(e+" is not a typed array!")},ke=function(e,t){if(!(_(e)&&ye in e))throw H("It is not a typed array constructor!");return new e(t)},Te=function(e,t){return Ce(M(e,e[ge]),t)},Ce=function(e,t){for(var n=0,r=t.length,o=ke(e,r);r>n;)o[n]=t[n++];return o},je=function(e,t,n){F(e,t,{get:function(){return this._d[n]}})},Pe=function(e){var t,n,r,o,i,a,u=w(e),c=arguments.length,l=c>1?arguments[1]:void 0,f=void 0!==l,p=T(u);if(void 0!=p&&!O(p)){for(a=p.call(u),r=[],t=0;!(i=a.next()).done;t++)r.push(i.value);u=r}for(f&&c>2&&(l=s(l,arguments[2],2)),t=0,n=v(u.length),o=ke(this,n);n>t;t++)o[t]=f?l(u[t],t):u[t];return o},Ae=function(){for(var e=0,t=arguments.length,n=ke(this,t);t>e;)n[e]=arguments[e++];return n},Me=!!W&&i(function(){de.call(new W(1))}),De=function(){return de.apply(Me?fe.call(Ee(this)):Ee(this),arguments)},Be={copyWithin:function(e,t){return R.call(Ee(this),e,t,arguments.length>2?arguments[2]:void 0)},every:function(e){return Q(Ee(this),e,arguments.length>1?arguments[1]:void 0)},fill:function(e){return I.apply(Ee(this),arguments)},filter:function(e){return Te(this,Y(Ee(this),e,arguments.length>1?arguments[1]:void 0))},find:function(e){return J(Ee(this),e,arguments.length>1?arguments[1]:void 0)},findIndex:function(e){return ee(Ee(this),e,arguments.length>1?arguments[1]:void 0)},forEach:function(e){Z(Ee(this),e,arguments.length>1?arguments[1]:void 0)},indexOf:function(e){return ne(Ee(this),e,arguments.length>1?arguments[1]:void 0)},includes:function(e){return te(Ee(this),e,arguments.length>1?arguments[1]:void 0)},join:function(e){return se.apply(Ee(this),arguments)},lastIndexOf:function(e){return ae.apply(Ee(this),arguments)},map:function(e){return _e(Ee(this),e,arguments.length>1?arguments[1]:void 0)},reduce:function(e){return ue.apply(Ee(this),arguments)},reduceRight:function(e){return ce.apply(Ee(this),arguments)},reverse:function(){for(var e,t=Ee(this).length,n=Math.floor(t/2),r=0;r<n;)e=this[r],this[r++]=this[--t],this[t]=e;return this},some:function(e){return $(Ee(this),e,arguments.length>1?arguments[1]:void 0)},sort:function(e){return le.call(Ee(this),e)},subarray:function(e,t){var n=Ee(this),r=n.length,o=g(e,r);return new(M(n,n[ge]))(n.buffer,n.byteOffset+o*n.BYTES_PER_ELEMENT,v((void 0===t?r:g(t,r))-o))}},Ne=function(e,t){return Te(this,fe.call(Ee(this),e,t))},Le=function(e){Ee(this);var t=Se(arguments[1],1),n=this.length,r=w(e),o=v(r.length),i=0;if(o+t>n)throw G("Wrong length!");for(;i<o;)this[t+i]=r[i++]},Ie={entries:function(){return ie.call(Ee(this))},keys:function(){return oe.call(Ee(this))},values:function(){return re.call(Ee(this))}},Re=function(e,t){return _(e)&&e[me]&&"symbol"!=typeof t&&t in e&&String(+t)==String(t)},Ue=function(e,t){return Re(e,t=b(t,!0))?f(2,e[t]):X(e,t)},ze=function(e,t,n){return!(Re(e,t=b(t,!0))&&_(n)&&m(n,"value"))||m(n,"get")||m(n,"set")||n.configurable||m(n,"writable")&&!n.writable||m(n,"enumerable")&&!n.enumerable?F(e,t,n):(e[t]=n.value,e)};be||(z.f=Ue,U.f=ze),a(a.S+a.F*!be,"Object",{getOwnPropertyDescriptor:Ue,defineProperty:ze}),i(function(){pe.call({})})&&(pe=de=function(){return se.call(this)});var Fe=d({},Be);d(Fe,Ie),p(Fe,he,Ie.values),d(Fe,{slice:Ne,set:Le,constructor:function(){},toString:pe,toLocaleString:De}),je(Fe,"buffer","b"),je(Fe,"byteOffset","o"),je(Fe,"byteLength","l"),je(Fe,"length","e"),F(Fe,ve,{get:function(){return this[me]}}),e.exports=function(e,t,n,c){var s=e+((c=!!c)?"Clamped":"")+"Array",f="get"+e,d="set"+e,h=o[s],g=h||{},b=h&&E(h),m=!h||!u.ABV,w={},O=h&&h.prototype,T=function(e,n){F(e,n,{get:function(){return function(e,n){var r=e._d;return r.v[f](n*t+r.o,we)}(this,n)},set:function(e){return function(e,n,r){var o=e._d;c&&(r=(r=Math.round(r))<0?0:r>255?255:255&r),o.v[d](n*t+o.o,r,we)}(this,n,e)},enumerable:!0})};m?(h=n(function(e,n,r,o){l(e,h,s,"_d");var i,a,u,c,f=0,d=0;if(_(n)){if(!(n instanceof V||"ArrayBuffer"==(c=x(n))||"SharedArrayBuffer"==c))return me in n?Ce(h,n):Pe.call(h,n);i=n,d=Se(r,t);var g=n.byteLength;if(void 0===o){if(g%t)throw G("Wrong length!");if((a=g-d)<0)throw G("Wrong length!")}else if((a=v(o)*t)+d>g)throw G("Wrong length!");u=a/t}else u=y(n),i=new V(a=u*t);for(p(e,"_d",{b:i,o:d,l:a,e:u,v:new K(i)});f<u;)T(e,f++)}),O=h.prototype=S(Fe),p(O,"constructor",h)):i(function(){h(1)})&&i(function(){new h(-1)})&&N(function(e){new h,new h(null),new h(1.5),new h(e)},!0)||(h=n(function(e,n,r,o){var i;return l(e,h,s),_(n)?n instanceof V||"ArrayBuffer"==(i=x(n))||"SharedArrayBuffer"==i?void 0!==o?new g(n,Se(r,t),o):void 0!==r?new g(n,Se(r,t)):new g(n):me in n?Ce(h,n):Pe.call(h,n):new g(y(n))}),Z(b!==Function.prototype?k(g).concat(k(b)):k(g),function(e){e in h||p(h,e,g[e])}),h.prototype=O,r||(O.constructor=h));var C=O[he],j=!!C&&("values"==C.name||void 0==C.name),P=Ie.values;p(h,ye,!0),p(O,me,s),p(O,xe,!0),p(O,ge,h),(c?new h(1)[ve]==s:ve in O)||F(O,ve,{get:function(){return s}}),w[s]=h,a(a.G+a.W+a.F*(h!=g),w),a(a.S,s,{BYTES_PER_ELEMENT:t}),a(a.S+a.F*i(function(){g.of.call(h,1)}),s,{from:Pe,of:Ae}),"BYTES_PER_ELEMENT"in O||p(O,"BYTES_PER_ELEMENT",t),a(a.P,s,Be),L(s),a(a.P+a.F*Oe,s,{set:Le}),a(a.P+a.F*!j,s,Ie),r||O.toString==pe||(O.toString=pe),a(a.P+a.F*i(function(){new h(1).slice()}),s,{slice:Ne}),a(a.P+a.F*(i(function(){return[1,2].toLocaleString()!=new h([1,2]).toLocaleString()})||!i(function(){O.toLocaleString.call([1,2])})),s,{toLocaleString:De}),B[s]=j?C:P,r||j||p(O,he,P)}}else e.exports=function(){}},function(e,t,n){"use strict";n.d(t,"a",function(){return l});var r=n(0),o="Channel's Buffer overflow!",i=1,a=3,u=4,c={isEmpty:r.r,put:r.u,take:r.u};function s(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:10,t=arguments[1],n=new Array(e),r=0,c=0,s=0,l=function(t){n[c]=t,c=(c+1)%e,r++},f=function(){if(0!=r){var t=n[s];return n[s]=null,r--,s=(s+1)%e,t}},p=function(){for(var e=[];r;)e.push(f());return e};return{isEmpty:function(){return 0==r},put:function(f){if(r<e)l(f);else{var d=void 0;switch(t){case i:throw new Error(o);case a:n[c]=f,s=c=(c+1)%e;break;case u:d=2*e,n=p(),r=n.length,c=n.length,s=0,n.length=d,e=d,l(f)}}},take:f,flush:p}}var l={none:function(){return c},fixed:function(e){return s(e,i)},dropping:function(e){return s(e,2)},sliding:function(e){return s(e,a)},expanding:function(e){return s(e,u)}}},function(e,t,n){var r=n(8)("unscopables"),o=Array.prototype;void 0==o[r]&&n(19)(o,r,{}),e.exports=function(e){o[r][e]=!0}},function(e,t){e.exports=!1},function(e,t,n){var r=n(51)("meta"),o=n(6),i=n(23),a=n(10).f,u=0,c=Object.isExtensible||function(){return!0},s=!n(5)(function(){return c(Object.preventExtensions({}))}),l=function(e){a(e,r,{value:{i:"O"+ ++u,w:{}}})},f=e.exports={KEY:r,NEED:!1,fastKey:function(e,t){if(!o(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!i(e,r)){if(!c(e))return"F";if(!t)return"E";l(e)}return e[r].i},getWeak:function(e,t){if(!i(e,r)){if(!c(e))return!0;if(!t)return!1;l(e)}return e[r].w},onFreeze:function(e){return s&&f.NEED&&c(e)&&!i(e,r)&&l(e),e}}},function(e,t,n){"use strict";var r=n(0),o={done:!0,value:void 0},i={};function a(e){return r.q.channel(e)?"channel":Array.isArray(e)?String(e.map(function(e){return String(e)})):String(e)}function u(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"iterator",a=void 0,u=t;function c(t,n){if(u===i)return o;if(n)throw u=i,n;a&&a(t);var r=e[u](),c=r[0],s=r[1],l=r[2];return a=l,(u=c)===i?o:s}return Object(r.t)(c,function(e){return c(null,e)},n,!0)}var c=n(2),s=n(14);function l(e,t){for(var n=arguments.length,r=Array(n>2?n-2:0),o=2;o<n;o++)r[o-2]=arguments[o];var l={done:!1,value:Object(c.s)(e)},f=void 0,p=function(e){return f=e};return u({q1:function(){return["q2",l,p]},q2:function(){return f===s.a?[i]:["q1",(e=f,{done:!1,value:c.k.apply(void 0,[t].concat(r,[e]))})];var e}},"q1","takeEvery("+a(e)+", "+t.name+")")}function f(e,t){for(var n=arguments.length,r=Array(n>2?n-2:0),o=2;o<n;o++)r[o-2]=arguments[o];var l={done:!1,value:Object(c.s)(e)},f=function(e){return{done:!1,value:c.k.apply(void 0,[t].concat(r,[e]))}},p=void 0,d=void 0,h=function(e){return p=e},v=function(e){return d=e};return u({q1:function(){return["q2",l,v]},q2:function(){return d===s.a?[i]:p?["q3",function(e){return{done:!1,value:Object(c.f)(e)}}(p)]:["q1",f(d),h]},q3:function(){return["q1",f(d),h]}},"q1","takeLatest("+a(e)+", "+t.name+")")}var p=n(37);function d(e,t,n){for(var o=arguments.length,l=Array(o>3?o-3:0),f=3;f<o;f++)l[f-3]=arguments[f];var d=void 0,h=void 0,v={done:!1,value:Object(c.a)(t,p.a.sliding(1))},y={done:!1,value:Object(c.e)(r.m,e)},g=function(e){return d=e},b=function(e){return h=e};return u({q1:function(){return["q2",v,b]},q2:function(){return["q3",{done:!1,value:Object(c.s)(h)},g]},q3:function(){return d===s.a?[i]:["q4",(e=d,{done:!1,value:c.k.apply(void 0,[n].concat(l,[e]))})];var e},q4:function(){return["q2",y]}},"q1","throttle("+a(t)+", "+n.name+")")}n.d(t,"a",function(){return v}),n.d(t,"c",function(){return y}),n.d(t,"e",function(){return g}),n.d(t,"b",function(){return l}),n.d(t,"d",function(){return f}),n.d(t,"f",function(){return d});var h=function(e){return"import { "+e+" } from 'redux-saga' has been deprecated in favor of import { "+e+" } from 'redux-saga/effects'.\nThe latter will not work with yield*, as helper effects are wrapped automatically for you in fork effect.\nTherefore yield "+e+" will return task descriptor to your saga and execute next lines of code."},v=Object(r.n)(l,h("takeEvery")),y=Object(r.n)(f,h("takeLatest")),g=Object(r.n)(d,h("throttle"))},function(e,t,n){"use strict";n.r(t);var r=n(2);n.d(t,"take",function(){return r.s}),n.d(t,"takem",function(){return r.v}),n.d(t,"put",function(){return r.n}),n.d(t,"all",function(){return r.b}),n.d(t,"race",function(){return r.o}),n.d(t,"call",function(){return r.e}),n.d(t,"apply",function(){return r.c}),n.d(t,"cps",function(){return r.h}),n.d(t,"fork",function(){return r.k}),n.d(t,"spawn",function(){return r.r}),n.d(t,"join",function(){return r.m}),n.d(t,"cancel",function(){return r.f}),n.d(t,"select",function(){return r.p}),n.d(t,"actionChannel",function(){return r.a}),n.d(t,"cancelled",function(){return r.g}),n.d(t,"flush",function(){return r.j}),n.d(t,"getContext",function(){return r.l}),n.d(t,"setContext",function(){return r.q}),n.d(t,"takeEvery",function(){return r.t}),n.d(t,"takeLatest",function(){return r.u}),n.d(t,"throttle",function(){return r.w})},function(e,t,n){var r=n(18);e.exports=function(e,t,n){for(var o in t)r(e,o,t[o],n);return e}},function(e,t,n){var r=n(27),o=n(147),i=n(95),a=n(3),u=n(9),c=n(93),s={},l={};(t=e.exports=function(e,t,n,f,p){var d,h,v,y,g=p?function(){return e}:c(e),b=r(n,f,t?2:1),m=0;if("function"!=typeof g)throw TypeError(e+" is not iterable!");if(i(g)){for(d=u(e.length);d>m;m++)if((y=t?b(a(h=e[m])[0],h[1]):b(e[m]))===s||y===l)return y}else for(v=g.call(e);!(h=v.next()).done;)if((y=o(v,b,h.value,t))===s||y===l)return y}).BREAK=s,t.RETURN=l},function(e,t){e.exports=function(e,t,n,r){if(!(e instanceof t)||void 0!==r&&r in e)throw TypeError(n+": incorrect invocation!");return e}},function(e,t,n){"use strict";var r=n(4),o=n(10),i=n(11),a=n(8)("species");e.exports=function(e){var t=r[e];i&&t&&!t[a]&&o.f(t,a,{configurable:!0,get:function(){return this}})}},function(e,t,n){var r=n(159),o=n(108).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return r(e,o)}},function(e,t,n){var r=n(3),o=n(158),i=n(108),a=n(109)("IE_PROTO"),u=function(){},c=function(){var e,t=n(111)("iframe"),r=i.length;for(t.style.display="none",n(107).appendChild(t),t.src="javascript:",(e=t.contentWindow.document).open(),e.write("<script>document.F=Object<\/script>"),e.close(),c=e.F;r--;)delete c.prototype[i[r]];return c()};e.exports=Object.create||function(e,t){var n;return null!==e?(u.prototype=r(e),n=new u,u.prototype=null,n[a]=e):n=c(),void 0===t?n:o(n,t)}},function(e,t,n){var r=n(32),o=Math.max,i=Math.min;e.exports=function(e,t){return(e=r(e))<0?o(e+t,0):i(e,t)}},function(e,t,n){var r=n(159),o=n(108);e.exports=Object.keys||function(e){return r(e,o)}},function(e,t){var n=0,r=Math.random();e.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++n+r).toString(36))}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t,n){var r=n(6);e.exports=function(e,t){if(!r(e)||e._t!==t)throw TypeError("Incompatible receiver, "+t+" required!");return e}},function(e,t){e.exports={}},function(e,t,n){var r=n(1),o=n(33),i=n(5),a=n(105),u="["+a+"]",c=RegExp("^"+u+u+"*"),s=RegExp(u+u+"*$"),l=function(e,t,n){var o={},u=i(function(){return!!a[e]()||"​"!="​"[e]()}),c=o[e]=u?t(f):a[e];n&&(o[n]=c),r(r.P+r.F*u,"String",o)},f=l.trim=function(e,t){return e=String(o(e)),1&t&&(e=e.replace(c,"")),2&t&&(e=e.replace(s,"")),e};e.exports=l},function(e,t,n){var r=n(10).f,o=n(23),i=n(8)("toStringTag");e.exports=function(e,t,n){e&&!o(e=n?e:e.prototype,i)&&r(e,i,{configurable:!0,value:t})}},function(e,t,n){"use strict";n.d(t,"a",function(){return a}),n.d(t,"c",function(){return u}),n.d(t,"b",function(){return s});var r=[],o=0;function i(e){try{u(),e()}finally{c()}}function a(e){r.push(e),o||(u(),s())}function u(){o++}function c(){o--}function s(){c();for(var e=void 0;!o&&void 0!==(e=r.shift());)i(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=t.SAGA_TOOLBOXSOZAI_SOZAI_UPDATE="SAGA_TOOLBOXSOZAI_SOZAI_UPDATE",o=t.SAGA_TOOLBOXSOZAI_SOZAI_DELETE="SAGA_TOOLBOXSOZAI_SOZAI_DELETE",i=t.SAGA_TOOLBOXSOZAI_SOZAI_CREATE="SAGA_TOOLBOXSOZAI_SOZAI_CREATE",a=t.SAGA_TOOLBOXSOZAI_SOZAI_SELECT="SAGA_TOOLBOXSOZAI_SOZAI_SELECT",u=t.SAGA_TOOLBOXSOZAI_SOZAI_TOGGLE="SAGA_TOOLBOXSOZAI_SOZAI_TOGGLE";t.Saga_ToolBoxSozai_Sozai_Update=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:r,payload:{sozai:e.sozai}}},t.Saga_ToolBoxSozai_Sozai_Delete=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:o,payload:{id:e.id}}},t.Saga_ToolBoxSozai_Sozai_Create=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:i,payload:{id:e.id,type:e.type,text:e.text,image:e.image}}},t.Saga_ToolBoxSozai_Sozai_Select=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:a,payload:{id:e.id}}},t.Saga_ToolBoxSozai_Sozai_Toggle=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:u,payload:{id:e.id}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=t.SU_SELECTBOX_BOX_NONSELECT="SU_SELECTBOX_BOX_NONSELECT",o=t.SU_SELECTBOX_BOX_SELECT="SU_SELECTBOX_BOX_SELECT",i=t.SU_SELECTBOX_EDITBOX_MOVEEND="SU_SELECTBOX_EDITBOX_MOVEEND",a=t.SU_SELECTBOX_EDITBOX_CHANGESIZE="SU_SELECTBOX_EDITBOX_CHANGESIZE";t.SU_SelectBox_Box_NonSelect=function(){arguments.length>0&&void 0!==arguments[0]&&arguments[0];return{type:r,payload:{id:null,type:"",group:"",no:0}}},t.SU_SelectBox_Box_Select=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:o,payload:{id:e.id,type:e.type,group:e.group,no:e.no}}},t.SU_SelectBox_EditBox_MoveEnd=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:i,payload:{id:e.id,x1:e.x1,y1:e.y1,x2:e.x2,y2:e.y2}}},t.SU_SelectBox_EditBox_ChangeSize=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:a,payload:{id:e.id,x1:e.x1,y1:e.y1,x2:e.x2,y2:e.y2}}}},function(e,t,n){var r=n(26),o=n(8)("toStringTag"),i="Arguments"==r(function(){return arguments}());e.exports=function(e){var t,n,a;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),o))?n:i?r(t):"Object"==(a=r(t))&&"function"==typeof t.callee?"Arguments":a}},function(e,t){t.f={}.propertyIsEnumerable},function(e,t,n){var r=n(26);e.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==r(e)?e.split(""):Object(e)}},function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=t.SAGA_TOOLBOXBOXDATA_BOXDATA_UPDATE="SAGA_TOOLBOXBOXDATA_BOXDATA_UPDATE",o=t.SAGA_TOOLBOXBOXDATA_BOXDATA_DELETE="SAGA_TOOLBOXBOXDATA_BOXDATA_DELETE",i=t.SAGA_TOOLBOXBOXDATA_BOXDATA_CREATE="SAGA_TOOLBOXBOXDATA_BOXDATA_CREATE";t.Saga_ToolBoxBoxData_BoxData_Update=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:r,payload:{box:e.box}}},t.Saga_ToolBoxBoxData_BoxData_Delete=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:o,payload:{id:e.id}}},t.Saga_ToolBoxBoxData_BoxData_Create=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:i,payload:{box:e.box}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=t.SAGA_SELECTBOX_BOX_NONSELECT="SAGA_SELECTBOX_BOX_NONSELECT",o=t.SAGA_SELECTBOX_BOX_SELECT="SAGA_SELECTBOX_BOX_SELECT",i=t.SAGA_SELECTBOX_EDITBOX_MOVEEND="SAGA_SELECTBOX_EDITBOX_MOVEEND",a=t.SAGA_SELECTBOX_EDITBOX_CHANGESIZE="SAGA_SELECTBOX_EDITBOX_CHANGESIZE";t.Saga_SelectBox_Box_NonSelect=function(){arguments.length>0&&void 0!==arguments[0]&&arguments[0];return{type:r,payload:{id:null,type:"",group:"",no:0}}},t.Saga_SelectBox_Box_Select=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:o,payload:{id:e.id,type:e.type,group:e.group,no:e.no}}},t.Saga_SelectBox_EditBox_MoveEnd=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:i,payload:{id:e.id,x1:e.x1,y1:e.y1,x2:e.x2,y2:e.y2}}},t.Saga_SelectBox_EditBox_ChangeSize=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:a,payload:{id:e.id,x1:e.x1,y1:e.y1,x2:e.x2,y2:e.y2}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.String={toNumeric:function(e){if(""==e)return"";var t=parseInt(e,10);return isNaN(t)?"":t}}},function(e,t,n){"use strict";var r=n(1),o=n(16),i=n(27),a=n(44);e.exports=function(e){r(r.S,e,{from:function(e){var t,n,r,u,c=arguments[1];return o(this),(t=void 0!==c)&&o(c),void 0==e?new this:(n=[],t?(r=0,u=i(c,arguments[2],2),a(e,!1,function(e){n.push(u(e,r++))})):a(e,!1,n.push,n),new this(n))}})}},function(e,t,n){"use strict";var r=n(1);e.exports=function(e){r(r.S,e,{of:function(){for(var e=arguments.length,t=new Array(e);e--;)t[e]=arguments[e];return new this(t)}})}},function(e,t,n){"use strict";e.exports=n(39)||!n(5)(function(){var e=Math.random();__defineSetter__.call(null,e,function(){}),delete n(4)[e]})},function(e,t,n){for(var r,o=n(4),i=n(19),a=n(51),u=a("typed_array"),c=a("view"),s=!(!o.ArrayBuffer||!o.DataView),l=s,f=0,p="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");f<9;)(r=o[p[f++]])?(i(r.prototype,u,!0),i(r.prototype,c,!0)):l=!1;e.exports={ABV:s,CONSTR:l,TYPED:u,VIEW:c}},function(e,t,n){"use strict";var r=n(4),o=n(1),i=n(18),a=n(43),u=n(40),c=n(44),s=n(45),l=n(6),f=n(5),p=n(76),d=n(56),h=n(104);e.exports=function(e,t,n,v,y,g){var b=r[e],m=b,x=y?"set":"add",_=m&&m.prototype,w={},O=function(e){var t=_[e];i(_,e,"delete"==e?function(e){return!(g&&!l(e))&&t.call(this,0===e?0:e)}:"has"==e?function(e){return!(g&&!l(e))&&t.call(this,0===e?0:e)}:"get"==e?function(e){return g&&!l(e)?void 0:t.call(this,0===e?0:e)}:"add"==e?function(e){return t.call(this,0===e?0:e),this}:function(e,n){return t.call(this,0===e?0:e,n),this})};if("function"==typeof m&&(g||_.forEach&&!f(function(){(new m).entries().next()}))){var S=new m,E=S[x](g?{}:-0,1)!=S,k=f(function(){S.has(1)}),T=p(function(e){new m(e)}),C=!g&&f(function(){for(var e=new m,t=5;t--;)e[x](t,t);return!e.has(-0)});T||((m=t(function(t,n){s(t,m,e);var r=h(new b,t,m);return void 0!=n&&c(n,y,r[x],r),r})).prototype=_,_.constructor=m),(k||C)&&(O("delete"),O("has"),y&&O("get")),(C||E)&&O(x),g&&_.clear&&delete _.clear}else m=v.getConstructor(t,e,y,x),a(m.prototype,n),u.NEED=!0;return d(m,e),w[e]=m,o(o.G+o.W+o.F*(m!=b),w),g||v.setStrong(m,e,y),m}},function(e,t,n){var r=n(4).navigator;e.exports=r&&r.userAgent||""},function(e,t,n){var r=n(3),o=n(16),i=n(8)("species");e.exports=function(e,t){var n,a=r(e).constructor;return void 0===a||void 0==(n=r(a)[i])?t:o(n)}},function(e,t,n){"use strict";var r=n(19),o=n(18),i=n(5),a=n(33),u=n(8);e.exports=function(e,t,n){var c=u(e),s=n(a,c,""[e]),l=s[0],f=s[1];i(function(){var t={};return t[c]=function(){return 7},7!=""[e](t)})&&(o(String.prototype,e,l),r(RegExp.prototype,c,2==t?function(e,t){return f.call(e,this,t)}:function(e){return f.call(e,this)}))}},function(e,t,n){"use strict";var r=n(3);e.exports=function(){var e=r(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t}},function(e,t,n){var r=n(8)("iterator"),o=!1;try{var i=[7][r]();i.return=function(){o=!0},Array.from(i,function(){throw 2})}catch(e){}e.exports=function(e,t){if(!t&&!o)return!1;var n=!1;try{var i=[7],a=i[r]();a.next=function(){return{done:n=!0}},i[r]=function(){return a},e(i)}catch(e){}return n}},function(e,t,n){var r=n(6),o=n(26),i=n(8)("match");e.exports=function(e){var t;return r(e)&&(void 0!==(t=e[i])?!!t:"RegExp"==o(e))}},function(e,t,n){var r=n(26);e.exports=Array.isArray||function(e){return"Array"==r(e)}},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t,n){var r=n(22),o=n(9),i=n(49);e.exports=function(e){return function(t,n,a){var u,c=r(t),s=o(c.length),l=i(a,s);if(e&&n!=n){for(;s>l;)if((u=c[l++])!=u)return!0}else for(;s>l;l++)if((e||l in c)&&c[l]===n)return e||l||0;return!e&&-1}}},function(e,t,n){var r=n(28),o=n(4),i=o["__core-js_shared__"]||(o["__core-js_shared__"]={});(e.exports=function(e,t){return i[e]||(i[e]=void 0!==t?t:{})})("versions",[]).push({version:r.version,mode:n(39)?"pure":"global",copyright:"© 2018 Denis Pushkarev (zloirock.ru)"})},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o,i,a,u){if(!e){var c;if(void 0===t)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var s=[n,r,o,i,a,u],l=0;(c=new Error(t.replace(/%s/g,function(){return s[l++]}))).name="Invariant Violation"}throw c.framesToPop=1,c}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){return function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),o=t.Text={createMojiObjAry:function(e){for(var t=[],n=void 0,r=0;r<e.length;r++)n={moji:e.substr(r,1),size_j:0,size_g:0,font:0},t.push(n);return t},getJidumeMojiNagashiIndex:function(e,t,n,r,o,i){var a=0,u=void 0;a+=r;var c=void 0,s=void 0,l=0;for(c=t;c<e.length;c++){if(a+(u=0==e[c].size_j?i:e[c].size_j)>n-o){"\n"==e[c].moji&&(c==t||c++),l=0;break}if("\n"==e[c].moji){c++,l=1;break}a+=u}return c==t?s=-1:(c>=e.length&&(l=1),s=c-1),[s,l]},getJidumeAry:function(e,t,n,r,o,i,a){for(var u=r-(o+i),c=0,s=t;s<=n;s++)"\n"!=e[s].moji&&c++;for(var l=0,f=void 0,p=t;p<=n;p++)f=0==e[p].size_j?a:e[p].size_j,"\n"!=e[p].moji&&(l+=f);var d=(u-l)/(c-1),h=[],v=0;v+=o;for(var y=t;y<=n;y++)"\n"!=e[y].moji?(f=0==e[y].size_j?a:e[y].size_j,h.push(v+f/2),v+=f,v+=d):h.push(0);return h},getJidumeArySoroeNashi:function(e,t,n,r,o){for(var i=t;i<=n;i++)"\n"!=e[i].moji&&0;var a=[],u=0;u+=r;for(var c=t;c<=n;c++)if("\n"!=e[c].moji){var s=void 0;s=0==e[c].size_j?o:e[c].size_j,a.push(u+s/2),u+=s}else a.push(0);return a},getZenGyoIndexAry:function(e,t,n,i,a,u){var c=[],s={};if(e.length<=0)return c;for(;;){var l=o.getJidumeMojiNagashiIndex(e,t,n,i,a,u),f=r(l,2),p=f[0],d=f[1];if(-1==p)break;if(s={s:t,e:p,normalgyo:d},c.push(s),p>=e.length-1)break;t=p+1}return c},maxSizeGyoOkuri:function(e,t,n,r){for(var o=0,i=void 0,a=t;a<=n;a++)o<(i=0==e[a].size_g?r:e[a].size_g)&&(o=i);return o},getGyookuriAry:function(e,t,n,r,i,a,u,c,s,l){var f=[],p=0,d=o.getZenGyoIndexAry(e,t,n,i,a,s),h=0;h+=u;for(var v=0;v<d.length&&!(h+(p=o.maxSizeGyoOkuri(e,d[v].s,d[v].e,s))>r-c);v++)f.push(h+p/2),h+=p,h+=l;return f},getNagashiCenterAry:function(e,t,n,r,i,a,u,c,s,l,f){var p=[],d=o.getZenGyoIndexAry(e,t,n,i,a,s),h=o.getGyookuriAry(e,t,n,r,i,a,u,c,l,f),v=void 0,y=void 0,g=void 0;for(y=0;y<h.length;y++)for(v=0==d[y].normalgyo?o.getJidumeAry(e,d[y].s,d[y].e,n,i,a,s):o.getJidumeArySoroeNashi(e,d[y].s,d[y].e,i,s),g=0;g<v.length;g++)p.push([v[g],h[y]]);return[p,y<=0?-1:d[y-1].e]},nagashiResult:function(e,t,n){for(var r=[],o={},i=n,a=0;a<e.length;a++)o={moji:t[i].moji,size_j:t[i].size_j,size_g:t[i].size_g,j:e[a][0],g:e[a][1]},r.push(o),i++;return r}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=t.SAGA_NAGASHIRESULT_CREATE="SAGA_NAGASHIRESULT_CREATE",o=t.SAGA_NAGASHI_REMOVE="SAGA_NAGASHI_REMOVE";t.Saga_NagashiResult_Create=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:r,payload:{box_id:e.box_id,nagashiResult:e.nagashiResult}}},t.Saga_Nagashi_Remove=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:o,payload:{group:e.group}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Box=void 0;var r=function(){return function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),o=n(180),i=t.Box={getBox:function(e,t){for(var n="",r=0;r<e.length;r++)if(e[r].id==t){n=e[r];break}return n},getGroupAndNo:function(e,t){for(var n="",r=-1,o=0;o<e.length;o++)if(e[o].id==t){n=e[o].group,r=e[o].no;break}return[n,r]},getGroupAry:function(e){for(var t=[],n=0;n<e.length;n++)t=o.LibArray.setArrayUnique(t,e[n].group);return t},getGroupNoAry:function(e,t){for(var n=[],r=0;r<e.length;r++)e[r].group==t&&n.push(e[r].no);return n.sort(function(e,t){return e-t}),n},getBoxId:function(e,t,n){for(var r="",o=0;o<e.length;o++)if(e[o].group==t&&e[o].no==n){r=e[o].id;break}return r},getLinkGroup:function(e,t,n){for(var o="",a="",u=0;u<t.length;u++)if(t[u].sozai_id==n){a=t[u].box_id;break}if(""!=a){var c=i.getGroupAndNo(e,a),s=r(c,2);o=s[0],s[1]}return o}}},function(e,t,n){"use strict";var r=n(4),o=n(11),i=n(39),a=n(70),u=n(19),c=n(43),s=n(5),l=n(45),f=n(32),p=n(9),d=n(135),h=n(47).f,v=n(10).f,y=n(91),g=n(56),b="prototype",m="Wrong index!",x=r.ArrayBuffer,_=r.DataView,w=r.Math,O=r.RangeError,S=r.Infinity,E=x,k=w.abs,T=w.pow,C=w.floor,j=w.log,P=w.LN2,A=o?"_b":"buffer",M=o?"_l":"byteLength",D=o?"_o":"byteOffset";function B(e,t,n){var r,o,i,a=new Array(n),u=8*n-t-1,c=(1<<u)-1,s=c>>1,l=23===t?T(2,-24)-T(2,-77):0,f=0,p=e<0||0===e&&1/e<0?1:0;for((e=k(e))!=e||e===S?(o=e!=e?1:0,r=c):(r=C(j(e)/P),e*(i=T(2,-r))<1&&(r--,i*=2),(e+=r+s>=1?l/i:l*T(2,1-s))*i>=2&&(r++,i/=2),r+s>=c?(o=0,r=c):r+s>=1?(o=(e*i-1)*T(2,t),r+=s):(o=e*T(2,s-1)*T(2,t),r=0));t>=8;a[f++]=255&o,o/=256,t-=8);for(r=r<<t|o,u+=t;u>0;a[f++]=255&r,r/=256,u-=8);return a[--f]|=128*p,a}function N(e,t,n){var r,o=8*n-t-1,i=(1<<o)-1,a=i>>1,u=o-7,c=n-1,s=e[c--],l=127&s;for(s>>=7;u>0;l=256*l+e[c],c--,u-=8);for(r=l&(1<<-u)-1,l>>=-u,u+=t;u>0;r=256*r+e[c],c--,u-=8);if(0===l)l=1-a;else{if(l===i)return r?NaN:s?-S:S;r+=T(2,t),l-=a}return(s?-1:1)*r*T(2,l-t)}function L(e){return e[3]<<24|e[2]<<16|e[1]<<8|e[0]}function I(e){return[255&e]}function R(e){return[255&e,e>>8&255]}function U(e){return[255&e,e>>8&255,e>>16&255,e>>24&255]}function z(e){return B(e,52,8)}function F(e){return B(e,23,4)}function X(e,t,n){v(e[b],t,{get:function(){return this[n]}})}function G(e,t,n,r){var o=d(+n);if(o+t>e[M])throw O(m);var i=e[A]._b,a=o+e[D],u=i.slice(a,a+t);return r?u:u.reverse()}function H(e,t,n,r,o,i){var a=d(+n);if(a+t>e[M])throw O(m);for(var u=e[A]._b,c=a+e[D],s=r(+o),l=0;l<t;l++)u[c+l]=s[i?l:t-l-1]}if(a.ABV){if(!s(function(){x(1)})||!s(function(){new x(-1)})||s(function(){return new x,new x(1.5),new x(NaN),"ArrayBuffer"!=x.name})){for(var W,q=(x=function(e){return l(this,x),new E(d(e))})[b]=E[b],V=h(E),K=0;V.length>K;)(W=V[K++])in x||u(x,W,E[W]);i||(q.constructor=x)}var Z=new _(new x(2)),Y=_[b].setInt8;Z.setInt8(0,2147483648),Z.setInt8(1,2147483649),!Z.getInt8(0)&&Z.getInt8(1)||c(_[b],{setInt8:function(e,t){Y.call(this,e,t<<24>>24)},setUint8:function(e,t){Y.call(this,e,t<<24>>24)}},!0)}else x=function(e){l(this,x,"ArrayBuffer");var t=d(e);this._b=y.call(new Array(t),0),this[M]=t},_=function(e,t,n){l(this,_,"DataView"),l(e,x,"DataView");var r=e[M],o=f(t);if(o<0||o>r)throw O("Wrong offset!");if(o+(n=void 0===n?r-o:p(n))>r)throw O("Wrong length!");this[A]=e,this[D]=o,this[M]=n},o&&(X(x,"byteLength","_l"),X(_,"buffer","_b"),X(_,"byteLength","_l"),X(_,"byteOffset","_o")),c(_[b],{getInt8:function(e){return G(this,1,e)[0]<<24>>24},getUint8:function(e){return G(this,1,e)[0]},getInt16:function(e){var t=G(this,2,e,arguments[1]);return(t[1]<<8|t[0])<<16>>16},getUint16:function(e){var t=G(this,2,e,arguments[1]);return t[1]<<8|t[0]},getInt32:function(e){return L(G(this,4,e,arguments[1]))},getUint32:function(e){return L(G(this,4,e,arguments[1]))>>>0},getFloat32:function(e){return N(G(this,4,e,arguments[1]),23,4)},getFloat64:function(e){return N(G(this,8,e,arguments[1]),52,8)},setInt8:function(e,t){H(this,1,e,I,t)},setUint8:function(e,t){H(this,1,e,I,t)},setInt16:function(e,t){H(this,2,e,R,t,arguments[2])},setUint16:function(e,t){H(this,2,e,R,t,arguments[2])},setInt32:function(e,t){H(this,4,e,U,t,arguments[2])},setUint32:function(e,t){H(this,4,e,U,t,arguments[2])},setFloat32:function(e,t){H(this,4,e,F,t,arguments[2])},setFloat64:function(e,t){H(this,8,e,z,t,arguments[2])}});g(x,"ArrayBuffer"),g(_,"DataView"),u(_[b],a.VIEW,!0),t.ArrayBuffer=x,t.DataView=_},function(e,t,n){"use strict";var r=n(16);e.exports.f=function(e){return new function(e){var t,n;this.promise=new e(function(e,r){if(void 0!==t||void 0!==n)throw TypeError("Bad Promise constructor");t=e,n=r}),this.resolve=r(t),this.reject=r(n)}(e)}},function(e,t,n){var r=n(4),o=n(89).set,i=r.MutationObserver||r.WebKitMutationObserver,a=r.process,u=r.Promise,c="process"==n(26)(a);e.exports=function(){var e,t,n,s=function(){var r,o;for(c&&(r=a.domain)&&r.exit();e;){o=e.fn,e=e.next;try{o()}catch(r){throw e?n():t=void 0,r}}t=void 0,r&&r.enter()};if(c)n=function(){a.nextTick(s)};else if(!i||r.navigator&&r.navigator.standalone)if(u&&u.resolve){var l=u.resolve(void 0);n=function(){l.then(s)}}else n=function(){o.call(r,s)};else{var f=!0,p=document.createTextNode("");new i(s).observe(p,{characterData:!0}),n=function(){p.data=f=!f}}return function(r){var o={fn:r,next:void 0};t&&(t.next=o),e||(e=o,n()),t=o}}},function(e,t,n){var r,o,i,a=n(27),u=n(154),c=n(107),s=n(111),l=n(4),f=l.process,p=l.setImmediate,d=l.clearImmediate,h=l.MessageChannel,v=l.Dispatch,y=0,g={},b=function(){var e=+this;if(g.hasOwnProperty(e)){var t=g[e];delete g[e],t()}},m=function(e){b.call(e.data)};p&&d||(p=function(e){for(var t=[],n=1;arguments.length>n;)t.push(arguments[n++]);return g[++y]=function(){u("function"==typeof e?e:Function(e),t)},r(y),y},d=function(e){delete g[e]},"process"==n(26)(f)?r=function(e){f.nextTick(a(b,e,1))}:v&&v.now?r=function(e){v.now(a(b,e,1))}:h?(i=(o=new h).port2,o.port1.onmessage=m,r=a(i.postMessage,i,1)):l.addEventListener&&"function"==typeof postMessage&&!l.importScripts?(r=function(e){l.postMessage(e+"","*")},l.addEventListener("message",m,!1)):r="onreadystatechange"in s("script")?function(e){c.appendChild(s("script")).onreadystatechange=function(){c.removeChild(this),b.call(e)}}:function(e){setTimeout(a(b,e,1),0)}),e.exports={set:p,clear:d}},function(e,t,n){"use strict";var r=n(38),o=n(144),i=n(54),a=n(22);e.exports=n(99)(Array,"Array",function(e,t){this._t=a(e),this._i=0,this._k=t},function(){var e=this._t,t=this._k,n=this._i++;return!e||n>=e.length?(this._t=void 0,o(1)):o(0,"keys"==t?n:"values"==t?e[n]:[n,e[n]])},"values"),i.Arguments=i.Array,r("keys"),r("values"),r("entries")},function(e,t,n){"use strict";var r=n(13),o=n(49),i=n(9);e.exports=function(e){for(var t=r(this),n=i(t.length),a=arguments.length,u=o(a>1?arguments[1]:void 0,n),c=a>2?arguments[2]:void 0,s=void 0===c?n:o(c,n);s>u;)t[u++]=e;return t}},function(e,t,n){var r=n(333);e.exports=function(e,t){return new(r(e))(t)}},function(e,t,n){var r=n(60),o=n(8)("iterator"),i=n(54);e.exports=n(28).getIteratorMethod=function(e){if(void 0!=e)return e[o]||e["@@iterator"]||i[r(e)]}},function(e,t,n){"use strict";var r=n(10),o=n(52);e.exports=function(e,t,n){t in e?r.f(e,t,o(0,n)):e[t]=n}},function(e,t,n){var r=n(54),o=n(8)("iterator"),i=Array.prototype;e.exports=function(e){return void 0!==e&&(r.Array===e||i[o]===e)}},function(e,t,n){var r=n(8)("match");e.exports=function(e){var t=/./;try{"/./"[e](t)}catch(n){try{return t[r]=!1,!"/./"[e](t)}catch(e){}}return!0}},function(e,t,n){var r=n(77),o=n(33);e.exports=function(e,t,n){if(r(t))throw TypeError("String#"+n+" doesn't accept regex!");return String(o(e))}},function(e,t,n){"use strict";var r=n(48),o=n(52),i=n(56),a={};n(19)(a,n(8)("iterator"),function(){return this}),e.exports=function(e,t,n){e.prototype=r(a,{next:o(1,n)}),i(e,t+" Iterator")}},function(e,t,n){"use strict";var r=n(39),o=n(1),i=n(18),a=n(19),u=n(54),c=n(98),s=n(56),l=n(20),f=n(8)("iterator"),p=!([].keys&&"next"in[].keys()),d=function(){return this};e.exports=function(e,t,n,h,v,y,g){c(n,t,h);var b,m,x,_=function(e){if(!p&&e in E)return E[e];switch(e){case"keys":case"values":return function(){return new n(this,e)}}return function(){return new n(this,e)}},w=t+" Iterator",O="values"==v,S=!1,E=e.prototype,k=E[f]||E["@@iterator"]||v&&E[v],T=k||_(v),C=v?O?_("entries"):T:void 0,j="Array"==t&&E.entries||k;if(j&&(x=l(j.call(new e)))!==Object.prototype&&x.next&&(s(x,w,!0),r||"function"==typeof x[f]||a(x,f,d)),O&&k&&"values"!==k.name&&(S=!0,T=function(){return k.call(this)}),r&&!g||!p&&!S&&E[f]||a(E,f,T),u[t]=T,u[w]=d,v)if(b={values:O?T:_("values"),keys:y?T:_("keys"),entries:C},g)for(m in b)m in E||i(E,m,b[m]);else o(o.P+o.F*(p||S),t,b);return b}},function(e,t,n){var r=n(32),o=n(33);e.exports=function(e){return function(t,n){var i,a,u=String(o(t)),c=r(n),s=u.length;return c<0||c>=s?e?"":void 0:(i=u.charCodeAt(c))<55296||i>56319||c+1===s||(a=u.charCodeAt(c+1))<56320||a>57343?e?u.charAt(c):i:e?u.slice(c,c+2):a-56320+(i-55296<<10)+65536}}},function(e,t){var n=Math.expm1;e.exports=!n||n(10)>22025.465794806718||n(10)<22025.465794806718||-2e-17!=n(-2e-17)?function(e){return 0==(e=+e)?e:e>-1e-6&&e<1e-6?e+e*e/2:Math.exp(e)-1}:n},function(e,t){e.exports=Math.sign||function(e){return 0==(e=+e)||e!=e?e:e<0?-1:1}},function(e,t,n){"use strict";var r=n(32),o=n(33);e.exports=function(e){var t=String(o(this)),n="",i=r(e);if(i<0||i==1/0)throw RangeError("Count can't be negative");for(;i>0;(i>>>=1)&&(t+=t))1&i&&(n+=t);return n}},function(e,t,n){var r=n(6),o=n(106).set;e.exports=function(e,t,n){var i,a=t.constructor;return a!==n&&"function"==typeof a&&(i=a.prototype)!==n.prototype&&r(i)&&o&&o(e,i),e}},function(e,t){e.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},function(e,t,n){var r=n(6),o=n(3),i=function(e,t){if(o(e),!r(t)&&null!==t)throw TypeError(t+": can't set as prototype!")};e.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(e,t,r){try{(r=n(27)(Function.call,n(21).f(Object.prototype,"__proto__").set,2))(e,[]),t=!(e instanceof Array)}catch(e){t=!0}return function(e,n){return i(e,n),t?e.__proto__=n:r(e,n),e}}({},!1):void 0),check:i}},function(e,t,n){var r=n(4).document;e.exports=r&&r.documentElement},function(e,t){e.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(e,t,n){var r=n(81)("keys"),o=n(51);e.exports=function(e){return r[e]||(r[e]=o(e))}},function(e,t,n){var r=n(4),o=n(28),i=n(39),a=n(160),u=n(10).f;e.exports=function(e){var t=o.Symbol||(o.Symbol=i?{}:r.Symbol||{});"_"==e.charAt(0)||e in t||u(t,e,{value:a.f(e)})}},function(e,t,n){var r=n(6),o=n(4).document,i=r(o)&&r(o.createElement);e.exports=function(e){return i?o.createElement(e):{}}},function(e,t,n){"use strict";function r(e){return function(){return e}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},e.exports=o},function(e,t,n){"use strict";var r=function(e){};e.exports=function(e,t,n,o,i,a,u,c){if(r(t),!e){var s;if(void 0===t)s=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,o,i,a,u,c],f=0;(s=new Error(t.replace(/%s/g,function(){return l[f++]}))).name="Invariant Violation"}throw s.framesToPop=1,s}}},function(e,t,n){"use strict";n.r(t),n.d(t,"createStore",function(){return c}),n.d(t,"combineReducers",function(){return l}),n.d(t,"bindActionCreators",function(){return p}),n.d(t,"applyMiddleware",function(){return h}),n.d(t,"compose",function(){return d}),n.d(t,"__DO_NOT_USE__ActionTypes",function(){return o});var r=n(115),o={INIT:"@@redux/INIT"+Math.random().toString(36).substring(7).split("").join("."),REPLACE:"@@redux/REPLACE"+Math.random().toString(36).substring(7).split("").join(".")},i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function u(e){if("object"!==(void 0===e?"undefined":i(e))||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function c(e,t,n){var a;if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(c)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var s=e,l=t,f=[],p=f,d=!1;function h(){p===f&&(p=f.slice())}function v(){if(d)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return l}function y(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(d)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");var t=!0;return h(),p.push(e),function(){if(t){if(d)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");t=!1,h();var n=p.indexOf(e);p.splice(n,1)}}}function g(e){if(!u(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(d)throw new Error("Reducers may not dispatch actions.");try{d=!0,l=s(l,e)}finally{d=!1}for(var t=f=p,n=0;n<t.length;n++){(0,t[n])()}return e}return g({type:o.INIT}),(a={dispatch:g,subscribe:y,getState:v,replaceReducer:function(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");s=e,g({type:o.REPLACE})}})[r.a]=function(){var e,t=y;return(e={subscribe:function(e){if("object"!==(void 0===e?"undefined":i(e))||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(v())}return n(),{unsubscribe:t(n)}}})[r.a]=function(){return this},e},a}function s(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function l(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var i=t[r];0,"function"==typeof e[i]&&(n[i]=e[i])}var a=Object.keys(n);var u=void 0;try{!function(e){Object.keys(e).forEach(function(t){var n=e[t];if(void 0===n(void 0,{type:o.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:"@@redux/PROBE_UNKNOWN_ACTION_"+Math.random().toString(36).substring(7).split("").join(".")}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+o.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')})}(n)}catch(e){u=e}return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments[1];if(u)throw u;for(var r=!1,o={},i=0;i<a.length;i++){var c=a[i],l=n[c],f=e[c],p=l(f,t);if(void 0===p){var d=s(c,t);throw new Error(d)}o[c]=p,r=r||p!==f}return r?o:e}}function f(e,t){return function(){return t(e.apply(this,arguments))}}function p(e,t){if("function"==typeof e)return f(e,t);if("object"!==(void 0===e?"undefined":i(e))||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":void 0===e?"undefined":i(e))+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');for(var n=Object.keys(e),r={},o=0;o<n.length;o++){var a=n[o],u=e[a];"function"==typeof u&&(r[a]=f(u,t))}return r}function d(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce(function(e,t){return function(){return e(t.apply(void 0,arguments))}})}function h(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var i=e.apply(void 0,r),u=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},c={getState:i.getState,dispatch:function(){return u.apply(void 0,arguments)}},s=t.map(function(e){return e(c)});return u=d.apply(void 0,s)(i.dispatch),a({},i,{dispatch:u})}}}},function(e,t,n){"use strict";(function(e,r){var o,i=n(165);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var a=Object(i.a)(o);t.a=a}).call(this,n(63),n(222)(e))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.Sozai={getSozai:function(e,t){for(var n="",r=0;r<e.length;r++)if(e[r].id==t){n=e[r];break}return n}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){return function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();t.nagashiExec=h,t.nagashiExecGroup=v,t.nagashiExecBox=y,t.nagashiExecSozai=g,t.nagashiExecAll=b;var o=n(42),i=n(84),a=n(83),u=n(85),c=n(116),s=regeneratorRuntime.mark(h),l=regeneratorRuntime.mark(v),f=regeneratorRuntime.mark(y),p=regeneratorRuntime.mark(g),d=regeneratorRuntime.mark(b);function h(e,t){var n,l,f,p,d,h,v,y,g,b,m,x,_,w,O,S,E,k;return regeneratorRuntime.wrap(function(s){for(;;)switch(s.prev=s.next){case 0:return s.next=2,(0,o.select)(function(e){return e.boxs});case 2:if(n=s.sent,l=u.Box.getGroupNoAry(n,e),f=u.Box.getBoxId(n,e,l[0]),"text"!=u.Box.getBox(n,f).type){s.next=39;break}return s.next=9,(0,o.select)(function(e){return e.sozai});case 9:p=s.sent,d=c.Sozai.getSozai(p,t),h=0,v=void 0,y=void 0,g=0;case 14:if(!(g<l.length)){s.next=38;break}if(b=u.Box.getBoxId(n,e,l[g]),m=u.Box.getBox(n,b),x=void 0,_=void 0,"tate"==m.text.kumihoko?(x=m.y2-m.y1,_=m.x2-m.x1):(x=m.x2-m.x1,_=m.y2-m.y1),w=a.Text.getNagashiCenterAry(d.mojiObjAry,h,x,_,m.text.padding_js,m.text.padding_je,m.text.padding_gs,m.text.padding_ge,m.text.size_j,m.text.size_g,m.text.gyokan),O=r(w,2),v=O[0],-1!=(y=O[1])){s.next=29;break}return S={box_id:b,nagashiResult:[]},s.next=27,(0,o.put)((0,i.Saga_NagashiResult_Create)(S));case 27:s.next=35;break;case 29:return E=a.Text.nagashiResult(v,d.mojiObjAry,h),k={box_id:b,nagashiResult:E},s.next=33,(0,o.put)((0,i.Saga_NagashiResult_Create)(k));case 33:h=y+1,d.mojiObjAry.length;case 35:g++,s.next=14;break;case 38:(-1==y||y+1<d.mojiObjAry.length)&&(console.log(y),console.log("文字が余った"));case 39:case"end":return s.stop()}},s,this)}function v(e){var t,n,r;return regeneratorRuntime.wrap(function(i){for(;;)switch(i.prev=i.next){case 0:return i.next=2,(0,o.select)(function(e){return e.links});case 2:t=i.sent,n="",r=0;case 5:if(!(r<t.length)){i.next=12;break}if(t[r].group!=e){i.next=9;break}return n=t[r].sozai_id,i.abrupt("break",12);case 9:r++,i.next=5;break;case 12:if(""!=n){i.next=14;break}return i.abrupt("return");case 14:return i.next=16,(0,o.fork)(h,e,n);case 16:case"end":return i.stop()}},l,this)}function y(e){var t,n,i,a;return regeneratorRuntime.wrap(function(c){for(;;)switch(c.prev=c.next){case 0:return c.next=2,(0,o.select)(function(e){return e.boxs});case 2:return t=c.sent,n=u.Box.getGroupAndNo(t,e),i=r(n,2),a=i[0],i[1],c.next=6,(0,o.fork)(v,a);case 6:case"end":return c.stop()}},f,this)}function g(e){var t,n,r;return regeneratorRuntime.wrap(function(i){for(;;)switch(i.prev=i.next){case 0:return i.next=2,(0,o.select)(function(e){return e.links});case 2:t=i.sent,n="",r=0;case 5:if(!(r<t.length)){i.next=12;break}if(t[r].sozai_id!=e){i.next=9;break}return n=t[r].group,i.abrupt("break",12);case 9:r++,i.next=5;break;case 12:if(""!=n){i.next=14;break}return i.abrupt("return");case 14:return i.next=16,(0,o.fork)(h,n,e);case 16:case"end":return i.stop()}},p,this)}function b(){var e,t;return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,(0,o.select)(function(e){return e.links});case 2:e=n.sent,t=0;case 4:if(!(t<e.length)){n.next=10;break}return n.next=7,(0,o.fork)(h,e[t].group,e[t].sozai_id);case 7:t++,n.next=4;break;case 10:case"end":return n.stop()}},d,this)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=t.SAGA_TOOLBOXLINK_LINK_CREATE="SAGA_TOOLBOXLINK_LINK_CREATE",o=t.SAGA_TOOLBOXLINK_LINK_DELETE="SAGA_TOOLBOXLINK_LINK_DELETE";t.Saga_ToolBoxLink_Link_Create=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:r,payload:{group:e.group,sozai_id:e.sozai_id}}},t.Saga_ToolBoxLink_Link_Delete=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:o,payload:{group:e.group}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=t.SAGA_TOOLBOX_MOVEEND="SAGA_TOOLBOX_MOVEEND";t.Saga_ToolBox_MoveEnd=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:r,payload:{id:e.id,x:e.x,y:e.y}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=t.SAGA_TOOLBOXTEXTDATA_TEXTDATA_UPDATE="SAGA_TOOLBOXTEXTDATA_TEXTDATA_UPDATE";t.Saga_ToolBoxTextData_TextData_Update=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:r,payload:{box:e.box}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=t.SAGA_SCALE_CHANGE="SAGA_SCALE_CHANGE";t.Saga_Scale_Change=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:r,payload:{scale:e.scale}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=t.SU_TOOLBOXLINK_CREATEBUTTON_CLICK="SU_TOOLBOXLINK_CREATEBUTTON_CLICK",o=t.SU_TOOLBOXLINK_DELETEBUTTON_CLICK="SU_TOOLBOXLINK_DELETEBUTTON_CLICK";t.SU_ToolBoxLink_CreateButton_Click=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:r,payload:{group:e.group,sozai_id:e.sozai_id}}},t.SU_ToolBoxLink_DeleteButton_Click=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:o,payload:{group:e.group}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=t.SU_TOOLBOXSOZAI_UPDATEBUTTON_CLICK="SU_TOOLBOXSOZAI_UPDATEBUTTON_CLICK",o=t.SU_TOOLBOXSOZAI_DELETEBUTTON_CLICK="SU_TOOLBOXSOZAI_DELETEBUTTON_CLICK",i=t.SU_TOOLBOXSOZAI_CREATEBUTTON_CLICK="SU_TOOLBOXSOZAI_CREATEBUTTON_CLICK",a=t.SU_TOOLBOXSOZAI_SOZAI_SELECT="SU_TOOLBOXSOZAI_SOZAI_SELECT",u=t.SU_TOOLBOXSOZAI_SOZAI_TOGGLE="SU_TOOLBOXSOZAI_SOZAI_TOGGLE";t.SU_ToolBoxSozai_UpdateButton_Click=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:r,payload:{sozai:e.sozai}}},t.SU_ToolBoxSozai_DeleteButton_Click=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:o,payload:{id:e.id}}},t.SU_ToolBoxSozai_CreateButton_Click=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:i,payload:{id:e.id,type:e.type,text:e.text,image:e.image}}},t.SU_ToolBoxSozai_Sozai_Select=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:a,payload:{id:e.id}}},t.SU_ToolBoxSozai_Sozai_Toggle=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:u,payload:{id:e.id}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=t.SU_TOOLBOXTEXTDATA_UPDATEBUTTON_CLICK="SU_TOOLBOXTEXTDATA_UPDATEBUTTON_CLICK";t.SU_ToolBoxTextData_UpdateButton_Click=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:r,payload:{box:e.box}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=t.SU_TOOLBOXBOXDATA_UPDATEBUTTON_CLICK="SU_TOOLBOXBOXDATA_UPDATEBUTTON_CLICK",o=t.SU_TOOLBOXBOXDATA_DELETEBUTTON_CLICK="SU_TOOLBOXBOXDATA_DELETEBUTTON_CLICK",i=t.SU_TOOLBOXBOXDATA_CREATEBUTTON_CLICK="SU_TOOLBOXBOXDATA_CREATEBUTTON_CLICK";t.SU_ToolBoxBoxData_UpdateButton_Click=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:r,payload:{box:e.box}}},t.SU_ToolBoxBoxData_DeleteButton_Click=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:o,payload:{id:e.id}}},t.SU_ToolBoxBoxData_CreateButton_Click=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:i,payload:{box:e.box}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=t.SU_TOOLBOXSCALE_MINBUTTON_CLICK="SU_TOOLBOXSCALE_MINBUTTON_CLICK",o=t.SU_TOOLBOXSCALE_MAXBUTTON_CLICK="SU_TOOLBOXSCALE_MAXBUTTON_CLICK",i=t.SU_TOOLBOXSCALE_100PERBUTTON_CLICK="SU_TOOLBOXSCALE_100PERBUTTON_CLICK";t.SU_ToolBoxScale_MinButton_Click=function(){arguments.length>0&&void 0!==arguments[0]&&arguments[0];return{type:r,payload:{}}},t.SU_ToolBoxScale_MaxButton_Click=function(){arguments.length>0&&void 0!==arguments[0]&&arguments[0];return{type:o,payload:{}}},t.SU_ToolBoxScale_100PerButton_Click=function(){arguments.length>0&&void 0!==arguments[0]&&arguments[0];return{type:i,payload:{}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=t.SU_TOOLBOX_MOVEEND="SU_TOOLBOX_MOVEEND";t.SU_ToolBox_MoveEnd=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{type:r,payload:{id:e.id,x:e.x,y:e.y}}}},function(e,t){e.exports=Math.scale||function(e,t,n,r,o){return 0===arguments.length||e!=e||t!=t||n!=n||r!=r||o!=o?NaN:e===1/0||e===-1/0?e:(e-t)*(o-r)/(n-t)+r}},function(e,t,n){var r=n(44);e.exports=function(e,t){var n=[];return r(e,!1,n.push,n,t),n}},function(e,t,n){var r=n(60),o=n(129);e.exports=function(e){return function(){if(r(this)!=e)throw TypeError(e+"#toJSON isn't generic");return o(this)}}},function(e,t,n){var r=n(50),o=n(22),i=n(61).f;e.exports=function(e){return function(t){for(var n,a=o(t),u=r(a),c=u.length,s=0,l=[];c>s;)i.call(a,n=u[s++])&&l.push(e?[n,a[n]]:a[n]);return l}}},function(e,t,n){var r=n(9),o=n(103),i=n(33);e.exports=function(e,t,n,a){var u=String(i(e)),c=u.length,s=void 0===n?" ":String(n),l=r(t);if(l<=c||""==s)return u;var f=l-c,p=o.call(s,Math.ceil(f/s.length));return p.length>f&&(p=p.slice(0,f)),a?p+u:u+p}},function(e,t,n){"use strict";var r=n(78),o=n(6),i=n(9),a=n(27),u=n(8)("isConcatSpreadable");e.exports=function e(t,n,c,s,l,f,p,d){for(var h,v,y=l,g=0,b=!!p&&a(p,d,3);g<s;){if(g in c){if(h=b?b(c[g],g,n):c[g],v=!1,o(h)&&(v=void 0!==(v=h[u])?!!v:r(h)),v&&f>0)y=e(t,n,h,i(h.length),y,f-1)-1;else{if(y>=9007199254740991)throw TypeError();t[y]=h}y++}g++}return y}},function(e,t,n){var r=n(47),o=n(79),i=n(3),a=n(4).Reflect;e.exports=a&&a.ownKeys||function(e){var t=r.f(i(e)),n=o.f;return n?t.concat(n(e)):t}},function(e,t,n){var r=n(32),o=n(9);e.exports=function(e){if(void 0===e)return 0;var t=r(e),n=o(t);if(t!==n)throw RangeError("Wrong length!");return n}},function(e,t,n){"use strict";var r=n(43),o=n(40).getWeak,i=n(3),a=n(6),u=n(45),c=n(44),s=n(30),l=n(23),f=n(53),p=s(5),d=s(6),h=0,v=function(e){return e._l||(e._l=new y)},y=function(){this.a=[]},g=function(e,t){return p(e.a,function(e){return e[0]===t})};y.prototype={get:function(e){var t=g(this,e);if(t)return t[1]},has:function(e){return!!g(this,e)},set:function(e,t){var n=g(this,e);n?n[1]=t:this.a.push([e,t])},delete:function(e){var t=d(this.a,function(t){return t[0]===e});return~t&&this.a.splice(t,1),!!~t}},e.exports={getConstructor:function(e,t,n,i){var s=e(function(e,r){u(e,s,t,"_i"),e._t=t,e._i=h++,e._l=void 0,void 0!=r&&c(r,n,e[i],e)});return r(s.prototype,{delete:function(e){if(!a(e))return!1;var n=o(e);return!0===n?v(f(this,t)).delete(e):n&&l(n,this._i)&&delete n[this._i]},has:function(e){if(!a(e))return!1;var n=o(e);return!0===n?v(f(this,t)).has(e):n&&l(n,this._i)}}),s},def:function(e,t,n){var r=o(i(t),!0);return!0===r?v(e).set(t,n):r[e._i]=n,e},ufstore:v}},function(e,t,n){"use strict";var r,o=n(30)(0),i=n(18),a=n(40),u=n(156),c=n(136),s=n(6),l=n(5),f=n(53),p=a.getWeak,d=Object.isExtensible,h=c.ufstore,v={},y=function(e){return function(){return e(this,arguments.length>0?arguments[0]:void 0)}},g={get:function(e){if(s(e)){var t=p(e);return!0===t?h(f(this,"WeakMap")).get(e):t?t[this._i]:void 0}},set:function(e,t){return c.def(f(this,"WeakMap"),e,t)}},b=e.exports=n(71)("WeakMap",y,g,c,!0,!0);l(function(){return 7!=(new b).set((Object.freeze||Object)(v),7).get(v)})&&(u((r=c.getConstructor(y,"WeakMap")).prototype,g),a.NEED=!0,o(["delete","has","get","set"],function(e){var t=b.prototype,n=t[e];i(t,e,function(t,o){if(s(t)&&!d(t)){this._f||(this._f=new r);var i=this._f[e](t,o);return"set"==e?this:i}return n.call(this,t,o)})}))},function(e,t,n){"use strict";var r=n(139),o=n(53);e.exports=n(71)("Set",function(e){return function(){return e(this,arguments.length>0?arguments[0]:void 0)}},{add:function(e){return r.def(o(this,"Set"),e=0===e?0:e,e)}},r)},function(e,t,n){"use strict";var r=n(10).f,o=n(48),i=n(43),a=n(27),u=n(45),c=n(44),s=n(99),l=n(144),f=n(46),p=n(11),d=n(40).fastKey,h=n(53),v=p?"_s":"size",y=function(e,t){var n,r=d(t);if("F"!==r)return e._i[r];for(n=e._f;n;n=n.n)if(n.k==t)return n};e.exports={getConstructor:function(e,t,n,s){var l=e(function(e,r){u(e,l,t,"_i"),e._t=t,e._i=o(null),e._f=void 0,e._l=void 0,e[v]=0,void 0!=r&&c(r,n,e[s],e)});return i(l.prototype,{clear:function(){for(var e=h(this,t),n=e._i,r=e._f;r;r=r.n)r.r=!0,r.p&&(r.p=r.p.n=void 0),delete n[r.i];e._f=e._l=void 0,e[v]=0},delete:function(e){var n=h(this,t),r=y(n,e);if(r){var o=r.n,i=r.p;delete n._i[r.i],r.r=!0,i&&(i.n=o),o&&(o.p=i),n._f==r&&(n._f=o),n._l==r&&(n._l=i),n[v]--}return!!r},forEach:function(e){h(this,t);for(var n,r=a(e,arguments.length>1?arguments[1]:void 0,3);n=n?n.n:this._f;)for(r(n.v,n.k,this);n&&n.r;)n=n.p},has:function(e){return!!y(h(this,t),e)}}),p&&r(l.prototype,"size",{get:function(){return h(this,t)[v]}}),l},def:function(e,t,n){var r,o,i=y(e,t);return i?i.v=n:(e._l=i={i:o=d(t,!0),k:t,v:n,p:r=e._l,n:void 0,r:!1},e._f||(e._f=i),r&&(r.n=i),e[v]++,"F"!==o&&(e._i[o]=i)),e},getEntry:y,setStrong:function(e,t,n){s(e,t,function(e,n){this._t=h(e,t),this._k=n,this._l=void 0},function(){for(var e=this._k,t=this._l;t&&t.r;)t=t.p;return this._t&&(this._l=t=t?t.n:this._t._f)?l(0,"keys"==e?t.k:"values"==e?t.v:[t.k,t.v]):(this._t=void 0,l(1))},n?"entries":"values",!n,!0),f(t)}}},function(e,t,n){"use strict";var r=n(139),o=n(53);e.exports=n(71)("Map",function(e){return function(){return e(this,arguments.length>0?arguments[0]:void 0)}},{get:function(e){var t=r.getEntry(o(this,"Map"),e);return t&&t.v},set:function(e,t){return r.def(o(this,"Map"),0===e?0:e,t)}},r,!0)},function(e,t,n){var r=n(3),o=n(6),i=n(87);e.exports=function(e,t){if(r(e),o(t)&&t.constructor===e)return t;var n=i.f(e);return(0,n.resolve)(t),n.promise}},function(e,t){e.exports=function(e){try{return{e:!1,v:e()}}catch(e){return{e:!0,v:e}}}},function(e,t,n){n(11)&&"g"!=/./g.flags&&n(10).f(RegExp.prototype,"flags",{configurable:!0,get:n(75)})},function(e,t){e.exports=function(e,t){return{value:t,done:!!e}}},function(e,t,n){"use strict";var r=n(13),o=n(49),i=n(9);e.exports=[].copyWithin||function(e,t){var n=r(this),a=i(n.length),u=o(e,a),c=o(t,a),s=arguments.length>2?arguments[2]:void 0,l=Math.min((void 0===s?a:o(s,a))-c,a-u),f=1;for(c<u&&u<c+l&&(f=-1,c+=l-1,u+=l-1);l-- >0;)c in n?n[u]=n[c]:delete n[u],u+=f,c+=f;return n}},function(e,t,n){var r=n(16),o=n(13),i=n(62),a=n(9);e.exports=function(e,t,n,u,c){r(t);var s=o(e),l=i(s),f=a(s.length),p=c?f-1:0,d=c?-1:1;if(n<2)for(;;){if(p in l){u=l[p],p+=d;break}if(p+=d,c?p<0:f<=p)throw TypeError("Reduce of empty array with no initial value")}for(;c?p>=0:f>p;p+=d)p in l&&(u=t(u,l[p],p,s));return u}},function(e,t,n){var r=n(3);e.exports=function(e,t,n,o){try{return o?t(r(n)[0],n[1]):t(n)}catch(t){var i=e.return;throw void 0!==i&&r(i.call(e)),t}}},function(e,t,n){var r=n(102),o=Math.pow,i=o(2,-52),a=o(2,-23),u=o(2,127)*(2-a),c=o(2,-126);e.exports=Math.fround||function(e){var t,n,o=Math.abs(e),s=r(e);return o<c?s*(o/c/a+1/i-1/i)*c*a:(n=(t=(1+a/i)*o)-(t-o))>u||n!=n?s*(1/0):s*n}},function(e,t){e.exports=Math.log1p||function(e){return(e=+e)>-1e-8&&e<1e-8?e-e*e/2:Math.log(1+e)}},function(e,t,n){var r=n(6),o=Math.floor;e.exports=function(e){return!r(e)&&isFinite(e)&&o(e)===e}},function(e,t,n){var r=n(26);e.exports=function(e,t){if("number"!=typeof e&&"Number"!=r(e))throw TypeError(t);return+e}},function(e,t,n){var r=n(4).parseFloat,o=n(55).trim;e.exports=1/r(n(105)+"-0")!=-1/0?function(e){var t=o(String(e),3),n=r(t);return 0===n&&"-"==t.charAt(0)?-0:n}:r},function(e,t,n){var r=n(4).parseInt,o=n(55).trim,i=n(105),a=/^[-+]?0[xX]/;e.exports=8!==r(i+"08")||22!==r(i+"0x16")?function(e,t){var n=o(String(e),3);return r(n,t>>>0||(a.test(n)?16:10))}:r},function(e,t){e.exports=function(e,t,n){var r=void 0===n;switch(t.length){case 0:return r?e():e.call(n);case 1:return r?e(t[0]):e.call(n,t[0]);case 2:return r?e(t[0],t[1]):e.call(n,t[0],t[1]);case 3:return r?e(t[0],t[1],t[2]):e.call(n,t[0],t[1],t[2]);case 4:return r?e(t[0],t[1],t[2],t[3]):e.call(n,t[0],t[1],t[2],t[3])}return e.apply(n,t)}},function(e,t,n){"use strict";var r=n(16),o=n(6),i=n(154),a=[].slice,u={};e.exports=Function.bind||function(e){var t=r(this),n=a.call(arguments,1),c=function(){var r=n.concat(a.call(arguments));return this instanceof c?function(e,t,n){if(!(t in u)){for(var r=[],o=0;o<t;o++)r[o]="a["+o+"]";u[t]=Function("F,a","return new F("+r.join(",")+")")}return u[t](e,n)}(t,r.length,r):i(t,r,e)};return o(t.prototype)&&(c.prototype=t.prototype),c}},function(e,t,n){"use strict";var r=n(50),o=n(79),i=n(61),a=n(13),u=n(62),c=Object.assign;e.exports=!c||n(5)(function(){var e={},t={},n=Symbol(),r="abcdefghijklmnopqrst";return e[n]=7,r.split("").forEach(function(e){t[e]=e}),7!=c({},e)[n]||Object.keys(c({},t)).join("")!=r})?function(e,t){for(var n=a(e),c=arguments.length,s=1,l=o.f,f=i.f;c>s;)for(var p,d=u(arguments[s++]),h=l?r(d).concat(l(d)):r(d),v=h.length,y=0;v>y;)f.call(d,p=h[y++])&&(n[p]=d[p]);return n}:c},function(e,t,n){var r=n(22),o=n(47).f,i={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return a&&"[object Window]"==i.call(e)?function(e){try{return o(e)}catch(e){return a.slice()}}(e):o(r(e))}},function(e,t,n){var r=n(10),o=n(3),i=n(50);e.exports=n(11)?Object.defineProperties:function(e,t){o(e);for(var n,a=i(t),u=a.length,c=0;u>c;)r.f(e,n=a[c++],t[n]);return e}},function(e,t,n){var r=n(23),o=n(22),i=n(80)(!1),a=n(109)("IE_PROTO");e.exports=function(e,t){var n,u=o(e),c=0,s=[];for(n in u)n!=a&&r(u,n)&&s.push(n);for(;t.length>c;)r(u,n=t[c++])&&(~i(s,n)||s.push(n));return s}},function(e,t,n){t.f=n(8)},function(e,t,n){e.exports=!n(11)&&!n(5)(function(){return 7!=Object.defineProperty(n(111)("div"),"a",{get:function(){return 7}}).a})},function(e,t,n){"use strict";e.exports={}},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,a,u=function(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),c=1;c<arguments.length;c++){for(var s in n=Object(arguments[c]))o.call(n,s)&&(u[s]=n[s]);if(r){a=r(n);for(var l=0;l<a.length;l++)i.call(n,a[l])&&(u[a[l]]=n[a[l]])}}return u}},function(e,t,n){e.exports=function(){"use strict";var e={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},t={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},n=Object.defineProperty,r=Object.getOwnPropertyNames,o=Object.getOwnPropertySymbols,i=Object.getOwnPropertyDescriptor,a=Object.getPrototypeOf,u=a&&a(Object);return function c(s,l,f){if("string"!=typeof l){if(u){var p=a(l);p&&p!==u&&c(s,p,f)}var d=r(l);o&&(d=d.concat(o(l)));for(var h=0;h<d.length;++h){var v=d[h];if(!(e[v]||t[v]||f&&f[v])){var y=i(l,v);try{n(s,v,y)}catch(e){}}}return s}return s}}()},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";n.r(t);var r={};n.d(r,"TASK",function(){return o.e}),n.d(r,"SAGA_ACTION",function(){return o.c}),n.d(r,"noop",function(){return o.u}),n.d(r,"is",function(){return o.q}),n.d(r,"deferred",function(){return o.l}),n.d(r,"arrayOfDeffered",function(){return o.g}),n.d(r,"createMockTask",function(){return o.j}),n.d(r,"cloneableGenerator",function(){return o.i}),n.d(r,"asEffect",function(){return u.d}),n.d(r,"CHANNEL_END",function(){return p});var o=n(0),i=n(14),a=n(57),u=n(2),c=n(37),s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};var f="proc first argument (Saga function result) must be an iterator",p={toString:function(){return"@@redux-saga/CHANNEL_END"}},d={toString:function(){return"@@redux-saga/TASK_CANCEL"}},h={wildcard:function(){return o.r},default:function(e){return"symbol"===(void 0===e?"undefined":l(e))?function(t){return t.type===e}:function(t){return t.type===String(e)}},array:function(e){return function(t){return e.some(function(e){return v(e)(t)})}},predicate:function(e){return function(t){return e(t)}}};function v(e){return("*"===e?h.wildcard:o.q.array(e)?h.array:o.q.stringableFunc(e)?h.default:o.q.func(e)?h.predicate:h.default)(e)}var y=function(e){return{fn:e}};function g(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){return o.u},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:o.u,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:o.u,l=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{},h=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{},b=arguments.length>6&&void 0!==arguments[6]?arguments[6]:0,m=arguments.length>7&&void 0!==arguments[7]?arguments[7]:"anonymous",x=arguments[8];Object(o.h)(e,o.q.iterator,f);var _=Object(o.n)(U,Object(o.z)("[...effects]","all([...effects])")),w=h.sagaMonitor,O=h.logger,S=h.onError,E=O||o.s,k=function(e){var t=e.sagaStack;!t&&e.stack&&(t=-1!==e.stack.split("\n")[0].indexOf(e.message)?e.stack:"Error: "+e.message+"\n"+e.stack),E("error","uncaught at "+m,t||e.message||e)},T=Object(i.f)(t),C=Object.create(l);D.cancel=o.u;var j=function(e,t,n,r){var i,a;return n._deferredEnd=null,(i={})[o.e]=!0,i.id=e,i.name=t,"done",(a={}).done=a.done||{},a.done.get=function(){if(n._deferredEnd)return n._deferredEnd.promise;var e=Object(o.l)();return n._deferredEnd=e,n._isRunning||(n._error?e.reject(n._error):e.resolve(n._result)),e.promise},i.cont=r,i.joiners=[],i.cancel=M,i.isRunning=function(){return n._isRunning},i.isCancelled=function(){return n._isCancelled},i.isAborted=function(){return n._isAborted},i.result=function(){return n._result},i.error=function(){return n._error},i.setContext=function(e){Object(o.h)(e,o.q.object,Object(o.k)("task",e)),o.v.assign(C,e)},function(e,t){for(var n in t){var r=t[n];r.configurable=r.enumerable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,n,r)}}(i,a),i}(b,m,e,x),P={name:m,cancel:function(){P.isRunning&&!P.isCancelled&&(P.isCancelled=!0,D(d))},isRunning:!0},A=function(e,t,n){var r=[],i=void 0,a=!1;function u(e){s(),n(e,!0)}function c(e){r.push(e),e.cont=function(c,s){a||(Object(o.w)(r,e),e.cont=o.u,s?u(c):(e===t&&(i=c),r.length||(a=!0,n(i))))}}function s(){a||(a=!0,r.forEach(function(e){e.cont=o.u,e.cancel()}),r=[])}return c(t),{addTask:c,cancelAll:s,abort:u,getTasks:function(){return r},taskNames:function(){return r.map(function(e){return e.name})}}}(0,P,B);function M(){e._isRunning&&!e._isCancelled&&(e._isCancelled=!0,A.cancelAll(),B(d))}return x&&(x.cancel=M),e._isRunning=!0,D(),j;function D(t,n){if(!P.isRunning)throw new Error("Trying to resume an already finished generator");try{var r=void 0;n?r=e.throw(t):t===d?(P.isCancelled=!0,D.cancel(),r=o.q.func(e.return)?e.return(d):{done:!0,value:d}):r=t===p?o.q.func(e.return)?e.return():{done:!0}:e.next(t),r.done?(P.isMainRunning=!1,P.cont&&P.cont(r.value)):N(r.value,b,"",D)}catch(e){P.isCancelled&&k(e),P.isMainRunning=!1,P.cont(e,!0)}}function B(t,n){e._isRunning=!1,T.close(),n?(t instanceof Error&&Object.defineProperty(t,"sagaStack",{value:"at "+m+" \n "+(t.sagaStack||t.stack),configurable:!0}),j.cont||(t instanceof Error&&S?S(t):k(t)),e._error=t,e._isAborted=!0,e._deferredEnd&&e._deferredEnd.reject(t)):(e._result=t,e._deferredEnd&&e._deferredEnd.resolve(t)),j.cont&&j.cont(t,n),j.joiners.forEach(function(e){return e.cb(t,n)}),j.joiners=null}function N(e,l){var f=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",h=arguments[3],g=Object(o.y)();w&&w.effectTriggered({effectId:g,parentEffectId:l,label:f,effect:e});var b=void 0;function x(e,t){b||(b=!0,h.cancel=o.u,w&&(t?w.effectRejected(g,e):w.effectResolved(g,e)),h(e,t))}x.cancel=o.u,h.cancel=function(){if(!b){b=!0;try{x.cancel()}catch(e){k(e)}x.cancel=o.u,w&&w.effectCancelled(g)}};var O=void 0;return o.q.promise(e)?L(e,x):o.q.helper(e)?R(y(e),g,x):o.q.iterator(e)?I(e,g,m,x):o.q.array(e)?_(e,g,x):(O=u.d.take(e))?function(e,t){var n=e.channel,r=e.pattern,o=e.maybe;n=n||T;var a=function(e){return e instanceof Error?t(e,!0):Object(i.e)(e)&&!o?t(p):t(e)};try{n.take(a,v(r))}catch(e){return t(e,!0)}t.cancel=a.cancel}(O,x):(O=u.d.put(e))?function(e,t){var r=e.channel,i=e.action,u=e.resolve;Object(a.a)(function(){var e=void 0;try{e=(r?r.put:n)(i)}catch(e){if(r||u)return t(e,!0);k(e)}if(!u||!o.q.promise(e))return t(e);L(e,t)})}(O,x):(O=u.d.all(e))?U(O,g,x):(O=u.d.race(e))?function(e,t,n){var r=void 0,a=Object.keys(e),u={};a.forEach(function(t){var c=function(u,c){if(!r)if(c)n.cancel(),n(u,!0);else if(!Object(i.e)(u)&&u!==p&&u!==d){var l;n.cancel(),r=!0;var f=((l={})[t]=u,l);n(o.q.array(e)?[].slice.call(s({},f,{length:a.length})):f)}};c.cancel=o.u,u[t]=c}),n.cancel=function(){r||(r=!0,a.forEach(function(e){return u[e].cancel()}))},a.forEach(function(n){r||N(e[n],t,n,u[n])})}(O,g,x):(O=u.d.call(e))?function(e,t,n){var r=e.context,i=e.fn,a=e.args,u=void 0;try{u=i.apply(r,a)}catch(e){return n(e,!0)}return o.q.promise(u)?L(u,n):o.q.iterator(u)?I(u,t,i.name,n):n(u)}(O,g,x):(O=u.d.cps(e))?function(e,t){var n=e.context,r=e.fn,i=e.args;try{var a=function(e,n){return o.q.undef(e)?t(n):t(e,!0)};r.apply(n,i.concat(a)),a.cancel&&(t.cancel=function(){return a.cancel()})}catch(e){return t(e,!0)}}(O,x):(O=u.d.fork(e))?R(O,g,x):(O=u.d.join(e))?function(e,t){if(e.isRunning()){var n={task:j,cb:t};t.cancel=function(){return Object(o.w)(e.joiners,n)},e.joiners.push(n)}else e.isAborted()?t(e.error(),!0):t(e.result())}(O,x):(O=u.d.cancel(e))?function(e,t){e===o.d&&(e=j);e.isRunning()&&e.cancel();t()}(O,x):(O=u.d.select(e))?function(e,t){var n=e.selector,o=e.args;try{var i=n.apply(void 0,[r()].concat(o));t(i)}catch(e){t(e,!0)}}(O,x):(O=u.d.actionChannel(e))?function(e,n){var r=e.pattern,o=e.buffer,a=v(r);a.pattern=r,n(Object(i.d)(t,o||c.a.fixed(),a))}(O,x):(O=u.d.flush(e))?function(e,t){e.flush(t)}(O,x):(O=u.d.cancelled(e))?function(e,t){t(!!P.isCancelled)}(0,x):(O=u.d.getContext(e))?function(e,t){t(C[e])}(O,x):(O=u.d.setContext(e))?function(e,t){o.v.assign(C,e),t()}(O,x):x(e)}function L(e,t){var n=e[o.a];o.q.func(n)?t.cancel=n:o.q.func(e.abort)&&(t.cancel=function(){return e.abort()}),e.then(t,function(e){return t(e,!0)})}function I(e,o,i,a){g(e,t,n,r,C,h,o,i,a)}function R(e,i,u){var c=e.context,s=e.fn,l=e.args,f=e.detached,p=function(e){var t=e.context,n=e.fn,r=e.args;if(o.q.iterator(n))return n;var i,a,u=void 0,c=void 0;try{u=n.apply(t,r)}catch(e){c=e}return o.q.iterator(u)?u:c?Object(o.t)(function(){throw c}):Object(o.t)((i=void 0,a={done:!1,value:u},function(e){return i?{done:!0,value:e}:(i=!0,a)}))}({context:c,fn:s,args:l});try{Object(a.c)();var d=g(p,t,n,r,C,h,i,s.name,f?null:o.u);f?u(d):p._isRunning?(A.addTask(d),u(d)):p._error?A.abort(p._error):u(d)}finally{Object(a.b)()}}function U(e,t,n){var r=Object.keys(e);if(!r.length)return n(o.q.array(e)?[]:{});var a=0,u=void 0,c={},l={};r.forEach(function(t){var f=function(l,f){u||(f||Object(i.e)(l)||l===p||l===d?(n.cancel(),n(l,f)):(c[t]=l,++a===r.length&&(u=!0,n(o.q.array(e)?o.f.from(s({},c,{length:r.length})):c))))};f.cancel=o.u,l[t]=f}),n.cancel=function(){u||(u=!0,r.forEach(function(e){return l[e].cancel()}))},r.forEach(function(n){return N(e[n],t,n,l[n])})}}var b="runSaga(storeInterface, saga, ...args): saga argument must be a Generator function!";function m(e,t){for(var n=arguments.length,r=Array(n>2?n-2:0),i=2;i<n;i++)r[i-2]=arguments[i];var a=void 0;o.q.iterator(e)?(a=e,e=t):(Object(o.h)(t,o.q.func,b),a=t.apply(void 0,r),Object(o.h)(a,o.q.iterator,b));var u=e,c=u.subscribe,s=u.dispatch,l=u.getState,f=u.context,p=u.sagaMonitor,d=u.logger,h=u.onError,v=Object(o.y)();p&&(p.effectTriggered=p.effectTriggered||o.u,p.effectResolved=p.effectResolved||o.u,p.effectRejected=p.effectRejected||o.u,p.effectCancelled=p.effectCancelled||o.u,p.actionDispatched=p.actionDispatched||o.u,p.effectTriggered({effectId:v,root:!0,parentEffectId:0,effect:{root:!0,saga:t,args:r}}));var y=g(a,c,Object(o.A)(s),l,f,{sagaMonitor:p,logger:d,onError:h},v,t.name);return p&&p.effectResolved(v,y),y}var x=n(41),_=n(42);n.d(t,"runSaga",function(){return m}),n.d(t,"END",function(){return i.a}),n.d(t,"eventChannel",function(){return i.d}),n.d(t,"channel",function(){return i.b}),n.d(t,"buffers",function(){return c.a}),n.d(t,"takeEvery",function(){return x.a}),n.d(t,"takeLatest",function(){return x.c}),n.d(t,"throttle",function(){return x.e}),n.d(t,"delay",function(){return o.m}),n.d(t,"CANCEL",function(){return o.a}),n.d(t,"detach",function(){return u.i}),n.d(t,"effects",function(){return _}),n.d(t,"utils",function(){return r});t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.context,n=void 0===t?{}:t,r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["context"]),a=r.sagaMonitor,u=r.logger,c=r.onError;if(o.q.func(r))throw new Error("Saga middleware no longer accept Generator functions. Use sagaMiddleware.run instead");if(u&&!o.q.func(u))throw new Error("`options.logger` passed to the Saga middleware is not a function!");if(c&&!o.q.func(c))throw new Error("`options.onError` passed to the Saga middleware is not a function!");if(r.emitter&&!o.q.func(r.emitter))throw new Error("`options.emitter` passed to the Saga middleware is not a function!");function s(e){var t=e.getState,l=e.dispatch,f=Object(i.c)();return f.emit=(r.emitter||o.o)(f.emit),s.run=m.bind(null,{context:n,subscribe:f.subscribe,dispatch:l,getState:t,sagaMonitor:a,logger:u,onError:c}),function(e){return function(t){a&&a.actionDispatched&&a.actionDispatched(t);var n=e(t);return f.emit(t),n}}}return s.run=function(){throw new Error("Before running a Saga, you must mount the Saga middleware on the Store using applyMiddleware")},s.setContext=function(e){Object(o.h)(e,o.q.object,Object(o.k)("sagaMiddleware",e)),o.v.assign(n,e)},s}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=c;var r=n(42),o=n(126),i=n(121),a=regeneratorRuntime.mark(c),u=function(e){return e.scale};function c(){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,r.takeEvery)(o.SU_TOOLBOXSCALE_MINBUTTON_CLICK,regeneratorRuntime.mark(function e(t){var n;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,r.select)(u);case 2:return n=e.sent,(n-=50)<=50&&(n=50),e.next=7,(0,r.put)((0,i.Saga_Scale_Change)({scale:n}));case 7:case"end":return e.stop()}},e,this)}));case 2:return e.next=4,(0,r.takeEvery)(o.SU_TOOLBOXSCALE_MAXBUTTON_CLICK,regeneratorRuntime.mark(function e(t){var n;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,r.select)(u);case 2:return n=e.sent,(n+=50)>=1e3&&(n=1e3),e.next=7,(0,r.put)((0,i.Saga_Scale_Change)({scale:n}));case 7:case"end":return e.stop()}},e,this)}));case 4:return e.next=6,(0,r.takeEvery)(o.SU_TOOLBOXSCALE_100PERBUTTON_CLICK,regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,r.put)((0,i.Saga_Scale_Change)({scale:100}));case 2:case"end":return e.stop()}},e,this)}));case 6:case"end":return e.stop()}},a,this)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){return function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();t.default=x;var o=n(42),i=n(127),a=n(119),u=n(125),c=n(64),s=n(124),l=n(120),f=n(123),p=n(58),d=n(122),h=n(118),v=n(84),y=n(117),g=n(15),b=(n(83),n(85)),m=(n(116),regeneratorRuntime.mark(x));function x(){var e,t,n,x,_,w;return regeneratorRuntime.wrap(function(m){for(;;)switch(m.prev=m.next){case 0:return m.next=2,(0,o.select)(function(e){return e.sozai});case 2:e=m.sent,t=0;case 4:if(!(t<e.length)){m.next=11;break}return n={sozai:{id:e[t].id,type:e[t].type,text:e[t].text,image:e[t].image}},m.next=8,(0,o.put)((0,p.Saga_ToolBoxSozai_Sozai_Update)(n));case 8:t++,m.next=4;break;case 11:return m.next=13,(0,o.select)(function(e){return e.toolboxs});case 13:x=m.sent,_={},w=0;case 16:if(!(w<x.length)){m.next=43;break}m.t0=x[w].type,m.next="scale"===m.t0?20:"boxdata"===m.t0?24:"textdata"===m.t0?28:"sozai"===m.t0?32:"link"===m.t0?36:40;break;case 20:return _={id:x[w].id,x:g.Zahyo.windowArea().w-x[w].w-20,y:5},m.next=23,(0,o.put)((0,a.Saga_ToolBox_MoveEnd)(_));case 23:return m.abrupt("break",40);case 24:return _={id:x[w].id,x:g.Zahyo.windowArea().w-x[w].w-20,y:50},m.next=27,(0,o.put)((0,a.Saga_ToolBox_MoveEnd)(_));case 27:return m.abrupt("break",40);case 28:return _={id:x[w].id,x:g.Zahyo.windowArea().w-x[w].w-20,y:195},m.next=31,(0,o.put)((0,a.Saga_ToolBox_MoveEnd)(_));case 31:return m.abrupt("break",40);case 32:return _={id:x[w].id,x:g.Zahyo.windowArea().w-x[w].w-20-200-5,y:5},m.next=35,(0,o.put)((0,a.Saga_ToolBox_MoveEnd)(_));case 35:return m.abrupt("break",40);case 36:return _={id:x[w].id,x:g.Zahyo.windowArea().w-x[w].w-20-200-5-200-5,y:5},m.next=39,(0,o.put)((0,a.Saga_ToolBox_MoveEnd)(_));case 39:return m.abrupt("break",40);case 40:w++,m.next=16;break;case 43:return m.next=45,(0,o.takeEvery)(i.SU_TOOLBOX_MOVEEND,regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,o.put)((0,a.Saga_ToolBox_MoveEnd)(t.payload));case 2:case"end":return e.stop()}},e,this)}));case 45:return m.next=47,(0,o.takeEvery)(u.SU_TOOLBOXBOXDATA_UPDATEBUTTON_CLICK,regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,o.put)((0,c.Saga_ToolBoxBoxData_BoxData_Update)(t.payload));case 2:return e.next=4,(0,o.fork)(y.nagashiExecAll);case 4:case"end":return e.stop()}},e,this)}));case 47:return m.next=49,(0,o.takeEvery)(u.SU_TOOLBOXBOXDATA_DELETEBUTTON_CLICK,regeneratorRuntime.mark(function e(t){var n,i,a,u,s;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,o.select)(function(e){return e.boxs});case 2:return n=e.sent,i=b.Box.getGroupAndNo(n,t.payload.id),a=r(i,2),u=a[0],a[1],e.next=6,(0,o.put)((0,c.Saga_ToolBoxBoxData_BoxData_Delete)(t.payload));case 6:return e.next=8,(0,o.select)(function(e){return e.boxs});case 8:if(n=e.sent,!(b.Box.getGroupAry(n).indexOf(u)<0)){e.next=16;break}return s={group:u},e.next=14,(0,o.put)((0,h.Saga_ToolBoxLink_Link_Delete)(s));case 14:e.next=18;break;case 16:return e.next=18,(0,o.fork)(y.nagashiExecGroup,u);case 18:case"end":return e.stop()}},e,this)}));case 49:return m.next=51,(0,o.takeEvery)(u.SU_TOOLBOXBOXDATA_CREATEBUTTON_CLICK,regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,o.put)((0,c.Saga_ToolBoxBoxData_BoxData_Create)(t.payload));case 2:case"end":return e.stop()}},e,this)}));case 51:return m.next=53,(0,o.takeEvery)(s.SU_TOOLBOXTEXTDATA_UPDATEBUTTON_CLICK,regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,o.put)((0,l.Saga_ToolBoxTextData_TextData_Update)(t.payload));case 2:return e.next=4,(0,o.fork)(y.nagashiExecBox,t.payload.box.id);case 4:case"end":return e.stop()}},e,this)}));case 53:return m.next=55,(0,o.takeEvery)(f.SU_TOOLBOXSOZAI_UPDATEBUTTON_CLICK,regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,o.put)((0,p.Saga_ToolBoxSozai_Sozai_Update)(t.payload));case 2:return e.next=4,(0,o.fork)(y.nagashiExecSozai,t.payload.sozai.id);case 4:case"end":return e.stop()}},e,this)}));case 55:return m.next=57,(0,o.takeEvery)(f.SU_TOOLBOXSOZAI_DELETEBUTTON_CLICK,regeneratorRuntime.mark(function e(t){var n,r,i,a;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,o.select)(function(e){return e.boxs});case 2:return n=e.sent,e.next=5,(0,o.select)(function(e){return e.links});case 5:if(r=e.sent,""==(i=b.Box.getLinkGroup(n,r,t.payload.id))){e.next=11;break}return a={group:i},e.next=11,(0,o.put)((0,v.Saga_Nagashi_Remove)(a));case 11:return e.next=13,(0,o.put)((0,p.Saga_ToolBoxSozai_Sozai_Delete)(t.payload));case 13:case"end":return e.stop()}},e,this)}));case 57:return m.next=59,(0,o.takeEvery)(f.SU_TOOLBOXSOZAI_CREATEBUTTON_CLICK,regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,o.put)((0,p.Saga_ToolBoxSozai_Sozai_Create)(t.payload));case 2:case"end":return e.stop()}},e,this)}));case 59:return m.next=61,(0,o.takeEvery)(f.SU_TOOLBOXSOZAI_SOZAI_TOGGLE,regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,o.put)((0,p.Saga_ToolBoxSozai_Sozai_Toggle)(t.payload));case 2:case"end":return e.stop()}},e,this)}));case 61:return m.next=63,(0,o.takeEvery)(d.SU_TOOLBOXLINK_CREATEBUTTON_CLICK,regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,o.put)((0,h.Saga_ToolBoxLink_Link_Create)(t.payload));case 2:return e.next=4,(0,o.fork)(y.nagashiExec,t.payload.group,t.payload.sozai_id);case 4:case"end":return e.stop()}},e,this)}));case 63:return m.next=65,(0,o.takeEvery)(d.SU_TOOLBOXLINK_DELETEBUTTON_CLICK,regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,o.put)((0,v.Saga_Nagashi_Remove)(t.payload));case 2:return e.next=4,(0,o.put)((0,h.Saga_ToolBoxLink_Link_Delete)(t.payload));case 4:case"end":return e.stop()}},e,this)}));case 65:case"end":return m.stop()}},m,this)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=t.Link={getSozaiId:function(e,t){for(var n="",r=0;r<e.length;r++)if(e[r].group==t){n=e[r].sozai_id;break}return n},getSozaiIdFromBoxId:function(e,t,n){for(var o="",i="",a=0;a<t.length;a++)if(t[a].id==n){i=t[a].group;break}return""!=i&&(o=r.getSozaiId(e,i)),o}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=l;var r=n(42),o=n(59),i=n(65),a=n(58),u=n(117),c=n(169),s=regeneratorRuntime.mark(l);function l(){var e,t,n;return regeneratorRuntime.wrap(function(s){for(;;)switch(s.prev=s.next){case 0:return s.next=2,(0,r.select)(function(e){return e.boxs});case 2:e=s.sent,t=0;case 4:if(!(t<e.length)){s.next=12;break}if("text"!=e[t].type){s.next=9;break}return n={id:e[t].id,x1:e[t].x1,y1:e[t].y1,x2:e[t].x2,y2:e[t].y2},s.next=9,(0,r.put)((0,i.Saga_SelectBox_EditBox_ChangeSize)(n));case 9:t++,s.next=4;break;case 12:return s.next=14,(0,r.takeEvery)(o.SU_SELECTBOX_BOX_NONSELECT,regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,r.put)((0,i.Saga_SelectBox_Box_NonSelect)(t.payload));case 2:case"end":return e.stop()}},e,this)}));case 14:return s.next=16,(0,r.takeEvery)(o.SU_SELECTBOX_BOX_SELECT,regeneratorRuntime.mark(function e(t){var n,o,u;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,r.put)((0,i.Saga_SelectBox_Box_Select)(t.payload));case 2:return e.next=4,(0,r.select)(function(e){return e.links});case 4:return n=e.sent,e.next=7,(0,r.select)(function(e){return e.boxs});case 7:if(o=e.sent,""==(u=c.Link.getSozaiIdFromBoxId(n,o,t.payload.id))){e.next=12;break}return e.next=12,(0,r.put)((0,a.Saga_ToolBoxSozai_Sozai_Select)({id:u}));case 12:case"end":return e.stop()}},e,this)}));case 16:return s.next=18,(0,r.takeEvery)(o.SU_SELECTBOX_EDITBOX_MOVEEND,regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,r.put)((0,i.Saga_SelectBox_EditBox_MoveEnd)(t.payload));case 2:case"end":return e.stop()}},e,this)}));case 18:return s.next=20,(0,r.takeEvery)(o.SU_SELECTBOX_EDITBOX_CHANGESIZE,regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,r.put)((0,i.Saga_SelectBox_EditBox_ChangeSize)(t.payload));case 2:return e.next=4,(0,r.fork)(u.nagashiExecBox,t.payload.id);case 4:case"end":return e.stop()}},e,this)}));case 20:case"end":return s.stop()}},s,this)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=s;var r=n(42),o=u(n(170)),i=u(n(168)),a=u(n(167));function u(e){return e&&e.__esModule?e:{default:e}}var c=regeneratorRuntime.mark(s);function s(){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,r.fork)(o.default);case 2:return e.next=4,(0,r.fork)(i.default);case 4:return e.next=6,(0,r.fork)(a.default);case 6:case"end":return e.stop()}},c,this)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.links=void 0;n(15);var r=n(118),o=n(58);n(64),t.links=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments[1],n=void 0,i=void 0;switch(t.type){case r.SAGA_TOOLBOXLINK_LINK_CREATE:return n=e.slice(),i={group:t.payload.group,sozai_id:t.payload.sozai_id},n.push(i),n;case r.SAGA_TOOLBOXLINK_LINK_DELETE:n=e.slice();for(var a=0;a<n.length;a++)if(n[a].group==t.payload.group){n.splice(a,1);break}return n;case o.SAGA_TOOLBOXSOZAI_SOZAI_DELETE:n=e.slice();for(var u=0;u<n.length;u++)if(n[u].sozai_id==t.payload.id){n.splice(u,1);break}return n;default:return e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.sozai=void 0;n(15);var r=n(83),o=n(58);t.sozai=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[{id:"素材A",type:"text",text:"　生産年齢人口の減少や第４次産業革命への対応など、建設業は大きな転換期を迎えている。３月に設立７０周年を迎えた全国建設業協会の近藤晴貞会長は、地域建設業が役割を果たし続けるために、「働き方改革と生産性向上に果敢に挑戦しなければならない」とし、「自ら改革を進めていくことも重要になる」と強調する。７０周年を契機に策定した「地域建設業将来展望」には、転換期を変革の好機に変えるためのキーワードを盛り込んだ。地域建設業の進化を後押しするため、全建は今後も各建設業協会の活躍を強力に推進するエンジンであり続ける。\n　近藤会長は、地域建設業に求められる役割について、「安全・安心の確保だけではなく、住民の利便性向上や地域経済の活性化など多岐にわたる」とした上で、「安全・安心の確保という切り口だけでなく、将来の地域建設業のあるべき姿を議論していかなければならない」と指摘する。\n　将来展望では、強みである「地域建設企業力」を生かした新時代の構築を打ち出し、インフラ老朽化対策での川上段階からの参画など、積極的な事業提案への取り組みを１つの方向性として示している。\n　視線の先にあるのは、地域建設業の持続的な発展であり、近藤会長は「若者が先を見通すことができる環境づくりの基盤を、年配の方々がつくる」という考えがベースになっていると説明する。\n　とはいえ、さまざまな施策が立案されても、経営の健全化がなければ実現は難しい。働き方改革や生産性向上の原資となる「健全な経営の継続」のためには、「仕事があり、仕事をこなす人がいて、利潤が出るという仕組みづくりをしなければならない」と強調する。\n　公共事業予算は下げ止まりの傾向が見られているが、今後も必要な仕事量を確保できるかどうかが地域ごとに異なる状況下で、「システムなどのサポートがなければできない部分もあるが、自ら仕事量を確保していくという取り組みも考えていく必要がある」と、積極果敢なチャレンジを生き残りの重要な要素に挙げる。\n　地域建設業が新時代を切り開くためには、公共事業予算の持続的・安定的な確保が重要な役割を果たすが、「予算の配分が一番大きな課題になる」とし、地域建設業、中小企業向けの予算確保に向けた活動を引き続き展開する。\n　働き方改革では、会員が現行の休日実績を１日増やす「休日月１＋（ツキイチプラス）」運動を展開するほか、「単価引き上げ分アップ宣言」に基づき、公共工事設計労務単価の改定分を下請に反映するための取り組みも徹底する。\n　建設キャリアアップシステムに対しては、「技能者の保有資格や就労実績を蓄積することで処遇の改善、技能の研さんにつながる。働き方改革、中長期的な担い手確保の面で、良い仕組みだと思う」と期待を寄せる。\n　新たな一歩を踏み出した全建の今後の役割として近藤会長は、各建協と会員企業が活動しやすい環境づくりや、地域建設業の魅力発信などを挙げる。「各建協単独では取り組みが難しいテーマや課題も、全建で集約すれば全国の声として発信することができる」とし、引き続き「地域建設業の地位向上と発展に寄与し続けていきたい」と力を込める。",mojiObjAry:[],image:"",select:""}],t=arguments[1],n=void 0,i=void 0;switch(t.type){case o.SAGA_TOOLBOXSOZAI_SOZAI_SELECT:n=e.slice();for(var a=0;a<n.length;a++)n[a].select="";for(var u=0;u<n.length;u++)if(n[u].id==t.payload.id){n[u].select="on";break}return n;case o.SAGA_TOOLBOXSOZAI_SOZAI_TOGGLE:n=e.slice();for(var c=void 0,s=void 0,l=0;l<n.length;l++)if(n[l].id==t.payload.id){c=l,s=n[l].select;break}for(var f=0;f<n.length;f++)n[f].select="";return s="on"==s?"":"on",n[c].select=s,n;case o.SAGA_TOOLBOXSOZAI_SOZAI_UPDATE:n=e.slice();for(var p=0;p<n.length;p++)if(n[p].id==t.payload.sozai.id){n[p].type=t.payload.sozai.type,n[p].text=t.payload.sozai.text,n[p].mojiObjAry=r.Text.createMojiObjAry(t.payload.sozai.text),n[p].image=t.payload.sozai.image;break}return n;case o.SAGA_TOOLBOXSOZAI_SOZAI_DELETE:n=e.slice();for(var d=0;d<n.length;d++)n[d].select="";for(var h=0;h<n.length;h++)if(n[h].id==t.payload.id){n.splice(h,1);break}return n;case o.SAGA_TOOLBOXSOZAI_SOZAI_CREATE:n=e.slice();for(var v=0;v<n.length;v++)n[v].select="";return i={id:t.payload.id,type:t.payload.type,text:t.payload.text,mojiObjAry:r.Text.createMojiObjAry(t.payload.text),image:t.payload.image,select:"on"},n.push(i),n;default:return e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.toolboxs=void 0;n(15);var r=n(119),o=n(65);t.toolboxs=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[{id:"toolbox001",type:"scale",x:0,y:0,w:200,h:40,view:"true"},{id:"toolbox002",type:"boxdata",x:0,y:0,w:200,h:140,view:"true"},{id:"toolbox003",type:"textdata",x:0,y:0,w:200,h:160,view:"true"},{id:"toolbox004",type:"sozai",x:0,y:0,w:200,h:400,view:"true"},{id:"toolbox005",type:"link",x:0,y:0,w:200,h:470,view:"true"}],t=arguments[1],n=void 0;switch(t.type){case r.SAGA_TOOLBOX_MOVEEND:n=e.slice();for(var i=0;i<n.length;i++)if(n[i].id==t.payload.id){n[i].x=t.payload.x,n[i].y=t.payload.y;break}return n;case o.SAGA_SELECTBOX_BOX_SELECT:n=e.slice(),console.log(t);for(var a=0;a<n.length&&("textdata"!=n[a].type||"text"!=t.payload.type);a++);return n;case o.SAGA_SELECTBOX_BOX_NONSELECT:n=e.slice();for(var u=0;u<n.length&&"textdata"!=n[u].type;u++);return n;default:return e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.focusbox=void 0;var r=n(65),o=n(64);t.focusbox=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{id:"",group:"",no:0},t=arguments[1];switch(t.type){case r.SAGA_SELECTBOX_BOX_NONSELECT:return{id:"",type:"",group:"",no:0};case r.SAGA_SELECTBOX_BOX_SELECT:return{id:t.payload.id,type:t.payload.type,group:t.payload.group,no:t.payload.no};case o.SAGA_TOOLBOXBOXDATA_BOXDATA_UPDATE:return{id:t.payload.box.id,type:t.payload.box.type,group:t.payload.box.group,no:t.payload.box.no};case o.SAGA_TOOLBOXBOXDATA_BOXDATA_DELETE:return{id:"",type:"",group:"",no:0};case o.SAGA_TOOLBOXBOXDATA_BOXDATA_CREATE:return{id:t.payload.box.id,type:t.payload.box.type,group:t.payload.box.group,no:t.payload.box.no};default:return e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=t.TextGrid={getTextGridAry:function(e,t,n,o,i,a,u,c,s){for(var l=[],f=r.getGyookuriGridAry(t,i,a,s,c),p=r.getJidumeGridAry(e,n,o,u),d=0;d<f.length;d++)for(var h=0;h<p.length;h++)l.push([p[h],f[d]]);return l},getJidumeGridAry:function(e,t,n,r){var o=e-(t+n),i=Math.floor(o/r),a=o%r/(i-1),u=[],c=0;c+=t;for(var s=0;s<i;s++)u.push(c+r/2),c+=r,c+=a;return u},getGyookuriGridAry:function(e,t,n,r,o){var i=[],a=0;for(a+=t;!(a+o>e-n);)i.push(a+o/2),a+=o+r;return i}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.boxs=void 0;n(15);var r=n(176),o=n(65),i=n(64),a=n(120),u=(n(58),n(84));t.boxs=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[{id:"box1",type:"text",group:"グループA",no:1,x1:400,y1:100,x2:700,y2:300,text:{kumihoko:"tate",padding_js:10,padding_je:10,padding_gs:10,padding_ge:10,size_j:20,size_g:20,gyokan:5},textgrid:[],textResult:[]},{id:"box2",type:"text",group:"グループA",no:2,x1:400,y1:350,x2:700,y2:550,text:{kumihoko:"tate",padding_js:10,padding_je:10,padding_gs:10,padding_ge:10,size_j:20,size_g:20,gyokan:5},textgrid:[],textResult:[]},{id:"box3",type:"text",group:"グループA",no:3,x1:400,y1:600,x2:700,y2:800,text:{kumihoko:"tate",padding_js:10,padding_je:10,padding_gs:10,padding_ge:10,size_j:20,size_g:20,gyokan:5},textgrid:[],textResult:[]}],t=arguments[1],n=void 0,c=void 0,s=void 0;switch(t.type){case o.SAGA_SELECTBOX_EDITBOX_MOVEEND:n=e.slice();for(var l=0;l<n.length;l++)if(n[l].id==t.payload.id){n[l].x1=t.payload.x1,n[l].y1=t.payload.y1,n[l].x2=t.payload.x2,n[l].y2=t.payload.y2;break}return n;case o.SAGA_SELECTBOX_EDITBOX_CHANGESIZE:n=e.slice();for(var f=0;f<n.length;f++)if(n[f].id==t.payload.id){n[f].x1=t.payload.x1,n[f].y1=t.payload.y1,n[f].x2=t.payload.x2,n[f].y2=t.payload.y2,"tate"==n[f].text.kumihoko?(c=n[f].y2-n[f].y1,s=n[f].x2-n[f].x1):(c=n[f].x2-n[f].x1,s=n[f].y2-n[f].y1);var p=r.TextGrid.getTextGridAry(c,s,n[f].text.padding_js,n[f].text.padding_je,n[f].text.padding_gs,n[f].text.padding_ge,n[f].text.size_j,n[f].text.size_g,n[f].text.gyokan);n[f].textgrid=p;break}return n;case i.SAGA_TOOLBOXBOXDATA_BOXDATA_UPDATE:n=e.slice();for(var d=0;d<n.length;d++)if(n[d].id==t.payload.box.id){n[d].group=t.payload.box.group,n[d].no=t.payload.box.no;break}return n;case a.SAGA_TOOLBOXTEXTDATA_TEXTDATA_UPDATE:n=e.slice();for(var h=0;h<n.length;h++)if(n[h].id==t.payload.box.id){n[h].text.padding_js=t.payload.box.text.padding_js,n[h].text.padding_je=t.payload.box.text.padding_je,n[h].text.padding_gs=t.payload.box.text.padding_gs,n[h].text.padding_ge=t.payload.box.text.padding_ge,n[h].text.kumihoko=t.payload.box.text.kumihoko,n[h].text.gyokan=t.payload.box.text.gyokan,"tate"==n[h].text.kumihoko?(c=n[h].y2-n[h].y1,s=n[h].x2-n[h].x1):(c=n[h].x2-n[h].x1,s=n[h].y2-n[h].y1);var v=r.TextGrid.getTextGridAry(c,s,n[h].text.padding_js,n[h].text.padding_je,n[h].text.padding_gs,n[h].text.padding_ge,n[h].text.size_j,n[h].text.size_g,n[h].text.gyokan);n[h].textgrid=v;break}return n;case i.SAGA_TOOLBOXBOXDATA_BOXDATA_DELETE:n=e.slice();for(var y=0;y<n.length;y++)if(n[y].id==t.payload.id){n.splice(y,1);break}return n;case i.SAGA_TOOLBOXBOXDATA_BOXDATA_CREATE:n=e.slice();var g=void 0;"tate"==(g={id:t.payload.box.id,type:t.payload.box.type,x1:100,y1:100,x2:200,y2:200,group:t.payload.box.group,no:t.payload.box.no,text:{kumihoko:"tate",padding_js:10,padding_je:10,padding_gs:10,padding_ge:10,size_j:10,size_g:10,gyokan:5}}).text.kumihoko?(c=g.y2-g.y1,s=g.x2-g.x1):(c=g.x2-g.x1,s=g.y2-g.y1);var b=r.TextGrid.getTextGridAry(c,s,g.text.padding_js,g.text.padding_je,g.text.padding_gs,g.text.padding_ge,g.text.size_j,g.text.size_g,g.text.gyokan);return g.textgrid=b,g.textResult=[],n.push(g),n;case u.SAGA_NAGASHIRESULT_CREATE:n=e.slice();for(var m=0;m<n.length;m++)if(n[m].id==t.payload.box_id){n[m].textResult=t.payload.nagashiResult;break}return n;case u.SAGA_NAGASHI_REMOVE:n=e.slice();for(var x=0;x<n.length;x++)n[x].group==t.payload.group&&(n[x].textResult=[]);return n;default:return e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.scale=void 0;var r=n(121);t.scale=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:100,t=arguments[1];switch(t.type){case r.SAGA_SCALE_CHANGE:return t.payload.scale;default:return e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(114),o=n(178),i=n(177),a=n(175),u=n(174),c=n(173),s=n(172),l=(0,r.combineReducers)({scale:o.scale,boxs:i.boxs,focusbox:a.focusbox,toolboxs:u.toolboxs,sozai:c.sozai,links:s.links});t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.LibArray={setArrayUnique:function(e,t){for(var n=!1,r=0;r<e.length;r++)if(e[r]==t){n=!0;break}return 0==n&&e.push(t),e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(7),u=(r=a)&&r.__esModule?r:{default:r},c=(n(66),n(85));var s={container:{textAlign:"left",paddingTop:"5px"},line:{height:"20px",fontSize:"12px",lineHeight:"20px"},button:{width:"40px",height:"14px",fontSize:"12px",textAlign:"center",lineHeight:"14px",border:"1px solid gray",backgroundColor:"lightgreen",borderRadius:"2px"},boxlistbox:{width:"100%",height:"115px",overflowY:"scroll",outline:"1px solid #a8a8a8",backgroundColor:"white"},sozailistbox:{width:"100%",height:"115px",overflowY:"scroll",outline:"1px solid #a8a8a8",backgroundColor:"white"},linklistbox:{width:"100%",height:"115px",overflowY:"scroll",outline:"1px solid #a8a8a8",backgroundColor:"white"},list:{width:"100%",height:"20px",lineHeight:"20px",borderBottom:"1px solid gray"},linklist:{width:"100%",height:"40px",lineHeight:"20px",borderBottom:"1px solid gray",backgroundColor:"lightpink"}},l=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={group:"",sozai_id:""},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,u.default.Component),i(t,[{key:"componentWillReceiveProps",value:function(e){this.setState({group:"",sozai_id:""})}},{key:"clickBoxList",value:function(e){var t=void 0;t=this.state.group==e?"":e,this.setState({group:t})}},{key:"clickSozaiList",value:function(e){var t=void 0;t=this.state.sozai_id==e?"":e,this.setState({sozai_id:t})}},{key:"clickCreateButton",value:function(){""!=this.state.group&&""!=this.state.sozai_id&&this.props.onClickCreateButton({group:this.state.group,sozai_id:this.state.sozai_id})}},{key:"clickDeleteButton",value:function(e){0!=confirm("削除します。よろしいですか？")&&this.props.onClickDeleteButton({group:e})}},{key:"isIncludeLinkListGroup",value:function(e){for(var t=0;t<this.props.links.length;t++)if(this.props.links[t].group==e)return!0;return!1}},{key:"isIncludeLinkListSozaiId",value:function(e){for(var t=0;t<this.props.links.length;t++)if(this.props.links[t].sozai_id==e)return!0;return!1}},{key:"grouplist",value:function(){for(var e=this,t=[],n=[],r=c.Box.getGroupAry(this.props.boxs),i=0;i<r.length;i++)1!=this.isIncludeLinkListGroup(r[i])&&t.push({group:r[i]});for(var a=function(r){var i=void 0;i=e.state.group==t[r].group?"red":"lightyellow",n.push(u.default.createElement("div",{style:o({},s.list,{backgroundColor:i}),onClick:function(n){return e.clickBoxList(t[r].group)}},t[r].group))},l=0;l<t.length;l++)a(l);return n}},{key:"sozailist",value:function(){for(var e=this,t=[],n=[],r=0;r<this.props.sozai.length;r++)1!=this.isIncludeLinkListSozaiId(this.props.sozai[r].id)&&t.push({sozai_id:this.props.sozai[r].id});for(var i=function(r){var i=void 0;i=e.state.sozai_id==t[r].sozai_id?"red":"lightyellow",n.push(u.default.createElement("div",{style:o({},s.list,{backgroundColor:i}),onClick:function(n){return e.clickSozaiList(t[r].sozai_id)}},t[r].sozai_id))},a=0;a<t.length;a++)i(a);return n}},{key:"linklist",value:function(){for(var e=this,t=[],n=function(n){t.push(u.default.createElement("div",{style:o({},s.linklist)},u.default.createElement("span",{style:{width:"9px",height:"9px",backgroundColor:"lightgray"},onClick:function(t){return e.clickDeleteButton(e.props.links[n].group)}},"✕")," ",e.props.links[n].group,u.default.createElement("br",null),u.default.createElement("span",{style:{width:"9px",height:"9px"}},"　")," ",e.props.links[n].sozai_id))},r=0;r<this.props.links.length;r++)n(r);return t}},{key:"render",value:function(){var e=this;return u.default.createElement("div",{style:s.container},u.default.createElement("div",{style:o({},s.line,{color:"blue"})},"グループリスト"),u.default.createElement("div",{style:o({},s.boxlistbox)},this.grouplist()),u.default.createElement("div",{style:o({},s.line,{color:"blue"})},"素材リスト"),u.default.createElement("div",{style:o({},s.sozailistbox)},this.sozailist()),u.default.createElement("div",{style:o({},s.button,{width:"60px",float:"right",marginTop:"5px"}),onClick:function(t){return e.clickCreateButton()}},"リンク"),u.default.createElement("div",{style:{clear:"both"}}),u.default.createElement("div",{style:o({},s.line,{color:"green"})},"リンクリスト"),u.default.createElement("div",{style:o({},s.linklistbox)},this.linklist()))}}]),t}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=n(12),a=n(181),u=(r=a)&&r.__esModule?r:{default:r},c=(n(15),n(122));var s=(0,i.connect)(function(e,t){return o({},e)},function(e,t){return{dispatch:e}},function(e,t,n){return{links:e.links,boxs:e.boxs,sozai:e.sozai,onClickCreateButton:function(e){t.dispatch((0,c.SU_ToolBoxLink_CreateButton_Click)(e))},onClickDeleteButton:function(e){t.dispatch((0,c.SU_ToolBoxLink_DeleteButton_Click)(e))}}})(u.default);t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(7),u=(r=a)&&r.__esModule?r:{default:r};n(66);var c={container:{textAlign:"left",paddingTop:"5px"},line:{height:"20px",fontSize:"12px",lineHeight:"20px"},button:{width:"40px",height:"14px",fontSize:"12px",textAlign:"center",lineHeight:"14px",border:"1px solid gray",backgroundColor:"lightgreen",borderRadius:"2px"},input:{height:"9px"},listbox:{width:"100%",height:"115px",overflowY:"scroll",outline:"1px solid #a8a8a8",backgroundColor:"white"},textbox:{width:"174px",height:"175px",marginTop:"5px"},sozailist:{width:"100%",height:"20px",lineHeight:"20px",borderBottom:"1px solid gray"}},s="lightyellow",l="pink",f="red",p=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.button="",n.state={id:"",inputid:"",type:"",text:"",image:""},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,u.default.Component),i(t,[{key:"componentWillReceiveProps",value:function(e){for(var t="",n=0;n<e.sozai.length;n++)if("on"==e.sozai[n].select){t=e.sozai[n];break}""==t?this.setState({id:"",inputid:"",type:"",text:"",image:""}):this.setState({id:t.id,type:t.type,text:t.text,image:t.image})}},{key:"clickList",value:function(e){this.props.onClickSozaiList({id:e.id})}},{key:"clickUpdateButton",value:function(){var e={id:this.state.id,type:this.state.type,text:this.state.text,image:this.state.image};this.props.onClickUpdateButton({sozai:e}),this.button="update"}},{key:"clickDeleteButton",value:function(e){0!=confirm("削除します。よろしいですか？")&&this.props.onClickDeleteButton({id:e})}},{key:"clickCreateButton",value:function(){""!=this.state.inputid&&""!=this.state.type?this.props.checkSozaiExist(this.state.inputid)?alert("この素材IDは既に存在しています"):"text"==this.state.type?(this.props.onClickCreateButton({id:this.state.inputid,type:this.state.type,text:this.state.text,image:this.state.image}),this.setState({inputid:""})):alert("「タイプ」は text と入力してください"):alert("素材IDおよびタイプを入力してください")}},{key:"sozailist",value:function(){var e=this;return this.props.sozai.map(function(t){var n=void 0;switch(t.type){case"text":n=s;break;case"image":n=l}return"on"==t.select&&(n=f),u.default.createElement("div",{style:o({},c.sozailist,{backgroundColor:n}),onClick:function(n){e.clickList(t)}},u.default.createElement("span",{style:{width:"9px",height:"9px",backgroundColor:"lightgray"},onClick:function(n){return e.clickDeleteButton(t.id)}},"✕")," ",t.id)})}},{key:"idtype",value:function(){var e=this;return""==this.state.id?[u.default.createElement("div",{style:o({},c.line)},"素材ID：",u.default.createElement("input",{type:"text",style:o({},c.input,{width:"80px"}),value:this.state.inputid,onChange:function(t){return e.setState({inputid:t.target.value})}})),u.default.createElement("div",{style:o({},c.line)},"タイプ：",u.default.createElement("input",{type:"text",style:o({},c.input,{width:"80px"}),value:this.state.type,onChange:function(t){return e.setState({type:t.target.value})}}))]:[u.default.createElement("div",{style:o({},c.line)},"素材ID：",this.state.id),u.default.createElement("div",{style:o({},c.line)},"タイプ：",this.state.type)]}},{key:"newupdatebutton",value:function(){var e=this;return""==this.state.id?[u.default.createElement("div",{style:o({},c.button,{width:"60px",float:"right"}),onClick:function(t){return e.clickCreateButton()}},"新規作成")]:[u.default.createElement("div",{style:o({},c.button,{float:"right"}),onClick:function(t){return e.clickUpdateButton()}},"更新")]}},{key:"render",value:function(){var e=this;return u.default.createElement("div",{id:"toolboxsozai",style:c.container},u.default.createElement("div",{style:{height:"5px"}}),u.default.createElement("div",{style:o({},c.listbox,{marginBottom:"5px"})},this.sozailist()),this.idtype(),u.default.createElement("textarea",{id:"toolboxsozaitextarea",value:this.state.text,style:o({},c.textbox),onChange:function(t){return e.setState({text:t.target.value})}}),this.newupdatebutton())}}]),t}();t.default=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=n(12),a=n(183),u=(r=a)&&r.__esModule?r:{default:r},c=(n(15),n(123));var s=(0,i.connect)(function(e,t){return o({},e)},function(e,t){return{dispatch:e}},function(e,t,n){return{sozai:e.sozai,onClickSozaiList:function(e){t.dispatch((0,c.SU_ToolBoxSozai_Sozai_Toggle)(e))},onClickUpdateButton:function(e){t.dispatch((0,c.SU_ToolBoxSozai_UpdateButton_Click)(e))},onClickDeleteButton:function(e){t.dispatch((0,c.SU_ToolBoxSozai_DeleteButton_Click)(e))},onClickCreateButton:function(e){t.dispatch((0,c.SU_ToolBoxSozai_CreateButton_Click)(e))},checkSozaiExist:function(t){for(var n=0;n<e.sozai.length;n++)if(e.sozai[n].id==t)return!0;return!1}}})(u.default);t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(7),u=(r=a)&&r.__esModule?r:{default:r},c=n(66);var s={container:{textAlign:"left"},line:{height:"20px",fontSize:"12px",lineHeight:"20px"},button:{width:"40px",height:"14px",fontSize:"12px",textAlign:"center",lineHeight:"14px",border:"1px solid gray",backgroundColor:"lightgreen",borderRadius:"2px"},input:{height:"9px"}},l=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={padding_js:e.box.text.padding_js,padding_je:e.box.text.padding_je,padding_gs:e.box.text.padding_gs,padding_ge:e.box.text.padding_ge,kumihoko:e.box.text.kumihoko,size_j:e.box.text.size_j,size_g:e.box.text.size_g,gyokan:e.box.text.gyokan},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,u.default.Component),i(t,[{key:"componentWillReceiveProps",value:function(e){this.setState({padding_js:e.box.text.padding_js,padding_je:e.box.text.padding_je,padding_gs:e.box.text.padding_gs,padding_ge:e.box.text.padding_ge,kumihoko:e.box.text.kumihoko,size_j:e.box.text.size_j,size_g:e.box.text.size_g,gyokan:e.box.text.gyokan})}},{key:"clickUpdateButton",value:function(){var e=this.props.box;""!==this.state.padding_js&&""!==this.state.padding_je&&""!==this.state.padding_gs&&""!==this.state.padding_ge&&""!==this.state.kumihoko&&""!==this.state.size_j&&""!==this.state.size_g&&""!==this.state.gyokan?"tate"==this.state.kumihoko||"yoko"==this.state.kumihoko?(e.id=this.props.box.id,e.text.padding_js=this.state.padding_js,e.text.padding_je=this.state.padding_je,e.text.padding_gs=this.state.padding_gs,e.text.padding_ge=this.state.padding_ge,e.text.kumihoko=this.state.kumihoko,e.text.size_j=this.state.size_j,e.text.size_g=this.state.size_g,e.text.gyokan=this.state.gyokan,this.props.onClickUpdateButton({box:e})):alert("「組方向」は、tate または yoko と入力してください"):alert("全ての項目を入力してください")}},{key:"render",value:function(){var e=this;return u.default.createElement("div",{style:s.container},u.default.createElement("div",{style:o({},s.line)},"ﾊﾟﾃﾞｨﾝｸﾞ(字詰) S",u.default.createElement("input",{type:"text",value:this.state.padding_js,style:o({},s.input,{width:"25px"}),onChange:function(t){return e.setState({padding_js:c.String.toNumeric(t.target.value)})}}),"  E",u.default.createElement("input",{type:"text",value:this.state.padding_je,style:o({},s.input,{width:"25px"}),onChange:function(t){return e.setState({padding_je:c.String.toNumeric(t.target.value)})}})),u.default.createElement("div",{style:o({},s.line)},"ﾊﾟﾃﾞｨﾝｸﾞ(行送) S",u.default.createElement("input",{type:"text",value:this.state.padding_gs,style:o({},s.input,{width:"25px"}),onChange:function(t){return e.setState({padding_gs:c.String.toNumeric(t.target.value)})}}),"  E",u.default.createElement("input",{type:"text",value:this.state.padding_ge,style:o({},s.input,{width:"25px"}),onChange:function(t){return e.setState({padding_ge:c.String.toNumeric(t.target.value)})}})),u.default.createElement("div",{style:o({},s.line)},"組方向 ",u.default.createElement("input",{type:"text",value:this.state.kumihoko,style:o({},s.input,{width:"50px"}),onChange:function(t){return e.setState({kumihoko:t.target.value})}}),"  行間 ",u.default.createElement("input",{type:"text",value:this.state.gyokan,style:o({},s.input,{width:"30px"}),onChange:function(t){return e.setState({gyokan:c.String.toNumeric(t.target.value)})}})),u.default.createElement("div",{style:o({},s.line)},"文字サイズ（字詰）",u.default.createElement("input",{type:"text",value:this.state.size_j,style:o({},s.input,{width:"30px"}),onChange:function(t){return e.setState({size_j:c.String.toNumeric(t.target.value)})}})),u.default.createElement("div",{style:o({},s.line)},"文字サイズ（行送）",u.default.createElement("input",{type:"text",value:this.state.size_g,style:o({},s.input,{width:"30px"}),onChange:function(t){return e.setState({size_g:c.String.toNumeric(t.target.value)})}})),u.default.createElement("div",{style:o({},s.line)}),u.default.createElement("div",{style:o({},s.line)},u.default.createElement("div",{style:o({},s.button,{float:"right"}),onClick:function(){return e.clickUpdateButton()}},"更新")))}}]),t}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=n(12),a=n(185),u=(r=a)&&r.__esModule?r:{default:r},c=n(15),s=n(124);var l=(0,i.connect)(function(e,t){return o({},e)},function(e,t){return{dispatch:e}},function(e,t,n){var r={id:"",text:{kumihoko:"",padding_js:"",padding_je:"",padding_gs:"",padding_ge:"",size_j:"",size_g:"",gyokan:""}};if(""!=e.focusbox.id)for(var o=0;o<e.boxs.length;o++)if(e.boxs[o].id==e.focusbox.id){var i=c.Zahyo.changeRectToArea(e.boxs[o].x1,e.boxs[o].y1,e.boxs[o].x2,e.boxs[o].y2);(r=e.boxs[o]).x=i.x,r.y=i.y,r.w=i.w,r.h=i.h;break}return{box:r,onClickUpdateButton:function(e){t.dispatch((0,s.SU_ToolBoxTextData_UpdateButton_Click)(e))}}})(u.default);t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(7),u=(r=a)&&r.__esModule?r:{default:r},c=n(66);var s={container:{textAlign:"left"},line:{height:"20px",fontSize:"12px",lineHeight:"20px"},button:{width:"40px",height:"14px",fontSize:"12px",textAlign:"center",lineHeight:"14px",border:"1px solid gray",backgroundColor:"lightgreen",borderRadius:"2px"},input:{height:"9px"}},l=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={id:e.box.id,type:e.box.type,group:e.box.group,no:e.box.no},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,u.default.Component),i(t,[{key:"componentWillReceiveProps",value:function(e){this.setState({id:e.box.id,type:e.box.type,group:e.box.group,no:e.box.no})}},{key:"clickUpdateButton",value:function(){var e=this.props.box;""!==this.props.box.id&&""!==this.props.box.type&&""!==this.state.group&&""!==this.state.no?(e.id=this.props.box.id,e.type=this.props.box.type,e.group=this.state.group,e.no=this.state.no,this.props.onClickUpdateButton({box:e})):alert("全ての項目を入力してください")}},{key:"clickDeleteButton",value:function(){0!=confirm("ボックスを削除します。よろしいですか？")&&this.props.onClickDeleteButton({id:this.state.id})}},{key:"clickCreateButton",value:function(){var e=this.props.box;""!==this.state.id&&""!==this.state.type&&""!==this.state.group&&""!==this.state.no?this.props.checkKizonId(this.state.id)?alert("このボックスIDは既に存在します"):"text"==this.state.type?(e.id=this.state.id,e.type=this.state.type,e.group=this.state.group,e.no=this.state.no,this.props.onClickCreateButton({box:e})):alert("「タイプ」は text と入力してください"):alert("全ての項目を入力してください")}},{key:"henshu",value:function(){var e=this;return u.default.createElement("div",{style:s.container},u.default.createElement("div",{style:o({},s.line)},"ボックスID:",u.default.createElement("span",{style:{width:"9px",height:"9px",backgroundColor:"lightgray"},onClick:function(t){return e.clickDeleteButton()}},"✕")," ",u.default.createElement("span",{style:{fontWeight:"bold",color:"blue"}},this.props.box.id)),u.default.createElement("div",{style:o({},s.line)},"タイプ： ",u.default.createElement("span",{style:{color:"green"}},this.props.box.type)),u.default.createElement("div",{style:o({},s.line)},"ｸﾞﾙｰﾌﾟ名 ",u.default.createElement("input",{type:"text",value:this.state.group,style:o({},s.input,{width:"100px"}),onChange:function(t){return e.setState({group:t.target.value})}})),u.default.createElement("div",{style:o({},s.line)},"No.",u.default.createElement("input",{type:"text",value:this.state.no,style:o({},s.input,{width:"20px"}),onChange:function(t){return e.setState({no:c.String.toNumeric(t.target.value)})}})),u.default.createElement("div",{style:o({},s.line)},"x:",this.props.box.x," y:",this.props.box.y," w:",this.props.box.w," h:",this.props.box.h),u.default.createElement("div",{style:o({},s.line)},u.default.createElement("div",{style:o({},s.button,{float:"right"}),onClick:function(){return e.clickUpdateButton()}},"更新")))}},{key:"shinki",value:function(){var e=this;return u.default.createElement("div",{style:s.container},u.default.createElement("div",{style:o({},s.line)},"ボックスID: ",u.default.createElement("input",{type:"text",value:this.state.id,style:o({},s.input,{width:"50px"}),onChange:function(t){return e.setState({id:t.target.value})}})),u.default.createElement("div",{style:o({},s.line)},"タイプ： ",u.default.createElement("input",{type:"text",value:this.state.type,style:o({},s.input,{width:"50px"}),onChange:function(t){return e.setState({type:t.target.value})}})),u.default.createElement("div",{style:o({},s.line)},"ｸﾞﾙｰﾌﾟ名 ",u.default.createElement("input",{type:"text",value:this.state.group,style:o({},s.input,{width:"100px"}),onChange:function(t){return e.setState({group:t.target.value})}})),u.default.createElement("div",{style:o({},s.line)},"No.",u.default.createElement("input",{type:"text",value:this.state.no,style:o({},s.input,{width:"20px"}),onChange:function(t){return e.setState({no:c.String.toNumeric(t.target.value)})}})),u.default.createElement("div",{style:o({},s.line)}),u.default.createElement("div",{style:o({},s.line)},u.default.createElement("div",{style:o({},s.button,{width:"60px",float:"right"}),onClick:function(){return e.clickCreateButton()}},"新規作成")))}},{key:"render",value:function(){return""==this.props.box.id?this.shinki():this.henshu()}}]),t}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=n(12),a=n(187),u=(r=a)&&r.__esModule?r:{default:r},c=n(15),s=n(125);var l=(0,i.connect)(function(e,t){return o({},e)},function(e,t){return{dispatch:e}},function(e,t,n){var r={id:"",type:"",group:"",no:"",text:{kumihoko:"",padding_js:"",padding_je:"",padding_gs:"",padding_ge:"",size_j:"",size_g:"",gyokan:""}};if(""!=e.focusbox.id)for(var o=0;o<e.boxs.length;o++)if(e.boxs[o].id==e.focusbox.id){var i=c.Zahyo.changeRectToArea(e.boxs[o].x1,e.boxs[o].y1,e.boxs[o].x2,e.boxs[o].y2);(r=e.boxs[o]).x=i.x,r.y=i.y,r.w=i.w,r.h=i.h;break}return{box:r,onClickUpdateButton:function(e){t.dispatch((0,s.SU_ToolBoxBoxData_UpdateButton_Click)(e))},onClickDeleteButton:function(e){t.dispatch((0,s.SU_ToolBoxBoxData_DeleteButton_Click)(e))},onClickCreateButton:function(e){t.dispatch((0,s.SU_ToolBoxBoxData_CreateButton_Click)(e))},checkKizonId:function(t){console.log("ok1");for(var n=0;n<e.boxs.length;n++)if(console.log("ok2"),e.boxs[n].id==t)return!0;return!1}}})(u.default);t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(7),u=(r=a)&&r.__esModule?r:{default:r};var c={container:{textAlign:"left"},per:{width:"40px",fontSize:"12px",textAlign:"left",lineHeight:"20px"},button:{marginTop:"2px",width:"38px",height:"14px",textAlign:"center",fontSize:"12px",lineHeight:"14px",border:"1px solid #333",borderRadius:"2px",backgroundColor:"lightgreen",userSelect:"none"}},s=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,u.default.Component),i(t,[{key:"render",value:function(){var e=this;return u.default.createElement("div",{style:c.container},u.default.createElement("div",{style:o({},c.per,{float:"left"})},this.props.scale," %"),u.default.createElement("div",{style:o({},c.button,{float:"right"}),onClick:function(){return e.props.onClick100PerButton()}},"100%"),u.default.createElement("div",{style:o({},c.button,{float:"right",marginRight:"5px"}),onClick:function(){return e.props.onClickMaxButton()}},"拡大"),u.default.createElement("div",{style:o({},c.button,{float:"right",marginRight:"5px"}),onClick:function(){return e.props.onClickMinButton()}},"縮小"))}}]),t}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=n(12),a=n(189),u=(r=a)&&r.__esModule?r:{default:r},c=n(126);var s=(0,i.connect)(function(e,t){return o({},e)},function(e,t){return{dispatch:e}},function(e,t,n){return{scale:e.scale,onClickMinButton:function(){t.dispatch((0,c.SU_ToolBoxScale_MinButton_Click)())},onClickMaxButton:function(){t.dispatch((0,c.SU_ToolBoxScale_MaxButton_Click)())},onClick100PerButton:function(){t.dispatch((0,c.SU_ToolBoxScale_100PerButton_Click)())}}})(u.default);t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=function(){return function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=n(7),c=(r=u)&&r.__esModule?r:{default:r};var s={container:{position:"absolute",borderRadius:"5px",boxShadow:"0 0 2px gray"},title:{width:"calc(100% - 2px - 20px)",height:"18px",border:"1px solid gray",padding:"0px 10px",fontSize:"12px",lineHeight:"18px",color:"#333",borderRadius:"5px 5px 0 0",textAlign:"left",backgroundColor:"#a1bde8",userSelect:"none"},body:{width:"calc(100% - 2px - 20px)",padding:"0px 10px",borderRadius:"0 0 5px 5px",borderLeft:"1px solid gray",borderRight:"1px solid gray",borderBottom:"1px solid gray",fontSize:"14px",textAlign:"left",backgroundColor:"#f3f3f5",userSelect:"none"}},l=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.boxorgpos={x:e.x,y:e.y},n.mousepos={x:0,y:0},n.state={x:n.boxorgpos.x,y:n.boxorgpos.y},n.mouseMove=n.mouseMove.bind(n),n.mouseUp=n.mouseUp.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,c.default.Component),a(t,[{key:"componentWillReceiveProps",value:function(e){this.boxorgpos={x:e.x,y:e.y}}},{key:"mouseDown",value:function(e){e.stopPropagation(),e.preventDefault(),document.addEventListener("mousemove",this.mouseMove,!1),document.addEventListener("mouseup",this.mouseUp,!1),this.mousepos.x=e.pageX,this.mousepos.y=e.pageY}},{key:"mouseMove",value:function(e){e.stopPropagation(),e.preventDefault();var t=e.pageX,n=e.pageY,r=this.boxorgpos.x+(t-this.mousepos.x),o=this.boxorgpos.y+(n-this.mousepos.y),a=this.boxmovestop(r,o),u=i(a,2),c=u[0],s=u[1];this.setState({x:c,y:s})}},{key:"mouseUp",value:function(e){e.stopPropagation(),e.preventDefault(),document.removeEventListener("mousemove",this.mouseMove),document.removeEventListener("mouseup",this.mouseUp),this.props.endMoveBox({id:this.props.id,x:this.state.x,y:this.state.y})}},{key:"boxmovestop",value:function(e,t){var n=window.innerWidth,r=window.innerHeight;return e+this.props.w>=n&&(e=n-this.props.w),e<=0&&(e=0),t+20>=r&&(t=r-20),t<=0&&(t=0),[e,t]}},{key:"render",value:function(){var e=this;return c.default.createElement("div",{style:o({},s.container,{left:this.state.x+"px",top:this.state.y+"px",width:this.props.w+"px",height:this.props.h+"px"}),onClick:function(e){return e.stopPropagation(),e.preventDefault(),!1}},c.default.createElement("div",{style:s.title,onMouseDown:function(t){return e.mouseDown(t)}},this.props.title),c.default.createElement("div",{style:o({},s.body,{height:"calc("+this.props.h+"px - 20px"})},this.props.children))}}]),t}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=n(12),a=n(191),u=(r=a)&&r.__esModule?r:{default:r},c=n(127);var s=(0,i.connect)(function(e,t){return o({},e)},function(e,t){return{dispatch:e}},function(e,t,n){return o({},n,{endMoveBox:function(e){t.dispatch((0,c.SU_ToolBox_MoveEnd)(e))}})})(u.default);t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(7),a=(r=i)&&r.__esModule?r:{default:r},u=n(15),c=n(29);var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.boxClick=n.boxClick.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),o(t,[{key:"componentDidMount",value:function(){document.getElementById(this.props.id+"_selectbox").addEventListener("click",this.boxClick,!1)}},{key:"boxClick",value:function(e){return e.stopPropagation(),e.preventDefault(),this.props.onClickBox({id:this.props.id,type:this.props.type,group:this.props.group,no:this.props.no}),!1}},{key:"render",value:function(){var e=u.Zahyo.ruToluRectToArea(this.props.x1,this.props.y1,this.props.x2,this.props.y2,c.Define.svgimagesize.width,c.Define.svgimagesize.height);return a.default.createElement("g",null,a.default.createElement("rect",{id:this.props.id+"_selectbox",x:e.x,y:e.y,width:e.w,height:e.h,style:{fill:"black",fillOpacity:"0.0",stroke:"none"}}))}}]),t}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=n(12),a=n(193),u=(r=a)&&r.__esModule?r:{default:r},c=n(59);var s=(0,i.connect)(function(e,t){return o({},e)},function(e,t){return{dispatch:e}},function(e,t,n){return o({},n,{onClickBox:function(e){t.dispatch((0,c.SU_SelectBox_Box_Select)(e))}})})(u.default);t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(7),a=(r=i)&&r.__esModule?r:{default:r},u=n(15),c=n(29);var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.boxClick=n.boxClick.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),o(t,[{key:"componentDidMount",value:function(){document.getElementById(this.props.id+"_selectbox").addEventListener("click",this.boxClick,!1)}},{key:"boxClick",value:function(e){return e.stopPropagation(),e.preventDefault(),this.props.onClickBox({id:this.props.id,type:this.props.type,group:this.props.group,no:this.props.no}),!1}},{key:"render",value:function(){var e=u.Zahyo.ruToluRectToArea(this.props.x1,this.props.y1,this.props.x2,this.props.y2,c.Define.svgimagesize.width,c.Define.svgimagesize.height);return a.default.createElement("g",null,a.default.createElement("rect",{id:this.props.id+"_selectbox",x:e.x,y:e.y,width:e.w,height:e.h,style:{fill:"blue",fillOpacity:"0.3",stroke:"none"}}),a.default.createElement("text",{x:e.x+5,y:e.y+20,style:{fontSize:15,stroke:"none",fill:"white",fillOpacity:"0.7"}},this.props.no))}}]),t}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=n(12),a=n(195),u=(r=a)&&r.__esModule?r:{default:r},c=n(59);var s=(0,i.connect)(function(e,t){return o({},e)},function(e,t){return{dispatch:e}},function(e,t,n){return o({},n,{onClickBox:function(e){t.dispatch((0,c.SU_SelectBox_Box_Select)(e))}})})(u.default);t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){return function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(7),u=(r=a)&&r.__esModule?r:{default:r},c=n(29);var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.boxorgpos={x:e.x,y:e.y,w:e.w,h:e.h},n.handleorgpos={x:e.x+e.w/2,y:e.y+e.h},n.mousepos={x:0,y:0},n.state={x:n.handleorgpos.x,y:n.handleorgpos.y},n.mouseMove=n.mouseMove.bind(n),n.mouseUp=n.mouseUp.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,u.default.Component),i(t,[{key:"componentWillReceiveProps",value:function(e){1==e.handleRefresh&&(this.boxorgpos={x:e.x,y:e.y,w:e.w,h:e.h},this.handleorgpos={x:e.x+e.w/2,y:e.y+e.h}),this.setState({x:e.x+e.w/2,y:e.y+e.h})}},{key:"mouseDown",value:function(e){e.stopPropagation(),e.preventDefault(),document.addEventListener("mousemove",this.mouseMove,!1),document.addEventListener("mouseup",this.mouseUp,!1),document.addEventListener("click",this.click,!1),this.mousepos.x=100*e.pageX/this.props.scale,this.mousepos.y=100*e.pageY/this.props.scale,this.props.handleMouseDown()}},{key:"mouseMove",value:function(e){e.stopPropagation(),e.preventDefault();var t=100*e.pageY/this.props.scale,n=this.handleorgpos.x,r=this.handleorgpos.y+(t-this.mousepos.y),i=this.checkgrid1block(n,r),a=o(i,2);n=a[0],r=a[1];var u=this.props.gridsnap(n,r),c=o(u,2);n=c[0],r=c[1];var s=this.props.handlestop(n,r),l=o(s,2);n=l[0],r=l[1],this.props.handleMove(this.boxorgpos.x,this.boxorgpos.y,this.boxorgpos.w,r-this.boxorgpos.y)}},{key:"mouseUp",value:function(e){e.stopPropagation(),e.preventDefault(),document.removeEventListener("mousemove",this.mouseMove),document.removeEventListener("mouseup",this.mouseUp);return document.addEventListener("click",function e(t){t.stopPropagation(),document.removeEventListener("click",e,!0)},!0),this.props.handleMouseUp(),!1}},{key:"checkgrid1block",value:function(e,t){var n=this.boxorgpos.y;return t<n+c.Define.grid.height&&(t=n+c.Define.grid.height),[e,t]}},{key:"render",value:function(){var e=this,t=100*c.Define.handle.width/this.props.scale,n=100*c.Define.handle.height/this.props.scale;return u.default.createElement("rect",{x:this.state.x-t/2,y:this.state.y-n/2,width:t,height:n,style:{fill:"blue"},onClick:function(e){e.stopPropagation(),e.preventDefault()},onMouseDown:function(t){return e.mouseDown(t)}})}}]),t}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=n(12),a=n(197),u=(r=a)&&r.__esModule?r:{default:r};var c=(0,i.connect)(function(e,t){return o({},e)},function(e,t){return{dispatch:e}},function(e,t,n){return o({},n,{scale:e.scale})})(u.default);t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){return function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(7),u=(r=a)&&r.__esModule?r:{default:r},c=n(29);var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.boxorgpos={x:e.x,y:e.y,w:e.w,h:e.h},n.handleorgpos={x:e.x+e.w,y:e.y+e.h/2},n.mousepos={x:0,y:0},n.state={x:n.handleorgpos.x,y:n.handleorgpos.y},n.mouseMove=n.mouseMove.bind(n),n.mouseUp=n.mouseUp.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,u.default.Component),i(t,[{key:"componentWillReceiveProps",value:function(e){1==e.handleRefresh&&(this.boxorgpos={x:e.x,y:e.y,w:e.w,h:e.h},this.handleorgpos={x:e.x+e.w,y:e.y+e.h/2}),this.setState({x:e.x+e.w,y:e.y+e.h/2})}},{key:"mouseDown",value:function(e){e.stopPropagation(),e.preventDefault(),document.addEventListener("mousemove",this.mouseMove,!1),document.addEventListener("mouseup",this.mouseUp,!1),document.addEventListener("click",this.click,!1),this.mousepos.x=100*e.pageX/this.props.scale,this.mousepos.y=100*e.pageY/this.props.scale,this.props.handleMouseDown()}},{key:"mouseMove",value:function(e){e.stopPropagation(),e.preventDefault();var t=100*e.pageX/this.props.scale,n=this.handleorgpos.x+(t-this.mousepos.x),r=this.handleorgpos.y,i=this.checkgrid1block(n,r),a=o(i,2);n=a[0],r=a[1];var u=this.props.gridsnap(n,r),c=o(u,2);n=c[0],r=c[1];var s=this.props.handlestop(n,r),l=o(s,2);n=l[0],r=l[1],this.props.handleMove(this.boxorgpos.x,this.boxorgpos.y,n-this.boxorgpos.x,this.boxorgpos.h)}},{key:"mouseUp",value:function(e){e.stopPropagation(),e.preventDefault(),document.removeEventListener("mousemove",this.mouseMove),document.removeEventListener("mouseup",this.mouseUp);return document.addEventListener("click",function e(t){t.stopPropagation(),document.removeEventListener("click",e,!0)},!0),this.props.handleMouseUp(),!1}},{key:"checkgrid1block",value:function(e,t){var n=this.boxorgpos.x;return e<n+c.Define.grid.width&&(e=n+c.Define.grid.width),[e,t]}},{key:"render",value:function(){var e=this,t=100*c.Define.handle.width/this.props.scale,n=100*c.Define.handle.height/this.props.scale;return u.default.createElement("rect",{x:this.state.x-t/2,y:this.state.y-n/2,width:t,height:n,style:{fill:"blue"},onClick:function(e){},onMouseDown:function(t){return e.mouseDown(t)}})}}]),t}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=n(12),a=n(199),u=(r=a)&&r.__esModule?r:{default:r};var c=(0,i.connect)(function(e,t){return o({},e)},function(e,t){return{dispatch:e}},function(e,t,n){return o({},n,{scale:e.scale})})(u.default);t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){return function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(7),u=(r=a)&&r.__esModule?r:{default:r},c=n(29);var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.boxorgpos={x:e.x,y:e.y,w:e.w,h:e.h},n.handleorgpos={x:e.x,y:e.y+e.h/2},n.mousepos={x:0,y:0},n.state={x:n.handleorgpos.x,y:n.handleorgpos.y},n.mouseMove=n.mouseMove.bind(n),n.mouseUp=n.mouseUp.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,u.default.Component),i(t,[{key:"componentWillReceiveProps",value:function(e){1==e.handleRefresh&&(this.boxorgpos={x:e.x,y:e.y,w:e.w,h:e.h},this.handleorgpos={x:e.x,y:e.y+e.h/2}),this.setState({x:e.x,y:e.y+e.h/2})}},{key:"mouseDown",value:function(e){e.stopPropagation(),e.preventDefault(),document.addEventListener("mousemove",this.mouseMove,!1),document.addEventListener("mouseup",this.mouseUp,!1),document.addEventListener("click",this.click,!1),this.mousepos.x=100*e.pageX/this.props.scale,this.mousepos.y=100*e.pageY/this.props.scale,this.props.handleMouseDown()}},{key:"mouseMove",value:function(e){e.stopPropagation(),e.preventDefault();var t=100*e.pageX/this.props.scale,n=this.handleorgpos.x+(t-this.mousepos.x),r=this.handleorgpos.y,i=this.checkgrid1block(n,r),a=o(i,2);n=a[0],r=a[1];var u=this.props.gridsnap(n,r),c=o(u,2);n=c[0],r=c[1];var s=this.props.handlestop(n,r),l=o(s,2);n=l[0],r=l[1],this.props.handleMove(n,this.boxorgpos.y,this.boxorgpos.x-n+this.boxorgpos.w,this.boxorgpos.h)}},{key:"mouseUp",value:function(e){e.stopPropagation(),e.preventDefault(),document.removeEventListener("mousemove",this.mouseMove),document.removeEventListener("mouseup",this.mouseUp);return document.addEventListener("click",function e(t){t.stopPropagation(),document.removeEventListener("click",e,!0)},!0),this.props.handleMouseUp(),!1}},{key:"checkgrid1block",value:function(e,t){var n=this.boxorgpos.x+this.boxorgpos.w;return e>n-c.Define.grid.width&&(e=n-c.Define.grid.width),[e,t]}},{key:"render",value:function(){var e=this,t=100*c.Define.handle.width/this.props.scale,n=100*c.Define.handle.height/this.props.scale;return u.default.createElement("rect",{x:this.state.x-t/2,y:this.state.y-n/2,width:t,height:n,style:{fill:"blue"},onClick:function(e){},onMouseDown:function(t){return e.mouseDown(t)}})}}]),t}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=n(12),a=n(201),u=(r=a)&&r.__esModule?r:{default:r};var c=(0,i.connect)(function(e,t){return o({},e)},function(e,t){return{dispatch:e}},function(e,t,n){return o({},n,{scale:e.scale})})(u.default);t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){return function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(7),u=(r=a)&&r.__esModule?r:{default:r},c=n(29);var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.boxorgpos={x:e.x,y:e.y,w:e.w,h:e.h},n.handleorgpos={x:e.x+e.w/2,y:e.y},n.mousepos={x:0,y:0},n.state={x:n.handleorgpos.x,y:n.handleorgpos.y},n.mouseMove=n.mouseMove.bind(n),n.mouseUp=n.mouseUp.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,u.default.Component),i(t,[{key:"componentWillReceiveProps",value:function(e){1==e.handleRefresh&&(this.boxorgpos={x:e.x,y:e.y,w:e.w,h:e.h},this.handleorgpos={x:e.x+e.w/2,y:e.y}),this.setState({x:e.x+e.w/2,y:e.y})}},{key:"mouseDown",value:function(e){e.stopPropagation(),e.preventDefault(),document.addEventListener("mousemove",this.mouseMove,!1),document.addEventListener("mouseup",this.mouseUp,!1),document.addEventListener("click",this.click,!1),this.mousepos.x=100*e.pageX/this.props.scale,this.mousepos.y=100*e.pageY/this.props.scale,this.props.handleMouseDown()}},{key:"mouseMove",value:function(e){e.stopPropagation(),e.preventDefault();var t=100*e.pageY/this.props.scale,n=this.handleorgpos.x,r=this.handleorgpos.y+(t-this.mousepos.y),i=this.checkgrid1block(n,r),a=o(i,2);n=a[0],r=a[1];var u=this.props.gridsnap(n,r),c=o(u,2);n=c[0],r=c[1];var s=this.props.handlestop(n,r),l=o(s,2);n=l[0],r=l[1],this.props.handleMove(this.boxorgpos.x,r,this.boxorgpos.w,this.boxorgpos.y-r+this.boxorgpos.h)}},{key:"mouseUp",value:function(e){e.stopPropagation(),e.preventDefault(),document.removeEventListener("mousemove",this.mouseMove),document.removeEventListener("mouseup",this.mouseUp);return document.addEventListener("click",function e(t){t.stopPropagation(),document.removeEventListener("click",e,!0)},!0),this.props.handleMouseUp(),!1}},{key:"checkgrid1block",value:function(e,t){var n=this.boxorgpos.y+this.boxorgpos.h;return t>n-c.Define.grid.height&&(t=n-c.Define.grid.height),[e,t]}},{key:"render",value:function(){var e=this,t=100*c.Define.handle.width/this.props.scale,n=100*c.Define.handle.height/this.props.scale;return u.default.createElement("rect",{x:this.state.x-t/2,y:this.state.y-n/2,width:t,height:n,style:{fill:"blue"},onClick:function(e){e.stopPropagation(),e.preventDefault()},onMouseDown:function(t){return e.mouseDown(t)}})}}]),t}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=n(12),a=n(203),u=(r=a)&&r.__esModule?r:{default:r};var c=(0,i.connect)(function(e,t){return o({},e)},function(e,t){return{dispatch:e}},function(e,t,n){return o({},n,{scale:e.scale})})(u.default);t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){return function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=p(n(7)),a=p(n(204)),u=p(n(202)),c=p(n(200)),s=p(n(198)),l=n(29),f=n(15);function p(e){return e&&e.__esModule?e:{default:e}}var d=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e)),r=f.Zahyo.ruToluRect(e.x1,e.y1,e.x2,e.y2,l.Define.svgimagesize.width,l.Define.svgimagesize.height);n.boxorgpos={x:r.x1,y:r.y1},n.mousepos={x:0,y:0};var o=f.Zahyo.ruToluRectToArea(e.x1,e.y1,e.x2,e.y2,l.Define.svgimagesize.width,l.Define.svgimagesize.height);return n.state={x:o.x,y:o.y,w:o.w,h:o.h,handle_refresh:!0},n.mouseMove=n.mouseMove.bind(n),n.mouseUp=n.mouseUp.bind(n),n.baseClick=n.baseClick.bind(n),n.addBaseClickEvent(),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.default.Component),o(t,[{key:"componentWillReceiveProps",value:function(e){var t=f.Zahyo.ruToluRectToArea(e.x1,e.y1,e.x2,e.y2,l.Define.svgimagesize.width,l.Define.svgimagesize.height);this.boxorgpos={x:t.x,y:t.y},this.setState({x:t.x,y:t.y,w:t.w,h:t.h,handle_refresh:!0})}},{key:"componentWillUnmount",value:function(){this.removeBaseClickEvent()}},{key:"addBaseClickEvent",value:function(){document.getElementById("viewbox").addEventListener("click",this.baseClick,!1)}},{key:"removeBaseClickEvent",value:function(){document.getElementById("viewbox").removeEventListener("click",this.baseClick)}},{key:"baseClick",value:function(e){return e.stopPropagation(),e.preventDefault(),this.removeBaseClickEvent(),this.props.onClickBase(),!1}},{key:"mouseDown",value:function(e){e.stopPropagation(),e.preventDefault(),this.removeBaseClickEvent(),document.addEventListener("mousemove",this.mouseMove,!1),document.addEventListener("mouseup",this.mouseUp,!1),this.mousepos.x=100*e.pageX/this.props.scale,this.mousepos.y=100*e.pageY/this.props.scale}},{key:"mouseMove",value:function(e){e.stopPropagation(),e.preventDefault();var t=100*e.pageX/this.props.scale,n=100*e.pageY/this.props.scale,o=this.boxorgpos.x+(t-this.mousepos.x),i=this.boxorgpos.y+(n-this.mousepos.y),a=this.gridsnap(o,i),u=r(a,2);o=u[0],i=u[1];var c=this.boxmovestop(o,i,this.state.w,this.state.h),s=r(c,2);o=s[0],i=s[1],this.setState({x:o,y:i,handle_refresh:!0})}},{key:"mouseUp",value:function(e){e.stopPropagation(),e.preventDefault(),document.removeEventListener("mousemove",this.mouseMove),document.removeEventListener("mouseup",this.mouseUp);document.addEventListener("click",function e(t){t.stopPropagation(),document.removeEventListener("click",e,!0)},!0),this.addBaseClickEvent();var t=f.Zahyo.luToruAreaToRect(this.state.x,this.state.y,this.state.w,this.state.h,l.Define.svgimagesize.width,l.Define.svgimagesize.height);this.props.endMoveBox({id:this.props.id,x1:t.x1,y1:t.y1,x2:t.x2,y2:t.y2})}},{key:"gridsnap",value:function(e,t){var n=f.Zahyo.luToruX(e,l.Define.svgimagesize.width),r=f.Zahyo.luToruY(t,l.Define.svgimagesize.height),o=void 0,i=void 0,a=void 0,u=void 0;0==(o=n%l.Define.grid.width)||(a=(i=Math.floor(n/l.Define.grid.width))*l.Define.grid.width,u=(i+1)*l.Define.grid.width,n=o>=l.Define.grid.width/2?u:a);var c=void 0,s=void 0;return 0==(o=r%l.Define.grid.height)||(c=(i=Math.floor(r/l.Define.grid.height))*l.Define.grid.height,s=(i+1)*l.Define.grid.height,r=o>=l.Define.grid.height/2?s:c),[e=f.Zahyo.ruToluX(n,l.Define.svgimagesize.width),t=f.Zahyo.ruToluY(r,l.Define.svgimagesize.height)]}},{key:"boxmovestop",value:function(e,t,n,r){var o,i,a=f.Zahyo.luToruArea(e,t,n,r,l.Define.svgimagesize.width,l.Define.svgimagesize.height),u=void 0;u=Math.floor(l.Define.svgimagesize.width/l.Define.grid.width),o=l.Define.grid.width*u,u=Math.floor(l.Define.svgimagesize.height/l.Define.grid.height),i=l.Define.grid.height*u,a.x<=0?a.x=0:a.x+n>=o&&(a.x=o-a.w),a.y<=0?a.y=0:a.y+r>=i&&(a.y=i-a.h);var c=f.Zahyo.ruToluArea(a.x,a.y,a.w,a.h,l.Define.svgimagesize.width,l.Define.svgimagesize.height);return[c.x,c.y]}},{key:"handlestop",value:function(e,t){var n,r,o=f.Zahyo.luToruX(e,l.Define.svgimagesize.width),i=f.Zahyo.luToruY(t,l.Define.svgimagesize.height),a=void 0;return a=Math.floor(l.Define.svgimagesize.width/l.Define.grid.width),n=l.Define.grid.width*a,a=Math.floor(l.Define.svgimagesize.height/l.Define.grid.height),r=l.Define.grid.height*a,o<=0?o=0:o>=n&&(o=n),i<=0?i=0:i>=r&&(i=r),[e=f.Zahyo.ruToluX(o,l.Define.svgimagesize.width),t=f.Zahyo.ruToluY(i,l.Define.svgimagesize.height)]}},{key:"handleMouseDown",value:function(){this.removeBaseClickEvent()}},{key:"handleMove",value:function(e,t,n,r){this.setState({x:e,y:t,w:n,h:r,handle_refresh:!1})}},{key:"handleMouseUp",value:function(){this.addBaseClickEvent();var e=f.Zahyo.luToruAreaToRect(this.state.x,this.state.y,this.state.w,this.state.h,l.Define.svgimagesize.width,l.Define.svgimagesize.height);this.setState({handle_refresh:!0}),this.props.endChangeSizeBox({id:this.props.id,x1:e.x1,y1:e.y1,x2:e.x2,y2:e.y2})}},{key:"render",value:function(){var e=this;return i.default.createElement("g",null,i.default.createElement("rect",{id:this.props.id+"_selectbox",x:this.state.x,y:this.state.y,width:this.state.w,height:this.state.h,style:{fill:"blue",fillOpacity:"0.3",stroke:"blue",strokeWidth:200/this.props.scale},onClick:function(e){e.stopPropagation(),e.preventDefault()},onMouseDown:function(t){return e.mouseDown(t)}}),i.default.createElement("text",{x:this.state.x+5,y:this.state.y+20,style:{fontSize:15,stroke:"none",fill:"white",fillOpacity:"0.7"}},this.props.no),i.default.createElement(a.default,{x:this.state.x,y:this.state.y,w:this.state.w,h:this.state.h,handleRefresh:this.state.handle_refresh,gridsnap:function(t,n){return e.gridsnap(t,n)},handlestop:function(t,n,r,o){return e.handlestop(t,n,r,o)},handleMouseDown:function(){return e.handleMouseDown()},handleMove:function(t,n,r,o){return e.handleMove(t,n,r,o)},handleMouseUp:function(){return e.handleMouseUp()}}),i.default.createElement(u.default,{x:this.state.x,y:this.state.y,w:this.state.w,h:this.state.h,handleRefresh:this.state.handle_refresh,gridsnap:function(t,n){return e.gridsnap(t,n)},handlestop:function(t,n,r,o){return e.handlestop(t,n,r,o)},handleMouseDown:function(){return e.handleMouseDown()},handleMove:function(t,n,r,o){return e.handleMove(t,n,r,o)},handleMouseUp:function(){return e.handleMouseUp()}}),i.default.createElement(c.default,{x:this.state.x,y:this.state.y,w:this.state.w,h:this.state.h,handleRefresh:this.state.handle_refresh,gridsnap:function(t,n){return e.gridsnap(t,n)},handlestop:function(t,n,r,o){return e.handlestop(t,n,r,o)},handleMouseDown:function(){return e.handleMouseDown()},handleMove:function(t,n,r,o){return e.handleMove(t,n,r,o)},handleMouseUp:function(){return e.handleMouseUp()}}),i.default.createElement(s.default,{x:this.state.x,y:this.state.y,w:this.state.w,h:this.state.h,handleRefresh:this.state.handle_refresh,gridsnap:function(t,n){return e.gridsnap(t,n)},handlestop:function(t,n,r,o){return e.handlestop(t,n,r,o)},handleMouseDown:function(){return e.handleMouseDown()},handleMove:function(t,n,r,o){return e.handleMove(t,n,r,o)},handleMouseUp:function(){return e.handleMouseUp()}}))}}]),t}();t.default=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=n(12),a=n(205),u=(r=a)&&r.__esModule?r:{default:r},c=n(59);var s=(0,i.connect)(function(e,t){return o({},e)},function(e,t){return{dispatch:e}},function(e,t,n){return o({},n,{scale:e.scale,endMoveBox:function(e){t.dispatch((0,c.SU_SelectBox_EditBox_MoveEnd)(e))},endChangeSizeBox:function(e){t.dispatch((0,c.SU_SelectBox_EditBox_ChangeSize)(e))},onClickBase:function(){t.dispatch((0,c.SU_SelectBox_Box_NonSelect)())}})})(u.default);t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=c(n(7)),i=c(n(206)),a=c(n(196)),u=c(n(194));function c(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"selectAllSonotaBox",value:function(){for(var e=[],t=0;t<this.props.boxs.length;t++)e.push(o.default.createElement(u.default,{id:this.props.boxs[t].id,type:this.props.boxs[t].type,x1:this.props.boxs[t].x1,y1:this.props.boxs[t].y1,x2:this.props.boxs[t].x2,y2:this.props.boxs[t].y2,group:this.props.boxs[t].group,no:this.props.boxs[t].no}));return e}},{key:"selectBox",value:function(){for(var e=[],t=void 0,n=0;n<this.props.boxs.length;n++)this.props.focusbox.id!=this.props.boxs[n].id?this.props.focusbox.group!=this.props.boxs[n].group?e.push(o.default.createElement(u.default,{id:this.props.boxs[n].id,type:this.props.boxs[n].type,x1:this.props.boxs[n].x1,y1:this.props.boxs[n].y1,x2:this.props.boxs[n].x2,y2:this.props.boxs[n].y2,group:this.props.boxs[n].group,no:this.props.boxs[n].no})):e.push(o.default.createElement(a.default,{id:this.props.boxs[n].id,type:this.props.boxs[n].type,x1:this.props.boxs[n].x1,y1:this.props.boxs[n].y1,x2:this.props.boxs[n].x2,y2:this.props.boxs[n].y2,group:this.props.boxs[n].group,no:this.props.boxs[n].no})):t=o.default.createElement(i.default,{id:this.props.boxs[n].id,type:this.props.boxs[n].type,x1:this.props.boxs[n].x1,y1:this.props.boxs[n].y1,x2:this.props.boxs[n].x2,y2:this.props.boxs[n].y2,group:this.props.boxs[n].group,no:this.props.boxs[n].no});return e.push(t),e}},{key:"render",value:function(){var e=void 0;return e=""==this.props.focusbox.id?this.selectAllSonotaBox():this.selectBox(),o.default.createElement("g",null,e)}}]),t}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=n(12),a=n(207),u=(r=a)&&r.__esModule?r:{default:r};var c=(0,i.connect)(function(e,t){return o({},e)},function(e,t){return{dispatch:e}},function(e,t,n){return{boxs:e.boxs,focusbox:e.focusbox}})(u.default);t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(7),a=(r=i)&&r.__esModule?r:{default:r},u=n(15);var c={container:{backgroundColor:"yellow"}},s=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),o(t,[{key:"box",value:function(){return a.default.createElement("rect",{x:"0",y:"0",width:this.props.width,height:this.props.height,style:{stroke:"none",fill:"lightyellow",opacity:"0.5"}})}},{key:"textgrid",value:function(){for(var e=[],t=0;t<this.props.textgrid.length;t++){var n,r,o=void 0,i=void 0,c=void 0,s=void 0;n=this.props.textgrid[t][0],r=this.props.textgrid[t][1],"tate"==this.props.text.kumihoko?(o=u.Zahyo.ruToluX(r,this.props.width),i=u.Zahyo.ruToluY(n,this.props.height),c=this.props.text.size_g,s=this.props.text.size_j):(o=n,i=r,c=this.props.text.size_j,s=this.props.text.size_g),e.push(a.default.createElement("rect",{x:o-c/2,y:i-s/2,width:c,height:s,style:{stroke:"lightgray",strokeWidth:"1",fill:"none"}}))}return e}},{key:"text",value:function(){var e=[];console.log(this.props.textResult);for(var t=0;t<this.props.textResult.length;t++){var n,r,o=void 0,i=void 0,c=void 0,s=void 0;n=this.props.textResult[t].j,r=this.props.textResult[t].g,"tate"==this.props.text.kumihoko?(c=0==this.props.textResult[t].size_g?this.props.text.size_g:this.props.textResult[t].size_g,s=0==this.props.textResult[t].size_j?this.props.text.size_j:this.props.textResult[t].size_j,o=u.Zahyo.ruToluX(r,this.props.width),i=u.Zahyo.ruToluY(n,this.props.height)):(c=0==this.props.textResult[t].size_j?this.props.text.size_j:this.props.textResult[t].size_j,s=0==this.props.textResult[t].size_g?this.props.text.size_g:this.props.textResult[t].size_g,o=n,i=r),e.push(a.default.createElement("text",{x:o-c/2,y:i+s/2-12.5*s/100,style:{fontSize:c,stroke:"none",fill:"black"}},this.props.textResult[t].moji))}return e}},{key:"render",value:function(){return a.default.createElement("g",{id:this.props.id,transform:"translate("+this.props.x+","+this.props.y+")",width:this.props.width,height:this.props.height,style:c.container},this.box(),this.textgrid(),this.text())}}]),t}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=n(12),a=n(209),u=(r=a)&&r.__esModule?r:{default:r};var c=(0,i.connect)(function(e,t){return o({},e)},function(e,t){return{dispatch:e}},function(e,t,n){return o({},n)})(u.default);t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=c(n(7)),i=c(n(210)),a=n(29),u=n(15);function c(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"render",value:function(){return o.default.createElement("g",{id:this.props.id},this.props.boxs.map(function(e){var t=u.Zahyo.ruToluRectToArea(e.x1,e.y1,e.x2,e.y2,a.Define.svgimagesize.width,a.Define.svgimagesize.height);switch(e.type){case"text":return o.default.createElement(i.default,{id:e.id,x:t.x,y:t.y,width:t.w,height:t.h,group:e.group,no:e.no,text:e.text,textgrid:e.textgrid,textResult:e.textResult});case"image":return""}}))}}]),t}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=n(12),a=n(211),u=(r=a)&&r.__esModule?r:{default:r};var c=(0,i.connect)(function(e,t){return o({},e)},function(e,t){return{dispatch:e}},function(e,t,n){return o({},n,{boxs:e.boxs})})(u.default);t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(7),a=(r=i)&&r.__esModule?r:{default:r},u=n(15),c=n(29);var s=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),o(t,[{key:"yokokei",value:function(){for(var e=[],t=0;t<=this.props.height;t+=c.Define.grid.height){var n=100/this.props.scale,r="#f9f9f9";t%(5*c.Define.grid.height)==0&&(n=200/this.props.scale,r="#efeff9"),t%(10*c.Define.grid.height)==0&&(n=300/this.props.scale,r="#f9efef"),e.push(a.default.createElement("line",{x1:0,y1:u.Zahyo.luToruY(t,this.props.height),x2:this.props.width,y2:u.Zahyo.luToruY(t,this.props.height),strokeWidth:n,stroke:r}))}return e}},{key:"tatekei",value:function(){for(var e=[],t=0;t<this.props.width;t+=c.Define.grid.width){var n=100/this.props.scale,r="#f9f9f9";t%(5*c.Define.grid.width)==0&&(n=200/this.props.scale,r="#efeff9"),t%(10*c.Define.grid.width)==0&&(n=300/this.props.scale,r="#f9efef"),e.push(a.default.createElement("line",{x1:u.Zahyo.luToruX(t,this.props.width),y1:0,x2:u.Zahyo.luToruX(t,this.props.width),y2:this.props.height,strokeWidth:n,stroke:r}))}return e}},{key:"render",value:function(){return a.default.createElement("g",null,this.yokokei(),this.tatekei())}}]),t}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=c(n(7)),i=c(n(213)),a=c(n(212)),u=c(n(208));function c(e){return e&&e.__esModule?e:{default:e}}var s={container:{backgroundColor:"#fff"}},l=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"render",value:function(){return o.default.createElement("svg",{width:this.props.width*this.props.scale/100,height:this.props.height*this.props.scale/100,viewBox:"0 0 "+this.props.width+" "+this.props.height,style:s.container},o.default.createElement(i.default,{width:this.props.width,height:this.props.height,scale:this.props.scale}),o.default.createElement(a.default,null),o.default.createElement(u.default,null))}}]),t}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=n(12),a=n(214),u=(r=a)&&r.__esModule?r:{default:r};var c=(0,i.connect)(function(e,t){return o({},e)},function(e,t){return{dispatch:e}},function(e,t,n){return{width:n.width,height:n.height,scale:e.scale}})(u.default);t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=c(n(7)),a=c(n(215)),u=n(29);function c(e){return e&&e.__esModule?e:{default:e}}var s={overflow:"scroll",backgroundColor:"#ddd",width:"100%",height:"100vh"},l=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.default.Component),o(t,[{key:"componentDidMount",value:function(){}},{key:"render",value:function(){return i.default.createElement("div",{id:"viewbox",style:r({},s,this.props.style)},i.default.createElement(a.default,{width:u.Define.svgimagesize.width,height:u.Define.svgimagesize.height}))}}]),t}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=p(n(7)),i=p(n(216)),a=p(n(192)),u=p(n(190)),c=p(n(188)),s=p(n(186)),l=p(n(184)),f=p(n(182));function p(e){return e&&e.__esModule?e:{default:e}}var d={container:{position:"relative",fontSize:"20px",fontWeight:"bold",color:"black",width:"100%",height:"100vh",overflow:"hidden"}},h=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"toolBoxs",value:function(){for(var e=[],t=0;t<this.props.toolboxs.length;t++)switch(this.props.toolboxs[t].type){case"scale":if("false"==this.props.toolboxs[t].view)break;e.push(o.default.createElement(a.default,{id:this.props.toolboxs[t].id,x:this.props.toolboxs[t].x,y:this.props.toolboxs[t].y,w:this.props.toolboxs[t].w,h:this.props.toolboxs[t].h,title:"拡大縮小"},o.default.createElement(u.default,null)));break;case"boxdata":if("false"==this.props.toolboxs[t].view)break;e.push(o.default.createElement(a.default,{id:this.props.toolboxs[t].id,x:this.props.toolboxs[t].x,y:this.props.toolboxs[t].y,w:this.props.toolboxs[t].w,h:this.props.toolboxs[t].h,title:"ボックス情報"},o.default.createElement(c.default,null)));break;case"textdata":if("false"==this.props.toolboxs[t].view)break;e.push(o.default.createElement(a.default,{id:this.props.toolboxs[t].id,x:this.props.toolboxs[t].x,y:this.props.toolboxs[t].y,w:this.props.toolboxs[t].w,h:this.props.toolboxs[t].h,title:"ﾎﾞｯｸｽﾃｷｽﾄ情報"},o.default.createElement(s.default,null)));break;case"sozai":if("false"==this.props.toolboxs[t].view)break;e.push(o.default.createElement(a.default,{id:this.props.toolboxs[t].id,x:this.props.toolboxs[t].x,y:this.props.toolboxs[t].y,w:this.props.toolboxs[t].w,h:this.props.toolboxs[t].h,title:"素材リスト"},o.default.createElement(l.default,null)));break;case"link":if("false"==this.props.toolboxs[t].view)break;e.push(o.default.createElement(a.default,{id:this.props.toolboxs[t].id,x:this.props.toolboxs[t].x,y:this.props.toolboxs[t].y,w:this.props.toolboxs[t].w,h:this.props.toolboxs[t].h,title:"リンクリスト"},o.default.createElement(f.default,null)))}return e}},{key:"render",value:function(){return o.default.createElement("div",{style:d.container},o.default.createElement(i.default,null),this.toolBoxs())}}]),t}();t.default=h},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=n(12),a=n(217),u=(r=a)&&r.__esModule?r:{default:r};n(59);var c=(0,i.connect)(function(e,t){return o({},e)},function(e,t){return{dispatch:e}},function(e,t,n){return{toolboxs:e.toolboxs}})(u.default);t.default=c},function(e,t,n){(function(e){!function(t){"use strict";function n(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}function r(e,t){Object.defineProperty(this,"kind",{value:e,enumerable:!0}),t&&t.length&&Object.defineProperty(this,"path",{value:t,enumerable:!0})}function o(e,t,n){o.super_.call(this,"E",e),Object.defineProperty(this,"lhs",{value:t,enumerable:!0}),Object.defineProperty(this,"rhs",{value:n,enumerable:!0})}function i(e,t){i.super_.call(this,"N",e),Object.defineProperty(this,"rhs",{value:t,enumerable:!0})}function a(e,t){a.super_.call(this,"D",e),Object.defineProperty(this,"lhs",{value:t,enumerable:!0})}function u(e,t,n){u.super_.call(this,"A",e),Object.defineProperty(this,"index",{value:t,enumerable:!0}),Object.defineProperty(this,"item",{value:n,enumerable:!0})}function c(e,t,n){var r=e.slice((n||t)+1||e.length);return e.length=t<0?e.length+t:t,e.push.apply(e,r),e}function s(e){var t=void 0===e?"undefined":w(e);return"object"!==t?t:e===Math?"math":null===e?"null":Array.isArray(e)?"array":"[object Date]"===Object.prototype.toString.call(e)?"date":"function"==typeof e.toString&&/^\/.*\//.test(e.toString())?"regexp":"object"}function l(e,t,n,r,f,p,d){f=f||[],d=d||[];var h=f.slice(0);if(void 0!==p){if(r){if("function"==typeof r&&r(h,p))return;if("object"===(void 0===r?"undefined":w(r))){if(r.prefilter&&r.prefilter(h,p))return;if(r.normalize){var v=r.normalize(h,p,e,t);v&&(e=v[0],t=v[1])}}}h.push(p)}"regexp"===s(e)&&"regexp"===s(t)&&(e=e.toString(),t=t.toString());var y=void 0===e?"undefined":w(e),g=void 0===t?"undefined":w(t),b="undefined"!==y||d&&d[d.length-1].lhs&&d[d.length-1].lhs.hasOwnProperty(p),m="undefined"!==g||d&&d[d.length-1].rhs&&d[d.length-1].rhs.hasOwnProperty(p);if(!b&&m)n(new i(h,t));else if(!m&&b)n(new a(h,e));else if(s(e)!==s(t))n(new o(h,e,t));else if("date"===s(e)&&e-t!=0)n(new o(h,e,t));else if("object"===y&&null!==e&&null!==t)if(d.filter(function(t){return t.lhs===e}).length)e!==t&&n(new o(h,e,t));else{if(d.push({lhs:e,rhs:t}),Array.isArray(e)){var x;for(e.length,x=0;x<e.length;x++)x>=t.length?n(new u(h,x,new a(void 0,e[x]))):l(e[x],t[x],n,r,h,x,d);for(;x<t.length;)n(new u(h,x,new i(void 0,t[x++])))}else{var _=Object.keys(e),O=Object.keys(t);_.forEach(function(o,i){var a=O.indexOf(o);a>=0?(l(e[o],t[o],n,r,h,o,d),O=c(O,a)):l(e[o],void 0,n,r,h,o,d)}),O.forEach(function(e){l(void 0,t[e],n,r,h,e,d)})}d.length=d.length-1}else e!==t&&("number"===y&&isNaN(e)&&isNaN(t)||n(new o(h,e,t)))}function f(e,t,n,r){return r=r||[],l(e,t,function(e){e&&r.push(e)},n),r.length?r:void 0}function p(e,t,n){if(e&&t&&n&&n.kind){for(var r=e,o=-1,i=n.path?n.path.length-1:0;++o<i;)void 0===r[n.path[o]]&&(r[n.path[o]]="number"==typeof n.path[o]?[]:{}),r=r[n.path[o]];switch(n.kind){case"A":!function e(t,n,r){if(r.path&&r.path.length){var o,i=t[n],a=r.path.length-1;for(o=0;o<a;o++)i=i[r.path[o]];switch(r.kind){case"A":e(i[r.path[o]],r.index,r.item);break;case"D":delete i[r.path[o]];break;case"E":case"N":i[r.path[o]]=r.rhs}}else switch(r.kind){case"A":e(t[n],r.index,r.item);break;case"D":t=c(t,n);break;case"E":case"N":t[n]=r.rhs}return t}(n.path?r[n.path[o]]:r,n.index,n.item);break;case"D":delete r[n.path[o]];break;case"E":case"N":r[n.path[o]]=n.rhs}}}function d(e,t,n,r){var o=f(e,t);try{r?n.groupCollapsed("diff"):n.group("diff")}catch(e){n.log("diff")}o?o.forEach(function(e){var t=e.kind,r=function(e){var t=e.kind,n=e.path,r=e.lhs,o=e.rhs,i=e.index,a=e.item;switch(t){case"E":return[n.join("."),r,"→",o];case"N":return[n.join("."),o];case"D":return[n.join(".")];case"A":return[n.join(".")+"["+i+"]",a];default:return[]}}(e);n.log.apply(n,["%c "+E[t].text,function(e){return"color: "+E[e].color+"; font-weight: bold"}(t)].concat(O(r)))}):n.log("—— no diff ——");try{n.groupEnd()}catch(e){n.log("—— diff end —— ")}}function h(e,t,n,r){switch(void 0===e?"undefined":w(e)){case"object":return"function"==typeof e[r]?e[r].apply(e,O(n)):e[r];case"function":return e(t);default:return e}}function v(e,t){var n=t.logger,r=t.actionTransformer,o=t.titleFormatter,i=void 0===o?function(e){var t=e.timestamp,n=e.duration;return function(e,r,o){var i=["action"];return i.push("%c"+String(e.type)),t&&i.push("%c@ "+r),n&&i.push("%c(in "+o.toFixed(2)+" ms)"),i.join(" ")}}(t):o,a=t.collapsed,u=t.colors,c=t.level,s=t.diff,l=void 0===t.titleFormatter;e.forEach(function(o,f){var p=o.started,v=o.startedTime,y=o.action,g=o.prevState,b=o.error,m=o.took,_=o.nextState,w=e[f+1];w&&(_=w.prevState,m=w.started-p);var O=r(y),S="function"==typeof a?a(function(){return _},y,o):a,E=x(v),k=u.title?"color: "+u.title(O)+";":"",T=["color: gray; font-weight: lighter;"];T.push(k),t.timestamp&&T.push("color: gray; font-weight: lighter;"),t.duration&&T.push("color: gray; font-weight: lighter;");var C=i(O,E,m);try{S?u.title&&l?n.groupCollapsed.apply(n,["%c "+C].concat(T)):n.groupCollapsed(C):u.title&&l?n.group.apply(n,["%c "+C].concat(T)):n.group(C)}catch(e){n.log(C)}var j=h(c,O,[g],"prevState"),P=h(c,O,[O],"action"),A=h(c,O,[b,g],"error"),M=h(c,O,[_],"nextState");if(j)if(u.prevState){var D="color: "+u.prevState(g)+"; font-weight: bold";n[j]("%c prev state",D,g)}else n[j]("prev state",g);if(P)if(u.action){var B="color: "+u.action(O)+"; font-weight: bold";n[P]("%c action    ",B,O)}else n[P]("action    ",O);if(b&&A)if(u.error){var N="color: "+u.error(b,g)+"; font-weight: bold;";n[A]("%c error     ",N,b)}else n[A]("error     ",b);if(M)if(u.nextState){var L="color: "+u.nextState(_)+"; font-weight: bold";n[M]("%c next state",L,_)}else n[M]("next state",_);s&&d(g,_,n,S);try{n.groupEnd()}catch(e){n.log("—— log end ——")}})}function y(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=Object.assign({},k,e),n=t.logger,r=t.stateTransformer,o=t.errorTransformer,i=t.predicate,a=t.logErrors,u=t.diffPredicate;if(void 0===n)return function(){return function(e){return function(t){return e(t)}}};if(e.getState&&e.dispatch)return console.error("[redux-logger] redux-logger not installed. Make sure to pass logger instance as middleware:\n// Logger with default options\nimport { logger } from 'redux-logger'\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n// Or you can create your own logger with custom options http://bit.ly/redux-logger-options\nimport createLogger from 'redux-logger'\nconst logger = createLogger({\n  // ...options\n});\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n"),function(){return function(e){return function(t){return e(t)}}};var c=[];return function(e){var n=e.getState;return function(e){return function(s){if("function"==typeof i&&!i(n,s))return e(s);var l={};c.push(l),l.started=_.now(),l.startedTime=new Date,l.prevState=r(n()),l.action=s;var f=void 0;if(a)try{f=e(s)}catch(e){l.error=o(e)}else f=e(s);l.took=_.now()-l.started,l.nextState=r(n());var p=t.diff&&"function"==typeof u?u(n,s):t.diff;if(v(c,Object.assign({},t,{diff:p})),c.length=0,l.error)throw l.error;return f}}}}var g,b,m=function(e,t){return function(e,t){return new Array(t+1).join(e)}("0",t-e.toString().length)+e},x=function(e){return m(e.getHours(),2)+":"+m(e.getMinutes(),2)+":"+m(e.getSeconds(),2)+"."+m(e.getMilliseconds(),3)},_="undefined"!=typeof performance&&null!==performance&&"function"==typeof performance.now?performance:Date,w="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},O=function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)},S=[];g="object"===(void 0===e?"undefined":w(e))&&e?e:"undefined"!=typeof window?window:{},(b=g.DeepDiff)&&S.push(function(){void 0!==b&&g.DeepDiff===f&&(g.DeepDiff=b,b=void 0)}),n(o,r),n(i,r),n(a,r),n(u,r),Object.defineProperties(f,{diff:{value:f,enumerable:!0},observableDiff:{value:l,enumerable:!0},applyDiff:{value:function(e,t,n){e&&t&&l(e,t,function(r){n&&!n(e,t,r)||p(e,t,r)})},enumerable:!0},applyChange:{value:p,enumerable:!0},revertChange:{value:function(e,t,n){if(e&&t&&n&&n.kind){var r,o,i=e;for(o=n.path.length-1,r=0;r<o;r++)void 0===i[n.path[r]]&&(i[n.path[r]]={}),i=i[n.path[r]];switch(n.kind){case"A":!function e(t,n,r){if(r.path&&r.path.length){var o,i=t[n],a=r.path.length-1;for(o=0;o<a;o++)i=i[r.path[o]];switch(r.kind){case"A":e(i[r.path[o]],r.index,r.item);break;case"D":case"E":i[r.path[o]]=r.lhs;break;case"N":delete i[r.path[o]]}}else switch(r.kind){case"A":e(t[n],r.index,r.item);break;case"D":case"E":t[n]=r.lhs;break;case"N":t=c(t,n)}return t}(i[n.path[r]],n.index,n.item);break;case"D":case"E":i[n.path[r]]=n.lhs;break;case"N":delete i[n.path[r]]}}},enumerable:!0},isConflict:{value:function(){return void 0!==b},enumerable:!0},noConflict:{value:function(){return S&&(S.forEach(function(e){e()}),S=null),f},enumerable:!0}});var E={E:{color:"#2196F3",text:"CHANGED:"},N:{color:"#4CAF50",text:"ADDED:"},D:{color:"#F44336",text:"DELETED:"},A:{color:"#2196F3",text:"ARRAY:"}},k={level:"log",logger:console,logErrors:!0,collapsed:void 0,predicate:void 0,duration:!1,timestamp:!0,stateTransformer:function(e){return e},actionTransformer:function(e){return e},errorTransformer:function(e){return e},colors:{title:function(){return"inherit"},prevState:function(){return"#9E9E9E"},action:function(){return"#03A9F4"},nextState:function(){return"#4CAF50"},error:function(){return"#F20404"}},diff:!1,diffPredicate:void 0,transformer:void 0},T=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.dispatch,n=e.getState;return"function"==typeof t||"function"==typeof n?y()({dispatch:t,getState:n}):void console.error("\n[redux-logger v3] BREAKING CHANGE\n[redux-logger v3] Since 3.0.0 redux-logger exports by default logger with default settings.\n[redux-logger v3] Change\n[redux-logger v3] import createLogger from 'redux-logger'\n[redux-logger v3] to\n[redux-logger v3] import { createLogger } from 'redux-logger'\n")};t.defaults=k,t.createLogger=y,t.logger=T,t.default=T,Object.defineProperty(t,"__esModule",{value:!0})}(t)}).call(this,n(63))},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";var r=n(112),o=n(113),i=n(220);e.exports=function(){function e(e,t,n,r,a,u){u!==i&&o(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=r,n.PropTypes=n,n}},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=p(n(7)),i=n(114),a=n(12),u=p(n(166)),c=n(219),s=p(n(218)),l=p(n(179)),f=p(n(171));function p(e){return e&&e.__esModule?e:{default:e}}var d=(0,u.default)(),h=(0,i.createStore)(l.default,(0,i.applyMiddleware)(d,(0,c.createLogger)()));d.run(f.default);var v=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"render",value:function(){return o.default.createElement(a.Provider,{store:h},o.default.createElement(s.default,null))}}]),t}();t.default=v},function(e,t){e.exports=function(e,t){var n=t===Object(t)?function(e){return t[e]}:t;return function(t){return String(t).replace(e,n)}}},function(e,t,n){var r=n(1),o=n(224)(/[\\^$*+?.()|[\]{}]/g,"\\$&");r(r.S,"RegExp",{escape:function(e){return o(e)}})},function(e,t,n){n(225),e.exports=n(28).RegExp.escape},function(e,t,n){(function(t){!function(t){"use strict";var n,r=Object.prototype,o=r.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",u=i.asyncIterator||"@@asyncIterator",c=i.toStringTag||"@@toStringTag",s="object"==typeof e,l=t.regeneratorRuntime;if(l)s&&(e.exports=l);else{(l=t.regeneratorRuntime=s?e.exports:{}).wrap=x;var f="suspendedStart",p="suspendedYield",d="executing",h="completed",v={},y={};y[a]=function(){return this};var g=Object.getPrototypeOf,b=g&&g(g(A([])));b&&b!==r&&o.call(b,a)&&(y=b);var m=S.prototype=w.prototype=Object.create(y);O.prototype=m.constructor=S,S.constructor=O,S[c]=O.displayName="GeneratorFunction",l.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===O||"GeneratorFunction"===(t.displayName||t.name))},l.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,S):(e.__proto__=S,c in e||(e[c]="GeneratorFunction")),e.prototype=Object.create(m),e},l.awrap=function(e){return{__await:e}},E(k.prototype),k.prototype[u]=function(){return this},l.AsyncIterator=k,l.async=function(e,t,n,r){var o=new k(x(e,t,n,r));return l.isGeneratorFunction(t)?o:o.next().then(function(e){return e.done?e.value:o.next()})},E(m),m[c]="Generator",m[a]=function(){return this},m.toString=function(){return"[object Generator]"},l.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},l.values=A,P.prototype={constructor:P,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=n,this.done=!1,this.delegate=null,this.method="next",this.arg=n,this.tryEntries.forEach(j),!e)for(var t in this)"t"===t.charAt(0)&&o.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=n)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(r,o){return u.type="throw",u.arg=e,t.next=r,o&&(t.method="next",t.arg=n),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],u=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var c=o.call(a,"catchLoc"),s=o.call(a,"finallyLoc");if(c&&s){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(c){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&o.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var i=r;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=t,i?(this.method="next",this.next=i.finallyLoc,v):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),v},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),j(n),v}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;j(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,r){return this.delegate={iterator:A(e),resultName:t,nextLoc:r},"next"===this.method&&(this.arg=n),v}}}function x(e,t,n,r){var o=t&&t.prototype instanceof w?t:w,i=Object.create(o.prototype),a=new P(r||[]);return i._invoke=function(e,t,n){var r=f;return function(o,i){if(r===d)throw new Error("Generator is already running");if(r===h){if("throw"===o)throw i;return M()}for(n.method=o,n.arg=i;;){var a=n.delegate;if(a){var u=T(a,n);if(u){if(u===v)continue;return u}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===f)throw r=h,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=d;var c=_(e,t,n);if("normal"===c.type){if(r=n.done?h:p,c.arg===v)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(r=h,n.method="throw",n.arg=c.arg)}}}(e,n,a),i}function _(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}function w(){}function O(){}function S(){}function E(e){["next","throw","return"].forEach(function(t){e[t]=function(e){return this._invoke(t,e)}})}function k(e){function n(t,r,i,a){var u=_(e[t],e,r);if("throw"!==u.type){var c=u.arg,s=c.value;return s&&"object"==typeof s&&o.call(s,"__await")?Promise.resolve(s.__await).then(function(e){n("next",e,i,a)},function(e){n("throw",e,i,a)}):Promise.resolve(s).then(function(e){c.value=e,i(c)},a)}a(u.arg)}var r;"object"==typeof t.process&&t.process.domain&&(n=t.process.domain.bind(n)),this._invoke=function(e,t){function o(){return new Promise(function(r,o){n(e,t,r,o)})}return r=r?r.then(o,o):o()}}function T(e,t){var r=e.iterator[t.method];if(r===n){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=n,T(e,t),"throw"===t.method))return v;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var o=_(r,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,v;var i=o.arg;return i?i.done?(t[e.resultName]=i.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=n),t.delegate=null,v):i:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,v)}function C(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function j(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function P(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function A(e){if(e){var t=e[a];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,i=function t(){for(;++r<e.length;)if(o.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=n,t.done=!0,t};return i.next=i}}return{next:M}}function M(){return{value:n,done:!0}}}("object"==typeof t?t:"object"==typeof window?window:"object"==typeof self?self:this)}).call(this,n(63))},function(e,t,n){for(var r=n(90),o=n(50),i=n(18),a=n(4),u=n(19),c=n(54),s=n(8),l=s("iterator"),f=s("toStringTag"),p=c.Array,d={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},h=o(d),v=0;v<h.length;v++){var y,g=h[v],b=d[g],m=a[g],x=m&&m.prototype;if(x&&(x[l]||u(x,l,p),x[f]||u(x,f,g),c[g]=p,b))for(y in r)x[y]||i(x,y,r[y],!0)}},function(e,t,n){var r=n(1),o=n(89);r(r.G+r.B,{setImmediate:o.set,clearImmediate:o.clear})},function(e,t,n){var r=n(4),o=n(1),i=n(72),a=[].slice,u=/MSIE .\./.test(i),c=function(e){return function(t,n){var r=arguments.length>2,o=!!r&&a.call(arguments,2);return e(r?function(){("function"==typeof t?t:Function(t)).apply(this,o)}:t,n)}};o(o.G+o.B+o.F*u,{setTimeout:c(r.setTimeout),setInterval:c(r.setInterval)})},function(e,t,n){"use strict";var r=n(1),o=n(4),i=n(28),a=n(88)(),u=n(8)("observable"),c=n(16),s=n(3),l=n(45),f=n(43),p=n(19),d=n(44),h=d.RETURN,v=function(e){return null==e?void 0:c(e)},y=function(e){var t=e._c;t&&(e._c=void 0,t())},g=function(e){return void 0===e._o},b=function(e){g(e)||(e._o=void 0,y(e))},m=function(e,t){s(e),this._c=void 0,this._o=e,e=new x(this);try{var n=t(e),r=n;null!=n&&("function"==typeof n.unsubscribe?n=function(){r.unsubscribe()}:c(n),this._c=n)}catch(t){return void e.error(t)}g(this)&&y(this)};m.prototype=f({},{unsubscribe:function(){b(this)}});var x=function(e){this._s=e};x.prototype=f({},{next:function(e){var t=this._s;if(!g(t)){var n=t._o;try{var r=v(n.next);if(r)return r.call(n,e)}catch(e){try{b(t)}finally{throw e}}}},error:function(e){var t=this._s;if(g(t))throw e;var n=t._o;t._o=void 0;try{var r=v(n.error);if(!r)throw e;e=r.call(n,e)}catch(e){try{y(t)}finally{throw e}}return y(t),e},complete:function(e){var t=this._s;if(!g(t)){var n=t._o;t._o=void 0;try{var r=v(n.complete);e=r?r.call(n,e):void 0}catch(e){try{y(t)}finally{throw e}}return y(t),e}}});var _=function(e){l(this,_,"Observable","_f")._f=c(e)};f(_.prototype,{subscribe:function(e){return new m(e,this._f)},forEach:function(e){var t=this;return new(i.Promise||o.Promise)(function(n,r){c(e);var o=t.subscribe({next:function(t){try{return e(t)}catch(e){r(e),o.unsubscribe()}},error:r,complete:n})})}}),f(_,{from:function(e){var t="function"==typeof this?this:_,n=v(s(e)[u]);if(n){var r=s(n.call(e));return r.constructor===t?r:new t(function(e){return r.subscribe(e)})}return new t(function(t){var n=!1;return a(function(){if(!n){try{if(d(e,!1,function(e){if(t.next(e),n)return h})===h)return}catch(e){if(n)throw e;return void t.error(e)}t.complete()}}),function(){n=!0}})},of:function(){for(var e=0,t=arguments.length,n=new Array(t);e<t;)n[e]=arguments[e++];return new("function"==typeof this?this:_)(function(e){var t=!1;return a(function(){if(!t){for(var r=0;r<n.length;++r)if(e.next(n[r]),t)return;e.complete()}}),function(){t=!0}})}}),p(_.prototype,u,function(){return this}),r(r.G,{Observable:_}),n(46)("Observable")},function(e,t,n){var r=n(1),o=n(88)(),i=n(4).process,a="process"==n(26)(i);r(r.G,{asap:function(e){var t=a&&i.domain;o(t?t.bind(e):e)}})},function(e,t,n){var r=n(35),o=n(3),i=n(16),a=r.key,u=r.set;r.exp({metadata:function(e,t){return function(n,r){u(e,t,(void 0!==r?o:i)(n),a(r))}}})},function(e,t,n){var r=n(35),o=n(3),i=r.has,a=r.key;r.exp({hasOwnMetadata:function(e,t){return i(e,o(t),arguments.length<3?void 0:a(arguments[2]))}})},function(e,t,n){var r=n(35),o=n(3),i=n(20),a=r.has,u=r.key,c=function(e,t,n){if(a(e,t,n))return!0;var r=i(t);return null!==r&&c(e,r,n)};r.exp({hasMetadata:function(e,t){return c(e,o(t),arguments.length<3?void 0:u(arguments[2]))}})},function(e,t,n){var r=n(35),o=n(3),i=r.keys,a=r.key;r.exp({getOwnMetadataKeys:function(e){return i(o(e),arguments.length<2?void 0:a(arguments[1]))}})},function(e,t,n){var r=n(35),o=n(3),i=r.get,a=r.key;r.exp({getOwnMetadata:function(e,t){return i(e,o(t),arguments.length<3?void 0:a(arguments[2]))}})},function(e,t,n){var r=n(138),o=n(129),i=n(35),a=n(3),u=n(20),c=i.keys,s=i.key,l=function(e,t){var n=c(e,t),i=u(e);if(null===i)return n;var a=l(i,t);return a.length?n.length?o(new r(n.concat(a))):a:n};i.exp({getMetadataKeys:function(e){return l(a(e),arguments.length<2?void 0:s(arguments[1]))}})},function(e,t,n){var r=n(35),o=n(3),i=n(20),a=r.has,u=r.get,c=r.key,s=function(e,t,n){if(a(e,t,n))return u(e,t,n);var r=i(t);return null!==r?s(e,r,n):void 0};r.exp({getMetadata:function(e,t){return s(e,o(t),arguments.length<3?void 0:c(arguments[2]))}})},function(e,t,n){var r=n(35),o=n(3),i=r.key,a=r.map,u=r.store;r.exp({deleteMetadata:function(e,t){var n=arguments.length<3?void 0:i(arguments[2]),r=a(o(t),n,!1);if(void 0===r||!r.delete(e))return!1;if(r.size)return!0;var c=u.get(t);return c.delete(n),!!c.size||u.delete(t)}})},function(e,t,n){var r=n(35),o=n(3),i=r.key,a=r.set;r.exp({defineMetadata:function(e,t,n,r){a(e,t,o(n),i(r))}})},function(e,t,n){"use strict";var r=n(1),o=n(87),i=n(142);r(r.S,"Promise",{try:function(e){var t=o.f(this),n=i(e);return(n.e?t.reject:t.resolve)(n.v),t.promise}})},function(e,t,n){"use strict";var r=n(1),o=n(28),i=n(4),a=n(73),u=n(141);r(r.P+r.R,"Promise",{finally:function(e){var t=a(this,o.Promise||i.Promise),n="function"==typeof e;return this.then(n?function(n){return u(t,e()).then(function(){return n})}:e,n?function(n){return u(t,e()).then(function(){throw n})}:e)}})},function(e,t,n){var r=n(1);r(r.S,"Math",{signbit:function(e){return(e=+e)!=e?e:0==e?1/e==1/0:e>0}})},function(e,t,n){var r=n(1);r(r.S,"Math",{umulh:function(e,t){var n=+e,r=+t,o=65535&n,i=65535&r,a=n>>>16,u=r>>>16,c=(a*i>>>0)+(o*i>>>16);return a*u+(c>>>16)+((o*u>>>0)+(65535&c)>>>16)}})},function(e,t,n){var r=n(1);r(r.S,"Math",{scale:n(128)})},function(e,t,n){var r=n(1),o=Math.PI/180;r(r.S,"Math",{radians:function(e){return e*o}})},function(e,t,n){var r=n(1);r(r.S,"Math",{RAD_PER_DEG:180/Math.PI})},function(e,t,n){var r=n(1);r(r.S,"Math",{imulh:function(e,t){var n=+e,r=+t,o=65535&n,i=65535&r,a=n>>16,u=r>>16,c=(a*i>>>0)+(o*i>>>16);return a*u+(c>>16)+((o*u>>>0)+(65535&c)>>16)}})},function(e,t,n){var r=n(1);r(r.S,"Math",{isubh:function(e,t,n,r){var o=e>>>0,i=n>>>0;return(t>>>0)-(r>>>0)-((~o&i|~(o^i)&o-i>>>0)>>>31)|0}})},function(e,t,n){var r=n(1);r(r.S,"Math",{iaddh:function(e,t,n,r){var o=e>>>0,i=n>>>0;return(t>>>0)+(r>>>0)+((o&i|(o|i)&~(o+i>>>0))>>>31)|0}})},function(e,t,n){var r=n(1),o=n(128),i=n(148);r(r.S,"Math",{fscale:function(e,t,n,r,a){return i(o(e,t,n,r,a))}})},function(e,t,n){var r=n(1),o=180/Math.PI;r(r.S,"Math",{degrees:function(e){return e*o}})},function(e,t,n){var r=n(1);r(r.S,"Math",{DEG_PER_RAD:Math.PI/180})},function(e,t,n){var r=n(1);r(r.S,"Math",{clamp:function(e,t,n){return Math.min(n,Math.max(t,e))}})},function(e,t,n){var r=n(1),o=n(26);r(r.S,"Error",{isError:function(e){return"Error"===o(e)}})},function(e,t,n){var r=n(1);r(r.S,"System",{global:n(4)})},function(e,t,n){var r=n(1);r(r.G,{global:n(4)})},function(e,t,n){n(67)("WeakSet")},function(e,t,n){n(67)("WeakMap")},function(e,t,n){n(67)("Set")},function(e,t,n){n(67)("Map")},function(e,t,n){n(68)("WeakSet")},function(e,t,n){n(68)("WeakMap")},function(e,t,n){n(68)("Set")},function(e,t,n){n(68)("Map")},function(e,t,n){var r=n(1);r(r.P+r.R,"Set",{toJSON:n(130)("Set")})},function(e,t,n){var r=n(1);r(r.P+r.R,"Map",{toJSON:n(130)("Map")})},function(e,t,n){"use strict";var r=n(1),o=n(13),i=n(34),a=n(20),u=n(21).f;n(11)&&r(r.P+n(69),"Object",{__lookupSetter__:function(e){var t,n=o(this),r=i(e,!0);do{if(t=u(n,r))return t.set}while(n=a(n))}})},function(e,t,n){"use strict";var r=n(1),o=n(13),i=n(34),a=n(20),u=n(21).f;n(11)&&r(r.P+n(69),"Object",{__lookupGetter__:function(e){var t,n=o(this),r=i(e,!0);do{if(t=u(n,r))return t.get}while(n=a(n))}})},function(e,t,n){"use strict";var r=n(1),o=n(13),i=n(16),a=n(10);n(11)&&r(r.P+n(69),"Object",{__defineSetter__:function(e,t){a.f(o(this),e,{set:i(t),enumerable:!0,configurable:!0})}})},function(e,t,n){"use strict";var r=n(1),o=n(13),i=n(16),a=n(10);n(11)&&r(r.P+n(69),"Object",{__defineGetter__:function(e,t){a.f(o(this),e,{get:i(t),enumerable:!0,configurable:!0})}})},function(e,t,n){var r=n(1),o=n(131)(!0);r(r.S,"Object",{entries:function(e){return o(e)}})},function(e,t,n){var r=n(1),o=n(131)(!1);r(r.S,"Object",{values:function(e){return o(e)}})},function(e,t,n){var r=n(1),o=n(134),i=n(22),a=n(21),u=n(94);r(r.S,"Object",{getOwnPropertyDescriptors:function(e){for(var t,n,r=i(e),c=a.f,s=o(r),l={},f=0;s.length>f;)void 0!==(n=c(r,t=s[f++]))&&u(l,t,n);return l}})},function(e,t,n){n(110)("observable")},function(e,t,n){n(110)("asyncIterator")},function(e,t,n){"use strict";var r=n(1),o=n(33),i=n(9),a=n(77),u=n(75),c=RegExp.prototype,s=function(e,t){this._r=e,this._s=t};n(98)(s,"RegExp String",function(){var e=this._r.exec(this._s);return{value:e,done:null===e}}),r(r.P,"String",{matchAll:function(e){if(o(this),!a(e))throw TypeError(e+" is not a regexp!");var t=String(this),n="flags"in c?String(e.flags):u.call(e),r=new RegExp(e.source,~n.indexOf("g")?n:"g"+n);return r.lastIndex=i(e.lastIndex),new s(r,t)}})},function(e,t,n){"use strict";n(55)("trimRight",function(e){return function(){return e(this,2)}},"trimEnd")},function(e,t,n){"use strict";n(55)("trimLeft",function(e){return function(){return e(this,1)}},"trimStart")},function(e,t,n){"use strict";var r=n(1),o=n(132),i=n(72);r(r.P+r.F*/Version\/10\.\d+(\.\d+)? Safari\//.test(i),"String",{padEnd:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0,!1)}})},function(e,t,n){"use strict";var r=n(1),o=n(132),i=n(72);r(r.P+r.F*/Version\/10\.\d+(\.\d+)? Safari\//.test(i),"String",{padStart:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0,!0)}})},function(e,t,n){"use strict";var r=n(1),o=n(100)(!0);r(r.P,"String",{at:function(e){return o(this,e)}})},function(e,t,n){"use strict";var r=n(1),o=n(133),i=n(13),a=n(9),u=n(32),c=n(92);r(r.P,"Array",{flatten:function(){var e=arguments[0],t=i(this),n=a(t.length),r=c(t,0);return o(r,t,t,n,0,void 0===e?1:u(e)),r}}),n(38)("flatten")},function(e,t,n){"use strict";var r=n(1),o=n(133),i=n(13),a=n(9),u=n(16),c=n(92);r(r.P,"Array",{flatMap:function(e){var t,n,r=i(this);return u(e),t=a(r.length),n=c(r,0),o(n,r,r,t,0,1,e,arguments[1]),n}}),n(38)("flatMap")},function(e,t,n){"use strict";var r=n(1),o=n(80)(!0);r(r.P,"Array",{includes:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),n(38)("includes")},function(e,t,n){var r=n(1),o=n(106);o&&r(r.S,"Reflect",{setPrototypeOf:function(e,t){o.check(e,t);try{return o.set(e,t),!0}catch(e){return!1}}})},function(e,t,n){var r=n(10),o=n(21),i=n(20),a=n(23),u=n(1),c=n(52),s=n(3),l=n(6);u(u.S,"Reflect",{set:function e(t,n,u){var f,p,d=arguments.length<4?t:arguments[3],h=o.f(s(t),n);if(!h){if(l(p=i(t)))return e(p,n,u,d);h=c(0)}if(a(h,"value")){if(!1===h.writable||!l(d))return!1;if(f=o.f(d,n)){if(f.get||f.set||!1===f.writable)return!1;f.value=u,r.f(d,n,f)}else r.f(d,n,c(0,u));return!0}return void 0!==h.set&&(h.set.call(d,u),!0)}})},function(e,t,n){var r=n(1),o=n(3),i=Object.preventExtensions;r(r.S,"Reflect",{preventExtensions:function(e){o(e);try{return i&&i(e),!0}catch(e){return!1}}})},function(e,t,n){var r=n(1);r(r.S,"Reflect",{ownKeys:n(134)})},function(e,t,n){var r=n(1),o=n(3),i=Object.isExtensible;r(r.S,"Reflect",{isExtensible:function(e){return o(e),!i||i(e)}})},function(e,t,n){var r=n(1);r(r.S,"Reflect",{has:function(e,t){return t in e}})},function(e,t,n){var r=n(1),o=n(20),i=n(3);r(r.S,"Reflect",{getPrototypeOf:function(e){return o(i(e))}})},function(e,t,n){var r=n(21),o=n(1),i=n(3);o(o.S,"Reflect",{getOwnPropertyDescriptor:function(e,t){return r.f(i(e),t)}})},function(e,t,n){var r=n(21),o=n(20),i=n(23),a=n(1),u=n(6),c=n(3);a(a.S,"Reflect",{get:function e(t,n){var a,s,l=arguments.length<3?t:arguments[2];return c(t)===l?t[n]:(a=r.f(t,n))?i(a,"value")?a.value:void 0!==a.get?a.get.call(l):void 0:u(s=o(t))?e(s,n,l):void 0}})},function(e,t,n){"use strict";var r=n(1),o=n(3),i=function(e){this._t=o(e),this._i=0;var t,n=this._k=[];for(t in e)n.push(t)};n(98)(i,"Object",function(){var e,t=this._k;do{if(this._i>=t.length)return{value:void 0,done:!0}}while(!((e=t[this._i++])in this._t));return{value:e,done:!1}}),r(r.S,"Reflect",{enumerate:function(e){return new i(e)}})},function(e,t,n){var r=n(1),o=n(21).f,i=n(3);r(r.S,"Reflect",{deleteProperty:function(e,t){var n=o(i(e),t);return!(n&&!n.configurable)&&delete e[t]}})},function(e,t,n){var r=n(10),o=n(1),i=n(3),a=n(34);o(o.S+o.F*n(5)(function(){Reflect.defineProperty(r.f({},1,{value:1}),1,{value:2})}),"Reflect",{defineProperty:function(e,t,n){i(e),t=a(t,!0),i(n);try{return r.f(e,t,n),!0}catch(e){return!1}}})},function(e,t,n){var r=n(1),o=n(48),i=n(16),a=n(3),u=n(6),c=n(5),s=n(155),l=(n(4).Reflect||{}).construct,f=c(function(){function e(){}return!(l(function(){},[],e)instanceof e)}),p=!c(function(){l(function(){})});r(r.S+r.F*(f||p),"Reflect",{construct:function(e,t){i(e),a(t);var n=arguments.length<3?e:i(arguments[2]);if(p&&!f)return l(e,t,n);if(e==n){switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3])}var r=[null];return r.push.apply(r,t),new(s.apply(e,r))}var c=n.prototype,d=o(u(c)?c:Object.prototype),h=Function.apply.call(e,d,t);return u(h)?h:d}})},function(e,t,n){var r=n(1),o=n(16),i=n(3),a=(n(4).Reflect||{}).apply,u=Function.apply;r(r.S+r.F*!n(5)(function(){a(function(){})}),"Reflect",{apply:function(e,t,n){var r=o(e),c=i(n);return a?a(r,t,c):u.call(r,t,c)}})},function(e,t,n){n(36)("Float64",8,function(e){return function(t,n,r){return e(this,t,n,r)}})},function(e,t,n){n(36)("Float32",4,function(e){return function(t,n,r){return e(this,t,n,r)}})},function(e,t,n){n(36)("Uint32",4,function(e){return function(t,n,r){return e(this,t,n,r)}})},function(e,t,n){n(36)("Int32",4,function(e){return function(t,n,r){return e(this,t,n,r)}})},function(e,t,n){n(36)("Uint16",2,function(e){return function(t,n,r){return e(this,t,n,r)}})},function(e,t,n){n(36)("Int16",2,function(e){return function(t,n,r){return e(this,t,n,r)}})},function(e,t,n){n(36)("Uint8",1,function(e){return function(t,n,r){return e(this,t,n,r)}},!0)},function(e,t,n){n(36)("Uint8",1,function(e){return function(t,n,r){return e(this,t,n,r)}})},function(e,t,n){n(36)("Int8",1,function(e){return function(t,n,r){return e(this,t,n,r)}})},function(e,t,n){var r=n(1);r(r.G+r.W+r.F*!n(70).ABV,{DataView:n(86).DataView})},function(e,t,n){"use strict";var r=n(1),o=n(70),i=n(86),a=n(3),u=n(49),c=n(9),s=n(6),l=n(4).ArrayBuffer,f=n(73),p=i.ArrayBuffer,d=i.DataView,h=o.ABV&&l.isView,v=p.prototype.slice,y=o.VIEW;r(r.G+r.W+r.F*(l!==p),{ArrayBuffer:p}),r(r.S+r.F*!o.CONSTR,"ArrayBuffer",{isView:function(e){return h&&h(e)||s(e)&&y in e}}),r(r.P+r.U+r.F*n(5)(function(){return!new p(2).slice(1,void 0).byteLength}),"ArrayBuffer",{slice:function(e,t){if(void 0!==v&&void 0===t)return v.call(a(this),e);for(var n=a(this).byteLength,r=u(e,n),o=u(void 0===t?n:t,n),i=new(f(this,p))(c(o-r)),s=new d(this),l=new d(i),h=0;r<o;)l.setUint8(h++,s.getUint8(r++));return i}}),n(46)("ArrayBuffer")},function(e,t,n){"use strict";var r=n(136),o=n(53);n(71)("WeakSet",function(e){return function(){return e(this,arguments.length>0?arguments[0]:void 0)}},{add:function(e){return r.def(o(this,"WeakSet"),e,!0)}},r,!1,!0)},function(e,t,n){"use strict";var r,o,i,a,u=n(39),c=n(4),s=n(27),l=n(60),f=n(1),p=n(6),d=n(16),h=n(45),v=n(44),y=n(73),g=n(89).set,b=n(88)(),m=n(87),x=n(142),_=n(72),w=n(141),O=c.TypeError,S=c.process,E=S&&S.versions,k=E&&E.v8||"",T=c.Promise,C="process"==l(S),j=function(){},P=o=m.f,A=!!function(){try{var e=T.resolve(1),t=(e.constructor={})[n(8)("species")]=function(e){e(j,j)};return(C||"function"==typeof PromiseRejectionEvent)&&e.then(j)instanceof t&&0!==k.indexOf("6.6")&&-1===_.indexOf("Chrome/66")}catch(e){}}(),M=function(e){var t;return!(!p(e)||"function"!=typeof(t=e.then))&&t},D=function(e,t){if(!e._n){e._n=!0;var n=e._c;b(function(){for(var r=e._v,o=1==e._s,i=0,a=function(t){var n,i,a,u=o?t.ok:t.fail,c=t.resolve,s=t.reject,l=t.domain;try{u?(o||(2==e._h&&L(e),e._h=1),!0===u?n=r:(l&&l.enter(),n=u(r),l&&(l.exit(),a=!0)),n===t.promise?s(O("Promise-chain cycle")):(i=M(n))?i.call(n,c,s):c(n)):s(r)}catch(e){l&&!a&&l.exit(),s(e)}};n.length>i;)a(n[i++]);e._c=[],e._n=!1,t&&!e._h&&B(e)})}},B=function(e){g.call(c,function(){var t,n,r,o=e._v,i=N(e);if(i&&(t=x(function(){C?S.emit("unhandledRejection",o,e):(n=c.onunhandledrejection)?n({promise:e,reason:o}):(r=c.console)&&r.error&&r.error("Unhandled promise rejection",o)}),e._h=C||N(e)?2:1),e._a=void 0,i&&t.e)throw t.v})},N=function(e){return 1!==e._h&&0===(e._a||e._c).length},L=function(e){g.call(c,function(){var t;C?S.emit("rejectionHandled",e):(t=c.onrejectionhandled)&&t({promise:e,reason:e._v})})},I=function(e){var t=this;t._d||(t._d=!0,(t=t._w||t)._v=e,t._s=2,t._a||(t._a=t._c.slice()),D(t,!0))},R=function(e){var t,n=this;if(!n._d){n._d=!0,n=n._w||n;try{if(n===e)throw O("Promise can't be resolved itself");(t=M(e))?b(function(){var r={_w:n,_d:!1};try{t.call(e,s(R,r,1),s(I,r,1))}catch(e){I.call(r,e)}}):(n._v=e,n._s=1,D(n,!1))}catch(e){I.call({_w:n,_d:!1},e)}}};A||(T=function(e){h(this,T,"Promise","_h"),d(e),r.call(this);try{e(s(R,this,1),s(I,this,1))}catch(e){I.call(this,e)}},(r=function(e){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=n(43)(T.prototype,{then:function(e,t){var n=P(y(this,T));return n.ok="function"!=typeof e||e,n.fail="function"==typeof t&&t,n.domain=C?S.domain:void 0,this._c.push(n),this._a&&this._a.push(n),this._s&&D(this,!1),n.promise},catch:function(e){return this.then(void 0,e)}}),i=function(){var e=new r;this.promise=e,this.resolve=s(R,e,1),this.reject=s(I,e,1)},m.f=P=function(e){return e===T||e===a?new i(e):o(e)}),f(f.G+f.W+f.F*!A,{Promise:T}),n(56)(T,"Promise"),n(46)("Promise"),a=n(28).Promise,f(f.S+f.F*!A,"Promise",{reject:function(e){var t=P(this);return(0,t.reject)(e),t.promise}}),f(f.S+f.F*(u||!A),"Promise",{resolve:function(e){return w(u&&this===a?T:this,e)}}),f(f.S+f.F*!(A&&n(76)(function(e){T.all(e).catch(j)})),"Promise",{all:function(e){var t=this,n=P(t),r=n.resolve,o=n.reject,i=x(function(){var n=[],i=0,a=1;v(e,!1,function(e){var u=i++,c=!1;n.push(void 0),a++,t.resolve(e).then(function(e){c||(c=!0,n[u]=e,--a||r(n))},o)}),--a||r(n)});return i.e&&o(i.v),n.promise},race:function(e){var t=this,n=P(t),r=n.reject,o=x(function(){v(e,!1,function(e){t.resolve(e).then(n.resolve,r)})});return o.e&&r(o.v),n.promise}})},function(e,t,n){n(74)("split",2,function(e,t,r){"use strict";var o=n(77),i=r,a=[].push;if("c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length){var u=void 0===/()??/.exec("")[1];r=function(e,t){var n=String(this);if(void 0===e&&0===t)return[];if(!o(e))return i.call(n,e,t);var r,c,s,l,f,p=[],d=(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.unicode?"u":"")+(e.sticky?"y":""),h=0,v=void 0===t?4294967295:t>>>0,y=new RegExp(e.source,d+"g");for(u||(r=new RegExp("^"+y.source+"$(?!\\s)",d));(c=y.exec(n))&&!((s=c.index+c[0].length)>h&&(p.push(n.slice(h,c.index)),!u&&c.length>1&&c[0].replace(r,function(){for(f=1;f<arguments.length-2;f++)void 0===arguments[f]&&(c[f]=void 0)}),c.length>1&&c.index<n.length&&a.apply(p,c.slice(1)),l=c[0].length,h=s,p.length>=v));)y.lastIndex===c.index&&y.lastIndex++;return h===n.length?!l&&y.test("")||p.push(""):p.push(n.slice(h)),p.length>v?p.slice(0,v):p}}else"0".split(void 0,0).length&&(r=function(e,t){return void 0===e&&0===t?[]:i.call(this,e,t)});return[function(n,o){var i=e(this),a=void 0==n?void 0:n[t];return void 0!==a?a.call(n,i,o):r.call(String(i),n,o)},r]})},function(e,t,n){n(74)("search",1,function(e,t,n){return[function(n){"use strict";var r=e(this),o=void 0==n?void 0:n[t];return void 0!==o?o.call(n,r):new RegExp(n)[t](String(r))},n]})},function(e,t,n){n(74)("replace",2,function(e,t,n){return[function(r,o){"use strict";var i=e(this),a=void 0==r?void 0:r[t];return void 0!==a?a.call(r,i,o):n.call(String(i),r,o)},n]})},function(e,t,n){n(74)("match",1,function(e,t,n){return[function(n){"use strict";var r=e(this),o=void 0==n?void 0:n[t];return void 0!==o?o.call(n,r):new RegExp(n)[t](String(r))},n]})},function(e,t,n){"use strict";n(143);var r=n(3),o=n(75),i=n(11),a=/./.toString,u=function(e){n(18)(RegExp.prototype,"toString",e,!0)};n(5)(function(){return"/a/b"!=a.call({source:"a",flags:"b"})})?u(function(){var e=r(this);return"/".concat(e.source,"/","flags"in e?e.flags:!i&&e instanceof RegExp?o.call(e):void 0)}):"toString"!=a.name&&u(function(){return a.call(this)})},function(e,t,n){var r=n(4),o=n(104),i=n(10).f,a=n(47).f,u=n(77),c=n(75),s=r.RegExp,l=s,f=s.prototype,p=/a/g,d=/a/g,h=new s(p)!==p;if(n(11)&&(!h||n(5)(function(){return d[n(8)("match")]=!1,s(p)!=p||s(d)==d||"/a/i"!=s(p,"i")}))){s=function(e,t){var n=this instanceof s,r=u(e),i=void 0===t;return!n&&r&&e.constructor===s&&i?e:o(h?new l(r&&!i?e.source:e,t):l((r=e instanceof s)?e.source:e,r&&i?c.call(e):t),n?this:f,s)};for(var v=function(e){e in s||i(s,e,{configurable:!0,get:function(){return l[e]},set:function(t){l[e]=t}})},y=a(l),g=0;y.length>g;)v(y[g++]);f.constructor=s,s.prototype=f,n(18)(r,"RegExp",s)}n(46)("RegExp")},function(e,t,n){n(46)("Array")},function(e,t,n){"use strict";var r=n(1),o=n(30)(6),i="findIndex",a=!0;i in[]&&Array(1)[i](function(){a=!1}),r(r.P+r.F*a,"Array",{findIndex:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),n(38)(i)},function(e,t,n){"use strict";var r=n(1),o=n(30)(5),i=!0;"find"in[]&&Array(1).find(function(){i=!1}),r(r.P+r.F*i,"Array",{find:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),n(38)("find")},function(e,t,n){var r=n(1);r(r.P,"Array",{fill:n(91)}),n(38)("fill")},function(e,t,n){var r=n(1);r(r.P,"Array",{copyWithin:n(145)}),n(38)("copyWithin")},function(e,t,n){"use strict";var r=n(1),o=n(22),i=n(32),a=n(9),u=[].lastIndexOf,c=!!u&&1/[1].lastIndexOf(1,-0)<0;r(r.P+r.F*(c||!n(25)(u)),"Array",{lastIndexOf:function(e){if(c)return u.apply(this,arguments)||0;var t=o(this),n=a(t.length),r=n-1;for(arguments.length>1&&(r=Math.min(r,i(arguments[1]))),r<0&&(r=n+r);r>=0;r--)if(r in t&&t[r]===e)return r||0;return-1}})},function(e,t,n){"use strict";var r=n(1),o=n(80)(!1),i=[].indexOf,a=!!i&&1/[1].indexOf(1,-0)<0;r(r.P+r.F*(a||!n(25)(i)),"Array",{indexOf:function(e){return a?i.apply(this,arguments)||0:o(this,e,arguments[1])}})},function(e,t,n){"use strict";var r=n(1),o=n(146);r(r.P+r.F*!n(25)([].reduceRight,!0),"Array",{reduceRight:function(e){return o(this,e,arguments.length,arguments[1],!0)}})},function(e,t,n){"use strict";var r=n(1),o=n(146);r(r.P+r.F*!n(25)([].reduce,!0),"Array",{reduce:function(e){return o(this,e,arguments.length,arguments[1],!1)}})},function(e,t,n){"use strict";var r=n(1),o=n(30)(4);r(r.P+r.F*!n(25)([].every,!0),"Array",{every:function(e){return o(this,e,arguments[1])}})},function(e,t,n){"use strict";var r=n(1),o=n(30)(3);r(r.P+r.F*!n(25)([].some,!0),"Array",{some:function(e){return o(this,e,arguments[1])}})},function(e,t,n){"use strict";var r=n(1),o=n(30)(2);r(r.P+r.F*!n(25)([].filter,!0),"Array",{filter:function(e){return o(this,e,arguments[1])}})},function(e,t,n){"use strict";var r=n(1),o=n(30)(1);r(r.P+r.F*!n(25)([].map,!0),"Array",{map:function(e){return o(this,e,arguments[1])}})},function(e,t,n){var r=n(6),o=n(78),i=n(8)("species");e.exports=function(e){var t;return o(e)&&("function"!=typeof(t=e.constructor)||t!==Array&&!o(t.prototype)||(t=void 0),r(t)&&null===(t=t[i])&&(t=void 0)),void 0===t?Array:t}},function(e,t,n){"use strict";var r=n(1),o=n(30)(0),i=n(25)([].forEach,!0);r(r.P+r.F*!i,"Array",{forEach:function(e){return o(this,e,arguments[1])}})},function(e,t,n){"use strict";var r=n(1),o=n(16),i=n(13),a=n(5),u=[].sort,c=[1,2,3];r(r.P+r.F*(a(function(){c.sort(void 0)})||!a(function(){c.sort(null)})||!n(25)(u)),"Array",{sort:function(e){return void 0===e?u.call(i(this)):u.call(i(this),o(e))}})},function(e,t,n){"use strict";var r=n(1),o=n(107),i=n(26),a=n(49),u=n(9),c=[].slice;r(r.P+r.F*n(5)(function(){o&&c.call(o)}),"Array",{slice:function(e,t){var n=u(this.length),r=i(this);if(t=void 0===t?n:t,"Array"==r)return c.call(this,e,t);for(var o=a(e,n),s=a(t,n),l=u(s-o),f=new Array(l),p=0;p<l;p++)f[p]="String"==r?this.charAt(o+p):this[o+p];return f}})},function(e,t,n){"use strict";var r=n(1),o=n(22),i=[].join;r(r.P+r.F*(n(62)!=Object||!n(25)(i)),"Array",{join:function(e){return i.call(o(this),void 0===e?",":e)}})},function(e,t,n){"use strict";var r=n(1),o=n(94);r(r.S+r.F*n(5)(function(){function e(){}return!(Array.of.call(e)instanceof e)}),"Array",{of:function(){for(var e=0,t=arguments.length,n=new("function"==typeof this?this:Array)(t);t>e;)o(n,e,arguments[e++]);return n.length=t,n}})},function(e,t,n){"use strict";var r=n(27),o=n(1),i=n(13),a=n(147),u=n(95),c=n(9),s=n(94),l=n(93);o(o.S+o.F*!n(76)(function(e){Array.from(e)}),"Array",{from:function(e){var t,n,o,f,p=i(e),d="function"==typeof this?this:Array,h=arguments.length,v=h>1?arguments[1]:void 0,y=void 0!==v,g=0,b=l(p);if(y&&(v=r(v,h>2?arguments[2]:void 0,2)),void 0==b||d==Array&&u(b))for(n=new d(t=c(p.length));t>g;g++)s(n,g,y?v(p[g],g):p[g]);else for(f=b.call(p),n=new d;!(o=f.next()).done;g++)s(n,g,y?a(f,v,[o.value,g],!0):o.value);return n.length=g,n}})},function(e,t,n){var r=n(1);r(r.S,"Array",{isArray:n(78)})},function(e,t,n){"use strict";var r=n(3),o=n(34);e.exports=function(e){if("string"!==e&&"number"!==e&&"default"!==e)throw TypeError("Incorrect hint");return o(r(this),"number"!=e)}},function(e,t,n){var r=n(8)("toPrimitive"),o=Date.prototype;r in o||n(19)(o,r,n(341))},function(e,t,n){var r=Date.prototype,o=r.toString,i=r.getTime;new Date(NaN)+""!="Invalid Date"&&n(18)(r,"toString",function(){var e=i.call(this);return e==e?o.call(this):"Invalid Date"})},function(e,t,n){"use strict";var r=n(5),o=Date.prototype.getTime,i=Date.prototype.toISOString,a=function(e){return e>9?e:"0"+e};e.exports=r(function(){return"0385-07-25T07:06:39.999Z"!=i.call(new Date(-5e13-1))})||!r(function(){i.call(new Date(NaN))})?function(){if(!isFinite(o.call(this)))throw RangeError("Invalid time value");var e=this,t=e.getUTCFullYear(),n=e.getUTCMilliseconds(),r=t<0?"-":t>9999?"+":"";return r+("00000"+Math.abs(t)).slice(r?-6:-4)+"-"+a(e.getUTCMonth()+1)+"-"+a(e.getUTCDate())+"T"+a(e.getUTCHours())+":"+a(e.getUTCMinutes())+":"+a(e.getUTCSeconds())+"."+(n>99?n:"0"+a(n))+"Z"}:i},function(e,t,n){var r=n(1),o=n(344);r(r.P+r.F*(Date.prototype.toISOString!==o),"Date",{toISOString:o})},function(e,t,n){"use strict";var r=n(1),o=n(13),i=n(34);r(r.P+r.F*n(5)(function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})}),"Date",{toJSON:function(e){var t=o(this),n=i(t);return"number"!=typeof n||isFinite(n)?t.toISOString():null}})},function(e,t,n){var r=n(1);r(r.S,"Date",{now:function(){return(new Date).getTime()}})},function(e,t,n){"use strict";n(17)("sup",function(e){return function(){return e(this,"sup","","")}})},function(e,t,n){"use strict";n(17)("sub",function(e){return function(){return e(this,"sub","","")}})},function(e,t,n){"use strict";n(17)("strike",function(e){return function(){return e(this,"strike","","")}})},function(e,t,n){"use strict";n(17)("small",function(e){return function(){return e(this,"small","","")}})},function(e,t,n){"use strict";n(17)("link",function(e){return function(t){return e(this,"a","href",t)}})},function(e,t,n){"use strict";n(17)("italics",function(e){return function(){return e(this,"i","","")}})},function(e,t,n){"use strict";n(17)("fontsize",function(e){return function(t){return e(this,"font","size",t)}})},function(e,t,n){"use strict";n(17)("fontcolor",function(e){return function(t){return e(this,"font","color",t)}})},function(e,t,n){"use strict";n(17)("fixed",function(e){return function(){return e(this,"tt","","")}})},function(e,t,n){"use strict";n(17)("bold",function(e){return function(){return e(this,"b","","")}})},function(e,t,n){"use strict";n(17)("blink",function(e){return function(){return e(this,"blink","","")}})},function(e,t,n){"use strict";n(17)("big",function(e){return function(){return e(this,"big","","")}})},function(e,t,n){"use strict";n(17)("anchor",function(e){return function(t){return e(this,"a","name",t)}})},function(e,t,n){"use strict";var r=n(1),o=n(9),i=n(97),a="".startsWith;r(r.P+r.F*n(96)("startsWith"),"String",{startsWith:function(e){var t=i(this,e,"startsWith"),n=o(Math.min(arguments.length>1?arguments[1]:void 0,t.length)),r=String(e);return a?a.call(t,r,n):t.slice(n,n+r.length)===r}})},function(e,t,n){var r=n(1);r(r.P,"String",{repeat:n(103)})},function(e,t,n){"use strict";var r=n(1),o=n(97);r(r.P+r.F*n(96)("includes"),"String",{includes:function(e){return!!~o(this,e,"includes").indexOf(e,arguments.length>1?arguments[1]:void 0)}})},function(e,t,n){"use strict";var r=n(1),o=n(9),i=n(97),a="".endsWith;r(r.P+r.F*n(96)("endsWith"),"String",{endsWith:function(e){var t=i(this,e,"endsWith"),n=arguments.length>1?arguments[1]:void 0,r=o(t.length),u=void 0===n?r:Math.min(o(n),r),c=String(e);return a?a.call(t,c,u):t.slice(u-c.length,u)===c}})},function(e,t,n){"use strict";var r=n(1),o=n(100)(!1);r(r.P,"String",{codePointAt:function(e){return o(this,e)}})},function(e,t,n){"use strict";var r=n(100)(!0);n(99)(String,"String",function(e){this._t=String(e),this._i=0},function(){var e,t=this._t,n=this._i;return n>=t.length?{value:void 0,done:!0}:(e=r(t,n),this._i+=e.length,{value:e,done:!1})})},function(e,t,n){"use strict";n(55)("trim",function(e){return function(){return e(this,3)}})},function(e,t,n){var r=n(1),o=n(22),i=n(9);r(r.S,"String",{raw:function(e){for(var t=o(e.raw),n=i(t.length),r=arguments.length,a=[],u=0;n>u;)a.push(String(t[u++])),u<r&&a.push(String(arguments[u]));return a.join("")}})},function(e,t,n){var r=n(1),o=n(49),i=String.fromCharCode,a=String.fromCodePoint;r(r.S+r.F*(!!a&&1!=a.length),"String",{fromCodePoint:function(e){for(var t,n=[],r=arguments.length,a=0;r>a;){if(t=+arguments[a++],o(t,1114111)!==t)throw RangeError(t+" is not a valid code point");n.push(t<65536?i(t):i(55296+((t-=65536)>>10),t%1024+56320))}return n.join("")}})},function(e,t,n){var r=n(1);r(r.S,"Math",{trunc:function(e){return(e>0?Math.floor:Math.ceil)(e)}})},function(e,t,n){var r=n(1),o=n(101),i=Math.exp;r(r.S,"Math",{tanh:function(e){var t=o(e=+e),n=o(-e);return t==1/0?1:n==1/0?-1:(t-n)/(i(e)+i(-e))}})},function(e,t,n){var r=n(1),o=n(101),i=Math.exp;r(r.S+r.F*n(5)(function(){return-2e-17!=!Math.sinh(-2e-17)}),"Math",{sinh:function(e){return Math.abs(e=+e)<1?(o(e)-o(-e))/2:(i(e-1)-i(-e-1))*(Math.E/2)}})},function(e,t,n){var r=n(1);r(r.S,"Math",{sign:n(102)})},function(e,t,n){var r=n(1);r(r.S,"Math",{log2:function(e){return Math.log(e)/Math.LN2}})},function(e,t,n){var r=n(1);r(r.S,"Math",{log1p:n(149)})},function(e,t,n){var r=n(1);r(r.S,"Math",{log10:function(e){return Math.log(e)*Math.LOG10E}})},function(e,t,n){var r=n(1),o=Math.imul;r(r.S+r.F*n(5)(function(){return-5!=o(4294967295,5)||2!=o.length}),"Math",{imul:function(e,t){var n=+e,r=+t,o=65535&n,i=65535&r;return 0|o*i+((65535&n>>>16)*i+o*(65535&r>>>16)<<16>>>0)}})},function(e,t,n){var r=n(1),o=Math.abs;r(r.S,"Math",{hypot:function(e,t){for(var n,r,i=0,a=0,u=arguments.length,c=0;a<u;)c<(n=o(arguments[a++]))?(i=i*(r=c/n)*r+1,c=n):i+=n>0?(r=n/c)*r:n;return c===1/0?1/0:c*Math.sqrt(i)}})},function(e,t,n){var r=n(1);r(r.S,"Math",{fround:n(148)})},function(e,t,n){var r=n(1),o=n(101);r(r.S+r.F*(o!=Math.expm1),"Math",{expm1:o})},function(e,t,n){var r=n(1),o=Math.exp;r(r.S,"Math",{cosh:function(e){return(o(e=+e)+o(-e))/2}})},function(e,t,n){var r=n(1);r(r.S,"Math",{clz32:function(e){return(e>>>=0)?31-Math.floor(Math.log(e+.5)*Math.LOG2E):32}})},function(e,t,n){var r=n(1),o=n(102);r(r.S,"Math",{cbrt:function(e){return o(e=+e)*Math.pow(Math.abs(e),1/3)}})},function(e,t,n){var r=n(1),o=Math.atanh;r(r.S+r.F*!(o&&1/o(-0)<0),"Math",{atanh:function(e){return 0==(e=+e)?e:Math.log((1+e)/(1-e))/2}})},function(e,t,n){var r=n(1),o=Math.asinh;r(r.S+r.F*!(o&&1/o(0)>0),"Math",{asinh:function e(t){return isFinite(t=+t)&&0!=t?t<0?-e(-t):Math.log(t+Math.sqrt(t*t+1)):t}})},function(e,t,n){var r=n(1),o=n(149),i=Math.sqrt,a=Math.acosh;r(r.S+r.F*!(a&&710==Math.floor(a(Number.MAX_VALUE))&&a(1/0)==1/0),"Math",{acosh:function(e){return(e=+e)<1?NaN:e>94906265.62425156?Math.log(e)+Math.LN2:o(e-1+i(e-1)*i(e+1))}})},function(e,t,n){var r=n(1),o=n(153);r(r.S+r.F*(Number.parseInt!=o),"Number",{parseInt:o})},function(e,t,n){var r=n(1),o=n(152);r(r.S+r.F*(Number.parseFloat!=o),"Number",{parseFloat:o})},function(e,t,n){var r=n(1);r(r.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},function(e,t,n){var r=n(1);r(r.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},function(e,t,n){var r=n(1),o=n(150),i=Math.abs;r(r.S,"Number",{isSafeInteger:function(e){return o(e)&&i(e)<=9007199254740991}})},function(e,t,n){var r=n(1);r(r.S,"Number",{isNaN:function(e){return e!=e}})},function(e,t,n){var r=n(1);r(r.S,"Number",{isInteger:n(150)})},function(e,t,n){var r=n(1),o=n(4).isFinite;r(r.S,"Number",{isFinite:function(e){return"number"==typeof e&&o(e)}})},function(e,t,n){var r=n(1);r(r.S,"Number",{EPSILON:Math.pow(2,-52)})},function(e,t,n){"use strict";var r=n(1),o=n(5),i=n(151),a=1..toPrecision;r(r.P+r.F*(o(function(){return"1"!==a.call(1,void 0)})||!o(function(){a.call({})})),"Number",{toPrecision:function(e){var t=i(this,"Number#toPrecision: incorrect invocation!");return void 0===e?a.call(t):a.call(t,e)}})},function(e,t,n){"use strict";var r=n(1),o=n(32),i=n(151),a=n(103),u=1..toFixed,c=Math.floor,s=[0,0,0,0,0,0],l="Number.toFixed: incorrect invocation!",f=function(e,t){for(var n=-1,r=t;++n<6;)r+=e*s[n],s[n]=r%1e7,r=c(r/1e7)},p=function(e){for(var t=6,n=0;--t>=0;)n+=s[t],s[t]=c(n/e),n=n%e*1e7},d=function(){for(var e=6,t="";--e>=0;)if(""!==t||0===e||0!==s[e]){var n=String(s[e]);t=""===t?n:t+a.call("0",7-n.length)+n}return t},h=function(e,t,n){return 0===t?n:t%2==1?h(e,t-1,n*e):h(e*e,t/2,n)};r(r.P+r.F*(!!u&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!n(5)(function(){u.call({})})),"Number",{toFixed:function(e){var t,n,r,u,c=i(this,l),s=o(e),v="",y="0";if(s<0||s>20)throw RangeError(l);if(c!=c)return"NaN";if(c<=-1e21||c>=1e21)return String(c);if(c<0&&(v="-",c=-c),c>1e-21)if(n=(t=function(e){for(var t=0,n=e;n>=4096;)t+=12,n/=4096;for(;n>=2;)t+=1,n/=2;return t}(c*h(2,69,1))-69)<0?c*h(2,-t,1):c/h(2,t,1),n*=4503599627370496,(t=52-t)>0){for(f(0,n),r=s;r>=7;)f(1e7,0),r-=7;for(f(h(10,r,1),0),r=t-1;r>=23;)p(1<<23),r-=23;p(1<<r),f(1,1),p(2),y=d()}else f(0,n),f(1<<-t,0),y=d()+a.call("0",s);return y=s>0?v+((u=y.length)<=s?"0."+a.call("0",s-u)+y:y.slice(0,u-s)+"."+y.slice(u-s)):v+y}})},function(e,t,n){"use strict";var r=n(4),o=n(23),i=n(26),a=n(104),u=n(34),c=n(5),s=n(47).f,l=n(21).f,f=n(10).f,p=n(55).trim,d=r.Number,h=d,v=d.prototype,y="Number"==i(n(48)(v)),g="trim"in String.prototype,b=function(e){var t=u(e,!1);if("string"==typeof t&&t.length>2){var n,r,o,i=(t=g?t.trim():p(t,3)).charCodeAt(0);if(43===i||45===i){if(88===(n=t.charCodeAt(2))||120===n)return NaN}else if(48===i){switch(t.charCodeAt(1)){case 66:case 98:r=2,o=49;break;case 79:case 111:r=8,o=55;break;default:return+t}for(var a,c=t.slice(2),s=0,l=c.length;s<l;s++)if((a=c.charCodeAt(s))<48||a>o)return NaN;return parseInt(c,r)}}return+t};if(!d(" 0o1")||!d("0b1")||d("+0x1")){d=function(e){var t=arguments.length<1?0:e,n=this;return n instanceof d&&(y?c(function(){v.valueOf.call(n)}):"Number"!=i(n))?a(new h(b(t)),n,d):b(t)};for(var m,x=n(11)?s(h):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),_=0;x.length>_;_++)o(h,m=x[_])&&!o(d,m)&&f(d,m,l(h,m));d.prototype=v,v.constructor=d,n(18)(r,"Number",d)}},function(e,t,n){var r=n(1),o=n(152);r(r.G+r.F*(parseFloat!=o),{parseFloat:o})},function(e,t,n){var r=n(1),o=n(153);r(r.G+r.F*(parseInt!=o),{parseInt:o})},function(e,t,n){"use strict";var r=n(6),o=n(20),i=n(8)("hasInstance"),a=Function.prototype;i in a||n(10).f(a,i,{value:function(e){if("function"!=typeof this||!r(e))return!1;if(!r(this.prototype))return e instanceof this;for(;e=o(e);)if(this.prototype===e)return!0;return!1}})},function(e,t,n){var r=n(10).f,o=Function.prototype,i=/^\s*function ([^ (]*)/;"name"in o||n(11)&&r(o,"name",{configurable:!0,get:function(){try{return(""+this).match(i)[1]}catch(e){return""}}})},function(e,t,n){var r=n(1);r(r.P,"Function",{bind:n(155)})},function(e,t,n){"use strict";var r=n(60),o={};o[n(8)("toStringTag")]="z",o+""!="[object z]"&&n(18)(Object.prototype,"toString",function(){return"[object "+r(this)+"]"},!0)},function(e,t,n){var r=n(1);r(r.S,"Object",{setPrototypeOf:n(106).set})},function(e,t){e.exports=Object.is||function(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}},function(e,t,n){var r=n(1);r(r.S,"Object",{is:n(406)})},function(e,t,n){var r=n(1);r(r.S+r.F,"Object",{assign:n(156)})},function(e,t,n){var r=n(6);n(31)("isExtensible",function(e){return function(t){return!!r(t)&&(!e||e(t))}})},function(e,t,n){var r=n(6);n(31)("isSealed",function(e){return function(t){return!r(t)||!!e&&e(t)}})},function(e,t,n){var r=n(6);n(31)("isFrozen",function(e){return function(t){return!r(t)||!!e&&e(t)}})},function(e,t,n){var r=n(6),o=n(40).onFreeze;n(31)("preventExtensions",function(e){return function(t){return e&&r(t)?e(o(t)):t}})},function(e,t,n){var r=n(6),o=n(40).onFreeze;n(31)("seal",function(e){return function(t){return e&&r(t)?e(o(t)):t}})},function(e,t,n){var r=n(6),o=n(40).onFreeze;n(31)("freeze",function(e){return function(t){return e&&r(t)?e(o(t)):t}})},function(e,t,n){n(31)("getOwnPropertyNames",function(){return n(157).f})},function(e,t,n){var r=n(13),o=n(50);n(31)("keys",function(){return function(e){return o(r(e))}})},function(e,t,n){var r=n(13),o=n(20);n(31)("getPrototypeOf",function(){return function(e){return o(r(e))}})},function(e,t,n){var r=n(22),o=n(21).f;n(31)("getOwnPropertyDescriptor",function(){return function(e,t){return o(r(e),t)}})},function(e,t,n){var r=n(1);r(r.S+r.F*!n(11),"Object",{defineProperties:n(158)})},function(e,t,n){var r=n(1);r(r.S+r.F*!n(11),"Object",{defineProperty:n(10).f})},function(e,t,n){var r=n(1);r(r.S,"Object",{create:n(48)})},function(e,t,n){var r=n(50),o=n(79),i=n(61);e.exports=function(e){var t=r(e),n=o.f;if(n)for(var a,u=n(e),c=i.f,s=0;u.length>s;)c.call(e,a=u[s++])&&t.push(a);return t}},function(e,t,n){"use strict";var r=n(4),o=n(23),i=n(11),a=n(1),u=n(18),c=n(40).KEY,s=n(5),l=n(81),f=n(56),p=n(51),d=n(8),h=n(160),v=n(110),y=n(422),g=n(78),b=n(3),m=n(6),x=n(22),_=n(34),w=n(52),O=n(48),S=n(157),E=n(21),k=n(10),T=n(50),C=E.f,j=k.f,P=S.f,A=r.Symbol,M=r.JSON,D=M&&M.stringify,B=d("_hidden"),N=d("toPrimitive"),L={}.propertyIsEnumerable,I=l("symbol-registry"),R=l("symbols"),U=l("op-symbols"),z=Object.prototype,F="function"==typeof A,X=r.QObject,G=!X||!X.prototype||!X.prototype.findChild,H=i&&s(function(){return 7!=O(j({},"a",{get:function(){return j(this,"a",{value:7}).a}})).a})?function(e,t,n){var r=C(z,t);r&&delete z[t],j(e,t,n),r&&e!==z&&j(z,t,r)}:j,W=function(e){var t=R[e]=O(A.prototype);return t._k=e,t},q=F&&"symbol"==typeof A.iterator?function(e){return"symbol"==typeof e}:function(e){return e instanceof A},V=function(e,t,n){return e===z&&V(U,t,n),b(e),t=_(t,!0),b(n),o(R,t)?(n.enumerable?(o(e,B)&&e[B][t]&&(e[B][t]=!1),n=O(n,{enumerable:w(0,!1)})):(o(e,B)||j(e,B,w(1,{})),e[B][t]=!0),H(e,t,n)):j(e,t,n)},K=function(e,t){b(e);for(var n,r=y(t=x(t)),o=0,i=r.length;i>o;)V(e,n=r[o++],t[n]);return e},Z=function(e){var t=L.call(this,e=_(e,!0));return!(this===z&&o(R,e)&&!o(U,e))&&(!(t||!o(this,e)||!o(R,e)||o(this,B)&&this[B][e])||t)},Y=function(e,t){if(e=x(e),t=_(t,!0),e!==z||!o(R,t)||o(U,t)){var n=C(e,t);return!n||!o(R,t)||o(e,B)&&e[B][t]||(n.enumerable=!0),n}},$=function(e){for(var t,n=P(x(e)),r=[],i=0;n.length>i;)o(R,t=n[i++])||t==B||t==c||r.push(t);return r},Q=function(e){for(var t,n=e===z,r=P(n?U:x(e)),i=[],a=0;r.length>a;)!o(R,t=r[a++])||n&&!o(z,t)||i.push(R[t]);return i};F||(u((A=function(){if(this instanceof A)throw TypeError("Symbol is not a constructor!");var e=p(arguments.length>0?arguments[0]:void 0),t=function(n){this===z&&t.call(U,n),o(this,B)&&o(this[B],e)&&(this[B][e]=!1),H(this,e,w(1,n))};return i&&G&&H(z,e,{configurable:!0,set:t}),W(e)}).prototype,"toString",function(){return this._k}),E.f=Y,k.f=V,n(47).f=S.f=$,n(61).f=Z,n(79).f=Q,i&&!n(39)&&u(z,"propertyIsEnumerable",Z,!0),h.f=function(e){return W(d(e))}),a(a.G+a.W+a.F*!F,{Symbol:A});for(var J="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),ee=0;J.length>ee;)d(J[ee++]);for(var te=T(d.store),ne=0;te.length>ne;)v(te[ne++]);a(a.S+a.F*!F,"Symbol",{for:function(e){return o(I,e+="")?I[e]:I[e]=A(e)},keyFor:function(e){if(!q(e))throw TypeError(e+" is not a symbol!");for(var t in I)if(I[t]===e)return t},useSetter:function(){G=!0},useSimple:function(){G=!1}}),a(a.S+a.F*!F,"Object",{create:function(e,t){return void 0===t?O(e):K(O(e),t)},defineProperty:V,defineProperties:K,getOwnPropertyDescriptor:Y,getOwnPropertyNames:$,getOwnPropertySymbols:Q}),M&&a(a.S+a.F*(!F||s(function(){var e=A();return"[null]"!=D([e])||"{}"!=D({a:e})||"{}"!=D(Object(e))})),"JSON",{stringify:function(e){for(var t,n,r=[e],o=1;arguments.length>o;)r.push(arguments[o++]);if(n=t=r[1],(m(t)||void 0!==e)&&!q(e))return g(t)||(t=function(e,t){if("function"==typeof n&&(t=n.call(this,e,t)),!q(t))return t}),r[1]=t,D.apply(M,r)}}),A.prototype[N]||n(19)(A.prototype,N,A.prototype.valueOf),f(A,"Symbol"),f(Math,"Math",!0),f(r.JSON,"JSON",!0)},function(e,t,n){n(423),n(421),n(420),n(419),n(418),n(417),n(416),n(415),n(414),n(413),n(412),n(411),n(410),n(409),n(408),n(407),n(405),n(404),n(403),n(402),n(401),n(400),n(399),n(398),n(397),n(396),n(395),n(394),n(393),n(392),n(391),n(390),n(389),n(388),n(387),n(386),n(385),n(384),n(383),n(382),n(381),n(380),n(379),n(378),n(377),n(376),n(375),n(374),n(373),n(372),n(371),n(370),n(369),n(368),n(367),n(366),n(365),n(364),n(363),n(362),n(361),n(360),n(359),n(358),n(357),n(356),n(355),n(354),n(353),n(352),n(351),n(350),n(349),n(348),n(347),n(346),n(345),n(343),n(342),n(340),n(339),n(338),n(337),n(336),n(335),n(334),n(332),n(331),n(330),n(329),n(328),n(327),n(326),n(325),n(324),n(323),n(322),n(321),n(320),n(90),n(319),n(318),n(143),n(317),n(316),n(315),n(314),n(313),n(140),n(138),n(137),n(312),n(311),n(310),n(309),n(308),n(307),n(306),n(305),n(304),n(303),n(302),n(301),n(300),n(299),n(298),n(297),n(296),n(295),n(294),n(293),n(292),n(291),n(290),n(289),n(288),n(287),n(286),n(285),n(284),n(283),n(282),n(281),n(280),n(279),n(278),n(277),n(276),n(275),n(274),n(273),n(272),n(271),n(270),n(269),n(268),n(267),n(266),n(265),n(264),n(263),n(262),n(261),n(260),n(259),n(258),n(257),n(256),n(255),n(254),n(253),n(252),n(251),n(250),n(249),n(248),n(247),n(246),n(245),n(244),n(243),n(242),n(241),n(240),n(239),n(238),n(237),n(236),n(235),n(234),n(233),n(232),n(231),n(230),n(229),n(228),e.exports=n(28)},function(e,t,n){"use strict";(function(e){if(n(424),n(227),n(226),e._babelPolyfill)throw new Error("only one instance of babel-polyfill is allowed");e._babelPolyfill=!0;var t="defineProperty";function r(e,n,r){e[n]||Object[t](e,n,{writable:!0,configurable:!0,value:r})}r(String.prototype,"padLeft","".padStart),r(String.prototype,"padRight","".padEnd),"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function(e){[][e]&&r(Array,e,Function.call.bind([][e]))})}).call(this,n(63))},function(e,t,n){"use strict";e.exports=function(e){var t=(e?e.ownerDocument||e:document).defaultView||window;return!(!e||!("function"==typeof t.Node?e instanceof t.Node:"object"==typeof e&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName))}},function(e,t,n){"use strict";var r=n(426);e.exports=function(e){return r(e)&&3==e.nodeType}},function(e,t,n){"use strict";var r=n(427);e.exports=function e(t,n){return!(!t||!n)&&(t===n||!r(t)&&(r(n)?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}},function(e,t,n){"use strict";var r=Object.prototype.hasOwnProperty;function o(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}e.exports=function(e,t){if(o(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),i=Object.keys(t);if(n.length!==i.length)return!1;for(var a=0;a<n.length;a++)if(!r.call(t,n[a])||!o(e[n[a]],t[n[a]]))return!1;return!0}},function(e,t,n){"use strict";e.exports=function(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}},function(e,t,n){"use strict";var r=!("undefined"==typeof window||!window.document||!window.document.createElement),o={canUseDOM:r,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:r&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:r&&!!window.screen,isInWorker:!r};e.exports=o},function(e,t,n){"use strict";
/** @license React v16.3.2
 * react-dom.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(113),o=n(7),i=n(431),a=n(163),u=n(112),c=n(430),s=n(429),l=n(428),f=n(162);function p(e){for(var t=arguments.length-1,n="http://reactjs.org/docs/error-decoder.html?invariant="+e,o=0;o<t;o++)n+="&args[]="+encodeURIComponent(arguments[o+1]);r(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}o||p("227");var d={_caughtError:null,_hasCaughtError:!1,_rethrowError:null,_hasRethrowError:!1,invokeGuardedCallback:function(e,t,n,r,o,i,a,u,c){(function(e,t,n,r,o,i,a,u,c){this._hasCaughtError=!1,this._caughtError=null;var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this._caughtError=e,this._hasCaughtError=!0}}).apply(d,arguments)},invokeGuardedCallbackAndCatchFirstError:function(e,t,n,r,o,i,a,u,c){if(d.invokeGuardedCallback.apply(this,arguments),d.hasCaughtError()){var s=d.clearCaughtError();d._hasRethrowError||(d._hasRethrowError=!0,d._rethrowError=s)}},rethrowCaughtError:function(){return function(){if(d._hasRethrowError){var e=d._rethrowError;throw d._rethrowError=null,d._hasRethrowError=!1,e}}.apply(d,arguments)},hasCaughtError:function(){return d._hasCaughtError},clearCaughtError:function(){if(d._hasCaughtError){var e=d._caughtError;return d._caughtError=null,d._hasCaughtError=!1,e}p("198")}};var h=null,v={};function y(){if(h)for(var e in v){var t=v[e],n=h.indexOf(e);if(-1<n||p("96",e),!b[n])for(var r in t.extractEvents||p("97",e),b[n]=t,n=t.eventTypes){var o=void 0,i=n[r],a=t,u=r;m.hasOwnProperty(u)&&p("99",u),m[u]=i;var c=i.phasedRegistrationNames;if(c){for(o in c)c.hasOwnProperty(o)&&g(c[o],a,u);o=!0}else i.registrationName?(g(i.registrationName,a,u),o=!0):o=!1;o||p("98",r,e)}}}function g(e,t,n){x[e]&&p("100",e),x[e]=t,_[e]=t.eventTypes[n].dependencies}var b=[],m={},x={},_={};function w(e){h&&p("101"),h=Array.prototype.slice.call(e),y()}function O(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];v.hasOwnProperty(t)&&v[t]===r||(v[t]&&p("102",t),v[t]=r,n=!0)}n&&y()}var S=Object.freeze({plugins:b,eventNameDispatchConfigs:m,registrationNameModules:x,registrationNameDependencies:_,possibleRegistrationNames:null,injectEventPluginOrder:w,injectEventPluginsByName:O}),E=null,k=null,T=null;function C(e,t,n,r){t=e.type||"unknown-event",e.currentTarget=T(r),d.invokeGuardedCallbackAndCatchFirstError(t,n,void 0,e),e.currentTarget=null}function j(e,t){return null==t&&p("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function P(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var A=null;function M(e,t){if(e){var n=e._dispatchListeners,r=e._dispatchInstances;if(Array.isArray(n))for(var o=0;o<n.length&&!e.isPropagationStopped();o++)C(e,t,n[o],r[o]);else n&&C(e,t,n,r);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function D(e){return M(e,!0)}function B(e){return M(e,!1)}var N={injectEventPluginOrder:w,injectEventPluginsByName:O};function L(e,t){var n=e.stateNode;if(!n)return null;var r=E(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&p("231",t,typeof n),n)}function I(e,t){null!==e&&(A=j(A,e)),e=A,A=null,e&&(P(e,t?D:B),A&&p("95"),d.rethrowCaughtError())}function R(e,t,n,r){for(var o=null,i=0;i<b.length;i++){var a=b[i];a&&(a=a.extractEvents(e,t,n,r))&&(o=j(o,a))}I(o,!1)}var U=Object.freeze({injection:N,getListener:L,runEventsInBatch:I,runExtractedEventsInBatch:R}),z=Math.random().toString(36).slice(2),F="__reactInternalInstance$"+z,X="__reactEventHandlers$"+z;function G(e){if(e[F])return e[F];for(;!e[F];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[F]).tag||6===e.tag?e:null}function H(e){if(5===e.tag||6===e.tag)return e.stateNode;p("33")}function W(e){return e[X]||null}var q=Object.freeze({precacheFiberNode:function(e,t){t[F]=e},getClosestInstanceFromNode:G,getInstanceFromNode:function(e){return!(e=e[F])||5!==e.tag&&6!==e.tag?null:e},getNodeFromInstance:H,getFiberCurrentPropsFromNode:W,updateFiberProps:function(e,t){e[X]=t}});function V(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function K(e,t,n){for(var r=[];e;)r.push(e),e=V(e);for(e=r.length;0<e--;)t(r[e],"captured",n);for(e=0;e<r.length;e++)t(r[e],"bubbled",n)}function Z(e,t,n){(t=L(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=j(n._dispatchListeners,t),n._dispatchInstances=j(n._dispatchInstances,e))}function Y(e){e&&e.dispatchConfig.phasedRegistrationNames&&K(e._targetInst,Z,e)}function $(e){if(e&&e.dispatchConfig.phasedRegistrationNames){var t=e._targetInst;K(t=t?V(t):null,Z,e)}}function Q(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=L(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=j(n._dispatchListeners,t),n._dispatchInstances=j(n._dispatchInstances,e))}function J(e){e&&e.dispatchConfig.registrationName&&Q(e._targetInst,null,e)}function ee(e){P(e,Y)}function te(e,t,n,r){if(n&&r)e:{for(var o=n,i=r,a=0,u=o;u;u=V(u))a++;u=0;for(var c=i;c;c=V(c))u++;for(;0<a-u;)o=V(o),a--;for(;0<u-a;)i=V(i),u--;for(;a--;){if(o===i||o===i.alternate)break e;o=V(o),i=V(i)}o=null}else o=null;for(i=o,o=[];n&&n!==i&&(null===(a=n.alternate)||a!==i);)o.push(n),n=V(n);for(n=[];r&&r!==i&&(null===(a=r.alternate)||a!==i);)n.push(r),r=V(r);for(r=0;r<o.length;r++)Q(o[r],"bubbled",e);for(e=n.length;0<e--;)Q(n[e],"captured",t)}var ne=Object.freeze({accumulateTwoPhaseDispatches:ee,accumulateTwoPhaseDispatchesSkipTarget:function(e){P(e,$)},accumulateEnterLeaveDispatches:te,accumulateDirectDispatches:function(e){P(e,J)}}),re=null;function oe(){return!re&&i.canUseDOM&&(re="textContent"in document.documentElement?"textContent":"innerText"),re}var ie={_root:null,_startText:null,_fallbackText:null};function ae(){if(ie._fallbackText)return ie._fallbackText;var e,t,n=ie._startText,r=n.length,o=ue(),i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return ie._fallbackText=o.slice(e,1<t?1-t:void 0),ie._fallbackText}function ue(){return"value"in ie._root?ie._root.value:ie._root[oe()]}var ce="dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances".split(" "),se={type:null,target:null,currentTarget:u.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};function le(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?u.thatReturnsTrue:u.thatReturnsFalse,this.isPropagationStopped=u.thatReturnsFalse,this}function fe(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function pe(e){e instanceof this||p("223"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function de(e){e.eventPool=[],e.getPooled=fe,e.release=pe}a(le.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=u.thatReturnsTrue)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=u.thatReturnsTrue)},persist:function(){this.isPersistent=u.thatReturnsTrue},isPersistent:u.thatReturnsFalse,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;for(t=0;t<ce.length;t++)this[ce[t]]=null}}),le.Interface=se,le.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var o=new t;return a(o,n.prototype),n.prototype=o,n.prototype.constructor=n,n.Interface=a({},r.Interface,e),n.extend=r.extend,de(n),n},de(le);var he=le.extend({data:null}),ve=le.extend({data:null}),ye=[9,13,27,32],ge=i.canUseDOM&&"CompositionEvent"in window,be=null;i.canUseDOM&&"documentMode"in document&&(be=document.documentMode);var me=i.canUseDOM&&"TextEvent"in window&&!be,xe=i.canUseDOM&&(!ge||be&&8<be&&11>=be),_e=String.fromCharCode(32),we={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["topCompositionEnd","topKeyPress","topTextInput","topPaste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"topBlur topCompositionEnd topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"topBlur topCompositionStart topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"topBlur topCompositionUpdate topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")}},Oe=!1;function Se(e,t){switch(e){case"topKeyUp":return-1!==ye.indexOf(t.keyCode);case"topKeyDown":return 229!==t.keyCode;case"topKeyPress":case"topMouseDown":case"topBlur":return!0;default:return!1}}function Ee(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var ke=!1;var Te={eventTypes:we,extractEvents:function(e,t,n,r){var o=void 0,i=void 0;if(ge)e:{switch(e){case"topCompositionStart":o=we.compositionStart;break e;case"topCompositionEnd":o=we.compositionEnd;break e;case"topCompositionUpdate":o=we.compositionUpdate;break e}o=void 0}else ke?Se(e,n)&&(o=we.compositionEnd):"topKeyDown"===e&&229===n.keyCode&&(o=we.compositionStart);return o?(xe&&(ke||o!==we.compositionStart?o===we.compositionEnd&&ke&&(i=ae()):(ie._root=r,ie._startText=ue(),ke=!0)),o=he.getPooled(o,t,n,r),i?o.data=i:null!==(i=Ee(n))&&(o.data=i),ee(o),i=o):i=null,(e=me?function(e,t){switch(e){case"topCompositionEnd":return Ee(t);case"topKeyPress":return 32!==t.which?null:(Oe=!0,_e);case"topTextInput":return(e=t.data)===_e&&Oe?null:e;default:return null}}(e,n):function(e,t){if(ke)return"topCompositionEnd"===e||!ge&&Se(e,t)?(e=ae(),ie._root=null,ie._startText=null,ie._fallbackText=null,ke=!1,e):null;switch(e){case"topPaste":return null;case"topKeyPress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"topCompositionEnd":return xe?null:t.data;default:return null}}(e,n))?((t=ve.getPooled(we.beforeInput,t,n,r)).data=e,ee(t)):t=null,null===i?t:null===t?i:[i,t]}},Ce=null,je={injectFiberControlledHostComponent:function(e){Ce=e}},Pe=null,Ae=null;function Me(e){if(e=k(e)){Ce&&"function"==typeof Ce.restoreControlledState||p("194");var t=E(e.stateNode);Ce.restoreControlledState(e.stateNode,e.type,t)}}function De(e){Pe?Ae?Ae.push(e):Ae=[e]:Pe=e}function Be(){return null!==Pe||null!==Ae}function Ne(){if(Pe){var e=Pe,t=Ae;if(Ae=Pe=null,Me(e),t)for(e=0;e<t.length;e++)Me(t[e])}}var Le=Object.freeze({injection:je,enqueueStateRestore:De,needsStateRestore:Be,restoreStateIfNeeded:Ne});function Ie(e,t){return e(t)}function Re(e,t,n){return e(t,n)}function Ue(){}var ze=!1;function Fe(e,t){if(ze)return e(t);ze=!0;try{return Ie(e,t)}finally{ze=!1,Be()&&(Ue(),Ne())}}var Xe={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Ge(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Xe[e.type]:"textarea"===t}function He(e){return(e=e.target||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function We(e,t){return!(!i.canUseDOM||t&&!("addEventListener"in document))&&((t=(e="on"+e)in document)||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t)}function qe(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Ve(e){e._valueTracker||(e._valueTracker=function(e){var t=qe(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&"function"==typeof n.get&&"function"==typeof n.set)return Object.defineProperty(e,t,{configurable:!0,get:function(){return n.get.call(this)},set:function(e){r=""+e,n.set.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}(e))}function Ke(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=qe(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var Ze=o.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,Ye="function"==typeof Symbol&&Symbol.for,$e=Ye?Symbol.for("react.element"):60103,Qe=Ye?Symbol.for("react.call"):60104,Je=Ye?Symbol.for("react.return"):60105,et=Ye?Symbol.for("react.portal"):60106,tt=Ye?Symbol.for("react.fragment"):60107,nt=Ye?Symbol.for("react.strict_mode"):60108,rt=Ye?Symbol.for("react.provider"):60109,ot=Ye?Symbol.for("react.context"):60110,it=Ye?Symbol.for("react.async_mode"):60111,at=Ye?Symbol.for("react.forward_ref"):60112,ut="function"==typeof Symbol&&Symbol.iterator;function ct(e){return null===e||void 0===e?null:"function"==typeof(e=ut&&e[ut]||e["@@iterator"])?e:null}function st(e){if("function"==typeof(e=e.type))return e.displayName||e.name;if("string"==typeof e)return e;switch(e){case tt:return"ReactFragment";case et:return"ReactPortal";case Qe:return"ReactCall";case Je:return"ReactReturn"}if("object"==typeof e&&null!==e)switch(e.$$typeof){case at:return""!==(e=e.render.displayName||e.render.name||"")?"ForwardRef("+e+")":"ForwardRef"}return null}function lt(e){var t="";do{e:switch(e.tag){case 0:case 1:case 2:case 5:var n=e._debugOwner,r=e._debugSource,o=st(e),i=null;n&&(i=st(n)),n=r,o="\n    in "+(o||"Unknown")+(n?" (at "+n.fileName.replace(/^.*[\\\/]/,"")+":"+n.lineNumber+")":i?" (created by "+i+")":"");break e;default:o=""}t+=o,e=e.return}while(e);return t}var ft=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,pt={},dt={};function ht(e,t,n,r,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t}var vt={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){vt[e]=new ht(e,0,!1,e,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];vt[t]=new ht(t,1,!1,e[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){vt[e]=new ht(e,2,!1,e.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","preserveAlpha"].forEach(function(e){vt[e]=new ht(e,2,!1,e,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){vt[e]=new ht(e,3,!1,e.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(e){vt[e]=new ht(e,3,!0,e.toLowerCase(),null)}),["capture","download"].forEach(function(e){vt[e]=new ht(e,4,!1,e.toLowerCase(),null)}),["cols","rows","size","span"].forEach(function(e){vt[e]=new ht(e,6,!1,e.toLowerCase(),null)}),["rowSpan","start"].forEach(function(e){vt[e]=new ht(e,5,!1,e.toLowerCase(),null)});var yt=/[\-:]([a-z])/g;function gt(e){return e[1].toUpperCase()}function bt(e,t,n,r){var o=vt.hasOwnProperty(t)?vt[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null===t||void 0===t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!dt.hasOwnProperty(e)||!pt.hasOwnProperty(e)&&(ft.test(e)?dt[e]=!0:(pt[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function mt(e,t){var n=t.checked;return a({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function xt(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=Et(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function _t(e,t){null!=(t=t.checked)&&bt(e,"checked",t,!1)}function wt(e,t){_t(e,t);var n=Et(t.value);null!=n&&("number"===t.type?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n)),t.hasOwnProperty("value")?St(e,t.type,n):t.hasOwnProperty("defaultValue")&&St(e,t.type,Et(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Ot(e,t){(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue"))&&(""===e.value&&(e.value=""+e._wrapperState.initialValue),e.defaultValue=""+e._wrapperState.initialValue),""!==(t=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!e.defaultChecked,""!==t&&(e.name=t)}function St(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function Et(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(yt,gt);vt[t]=new ht(t,1,!1,e,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(yt,gt);vt[t]=new ht(t,1,!1,e,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(yt,gt);vt[t]=new ht(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")}),vt.tabIndex=new ht("tabIndex",1,!1,"tabindex",null);var kt={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"topBlur topChange topClick topFocus topInput topKeyDown topKeyUp topSelectionChange".split(" ")}};function Tt(e,t,n){return(e=le.getPooled(kt.change,e,t,n)).type="change",De(n),ee(e),e}var Ct=null,jt=null;function Pt(e){I(e,!1)}function At(e){if(Ke(H(e)))return e}function Mt(e,t){if("topChange"===e)return t}var Dt=!1;function Bt(){Ct&&(Ct.detachEvent("onpropertychange",Nt),jt=Ct=null)}function Nt(e){"value"===e.propertyName&&At(jt)&&Fe(Pt,e=Tt(jt,e,He(e)))}function Lt(e,t,n){"topFocus"===e?(Bt(),jt=n,(Ct=t).attachEvent("onpropertychange",Nt)):"topBlur"===e&&Bt()}function It(e){if("topSelectionChange"===e||"topKeyUp"===e||"topKeyDown"===e)return At(jt)}function Rt(e,t){if("topClick"===e)return At(t)}function Ut(e,t){if("topInput"===e||"topChange"===e)return At(t)}i.canUseDOM&&(Dt=We("input")&&(!document.documentMode||9<document.documentMode));var zt={eventTypes:kt,_isInputEventSupported:Dt,extractEvents:function(e,t,n,r){var o=t?H(t):window,i=void 0,a=void 0,u=o.nodeName&&o.nodeName.toLowerCase();if("select"===u||"input"===u&&"file"===o.type?i=Mt:Ge(o)?Dt?i=Ut:(i=It,a=Lt):(u=o.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(i=Rt),i&&(i=i(e,t)))return Tt(i,n,r);a&&a(e,o,t),"topBlur"===e&&null!=t&&(e=t._wrapperState||o._wrapperState)&&e.controlled&&"number"===o.type&&St(o,"number",o.value)}},Ft=le.extend({view:null,detail:null}),Xt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Gt(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Xt[e])&&!!t[e]}function Ht(){return Gt}var Wt=Ft.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Ht,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)}}),qt={mouseEnter:{registrationName:"onMouseEnter",dependencies:["topMouseOut","topMouseOver"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["topMouseOut","topMouseOver"]}},Vt={eventTypes:qt,extractEvents:function(e,t,n,r){if("topMouseOver"===e&&(n.relatedTarget||n.fromElement)||"topMouseOut"!==e&&"topMouseOver"!==e)return null;var o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window;if("topMouseOut"===e?(e=t,t=(t=n.relatedTarget||n.toElement)?G(t):null):e=null,e===t)return null;var i=null==e?o:H(e);o=null==t?o:H(t);var a=Wt.getPooled(qt.mouseLeave,e,n,r);return a.type="mouseleave",a.target=i,a.relatedTarget=o,(n=Wt.getPooled(qt.mouseEnter,t,n,r)).type="mouseenter",n.target=o,n.relatedTarget=i,te(a,n,e,t),[a,n]}};function Kt(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function Zt(e){return!!(e=e._reactInternalFiber)&&2===Kt(e)}function Yt(e){2!==Kt(e)&&p("188")}function $t(e){var t=e.alternate;if(!t)return 3===(t=Kt(e))&&p("188"),1===t?null:e;for(var n=e,r=t;;){var o=n.return,i=o?o.alternate:null;if(!o||!i)break;if(o.child===i.child){for(var a=o.child;a;){if(a===n)return Yt(o),e;if(a===r)return Yt(o),t;a=a.sibling}p("188")}if(n.return!==r.return)n=o,r=i;else{a=!1;for(var u=o.child;u;){if(u===n){a=!0,n=o,r=i;break}if(u===r){a=!0,r=o,n=i;break}u=u.sibling}if(!a){for(u=i.child;u;){if(u===n){a=!0,n=i,r=o;break}if(u===r){a=!0,r=i,n=o;break}u=u.sibling}a||p("189")}}n.alternate!==r&&p("190")}return 3!==n.tag&&p("188"),n.stateNode.current===n?e:t}function Qt(e){if(!(e=$t(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var Jt=le.extend({animationName:null,elapsedTime:null,pseudoElement:null}),en=le.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),tn=Ft.extend({relatedTarget:null});function nn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var rn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},on={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},an=Ft.extend({key:function(e){if(e.key){var t=rn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=nn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?on[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Ht,charCode:function(e){return"keypress"===e.type?nn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?nn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),un=Wt.extend({dataTransfer:null}),cn=Ft.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Ht}),sn=le.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),ln=Wt.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),fn={},pn={};function dn(e,t){var n=e[0].toUpperCase()+e.slice(1),r="on"+n;t={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[n="top"+n],isInteractive:t},fn[e]=t,pn[n]=t}"blur cancel click close contextMenu copy cut doubleClick dragEnd dragStart drop focus input invalid keyDown keyPress keyUp mouseDown mouseUp paste pause play rateChange reset seeked submit touchCancel touchEnd touchStart volumeChange".split(" ").forEach(function(e){dn(e,!0)}),"abort animationEnd animationIteration animationStart canPlay canPlayThrough drag dragEnter dragExit dragLeave dragOver durationChange emptied encrypted ended error load loadedData loadedMetadata loadStart mouseMove mouseOut mouseOver playing progress scroll seeking stalled suspend timeUpdate toggle touchMove transitionEnd waiting wheel".split(" ").forEach(function(e){dn(e,!1)});var hn={eventTypes:fn,isInteractiveTopLevelEventType:function(e){return void 0!==(e=pn[e])&&!0===e.isInteractive},extractEvents:function(e,t,n,r){var o=pn[e];if(!o)return null;switch(e){case"topKeyPress":if(0===nn(n))return null;case"topKeyDown":case"topKeyUp":e=an;break;case"topBlur":case"topFocus":e=tn;break;case"topClick":if(2===n.button)return null;case"topDoubleClick":case"topMouseDown":case"topMouseMove":case"topMouseUp":case"topMouseOut":case"topMouseOver":case"topContextMenu":e=Wt;break;case"topDrag":case"topDragEnd":case"topDragEnter":case"topDragExit":case"topDragLeave":case"topDragOver":case"topDragStart":case"topDrop":e=un;break;case"topTouchCancel":case"topTouchEnd":case"topTouchMove":case"topTouchStart":e=cn;break;case"topAnimationEnd":case"topAnimationIteration":case"topAnimationStart":e=Jt;break;case"topTransitionEnd":e=sn;break;case"topScroll":e=Ft;break;case"topWheel":e=ln;break;case"topCopy":case"topCut":case"topPaste":e=en;break;default:e=le}return ee(t=e.getPooled(o,t,n,r)),t}},vn=hn.isInteractiveTopLevelEventType,yn=[];function gn(e){var t=e.targetInst;do{if(!t){e.ancestors.push(t);break}var n;for(n=t;n.return;)n=n.return;if(!(n=3!==n.tag?null:n.stateNode.containerInfo))break;e.ancestors.push(t),t=G(n)}while(t);for(n=0;n<e.ancestors.length;n++)t=e.ancestors[n],R(e.topLevelType,t,e.nativeEvent,He(e.nativeEvent))}var bn=!0;function mn(e){bn=!!e}function xn(e,t,n){if(!n)return null;e=(vn(e)?wn:On).bind(null,e),n.addEventListener(t,e,!1)}function _n(e,t,n){if(!n)return null;e=(vn(e)?wn:On).bind(null,e),n.addEventListener(t,e,!0)}function wn(e,t){Re(On,e,t)}function On(e,t){if(bn){var n=He(t);if(null!==(n=G(n))&&"number"==typeof n.tag&&2!==Kt(n)&&(n=null),yn.length){var r=yn.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{Fe(gn,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>yn.length&&yn.push(e)}}}var Sn=Object.freeze({get _enabled(){return bn},setEnabled:mn,isEnabled:function(){return bn},trapBubbledEvent:xn,trapCapturedEvent:_n,dispatchEvent:On});function En(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n["ms"+e]="MS"+t,n["O"+e]="o"+t.toLowerCase(),n}var kn={animationend:En("Animation","AnimationEnd"),animationiteration:En("Animation","AnimationIteration"),animationstart:En("Animation","AnimationStart"),transitionend:En("Transition","TransitionEnd")},Tn={},Cn={};function jn(e){if(Tn[e])return Tn[e];if(!kn[e])return e;var t,n=kn[e];for(t in n)if(n.hasOwnProperty(t)&&t in Cn)return Tn[e]=n[t];return e}i.canUseDOM&&(Cn=document.createElement("div").style,"AnimationEvent"in window||(delete kn.animationend.animation,delete kn.animationiteration.animation,delete kn.animationstart.animation),"TransitionEvent"in window||delete kn.transitionend.transition);var Pn={topAnimationEnd:jn("animationend"),topAnimationIteration:jn("animationiteration"),topAnimationStart:jn("animationstart"),topBlur:"blur",topCancel:"cancel",topChange:"change",topClick:"click",topClose:"close",topCompositionEnd:"compositionend",topCompositionStart:"compositionstart",topCompositionUpdate:"compositionupdate",topContextMenu:"contextmenu",topCopy:"copy",topCut:"cut",topDoubleClick:"dblclick",topDrag:"drag",topDragEnd:"dragend",topDragEnter:"dragenter",topDragExit:"dragexit",topDragLeave:"dragleave",topDragOver:"dragover",topDragStart:"dragstart",topDrop:"drop",topFocus:"focus",topInput:"input",topKeyDown:"keydown",topKeyPress:"keypress",topKeyUp:"keyup",topLoad:"load",topLoadStart:"loadstart",topMouseDown:"mousedown",topMouseMove:"mousemove",topMouseOut:"mouseout",topMouseOver:"mouseover",topMouseUp:"mouseup",topPaste:"paste",topScroll:"scroll",topSelectionChange:"selectionchange",topTextInput:"textInput",topToggle:"toggle",topTouchCancel:"touchcancel",topTouchEnd:"touchend",topTouchMove:"touchmove",topTouchStart:"touchstart",topTransitionEnd:jn("transitionend"),topWheel:"wheel"},An={topAbort:"abort",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topLoadedData:"loadeddata",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topSeeked:"seeked",topSeeking:"seeking",topStalled:"stalled",topSuspend:"suspend",topTimeUpdate:"timeupdate",topVolumeChange:"volumechange",topWaiting:"waiting"},Mn={},Dn=0,Bn="_reactListenersID"+(""+Math.random()).slice(2);function Nn(e){return Object.prototype.hasOwnProperty.call(e,Bn)||(e[Bn]=Dn++,Mn[e[Bn]]={}),Mn[e[Bn]]}function Ln(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function In(e,t){var n,r=Ln(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Ln(r)}}function Rn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&"text"===e.type||"textarea"===t||"true"===e.contentEditable)}var Un=i.canUseDOM&&"documentMode"in document&&11>=document.documentMode,zn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"topBlur topContextMenu topFocus topKeyDown topKeyUp topMouseDown topMouseUp topSelectionChange".split(" ")}},Fn=null,Xn=null,Gn=null,Hn=!1;function Wn(e,t){if(Hn||null==Fn||Fn!==c())return null;var n=Fn;return"selectionStart"in n&&Rn(n)?n={start:n.selectionStart,end:n.selectionEnd}:window.getSelection?n={anchorNode:(n=window.getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset}:n=void 0,Gn&&s(Gn,n)?null:(Gn=n,(e=le.getPooled(zn.select,Xn,e,t)).type="select",e.target=Fn,ee(e),e)}var qn={eventTypes:zn,extractEvents:function(e,t,n,r){var o,i=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!i)){e:{i=Nn(i),o=_.onSelect;for(var a=0;a<o.length;a++){var u=o[a];if(!i.hasOwnProperty(u)||!i[u]){i=!1;break e}}i=!0}o=!i}if(o)return null;switch(i=t?H(t):window,e){case"topFocus":(Ge(i)||"true"===i.contentEditable)&&(Fn=i,Xn=t,Gn=null);break;case"topBlur":Gn=Xn=Fn=null;break;case"topMouseDown":Hn=!0;break;case"topContextMenu":case"topMouseUp":return Hn=!1,Wn(n,r);case"topSelectionChange":if(Un)break;case"topKeyDown":case"topKeyUp":return Wn(n,r)}return null}};function Vn(e,t,n,r){this.tag=e,this.key=n,this.stateNode=this.type=null,this.sibling=this.child=this.return=null,this.index=0,this.ref=null,this.pendingProps=t,this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.expirationTime=0,this.alternate=null}function Kn(e,t,n){var r=e.alternate;return null===r?((r=new Vn(e.tag,t,e.key,e.mode)).type=e.type,r.stateNode=e.stateNode,r.alternate=e,e.alternate=r):(r.pendingProps=t,r.effectTag=0,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null),r.expirationTime=n,r.child=e.child,r.memoizedProps=e.memoizedProps,r.memoizedState=e.memoizedState,r.updateQueue=e.updateQueue,r.sibling=e.sibling,r.index=e.index,r.ref=e.ref,r}function Zn(e,t,n){var r=e.type,o=e.key;e=e.props;var i=void 0;if("function"==typeof r)i=r.prototype&&r.prototype.isReactComponent?2:0;else if("string"==typeof r)i=5;else switch(r){case tt:return Yn(e.children,t,n,o);case it:i=11,t|=3;break;case nt:i=11,t|=2;break;case Qe:i=7;break;case Je:i=9;break;default:if("object"==typeof r&&null!==r)switch(r.$$typeof){case rt:i=13;break;case ot:i=12;break;case at:i=14;break;default:if("number"==typeof r.tag)return(t=r).pendingProps=e,t.expirationTime=n,t;p("130",null==r?r:typeof r,"")}else p("130",null==r?r:typeof r,"")}return(t=new Vn(i,e,o,t)).type=r,t.expirationTime=n,t}function Yn(e,t,n,r){return(e=new Vn(10,e,r,t)).expirationTime=n,e}function $n(e,t,n){return(e=new Vn(6,e,null,t)).expirationTime=n,e}function Qn(e,t,n){return(t=new Vn(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}N.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),E=q.getFiberCurrentPropsFromNode,k=q.getInstanceFromNode,T=q.getNodeFromInstance,N.injectEventPluginsByName({SimpleEventPlugin:hn,EnterLeaveEventPlugin:Vt,ChangeEventPlugin:zt,SelectEventPlugin:qn,BeforeInputEventPlugin:Te});var Jn=null,er=null;function tr(e){return function(t){try{return e(t)}catch(e){}}}function nr(e){"function"==typeof Jn&&Jn(e)}function rr(e){"function"==typeof er&&er(e)}function or(e){return{baseState:e,expirationTime:0,first:null,last:null,callbackList:null,hasForceUpdate:!1,isInitialized:!1,capturedValues:null}}function ir(e,t){null===e.last?e.first=e.last=t:(e.last.next=t,e.last=t),(0===e.expirationTime||e.expirationTime>t.expirationTime)&&(e.expirationTime=t.expirationTime)}new Set;var ar=void 0,ur=void 0;function cr(e){ar=ur=null;var t=e.alternate,n=e.updateQueue;null===n&&(n=e.updateQueue=or(null)),null!==t?null===(e=t.updateQueue)&&(e=t.updateQueue=or(null)):e=null,ar=n,ur=e!==n?e:null}function sr(e,t){cr(e),e=ar;var n=ur;null===n?ir(e,t):null===e.last||null===n.last?(ir(e,t),ir(n,t)):(ir(e,t),n.last=t)}function lr(e,t,n,r){return"function"==typeof(e=e.partialState)?e.call(t,n,r):e}function fr(e,t,n,r,o,i){null!==e&&e.updateQueue===n&&(n=t.updateQueue={baseState:n.baseState,expirationTime:n.expirationTime,first:n.first,last:n.last,isInitialized:n.isInitialized,capturedValues:n.capturedValues,callbackList:null,hasForceUpdate:!1}),n.expirationTime=0,n.isInitialized?e=n.baseState:(e=n.baseState=t.memoizedState,n.isInitialized=!0);for(var u=!0,c=n.first,s=!1;null!==c;){var l=c.expirationTime;if(l>i){var f=n.expirationTime;(0===f||f>l)&&(n.expirationTime=l),s||(s=!0,n.baseState=e)}else s||(n.first=c.next,null===n.first&&(n.last=null)),c.isReplace?(e=lr(c,r,e,o),u=!0):(l=lr(c,r,e,o))&&(e=u?a({},e,l):a(e,l),u=!1),c.isForced&&(n.hasForceUpdate=!0),null!==c.callback&&(null===(l=n.callbackList)&&(l=n.callbackList=[]),l.push(c)),null!==c.capturedValue&&(null===(l=n.capturedValues)?n.capturedValues=[c.capturedValue]:l.push(c.capturedValue));c=c.next}return null!==n.callbackList?t.effectTag|=32:null!==n.first||n.hasForceUpdate||null!==n.capturedValues||(t.updateQueue=null),s||(n.baseState=e),e}function pr(e,t){var n=e.callbackList;if(null!==n)for(e.callbackList=null,e=0;e<n.length;e++){var r=n[e],o=r.callback;r.callback=null,"function"!=typeof o&&p("191",o),o.call(t)}}var dr=Array.isArray;function hr(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){var r=void 0;(n=n._owner)&&(2!==n.tag&&p("110"),r=n.stateNode),r||p("147",e);var o=""+e;return null!==t&&null!==t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs===f?r.refs={}:r.refs;null===e?delete t[o]:t[o]=e})._stringRef=o,t)}"string"!=typeof e&&p("148"),n._owner||p("254",e)}return e}function vr(e,t){"textarea"!==e.type&&p("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function yr(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t,n){return(e=Kn(e,t,n)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function a(t){return e&&null===t.alternate&&(t.effectTag=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=$n(n,e.mode,r)).return=e,t):((t=o(t,n,r)).return=e,t)}function c(e,t,n,r){return null!==t&&t.type===n.type?((r=o(t,n.props,r)).ref=hr(e,t,n),r.return=e,r):((r=Zn(n,e.mode,r)).ref=hr(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Qn(n,e.mode,r)).return=e,t):((t=o(t,n.children||[],r)).return=e,t)}function l(e,t,n,r,i){return null===t||10!==t.tag?((t=Yn(n,e.mode,r,i)).return=e,t):((t=o(t,n,r)).return=e,t)}function f(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=$n(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case $e:return(n=Zn(t,e.mode,n)).ref=hr(e,null,t),n.return=e,n;case et:return(t=Qn(t,e.mode,n)).return=e,t}if(dr(t)||ct(t))return(t=Yn(t,e.mode,n,null)).return=e,t;vr(e,t)}return null}function d(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case $e:return n.key===o?n.type===tt?l(e,t,n.props.children,r,o):c(e,t,n,r):null;case et:return n.key===o?s(e,t,n,r):null}if(dr(n)||ct(n))return null!==o?null:l(e,t,n,r,null);vr(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case $e:return e=e.get(null===r.key?n:r.key)||null,r.type===tt?l(t,e,r.props.children,o,r.key):c(t,e,r,o);case et:return s(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(dr(r)||ct(r))return l(t,e=e.get(n)||null,r,o,null);vr(t,r)}return null}function v(o,a,u,c){for(var s=null,l=null,p=a,v=a=0,y=null;null!==p&&v<u.length;v++){p.index>v?(y=p,p=null):y=p.sibling;var g=d(o,p,u[v],c);if(null===g){null===p&&(p=y);break}e&&p&&null===g.alternate&&t(o,p),a=i(g,a,v),null===l?s=g:l.sibling=g,l=g,p=y}if(v===u.length)return n(o,p),s;if(null===p){for(;v<u.length;v++)(p=f(o,u[v],c))&&(a=i(p,a,v),null===l?s=p:l.sibling=p,l=p);return s}for(p=r(o,p);v<u.length;v++)(y=h(p,o,v,u[v],c))&&(e&&null!==y.alternate&&p.delete(null===y.key?v:y.key),a=i(y,a,v),null===l?s=y:l.sibling=y,l=y);return e&&p.forEach(function(e){return t(o,e)}),s}function y(o,a,u,c){var s=ct(u);"function"!=typeof s&&p("150"),null==(u=s.call(u))&&p("151");for(var l=s=null,v=a,y=a=0,g=null,b=u.next();null!==v&&!b.done;y++,b=u.next()){v.index>y?(g=v,v=null):g=v.sibling;var m=d(o,v,b.value,c);if(null===m){v||(v=g);break}e&&v&&null===m.alternate&&t(o,v),a=i(m,a,y),null===l?s=m:l.sibling=m,l=m,v=g}if(b.done)return n(o,v),s;if(null===v){for(;!b.done;y++,b=u.next())null!==(b=f(o,b.value,c))&&(a=i(b,a,y),null===l?s=b:l.sibling=b,l=b);return s}for(v=r(o,v);!b.done;y++,b=u.next())null!==(b=h(v,o,y,b.value,c))&&(e&&null!==b.alternate&&v.delete(null===b.key?y:b.key),a=i(b,a,y),null===l?s=b:l.sibling=b,l=b);return e&&v.forEach(function(e){return t(o,e)}),s}return function(e,r,i,u){"object"==typeof i&&null!==i&&i.type===tt&&null===i.key&&(i=i.props.children);var c="object"==typeof i&&null!==i;if(c)switch(i.$$typeof){case $e:e:{var s=i.key;for(c=r;null!==c;){if(c.key===s){if(10===c.tag?i.type===tt:c.type===i.type){n(e,c.sibling),(r=o(c,i.type===tt?i.props.children:i.props,u)).ref=hr(e,c,i),r.return=e,e=r;break e}n(e,c);break}t(e,c),c=c.sibling}i.type===tt?((r=Yn(i.props.children,e.mode,u,i.key)).return=e,e=r):((u=Zn(i,e.mode,u)).ref=hr(e,r,i),u.return=e,e=u)}return a(e);case et:e:{for(c=i.key;null!==r;){if(r.key===c){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[],u)).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Qn(i,e.mode,u)).return=e,e=r}return a(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i,u)).return=e,e=r):(n(e,r),(r=$n(i,e.mode,u)).return=e,e=r),a(e);if(dr(i))return v(e,r,i,u);if(ct(i))return y(e,r,i,u);if(c&&vr(e,i),void 0===i)switch(e.tag){case 2:case 1:p("152",(u=e.type).displayName||u.name||"Component")}return n(e,r)}}var gr=yr(!0),br=yr(!1);function mr(e,t,n,r,o,i,u){function c(e,t,n){l(e,t,n,t.expirationTime)}function l(e,t,n,r){t.child=null===e?br(t,null,n,r):gr(t,e.child,n,r)}function d(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function h(e,t,n,r,o,i){if(d(e,t),!n&&!o)return r&&C(t,!1),g(e,t);n=t.stateNode,Ze.current=t;var a=o?null:n.render();return t.effectTag|=1,o&&(l(e,t,null,i),t.child=null),l(e,t,a,i),t.memoizedState=n.state,t.memoizedProps=n.props,r&&C(t,!0),t.child}function v(e){var t=e.stateNode;t.pendingContext?T(e,t.pendingContext,t.pendingContext!==t.context):t.context&&T(e,t.context,!1),_(e,t.containerInfo)}function y(e,t,n,r){var o=e.child;for(null!==o&&(o.return=e);null!==o;){switch(o.tag){case 12:var i=0|o.stateNode;if(o.type===t&&0!=(i&n)){for(i=o;null!==i;){var a=i.alternate;if(0===i.expirationTime||i.expirationTime>r)i.expirationTime=r,null!==a&&(0===a.expirationTime||a.expirationTime>r)&&(a.expirationTime=r);else{if(null===a||!(0===a.expirationTime||a.expirationTime>r))break;a.expirationTime=r}i=i.return}i=null}else i=o.child;break;case 13:i=o.type===e.type?null:o.child;break;default:i=o.child}if(null!==i)i.return=o;else for(i=o;null!==i;){if(i===e){i=null;break}if(null!==(o=i.sibling)){i=o;break}i=i.return}o=i}}function g(e,t){if(null!==e&&t.child!==e.child&&p("153"),null!==t.child){var n=Kn(e=t.child,e.pendingProps,e.expirationTime);for(t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Kn(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}var b=e.shouldSetTextContent,m=e.shouldDeprioritizeSubtree,x=t.pushHostContext,_=t.pushHostContainer,w=r.pushProvider,O=n.getMaskedContext,S=n.getUnmaskedContext,E=n.hasContextChanged,k=n.pushContextProvider,T=n.pushTopLevelContextObject,C=n.invalidateContextProvider,j=o.enterHydrationState,P=o.resetHydrationState,A=o.tryToClaimNextHydratableInstance,M=(e=function(e,t,n,r,o){function i(e,t,n,r,o,i){if(null===t||null!==e.updateQueue&&e.updateQueue.hasForceUpdate)return!0;var a=e.stateNode;return e=e.type,"function"==typeof a.shouldComponentUpdate?a.shouldComponentUpdate(n,o,i):!(e.prototype&&e.prototype.isPureReactComponent&&s(t,n)&&s(r,o))}function u(e,t){t.updater=g,e.stateNode=t,t._reactInternalFiber=e}function c(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&g.enqueueReplaceState(t,t.state,null)}function l(e,t,n,r){if("function"==typeof(e=e.type).getDerivedStateFromProps)return e.getDerivedStateFromProps.call(null,n,r)}var p=e.cacheContext,d=e.getMaskedContext,h=e.getUnmaskedContext,v=e.isContextConsumer,y=e.hasContextChanged,g={isMounted:Zt,enqueueSetState:function(e,r,o){e=e._reactInternalFiber,o=void 0===o?null:o;var i=n(e);sr(e,{expirationTime:i,partialState:r,callback:o,isReplace:!1,isForced:!1,capturedValue:null,next:null}),t(e,i)},enqueueReplaceState:function(e,r,o){e=e._reactInternalFiber,o=void 0===o?null:o;var i=n(e);sr(e,{expirationTime:i,partialState:r,callback:o,isReplace:!0,isForced:!1,capturedValue:null,next:null}),t(e,i)},enqueueForceUpdate:function(e,r){e=e._reactInternalFiber,r=void 0===r?null:r;var o=n(e);sr(e,{expirationTime:o,partialState:null,callback:r,isReplace:!1,isForced:!0,capturedValue:null,next:null}),t(e,o)}};return{adoptClassInstance:u,callGetDerivedStateFromProps:l,constructClassInstance:function(e,t){var n=e.type,r=h(e),o=v(e),i=o?d(e,r):f,c=null!==(n=new n(t,i)).state&&void 0!==n.state?n.state:null;return u(e,n),e.memoizedState=c,null!==(t=l(e,0,t,c))&&void 0!==t&&(e.memoizedState=a({},e.memoizedState,t)),o&&p(e,r,i),n},mountClassInstance:function(e,t){var n=e.type,r=e.alternate,o=e.stateNode,i=e.pendingProps,a=h(e);o.props=i,o.state=e.memoizedState,o.refs=f,o.context=d(e,a),"function"==typeof n.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(n=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),n!==o.state&&g.enqueueReplaceState(o,o.state,null),null!==(n=e.updateQueue)&&(o.state=fr(r,e,n,o,i,t))),"function"==typeof o.componentDidMount&&(e.effectTag|=4)},resumeMountClassInstance:function(e,t){var n=e.type,u=e.stateNode;u.props=e.memoizedProps,u.state=e.memoizedState;var s=e.memoizedProps,f=e.pendingProps,p=u.context,v=h(e);v=d(e,v),(n="function"==typeof n.getDerivedStateFromProps||"function"==typeof u.getSnapshotBeforeUpdate)||"function"!=typeof u.UNSAFE_componentWillReceiveProps&&"function"!=typeof u.componentWillReceiveProps||(s!==f||p!==v)&&c(e,u,f,v),p=e.memoizedState,t=null!==e.updateQueue?fr(null,e,e.updateQueue,u,f,t):p;var g=void 0;if(s!==f&&(g=l(e,0,f,t)),null!==g&&void 0!==g){t=null===t||void 0===t?g:a({},t,g);var b=e.updateQueue;null!==b&&(b.baseState=a({},b.baseState,g))}return s!==f||p!==t||y()||null!==e.updateQueue&&e.updateQueue.hasForceUpdate?((s=i(e,s,f,p,t,v))?(n||"function"!=typeof u.UNSAFE_componentWillMount&&"function"!=typeof u.componentWillMount||("function"==typeof u.componentWillMount&&u.componentWillMount(),"function"==typeof u.UNSAFE_componentWillMount&&u.UNSAFE_componentWillMount()),"function"==typeof u.componentDidMount&&(e.effectTag|=4)):("function"==typeof u.componentDidMount&&(e.effectTag|=4),r(e,f),o(e,t)),u.props=f,u.state=t,u.context=v,s):("function"==typeof u.componentDidMount&&(e.effectTag|=4),!1)},updateClassInstance:function(e,t,n){var u=t.type,s=t.stateNode;s.props=t.memoizedProps,s.state=t.memoizedState;var f=t.memoizedProps,p=t.pendingProps,v=s.context,g=h(t);g=d(t,g),(u="function"==typeof u.getDerivedStateFromProps||"function"==typeof s.getSnapshotBeforeUpdate)||"function"!=typeof s.UNSAFE_componentWillReceiveProps&&"function"!=typeof s.componentWillReceiveProps||(f!==p||v!==g)&&c(t,s,p,g),v=t.memoizedState,n=null!==t.updateQueue?fr(e,t,t.updateQueue,s,p,n):v;var b=void 0;if(f!==p&&(b=l(t,0,p,n)),null!==b&&void 0!==b){n=null===n||void 0===n?b:a({},n,b);var m=t.updateQueue;null!==m&&(m.baseState=a({},m.baseState,b))}return f!==p||v!==n||y()||null!==t.updateQueue&&t.updateQueue.hasForceUpdate?((b=i(t,f,p,v,n,g))?(u||"function"!=typeof s.UNSAFE_componentWillUpdate&&"function"!=typeof s.componentWillUpdate||("function"==typeof s.componentWillUpdate&&s.componentWillUpdate(p,n,g),"function"==typeof s.UNSAFE_componentWillUpdate&&s.UNSAFE_componentWillUpdate(p,n,g)),"function"==typeof s.componentDidUpdate&&(t.effectTag|=4),"function"==typeof s.getSnapshotBeforeUpdate&&(t.effectTag|=2048)):("function"!=typeof s.componentDidUpdate||f===e.memoizedProps&&v===e.memoizedState||(t.effectTag|=4),"function"!=typeof s.getSnapshotBeforeUpdate||f===e.memoizedProps&&v===e.memoizedState||(t.effectTag|=2048),r(t,p),o(t,n)),s.props=p,s.state=n,s.context=g,b):("function"!=typeof s.componentDidUpdate||f===e.memoizedProps&&v===e.memoizedState||(t.effectTag|=4),"function"!=typeof s.getSnapshotBeforeUpdate||f===e.memoizedProps&&v===e.memoizedState||(t.effectTag|=2048),!1)}}}(n,i,u,function(e,t){e.memoizedProps=t},function(e,t){e.memoizedState=t})).adoptClassInstance,D=e.callGetDerivedStateFromProps,B=e.constructClassInstance,N=e.mountClassInstance,L=e.resumeMountClassInstance,I=e.updateClassInstance;return{beginWork:function(e,t,n){if(0===t.expirationTime||t.expirationTime>n){switch(t.tag){case 3:v(t);break;case 2:k(t);break;case 4:_(t,t.stateNode.containerInfo);break;case 13:w(t)}return null}switch(t.tag){case 0:null!==e&&p("155");var r=t.type,o=t.pendingProps,i=S(t);return r=r(o,i=O(t,i)),t.effectTag|=1,"object"==typeof r&&null!==r&&"function"==typeof r.render&&void 0===r.$$typeof?(i=t.type,t.tag=2,t.memoizedState=null!==r.state&&void 0!==r.state?r.state:null,"function"==typeof i.getDerivedStateFromProps&&(null!==(o=D(t,r,o,t.memoizedState))&&void 0!==o&&(t.memoizedState=a({},t.memoizedState,o))),o=k(t),M(t,r),N(t,n),e=h(e,t,!0,o,!1,n)):(t.tag=1,c(e,t,r),t.memoizedProps=o,e=t.child),e;case 1:return o=t.type,n=t.pendingProps,E()||t.memoizedProps!==n?(r=S(t),o=o(n,r=O(t,r)),t.effectTag|=1,c(e,t,o),t.memoizedProps=n,e=t.child):e=g(e,t),e;case 2:o=k(t),null===e?null===t.stateNode?(B(t,t.pendingProps),N(t,n),r=!0):r=L(t,n):r=I(e,t,n),i=!1;var u=t.updateQueue;return null!==u&&null!==u.capturedValues&&(i=r=!0),h(e,t,r,o,i,n);case 3:e:if(v(t),r=t.updateQueue,null!==r){if(i=t.memoizedState,o=fr(e,t,r,null,null,n),t.memoizedState=o,null!==(r=t.updateQueue)&&null!==r.capturedValues)r=null;else{if(i===o){P(),e=g(e,t);break e}r=o.element}i=t.stateNode,(null===e||null===e.child)&&i.hydrate&&j(t)?(t.effectTag|=2,t.child=br(t,null,r,n)):(P(),c(e,t,r)),t.memoizedState=o,e=t.child}else P(),e=g(e,t);return e;case 5:return x(t),null===e&&A(t),o=t.type,u=t.memoizedProps,r=t.pendingProps,i=null!==e?e.memoizedProps:null,E()||u!==r||((u=1&t.mode&&m(o,r))&&(t.expirationTime=1073741823),u&&1073741823===n)?(u=r.children,b(o,r)?u=null:i&&b(o,i)&&(t.effectTag|=16),d(e,t),1073741823!==n&&1&t.mode&&m(o,r)?(t.expirationTime=1073741823,t.memoizedProps=r,e=null):(c(e,t,u),t.memoizedProps=r,e=t.child)):e=g(e,t),e;case 6:return null===e&&A(t),t.memoizedProps=t.pendingProps,null;case 8:t.tag=7;case 7:return o=t.pendingProps,E()||t.memoizedProps!==o||(o=t.memoizedProps),r=o.children,t.stateNode=null===e?br(t,t.stateNode,r,n):gr(t,e.stateNode,r,n),t.memoizedProps=o,t.stateNode;case 9:return null;case 4:return _(t,t.stateNode.containerInfo),o=t.pendingProps,E()||t.memoizedProps!==o?(null===e?t.child=gr(t,null,o,n):c(e,t,o),t.memoizedProps=o,e=t.child):e=g(e,t),e;case 14:return c(e,t,n=(n=t.type.render)(t.pendingProps,t.ref)),t.memoizedProps=n,t.child;case 10:return n=t.pendingProps,E()||t.memoizedProps!==n?(c(e,t,n),t.memoizedProps=n,e=t.child):e=g(e,t),e;case 11:return n=t.pendingProps.children,E()||null!==n&&t.memoizedProps!==n?(c(e,t,n),t.memoizedProps=n,e=t.child):e=g(e,t),e;case 13:return function(e,t,n){var r=t.type._context,o=t.pendingProps,i=t.memoizedProps;if(!E()&&i===o)return t.stateNode=0,w(t),g(e,t);var a=o.value;if(t.memoizedProps=o,null===i)a=1073741823;else if(i.value===o.value){if(i.children===o.children)return t.stateNode=0,w(t),g(e,t);a=0}else{var u=i.value;if(u===a&&(0!==u||1/u==1/a)||u!=u&&a!=a){if(i.children===o.children)return t.stateNode=0,w(t),g(e,t);a=0}else if(a="function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,a):1073741823,0==(a|=0)){if(i.children===o.children)return t.stateNode=0,w(t),g(e,t)}else y(t,r,a,n)}return t.stateNode=a,w(t),c(e,t,o.children),t.child}(e,t,n);case 12:e:{r=t.type,i=t.pendingProps,u=t.memoizedProps,o=r._currentValue;var s=r._changedBits;if(E()||0!==s||u!==i){t.memoizedProps=i;var l=i.unstable_observedBits;if(void 0!==l&&null!==l||(l=1073741823),t.stateNode=l,0!=(s&l))y(t,r,s,n);else if(u===i){e=g(e,t);break e}c(e,t,n=(n=i.children)(o)),e=t.child}else e=g(e,t)}return e;default:p("156")}}}}function xr(e,t){var n=t.source;null===t.stack&&lt(n),null!==n&&st(n),t=t.value,null!==e&&2===e.tag&&st(e);try{t&&t.suppressReactErrorLogging||console.error(t)}catch(e){e&&e.suppressReactErrorLogging||console.error(e)}}var _r={};function wr(e){function t(){if(null!==ee)for(var e=ee.return;null!==e;)B(e),e=e.return;te=null,ne=0,ee=null,ie=!1}function n(e){return null!==ae&&ae.has(e)}function r(e){for(;;){var t=e.alternate,n=e.return,r=e.sibling;if(0==(512&e.effectTag)){t=A(t,e,ne);var o=e;if(1073741823===ne||1073741823!==o.expirationTime){e:switch(o.tag){case 3:case 2:var i=o.updateQueue;i=null===i?0:i.expirationTime;break e;default:i=0}for(var a=o.child;null!==a;)0!==a.expirationTime&&(0===i||i>a.expirationTime)&&(i=a.expirationTime),a=a.sibling;o.expirationTime=i}if(null!==t)return t;if(null!==n&&0==(512&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e)),null!==r)return r;if(null===n){ie=!0;break}e=n}else{if(null!==(e=D(e)))return e.effectTag&=2559,e;if(null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=512),null!==r)return r;if(null===n)break;e=n}}return null}function o(e){var t=P(e.alternate,e,ne);return null===t&&(t=r(e)),Ze.current=null,t}function i(e,n,i){J&&p("243"),J=!0,n===ne&&e===te&&null!==ee||(t(),ne=n,ee=Kn((te=e).current,null,ne),e.pendingCommitExpirationTime=0);for(var a=!1;;){try{if(i)for(;null!==ee&&!S();)ee=o(ee);else for(;null!==ee;)ee=o(ee)}catch(e){if(null===ee){a=!0,E(e);break}var u=(i=ee).return;if(null===u){a=!0,E(e);break}M(u,i,e),ee=r(i)}break}return J=!1,a||null!==ee?null:ie?(e.pendingCommitExpirationTime=n,e.current.alternate):void p("262")}function u(e,t,n,r){sr(t,{expirationTime:r,partialState:null,callback:null,isReplace:!1,isForced:!1,capturedValue:e={value:n,source:e,stack:lt(e)},next:null}),l(t,r)}function c(e,t){e:{J&&!oe&&p("263");for(var r=e.return;null!==r;){switch(r.tag){case 2:var o=r.stateNode;if("function"==typeof r.type.getDerivedStateFromCatch||"function"==typeof o.componentDidCatch&&!n(o)){u(e,r,t,1),e=void 0;break e}break;case 3:u(e,r,t,1),e=void 0;break e}r=r.return}3===e.tag&&u(e,e,t,1),e=void 0}return e}function s(e){return e=0!==Q?Q:J?oe?1:ne:1&e.mode?_e?10*(1+((d()+15)/10|0)):25*(1+((d()+500)/25|0)):1,_e&&(0===he||e>he)&&(he=e),e}function l(e,n){e:{for(;null!==e;){if((0===e.expirationTime||e.expirationTime>n)&&(e.expirationTime=n),null!==e.alternate&&(0===e.alternate.expirationTime||e.alternate.expirationTime>n)&&(e.alternate.expirationTime=n),null===e.return){if(3!==e.tag){n=void 0;break e}var r=e.stateNode;!J&&0!==ne&&n<ne&&t(),J&&!oe&&te===r||y(r,n),Se>Oe&&p("185")}e=e.return}n=void 0}return n}function d(){return Y=H()-Z,2+(Y/10|0)}function h(e,t,n,r,o){var i=Q;Q=1;try{return e(t,n,r,o)}finally{Q=i}}function v(e){if(0!==se){if(e>se)return;q(le)}var t=H()-Z;se=e,le=W(b,{timeout:10*(e-2)-t})}function y(e,t){if(null===e.nextScheduledRoot)e.remainingExpirationTime=t,null===ce?(ue=ce=e,e.nextScheduledRoot=e):(ce=ce.nextScheduledRoot=e).nextScheduledRoot=ue;else{var n=e.remainingExpirationTime;(0===n||t<n)&&(e.remainingExpirationTime=t)}fe||(me?xe&&(pe=e,de=1,w(e,1,!1)):1===t?m():v(t))}function g(){var e=0,t=null;if(null!==ce)for(var n=ce,r=ue;null!==r;){var o=r.remainingExpirationTime;if(0===o){if((null===n||null===ce)&&p("244"),r===r.nextScheduledRoot){ue=ce=r.nextScheduledRoot=null;break}if(r===ue)ue=o=r.nextScheduledRoot,ce.nextScheduledRoot=o,r.nextScheduledRoot=null;else{if(r===ce){(ce=n).nextScheduledRoot=ue,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if((0===e||o<e)&&(e=o,t=r),r===ce)break;n=r,r=r.nextScheduledRoot}}null!==(n=pe)&&n===t&&1===e?Se++:Se=0,pe=t,de=e}function b(e){x(0,!0,e)}function m(){x(1,!1,null)}function x(e,t,n){if(be=n,g(),t)for(;null!==pe&&0!==de&&(0===e||e>=de)&&(!ve||d()>=de);)w(pe,de,!ve),g();else for(;null!==pe&&0!==de&&(0===e||e>=de);)w(pe,de,!1),g();null!==be&&(se=0,le=-1),0!==de&&v(de),be=null,ve=!1,_()}function _(){if(Se=0,null!==we){var e=we;we=null;for(var t=0;t<e.length;t++){var n=e[t];try{n._onComplete()}catch(e){ye||(ye=!0,ge=e)}}}if(ye)throw e=ge,ge=null,ye=!1,e}function w(e,t,n){fe&&p("245"),fe=!0,n?null!==(n=e.finishedWork)?O(e,n,t):(e.finishedWork=null,null!==(n=i(e,t,!0))&&(S()?e.finishedWork=n:O(e,n,t))):null!==(n=e.finishedWork)?O(e,n,t):(e.finishedWork=null,null!==(n=i(e,t,!1))&&O(e,n,t)),fe=!1}function O(e,t,n){var r=e.firstBatch;if(null!==r&&r._expirationTime<=n&&(null===we?we=[r]:we.push(r),r._defer))return e.finishedWork=t,void(e.remainingExpirationTime=0);e.finishedWork=null,oe=J=!0,(n=t.stateNode).current===t&&p("177"),0===(r=n.pendingCommitExpirationTime)&&p("261"),n.pendingCommitExpirationTime=0;var o=d();if(Ze.current=null,1<t.effectTag)if(null!==t.lastEffect){t.lastEffect.nextEffect=t;var i=t.firstEffect}else i=t;else i=t.firstEffect;for(V(n.containerInfo),re=i;null!==re;){var a=!1,u=void 0;try{for(;null!==re;)2048&re.effectTag&&N(re.alternate,re),re=re.nextEffect}catch(e){a=!0,u=e}a&&(null===re&&p("178"),c(re,u),null!==re&&(re=re.nextEffect))}for(re=i;null!==re;){a=!1,u=void 0;try{for(;null!==re;){var s=re.effectTag;if(16&s&&L(re),128&s){var l=re.alternate;null!==l&&G(l)}switch(14&s){case 2:I(re),re.effectTag&=-3;break;case 6:I(re),re.effectTag&=-3,U(re.alternate,re);break;case 4:U(re.alternate,re);break;case 8:R(re)}re=re.nextEffect}}catch(e){a=!0,u=e}a&&(null===re&&p("178"),c(re,u),null!==re&&(re=re.nextEffect))}for(K(n.containerInfo),n.current=t,re=i;null!==re;){s=!1,l=void 0;try{for(i=n,a=o,u=r;null!==re;){var f=re.effectTag;36&f&&z(i,re.alternate,re,a,u),256&f&&F(re,E),128&f&&X(re);var h=re.nextEffect;re.nextEffect=null,re=h}}catch(e){s=!0,l=e}s&&(null===re&&p("178"),c(re,l),null!==re&&(re=re.nextEffect))}J=oe=!1,nr(t.stateNode),0===(t=n.current.expirationTime)&&(ae=null),e.remainingExpirationTime=t}function S(){return!(null===be||be.timeRemaining()>Ee)&&(ve=!0)}function E(e){null===pe&&p("246"),pe.remainingExpirationTime=0,ye||(ye=!0,ge=e)}var k=function(){var e=[],t=-1;return{createCursor:function(e){return{current:e}},isEmpty:function(){return-1===t},pop:function(n){0>t||(n.current=e[t],e[t]=null,t--)},push:function(n,r){e[++t]=n.current,n.current=r},checkThatStackIsEmpty:function(){},resetStackAfterFatalErrorInDev:function(){}}}(),T=function(e,t){function n(e){return e===_r&&p("174"),e}var r=e.getChildHostContext,o=e.getRootHostContext;e=t.createCursor;var i=t.push,a=t.pop,u=e(_r),c=e(_r),s=e(_r);return{getHostContext:function(){return n(u.current)},getRootHostContainer:function(){return n(s.current)},popHostContainer:function(e){a(u,e),a(c,e),a(s,e)},popHostContext:function(e){c.current===e&&(a(u,e),a(c,e))},pushHostContainer:function(e,t){i(s,t,e),i(c,e,e),i(u,_r,e),t=o(t),a(u,e),i(u,t,e)},pushHostContext:function(e){var t=n(s.current),o=n(u.current);o!==(t=r(o,e.type,t))&&(i(c,e,e),i(u,t,e))}}}(e,k),C=function(e){function t(e,t,n){(e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=n}function n(e){return 2===e.tag&&null!=e.type.childContextTypes}function r(e,t){var n=e.stateNode,r=e.type.childContextTypes;if("function"!=typeof n.getChildContext)return t;for(var o in n=n.getChildContext())o in r||p("108",st(e)||"Unknown",o);return a({},t,n)}var o=e.createCursor,i=e.push,u=e.pop,c=o(f),s=o(!1),l=f;return{getUnmaskedContext:function(e){return n(e)?l:c.current},cacheContext:t,getMaskedContext:function(e,n){var r=e.type.contextTypes;if(!r)return f;var o=e.stateNode;if(o&&o.__reactInternalMemoizedUnmaskedChildContext===n)return o.__reactInternalMemoizedMaskedChildContext;var i,a={};for(i in r)a[i]=n[i];return o&&t(e,n,a),a},hasContextChanged:function(){return s.current},isContextConsumer:function(e){return 2===e.tag&&null!=e.type.contextTypes},isContextProvider:n,popContextProvider:function(e){n(e)&&(u(s,e),u(c,e))},popTopLevelContextObject:function(e){u(s,e),u(c,e)},pushTopLevelContextObject:function(e,t,n){null!=c.cursor&&p("168"),i(c,t,e),i(s,n,e)},processChildContext:r,pushContextProvider:function(e){if(!n(e))return!1;var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||f,l=c.current,i(c,t,e),i(s,s.current,e),!0},invalidateContextProvider:function(e,t){var n=e.stateNode;if(n||p("169"),t){var o=r(e,l);n.__reactInternalMemoizedMergedChildContext=o,u(s,e),u(c,e),i(c,o,e)}else u(s,e);i(s,t,e)},findCurrentUnmaskedContext:function(e){for((2!==Kt(e)||2!==e.tag)&&p("170");3!==e.tag;){if(n(e))return e.stateNode.__reactInternalMemoizedMergedChildContext;(e=e.return)||p("171")}return e.stateNode.context}}}(k);k=function(e){var t=e.createCursor,n=e.push,r=e.pop,o=t(null),i=t(null),a=t(0);return{pushProvider:function(e){var t=e.type._context;n(a,t._changedBits,e),n(i,t._currentValue,e),n(o,e,e),t._currentValue=e.pendingProps.value,t._changedBits=e.stateNode},popProvider:function(e){var t=a.current,n=i.current;r(o,e),r(i,e),r(a,e),(e=e.type._context)._currentValue=n,e._changedBits=t}}}(k);var j=function(e){function t(e,t){var n=new Vn(5,null,null,0);n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function n(e,t){switch(e.tag){case 5:return null!==(t=i(t,e.type,e.pendingProps))&&(e.stateNode=t,!0);case 6:return null!==(t=a(t,e.pendingProps))&&(e.stateNode=t,!0);default:return!1}}function r(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag;)e=e.return;f=e}var o=e.shouldSetTextContent;if(!(e=e.hydration))return{enterHydrationState:function(){return!1},resetHydrationState:function(){},tryToClaimNextHydratableInstance:function(){},prepareToHydrateHostInstance:function(){p("175")},prepareToHydrateHostTextInstance:function(){p("176")},popHydrationState:function(){return!1}};var i=e.canHydrateInstance,a=e.canHydrateTextInstance,u=e.getNextHydratableSibling,c=e.getFirstHydratableChild,s=e.hydrateInstance,l=e.hydrateTextInstance,f=null,d=null,h=!1;return{enterHydrationState:function(e){return d=c(e.stateNode.containerInfo),f=e,h=!0},resetHydrationState:function(){d=f=null,h=!1},tryToClaimNextHydratableInstance:function(e){if(h){var r=d;if(r){if(!n(e,r)){if(!(r=u(r))||!n(e,r))return e.effectTag|=2,h=!1,void(f=e);t(f,d)}f=e,d=c(r)}else e.effectTag|=2,h=!1,f=e}},prepareToHydrateHostInstance:function(e,t,n){return t=s(e.stateNode,e.type,e.memoizedProps,t,n,e),e.updateQueue=t,null!==t},prepareToHydrateHostTextInstance:function(e){return l(e.stateNode,e.memoizedProps,e)},popHydrationState:function(e){if(e!==f)return!1;if(!h)return r(e),h=!0,!1;var n=e.type;if(5!==e.tag||"head"!==n&&"body"!==n&&!o(n,e.memoizedProps))for(n=d;n;)t(e,n),n=u(n);return r(e),d=f?u(e.stateNode):null,!0}}}(e),P=mr(e,T,C,k,j,l,s).beginWork,A=function(e,t,n,r,o){function i(e){e.effectTag|=4}var a=e.createInstance,u=e.createTextInstance,c=e.appendInitialChild,s=e.finalizeInitialChildren,l=e.prepareUpdate,f=e.persistence,d=t.getRootHostContainer,h=t.popHostContext,v=t.getHostContext,y=t.popHostContainer,g=n.popContextProvider,b=n.popTopLevelContextObject,m=r.popProvider,x=o.prepareToHydrateHostInstance,_=o.prepareToHydrateHostTextInstance,w=o.popHydrationState,O=void 0,S=void 0,E=void 0;return e.mutation?(O=function(){},S=function(e,t,n){(t.updateQueue=n)&&i(t)},E=function(e,t,n,r){n!==r&&i(t)}):p(f?"235":"236"),{completeWork:function(e,t,n){var r=t.pendingProps;switch(t.tag){case 1:return null;case 2:return g(t),e=t.stateNode,null!==(r=t.updateQueue)&&null!==r.capturedValues&&(t.effectTag&=-65,"function"==typeof e.componentDidCatch?t.effectTag|=256:r.capturedValues=null),null;case 3:return y(t),b(t),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(w(t),t.effectTag&=-3),O(t),null!==(e=t.updateQueue)&&null!==e.capturedValues&&(t.effectTag|=256),null;case 5:h(t),n=d();var o=t.type;if(null!==e&&null!=t.stateNode){var f=e.memoizedProps,k=t.stateNode,T=v();k=l(k,o,f,r,n,T),S(e,t,k,o,f,r,n,T),e.ref!==t.ref&&(t.effectTag|=128)}else{if(!r)return null===t.stateNode&&p("166"),null;if(e=v(),w(t))x(t,n,e)&&i(t);else{f=a(o,r,n,e,t);e:for(T=t.child;null!==T;){if(5===T.tag||6===T.tag)c(f,T.stateNode);else if(4!==T.tag&&null!==T.child){T.child.return=T,T=T.child;continue}if(T===t)break;for(;null===T.sibling;){if(null===T.return||T.return===t)break e;T=T.return}T.sibling.return=T.return,T=T.sibling}s(f,o,r,n,e)&&i(t),t.stateNode=f}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)E(e,t,e.memoizedProps,r);else{if("string"!=typeof r)return null===t.stateNode&&p("166"),null;e=d(),n=v(),w(t)?_(t)&&i(t):t.stateNode=u(r,e,n,t)}return null;case 7:(r=t.memoizedProps)||p("165"),t.tag=8,o=[];e:for((f=t.stateNode)&&(f.return=t);null!==f;){if(5===f.tag||6===f.tag||4===f.tag)p("247");else if(9===f.tag)o.push(f.pendingProps.value);else if(null!==f.child){f.child.return=f,f=f.child;continue}for(;null===f.sibling;){if(null===f.return||f.return===t)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}return r=(f=r.handler)(r.props,o),t.child=gr(t,null!==e?e.child:null,r,n),t.child;case 8:return t.tag=7,null;case 9:case 14:case 10:case 11:return null;case 4:return y(t),O(t),null;case 13:return m(t),null;case 12:return null;case 0:p("167");default:p("156")}}}}(e,T,C,k,j).completeWork,M=(T=function(e,t,n,r,o){var i=e.popHostContainer,a=e.popHostContext,u=t.popContextProvider,c=t.popTopLevelContextObject,s=n.popProvider;return{throwException:function(e,t,n){t.effectTag|=512,t.firstEffect=t.lastEffect=null,t={value:n,source:t,stack:lt(t)};do{switch(e.tag){case 3:return cr(e),e.updateQueue.capturedValues=[t],void(e.effectTag|=1024);case 2:if(n=e.stateNode,0==(64&e.effectTag)&&null!==n&&"function"==typeof n.componentDidCatch&&!o(n)){cr(e);var r=(n=e.updateQueue).capturedValues;return null===r?n.capturedValues=[t]:r.push(t),void(e.effectTag|=1024)}}e=e.return}while(null!==e)},unwindWork:function(e){switch(e.tag){case 2:u(e);var t=e.effectTag;return 1024&t?(e.effectTag=-1025&t|64,e):null;case 3:return i(e),c(e),1024&(t=e.effectTag)?(e.effectTag=-1025&t|64,e):null;case 5:return a(e),null;case 4:return i(e),null;case 13:return s(e),null;default:return null}},unwindInterruptedWork:function(e){switch(e.tag){case 2:u(e);break;case 3:i(e),c(e);break;case 5:a(e);break;case 4:i(e);break;case 13:s(e)}}}}(T,C,k,0,n)).throwException,D=T.unwindWork,B=T.unwindInterruptedWork,N=(T=function(e,t,n,r,o){function i(e){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){t(e,n)}else n.current=null}function a(e){switch(rr(e),e.tag){case 2:i(e);var n=e.stateNode;if("function"==typeof n.componentWillUnmount)try{n.props=e.memoizedProps,n.state=e.memoizedState,n.componentWillUnmount()}catch(n){t(e,n)}break;case 5:i(e);break;case 7:u(e.stateNode);break;case 4:f&&s(e)}}function u(e){for(var t=e;;)if(a(t),null===t.child||f&&4===t.tag){if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;t=t.return}t.sibling.return=t.return,t=t.sibling}else t.child.return=t,t=t.child}function c(e){return 5===e.tag||3===e.tag||4===e.tag}function s(e){for(var t=e,n=!1,r=void 0,o=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&p("160"),n.tag){case 5:r=n.stateNode,o=!1;break e;case 3:case 4:r=n.stateNode.containerInfo,o=!0;break e}n=n.return}n=!0}if(5===t.tag||6===t.tag)u(t),o?w(r,t.stateNode):_(r,t.stateNode);else if(4===t.tag?r=t.stateNode.containerInfo:a(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;4===(t=t.return).tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}var l=e.getPublicInstance,f=e.mutation;e=e.persistence,f||p(e?"235":"236");var d=f.commitMount,h=f.commitUpdate,v=f.resetTextContent,y=f.commitTextUpdate,g=f.appendChild,b=f.appendChildToContainer,m=f.insertBefore,x=f.insertInContainerBefore,_=f.removeChild,w=f.removeChildFromContainer;return{commitBeforeMutationLifeCycles:function(e,t){switch(t.tag){case 2:if(2048&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;(e=t.stateNode).props=t.memoizedProps,e.state=t.memoizedState,t=e.getSnapshotBeforeUpdate(n,r),e.__reactInternalSnapshotBeforeUpdate=t}break;case 3:case 5:case 6:case 4:break;default:p("163")}},commitResetTextContent:function(e){v(e.stateNode)},commitPlacement:function(e){e:{for(var t=e.return;null!==t;){if(c(t)){var n=t;break e}t=t.return}p("160"),n=void 0}var r=t=void 0;switch(n.tag){case 5:t=n.stateNode,r=!1;break;case 3:case 4:t=n.stateNode.containerInfo,r=!0;break;default:p("161")}16&n.effectTag&&(v(t),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||c(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){if(5===o.tag||6===o.tag)n?r?x(t,o.stateNode,n):m(t,o.stateNode,n):r?b(t,o.stateNode):g(t,o.stateNode);else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}},commitDeletion:function(e){s(e),e.return=null,e.child=null,e.alternate&&(e.alternate.child=null,e.alternate.return=null)},commitWork:function(e,t){switch(t.tag){case 2:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps;e=null!==e?e.memoizedProps:r;var o=t.type,i=t.updateQueue;t.updateQueue=null,null!==i&&h(n,i,o,e,r,t)}break;case 6:null===t.stateNode&&p("162"),n=t.memoizedProps,y(t.stateNode,null!==e?e.memoizedProps:n,n);break;case 3:break;default:p("163")}},commitLifeCycles:function(e,t,n){switch(n.tag){case 2:if(e=n.stateNode,4&n.effectTag)if(null===t)e.props=n.memoizedProps,e.state=n.memoizedState,e.componentDidMount();else{var r=t.memoizedProps;t=t.memoizedState,e.props=n.memoizedProps,e.state=n.memoizedState,e.componentDidUpdate(r,t,e.__reactInternalSnapshotBeforeUpdate)}null!==(n=n.updateQueue)&&pr(n,e);break;case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=l(n.child.stateNode);break;case 2:e=n.child.stateNode}pr(t,e)}break;case 5:e=n.stateNode,null===t&&4&n.effectTag&&d(e,n.type,n.memoizedProps,n);break;case 6:case 4:break;default:p("163")}},commitErrorLogging:function(e,t){switch(e.tag){case 2:var n=e.type;t=e.stateNode;var r=e.updateQueue;(null===r||null===r.capturedValues)&&p("264");var i=r.capturedValues;for(r.capturedValues=null,"function"!=typeof n.getDerivedStateFromCatch&&o(t),t.props=e.memoizedProps,t.state=e.memoizedState,n=0;n<i.length;n++){var a=(r=i[n]).value,u=r.stack;xr(e,r),t.componentDidCatch(a,{componentStack:null!==u?u:""})}break;case 3:for((null===(n=e.updateQueue)||null===n.capturedValues)&&p("264"),i=n.capturedValues,n.capturedValues=null,n=0;n<i.length;n++)xr(e,r=i[n]),t(r.value);break;default:p("265")}},commitAttachRef:function(e){var t=e.ref;if(null!==t){var n=e.stateNode;switch(e.tag){case 5:e=l(n);break;default:e=n}"function"==typeof t?t(e):t.current=e}},commitDetachRef:function(e){null!==(e=e.ref)&&("function"==typeof e?e(null):e.current=null)}}}(e,c,0,0,function(e){null===ae?ae=new Set([e]):ae.add(e)})).commitBeforeMutationLifeCycles,L=T.commitResetTextContent,I=T.commitPlacement,R=T.commitDeletion,U=T.commitWork,z=T.commitLifeCycles,F=T.commitErrorLogging,X=T.commitAttachRef,G=T.commitDetachRef,H=e.now,W=e.scheduleDeferredCallback,q=e.cancelDeferredCallback,V=e.prepareForCommit,K=e.resetAfterCommit,Z=H(),Y=Z,$=0,Q=0,J=!1,ee=null,te=null,ne=0,re=null,oe=!1,ie=!1,ae=null,ue=null,ce=null,se=0,le=-1,fe=!1,pe=null,de=0,he=0,ve=!1,ye=!1,ge=null,be=null,me=!1,xe=!1,_e=!1,we=null,Oe=1e3,Se=0,Ee=1;return{recalculateCurrentTime:d,computeExpirationForFiber:s,scheduleWork:l,requestWork:y,flushRoot:function(e,t){fe&&p("253"),pe=e,de=t,w(e,t,!1),m(),_()},batchedUpdates:function(e,t){var n=me;me=!0;try{return e(t)}finally{(me=n)||fe||m()}},unbatchedUpdates:function(e,t){if(me&&!xe){xe=!0;try{return e(t)}finally{xe=!1}}return e(t)},flushSync:function(e,t){fe&&p("187");var n=me;me=!0;try{return h(e,t)}finally{me=n,m()}},flushControlled:function(e){var t=me;me=!0;try{h(e)}finally{(me=t)||fe||x(1,!1,null)}},deferredUpdates:function(e){var t=Q;Q=25*(1+((d()+500)/25|0));try{return e()}finally{Q=t}},syncUpdates:h,interactiveUpdates:function(e,t,n){if(_e)return e(t,n);me||fe||0===he||(x(he,!1,null),he=0);var r=_e,o=me;me=_e=!0;try{return e(t,n)}finally{_e=r,(me=o)||fe||m()}},flushInteractiveUpdates:function(){fe||0===he||(x(he,!1,null),he=0)},computeUniqueAsyncExpiration:function(){var e=25*(1+((d()+500)/25|0));return e<=$&&(e=$+1),$=e},legacyContext:C}}function Or(e){function t(e,t,n,r,o,a){if(r=t.current,n){n=n._reactInternalFiber;var u=c(n);n=s(n)?l(n,u):u}else n=f;return null===t.context?t.context=n:t.pendingContext=n,sr(r,{expirationTime:o,partialState:{element:e},callback:void 0===(t=a)?null:t,isReplace:!1,isForced:!1,capturedValue:null,next:null}),i(r,o),o}var n=e.getPublicInstance,r=(e=wr(e)).recalculateCurrentTime,o=e.computeExpirationForFiber,i=e.scheduleWork,u=e.legacyContext,c=u.findCurrentUnmaskedContext,s=u.isContextProvider,l=u.processChildContext;return{createContainer:function(e,t,n){return e={current:t=new Vn(3,null,null,t?3:0),containerInfo:e,pendingChildren:null,pendingCommitExpirationTime:0,finishedWork:null,context:null,pendingContext:null,hydrate:n,remainingExpirationTime:0,firstBatch:null,nextScheduledRoot:null},t.stateNode=e},updateContainer:function(e,n,i,a){var u=n.current;return t(e,n,i,r(),u=o(u),a)},updateContainerAtExpirationTime:function(e,n,o,i,a){return t(e,n,o,r(),i,a)},flushRoot:e.flushRoot,requestWork:e.requestWork,computeUniqueAsyncExpiration:e.computeUniqueAsyncExpiration,batchedUpdates:e.batchedUpdates,unbatchedUpdates:e.unbatchedUpdates,deferredUpdates:e.deferredUpdates,syncUpdates:e.syncUpdates,interactiveUpdates:e.interactiveUpdates,flushInteractiveUpdates:e.flushInteractiveUpdates,flushControlled:e.flushControlled,flushSync:e.flushSync,getPublicRootInstance:function(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:return n(e.child.stateNode);default:return e.child.stateNode}},findHostInstance:function(e){var t=e._reactInternalFiber;return void 0===t&&("function"==typeof e.render?p("188"):p("268",Object.keys(e))),null===(e=Qt(t))?null:e.stateNode},findHostInstanceWithNoPortals:function(e){return null===(e=function(e){if(!(e=$t(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child&&4!==t.tag)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}(e))?null:e.stateNode},injectIntoDevTools:function(e){var t=e.findFiberByHostInstance;return function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Jn=tr(function(e){return t.onCommitFiberRoot(n,e)}),er=tr(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}return!0}(a({},e,{findHostInstanceByFiber:function(e){return null===(e=Qt(e))?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null}}))}}}var Sr=Object.freeze({default:Or}),Er=Sr&&Or||Sr,kr=Er.default?Er.default:Er;var Tr="object"==typeof performance&&"function"==typeof performance.now,Cr=void 0;Cr=Tr?function(){return performance.now()}:function(){return Date.now()};var jr=void 0,Pr=void 0;if(i.canUseDOM)if("function"!=typeof requestIdleCallback||"function"!=typeof cancelIdleCallback){var Ar=null,Mr=!1,Dr=-1,Br=!1,Nr=0,Lr=33,Ir=33,Rr=void 0;Rr=Tr?{didTimeout:!1,timeRemaining:function(){var e=Nr-performance.now();return 0<e?e:0}}:{didTimeout:!1,timeRemaining:function(){var e=Nr-Date.now();return 0<e?e:0}};var Ur="__reactIdleCallback$"+Math.random().toString(36).slice(2);window.addEventListener("message",function(e){if(e.source===window&&e.data===Ur){if(Mr=!1,e=Cr(),0>=Nr-e){if(!(-1!==Dr&&Dr<=e))return void(Br||(Br=!0,requestAnimationFrame(zr)));Rr.didTimeout=!0}else Rr.didTimeout=!1;Dr=-1,e=Ar,Ar=null,null!==e&&e(Rr)}},!1);var zr=function(e){Br=!1;var t=e-Nr+Ir;t<Ir&&Lr<Ir?(8>t&&(t=8),Ir=t<Lr?Lr:t):Lr=t,Nr=e+Ir,Mr||(Mr=!0,window.postMessage(Ur,"*"))};jr=function(e,t){return Ar=e,null!=t&&"number"==typeof t.timeout&&(Dr=Cr()+t.timeout),Br||(Br=!0,requestAnimationFrame(zr)),0},Pr=function(){Ar=null,Mr=!1,Dr=-1}}else jr=window.requestIdleCallback,Pr=window.cancelIdleCallback;else jr=function(e){return setTimeout(function(){e({timeRemaining:function(){return 1/0},didTimeout:!1})})},Pr=function(e){clearTimeout(e)};function Fr(e,t){return e=a({children:void 0},t),(t=function(e){var t="";return o.Children.forEach(e,function(e){null==e||"string"!=typeof e&&"number"!=typeof e||(t+=e)}),t}(t.children))&&(e.children=t),e}function Xr(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+n,t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function Gr(e,t){var n=t.value;e._wrapperState={initialValue:null!=n?n:t.defaultValue,wasMultiple:!!t.multiple}}function Hr(e,t){return null!=t.dangerouslySetInnerHTML&&p("91"),a({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Wr(e,t){var n=t.value;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&p("92"),Array.isArray(t)&&(1>=t.length||p("93"),t=t[0]),n=""+t),null==n&&(n="")),e._wrapperState={initialValue:""+n}}function qr(e,t){var n=t.value;null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&(e.defaultValue=n)),null!=t.defaultValue&&(e.defaultValue=t.defaultValue)}function Vr(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}var Kr={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function Zr(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Yr(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Zr(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var $r,Qr=void 0,Jr=($r=function(e,t){if(e.namespaceURI!==Kr.svg||"innerHTML"in e)e.innerHTML=t;else{for((Qr=Qr||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=Qr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction(function(){return $r(e,t)})}:$r);function eo(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var to={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},no=["Webkit","ms","Moz","O"];function ro(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=n,i=t[n];o=null==i||"boolean"==typeof i||""===i?"":r||"number"!=typeof i||0===i||to.hasOwnProperty(o)&&to[o]?(""+i).trim():i+"px","float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(to).forEach(function(e){no.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),to[t]=to[e]})});var oo=a({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function io(e,t,n){t&&(oo[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&p("137",e,n()),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&p("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||p("61")),null!=t.style&&"object"!=typeof t.style&&p("62",n()))}function ao(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var uo=u.thatReturns("");function co(e,t){var n=Nn(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=_[t];for(var r=0;r<t.length;r++){var o=t[r];n.hasOwnProperty(o)&&n[o]||("topScroll"===o?_n("topScroll","scroll",e):"topFocus"===o||"topBlur"===o?(_n("topFocus","focus",e),_n("topBlur","blur",e),n.topBlur=!0,n.topFocus=!0):"topCancel"===o?(We("cancel",!0)&&_n("topCancel","cancel",e),n.topCancel=!0):"topClose"===o?(We("close",!0)&&_n("topClose","close",e),n.topClose=!0):Pn.hasOwnProperty(o)&&xn(o,Pn[o],e),n[o]=!0)}}function so(e,t,n,r){return n=9===n.nodeType?n:n.ownerDocument,r===Kr.html&&(r=Zr(e)),r===Kr.html?"script"===e?((e=n.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):e="string"==typeof t.is?n.createElement(e,{is:t.is}):n.createElement(e):e=n.createElementNS(r,e),e}function lo(e,t){return(9===t.nodeType?t:t.ownerDocument).createTextNode(e)}function fo(e,t,n,r){var o=ao(t,n);switch(t){case"iframe":case"object":xn("topLoad","load",e);var i=n;break;case"video":case"audio":for(i in An)An.hasOwnProperty(i)&&xn(i,An[i],e);i=n;break;case"source":xn("topError","error",e),i=n;break;case"img":case"image":case"link":xn("topError","error",e),xn("topLoad","load",e),i=n;break;case"form":xn("topReset","reset",e),xn("topSubmit","submit",e),i=n;break;case"details":xn("topToggle","toggle",e),i=n;break;case"input":xt(e,n),i=mt(e,n),xn("topInvalid","invalid",e),co(r,"onChange");break;case"option":i=Fr(e,n);break;case"select":Gr(e,n),i=a({},n,{value:void 0}),xn("topInvalid","invalid",e),co(r,"onChange");break;case"textarea":Wr(e,n),i=Hr(e,n),xn("topInvalid","invalid",e),co(r,"onChange");break;default:i=n}io(t,i,uo);var c,s=i;for(c in s)if(s.hasOwnProperty(c)){var l=s[c];"style"===c?ro(e,l):"dangerouslySetInnerHTML"===c?null!=(l=l?l.__html:void 0)&&Jr(e,l):"children"===c?"string"==typeof l?("textarea"!==t||""!==l)&&eo(e,l):"number"==typeof l&&eo(e,""+l):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(x.hasOwnProperty(c)?null!=l&&co(r,c):null!=l&&bt(e,c,l,o))}switch(t){case"input":Ve(e),Ot(e,n);break;case"textarea":Ve(e),Vr(e);break;case"option":null!=n.value&&e.setAttribute("value",n.value);break;case"select":e.multiple=!!n.multiple,null!=(t=n.value)?Xr(e,!!n.multiple,t,!1):null!=n.defaultValue&&Xr(e,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof i.onClick&&(e.onclick=u)}}function po(e,t,n,r,o){var i=null;switch(t){case"input":n=mt(e,n),r=mt(e,r),i=[];break;case"option":n=Fr(e,n),r=Fr(e,r),i=[];break;case"select":n=a({},n,{value:void 0}),r=a({},r,{value:void 0}),i=[];break;case"textarea":n=Hr(e,n),r=Hr(e,r),i=[];break;default:"function"!=typeof n.onClick&&"function"==typeof r.onClick&&(e.onclick=u)}io(t,r,uo),t=e=void 0;var c=null;for(e in n)if(!r.hasOwnProperty(e)&&n.hasOwnProperty(e)&&null!=n[e])if("style"===e){var s=n[e];for(t in s)s.hasOwnProperty(t)&&(c||(c={}),c[t]="")}else"dangerouslySetInnerHTML"!==e&&"children"!==e&&"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&"autoFocus"!==e&&(x.hasOwnProperty(e)?i||(i=[]):(i=i||[]).push(e,null));for(e in r){var l=r[e];if(s=null!=n?n[e]:void 0,r.hasOwnProperty(e)&&l!==s&&(null!=l||null!=s))if("style"===e)if(s){for(t in s)!s.hasOwnProperty(t)||l&&l.hasOwnProperty(t)||(c||(c={}),c[t]="");for(t in l)l.hasOwnProperty(t)&&s[t]!==l[t]&&(c||(c={}),c[t]=l[t])}else c||(i||(i=[]),i.push(e,c)),c=l;else"dangerouslySetInnerHTML"===e?(l=l?l.__html:void 0,s=s?s.__html:void 0,null!=l&&s!==l&&(i=i||[]).push(e,""+l)):"children"===e?s===l||"string"!=typeof l&&"number"!=typeof l||(i=i||[]).push(e,""+l):"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&(x.hasOwnProperty(e)?(null!=l&&co(o,e),i||s===l||(i=[])):(i=i||[]).push(e,l))}return c&&(i=i||[]).push("style",c),i}function ho(e,t,n,r,o){"input"===n&&"radio"===o.type&&null!=o.name&&_t(e,o),ao(n,r),r=ao(n,o);for(var i=0;i<t.length;i+=2){var a=t[i],u=t[i+1];"style"===a?ro(e,u):"dangerouslySetInnerHTML"===a?Jr(e,u):"children"===a?eo(e,u):bt(e,a,u,r)}switch(n){case"input":wt(e,o);break;case"textarea":qr(e,o);break;case"select":e._wrapperState.initialValue=void 0,t=e._wrapperState.wasMultiple,e._wrapperState.wasMultiple=!!o.multiple,null!=(n=o.value)?Xr(e,!!o.multiple,n,!1):t!==!!o.multiple&&(null!=o.defaultValue?Xr(e,!!o.multiple,o.defaultValue,!0):Xr(e,!!o.multiple,o.multiple?[]:"",!1))}}function vo(e,t,n,r,o){switch(t){case"iframe":case"object":xn("topLoad","load",e);break;case"video":case"audio":for(var i in An)An.hasOwnProperty(i)&&xn(i,An[i],e);break;case"source":xn("topError","error",e);break;case"img":case"image":case"link":xn("topError","error",e),xn("topLoad","load",e);break;case"form":xn("topReset","reset",e),xn("topSubmit","submit",e);break;case"details":xn("topToggle","toggle",e);break;case"input":xt(e,n),xn("topInvalid","invalid",e),co(o,"onChange");break;case"select":Gr(e,n),xn("topInvalid","invalid",e),co(o,"onChange");break;case"textarea":Wr(e,n),xn("topInvalid","invalid",e),co(o,"onChange")}for(var a in io(t,n,uo),r=null,n)n.hasOwnProperty(a)&&(i=n[a],"children"===a?"string"==typeof i?e.textContent!==i&&(r=["children",i]):"number"==typeof i&&e.textContent!==""+i&&(r=["children",""+i]):x.hasOwnProperty(a)&&null!=i&&co(o,a));switch(t){case"input":Ve(e),Ot(e,n);break;case"textarea":Ve(e),Vr(e);break;case"select":case"option":break;default:"function"==typeof n.onClick&&(e.onclick=u)}return r}function yo(e,t){return e.nodeValue!==t}var go=Object.freeze({createElement:so,createTextNode:lo,setInitialProperties:fo,diffProperties:po,updateProperties:ho,diffHydratedProperties:vo,diffHydratedText:yo,warnForUnmatchedText:function(){},warnForDeletedHydratableElement:function(){},warnForDeletedHydratableText:function(){},warnForInsertedHydratedElement:function(){},warnForInsertedHydratedText:function(){},restoreControlledState:function(e,t,n){switch(t){case"input":if(wt(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=W(r);o||p("90"),Ke(r),wt(r,o)}}}break;case"textarea":qr(e,n);break;case"select":null!=(t=n.value)&&Xr(e,!!n.multiple,t,!1)}}});je.injectFiberControlledHostComponent(go);var bo=null,mo=null;function xo(e){this._expirationTime=Eo.computeUniqueAsyncExpiration(),this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function _o(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function wo(e,t,n){this._internalRoot=Eo.createContainer(e,t,n)}function Oo(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function So(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}xo.prototype.render=function(e){this._defer||p("250"),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new _o;return Eo.updateContainerAtExpirationTime(e,t,null,n,r._onCommit),r},xo.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},xo.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||p("251"),this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,o=t;o!==this;)r=o,o=o._next;null===r&&p("251"),r._next=o._next,this._next=t,e.firstBatch=this}this._defer=!1,Eo.flushRoot(e,n),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},xo.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},_o.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},_o.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];"function"!=typeof n&&p("191",n),n()}}},wo.prototype.render=function(e,t){var n=this._internalRoot,r=new _o;return null!==(t=void 0===t?null:t)&&r.then(t),Eo.updateContainer(e,n,null,r._onCommit),r},wo.prototype.unmount=function(e){var t=this._internalRoot,n=new _o;return null!==(e=void 0===e?null:e)&&n.then(e),Eo.updateContainer(null,t,null,n._onCommit),n},wo.prototype.legacy_renderSubtreeIntoContainer=function(e,t,n){var r=this._internalRoot,o=new _o;return null!==(n=void 0===n?null:n)&&o.then(n),Eo.updateContainer(t,r,e,o._onCommit),o},wo.prototype.createBatch=function(){var e=new xo(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime<=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e};var Eo=kr({getRootHostContext:function(e){var t=e.nodeType;switch(t){case 9:case 11:e=(e=e.documentElement)?e.namespaceURI:Yr(null,"");break;default:e=Yr(e=(t=8===t?e.parentNode:e).namespaceURI||null,t=t.tagName)}return e},getChildHostContext:function(e,t){return Yr(e,t)},getPublicInstance:function(e){return e},prepareForCommit:function(){bo=bn;var e=c();if(Rn(e)){if("selectionStart"in e)var t={start:e.selectionStart,end:e.selectionEnd};else e:{var n=window.getSelection&&window.getSelection();if(n&&0!==n.rangeCount){t=n.anchorNode;var r=n.anchorOffset,o=n.focusNode;n=n.focusOffset;try{t.nodeType,o.nodeType}catch(e){t=null;break e}var i=0,a=-1,u=-1,s=0,l=0,f=e,p=null;t:for(;;){for(var d;f!==t||0!==r&&3!==f.nodeType||(a=i+r),f!==o||0!==n&&3!==f.nodeType||(u=i+n),3===f.nodeType&&(i+=f.nodeValue.length),null!==(d=f.firstChild);)p=f,f=d;for(;;){if(f===e)break t;if(p===t&&++s===r&&(a=i),p===o&&++l===n&&(u=i),null!==(d=f.nextSibling))break;p=(f=p).parentNode}f=d}t=-1===a||-1===u?null:{start:a,end:u}}else t=null}t=t||{start:0,end:0}}else t=null;mo={focusedElem:e,selectionRange:t},mn(!1)},resetAfterCommit:function(){var e=mo,t=c(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&l(document.documentElement,n)){if(Rn(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if(window.getSelection){t=window.getSelection();var o=n[oe()].length;e=Math.min(r.start,o),r=void 0===r.end?e:Math.min(r.end,o),!t.extend&&e>r&&(o=r,r=e,e=o),o=In(n,e);var i=In(n,r);if(o&&i&&(1!==t.rangeCount||t.anchorNode!==o.node||t.anchorOffset!==o.offset||t.focusNode!==i.node||t.focusOffset!==i.offset)){var a=document.createRange();a.setStart(o.node,o.offset),t.removeAllRanges(),e>r?(t.addRange(a),t.extend(i.node,i.offset)):(a.setEnd(i.node,i.offset),t.addRange(a))}}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for(n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}mo=null,mn(bo),bo=null},createInstance:function(e,t,n,r,o){return(e=so(e,t,n,r))[F]=o,e[X]=t,e},appendInitialChild:function(e,t){e.appendChild(t)},finalizeInitialChildren:function(e,t,n,r){return fo(e,t,n,r),So(t,n)},prepareUpdate:function(e,t,n,r,o){return po(e,t,n,r,o)},shouldSetTextContent:function(e,t){return"textarea"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&"string"==typeof t.dangerouslySetInnerHTML.__html},shouldDeprioritizeSubtree:function(e,t){return!!t.hidden},createTextInstance:function(e,t,n,r){return(e=lo(e,t))[F]=r,e},now:Cr,mutation:{commitMount:function(e,t,n){So(t,n)&&e.focus()},commitUpdate:function(e,t,n,r,o){e[X]=o,ho(e,t,n,r,o)},resetTextContent:function(e){eo(e,"")},commitTextUpdate:function(e,t,n){e.nodeValue=n},appendChild:function(e,t){e.appendChild(t)},appendChildToContainer:function(e,t){8===e.nodeType?e.parentNode.insertBefore(t,e):e.appendChild(t)},insertBefore:function(e,t,n){e.insertBefore(t,n)},insertInContainerBefore:function(e,t,n){8===e.nodeType?e.parentNode.insertBefore(t,n):e.insertBefore(t,n)},removeChild:function(e,t){e.removeChild(t)},removeChildFromContainer:function(e,t){8===e.nodeType?e.parentNode.removeChild(t):e.removeChild(t)}},hydration:{canHydrateInstance:function(e,t){return 1!==e.nodeType||t.toLowerCase()!==e.nodeName.toLowerCase()?null:e},canHydrateTextInstance:function(e,t){return""===t||3!==e.nodeType?null:e},getNextHydratableSibling:function(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e},getFirstHydratableChild:function(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e},hydrateInstance:function(e,t,n,r,o,i){return e[F]=i,e[X]=n,vo(e,t,n,o,r)},hydrateTextInstance:function(e,t,n){return e[F]=n,yo(e,t)},didNotMatchHydratedContainerTextInstance:function(){},didNotMatchHydratedTextInstance:function(){},didNotHydrateContainerInstance:function(){},didNotHydrateInstance:function(){},didNotFindHydratableContainerInstance:function(){},didNotFindHydratableContainerTextInstance:function(){},didNotFindHydratableInstance:function(){},didNotFindHydratableTextInstance:function(){}},scheduleDeferredCallback:jr,cancelDeferredCallback:Pr}),ko=Eo;function To(e,t,n,r,o){Oo(n)||p("200");var i=n._reactRootContainer;if(i){if("function"==typeof o){var a=o;o=function(){var e=Eo.getPublicRootInstance(i._internalRoot);a.call(e)}}null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new wo(e,!1,t)}(n,r),"function"==typeof o){var u=o;o=function(){var e=Eo.getPublicRootInstance(i._internalRoot);u.call(e)}}Eo.unbatchedUpdates(function(){null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)})}return Eo.getPublicRootInstance(i._internalRoot)}function Co(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return Oo(t)||p("200"),function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:et,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}Ie=ko.batchedUpdates,Re=ko.interactiveUpdates,Ue=ko.flushInteractiveUpdates;var jo={createPortal:Co,findDOMNode:function(e){return null==e?null:1===e.nodeType?e:Eo.findHostInstance(e)},hydrate:function(e,t,n){return To(null,e,t,!0,n)},render:function(e,t,n){return To(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){return(null==e||void 0===e._reactInternalFiber)&&p("38"),To(e,t,n,!1,r)},unmountComponentAtNode:function(e){return Oo(e)||p("40"),!!e._reactRootContainer&&(Eo.unbatchedUpdates(function(){To(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return Co.apply(void 0,arguments)},unstable_batchedUpdates:Eo.batchedUpdates,unstable_deferredUpdates:Eo.deferredUpdates,flushSync:Eo.flushSync,unstable_flushControlled:Eo.flushControlled,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{EventPluginHub:U,EventPluginRegistry:S,EventPropagators:ne,ReactControlledComponent:Le,ReactDOMComponentTree:q,ReactDOMEventListener:Sn},unstable_createRoot:function(e,t){return new wo(e,!0,null!=t&&!0===t.hydrate)}};Eo.injectIntoDevTools({findFiberByHostInstance:G,bundleType:0,version:"16.3.2",rendererPackageName:"react-dom"});var Po=Object.freeze({default:jo}),Ao=Po&&jo||Po;e.exports=Ao.default?Ao.default:Ao},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(432)},function(e,t,n){"use strict";
/** @license React v16.3.2
 * react.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(163),o=n(113),i=n(162),a=n(112),u="function"==typeof Symbol&&Symbol.for,c=u?Symbol.for("react.element"):60103,s=u?Symbol.for("react.portal"):60106,l=u?Symbol.for("react.fragment"):60107,f=u?Symbol.for("react.strict_mode"):60108,p=u?Symbol.for("react.provider"):60109,d=u?Symbol.for("react.context"):60110,h=u?Symbol.for("react.async_mode"):60111,v=u?Symbol.for("react.forward_ref"):60112,y="function"==typeof Symbol&&Symbol.iterator;function g(e){for(var t=arguments.length-1,n="http://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);o(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var b={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}};function m(e,t,n){this.props=e,this.context=t,this.refs=i,this.updater=n||b}function x(){}function _(e,t,n){this.props=e,this.context=t,this.refs=i,this.updater=n||b}m.prototype.isReactComponent={},m.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&g("85"),this.updater.enqueueSetState(this,e,t,"setState")},m.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},x.prototype=m.prototype;var w=_.prototype=new x;w.constructor=_,r(w,m.prototype),w.isPureReactComponent=!0;var O={current:null},S=Object.prototype.hasOwnProperty,E={key:!0,ref:!0,__self:!0,__source:!0};function k(e,t,n){var r=void 0,o={},i=null,a=null;if(null!=t)for(r in void 0!==t.ref&&(a=t.ref),void 0!==t.key&&(i=""+t.key),t)S.call(t,r)&&!E.hasOwnProperty(r)&&(o[r]=t[r]);var u=arguments.length-2;if(1===u)o.children=n;else if(1<u){for(var s=Array(u),l=0;l<u;l++)s[l]=arguments[l+2];o.children=s}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===o[r]&&(o[r]=u[r]);return{$$typeof:c,type:e,key:i,ref:a,props:o,_owner:O.current}}function T(e){return"object"==typeof e&&null!==e&&e.$$typeof===c}var C=/\/+/g,j=[];function P(e,t,n,r){if(j.length){var o=j.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function A(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>j.length&&j.push(e)}function M(e,t,n,r){var o=typeof e;"undefined"!==o&&"boolean"!==o||(e=null);var i=!1;if(null===e)i=!0;else switch(o){case"string":case"number":i=!0;break;case"object":switch(e.$$typeof){case c:case s:i=!0}}if(i)return n(r,e,""===t?"."+D(e,0):t),1;if(i=0,t=""===t?".":t+":",Array.isArray(e))for(var a=0;a<e.length;a++){var u=t+D(o=e[a],a);i+=M(o,u,n,r)}else if(null===e||void 0===e?u=null:u="function"==typeof(u=y&&e[y]||e["@@iterator"])?u:null,"function"==typeof u)for(e=u.call(e),a=0;!(o=e.next()).done;)i+=M(o=o.value,u=t+D(o,a++),n,r);else"object"===o&&g("31","[object Object]"===(n=""+e)?"object with keys {"+Object.keys(e).join(", ")+"}":n,"");return i}function D(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function B(e,t){e.func.call(e.context,t,e.count++)}function N(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?L(e,r,n,a.thatReturnsArgument):null!=e&&(T(e)&&(t=o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(C,"$&/")+"/")+n,e={$$typeof:c,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}),r.push(e))}function L(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(C,"$&/")+"/"),t=P(t,i,r,o),null==e||M(e,"",N,t),A(t)}var I={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return L(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;t=P(null,null,t,n),null==e||M(e,"",B,t),A(t)},count:function(e){return null==e?0:M(e,"",a.thatReturnsNull,null)},toArray:function(e){var t=[];return L(e,t,null,a.thatReturnsArgument),t},only:function(e){return T(e)||g("143"),e}},createRef:function(){return{current:null}},Component:m,PureComponent:_,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:d,_calculateChangedBits:t,_defaultValue:e,_currentValue:e,_changedBits:0,Provider:null,Consumer:null}).Provider={$$typeof:p,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:v,render:e}},Fragment:l,StrictMode:f,unstable_AsyncMode:h,createElement:k,cloneElement:function(e,t,n){(null===e||void 0===e)&&g("267",e);var o=void 0,i=r({},e.props),a=e.key,u=e.ref,s=e._owner;if(null!=t){void 0!==t.ref&&(u=t.ref,s=O.current),void 0!==t.key&&(a=""+t.key);var l=void 0;for(o in e.type&&e.type.defaultProps&&(l=e.type.defaultProps),t)S.call(t,o)&&!E.hasOwnProperty(o)&&(i[o]=void 0===t[o]&&void 0!==l?l[o]:t[o])}if(1===(o=arguments.length-2))i.children=n;else if(1<o){l=Array(o);for(var f=0;f<o;f++)l[f]=arguments[f+2];i.children=l}return{$$typeof:c,type:e.type,key:a,ref:u,props:i,_owner:s}},createFactory:function(e){var t=k.bind(null,e);return t.type=e,t},isValidElement:T,version:"16.3.2",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:O,assign:r}},R=Object.freeze({default:I}),U=R&&I||R;e.exports=U.default?U.default:U},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=u(n(7)),i=u(n(433));n(425);var a=u(n(223));function u(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"render",value:function(){return o.default.createElement(a.default,null)}}]),t}();t.default=c,i.default.render(o.default.createElement(c,null),document.getElementById("app"))},function(e,t,n){"use strict";(function(e){var n="object"==typeof e&&e&&e.Object===Object&&e;t.a=n}).call(this,n(63))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4LXNhZ2EvZXMvaW50ZXJuYWwvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZXhwb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC1zYWdhL2VzL2ludGVybmFsL2lvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FuLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmFpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tbGVuZ3RoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1kcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvUHJvcFR5cGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb21wb25lbnRzL1Byb3ZpZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9TdWJzY3JpcHRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvY29ubmVjdEFkdmFuY2VkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9zaGFsbG93RXF1YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fcm9vdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19TeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZ2V0UmF3VGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX29iamVjdFRvU3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VHZXRUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZ2V0UHJvdG90eXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNPYmplY3RMaWtlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNQbGFpbk9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC93cmFwTWFwVG9Qcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9tYXBEaXNwYXRjaFRvUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWFwU3RhdGVUb1Byb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L21lcmdlUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3Qvc2VsZWN0b3JGYWN0b3J5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L2Nvbm5lY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC1zYWdhL2VzL2ludGVybmFsL2NoYW5uZWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYnMvemFoeW8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYS1mdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctaHRtbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19oaWRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1ncG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcGQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19oYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaWN0LW1ldGhvZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY3R4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2RlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1tZXRob2RzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1zYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kZWZpbmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtc2FnYS9lcy9pbnRlcm5hbC9idWZmZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FkZC10by11bnNjb3BhYmxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19saWJyYXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21ldGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4LXNhZ2EvZXMvaW50ZXJuYWwvc2FnYUhlbHBlcnMvZnNtSXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4LXNhZ2EvZXMvaW50ZXJuYWwvc2FnYUhlbHBlcnMvdGFrZUV2ZXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC1zYWdhL2VzL2ludGVybmFsL3NhZ2FIZWxwZXJzL3Rha2VMYXRlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4LXNhZ2EvZXMvaW50ZXJuYWwvc2FnYUhlbHBlcnMvdGhyb3R0bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4LXNhZ2EvZXMvaW50ZXJuYWwvc2FnYUhlbHBlcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVkZWZpbmUtYWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Zvci1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hbi1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtc3BlY2llcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWFic29sdXRlLWluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3VpZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wcm9wZXJ0eS1kZXNjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3ZhbGlkYXRlLWNvbGxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlcmF0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy10cmltLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC10by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC1zYWdhL2VzL2ludGVybmFsL3NjaGVkdWxlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYWN0aW9uc19zYWdhL3Rvb2xib3hzb3phaS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYWN0aW9uc19zdS9zZWxlY3Rib3guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY2xhc3NvZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtcGllLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lvYmplY3QuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYWN0aW9uc19zYWdhL3Rvb2xib3hib3hkYXRhLmpzIiwid2VicGFjazovLy8uL3NyYy9hY3Rpb25zX3NhZ2Evc2VsZWN0Ym94LmpzIiwid2VicGFjazovLy8uL3NyYy9saWJzL3N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtY29sbGVjdGlvbi1mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1jb2xsZWN0aW9uLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1mb3JjZWQtcGFtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3R5cGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdXNlci1hZ2VudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZpeC1yZS13a3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmxhZ3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1kZXRlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtcmVnZXhwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWluY2x1ZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NoYXJlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW52YXJpYW50L2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYnMvdGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYWN0aW9uc19zYWdhL25hZ2FzaGkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYnMvYm94LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3R5cGVkLWJ1ZmZlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21pY3JvdGFzay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190YXNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lml0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktc3BlY2llcy1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY3JlYXRlLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLWFycmF5LWl0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmFpbHMtaXMtcmVnZXhwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1jb250ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLWV4cG0xLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctcmVwZWF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2luaGVyaXQtaWYtcmVxdWlyZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXdzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1wcm90by5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19odG1sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2VudW0tYnVnLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLWtleS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MtZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RvbS1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2VtcHR5RnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2ludmFyaWFudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgvZXMvcmVkdXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9saWJzL3NvemFpLmpzIiwid2VicGFjazovLy8uL3NyYy9zYWdhcy9uYWdhc2hpLmpzIiwid2VicGFjazovLy8uL3NyYy9hY3Rpb25zX3NhZ2EvdG9vbGJveGxpbmsuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FjdGlvbnNfc2FnYS90b29sYm94LmpzIiwid2VicGFjazovLy8uL3NyYy9hY3Rpb25zX3NhZ2EvdG9vbGJveHRleHRkYXRhLmpzIiwid2VicGFjazovLy8uL3NyYy9hY3Rpb25zX3NhZ2EvdG9vbGJveHNjYWxlLmpzIiwid2VicGFjazovLy8uL3NyYy9hY3Rpb25zX3N1L3Rvb2xib3hsaW5rLmpzIiwid2VicGFjazovLy8uL3NyYy9hY3Rpb25zX3N1L3Rvb2xib3hzb3phaS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYWN0aW9uc19zdS90b29sYm94dGV4dGRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FjdGlvbnNfc3UvdG9vbGJveGJveGRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FjdGlvbnNfc3UvdG9vbGJveHNjYWxlLmpzIiwid2VicGFjazovLy8uL3NyYy9hY3Rpb25zX3N1L3Rvb2xib3guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1zY2FsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1mcm9tLWl0ZXJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24tdG8tanNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtdG8tYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXBhZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mbGF0dGVuLWludG8tYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb3duLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi13ZWFrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LndlYWstbWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLXN0cm9uZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcHJvbWlzZS1yZXNvbHZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3BlcmZvcm0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmZsYWdzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItc3RlcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1jb3B5LXdpdGhpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1yZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1jYWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtZnJvdW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtbG9nMXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hLW51bWJlci12YWx1ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wYXJzZS1mbG9hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW52b2tlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2JpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWFzc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wbi1leHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qta2V5cy1pbnRlcm5hbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MtZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2llOC1kb20tZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9lbXB0eU9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LWFzc2lnbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL3BvbnlmaWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC1zYWdhL2VzL2ludGVybmFsL3Byb2MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4LXNhZ2EvZXMvaW50ZXJuYWwvcnVuU2FnYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtc2FnYS9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtc2FnYS9lcy9pbnRlcm5hbC9taWRkbGV3YXJlLmpzIiwid2VicGFjazovLy8uL3NyYy9zYWdhcy9zY2FsZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2FnYXMvdG9vbGJveC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbGlicy9saW5rLmpzIiwid2VicGFjazovLy8uL3NyYy9zYWdhcy9zZWxlY3Rib3guanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NhZ2FzL3Jvb3RTYWdhLmpzIiwid2VicGFjazovLy8uL3NyYy9yZWR1Y2Vycy9saW5rcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcmVkdWNlcnMvc296YWkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlZHVjZXJzL3Rvb2xib3hzLmpzIiwid2VicGFjazovLy8uL3NyYy9yZWR1Y2Vycy9mb2N1c2JveC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbGlicy90ZXh0Z3JpZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcmVkdWNlcnMvYm94cy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcmVkdWNlcnMvc2NhbGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlZHVjZXJzL3Jvb3RSZWR1Y2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9saWJzL2FycmF5LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1Rvb2xCb3hMaW5rLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1Rvb2xCb3hMaW5rTWFwLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1Rvb2xCb3hTb3phaS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ub29sQm94U296YWlNYXAuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvVG9vbEJveFRleHREYXRhLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1Rvb2xCb3hUZXh0RGF0YU1hcC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ub29sQm94Qm94RGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ub29sQm94Qm94RGF0YU1hcC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ub29sQm94U2NhbGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvVG9vbEJveFNjYWxlTWFwLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1Rvb2xCb3guanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvVG9vbEJveE1hcC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TZWxlY3RTb25vdGFCb3guanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU2VsZWN0U29ub3RhQm94TWFwLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1NlbGVjdEdyb3VwQm94LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1NlbGVjdEdyb3VwQm94TWFwLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0hhbmRsZUQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvSGFuZGxlRE1hcC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9IYW5kbGVSLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0hhbmRsZVJNYXAuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvSGFuZGxlTC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9IYW5kbGVMTWFwLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0hhbmRsZVUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvSGFuZGxlVU1hcC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TZWxlY3RFZGl0Qm94LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1NlbGVjdEVkaXRCb3hNYXAuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU2VsZWN0Qm94cy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TZWxlY3RCb3hzTWFwLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1RleHRCb3guanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvVGV4dEJveE1hcC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Cb3hzLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0JveHNNYXAuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvR3JpZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TdmdJbWFnZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TdmdJbWFnZU1hcC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9WaWV3Qm94LmpzIiwid2VicGFjazovLy8uL3NyYy9zY3JlZW5zL1RvcFNjcmVlbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2NyZWVucy9Ub3BTY3JlZW5NYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4LWxvZ2dlci9kaXN0L3JlZHV4LWxvZ2dlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9oYXJtb255LW1vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2NyZWVucy9CYXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlcGxhY2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvY29yZS5yZWdleHAuZXNjYXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL3JlZ2V4cC9lc2NhcGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuaW1tZWRpYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLnRpbWVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYnNlcnZhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmFzYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0Lmhhcy1vd24tbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5oYXMtbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtb3duLW1ldGFkYXRhLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtb3duLW1ldGFkYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5kZWxldGUtbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5kZWZpbmUtbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucHJvbWlzZS50cnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucHJvbWlzZS5maW5hbGx5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguc2lnbmJpdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLnVtdWxoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguc2NhbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5yYWRpYW5zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGgucmFkLXBlci1kZWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5pbXVsaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmlzdWJoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguaWFkZGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5mc2NhbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5kZWdyZWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguZGVnLXBlci1yYWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5jbGFtcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5lcnJvci5pcy1lcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zeXN0ZW0uZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lmdsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy53ZWFrLXNldC5mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LndlYWstbWFwLmZyb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc2V0LmZyb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWFwLmZyb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcud2Vhay1zZXQub2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcud2Vhay1tYXAub2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc2V0Lm9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hcC5vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zZXQudG8tanNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXAudG8tanNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QubG9va3VwLXNldHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QubG9va3VwLWdldHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZGVmaW5lLXNldHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZGVmaW5lLWdldHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZW50cmllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QudmFsdWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN5bWJvbC5vYnNlcnZhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcubWF0Y2gtYWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy50cmltLXJpZ2h0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy50cmltLWxlZnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1lbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1zdGFydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcuYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuZmxhdHRlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5hcnJheS5mbGF0LW1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5hcnJheS5pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5zZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5wcmV2ZW50LWV4dGVuc2lvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5vd24ta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmlzLWV4dGVuc2libGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5oYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZW51bWVyYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVsZXRlLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuY29uc3RydWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuYXBwbHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZmxvYXQ2NC1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5mbG9hdDMyLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQzMi1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5pbnQzMi1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50MTYtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50MTYtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDgtY2xhbXBlZC1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5pbnQ4LWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmRhdGEtdmlldy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5hcnJheS1idWZmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYud2Vhay1zZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucHJvbWlzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuc3BsaXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnNlYXJjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAucmVwbGFjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAubWF0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc3BlY2llcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maW5kLWluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5jb3B5LXdpdGhpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5sYXN0LWluZGV4LW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmluZGV4LW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZS1yaWdodC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZXZlcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc29tZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkubWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXNwZWNpZXMtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZm9yLWVhY2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc29ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zbGljZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5qb2luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lm9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZyb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGF0ZS10by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGF0ZS10by1pc28tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8taXNvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLWpzb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS5ub3cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN1cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3ViLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdHJpa2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnNtYWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5saW5rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pdGFsaWNzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5mb250c2l6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udGNvbG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5maXhlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYm9sZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYmxpbmsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJpZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYW5jaG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdGFydHMtd2l0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcucmVwZWF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZW5kcy13aXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5jb2RlLXBvaW50LWF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcudHJpbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcucmF3LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5mcm9tLWNvZGUtcG9pbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC50cnVuYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnRhbmguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5zaW5oLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5sb2cxcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzEwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguaW11bC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmh5cG90LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguZnJvdW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguZXhwbTEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jb3NoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY2x6MzIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jYnJ0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYXRhbmguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hc2luaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmFjb3NoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWZsb2F0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5taW4tc2FmZS1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5tYXgtc2FmZS1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1zYWZlLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLW5hbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtZmluaXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5lcHNpbG9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci50by1wcmVjaXNpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnRvLWZpeGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wYXJzZS1mbG9hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24uaGFzLWluc3RhbmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmZ1bmN0aW9uLm5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24uYmluZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NhbWUtdmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLWV4dGVuc2libGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLXNlYWxlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZnJvemVuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5wcmV2ZW50LWV4dGVuc2lvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnNlYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmZyZWV6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZW51bS1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9zaGltLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2lzTm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvaXNUZXh0Tm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvY29udGFpbnNOb2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9zaGFsbG93RXF1YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2dldEFjdGl2ZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19mcmVlR2xvYmFsLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsInZhbHVlIiwibiIsIl9fZXNNb2R1bGUiLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwiY2xvbmVhYmxlR2VuZXJhdG9yIiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJ0YXJnZXQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJrZXkiLCJfdHlwZW9mIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJvYmoiLCJjb25zdHJ1Y3RvciIsInN5bSIsImlkIiwiVEFTSyIsIkhFTFBFUiIsIk1BVENIIiwiQ0FOQ0VMIiwiU0FHQV9BQ1RJT04iLCJTRUxGX0NBTkNFTExBVElPTiIsImtvbnN0IiwidiIsImtUcnVlIiwibm9vcCIsImlkZW50IiwiY2hlY2siLCJwcmVkaWNhdGUiLCJlcnJvciIsImxvZyIsIkVycm9yIiwiaGFzT3duIiwiaXMiLCJub3RVbmRlZiIsInVuZGVmIiwidW5kZWZpbmVkIiwiZnVuYyIsImYiLCJudW1iZXIiLCJzdHJpbmciLCJhcnJheSIsIkFycmF5IiwiaXNBcnJheSIsInByb21pc2UiLCJ0aGVuIiwiaXQiLCJuZXh0IiwidGhyb3ciLCJpdGVyYWJsZSIsInRhc2siLCJ0Iiwib2JzZXJ2YWJsZSIsIm9iIiwic3Vic2NyaWJlIiwiYnVmZmVyIiwiYnVmIiwiaXNFbXB0eSIsInRha2UiLCJwdXQiLCJwYXR0ZXJuIiwicGF0IiwiY2hhbm5lbCIsImNoIiwiY2xvc2UiLCJoZWxwZXIiLCJzdHJpbmdhYmxlRnVuYyIsInJlbW92ZSIsIml0ZW0iLCJpbmRleCIsImluZGV4T2YiLCJzcGxpY2UiLCJmcm9tIiwiYXJyIiwiZGVmZXJyZWQiLCJwcm9wcyIsImRlZiIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiYXJyYXlPZkRlZmZlcmVkIiwicHVzaCIsImRlbGF5IiwibXMiLCJ2YWwiLCJ0aW1lb3V0SWQiLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiY3JlYXRlTW9ja1Rhc2siLCJfcmVmIiwicnVubmluZyIsIl9yZXN1bHQiLCJfZXJyb3IiLCJpc1J1bm5pbmciLCJyZXN1bHQiLCJzZXRSdW5uaW5nIiwiYiIsInNldFJlc3VsdCIsInNldEVycm9yIiwiZSIsInVpZCIsInNlZWQiLCJhdXRvSW5jIiwia1Rocm93IiwiZXJyIiwia1JldHVybiIsImRvbmUiLCJtYWtlSXRlcmF0b3IiLCJ0aHJvIiwiaXNIZWxwZXIiLCJyZXR1cm4iLCJsZXZlbCIsIm1lc3NhZ2UiLCJ3aW5kb3ciLCJjb25zb2xlIiwic3RhY2siLCJkZXByZWNhdGUiLCJmbiIsImRlcHJlY2F0aW9uV2FybmluZyIsImFwcGx5IiwidXBkYXRlSW5jZW50aXZlIiwiZGVwcmVjYXRlZCIsInByZWZlcnJlZCIsImludGVybmFsRXJyIiwiY3JlYXRlU2V0Q29udGV4dFdhcm5pbmciLCJjdHgiLCJ3cmFwU2FnYURpc3BhdGNoIiwiZGlzcGF0Y2giLCJhY3Rpb24iLCJnZW5lcmF0b3JGdW5jIiwiX2xlbiIsImFyZ3MiLCJfa2V5IiwiaGlzdG9yeSIsImdlbiIsImFyZyIsImNsb25lIiwiY2xvbmVkR2VuIiwiZm9yRWFjaCIsImV4Y2VwdGlvbiIsImdsb2JhbCIsImNvcmUiLCJoaWRlIiwicmVkZWZpbmUiLCIkZXhwb3J0IiwidHlwZSIsIm93biIsIm91dCIsImV4cCIsIklTX0ZPUkNFRCIsIkYiLCJJU19HTE9CQUwiLCJHIiwiSVNfU1RBVElDIiwiUyIsIklTX1BST1RPIiwiUCIsIklTX0JJTkQiLCJCIiwiZXhwUHJvdG8iLCJGdW5jdGlvbiIsIlUiLCJXIiwiUiIsIklPIiwiX3V0aWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJUQUtFIiwiUFVUIiwiQUxMIiwiUkFDRSIsIkNBTEwiLCJDUFMiLCJGT1JLIiwiSk9JTiIsIlNFTEVDVCIsIkFDVElPTl9DSEFOTkVMIiwiQ0FOQ0VMTEVEIiwiRkxVU0giLCJHRVRfQ09OVEVYVCIsIlNFVF9DT05URVhUIiwiVEVTVF9ISU5UIiwiZWZmZWN0IiwicGF5bG9hZCIsImRldGFjaCIsImVmZiIsImFzRWZmZWN0IiwiZm9yayIsImRldGFjaGVkIiwicGF0dGVybk9yQ2hhbm5lbCIsIlN0cmluZyIsIm1heWJlIiwidGFrZW0iLCJhbGwiLCJlZmZlY3RzIiwicmFjZSIsImdldEZuQ2FsbERlc2MiLCJtZXRoIiwiY29udGV4dCIsIl9mbiIsIl9mbjIiLCJjcHMiLCJfbGVuMiIsIl9rZXkyIiwiX2xlbjMiLCJfa2V5MyIsInNwYXduIiwiX2xlbjQiLCJfa2V5NCIsImNvbmNhdCIsImpvaW4iLCJfbGVuNSIsInRhc2tzIiwiX2tleTUiLCJtYXAiLCJjYW5jZWwiLCJfbGVuNiIsIl9rZXk2Iiwic2VsZWN0Iiwic2VsZWN0b3IiLCJfbGVuNyIsIl9rZXk3IiwiYWN0aW9uQ2hhbm5lbCIsImNhbmNlbGxlZCIsImZsdXNoIiwiZ2V0Q29udGV4dCIsInByb3AiLCJzZXRDb250ZXh0IiwidGFrZUV2ZXJ5Iiwid29ya2VyIiwiX2xlbjgiLCJfa2V5OCIsIl9zYWdhSGVscGVyc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwidGFrZUxhdGVzdCIsIl9sZW45IiwiX2tleTkiLCJ0aHJvdHRsZSIsIl9sZW4xMCIsIl9rZXkxMCIsInN5bmMiLCJjcmVhdGVBc0VmZmVjdFR5cGUiLCJpc09iamVjdCIsIlR5cGVFcnJvciIsIk1hdGgiLCJzZWxmIiwiX19nIiwiZXhlYyIsInN0b3JlIiwiVVNFX1NZTUJPTCIsInRvSW50ZWdlciIsIm1pbiIsImFuT2JqZWN0IiwiSUU4X0RPTV9ERUZJTkUiLCJ0b1ByaW1pdGl2ZSIsImRQIiwiTyIsIkF0dHJpYnV0ZXMiLCJhIiwic3Vic2NyaXB0aW9uU2hhcGUiLCJwcm9wX3R5cGVzX2RlZmF1bHQiLCJzaGFwZSIsInRyeVN1YnNjcmliZSIsImlzUmVxdWlyZWQiLCJ0cnlVbnN1YnNjcmliZSIsIm5vdGlmeU5lc3RlZFN1YnMiLCJpc1N1YnNjcmliZWQiLCJzdG9yZVNoYXBlIiwiZ2V0U3RhdGUiLCJjcmVhdGVQcm92aWRlciIsIl9Qcm92aWRlciRjaGlsZENvbnRleCIsInN0b3JlS2V5Iiwic3Vic2NyaXB0aW9uS2V5IiwiUHJvdmlkZXIiLCJfQ29tcG9uZW50IiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIl9jbGFzc0NhbGxDaGVjayIsInRoaXMiLCJfdGhpcyIsIlJlZmVyZW5jZUVycm9yIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJ3cml0YWJsZSIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiX2luaGVyaXRzIiwiZ2V0Q2hpbGRDb250ZXh0IiwicmVuZGVyIiwicmVhY3QiLCJvbmx5IiwiY2hpbGRyZW4iLCJwcm9wVHlwZXMiLCJlbGVtZW50IiwiY2hpbGRDb250ZXh0VHlwZXMiLCJjb21wb25lbnRzX1Byb3ZpZGVyIiwiQ0xFQVJFRCIsIm51bGxMaXN0ZW5lcnMiLCJub3RpZnkiLCJTdWJzY3JpcHRpb24iLCJwYXJlbnRTdWIiLCJvblN0YXRlQ2hhbmdlIiwiU3Vic2NyaXB0aW9uX2NsYXNzQ2FsbENoZWNrIiwidW5zdWJzY3JpYmUiLCJsaXN0ZW5lcnMiLCJhZGROZXN0ZWRTdWIiLCJsaXN0ZW5lciIsIkJvb2xlYW4iLCJjdXJyZW50IiwiY2xlYXIiLCJzbGljZSIsImhvdFJlbG9hZGluZ1ZlcnNpb24iLCJkdW1teVN0YXRlIiwiY29ubmVjdEFkdmFuY2VkIiwic2VsZWN0b3JGYWN0b3J5IiwiX2NvbnRleHRUeXBlcyIsIl9jaGlsZENvbnRleHRUeXBlcyIsIl9yZWYkZ2V0RGlzcGxheU5hbWUiLCJnZXREaXNwbGF5TmFtZSIsIl9yZWYkbWV0aG9kTmFtZSIsIm1ldGhvZE5hbWUiLCJfcmVmJHJlbmRlckNvdW50UHJvcCIsInJlbmRlckNvdW50UHJvcCIsIl9yZWYkc2hvdWxkSGFuZGxlU3RhdCIsInNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyIsIl9yZWYkc3RvcmVLZXkiLCJfcmVmJHdpdGhSZWYiLCJ3aXRoUmVmIiwiY29ubmVjdE9wdGlvbnMiLCJrZXlzIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwidmVyc2lvbiIsImNvbnRleHRUeXBlcyIsIldyYXBwZWRDb21wb25lbnQiLCJicm93c2VyX2RlZmF1bHQiLCJKU09OIiwic3RyaW5naWZ5Iiwid3JhcHBlZENvbXBvbmVudE5hbWUiLCJkaXNwbGF5TmFtZSIsInNlbGVjdG9yRmFjdG9yeU9wdGlvbnMiLCJDb25uZWN0IiwiY29ubmVjdEFkdmFuY2VkX2NsYXNzQ2FsbENoZWNrIiwiY29ubmVjdEFkdmFuY2VkX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJzdGF0ZSIsInJlbmRlckNvdW50IiwicHJvcHNNb2RlIiwic2V0V3JhcHBlZEluc3RhbmNlIiwiYmluZCIsImluaXRTZWxlY3RvciIsImluaXRTdWJzY3JpcHRpb24iLCJjb25uZWN0QWR2YW5jZWRfaW5oZXJpdHMiLCJfcmVmMiIsInN1YnNjcmlwdGlvbiIsImNvbXBvbmVudERpZE1vdW50IiwicnVuIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiZm9yY2VVcGRhdGUiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwibmV4dFByb3BzIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJnZXRXcmFwcGVkSW5zdGFuY2UiLCJ3cmFwcGVkSW5zdGFuY2UiLCJyZWYiLCJzb3VyY2VTZWxlY3RvciIsIm1ha2VTZWxlY3RvclN0YXRlZnVsIiwiY29tcG9uZW50RGlkVXBkYXRlIiwibm90aWZ5TmVzdGVkU3Vic09uQ29tcG9uZW50RGlkVXBkYXRlIiwic2V0U3RhdGUiLCJhZGRFeHRyYVByb3BzIiwid2l0aEV4dHJhcyIsImhvaXN0X25vbl9yZWFjdF9zdGF0aWNzX2RlZmF1bHQiLCJ4IiwieSIsInNoYWxsb3dFcXVhbCIsIm9iakEiLCJvYmpCIiwia2V5c0EiLCJrZXlzQiIsImZyZWVTZWxmIiwiX1N5bWJvbCIsIl9mcmVlR2xvYmFsIiwib2JqZWN0UHJvdG8iLCJ0b1N0cmluZyIsInRvU3RyaW5nVGFnIiwiZ2V0UHJvdG90eXBlT2YiLCJmdW5jUHJvdG8iLCJpc1BsYWluT2JqZWN0X29iamVjdFByb3RvIiwiZnVuY1RvU3RyaW5nIiwid3JhcE1hcFRvUHJvcHNDb25zdGFudCIsImdldENvbnN0YW50Iiwib3B0aW9ucyIsImNvbnN0YW50IiwiY29uc3RhbnRTZWxlY3RvciIsImRlcGVuZHNPbk93blByb3BzIiwiZ2V0RGVwZW5kc09uT3duUHJvcHMiLCJtYXBUb1Byb3BzIiwid3JhcE1hcFRvUHJvcHNGdW5jIiwicHJveHkiLCJzdGF0ZU9yRGlzcGF0Y2giLCJvd25Qcm9wcyIsImNvbm5lY3RfbWFwRGlzcGF0Y2hUb1Byb3BzIiwibWFwRGlzcGF0Y2hUb1Byb3BzIiwicmVkdXgiLCJjb25uZWN0X21hcFN0YXRlVG9Qcm9wcyIsIm1hcFN0YXRlVG9Qcm9wcyIsIm1lcmdlUHJvcHNfZXh0ZW5kcyIsImRlZmF1bHRNZXJnZVByb3BzIiwic3RhdGVQcm9wcyIsImRpc3BhdGNoUHJvcHMiLCJjb25uZWN0X21lcmdlUHJvcHMiLCJtZXJnZVByb3BzIiwicHVyZSIsImFyZU1lcmdlZFByb3BzRXF1YWwiLCJoYXNSdW5PbmNlIiwibWVyZ2VkUHJvcHMiLCJuZXh0TWVyZ2VkUHJvcHMiLCJ3cmFwTWVyZ2VQcm9wc0Z1bmMiLCJpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IiwicHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkiLCJhcmVTdGF0ZXNFcXVhbCIsImFyZU93blByb3BzRXF1YWwiLCJhcmVTdGF0ZVByb3BzRXF1YWwiLCJoYXNSdW5BdExlYXN0T25jZSIsImhhbmRsZVN1YnNlcXVlbnRDYWxscyIsIm5leHRTdGF0ZSIsIm5leHRPd25Qcm9wcyIsIm5leHRTdGF0ZVByb3BzIiwic3RhdGVQcm9wc0NoYW5nZWQiLCJwcm9wc0NoYW5nZWQiLCJzdGF0ZUNoYW5nZWQiLCJmaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IiwiaW5pdE1hcFN0YXRlVG9Qcm9wcyIsImluaXRNYXBEaXNwYXRjaFRvUHJvcHMiLCJpbml0TWVyZ2VQcm9wcyIsInNlbGVjdG9yRmFjdG9yeV9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsImNvbm5lY3RfZXh0ZW5kcyIsIm1hdGNoIiwiZmFjdG9yaWVzIiwic3RyaWN0RXF1YWwiLCJjb25uZWN0X2Nvbm5lY3QiLCJfcmVmJGNvbm5lY3RIT0MiLCJjb25uZWN0SE9DIiwiX3JlZiRtYXBTdGF0ZVRvUHJvcHNGIiwibWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzIiwiX3JlZiRtYXBEaXNwYXRjaFRvUHJvIiwibWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzIiwiX3JlZiRtZXJnZVByb3BzRmFjdG9yIiwibWVyZ2VQcm9wc0ZhY3RvcmllcyIsIl9yZWYkc2VsZWN0b3JGYWN0b3J5IiwiX3JlZjIkcHVyZSIsIl9yZWYyJGFyZVN0YXRlc0VxdWFsIiwiX3JlZjIkYXJlT3duUHJvcHNFcXVhIiwiX3JlZjIkYXJlU3RhdGVQcm9wc0VxIiwiX3JlZjIkYXJlTWVyZ2VkUHJvcHNFIiwiZXh0cmFPcHRpb25zIiwiY29ubmVjdF9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsImRlZmluZWQiLCJfc2NoZWR1bGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJFTkQiLCJpc0VuZCIsImVtaXR0ZXIiLCJzdWJzY3JpYmVycyIsInN1YiIsImVtaXQiLCJsZW4iLCJJTlZBTElEX0JVRkZFUiIsIlVOREVGSU5FRF9JTlBVVF9FUlJPUiIsIl9idWZmZXJzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJmaXhlZCIsImNsb3NlZCIsInRha2VycyIsImNoZWNrRm9yYmlkZGVuU3RhdGVzIiwiY2IiLCJpbnB1dCIsIl9fdGFrZXJzX18iLCJfX2Nsb3NlZF9fIiwiZXZlbnRDaGFubmVsIiwibm9uZSIsIm1hdGNoZXIiLCJjaGFuIiwic3RkQ2hhbm5lbCIsIlphaHlvIiwid2luZG93QXJlYSIsInciLCJkb2N1bWVudCIsImRvY3VtZW50RWxlbWVudCIsImNsaWVudFdpZHRoIiwiaCIsImNsaWVudEhlaWdodCIsImx1VG9ydVgiLCJrdyIsImx1VG9ydVkiLCJraCIsInJ1VG9sdVgiLCJydVRvbHVZIiwiY2hhbmdlUmVjdFRvQXJlYSIsIngxIiwieTEiLCJ4MiIsInkyIiwicmVjdCIsImNoYW5nZUFyZWFUb1JlY3QiLCJsdVRvcnVSZWN0IiwicnVUb2x1UmVjdCIsImx1VG9ydUFyZWEiLCJhcmVhIiwicnVUb2x1QXJlYSIsImx1VG9ydVJlY3RUb0FyZWEiLCJydVRvbHVSZWN0VG9BcmVhIiwibHVUb3J1QXJlYVRvUmVjdCIsInJ1VG9sdUFyZWFUb1JlY3QiLCJmYWlscyIsInF1b3QiLCJjcmVhdGVIVE1MIiwidGFnIiwiYXR0cmlidXRlIiwicDEiLCJyZXBsYWNlIiwiTkFNRSIsInRlc3QiLCJ0b0xvd2VyQ2FzZSIsInNwbGl0IiwiaGFzIiwiU1JDIiwiJHRvU3RyaW5nIiwiVFBMIiwiaW5zcGVjdFNvdXJjZSIsInNhZmUiLCJpc0Z1bmN0aW9uIiwiY3JlYXRlRGVzYyIsInRvT2JqZWN0IiwiSUVfUFJPVE8iLCJPYmplY3RQcm90byIsInBJRSIsInRvSU9iamVjdCIsImdPUEQiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJJT2JqZWN0IiwibWV0aG9kIiwiYUZ1bmN0aW9uIiwidGhhdCIsIl9fZSIsIkRlZmluZSIsInN2Z2ltYWdlc2l6ZSIsIndpZHRoIiwiaGVpZ2h0IiwiZ3JpZCIsImhhbmRsZSIsInRvTGVuZ3RoIiwiYXNjIiwiVFlQRSIsIiRjcmVhdGUiLCJJU19NQVAiLCJJU19GSUxURVIiLCJJU19TT01FIiwiSVNfRVZFUlkiLCJJU19GSU5EX0lOREVYIiwiTk9fSE9MRVMiLCIkdGhpcyIsImNhbGxiYWNrZm4iLCJyZXMiLCJLRVkiLCJjZWlsIiwiZmxvb3IiLCJpc05hTiIsInZhbHVlT2YiLCJNYXAiLCJzaGFyZWQiLCJnZXRPckNyZWF0ZU1ldGFkYXRhTWFwIiwidGFyZ2V0S2V5IiwidGFyZ2V0TWV0YWRhdGEiLCJzZXQiLCJrZXlNZXRhZGF0YSIsIk1ldGFkYXRhS2V5IiwibWV0YWRhdGFNYXAiLCJNZXRhZGF0YVZhbHVlIiwiXyIsIkxJQlJBUlkiLCIkdHlwZWQiLCIkYnVmZmVyIiwiYW5JbnN0YW5jZSIsInByb3BlcnR5RGVzYyIsInJlZGVmaW5lQWxsIiwidG9JbmRleCIsInRvQWJzb2x1dGVJbmRleCIsImNsYXNzb2YiLCJpc0FycmF5SXRlciIsImdPUE4iLCJnZXRJdGVyRm4iLCJ3a3MiLCJjcmVhdGVBcnJheU1ldGhvZCIsImNyZWF0ZUFycmF5SW5jbHVkZXMiLCJzcGVjaWVzQ29uc3RydWN0b3IiLCJBcnJheUl0ZXJhdG9ycyIsIkl0ZXJhdG9ycyIsIiRpdGVyRGV0ZWN0Iiwic2V0U3BlY2llcyIsImFycmF5RmlsbCIsImFycmF5Q29weVdpdGhpbiIsIiREUCIsIiRHT1BEIiwiUmFuZ2VFcnJvciIsIlVpbnQ4QXJyYXkiLCJBcnJheVByb3RvIiwiJEFycmF5QnVmZmVyIiwiQXJyYXlCdWZmZXIiLCIkRGF0YVZpZXciLCJEYXRhVmlldyIsImFycmF5Rm9yRWFjaCIsImFycmF5RmlsdGVyIiwiYXJyYXlTb21lIiwiYXJyYXlFdmVyeSIsImFycmF5RmluZCIsImFycmF5RmluZEluZGV4IiwiYXJyYXlJbmNsdWRlcyIsImFycmF5SW5kZXhPZiIsImFycmF5VmFsdWVzIiwidmFsdWVzIiwiYXJyYXlLZXlzIiwiYXJyYXlFbnRyaWVzIiwiZW50cmllcyIsImFycmF5TGFzdEluZGV4T2YiLCJsYXN0SW5kZXhPZiIsImFycmF5UmVkdWNlIiwicmVkdWNlIiwiYXJyYXlSZWR1Y2VSaWdodCIsInJlZHVjZVJpZ2h0IiwiYXJyYXlKb2luIiwiYXJyYXlTb3J0Iiwic29ydCIsImFycmF5U2xpY2UiLCJhcnJheVRvU3RyaW5nIiwiYXJyYXlUb0xvY2FsZVN0cmluZyIsInRvTG9jYWxlU3RyaW5nIiwiSVRFUkFUT1IiLCJUQUciLCJUWVBFRF9DT05TVFJVQ1RPUiIsIkRFRl9DT05TVFJVQ1RPUiIsIkFMTF9DT05TVFJVQ1RPUlMiLCJDT05TVFIiLCJUWVBFRF9BUlJBWSIsIlRZUEVEIiwiVklFVyIsIiRtYXAiLCJhbGxvY2F0ZSIsIkxJVFRMRV9FTkRJQU4iLCJVaW50MTZBcnJheSIsIkZPUkNFRF9TRVQiLCJ0b09mZnNldCIsIkJZVEVTIiwib2Zmc2V0IiwidmFsaWRhdGUiLCJDIiwic3BlY2llc0Zyb21MaXN0IiwibGlzdCIsImZyb21MaXN0IiwiYWRkR2V0dGVyIiwiaW50ZXJuYWwiLCJfZCIsIiRmcm9tIiwic3RlcCIsImFMZW4iLCJtYXBmbiIsIm1hcHBpbmciLCJpdGVyRm4iLCIkb2YiLCJUT19MT0NBTEVfQlVHIiwiJHRvTG9jYWxlU3RyaW5nIiwicHJvdG8iLCJjb3B5V2l0aGluIiwic3RhcnQiLCJldmVyeSIsImZpbGwiLCJmaWx0ZXIiLCJmaW5kIiwiZmluZEluZGV4Iiwic2VhcmNoRWxlbWVudCIsImluY2x1ZGVzIiwic2VwYXJhdG9yIiwicmV2ZXJzZSIsIm1pZGRsZSIsInNvbWUiLCJjb21wYXJlZm4iLCJzdWJhcnJheSIsImJlZ2luIiwiZW5kIiwiJGJlZ2luIiwiYnl0ZU9mZnNldCIsIkJZVEVTX1BFUl9FTEVNRU5UIiwiJHNsaWNlIiwiJHNldCIsImFycmF5TGlrZSIsInNyYyIsIiRpdGVyYXRvcnMiLCJpc1RBSW5kZXgiLCIkZ2V0RGVzYyIsIiRzZXREZXNjIiwiZGVzYyIsIiRUeXBlZEFycmF5UHJvdG90eXBlJCIsIndyYXBwZXIiLCJDTEFNUEVEIiwiR0VUVEVSIiwiU0VUVEVSIiwiVHlwZWRBcnJheSIsIkJhc2UiLCJUQUMiLCJGT1JDRUQiLCJBQlYiLCJUeXBlZEFycmF5UHJvdG90eXBlIiwiYWRkRWxlbWVudCIsImRhdGEiLCJyb3VuZCIsInNldHRlciIsIiRvZmZzZXQiLCIkbGVuZ3RoIiwiYnl0ZUxlbmd0aCIsImtsYXNzIiwiJGxlbiIsIml0ZXIiLCIkbmF0aXZlSXRlcmF0b3IiLCJDT1JSRUNUX0lURVJfTkFNRSIsIiRpdGVyYXRvciIsIm9mIiwiQlVGRkVSX09WRVJGTE9XIiwiT05fT1ZFUkZMT1dfVEhST1ciLCJPTl9PVkVSRkxPV19TTElERSIsIk9OX09WRVJGTE9XX0VYUEFORCIsInplcm9CdWZmZXIiLCJyaW5nQnVmZmVyIiwibGltaXQiLCJvdmVyZmxvd0FjdGlvbiIsInB1c2hJbmRleCIsInBvcEluZGV4IiwiaXRlbXMiLCJkb3VibGVkTGltaXQiLCJidWZmZXJzIiwiZHJvcHBpbmciLCJzbGlkaW5nIiwiZXhwYW5kaW5nIiwiaW5pdGlhbFNpemUiLCJVTlNDT1BBQkxFUyIsIk1FVEEiLCJzZXREZXNjIiwiaXNFeHRlbnNpYmxlIiwiRlJFRVpFIiwicHJldmVudEV4dGVuc2lvbnMiLCJzZXRNZXRhIiwibWV0YSIsIk5FRUQiLCJmYXN0S2V5IiwiZ2V0V2VhayIsIm9uRnJlZXplIiwicUVuZCIsInNhZmVOYW1lIiwidXRpbHMiLCJlbnRyeSIsImZzbUl0ZXJhdG9yIiwiZnNtIiwicTAiLCJ1cGRhdGVTdGF0ZSIsInFOZXh0IiwiX2ZzbSRxTmV4dCIsInEiLCJvdXRwdXQiLCJfdXBkYXRlU3RhdGUiLCJ5VGFrZSIsImlvIiwic2V0QWN0aW9uIiwiYWMiLCJxMSIsInEyIiwiaW50ZXJuYWxfY2hhbm5lbCIsInlGb3JrIiwic2V0VGFzayIsInlDYW5jZWwiLCJxMyIsImRlbGF5TGVuZ3RoIiwieUFjdGlvbkNoYW5uZWwiLCJ5RGVsYXkiLCJzZXRDaGFubmVsIiwicTQiLCJoZWxwZXJOYW1lIiwic2FnYUhlbHBlcnNfdGFrZUV2ZXJ5Iiwic2FnYUhlbHBlcnNfdGFrZUxhdGVzdCIsInNhZ2FIZWxwZXJzX3Rocm90dGxlIiwiQlJFQUsiLCJSRVRVUk4iLCJmb3JiaWRkZW5GaWVsZCIsIkRFU0NSSVBUT1JTIiwiU1BFQ0lFUyIsIiRrZXlzIiwiaGlkZGVuS2V5cyIsImdldE93blByb3BlcnR5TmFtZXMiLCJkUHMiLCJlbnVtQnVnS2V5cyIsIkVtcHR5IiwiY3JlYXRlRGljdCIsImlmcmFtZURvY3VtZW50IiwiaWZyYW1lIiwic3R5bGUiLCJkaXNwbGF5IiwiYXBwZW5kQ2hpbGQiLCJjb250ZW50V2luZG93Iiwib3BlbiIsIndyaXRlIiwibHQiLCJQcm9wZXJ0aWVzIiwibWF4IiwicHgiLCJyYW5kb20iLCJiaXRtYXAiLCJfdCIsInNwYWNlcyIsInNwYWNlIiwibHRyaW0iLCJSZWdFeHAiLCJydHJpbSIsImV4cG9ydGVyIiwiQUxJQVMiLCJGT1JDRSIsInRyaW0iLCJzdGF0IiwicXVldWUiLCJzZW1hcGhvcmUiLCJzdXNwZW5kIiwicmVsZWFzZSIsImFzYXAiLCJzaGlmdCIsIlNBR0FfVE9PTEJPWFNPWkFJX1NPWkFJX1VQREFURSIsIlNBR0FfVE9PTEJPWFNPWkFJX1NPWkFJX0RFTEVURSIsIlNBR0FfVE9PTEJPWFNPWkFJX1NPWkFJX0NSRUFURSIsIlNBR0FfVE9PTEJPWFNPWkFJX1NPWkFJX1NFTEVDVCIsIlNBR0FfVE9PTEJPWFNPWkFJX1NPWkFJX1RPR0dMRSIsIlNhZ2FfVG9vbEJveFNvemFpX1NvemFpX1VwZGF0ZSIsInNvemFpIiwiU2FnYV9Ub29sQm94U296YWlfU296YWlfRGVsZXRlIiwiU2FnYV9Ub29sQm94U296YWlfU296YWlfQ3JlYXRlIiwidGV4dCIsImltYWdlIiwiU2FnYV9Ub29sQm94U296YWlfU296YWlfU2VsZWN0IiwiU2FnYV9Ub29sQm94U296YWlfU296YWlfVG9nZ2xlIiwiU1VfU0VMRUNUQk9YX0JPWF9OT05TRUxFQ1QiLCJTVV9TRUxFQ1RCT1hfQk9YX1NFTEVDVCIsIlNVX1NFTEVDVEJPWF9FRElUQk9YX01PVkVFTkQiLCJTVV9TRUxFQ1RCT1hfRURJVEJPWF9DSEFOR0VTSVpFIiwiU1VfU2VsZWN0Qm94X0JveF9Ob25TZWxlY3QiLCJncm91cCIsIm5vIiwiU1VfU2VsZWN0Qm94X0JveF9TZWxlY3QiLCJTVV9TZWxlY3RCb3hfRWRpdEJveF9Nb3ZlRW5kIiwiU1VfU2VsZWN0Qm94X0VkaXRCb3hfQ2hhbmdlU2l6ZSIsImNvZiIsIkFSRyIsIlQiLCJ0cnlHZXQiLCJjYWxsZWUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsImciLCJldmFsIiwiU0FHQV9UT09MQk9YQk9YREFUQV9CT1hEQVRBX1VQREFURSIsIlNBR0FfVE9PTEJPWEJPWERBVEFfQk9YREFUQV9ERUxFVEUiLCJTQUdBX1RPT0xCT1hCT1hEQVRBX0JPWERBVEFfQ1JFQVRFIiwiU2FnYV9Ub29sQm94Qm94RGF0YV9Cb3hEYXRhX1VwZGF0ZSIsImJveCIsIlNhZ2FfVG9vbEJveEJveERhdGFfQm94RGF0YV9EZWxldGUiLCJTYWdhX1Rvb2xCb3hCb3hEYXRhX0JveERhdGFfQ3JlYXRlIiwiU0FHQV9TRUxFQ1RCT1hfQk9YX05PTlNFTEVDVCIsIlNBR0FfU0VMRUNUQk9YX0JPWF9TRUxFQ1QiLCJTQUdBX1NFTEVDVEJPWF9FRElUQk9YX01PVkVFTkQiLCJTQUdBX1NFTEVDVEJPWF9FRElUQk9YX0NIQU5HRVNJWkUiLCJTYWdhX1NlbGVjdEJveF9Cb3hfTm9uU2VsZWN0IiwiU2FnYV9TZWxlY3RCb3hfQm94X1NlbGVjdCIsIlNhZ2FfU2VsZWN0Qm94X0VkaXRCb3hfTW92ZUVuZCIsIlNhZ2FfU2VsZWN0Qm94X0VkaXRCb3hfQ2hhbmdlU2l6ZSIsInRvTnVtZXJpYyIsIm51bSIsInBhcnNlSW50IiwiZm9yT2YiLCJDT0xMRUNUSU9OIiwiQSIsIm1hcEZuIiwibmV4dEl0ZW0iLCJLIiwiX19kZWZpbmVTZXR0ZXJfXyIsIlR5cGVkIiwiVHlwZWRBcnJheUNvbnN0cnVjdG9ycyIsInNldFRvU3RyaW5nVGFnIiwiaW5oZXJpdElmUmVxdWlyZWQiLCJtZXRob2RzIiwiY29tbW9uIiwiSVNfV0VBSyIsIkFEREVSIiwiZml4TWV0aG9kIiwiSEFTTlRfQ0hBSU5JTkciLCJUSFJPV1NfT05fUFJJTUlUSVZFUyIsIkFDQ0VQVF9JVEVSQUJMRVMiLCJCVUdHWV9aRVJPIiwiJGluc3RhbmNlIiwiZ2V0Q29uc3RydWN0b3IiLCJzZXRTdHJvbmciLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJEIiwiU1lNQk9MIiwiZm5zIiwic3RyZm4iLCJyeGZuIiwiaWdub3JlQ2FzZSIsIm11bHRpbGluZSIsInVuaWNvZGUiLCJzdGlja3kiLCJTQUZFX0NMT1NJTkciLCJyaXRlciIsInNraXBDbG9zaW5nIiwiaXNSZWdFeHAiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJJU19JTkNMVURFUyIsImVsIiwiZnJvbUluZGV4IiwibW9kZSIsImNvcHlyaWdodCIsImNvbmRpdGlvbiIsImZvcm1hdCIsImFyZ0luZGV4IiwiZnJhbWVzVG9Qb3AiLCJUZXh0IiwiY3JlYXRlTW9qaU9iakFyeSIsInN0ciIsIm1vamlvYmphcnkiLCJtb2ppb2JqIiwibW9qaSIsInN1YnN0ciIsInNpemVfaiIsInNpemVfZyIsImZvbnQiLCJnZXRKaWR1bWVNb2ppTmFnYXNoaUluZGV4IiwibW9qaU9iakFyeSIsImFyZWFzaXplX2oiLCJwYWRkaW5nX3MiLCJwYWRkaW5nX2UiLCJkZWZhdWx0U2l6ZSIsInBvaW50ZXIiLCJzaXplIiwibm9ybWFsZ3lvIiwiZ2V0SmlkdW1lQXJ5IiwiaW5kZXhfcyIsImluZGV4X2UiLCJhcmVhc2l6ZSIsIm1vamlzdSIsIm1vamlsZW4iLCJtYXJnaW4iLCJjZW50ZXJBcnkiLCJnZXRKaWR1bWVBcnlTb3JvZU5hc2hpIiwiZ2V0WmVuR3lvSW5kZXhBcnkiLCJpbmRleEFyeSIsImluZGV4T2JqIiwiX1RleHQkZ2V0SmlkdW1lTW9qaU5hIiwiX1RleHQkZ2V0SmlkdW1lTW9qaU5hMiIsIl9zbGljZWRUb0FycmF5IiwibWF4U2l6ZUd5b09rdXJpIiwiZ2V0R3lvb2t1cmlBcnkiLCJhcmVhc2l6ZV9nIiwicGFkZGluZ19qcyIsInBhZGRpbmdfamUiLCJwYWRkaW5nX2dzIiwicGFkZGluZ19nZSIsImd5b2thbiIsIm1heF93aWR0aCIsImd5b0luZGV4QXJ5IiwiZ2V0TmFnYXNoaUNlbnRlckFyeSIsInplbkd5b0luZGV4QXJ5IiwiZ3lvb2t1cmlBcnkiLCJqaWR1bWVBcnkiLCJqIiwibmFnYXNoaVJlc3VsdCIsIm5hZ2FzaGlBcnkiLCJtb2ppX2kiLCJTQUdBX05BR0FTSElSRVNVTFRfQ1JFQVRFIiwiU0FHQV9OQUdBU0hJX1JFTU9WRSIsIlNhZ2FfTmFnYXNoaVJlc3VsdF9DcmVhdGUiLCJib3hfaWQiLCJTYWdhX05hZ2FzaGlfUmVtb3ZlIiwiX2FycmF5IiwiQm94IiwiZ2V0Qm94IiwiYm94cyIsImdldEdyb3VwQW5kTm8iLCJnZXRHcm91cEFyeSIsImFyeSIsIkxpYkFycmF5Iiwic2V0QXJyYXlVbmlxdWUiLCJnZXRHcm91cE5vQXJ5IiwiZ2V0Qm94SWQiLCJnZXRMaW5rR3JvdXAiLCJsaW5rcyIsInNvemFpX2lkIiwiX0JveCRnZXRHcm91cEFuZE5vIiwiX0JveCRnZXRHcm91cEFuZE5vMiIsIlBST1RPVFlQRSIsIldST05HX0lOREVYIiwiSW5maW5pdHkiLCJCYXNlQnVmZmVyIiwiYWJzIiwicG93IiwiTE4yIiwiJEJVRkZFUiIsIiRMRU5HVEgiLCIkT0ZGU0VUIiwicGFja0lFRUU3NTQiLCJtTGVuIiwibkJ5dGVzIiwiZUxlbiIsImVNYXgiLCJlQmlhcyIsInJ0IiwidW5wYWNrSUVFRTc1NCIsIm5CaXRzIiwiTmFOIiwidW5wYWNrSTMyIiwiYnl0ZXMiLCJwYWNrSTgiLCJwYWNrSTE2IiwicGFja0kzMiIsInBhY2tGNjQiLCJwYWNrRjMyIiwidmlldyIsImlzTGl0dGxlRW5kaWFuIiwiaW50SW5kZXgiLCJfYiIsInBhY2siLCJjb252ZXJzaW9uIiwiQXJyYXlCdWZmZXJQcm90byIsIiRzZXRJbnQ4Iiwic2V0SW50OCIsImdldEludDgiLCJzZXRVaW50OCIsImJ1ZmZlckxlbmd0aCIsImdldFVpbnQ4IiwiZ2V0SW50MTYiLCJnZXRVaW50MTYiLCJnZXRJbnQzMiIsImdldFVpbnQzMiIsImdldEZsb2F0MzIiLCJnZXRGbG9hdDY0Iiwic2V0SW50MTYiLCJzZXRVaW50MTYiLCJzZXRJbnQzMiIsInNldFVpbnQzMiIsInNldEZsb2F0MzIiLCJzZXRGbG9hdDY0IiwiJCRyZXNvbHZlIiwiJCRyZWplY3QiLCJtYWNyb3Rhc2siLCJPYnNlcnZlciIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJXZWJLaXRNdXRhdGlvbk9ic2VydmVyIiwicHJvY2VzcyIsImlzTm9kZSIsImhlYWQiLCJsYXN0IiwicGFyZW50IiwiZG9tYWluIiwiZXhpdCIsImVudGVyIiwibmV4dFRpY2siLCJzdGFuZGFsb25lIiwidG9nZ2xlIiwibm9kZSIsImNyZWF0ZVRleHROb2RlIiwib2JzZXJ2ZSIsImNoYXJhY3RlckRhdGEiLCJkZWZlciIsInBvcnQiLCJpbnZva2UiLCJodG1sIiwiY2VsIiwic2V0SW1tZWRpYXRlIiwiY2xlYXJUYXNrIiwiY2xlYXJJbW1lZGlhdGUiLCJNZXNzYWdlQ2hhbm5lbCIsIkRpc3BhdGNoIiwiY291bnRlciIsImV2ZW50Iiwibm93IiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImltcG9ydFNjcmlwdHMiLCJyZW1vdmVDaGlsZCIsImFkZFRvVW5zY29wYWJsZXMiLCJpdGVyYXRlZCIsImtpbmQiLCJfaSIsIl9rIiwiQXJndW1lbnRzIiwiZW5kUG9zIiwib3JpZ2luYWwiLCJnZXRJdGVyYXRvck1ldGhvZCIsIiRkZWZpbmVQcm9wZXJ0eSIsInJlIiwic2VhcmNoU3RyaW5nIiwiZGVzY3JpcHRvciIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiJGl0ZXJDcmVhdGUiLCJCVUdHWSIsInJldHVyblRoaXMiLCJERUZBVUxUIiwiSVNfU0VUIiwiZ2V0TWV0aG9kIiwiREVGX1ZBTFVFUyIsIlZBTFVFU19CVUciLCIkbmF0aXZlIiwiJGRlZmF1bHQiLCIkZW50cmllcyIsIiRhbnlOYXRpdmUiLCJUT19TVFJJTkciLCJwb3MiLCJjaGFyQ29kZUF0IiwiY2hhckF0IiwiJGV4cG0xIiwiZXhwbTEiLCJzaWduIiwiY291bnQiLCJidWdneSIsIndrc0V4dCIsIiRTeW1ib2wiLCJjcmVhdGVFbGVtZW50IiwibWFrZUVtcHR5RnVuY3Rpb24iLCJlbXB0eUZ1bmN0aW9uIiwidGhhdFJldHVybnMiLCJ0aGF0UmV0dXJuc0ZhbHNlIiwidGhhdFJldHVybnNUcnVlIiwidGhhdFJldHVybnNOdWxsIiwidGhhdFJldHVybnNUaGlzIiwidGhhdFJldHVybnNBcmd1bWVudCIsInZhbGlkYXRlRm9ybWF0IiwiQWN0aW9uVHlwZXMiLCJJTklUIiwic3Vic3RyaW5nIiwiUkVQTEFDRSIsImlzUGxhaW5PYmplY3QiLCJjcmVhdGVTdG9yZSIsInJlZHVjZXIiLCJwcmVsb2FkZWRTdGF0ZSIsImVuaGFuY2VyIiwiY3VycmVudFJlZHVjZXIiLCJjdXJyZW50U3RhdGUiLCJjdXJyZW50TGlzdGVuZXJzIiwibmV4dExpc3RlbmVycyIsImlzRGlzcGF0Y2hpbmciLCJlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzIiwicmVwbGFjZVJlZHVjZXIiLCJuZXh0UmVkdWNlciIsInN5bWJvbF9vYnNlcnZhYmxlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJvdXRlclN1YnNjcmliZSIsIm9ic2VydmVyIiwib2JzZXJ2ZVN0YXRlIiwiZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2UiLCJhY3Rpb25UeXBlIiwiY29tYmluZVJlZHVjZXJzIiwicmVkdWNlcnMiLCJyZWR1Y2VyS2V5cyIsImZpbmFsUmVkdWNlcnMiLCJmaW5hbFJlZHVjZXJLZXlzIiwic2hhcGVBc3NlcnRpb25FcnJvciIsImFzc2VydFJlZHVjZXJTaGFwZSIsImhhc0NoYW5nZWQiLCJwcmV2aW91c1N0YXRlRm9yS2V5IiwibmV4dFN0YXRlRm9yS2V5IiwiZXJyb3JNZXNzYWdlIiwiYmluZEFjdGlvbkNyZWF0b3IiLCJhY3Rpb25DcmVhdG9yIiwiYmluZEFjdGlvbkNyZWF0b3JzIiwiYWN0aW9uQ3JlYXRvcnMiLCJib3VuZEFjdGlvbkNyZWF0b3JzIiwiY29tcG9zZSIsImZ1bmNzIiwiYXBwbHlNaWRkbGV3YXJlIiwibWlkZGxld2FyZXMiLCJfZGlzcGF0Y2giLCJtaWRkbGV3YXJlQVBJIiwiY2hhaW4iLCJtaWRkbGV3YXJlIiwicm9vdCIsIl9wb255ZmlsbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiU296YWkiLCJnZXRTb3phaSIsInNvemFpX3JlYyIsIm5hZ2FzaGlFeGVjIiwibmFnYXNoaUV4ZWNHcm91cCIsIm5hZ2FzaGlFeGVjQm94IiwibmFnYXNoaUV4ZWNTb3phaSIsIm5hZ2FzaGlFeGVjQWxsIiwiX2VmZmVjdHMiLCJfbmFnYXNoaSIsIl90ZXh0IiwiX2JveCIsIl9zb3phaSIsIm5vX2FyeSIsImZpcnN0X2JveF9pZCIsIm1vamlfaW5kZXgiLCJlbmRfaW5kZXgiLCJ0YXJnZXRfYm94X2lkIiwiYm94X3JlYyIsIl9UZXh0JGdldE5hZ2FzaGlDZW50ZSIsIl9UZXh0JGdldE5hZ2FzaGlDZW50ZTIiLCJfcGF5bG9hZCIsInJlZ2VuZXJhdG9yUnVudGltZSIsIndyYXAiLCJfY29udGV4dCIsInByZXYiLCJzZW50Iiwia3VtaWhva28iLCJzdG9wIiwiX21hcmtlZCIsIl9jb250ZXh0MiIsImFicnVwdCIsIl9tYXJrZWQyIiwiX2NvbnRleHQzIiwiX21hcmtlZDMiLCJfY29udGV4dDQiLCJfbWFya2VkNCIsIl9jb250ZXh0NSIsIl9tYXJrZWQ1IiwiU0FHQV9UT09MQk9YTElOS19MSU5LX0NSRUFURSIsIlNBR0FfVE9PTEJPWExJTktfTElOS19ERUxFVEUiLCJTYWdhX1Rvb2xCb3hMaW5rX0xpbmtfQ3JlYXRlIiwiU2FnYV9Ub29sQm94TGlua19MaW5rX0RlbGV0ZSIsIlNBR0FfVE9PTEJPWF9NT1ZFRU5EIiwiU2FnYV9Ub29sQm94X01vdmVFbmQiLCJTQUdBX1RPT0xCT1hURVhUREFUQV9URVhUREFUQV9VUERBVEUiLCJTYWdhX1Rvb2xCb3hUZXh0RGF0YV9UZXh0RGF0YV9VcGRhdGUiLCJTQUdBX1NDQUxFX0NIQU5HRSIsIlNhZ2FfU2NhbGVfQ2hhbmdlIiwic2NhbGUiLCJTVV9UT09MQk9YTElOS19DUkVBVEVCVVRUT05fQ0xJQ0siLCJTVV9UT09MQk9YTElOS19ERUxFVEVCVVRUT05fQ0xJQ0siLCJTVV9Ub29sQm94TGlua19DcmVhdGVCdXR0b25fQ2xpY2siLCJTVV9Ub29sQm94TGlua19EZWxldGVCdXR0b25fQ2xpY2siLCJTVV9UT09MQk9YU09aQUlfVVBEQVRFQlVUVE9OX0NMSUNLIiwiU1VfVE9PTEJPWFNPWkFJX0RFTEVURUJVVFRPTl9DTElDSyIsIlNVX1RPT0xCT1hTT1pBSV9DUkVBVEVCVVRUT05fQ0xJQ0siLCJTVV9UT09MQk9YU09aQUlfU09aQUlfU0VMRUNUIiwiU1VfVE9PTEJPWFNPWkFJX1NPWkFJX1RPR0dMRSIsIlNVX1Rvb2xCb3hTb3phaV9VcGRhdGVCdXR0b25fQ2xpY2siLCJTVV9Ub29sQm94U296YWlfRGVsZXRlQnV0dG9uX0NsaWNrIiwiU1VfVG9vbEJveFNvemFpX0NyZWF0ZUJ1dHRvbl9DbGljayIsIlNVX1Rvb2xCb3hTb3phaV9Tb3phaV9TZWxlY3QiLCJTVV9Ub29sQm94U296YWlfU296YWlfVG9nZ2xlIiwiU1VfVE9PTEJPWFRFWFREQVRBX1VQREFURUJVVFRPTl9DTElDSyIsIlNVX1Rvb2xCb3hUZXh0RGF0YV9VcGRhdGVCdXR0b25fQ2xpY2siLCJTVV9UT09MQk9YQk9YREFUQV9VUERBVEVCVVRUT05fQ0xJQ0siLCJTVV9UT09MQk9YQk9YREFUQV9ERUxFVEVCVVRUT05fQ0xJQ0siLCJTVV9UT09MQk9YQk9YREFUQV9DUkVBVEVCVVRUT05fQ0xJQ0siLCJTVV9Ub29sQm94Qm94RGF0YV9VcGRhdGVCdXR0b25fQ2xpY2siLCJTVV9Ub29sQm94Qm94RGF0YV9EZWxldGVCdXR0b25fQ2xpY2siLCJTVV9Ub29sQm94Qm94RGF0YV9DcmVhdGVCdXR0b25fQ2xpY2siLCJTVV9UT09MQk9YU0NBTEVfTUlOQlVUVE9OX0NMSUNLIiwiU1VfVE9PTEJPWFNDQUxFX01BWEJVVFRPTl9DTElDSyIsIlNVX1RPT0xCT1hTQ0FMRV8xMDBQRVJCVVRUT05fQ0xJQ0siLCJTVV9Ub29sQm94U2NhbGVfTWluQnV0dG9uX0NsaWNrIiwiU1VfVG9vbEJveFNjYWxlX01heEJ1dHRvbl9DbGljayIsIlNVX1Rvb2xCb3hTY2FsZV8xMDBQZXJCdXR0b25fQ2xpY2siLCJTVV9UT09MQk9YX01PVkVFTkQiLCJTVV9Ub29sQm94X01vdmVFbmQiLCJpbkxvdyIsImluSGlnaCIsIm91dExvdyIsIm91dEhpZ2giLCJnZXRLZXlzIiwiaXNFbnVtIiwiaXNFbnRyaWVzIiwicmVwZWF0IiwibWF4TGVuZ3RoIiwiZmlsbFN0cmluZyIsImxlZnQiLCJzdHJpbmdMZW5ndGgiLCJmaWxsU3RyIiwiaW50TWF4TGVuZ3RoIiwiZmlsbExlbiIsInN0cmluZ0ZpbGxlciIsIklTX0NPTkNBVF9TUFJFQURBQkxFIiwiZmxhdHRlbkludG9BcnJheSIsInNvdXJjZUxlbiIsImRlcHRoIiwibWFwcGVyIiwidGhpc0FyZyIsInNwcmVhZGFibGUiLCJ0YXJnZXRJbmRleCIsInNvdXJjZUluZGV4IiwiZ09QUyIsIlJlZmxlY3QiLCJvd25LZXlzIiwiZ2V0U3ltYm9scyIsIiRoYXMiLCJ1bmNhdWdodEZyb3plblN0b3JlIiwiX2wiLCJVbmNhdWdodEZyb3plblN0b3JlIiwiZmluZFVuY2F1Z2h0RnJvemVuIiwiZGVsZXRlIiwidWZzdG9yZSIsIkludGVybmFsTWFwIiwiZWFjaCIsIndlYWsiLCJ0bXAiLCIkV2Vha01hcCIsImZyZWV6ZSIsIl9mIiwic3Ryb25nIiwiYWRkIiwiJGl0ZXJEZWZpbmUiLCJTSVpFIiwiZ2V0RW50cnkiLCJrIiwibmV3UHJvbWlzZUNhcGFiaWxpdHkiLCJwcm9taXNlQ2FwYWJpbGl0eSIsImZsYWdzIiwidG8iLCJpbmMiLCJtZW1vIiwiaXNSaWdodCIsInJldCIsIkVQU0lMT04iLCJFUFNJTE9OMzIiLCJNQVgzMiIsIk1JTjMyIiwiZnJvdW5kIiwiJGFicyIsIiRzaWduIiwibG9nMXAiLCJpc0Zpbml0ZSIsIm1zZyIsIiRwYXJzZUZsb2F0IiwicGFyc2VGbG9hdCIsIiR0cmltIiwiJHBhcnNlSW50Iiwid3MiLCJoZXgiLCJyYWRpeCIsInVuIiwicGFydEFyZ3MiLCJib3VuZCIsImNvbnN0cnVjdCIsIiRhc3NpZ24iLCJ3aW5kb3dOYW1lcyIsImdldFdpbmRvd05hbWVzIiwiZGVmaW5lUHJvcGVydGllcyIsIm5hbWVzIiwicHJvcElzRW51bWVyYWJsZSIsInRlc3QxIiwidGVzdDIiLCJmcm9tQ2hhckNvZGUiLCJ0ZXN0MyIsImxldHRlciIsInNob3VsZFVzZU5hdGl2ZSIsInN5bWJvbHMiLCJSRUFDVF9TVEFUSUNTIiwiZGVmYXVsdFByb3BzIiwiZ2V0RGVmYXVsdFByb3BzIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwibWl4aW5zIiwiS05PV05fU1RBVElDUyIsImNhbGxlciIsImFyaXR5Iiwib2JqZWN0UHJvdG90eXBlIiwiaG9pc3ROb25SZWFjdFN0YXRpY3MiLCJ0YXJnZXRDb21wb25lbnQiLCJzb3VyY2VDb21wb25lbnQiLCJibGFja2xpc3QiLCJpbmhlcml0ZWRDb21wb25lbnQiLCJmYWN0b3J5Iiwic3ltYm9sT2JzZXJ2YWJsZVBvbnlmaWxsIiwiTk9UX0lURVJBVE9SX0VSUk9SIiwiQ0hBTk5FTF9FTkQiLCJUQVNLX0NBTkNFTCIsIm1hdGNoZXJzIiwid2lsZGNhcmQiLCJkZWZhdWx0IiwicGF0dGVybnMiLCJfcHJlZGljYXRlIiwid3JhcEhlbHBlciIsInByb2MiLCJwYXJlbnRDb250ZXh0IiwicGFyZW50RWZmZWN0SWQiLCJjb250IiwicnVuUGFyYWxsZWxFZmZlY3QiLCJydW5BbGxFZmZlY3QiLCJzYWdhTW9uaXRvciIsImxvZ2dlciIsIm9uRXJyb3IiLCJsb2dFcnJvciIsInNhZ2FTdGFjayIsInRhc2tDb250ZXh0IiwiX3JlZjkiLCJfbXV0YXRvck1hcCIsIl9kZWZlcnJlZEVuZCIsIl9pc1J1bm5pbmciLCJqb2luZXJzIiwiaXNDYW5jZWxsZWQiLCJfaXNDYW5jZWxsZWQiLCJpc0Fib3J0ZWQiLCJfaXNBYm9ydGVkIiwiZGVzY3MiLCJfZGVmaW5lRW51bWVyYWJsZVByb3BlcnRpZXMiLCJuZXdUYXNrIiwibWFpblRhc2siLCJ0YXNrUXVldWUiLCJjb21wbGV0ZWQiLCJhYm9ydCIsImNhbmNlbEFsbCIsImFkZFRhc2siLCJpc0VyciIsImdldFRhc2tzIiwidGFza05hbWVzIiwiZm9ya1F1ZXVlIiwiaXNNYWluUnVubmluZyIsInJ1bkVmZmVjdCIsImxhYmVsIiwiZWZmZWN0SWQiLCJlZmZlY3RUcmlnZ2VyZWQiLCJlZmZlY3RTZXR0bGVkIiwiY3VyckNiIiwiZWZmZWN0UmVqZWN0ZWQiLCJlZmZlY3RSZXNvbHZlZCIsImVmZmVjdENhbmNlbGxlZCIsInJlc29sdmVQcm9taXNlIiwicnVuRm9ya0VmZmVjdCIsInJlc29sdmVJdGVyYXRvciIsInRha2VDYiIsImlucCIsInJ1blRha2VFZmZlY3QiLCJfcmVmMyIsInNjaGVkdWxlciIsInJ1blB1dEVmZmVjdCIsImNoaWxkQ2JzIiwiY2hDYkF0S2V5IiwiX3Jlc3BvbnNlIiwicmVzcG9uc2UiLCJydW5SYWNlRWZmZWN0IiwiX3JlZjQiLCJydW5DYWxsRWZmZWN0IiwiX3JlZjUiLCJjcHNDYiIsInJ1bkNQU0VmZmVjdCIsImpvaW5lciIsInJ1bkpvaW5FZmZlY3QiLCJ0YXNrVG9DYW5jZWwiLCJydW5DYW5jZWxFZmZlY3QiLCJfcmVmNyIsInJ1blNlbGVjdEVmZmVjdCIsIl9yZWY4IiwicnVuQ2hhbm5lbEVmZmVjdCIsInJ1bkZsdXNoRWZmZWN0IiwicnVuQ2FuY2VsbGVkRWZmZWN0IiwicnVuR2V0Q29udGV4dEVmZmVjdCIsInJ1blNldENvbnRleHRFZmZlY3QiLCJjYW5jZWxQcm9taXNlIiwiX3JlZjYiLCJ0YXNrSXRlcmF0b3IiLCJwYyIsImNyZWF0ZVRhc2tJdGVyYXRvciIsIl90YXNrIiwiY29tcGxldGVkQ291bnQiLCJyZXN1bHRzIiwiTk9OX0dFTkVSQVRPUl9FUlIiLCJSVU5fU0FHQV9TSUdOQVRVUkUiLCJydW5TYWdhIiwic3RvcmVJbnRlcmZhY2UiLCJzYWdhIiwiX3N0b3JlSW50ZXJmYWNlIiwiYWN0aW9uRGlzcGF0Y2hlZCIsIl9yZWYkY29udGV4dCIsInNhZ2FNaWRkbGV3YXJlIiwic2FnYUVtaXR0ZXIiLCJfdG9vbGJveHNjYWxlIiwiX3Rvb2xib3hzY2FsZTIiLCJnZXRTY2FsZSIsIm1hcmsiLCJfY2FsbGVlIiwiX2NhbGxlZTIiLCJfY2FsbGVlMyIsInRvb2xib3giLCJfdG9vbGJveCIsIl90b29sYm94MiIsIl90b29sYm94Ym94ZGF0YSIsIl90b29sYm94Ym94ZGF0YTIiLCJfdG9vbGJveHRleHRkYXRhIiwiX3Rvb2xib3h0ZXh0ZGF0YTIiLCJfdG9vbGJveHNvemFpIiwiX3Rvb2xib3hzb3phaTIiLCJfdG9vbGJveGxpbmsiLCJfdG9vbGJveGxpbmsyIiwiX25hZ2FzaGkyIiwiX3phaHlvIiwidG9vbGJveHMiLCJfY29udGV4dDEyIiwidDAiLCJfcGF5bG9hZDIiLCJfY2FsbGVlNCIsIl9jYWxsZWU1IiwiX2NhbGxlZTYiLCJfY29udGV4dDYiLCJfY2FsbGVlNyIsIl9wYXlsb2FkMyIsIl9jb250ZXh0NyIsIl9jYWxsZWU4IiwiX2NvbnRleHQ4IiwiX2NhbGxlZTkiLCJfY29udGV4dDkiLCJfY2FsbGVlMTAiLCJfY29udGV4dDEwIiwiX2NhbGxlZTExIiwiX2NvbnRleHQxMSIsIkxpbmsiLCJnZXRTb3phaUlkIiwiZ2V0U296YWlJZEZyb21Cb3hJZCIsInNlbGVjdGJveCIsIl9zZWxlY3Rib3giLCJfc2VsZWN0Ym94MiIsIl9saW5rIiwicm9vdFNhZ2EiLCJsaXN0cyIsImxpbmsiLCJmb2N1c2JveCIsIlRleHRHcmlkIiwiZ2V0VGV4dEdyaWRBcnkiLCJncmlkYXJ5IiwiZ2V0R3lvb2t1cmlHcmlkQXJ5IiwiZ2V0SmlkdW1lR3JpZEFyeSIsImdyaWRzdSIsIl90ZXh0Z3JpZDMiLCJ0ZXh0Z3JpZCIsInRleHRSZXN1bHQiLCJfcmVkdXgiLCJfc2NhbGUiLCJfYm94cyIsIl9mb2N1c2JveCIsIl90b29sYm94cyIsIl9saW5rcyIsInJvb3RSZWR1Y2VyIiwiZmxnIiwiX3JlYWN0Iiwic3R5bGVzIiwiY29udGFpbmVyIiwidGV4dEFsaWduIiwicGFkZGluZ1RvcCIsImxpbmUiLCJmb250U2l6ZSIsImxpbmVIZWlnaHQiLCJidXR0b24iLCJib3JkZXIiLCJiYWNrZ3JvdW5kQ29sb3IiLCJib3JkZXJSYWRpdXMiLCJib3hsaXN0Ym94Iiwib3ZlcmZsb3dZIiwib3V0bGluZSIsInNvemFpbGlzdGJveCIsImxpbmtsaXN0Ym94IiwiYm9yZGVyQm90dG9tIiwibGlua2xpc3QiLCJUb29sQm94TGlzdCIsIlJlYWN0IiwiQ29tcG9uZW50Iiwib25DbGlja0NyZWF0ZUJ1dHRvbiIsImNvbmZpcm0iLCJvbkNsaWNrRGVsZXRlQnV0dG9uIiwiX3RoaXMyIiwiZ3JvdXBfYXJ5IiwiaXNJbmNsdWRlTGlua0xpc3RHcm91cCIsIl9sb29wIiwiYmdjb2xvciIsIl9yZWFjdDIiLCJvbkNsaWNrIiwiY2xpY2tCb3hMaXN0IiwiX3RoaXMzIiwiaXNJbmNsdWRlTGlua0xpc3RTb3phaUlkIiwiX2xvb3AyIiwiY2xpY2tTb3phaUxpc3QiLCJfdGhpczQiLCJfbG9vcDMiLCJjbGlja0RlbGV0ZUJ1dHRvbiIsIl90aGlzNSIsImNvbG9yIiwiZ3JvdXBsaXN0Iiwic296YWlsaXN0IiwiZmxvYXQiLCJtYXJnaW5Ub3AiLCJjbGlja0NyZWF0ZUJ1dHRvbiIsIl9yZWFjdFJlZHV4IiwiX1Rvb2xCb3hMaW5rIiwiVG9vbEJveExpbmtNYXAiLCJjb25uZWN0IiwiVG9vbEJveExpbmsiLCJsaXN0Ym94IiwidGV4dGJveCIsIkNvbG9yIiwiVG9vbEJveFNvemFpIiwiaW5wdXRpZCIsIm9uQ2xpY2tTb3phaUxpc3QiLCJvbkNsaWNrVXBkYXRlQnV0dG9uIiwiY2hlY2tTb3phaUV4aXN0IiwiYWxlcnQiLCJyZWMiLCJjbGlja0xpc3QiLCJvbkNoYW5nZSIsImNsaWNrVXBkYXRlQnV0dG9uIiwibWFyZ2luQm90dG9tIiwiaWR0eXBlIiwibmV3dXBkYXRlYnV0dG9uIiwiX1Rvb2xCb3hTb3phaSIsIlRvb2xCb3hTb3phaU1hcCIsIl9zdHJpbmciLCJUb29sQm94VGV4dERhdGEiLCJfVG9vbEJveFRleHREYXRhIiwiVG9vbEJveFRleHREYXRhTWFwIiwieiIsIlRvb2xCb3hCb3hEYXRhIiwiY2hlY2tLaXpvbklkIiwiZm9udFdlaWdodCIsInNoaW5raSIsImhlbnNodSIsIl9Ub29sQm94Qm94RGF0YSIsIlRvb2xCb3hCb3hEYXRhTWFwIiwicGVyIiwidXNlclNlbGVjdCIsIlRvb2xCb3hTY2FsZSIsIm9uQ2xpY2sxMDBQZXJCdXR0b24iLCJtYXJnaW5SaWdodCIsIm9uQ2xpY2tNYXhCdXR0b24iLCJvbkNsaWNrTWluQnV0dG9uIiwiX1Rvb2xCb3hTY2FsZSIsIlRvb2xCb3hTY2FsZU1hcCIsInBvc2l0aW9uIiwiYm94U2hhZG93IiwidGl0bGUiLCJwYWRkaW5nIiwiYm9keSIsImJvcmRlckxlZnQiLCJib3JkZXJSaWdodCIsIlRvb2xCb3giLCJib3hvcmdwb3MiLCJtb3VzZXBvcyIsIm1vdXNlTW92ZSIsIm1vdXNlVXAiLCJzdG9wUHJvcGFnYXRpb24iLCJwcmV2ZW50RGVmYXVsdCIsInBhZ2VYIiwicGFnZVkiLCJtb3ZlWCIsIm1vdmVZIiwiX2JveG1vdmVzdG9wIiwiYm94bW92ZXN0b3AiLCJfYm94bW92ZXN0b3AyIiwibngiLCJueSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJlbmRNb3ZlQm94Iiwid2luZG93X3ciLCJpbm5lcldpZHRoIiwid2luZG93X2giLCJpbm5lckhlaWdodCIsInRvcCIsIm9uTW91c2VEb3duIiwibW91c2VEb3duIiwiX1Rvb2xCb3giLCJUb29sQm94TWFwIiwiX2RlZmluZSIsIlNlbGVjdFNvbm90YUJveCIsImJveENsaWNrIiwiZ2V0RWxlbWVudEJ5SWQiLCJvbkNsaWNrQm94IiwiZmlsbE9wYWNpdHkiLCJzdHJva2UiLCJfU2VsZWN0U29ub3RhQm94IiwiU2VsZWN0U29ub3RhQm94TWFwIiwiU2VsZWN0R3JvdXBCb3giLCJfU2VsZWN0R3JvdXBCb3giLCJTZWxlY3RHcm91cEJveE1hcCIsIkhhbmRsZUQiLCJoYW5kbGVvcmdwb3MiLCJoYW5kbGVSZWZyZXNoIiwiY2xpY2siLCJoYW5kbGVNb3VzZURvd24iLCJfY2hlY2tncmlkMWJsb2NrIiwiY2hlY2tncmlkMWJsb2NrIiwiX2NoZWNrZ3JpZDFibG9jazIiLCJfcHJvcHMkZ3JpZHNuYXAiLCJncmlkc25hcCIsIl9wcm9wcyRncmlkc25hcDIiLCJfcHJvcHMkaGFuZGxlc3RvcCIsImhhbmRsZXN0b3AiLCJfcHJvcHMkaGFuZGxlc3RvcDIiLCJoYW5kbGVNb3ZlIiwiY2FwdHVyZUNsaWNrIiwiaGFuZGxlTW91c2VVcCIsImh3IiwiaGgiLCJfSGFuZGxlRCIsIkhhbmRsZURNYXAiLCJIYW5kbGVSIiwiX0hhbmRsZVIiLCJIYW5kbGVSTWFwIiwiSGFuZGxlTCIsIl9IYW5kbGVMIiwiSGFuZGxlTE1hcCIsIkhhbmRsZVUiLCJfSGFuZGxlVSIsIkhhbmRsZVVNYXAiLCJTZWxlY3RFZGl0Qm94IiwiaGFuZGxlX3JlZnJlc2giLCJiYXNlQ2xpY2siLCJhZGRCYXNlQ2xpY2tFdmVudCIsInJlbW92ZUJhc2VDbGlja0V2ZW50Iiwib25DbGlja0Jhc2UiLCJfZ3JpZHNuYXAiLCJfZ3JpZHNuYXAyIiwicnVfeCIsInJ1X3kiLCJhbWFyaSIsInNobyIsIm1pblgiLCJtYXhYIiwibWluWSIsIm1heFkiLCJncmlkX2x4IiwiZ3JpZF9keSIsInJ4IiwicnkiLCJlbmRDaGFuZ2VTaXplQm94Iiwic3Ryb2tlV2lkdGgiLCJfSGFuZGxlVU1hcDIiLCJfSGFuZGxlTE1hcDIiLCJfSGFuZGxlUk1hcDIiLCJfSGFuZGxlRE1hcDIiLCJfU2VsZWN0RWRpdEJveCIsIlNlbGVjdEVkaXRCb3hNYXAiLCJTZWxlY3RCb3hzIiwic2VsZWN0Ym94cyIsIl9TZWxlY3RTb25vdGFCb3hNYXAyIiwiZWRpdGJveCIsIl9TZWxlY3RHcm91cEJveE1hcDIiLCJfU2VsZWN0RWRpdEJveE1hcDIiLCJzZWxlY3RBbGxTb25vdGFCb3giLCJzZWxlY3RCb3giLCJfU2VsZWN0Qm94cyIsIlNlbGVjdEJveHNNYXAiLCJUZXh0Qm94Iiwib3BhY2l0eSIsImNqIiwiY2ciLCJzaXplX3giLCJzaXplX3kiLCJ0cmFuc2Zvcm0iLCJfVGV4dEJveCIsIlRleHRCb3hNYXAiLCJCb3hzIiwiX1RleHRCb3hNYXAyIiwiX0JveHMiLCJCb3hzTWFwIiwiR3JpZCIsImx3IiwiY29sIiwieW9rb2tlaSIsInRhdGVrZWkiLCJTdmdJbWFnZSIsInZpZXdCb3giLCJfR3JpZDIiLCJfQm94c01hcDIiLCJfU2VsZWN0Qm94c01hcDIiLCJfU3ZnSW1hZ2UiLCJTdmdJbWFnZU1hcCIsIm92ZXJmbG93IiwiVmlld0JveCIsIl9TdmdJbWFnZU1hcDIiLCJUb3BTY3JlZW4iLCJfVG9vbEJveE1hcDIiLCJfVG9vbEJveFNjYWxlTWFwMiIsIl9Ub29sQm94Qm94RGF0YU1hcDIiLCJfVG9vbEJveFRleHREYXRhTWFwMiIsIl9Ub29sQm94U296YWlNYXAyIiwiX1Rvb2xCb3hMaW5rTWFwMiIsIl9WaWV3Qm94MiIsInRvb2xCb3hzIiwiX1RvcFNjcmVlbiIsIlRvcFNjcmVlbk1hcCIsInN1cGVyXyIsInUiLCJOIiwicHJlZmlsdGVyIiwibm9ybWFsaXplIiwibGhzIiwicmhzIiwicGF0aCIsImdyb3VwQ29sbGFwc2VkIiwiZ3JvdXBFbmQiLCJhY3Rpb25UcmFuc2Zvcm1lciIsInRpdGxlRm9ybWF0dGVyIiwidGltZXN0YW1wIiwiZHVyYXRpb24iLCJ0b0ZpeGVkIiwiY29sbGFwc2VkIiwiY29sb3JzIiwiZGlmZiIsInN0YXJ0ZWQiLCJzdGFydGVkVGltZSIsInByZXZTdGF0ZSIsInRvb2siLCJFIiwiTCIsIk0iLCJzdGF0ZVRyYW5zZm9ybWVyIiwiZXJyb3JUcmFuc2Zvcm1lciIsImxvZ0Vycm9ycyIsImRpZmZQcmVkaWNhdGUiLCJEYXRlIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwiZ2V0U2Vjb25kcyIsImdldE1pbGxpc2Vjb25kcyIsInBlcmZvcm1hbmNlIiwiRGVlcERpZmYiLCJvYnNlcnZhYmxlRGlmZiIsImFwcGx5RGlmZiIsImFwcGx5Q2hhbmdlIiwicmV2ZXJ0Q2hhbmdlIiwiaXNDb25mbGljdCIsIm5vQ29uZmxpY3QiLCJ0cmFuc2Zvcm1lciIsImRlZmF1bHRzIiwiY3JlYXRlTG9nZ2VyIiwiaW52YXJpYW50IiwiUmVhY3RQcm9wVHlwZXNTZWNyZXQiLCJzaGltIiwicHJvcE5hbWUiLCJjb21wb25lbnROYW1lIiwibG9jYXRpb24iLCJwcm9wRnVsbE5hbWUiLCJzZWNyZXQiLCJnZXRTaGltIiwiUmVhY3RQcm9wVHlwZXMiLCJib29sIiwic3ltYm9sIiwiYW55IiwiYXJyYXlPZiIsImluc3RhbmNlT2YiLCJvYmplY3RPZiIsIm9uZU9mIiwib25lT2ZUeXBlIiwiZXhhY3QiLCJjaGVja1Byb3BUeXBlcyIsIlByb3BUeXBlcyIsIm9yaWdpbmFsTW9kdWxlIiwid2VicGFja1BvbHlmaWxsIiwiX3JlZHV4TG9nZ2VyIiwiX3JlZHV4U2FnYTIiLCJfVG9wU2NyZWVuTWFwMiIsInJlZ0V4cCIsInJlcGxhY2VyIiwicGFydCIsIiRyZSIsImVzY2FwZSIsIk9wIiwiaXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRvU3RyaW5nVGFnU3ltYm9sIiwiaW5Nb2R1bGUiLCJydW50aW1lIiwiR2VuU3RhdGVTdXNwZW5kZWRTdGFydCIsIkdlblN0YXRlU3VzcGVuZGVkWWllbGQiLCJHZW5TdGF0ZUV4ZWN1dGluZyIsIkdlblN0YXRlQ29tcGxldGVkIiwiQ29udGludWVTZW50aW5lbCIsImdldFByb3RvIiwiTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUiLCJHcCIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwiR2VuZXJhdG9yIiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJpc0dlbmVyYXRvckZ1bmN0aW9uIiwiZ2VuRnVuIiwiY3RvciIsImF3cmFwIiwiX19hd2FpdCIsImRlZmluZUl0ZXJhdG9yTWV0aG9kcyIsIkFzeW5jSXRlcmF0b3IiLCJhc3luYyIsImlubmVyRm4iLCJvdXRlckZuIiwidHJ5TG9jc0xpc3QiLCJwb3AiLCJDb250ZXh0IiwicmVzZXQiLCJza2lwVGVtcFJlc2V0IiwiX3NlbnQiLCJkZWxlZ2F0ZSIsInRyeUVudHJpZXMiLCJyZXNldFRyeUVudHJ5Iiwicm9vdFJlY29yZCIsImNvbXBsZXRpb24iLCJydmFsIiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJsb2MiLCJjYXVnaHQiLCJyZWNvcmQiLCJ0cnlMb2MiLCJoYXNDYXRjaCIsImhhc0ZpbmFsbHkiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJmaW5hbGx5RW50cnkiLCJjb21wbGV0ZSIsImFmdGVyTG9jIiwiZmluaXNoIiwiY2F0Y2giLCJ0aHJvd24iLCJkZWxlZ2F0ZVlpZWxkIiwicmVzdWx0TmFtZSIsIm5leHRMb2MiLCJwcm90b0dlbmVyYXRvciIsImdlbmVyYXRvciIsIl9pbnZva2UiLCJkb25lUmVzdWx0IiwiZGVsZWdhdGVSZXN1bHQiLCJtYXliZUludm9rZURlbGVnYXRlIiwidHJ5Q2F0Y2giLCJtYWtlSW52b2tlTWV0aG9kIiwidW53cmFwcGVkIiwicHJldmlvdXNQcm9taXNlIiwiY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmciLCJpbmZvIiwicHVzaFRyeUVudHJ5IiwibG9jcyIsIml0ZXJhdG9yTWV0aG9kIiwiVE9fU1RSSU5HX1RBRyIsIkFycmF5VmFsdWVzIiwiRE9NSXRlcmFibGVzIiwiQ1NTUnVsZUxpc3QiLCJDU1NTdHlsZURlY2xhcmF0aW9uIiwiQ1NTVmFsdWVMaXN0IiwiQ2xpZW50UmVjdExpc3QiLCJET01SZWN0TGlzdCIsIkRPTVN0cmluZ0xpc3QiLCJET01Ub2tlbkxpc3QiLCJEYXRhVHJhbnNmZXJJdGVtTGlzdCIsIkZpbGVMaXN0IiwiSFRNTEFsbENvbGxlY3Rpb24iLCJIVE1MQ29sbGVjdGlvbiIsIkhUTUxGb3JtRWxlbWVudCIsIkhUTUxTZWxlY3RFbGVtZW50IiwiTWVkaWFMaXN0IiwiTWltZVR5cGVBcnJheSIsIk5hbWVkTm9kZU1hcCIsIk5vZGVMaXN0IiwiUGFpbnRSZXF1ZXN0TGlzdCIsIlBsdWdpbiIsIlBsdWdpbkFycmF5IiwiU1ZHTGVuZ3RoTGlzdCIsIlNWR051bWJlckxpc3QiLCJTVkdQYXRoU2VnTGlzdCIsIlNWR1BvaW50TGlzdCIsIlNWR1N0cmluZ0xpc3QiLCJTVkdUcmFuc2Zvcm1MaXN0IiwiU291cmNlQnVmZmVyTGlzdCIsIlN0eWxlU2hlZXRMaXN0IiwiVGV4dFRyYWNrQ3VlTGlzdCIsIlRleHRUcmFja0xpc3QiLCJUb3VjaExpc3QiLCJjb2xsZWN0aW9ucyIsImV4cGxpY2l0IiwiQ29sbGVjdGlvbiIsIiR0YXNrIiwiTVNJRSIsInRpbWUiLCJib3VuZEFyZ3MiLCJzZXRJbnRlcnZhbCIsIm1pY3JvdGFzayIsIk9CU0VSVkFCTEUiLCJjbGVhbnVwU3Vic2NyaXB0aW9uIiwiY2xlYW51cCIsIl9jIiwic3Vic2NyaXB0aW9uQ2xvc2VkIiwiX28iLCJjbG9zZVN1YnNjcmlwdGlvbiIsInN1YnNjcmliZXIiLCJTdWJzY3JpcHRpb25PYnNlcnZlciIsIl9zIiwiJE9ic2VydmFibGUiLCJPYnNlcnZhYmxlIiwiJG1ldGFkYXRhIiwidG9NZXRhS2V5Iiwib3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSIsIm1ldGFkYXRhIiwibWV0YWRhdGFLZXkiLCJtZXRhZGF0YVZhbHVlIiwib3JkaW5hcnlIYXNPd25NZXRhZGF0YSIsImhhc093bk1ldGFkYXRhIiwib3JkaW5hcnlIYXNNZXRhZGF0YSIsImhhc01ldGFkYXRhIiwib3JkaW5hcnlPd25NZXRhZGF0YUtleXMiLCJnZXRPd25NZXRhZGF0YUtleXMiLCJvcmRpbmFyeUdldE93bk1ldGFkYXRhIiwiZ2V0T3duTWV0YWRhdGEiLCJTZXQiLCJvcmRpbmFyeU1ldGFkYXRhS2V5cyIsIm9LZXlzIiwicEtleXMiLCJnZXRNZXRhZGF0YUtleXMiLCJvcmRpbmFyeUdldE1ldGFkYXRhIiwiZ2V0TWV0YWRhdGEiLCJkZWxldGVNZXRhZGF0YSIsImRlZmluZU1ldGFkYXRhIiwicGVyZm9ybSIsInRyeSIsInByb21pc2VSZXNvbHZlIiwiZmluYWxseSIsIm9uRmluYWxseSIsInNpZ25iaXQiLCJ1bXVsaCIsIiR1IiwiJHYiLCJ1MCIsInYwIiwidTEiLCJ2MSIsIkRFR19QRVJfUkFEIiwiUEkiLCJyYWRpYW5zIiwiZGVncmVlcyIsIlJBRF9QRVJfREVHIiwiaW11bGgiLCJpc3ViaCIsIngwIiwieTAiLCIkeDAiLCIkeTAiLCJpYWRkaCIsImZzY2FsZSIsImNsYW1wIiwibG93ZXIiLCJ1cHBlciIsImlzRXJyb3IiLCJ0b0pTT04iLCJfX2xvb2t1cFNldHRlcl9fIiwiX19sb29rdXBHZXR0ZXJfXyIsIl9fZGVmaW5lR2V0dGVyX18iLCIkdmFsdWVzIiwiY3JlYXRlUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZ2V0RGVzYyIsImdldEZsYWdzIiwiUmVnRXhwUHJvdG8iLCIkUmVnRXhwU3RyaW5nSXRlcmF0b3IiLCJyZWdleHAiLCJfciIsIm1hdGNoQWxsIiwibGFzdEluZGV4IiwiJHBhZCIsInBhZEVuZCIsInBhZFN0YXJ0IiwiJGF0IiwiYXQiLCJhcnJheVNwZWNpZXNDcmVhdGUiLCJmbGF0dGVuIiwiZGVwdGhBcmciLCJmbGF0TWFwIiwiJGluY2x1ZGVzIiwic2V0UHJvdG8iLCJwcm9wZXJ0eUtleSIsIlYiLCJleGlzdGluZ0Rlc2NyaXB0b3IiLCJyZWNlaXZlciIsIm93bkRlc2MiLCIkcHJldmVudEV4dGVuc2lvbnMiLCIkaXNFeHRlbnNpYmxlIiwiRW51bWVyYXRlIiwiZW51bWVyYXRlIiwiZGVsZXRlUHJvcGVydHkiLCJhdHRyaWJ1dGVzIiwickNvbnN0cnVjdCIsIk5FV19UQVJHRVRfQlVHIiwiQVJHU19CVUciLCJUYXJnZXQiLCJuZXdUYXJnZXQiLCIkYXJncyIsInJBcHBseSIsImZBcHBseSIsInRoaXNBcmd1bWVudCIsImFyZ3VtZW50c0xpc3QiLCJpbml0IiwiJGlzVmlldyIsImlzVmlldyIsImZpcnN0IiwiZmluYWwiLCJ2aWV3UyIsInZpZXdUIiwiSW50ZXJuYWwiLCJuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkiLCJPd25Qcm9taXNlQ2FwYWJpbGl0eSIsIldyYXBwZXIiLCJuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSIsInZlcnNpb25zIiwidjgiLCIkUHJvbWlzZSIsImVtcHR5IiwiVVNFX05BVElWRSIsIkZha2VQcm9taXNlIiwiUHJvbWlzZVJlamVjdGlvbkV2ZW50IiwiaXNUaGVuYWJsZSIsImlzUmVqZWN0IiwiX24iLCJfdiIsIm9rIiwicmVhY3Rpb24iLCJleGl0ZWQiLCJoYW5kbGVyIiwiZmFpbCIsIl9oIiwib25IYW5kbGVVbmhhbmRsZWQiLCJvblVuaGFuZGxlZCIsInVuaGFuZGxlZCIsImlzVW5oYW5kbGVkIiwib251bmhhbmRsZWRyZWplY3Rpb24iLCJyZWFzb24iLCJfYSIsIm9ucmVqZWN0aW9uaGFuZGxlZCIsIiRyZWplY3QiLCJfdyIsIiRyZXNvbHZlIiwiZXhlY3V0b3IiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJjYXBhYmlsaXR5IiwicmVtYWluaW5nIiwiJGluZGV4IiwiYWxyZWFkeUNhbGxlZCIsIlNQTElUIiwiJHNwbGl0IiwiX3NwbGl0IiwiJHB1c2giLCJOUENHIiwic2VwYXJhdG9yMiIsImxhc3RMZW5ndGgiLCJsYXN0TGFzdEluZGV4Iiwic3BsaXRMaW1pdCIsInNlcGFyYXRvckNvcHkiLCJTRUFSQ0giLCIkc2VhcmNoIiwiJHJlcGxhY2UiLCJzZWFyY2hWYWx1ZSIsInJlcGxhY2VWYWx1ZSIsIiRtYXRjaCIsIiRmbGFncyIsImRlZmluZSIsIiRSZWdFeHAiLCJyZTEiLCJyZTIiLCJDT1JSRUNUX05FVyIsInRpUkUiLCJwaVJFIiwiZmlVIiwiJGZpbmQiLCJmb3JjZWQiLCJORUdBVElWRV9aRVJPIiwiJGluZGV4T2YiLCIkcmVkdWNlIiwiJGV2ZXJ5IiwiJHNvbWUiLCIkZmlsdGVyIiwiJGZvckVhY2giLCJTVFJJQ1QiLCIkc29ydCIsInVwVG8iLCJjbG9uZWQiLCJoaW50IiwiVE9fUFJJTUlUSVZFIiwiRGF0ZVByb3RvIiwiZ2V0VGltZSIsIiR0b0lTT1N0cmluZyIsInRvSVNPU3RyaW5nIiwibHoiLCJnZXRVVENGdWxsWWVhciIsImdldFVUQ01pbGxpc2Vjb25kcyIsImdldFVUQ01vbnRoIiwiZ2V0VVRDRGF0ZSIsImdldFVUQ0hvdXJzIiwiZ2V0VVRDTWludXRlcyIsImdldFVUQ1NlY29uZHMiLCJwdiIsInVybCIsIiRzdGFydHNXaXRoIiwic3RhcnRzV2l0aCIsInNlYXJjaCIsIiRlbmRzV2l0aCIsImVuZHNXaXRoIiwiZW5kUG9zaXRpb24iLCJjb2RlUG9pbnRBdCIsInBvaW50IiwicmF3IiwiY2FsbFNpdGUiLCJ0cGwiLCIkZnJvbUNvZGVQb2ludCIsImZyb21Db2RlUG9pbnQiLCJjb2RlIiwidHJ1bmMiLCJ0YW5oIiwic2luaCIsImxvZzIiLCJsb2cxMCIsIkxPRzEwRSIsIiRpbXVsIiwiaW11bCIsInhuIiwieW4iLCJ4bCIsInlsIiwiaHlwb3QiLCJ2YWx1ZTEiLCJ2YWx1ZTIiLCJkaXYiLCJzdW0iLCJsYXJnIiwic3FydCIsImNvc2giLCJjbHozMiIsIkxPRzJFIiwiY2JydCIsIiRhdGFuaCIsImF0YW5oIiwiJGFzaW5oIiwiYXNpbmgiLCIkYWNvc2giLCJhY29zaCIsIk51bWJlciIsIk1BWF9WQUxVRSIsIk1JTl9TQUZFX0lOVEVHRVIiLCJNQVhfU0FGRV9JTlRFR0VSIiwiaXNJbnRlZ2VyIiwiaXNTYWZlSW50ZWdlciIsIl9pc0Zpbml0ZSIsIiRmYWlscyIsImFOdW1iZXJWYWx1ZSIsIiR0b1ByZWNpc2lvbiIsInRvUHJlY2lzaW9uIiwicHJlY2lzaW9uIiwiJHRvRml4ZWQiLCJFUlJPUiIsIm11bHRpcGx5IiwiYzIiLCJkaXZpZGUiLCJudW1Ub1N0cmluZyIsImFjYyIsImZyYWN0aW9uRGlnaXRzIiwiJE51bWJlciIsIkJST0tFTl9DT0YiLCJUUklNIiwidG9OdW1iZXIiLCJhcmd1bWVudCIsInRoaXJkIiwibWF4Q29kZSIsImRpZ2l0cyIsIkhBU19JTlNUQU5DRSIsIkZ1bmN0aW9uUHJvdG8iLCJGUHJvdG8iLCJuYW1lUkUiLCIkaXNTZWFsZWQiLCIkaXNGcm96ZW4iLCIkc2VhbCIsIiRmcmVlemUiLCIkZ2V0UHJvdG90eXBlT2YiLCIkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwid2tzRGVmaW5lIiwiZW51bUtleXMiLCJfY3JlYXRlIiwiZ09QTkV4dCIsIiRKU09OIiwiX3N0cmluZ2lmeSIsIkhJRERFTiIsIlN5bWJvbFJlZ2lzdHJ5IiwiQWxsU3ltYm9scyIsIk9QU3ltYm9scyIsIlFPYmplY3QiLCJmaW5kQ2hpbGQiLCJzZXRTeW1ib2xEZXNjIiwicHJvdG9EZXNjIiwiaXNTeW1ib2wiLCIkZGVmaW5lUHJvcGVydGllcyIsIiRwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIiRnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiJGdldE93blByb3BlcnR5U3ltYm9scyIsIklTX09QIiwiZXM2U3ltYm9scyIsIndlbGxLbm93blN5bWJvbHMiLCJmb3IiLCJrZXlGb3IiLCJ1c2VTZXR0ZXIiLCJ1c2VTaW1wbGUiLCIkcmVwbGFjZXIiLCJfYmFiZWxQb2x5ZmlsbCIsIkRFRklORV9QUk9QRVJUWSIsImRlZmF1bHRWaWV3Iiwib3duZXJEb2N1bWVudCIsIk5vZGUiLCJub2RlVHlwZSIsIm5vZGVOYW1lIiwiaXNUZXh0Tm9kZSIsImNvbnRhaW5zTm9kZSIsIm91dGVyTm9kZSIsImlubmVyTm9kZSIsInBhcmVudE5vZGUiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiZG9jIiwiYWN0aXZlRWxlbWVudCIsImNhblVzZURPTSIsIkV4ZWN1dGlvbkVudmlyb25tZW50IiwiY2FuVXNlV29ya2VycyIsIldvcmtlciIsImNhblVzZUV2ZW50TGlzdGVuZXJzIiwiYXR0YWNoRXZlbnQiLCJjYW5Vc2VWaWV3cG9ydCIsInNjcmVlbiIsImlzSW5Xb3JrZXIiLCJiYSIsImVhIiwiZmEiLCJoYSIsImphIiwia2EiLCJlbmNvZGVVUklDb21wb25lbnQiLCJfY2F1Z2h0RXJyb3IiLCJfaGFzQ2F1Z2h0RXJyb3IiLCJfcmV0aHJvd0Vycm9yIiwiX2hhc1JldGhyb3dFcnJvciIsImludm9rZUd1YXJkZWRDYWxsYmFjayIsImludm9rZUd1YXJkZWRDYWxsYmFja0FuZENhdGNoRmlyc3RFcnJvciIsImhhc0NhdWdodEVycm9yIiwiY2xlYXJDYXVnaHRFcnJvciIsInJldGhyb3dDYXVnaHRFcnJvciIsIm9hIiwicGEiLCJxYSIsInJhIiwiZXh0cmFjdEV2ZW50cyIsImV2ZW50VHlwZXMiLCJzYSIsInBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzIiwidGEiLCJyZWdpc3RyYXRpb25OYW1lIiwidWEiLCJ2YSIsImRlcGVuZGVuY2llcyIsIndhIiwieGEiLCJDYSIsInBsdWdpbnMiLCJldmVudE5hbWVEaXNwYXRjaENvbmZpZ3MiLCJyZWdpc3RyYXRpb25OYW1lTW9kdWxlcyIsInJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXMiLCJwb3NzaWJsZVJlZ2lzdHJhdGlvbk5hbWVzIiwiaW5qZWN0RXZlbnRQbHVnaW5PcmRlciIsImluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSIsIkRhIiwiRWEiLCJGYSIsIkdhIiwiY3VycmVudFRhcmdldCIsIkhhIiwiSWEiLCJKYSIsIkthIiwiX2Rpc3BhdGNoTGlzdGVuZXJzIiwiX2Rpc3BhdGNoSW5zdGFuY2VzIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJpc1BlcnNpc3RlbnQiLCJMYSIsIk1hIiwiTmEiLCJPYSIsInN0YXRlTm9kZSIsImRpc2FibGVkIiwiUGEiLCJRYSIsIlJhIiwiaW5qZWN0aW9uIiwiZ2V0TGlzdGVuZXIiLCJydW5FdmVudHNJbkJhdGNoIiwicnVuRXh0cmFjdGVkRXZlbnRzSW5CYXRjaCIsIlNhIiwiVGEiLCJVYSIsIlZhIiwiWGEiLCJiYiIsInByZWNhY2hlRmliZXJOb2RlIiwiZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUiLCJnZXRJbnN0YW5jZUZyb21Ob2RlIiwiZ2V0Tm9kZUZyb21JbnN0YW5jZSIsImdldEZpYmVyQ3VycmVudFByb3BzRnJvbU5vZGUiLCJ1cGRhdGVGaWJlclByb3BzIiwiZGIiLCJkaXNwYXRjaENvbmZpZyIsImViIiwiX3RhcmdldEluc3QiLCJmYiIsImdiIiwiaGIiLCJpYiIsImpiIiwiYWx0ZXJuYXRlIiwia2IiLCJhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzIiwiYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NraXBUYXJnZXQiLCJhY2N1bXVsYXRlRW50ZXJMZWF2ZURpc3BhdGNoZXMiLCJhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlcyIsImxiIiwibWIiLCJfcm9vdCIsIl9zdGFydFRleHQiLCJfZmFsbGJhY2tUZXh0IiwibmIiLCJwYiIsInFiIiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwiZGVmYXVsdFByZXZlbnRlZCIsImlzVHJ1c3RlZCIsIm5hdGl2ZUV2ZW50IiwiSW50ZXJmYWNlIiwiaXNEZWZhdWx0UHJldmVudGVkIiwicmV0dXJuVmFsdWUiLCJzYiIsImV2ZW50UG9vbCIsInRiIiwiZGVzdHJ1Y3RvciIsInJiIiwiZ2V0UG9vbGVkIiwiY2FuY2VsQnViYmxlIiwicGVyc2lzdCIsImV4dGVuZCIsInViIiwidmIiLCJ3YiIsInhiIiwieWIiLCJkb2N1bWVudE1vZGUiLCJ6YiIsIkFiIiwiQmIiLCJLYiIsImJlZm9yZUlucHV0IiwiYnViYmxlZCIsImNhcHR1cmVkIiwiY29tcG9zaXRpb25FbmQiLCJjb21wb3NpdGlvblN0YXJ0IiwiY29tcG9zaXRpb25VcGRhdGUiLCJMYiIsIk1iIiwia2V5Q29kZSIsIk5iIiwiZGV0YWlsIiwiT2IiLCJSYiIsIndoaWNoIiwiUGIiLCJjdHJsS2V5IiwiYWx0S2V5IiwibWV0YUtleSIsImNoYXIiLCJRYiIsIlNiIiwiVGIiLCJpbmplY3RGaWJlckNvbnRyb2xsZWRIb3N0Q29tcG9uZW50IiwiVWIiLCJWYiIsIldiIiwicmVzdG9yZUNvbnRyb2xsZWRTdGF0ZSIsIlhiIiwiWWIiLCJaYiIsIiRiIiwiZW5xdWV1ZVN0YXRlUmVzdG9yZSIsIm5lZWRzU3RhdGVSZXN0b3JlIiwicmVzdG9yZVN0YXRlSWZOZWVkZWQiLCJiYyIsImNjIiwiZGMiLCJlYyIsImZjIiwiZGF0ZSIsImRhdGV0aW1lIiwiZGF0ZXRpbWUtbG9jYWwiLCJlbWFpbCIsIm1vbnRoIiwicGFzc3dvcmQiLCJyYW5nZSIsInRlbCIsIndlZWsiLCJnYyIsImhjIiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJpYyIsInNldEF0dHJpYnV0ZSIsImpjIiwibGMiLCJfdmFsdWVUcmFja2VyIiwiZ2V0VmFsdWUiLCJzZXRWYWx1ZSIsInN0b3BUcmFja2luZyIsImtjIiwibWMiLCJjaGVja2VkIiwibmMiLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsIlJlYWN0Q3VycmVudE93bmVyIiwib2MiLCJxYyIsInJjIiwic2MiLCJ0YyIsInVjIiwidmMiLCJ3YyIsInhjIiwieWMiLCJ6YyIsIkFjIiwiJCR0eXBlb2YiLCJCYyIsIl9kZWJ1Z093bmVyIiwiX2RlYnVnU291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiQ2MiLCJEYyIsIkVjIiwiYWNjZXB0c0Jvb2xlYW5zIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsIm11c3RVc2VQcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsIlNjIiwiVGMiLCJ0b1VwcGVyQ2FzZSIsIlVjIiwiR2MiLCJIYyIsIkZjIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlTlMiLCJWYyIsImRlZmF1bHRDaGVja2VkIiwiZGVmYXVsdFZhbHVlIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxDaGVja2VkIiwiV2MiLCJYYyIsImluaXRpYWxWYWx1ZSIsImNvbnRyb2xsZWQiLCJZYyIsIlpjIiwiJGMiLCJhZCIsInRhYkluZGV4IiwiYmQiLCJjaGFuZ2UiLCJjZCIsImRkIiwiZWQiLCJmZCIsImdkIiwiaGQiLCJqZCIsImRldGFjaEV2ZW50Iiwia2QiLCJsZCIsIm1kIiwibmQiLCJvZCIsInBkIiwiX2lzSW5wdXRFdmVudFN1cHBvcnRlZCIsInFkIiwicmQiLCJBbHQiLCJDb250cm9sIiwiTWV0YSIsIlNoaWZ0Iiwic2QiLCJnZXRNb2RpZmllclN0YXRlIiwidGQiLCJ1ZCIsInNjcmVlblgiLCJzY3JlZW5ZIiwiY2xpZW50WCIsImNsaWVudFkiLCJzaGlmdEtleSIsImJ1dHRvbnMiLCJyZWxhdGVkVGFyZ2V0IiwiZnJvbUVsZW1lbnQiLCJzcmNFbGVtZW50IiwidG9FbGVtZW50IiwidmQiLCJtb3VzZUVudGVyIiwibW91c2VMZWF2ZSIsIndkIiwicGFyZW50V2luZG93IiwieGQiLCJlZmZlY3RUYWciLCJ5ZCIsIl9yZWFjdEludGVybmFsRmliZXIiLCJ6ZCIsIkFkIiwiY2hpbGQiLCJzaWJsaW5nIiwiQmQiLCJEZCIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJFZCIsImNsaXBib2FyZERhdGEiLCJGZCIsIkdkIiwiY2hhckNvZGUiLCJIZCIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLCJJZCIsIjgiLCI5IiwiMTIiLCIxMyIsIjE2IiwiMTciLCIxOCIsIjE5IiwiMjAiLCIyNyIsIjMyIiwiMzMiLCIzNCIsIjM1IiwiMzYiLCIzNyIsIjM4IiwiMzkiLCI0MCIsIjQ1IiwiNDYiLCIxMTIiLCIxMTMiLCIxMTQiLCIxMTUiLCIxMTYiLCIxMTciLCIxMTgiLCIxMTkiLCIxMjAiLCIxMjEiLCIxMjIiLCIxMjMiLCIxNDQiLCIxNDUiLCIyMjQiLCJKZCIsImxvY2FsZSIsIktkIiwiZGF0YVRyYW5zZmVyIiwiTGQiLCJ0b3VjaGVzIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwiTWQiLCJOZCIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwiT2QiLCJQZCIsIlFkIiwiaXNJbnRlcmFjdGl2ZSIsIlJkIiwiaXNJbnRlcmFjdGl2ZVRvcExldmVsRXZlbnRUeXBlIiwiU2QiLCJUZCIsIlVkIiwidGFyZ2V0SW5zdCIsImFuY2VzdG9ycyIsImNvbnRhaW5lckluZm8iLCJ0b3BMZXZlbFR5cGUiLCJWZCIsIldkIiwiWGQiLCJZZCIsIlpkIiwiJGQiLCJfZW5hYmxlZCIsInNldEVuYWJsZWQiLCJpc0VuYWJsZWQiLCJ0cmFwQnViYmxlZEV2ZW50IiwidHJhcENhcHR1cmVkRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiYWUiLCJiZSIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsImNlIiwiZGUiLCJlZSIsImFuaW1hdGlvbiIsInRyYW5zaXRpb24iLCJmZSIsInRvcEFuaW1hdGlvbkVuZCIsInRvcEFuaW1hdGlvbkl0ZXJhdGlvbiIsInRvcEFuaW1hdGlvblN0YXJ0IiwidG9wQmx1ciIsInRvcENhbmNlbCIsInRvcENoYW5nZSIsInRvcENsaWNrIiwidG9wQ2xvc2UiLCJ0b3BDb21wb3NpdGlvbkVuZCIsInRvcENvbXBvc2l0aW9uU3RhcnQiLCJ0b3BDb21wb3NpdGlvblVwZGF0ZSIsInRvcENvbnRleHRNZW51IiwidG9wQ29weSIsInRvcEN1dCIsInRvcERvdWJsZUNsaWNrIiwidG9wRHJhZyIsInRvcERyYWdFbmQiLCJ0b3BEcmFnRW50ZXIiLCJ0b3BEcmFnRXhpdCIsInRvcERyYWdMZWF2ZSIsInRvcERyYWdPdmVyIiwidG9wRHJhZ1N0YXJ0IiwidG9wRHJvcCIsInRvcEZvY3VzIiwidG9wSW5wdXQiLCJ0b3BLZXlEb3duIiwidG9wS2V5UHJlc3MiLCJ0b3BLZXlVcCIsInRvcExvYWQiLCJ0b3BMb2FkU3RhcnQiLCJ0b3BNb3VzZURvd24iLCJ0b3BNb3VzZU1vdmUiLCJ0b3BNb3VzZU91dCIsInRvcE1vdXNlT3ZlciIsInRvcE1vdXNlVXAiLCJ0b3BQYXN0ZSIsInRvcFNjcm9sbCIsInRvcFNlbGVjdGlvbkNoYW5nZSIsInRvcFRleHRJbnB1dCIsInRvcFRvZ2dsZSIsInRvcFRvdWNoQ2FuY2VsIiwidG9wVG91Y2hFbmQiLCJ0b3BUb3VjaE1vdmUiLCJ0b3BUb3VjaFN0YXJ0IiwidG9wVHJhbnNpdGlvbkVuZCIsInRvcFdoZWVsIiwiZ2UiLCJ0b3BBYm9ydCIsInRvcENhblBsYXkiLCJ0b3BDYW5QbGF5VGhyb3VnaCIsInRvcER1cmF0aW9uQ2hhbmdlIiwidG9wRW1wdGllZCIsInRvcEVuY3J5cHRlZCIsInRvcEVuZGVkIiwidG9wRXJyb3IiLCJ0b3BMb2FkZWREYXRhIiwidG9wTG9hZGVkTWV0YWRhdGEiLCJ0b3BQYXVzZSIsInRvcFBsYXkiLCJ0b3BQbGF5aW5nIiwidG9wUHJvZ3Jlc3MiLCJ0b3BSYXRlQ2hhbmdlIiwidG9wU2Vla2VkIiwidG9wU2Vla2luZyIsInRvcFN0YWxsZWQiLCJ0b3BTdXNwZW5kIiwidG9wVGltZVVwZGF0ZSIsInRvcFZvbHVtZUNoYW5nZSIsInRvcFdhaXRpbmciLCJoZSIsImllIiwiamUiLCJrZSIsImxlIiwiZmlyc3RDaGlsZCIsIm1lIiwidGV4dENvbnRlbnQiLCJuZXh0U2libGluZyIsIm5lIiwiY29udGVudEVkaXRhYmxlIiwib2UiLCJwZSIsInFlIiwic2UiLCJ0ZSIsInVlIiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJnZXRTZWxlY3Rpb24iLCJhbmNob3JOb2RlIiwiYW5jaG9yT2Zmc2V0IiwiZm9jdXNOb2RlIiwiZm9jdXNPZmZzZXQiLCJ2ZSIsIm9uU2VsZWN0IiwieGUiLCJwZW5kaW5nUHJvcHMiLCJtZW1vaXplZFN0YXRlIiwidXBkYXRlUXVldWUiLCJtZW1vaXplZFByb3BzIiwibGFzdEVmZmVjdCIsImZpcnN0RWZmZWN0IiwibmV4dEVmZmVjdCIsImV4cGlyYXRpb25UaW1lIiwiemUiLCJBZSIsImlzUmVhY3RDb21wb25lbnQiLCJCZSIsIkNlIiwiRGUiLCJwZW5kaW5nQ2hpbGRyZW4iLCJpbXBsZW1lbnRhdGlvbiIsIlNpbXBsZUV2ZW50UGx1Z2luIiwiRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIiwiQ2hhbmdlRXZlbnRQbHVnaW4iLCJTZWxlY3RFdmVudFBsdWdpbiIsIkJlZm9yZUlucHV0RXZlbnRQbHVnaW4iLCJFZSIsIkZlIiwiR2UiLCJJZSIsIkplIiwiS2UiLCJiYXNlU3RhdGUiLCJjYWxsYmFja0xpc3QiLCJoYXNGb3JjZVVwZGF0ZSIsImlzSW5pdGlhbGl6ZWQiLCJjYXB0dXJlZFZhbHVlcyIsIkxlIiwiTWUiLCJOZSIsIk9lIiwiUGUiLCJRZSIsInBhcnRpYWxTdGF0ZSIsIlJlIiwiaXNSZXBsYWNlIiwiaXNGb3JjZWQiLCJjYWxsYmFjayIsImNhcHR1cmVkVmFsdWUiLCJTZSIsIlVlIiwiVmUiLCJfb3duZXIiLCJfc3RyaW5nUmVmIiwicmVmcyIsIldlIiwiWGUiLCJRIiwiSCIsIlllIiwiWmUiLCIkZSIsInBlbmRpbmdDb250ZXh0IiwiWSIsInNob3VsZFNldFRleHRDb250ZW50Iiwic2hvdWxkRGVwcmlvcml0aXplU3VidHJlZSIsInB1c2hIb3N0Q29udGV4dCIsInB1c2hIb3N0Q29udGFpbmVyIiwicHVzaFByb3ZpZGVyIiwiZ2V0TWFza2VkQ29udGV4dCIsImdldFVubWFza2VkQ29udGV4dCIsImhhc0NvbnRleHRDaGFuZ2VkIiwicHVzaENvbnRleHRQcm92aWRlciIsInB1c2hUb3BMZXZlbENvbnRleHRPYmplY3QiLCJpbnZhbGlkYXRlQ29udGV4dFByb3ZpZGVyIiwiZW50ZXJIeWRyYXRpb25TdGF0ZSIsIldhIiwicmVzZXRIeWRyYXRpb25TdGF0ZSIsIkNiIiwidHJ5VG9DbGFpbU5leHRIeWRyYXRhYmxlSW5zdGFuY2UiLCJKYyIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwidXBkYXRlciIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImNhY2hlQ29udGV4dCIsImlzQ29udGV4dENvbnN1bWVyIiwiaXNNb3VudGVkIiwiZW5xdWV1ZVNldFN0YXRlIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwiYWRvcHRDbGFzc0luc3RhbmNlIiwiY2FsbEdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsImNvbnN0cnVjdENsYXNzSW5zdGFuY2UiLCJtb3VudENsYXNzSW5zdGFuY2UiLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnRXaWxsTW91bnQiLCJyZXN1bWVNb3VudENsYXNzSW5zdGFuY2UiLCJ1cGRhdGVDbGFzc0luc3RhbmNlIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiVGUiLCJLYyIsIkxjIiwiRGIiLCJNYyIsIkViIiwiYmVnaW5Xb3JrIiwiaHlkcmF0ZSIsIl9jYWxjdWxhdGVDaGFuZ2VkQml0cyIsIl9jdXJyZW50VmFsdWUiLCJfY2hhbmdlZEJpdHMiLCJ1bnN0YWJsZV9vYnNlcnZlZEJpdHMiLCJjZiIsInN1cHByZXNzUmVhY3RFcnJvckxvZ2dpbmciLCJlZiIsImxmIiwiSSIsIllhIiwiWiIsIk5jIiwieWEiLCJjYSIsInBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZSIsIk9jIiwiWmEiLCJnZXREZXJpdmVkU3RhdGVGcm9tQ2F0Y2giLCJjb21wb25lbnREaWRDYXRjaCIsImlhIiwiemEiLCJkYSIsIkZiIiwieGciLCJ5ZSIsIkljIiwiUGMiLCJHYiIsIm1nIiwiUWMiLCJsZyIsInRpbWVvdXQiLCJuZXh0U2NoZWR1bGVkUm9vdCIsInJlbWFpbmluZ0V4cGlyYXRpb25UaW1lIiwibGEiLCJKIiwiSGIiLCJhYSIsIiRhIiwiSWIiLCJBYSIsIl9vbkNvbXBsZXRlIiwid2ciLCJCYSIsIkpiIiwiZmluaXNoZWRXb3JrIiwiZmlyc3RCYXRjaCIsIl9leHBpcmF0aW9uVGltZSIsIl9kZWZlciIsInpnIiwiYWIiLCJrZyIsIndlIiwiZ2ciLCJBZyIsImhnIiwiaWciLCJqZyIsInRpbWVSZW1haW5pbmciLCJCZyIsImNyZWF0ZUN1cnNvciIsImNoZWNrVGhhdFN0YWNrSXNFbXB0eSIsInJlc2V0U3RhY2tBZnRlckZhdGFsRXJyb3JJbkRldiIsImtmIiwiZ2V0Q2hpbGRIb3N0Q29udGV4dCIsImdldFJvb3RIb3N0Q29udGV4dCIsImdldEhvc3RDb250ZXh0IiwiZ2V0Um9vdEhvc3RDb250YWluZXIiLCJwb3BIb3N0Q29udGFpbmVyIiwicG9wSG9zdENvbnRleHQiLCJmZiIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dCIsImlzQ29udGV4dFByb3ZpZGVyIiwicG9wQ29udGV4dFByb3ZpZGVyIiwicG9wVG9wTGV2ZWxDb250ZXh0T2JqZWN0IiwiY3Vyc29yIiwicHJvY2Vzc0NoaWxkQ29udGV4dCIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0IiwiZmluZEN1cnJlbnRVbm1hc2tlZENvbnRleHQiLCJoZiIsInBvcFByb3ZpZGVyIiwiamYiLCJoeWRyYXRpb24iLCJwcmVwYXJlVG9IeWRyYXRlSG9zdEluc3RhbmNlIiwicHJlcGFyZVRvSHlkcmF0ZUhvc3RUZXh0SW5zdGFuY2UiLCJwb3BIeWRyYXRpb25TdGF0ZSIsImNhbkh5ZHJhdGVJbnN0YW5jZSIsImNhbkh5ZHJhdGVUZXh0SW5zdGFuY2UiLCJnZXROZXh0SHlkcmF0YWJsZVNpYmxpbmciLCJnZXRGaXJzdEh5ZHJhdGFibGVDaGlsZCIsImh5ZHJhdGVJbnN0YW5jZSIsImh5ZHJhdGVUZXh0SW5zdGFuY2UiLCJnZiIsImNyZWF0ZUluc3RhbmNlIiwiY3JlYXRlVGV4dEluc3RhbmNlIiwiYXBwZW5kSW5pdGlhbENoaWxkIiwiZmluYWxpemVJbml0aWFsQ2hpbGRyZW4iLCJwcmVwYXJlVXBkYXRlIiwicGVyc2lzdGVuY2UiLCJtdXRhdGlvbiIsImNvbXBsZXRlV29yayIsImFmIiwidGhyb3dFeGNlcHRpb24iLCJ1bndpbmRXb3JrIiwidW53aW5kSW50ZXJydXB0ZWRXb3JrIiwiYmYiLCJnZXRQdWJsaWNJbnN0YW5jZSIsImNvbW1pdE1vdW50IiwiY29tbWl0VXBkYXRlIiwicmVzZXRUZXh0Q29udGVudCIsImNvbW1pdFRleHRVcGRhdGUiLCJhcHBlbmRDaGlsZFRvQ29udGFpbmVyIiwiaW5zZXJ0QmVmb3JlIiwiaW5zZXJ0SW5Db250YWluZXJCZWZvcmUiLCJyZW1vdmVDaGlsZEZyb21Db250YWluZXIiLCJjb21taXRCZWZvcmVNdXRhdGlvbkxpZmVDeWNsZXMiLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsImNvbW1pdFJlc2V0VGV4dENvbnRlbnQiLCJjb21taXRQbGFjZW1lbnQiLCJjb21taXREZWxldGlvbiIsImNvbW1pdFdvcmsiLCJjb21taXRMaWZlQ3ljbGVzIiwiY29tbWl0RXJyb3JMb2dnaW5nIiwiY29tcG9uZW50U3RhY2siLCJjb21taXRBdHRhY2hSZWYiLCJjb21taXREZXRhY2hSZWYiLCJkZiIsInNjaGVkdWxlRGVmZXJyZWRDYWxsYmFjayIsImNhbmNlbERlZmVycmVkQ2FsbGJhY2siLCJwcmVwYXJlRm9yQ29tbWl0IiwicmVzZXRBZnRlckNvbW1pdCIsIlJjIiwicmVjYWxjdWxhdGVDdXJyZW50VGltZSIsImNvbXB1dGVFeHBpcmF0aW9uRm9yRmliZXIiLCJzY2hlZHVsZVdvcmsiLCJyZXF1ZXN0V29yayIsImZsdXNoUm9vdCIsImJhdGNoZWRVcGRhdGVzIiwidW5iYXRjaGVkVXBkYXRlcyIsImZsdXNoU3luYyIsImZsdXNoQ29udHJvbGxlZCIsImRlZmVycmVkVXBkYXRlcyIsInN5bmNVcGRhdGVzIiwiaW50ZXJhY3RpdmVVcGRhdGVzIiwiZmx1c2hJbnRlcmFjdGl2ZVVwZGF0ZXMiLCJjb21wdXRlVW5pcXVlQXN5bmNFeHBpcmF0aW9uIiwibGVnYWN5Q29udGV4dCIsIm1mIiwiY3JlYXRlQ29udGFpbmVyIiwidXBkYXRlQ29udGFpbmVyIiwidXBkYXRlQ29udGFpbmVyQXRFeHBpcmF0aW9uVGltZSIsImdldFB1YmxpY1Jvb3RJbnN0YW5jZSIsImZpbmRIb3N0SW5zdGFuY2UiLCJmaW5kSG9zdEluc3RhbmNlV2l0aE5vUG9ydGFscyIsIkNkIiwiaW5qZWN0SW50b0RldlRvb2xzIiwiZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UiLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJpc0Rpc2FibGVkIiwic3VwcG9ydHNGaWJlciIsImluamVjdCIsIm9uQ29tbWl0RmliZXJSb290Iiwib25Db21taXRGaWJlclVubW91bnQiLCJIZSIsImZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyIiwibmYiLCJwZiIsInJmIiwic2YiLCJ0ZiIsInVmIiwicmVxdWVzdElkbGVDYWxsYmFjayIsImNhbmNlbElkbGVDYWxsYmFjayIsInZmIiwid2YiLCJ4ZiIsInlmIiwiemYiLCJBZiIsIkJmIiwiQ2YiLCJkaWRUaW1lb3V0IiwiRGYiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJFZiIsIkdmIiwiQ2hpbGRyZW4iLCJGZiIsIkhmIiwic2VsZWN0ZWQiLCJkZWZhdWx0U2VsZWN0ZWQiLCJJZiIsIndhc011bHRpcGxlIiwibXVsdGlwbGUiLCJKZiIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiS2YiLCJMZiIsIk1mIiwiTmYiLCJtYXRobWwiLCJzdmciLCJPZiIsIlBmIiwiUWYiLCJSZiIsIm5hbWVzcGFjZVVSSSIsImlubmVySFRNTCIsIk1TQXBwIiwiZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24iLCJTZiIsImxhc3RDaGlsZCIsIm5vZGVWYWx1ZSIsIlRmIiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlU2xpY2UiLCJib3JkZXJJbWFnZVdpZHRoIiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImNvbHVtbkNvdW50IiwiY29sdW1ucyIsImZsZXgiLCJmbGV4R3JvdyIsImZsZXhQb3NpdGl2ZSIsImZsZXhTaHJpbmsiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTcGFuIiwiZ3JpZFJvd1N0YXJ0IiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3BhbiIsImdyaWRDb2x1bW5TdGFydCIsImxpbmVDbGFtcCIsIm9yZGVyIiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZU9wYWNpdHkiLCJVZiIsIlZmIiwic2V0UHJvcGVydHkiLCJXZiIsIm1lbnVpdGVtIiwiYmFzZSIsImJyIiwiZW1iZWQiLCJociIsImltZyIsImtleWdlbiIsInBhcmFtIiwidHJhY2siLCJ3YnIiLCJYZiIsIllmIiwiWmYiLCIkZiIsImFnIiwiY3JlYXRlRWxlbWVudE5TIiwiYmciLCJfX2h0bWwiLCJvbmNsaWNrIiwiZGciLCJlZyIsImZnIiwibmciLCJvZyIsInNldEluaXRpYWxQcm9wZXJ0aWVzIiwiZGlmZlByb3BlcnRpZXMiLCJ1cGRhdGVQcm9wZXJ0aWVzIiwiZGlmZkh5ZHJhdGVkUHJvcGVydGllcyIsImRpZmZIeWRyYXRlZFRleHQiLCJ3YXJuRm9yVW5tYXRjaGVkVGV4dCIsIndhcm5Gb3JEZWxldGVkSHlkcmF0YWJsZUVsZW1lbnQiLCJ3YXJuRm9yRGVsZXRlZEh5ZHJhdGFibGVUZXh0Iiwid2FybkZvckluc2VydGVkSHlkcmF0ZWRFbGVtZW50Iiwid2FybkZvckluc2VydGVkSHlkcmF0ZWRUZXh0IiwicXVlcnlTZWxlY3RvckFsbCIsImZvcm0iLCJwZyIsInFnIiwicmciLCJYIiwiX2NhbGxiYWNrcyIsIl9uZXh0IiwiX2hhc0NoaWxkcmVuIiwiX2RpZENvbXBsZXRlIiwiX2NoaWxkcmVuIiwic2ciLCJfZGlkQ29tbWl0IiwiX29uQ29tbWl0IiwidGciLCJfaW50ZXJuYWxSb290IiwidWciLCJ2ZyIsImF1dG9Gb2N1cyIsImNvbW1pdCIsInVubW91bnQiLCJsZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJjcmVhdGVCYXRjaCIsInRhZ05hbWUiLCJyYW5nZUNvdW50IiwiZm9jdXNlZEVsZW0iLCJzZWxlY3Rpb25SYW5nZSIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnQiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsInNldEVuZCIsInNjcm9sbExlZnQiLCJzY3JvbGxUb3AiLCJmb2N1cyIsImhpZGRlbiIsImRpZE5vdE1hdGNoSHlkcmF0ZWRDb250YWluZXJUZXh0SW5zdGFuY2UiLCJkaWROb3RNYXRjaEh5ZHJhdGVkVGV4dEluc3RhbmNlIiwiZGlkTm90SHlkcmF0ZUNvbnRhaW5lckluc3RhbmNlIiwiZGlkTm90SHlkcmF0ZUluc3RhbmNlIiwiZGlkTm90RmluZEh5ZHJhdGFibGVDb250YWluZXJJbnN0YW5jZSIsImRpZE5vdEZpbmRIeWRyYXRhYmxlQ29udGFpbmVyVGV4dEluc3RhbmNlIiwiZGlkTm90RmluZEh5ZHJhdGFibGVJbnN0YW5jZSIsImRpZE5vdEZpbmRIeWRyYXRhYmxlVGV4dEluc3RhbmNlIiwiQ2ciLCJFZyIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJoYXNBdHRyaWJ1dGUiLCJEZyIsIkZnIiwicWYiLCJHZyIsImNyZWF0ZVBvcnRhbCIsImZpbmRET01Ob2RlIiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwidW5zdGFibGVfY3JlYXRlUG9ydGFsIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9kZWZlcnJlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9mbHVzaENvbnRyb2xsZWQiLCJFdmVudFBsdWdpbkh1YiIsIkV2ZW50UGx1Z2luUmVnaXN0cnkiLCJFdmVudFByb3BhZ2F0b3JzIiwiUmVhY3RDb250cm9sbGVkQ29tcG9uZW50IiwiUmVhY3RET01Db21wb25lbnRUcmVlIiwiUmVhY3RET01FdmVudExpc3RlbmVyIiwidW5zdGFibGVfY3JlYXRlUm9vdCIsImJ1bmRsZVR5cGUiLCJyZW5kZXJlclBhY2thZ2VOYW1lIiwiSGciLCJJZyIsImNoZWNrRENFIiwiX19zZWxmIiwiX19zb3VyY2UiLCJrZXlQcmVmaXgiLCI9IiwiOiIsInRvQXJyYXkiLCJjcmVhdGVSZWYiLCJQdXJlQ29tcG9uZW50IiwiY3JlYXRlQ29udGV4dCIsIl9kZWZhdWx0VmFsdWUiLCJDb25zdW1lciIsImZvcndhcmRSZWYiLCJGcmFnbWVudCIsIlN0cmljdE1vZGUiLCJ1bnN0YWJsZV9Bc3luY01vZGUiLCJjbG9uZUVsZW1lbnQiLCJjcmVhdGVGYWN0b3J5IiwiaXNWYWxpZEVsZW1lbnQiLCJBcHAiLCJfQmFzZTIiLCJSZWFjdERPTSIsImZyZWVHbG9iYWwiXSwibWFwcGluZ3MiOiJhQUNBLElBQUFBLEtBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFDLFFBR0EsSUFBQUMsRUFBQUosRUFBQUUsSUFDQUcsRUFBQUgsRUFDQUksR0FBQSxFQUNBSCxZQVVBLE9BTkFJLEVBQUFMLEdBQUFNLEtBQUFKLEVBQUFELFFBQUFDLElBQUFELFFBQUFGLEdBR0FHLEVBQUFFLEdBQUEsRUFHQUYsRUFBQUQsUUFLQUYsRUFBQVEsRUFBQUYsRUFHQU4sRUFBQVMsRUFBQVYsRUFHQUMsRUFBQVUsRUFBQSxTQUFBUixFQUFBUyxFQUFBQyxHQUNBWixFQUFBYSxFQUFBWCxFQUFBUyxJQUNBRyxPQUFBQyxlQUFBYixFQUFBUyxHQUNBSyxjQUFBLEVBQ0FDLFlBQUEsRUFDQUMsSUFBQU4sS0FNQVosRUFBQW1CLEVBQUEsU0FBQWpCLEdBQ0FZLE9BQUFDLGVBQUFiLEVBQUEsY0FBaURrQixPQUFBLEtBSWpEcEIsRUFBQXFCLEVBQUEsU0FBQWxCLEdBQ0EsSUFBQVMsRUFBQVQsS0FBQW1CLFdBQ0EsV0FBMkIsT0FBQW5CLEVBQUEsU0FDM0IsV0FBaUMsT0FBQUEsR0FFakMsT0FEQUgsRUFBQVUsRUFBQUUsRUFBQSxJQUFBQSxHQUNBQSxHQUlBWixFQUFBYSxFQUFBLFNBQUFVLEVBQUFDLEdBQXNELE9BQUFWLE9BQUFXLFVBQUFDLGVBQUFuQixLQUFBZ0IsRUFBQUMsSUFHdER4QixFQUFBMkIsRUFBQSxHQUlBM0IsSUFBQTRCLEVBQUEsbzJCQ25FQTVCLEVBQUFVLEVBQUFtQixFQUFBLHNCQUFBQyxJQUFBLElBQUFDLEVBQUFqQixPQUFBa0IsUUFBQSxTQUFBQyxHQUFtRCxRQUFBN0IsRUFBQSxFQUFnQkEsRUFBQThCLFVBQUFDLE9BQXNCL0IsSUFBQSxDQUFPLElBQUFnQyxFQUFBRixVQUFBOUIsR0FBMkIsUUFBQWlDLEtBQUFELEVBQTBCdEIsT0FBQVcsVUFBQUMsZUFBQW5CLEtBQUE2QixFQUFBQyxLQUF5REosRUFBQUksR0FBQUQsRUFBQUMsSUFBaUMsT0FBQUosR0FFL09LLEVBQUEsbUJBQUFDLFFBQUEsaUJBQUFBLE9BQUFDLFNBQUEsU0FBQUMsR0FBb0csY0FBQUEsR0FBcUIsU0FBQUEsR0FBbUIsT0FBQUEsR0FBQSxtQkFBQUYsUUFBQUUsRUFBQUMsY0FBQUgsUUFBQUUsSUFBQUYsT0FBQWQsVUFBQSxnQkFBQWdCLEdBRTVJRSxFQUFBLFNBQUFDLEdBQ0Esc0JBQUFBLEdBR0FDLEVBQUFGLEVBQUEsUUFDQUcsRUFBQUgsRUFBQSxVQUNBSSxFQUFBSixFQUFBLFNBQ0FLLEVBQUFMLEVBQUEsa0JBQ0FNLEVBQUFOLEVBQUEsZUFDQU8sRUFBQVAsRUFBQSxxQkFDQVEsRUFBQSxTQUFBQyxHQUNBLGtCQUNBLE9BQUFBLElBR0FDLEVBQUFGLEdBQUEsR0FFQUcsRUFBQSxhQUNBQyxFQUFBLFNBQUFILEdBQ0EsT0FBQUEsR0FHQSxTQUFBSSxFQUFBcEMsRUFBQXFDLEVBQUFDLEdBQ0EsSUFBQUQsRUFBQXJDLEdBRUEsTUFEQXVDLEVBQUEsNEJBQUFELEdBQ0EsSUFBQUUsTUFBQUYsR0FJQSxJQUFBaEMsRUFBQVosT0FBQVcsVUFBQUMsZUFDQSxTQUFBbUMsRUFBQXRDLEVBQUFDLEdBQ0EsT0FBQXNDLEVBQUFDLFNBQUF4QyxJQUFBRyxFQUFBbkIsS0FBQWdCLEVBQUFDLEdBR0EsSUFBQXNDLEdBQ0FFLE1BQUEsU0FBQVosR0FDQSxjQUFBQSxRQUFBYSxJQUFBYixHQUVBVyxTQUFBLFNBQUFYLEdBQ0EsY0FBQUEsUUFBQWEsSUFBQWIsR0FFQWMsS0FBQSxTQUFBQyxHQUNBLHlCQUFBQSxHQUVBQyxPQUFBLFNBQUEvQyxHQUNBLHVCQUFBQSxHQUVBZ0QsT0FBQSxTQUFBekMsR0FDQSx1QkFBQUEsR0FFQTBDLE1BQUFDLE1BQUFDLFFBQ0FqRCxPQUFBLFNBQUFrQixHQUNBLE9BQUFBLElBQUFxQixFQUFBUSxNQUFBN0IsSUFBQSxxQkFBQUEsRUFBQSxZQUFBSCxFQUFBRyxLQUVBZ0MsUUFBQSxTQUFBOUMsR0FDQSxPQUFBQSxHQUFBbUMsRUFBQUksS0FBQXZDLEVBQUErQyxPQUVBbEMsU0FBQSxTQUFBbUMsR0FDQSxPQUFBQSxHQUFBYixFQUFBSSxLQUFBUyxFQUFBQyxPQUFBZCxFQUFBSSxLQUFBUyxFQUFBRSxRQUVBQyxTQUFBLFNBQUFILEdBQ0EsT0FBQUEsR0FBQWIsRUFBQUksS0FBQTNCLFFBQUF1QixFQUFBSSxLQUFBUyxFQUFBcEMsT0FBQUMsV0FBQXNCLEVBQUFRLE1BQUFLLElBRUFJLEtBQUEsU0FBQUMsR0FDQSxPQUFBQSxLQUFBbkMsSUFFQW9DLFdBQUEsU0FBQUMsR0FDQSxPQUFBQSxHQUFBcEIsRUFBQUksS0FBQWdCLEVBQUFDLFlBRUFDLE9BQUEsU0FBQUMsR0FDQSxPQUFBQSxHQUFBdkIsRUFBQUksS0FBQW1CLEVBQUFDLFVBQUF4QixFQUFBSSxLQUFBbUIsRUFBQUUsT0FBQXpCLEVBQUFJLEtBQUFtQixFQUFBRyxNQUVBQyxRQUFBLFNBQUFDLEdBQ0EsT0FBQUEsSUFBQTVCLEVBQUFPLE9BQUFxQixJQUFBLHFCQUFBQSxFQUFBLFlBQUFwRCxFQUFBb0QsS0FBQTVCLEVBQUFJLEtBQUF3QixJQUFBNUIsRUFBQVEsTUFBQW9CLEtBRUFDLFFBQUEsU0FBQUMsR0FDQSxPQUFBQSxHQUFBOUIsRUFBQUksS0FBQTBCLEVBQUFMLE9BQUF6QixFQUFBSSxLQUFBMEIsRUFBQUMsUUFFQUMsT0FBQSxTQUFBbkIsR0FDQSxPQUFBQSxLQUFBN0IsSUFFQWlELGVBQUEsU0FBQTVCLEdBQ0EsT0FBQUwsRUFBQUksS0FBQUMsSUFBQU4sRUFBQU0sRUFBQSxjQUlBNUMsR0FDQVMsT0FBQSxTQUFBQyxFQUFBRyxHQUNBLFFBQUFoQyxLQUFBZ0MsRUFDQXlCLEVBQUF6QixFQUFBaEMsS0FDQTZCLEVBQUE3QixHQUFBZ0MsRUFBQWhDLE1BTUEsU0FBQTRGLEVBQUExQixFQUFBMkIsR0FDQSxJQUFBQyxFQUFBNUIsRUFBQTZCLFFBQUFGLEdBQ0FDLEdBQUEsR0FDQTVCLEVBQUE4QixPQUFBRixFQUFBLEdBSUEsSUFBQTVCLEdBQ0ErQixLQUFBLFNBQUE1RCxHQUNBLElBQUE2RCxFQUFBL0IsTUFBQTlCLEVBQUFOLFFBQ0EsUUFBQS9CLEtBQUFxQyxFQUNBb0IsRUFBQXBCLEVBQUFyQyxLQUNBa0csRUFBQWxHLEdBQUFxQyxFQUFBckMsSUFHQSxPQUFBa0csSUFJQSxTQUFBQyxJQUNBLElBQUFDLEVBQUF0RSxVQUFBQyxPQUFBLFFBQUE4QixJQUFBL0IsVUFBQSxHQUFBQSxVQUFBLE1BRUF1RSxFQUFBMUUsS0FBdUJ5RSxHQUN2Qi9CLEVBQUEsSUFBQWlDLFFBQUEsU0FBQUMsRUFBQUMsR0FDQUgsRUFBQUUsVUFDQUYsRUFBQUcsV0FHQSxPQURBSCxFQUFBaEMsVUFDQWdDLEVBR0EsU0FBQUksRUFBQTFFLEdBRUEsSUFEQSxJQUFBbUUsS0FDQWxHLEVBQUEsRUFBaUJBLEVBQUErQixFQUFZL0IsSUFDN0JrRyxFQUFBUSxLQUFBUCxLQUVBLE9BQUFELEVBR0EsU0FBQVMsRUFBQUMsR0FDQSxJQUFBQyxJQUFBL0UsVUFBQUMsT0FBQSxRQUFBOEIsSUFBQS9CLFVBQUEsS0FBQUEsVUFBQSxHQUVBZ0YsT0FBQSxFQUNBekMsRUFBQSxJQUFBaUMsUUFBQSxTQUFBQyxHQUNBTyxFQUFBQyxXQUFBLFdBQ0EsT0FBQVIsRUFBQU0sSUFDS0QsS0FPTCxPQUpBdkMsRUFBQXpCLEdBQUEsV0FDQSxPQUFBb0UsYUFBQUYsSUFHQXpDLEVBR0EsU0FBQTRDLElBQ0EsSUFBQUMsRUFFQUMsR0FBQSxFQUNBQyxPQUFBLEVBQ0FDLE9BQUEsRUFFQSxPQUFBSCxNQUFrQnpFLElBQUEsRUFBQXlFLEVBQUFJLFVBQUEsV0FDbEIsT0FBQUgsR0FDR0QsRUFBQUssT0FBQSxXQUNILE9BQUFILEdBQ0dGLEVBQUE1RCxNQUFBLFdBQ0gsT0FBQStELEdBQ0dILEVBQUFNLFdBQUEsU0FBQUMsR0FDSCxPQUFBTixFQUFBTSxHQUNHUCxFQUFBUSxVQUFBLFNBQUEzRyxHQUNILE9BQUFxRyxFQUFBckcsR0FDR21HLEVBQUFTLFNBQUEsU0FBQUMsR0FDSCxPQUFBUCxFQUFBTyxHQUNHVixFQVdILElBQUFXLEVBUkEsV0FDQSxJQUFBQyxFQUFBaEcsVUFBQUMsT0FBQSxRQUFBOEIsSUFBQS9CLFVBQUEsR0FBQUEsVUFBQSxLQUVBLGtCQUNBLFFBQUFnRyxHQUlBQyxHQUVBQyxFQUFBLFNBQUFDLEdBQ0EsTUFBQUEsR0FFQUMsRUFBQSxTQUFBbEgsR0FDQSxPQUFVQSxRQUFBbUgsTUFBQSxJQUVWLFNBQUFDLEVBQUE1RCxHQUNBLElBQUE2RCxFQUFBdkcsVUFBQUMsT0FBQSxRQUFBOEIsSUFBQS9CLFVBQUEsR0FBQUEsVUFBQSxHQUFBa0csRUFDQXpILEVBQUF1QixVQUFBQyxPQUFBLFFBQUE4QixJQUFBL0IsVUFBQSxHQUFBQSxVQUFBLE1BQ0F3RyxFQUFBeEcsVUFBQSxHQUVBTSxHQUFrQjdCLE9BQUFpRSxPQUFBQyxNQUFBNEQsRUFBQUUsT0FBQUwsR0FVbEIsT0FSQUksSUFDQWxHLEVBQUFNLElBQUEsR0FFQSxvQkFBQVAsU0FDQUMsRUFBQUQsT0FBQUMsVUFBQSxXQUNBLE9BQUFBLElBR0FBLEVBUUEsU0FBQW1CLEVBQUFpRixFQUFBQyxHQUNBLElBQUFuRixFQUFBeEIsVUFBQUMsT0FBQSxRQUFBOEIsSUFBQS9CLFVBQUEsR0FBQUEsVUFBQSxNQUdBLG9CQUFBNEcsT0FDQUMsUUFBQXBGLElBQUEsY0FBQWlGLEVBQUEsS0FBQUMsRUFBQSxNQUFBbkYsS0FBQXNGLE9BQUF0RixJQUVBcUYsUUFBQUgsR0FBQUMsRUFBQW5GLEdBSUEsU0FBQXVGLEVBQUFDLEVBQUFDLEdBQ0Esa0JBRUEsT0FBQUQsRUFBQUUsV0FBQW5GLEVBQUEvQixZQUlBLElBQUFtSCxFQUFBLFNBQUFDLEVBQUFDLEdBQ0EsT0FBQUQsRUFBQSxvQ0FBQUMsRUFBQSw2QkFHQUMsRUFBQSxTQUFBbkIsR0FDQSxXQUFBekUsTUFBQSxvTUFBQXlFLEVBQUEsT0FHQW9CLEVBQUEsU0FBQUMsRUFBQWxELEdBQ0EsT0FBQWtELElBQUEsdUNBQUFsRCxFQUFBLDBCQUdBbUQsRUFBQSxTQUFBQyxHQUNBLGdCQUFBQyxHQUNBLE9BQUFELEVBQUE5SSxPQUFBQyxlQUFBOEksRUFBQTVHLEdBQWdFN0IsT0FBQSxPQUloRVUsRUFBQSxTQUFBQSxFQUFBZ0ksR0FDQSxrQkFDQSxRQUFBQyxFQUFBN0gsVUFBQUMsT0FBQTZILEVBQUF6RixNQUFBd0YsR0FBQUUsRUFBQSxFQUFtRUEsRUFBQUYsRUFBYUUsSUFDaEZELEVBQUFDLEdBQUEvSCxVQUFBK0gsR0FHQSxJQUFBQyxLQUNBQyxFQUFBTCxFQUFBVixXQUFBbkYsRUFBQStGLEdBQ0EsT0FDQXBGLEtBQUEsU0FBQXdGLEdBRUEsT0FEQUYsRUFBQXBELEtBQUFzRCxHQUNBRCxFQUFBdkYsS0FBQXdGLElBRUFDLE1BQUEsV0FDQSxJQUFBQyxFQUFBeEksRUFBQWdJLEdBQUFWLFdBQUFuRixFQUFBK0YsR0FJQSxPQUhBRSxFQUFBSyxRQUFBLFNBQUFILEdBQ0EsT0FBQUUsRUFBQTFGLEtBQUF3RixLQUVBRSxHQUVBM0IsT0FBQSxTQUFBdkgsR0FDQSxPQUFBK0ksRUFBQXhCLE9BQUF2SCxJQUVBeUQsTUFBQSxTQUFBMkYsR0FDQSxPQUFBTCxFQUFBdEYsTUFBQTJGLHdCQ3JSQSxJQUFBQyxFQUFBekssRUFBQSxHQUNBMEssRUFBQTFLLEVBQUEsSUFDQTJLLEVBQUEzSyxFQUFBLElBQ0E0SyxFQUFBNUssRUFBQSxJQUNBMEosRUFBQTFKLEVBQUEsSUFHQTZLLEVBQUEsU0FBQUMsRUFBQW5LLEVBQUF5QixHQUNBLElBUUFDLEVBQUEwSSxFQUFBQyxFQUFBQyxFQVJBQyxFQUFBSixFQUFBRCxFQUFBTSxFQUNBQyxFQUFBTixFQUFBRCxFQUFBUSxFQUNBQyxFQUFBUixFQUFBRCxFQUFBVSxFQUNBQyxFQUFBVixFQUFBRCxFQUFBWSxFQUNBQyxFQUFBWixFQUFBRCxFQUFBYyxFQUNBMUosRUFBQW1KLEVBQUFYLEVBQUFhLEVBQUFiLEVBQUE5SixLQUFBOEosRUFBQTlKLFFBQWtGOEosRUFBQTlKLFFBQXVCLFVBQ3pHVCxFQUFBa0wsRUFBQVYsSUFBQS9KLEtBQUErSixFQUFBL0osT0FDQWlMLEVBQUExTCxFQUFBLFlBQUFBLEVBQUEsY0FHQSxJQUFBbUMsS0FEQStJLElBQUFoSixFQUFBekIsR0FDQXlCLEVBSUE0SSxJQUZBRCxHQUFBRyxHQUFBakosUUFBQWdDLElBQUFoQyxFQUFBSSxJQUVBSixFQUFBRyxHQUFBQyxHQUVBNEksRUFBQVMsR0FBQVgsRUFBQXJCLEVBQUFzQixFQUFBUCxHQUFBZSxHQUFBLG1CQUFBUixFQUFBdEIsRUFBQW1DLFNBQUF0TCxLQUFBeUssS0FFQS9JLEdBQUEySSxFQUFBM0ksRUFBQUksRUFBQTJJLEVBQUFGLEVBQUFELEVBQUFpQixHQUVBNUwsRUFBQW1DLElBQUEySSxHQUFBTCxFQUFBekssRUFBQW1DLEVBQUE0SSxHQUNBTyxHQUFBSSxFQUFBdkosSUFBQTJJLElBQUFZLEVBQUF2SixHQUFBMkksSUFHQVAsRUFBQUMsT0FFQUcsRUFBQU0sRUFBQSxFQUNBTixFQUFBUSxFQUFBLEVBQ0FSLEVBQUFVLEVBQUEsRUFDQVYsRUFBQVksRUFBQSxFQUNBWixFQUFBYyxFQUFBLEdBQ0FkLEVBQUFrQixFQUFBLEdBQ0FsQixFQUFBaUIsRUFBQSxHQUNBakIsRUFBQW1CLEVBQUEsSUFDQTdMLEVBQUFELFFBQUEySyxteEJDdkNBb0IsRUFBQW5MLE9BQUFvTCxFQUFBLEVBQUFwTCxDQUFBLE1BQ0FxTCxFQUFBLE9BQ0FDLEVBQUEsTUFDQUMsRUFBQSxNQUNBQyxFQUFBLE9BQ0FDLEVBQUEsT0FDQUMsRUFBQSxNQUNBQyxFQUFBLE9BQ0FDLEVBQUEsT0FDQTFKLEVBQUEsU0FDQTJKLEVBQUEsU0FDQUMsRUFBQSxpQkFDQUMsRUFBQSxZQUNBQyxFQUFBLFFBQ0FDLEVBQUEsY0FDQUMsRUFBQSxjQUVBQyxFQUFBLHlHQUVBQyxFQUFBLFNBQUFwQyxFQUFBcUMsR0FDQSxJQUFBN0YsRUFFQSxPQUFBQSxNQUFrQjJFLElBQUEsRUFBQTNFLEVBQUF3RCxHQUFBcUMsRUFBQTdGLEdBR2xCOEYsRUFBQSxTQUFBQyxHQUdBLE9BRkF2TSxPQUFBb0wsRUFBQSxFQUFBcEwsQ0FBQXdNLEVBQUFDLEtBQUFGLEdBQUFuQixFQUFBLEVBQUEzSyxPQUFBLCtDQUNBOEwsRUFBQVosR0FBQWUsVUFBQSxFQUNBSCxHQUdBLFNBQUE5SCxJQUNBLElBQUFrSSxFQUFBdkwsVUFBQUMsT0FBQSxRQUFBOEIsSUFBQS9CLFVBQUEsR0FBQUEsVUFBQSxPQUtBLEdBSEFBLFVBQUFDLFFBQ0FyQixPQUFBb0wsRUFBQSxFQUFBcEwsQ0FBQW9CLFVBQUEsR0FBQWdLLEVBQUEsRUFBQW5JLFNBQUEseURBRUFtSSxFQUFBLEVBQUF6RyxRQUFBZ0ksR0FDQSxPQUFBUCxFQUFBZixHQUF5QjFHLFFBQUFnSSxJQUV6QixHQUFBdkIsRUFBQSxFQUFBdkcsUUFBQThILEdBQ0EsT0FBQVAsRUFBQWYsR0FBeUJ4RyxRQUFBOEgsSUFFekIsVUFBQTdKLE1BQUEsb0NBQUE4SixPQUFBRCxHQUFBLDRDQUdBbEksRUFBQW9JLE1BQUEsV0FDQSxJQUFBTixFQUFBOUgsRUFBQTZELFdBQUFuRixFQUFBL0IsV0FFQSxPQURBbUwsRUFBQWxCLEdBQUF3QixPQUFBLEVBQ0FOLEdBR0EsSUFBQU8sRUFBQTlNLE9BQUFvTCxFQUFBLEVBQUFwTCxDQUFBeUUsRUFBQW9JLE1BQUE3TSxPQUFBb0wsRUFBQSxFQUFBcEwsQ0FBQSx1QkFFQSxTQUFBMEUsRUFBQUcsRUFBQWtFLEdBVUEsT0FUQTNILFVBQUFDLE9BQUEsR0FDQXJCLE9BQUFvTCxFQUFBLEVBQUFwTCxDQUFBNkUsRUFBQXVHLEVBQUEsRUFBQW5JLFNBQUEsdURBQ0FqRCxPQUFBb0wsRUFBQSxFQUFBcEwsQ0FBQTZFLEVBQUF1RyxFQUFBLEVBQUF2RyxRQUFBLGtDQUFBQSxFQUFBLDJCQUNBN0UsT0FBQW9MLEVBQUEsRUFBQXBMLENBQUErSSxFQUFBcUMsRUFBQSxFQUFBbkksU0FBQSx3REFFQWpELE9BQUFvTCxFQUFBLEVBQUFwTCxDQUFBNkUsRUFBQXVHLEVBQUEsRUFBQW5JLFNBQUEsNkNBQ0E4RixFQUFBbEUsRUFDQUEsRUFBQSxNQUVBdUgsRUFBQWQsR0FBc0J6RyxVQUFBa0UsV0FXdEIsU0FBQWdFLEVBQUFDLEdBQ0EsT0FBQVosRUFBQWIsRUFBQXlCLEdBR0EsU0FBQUMsRUFBQUQsR0FDQSxPQUFBWixFQUFBWixFQUFBd0IsR0FHQSxTQUFBRSxFQUFBQyxFQUFBL0UsRUFBQWMsR0FDQWxKLE9BQUFvTCxFQUFBLEVBQUFwTCxDQUFBb0ksRUFBQWdELEVBQUEsRUFBQW5JLFNBQUFrSyxFQUFBLDhCQUVBLElBQUFDLEVBQUEsS0FDQSxHQUFBaEMsRUFBQSxFQUFBNUgsTUFBQTRFLEdBQUEsQ0FDQSxJQUFBaUYsRUFBQWpGLEVBQ0FnRixFQUFBQyxFQUFBLEdBQ0FqRixFQUFBaUYsRUFBQSxRQUNHLEdBQUFqRixLQUFBLENBQ0gsSUFBQWtGLEVBQUFsRixFQUNBZ0YsRUFBQUUsRUFBQUYsUUFDQWhGLEVBQUFrRixFQUFBbEYsR0FPQSxPQUxBZ0YsR0FBQWhDLEVBQUEsRUFBQTdILE9BQUE2RSxJQUFBZ0QsRUFBQSxFQUFBaEksS0FBQWdLLEVBQUFoRixNQUNBQSxFQUFBZ0YsRUFBQWhGLElBRUFwSSxPQUFBb0wsRUFBQSxFQUFBcEwsQ0FBQW9JLEVBQUFnRCxFQUFBLEVBQUFoSSxLQUFBK0osRUFBQSxjQUFBL0UsRUFBQSx1QkFFVWdGLFVBQUFoRixLQUFBYyxRQUdWLFNBQUF6SixFQUFBMkksR0FDQSxRQUFBYSxFQUFBN0gsVUFBQUMsT0FBQTZILEVBQUF6RixNQUFBd0YsRUFBQSxFQUFBQSxFQUFBLEtBQUFFLEVBQUEsRUFBb0ZBLEVBQUFGLEVBQWFFLElBQ2pHRCxFQUFBQyxFQUFBLEdBQUEvSCxVQUFBK0gsR0FHQSxPQUFBaUQsRUFBQVgsRUFBQXlCLEVBQUEsT0FBQTlFLEVBQUFjLElBR0EsU0FBQVosRUFBQThFLEVBQUFoRixHQUNBLElBQUFjLEVBQUE5SCxVQUFBQyxPQUFBLFFBQUE4QixJQUFBL0IsVUFBQSxHQUFBQSxVQUFBLE1BRUEsT0FBQWdMLEVBQUFYLEVBQUF5QixFQUFBLFNBQThDRSxVQUFBaEYsTUFBMkJjLElBR3pFLFNBQUFxRSxFQUFBbkYsR0FDQSxRQUFBb0YsRUFBQXBNLFVBQUFDLE9BQUE2SCxFQUFBekYsTUFBQStKLEVBQUEsRUFBQUEsRUFBQSxLQUFBQyxFQUFBLEVBQXdGQSxFQUFBRCxFQUFlQyxJQUN2R3ZFLEVBQUF1RSxFQUFBLEdBQUFyTSxVQUFBcU0sR0FHQSxPQUFBckIsRUFBQVYsRUFBQXdCLEVBQUEsTUFBQTlFLEVBQUFjLElBR0EsU0FBQXVELEVBQUFyRSxHQUNBLFFBQUFzRixFQUFBdE0sVUFBQUMsT0FBQTZILEVBQUF6RixNQUFBaUssRUFBQSxFQUFBQSxFQUFBLEtBQUFDLEVBQUEsRUFBd0ZBLEVBQUFELEVBQWVDLElBQ3ZHekUsRUFBQXlFLEVBQUEsR0FBQXZNLFVBQUF1TSxHQUdBLE9BQUF2QixFQUFBVCxFQUFBdUIsRUFBQSxPQUFBOUUsRUFBQWMsSUFHQSxTQUFBMEUsRUFBQXhGLEdBQ0EsUUFBQXlGLEVBQUF6TSxVQUFBQyxPQUFBNkgsRUFBQXpGLE1BQUFvSyxFQUFBLEVBQUFBLEVBQUEsS0FBQUMsRUFBQSxFQUF3RkEsRUFBQUQsRUFBZUMsSUFDdkc1RSxFQUFBNEUsRUFBQSxHQUFBMU0sVUFBQTBNLEdBR0EsT0FBQXhCLEVBQUFHLEVBQUFuRSxXQUFBbkYsR0FBQWlGLEdBQUEyRixPQUFBN0UsS0FHQSxTQUFBOEUsSUFDQSxRQUFBQyxFQUFBN00sVUFBQUMsT0FBQTZNLEVBQUF6SyxNQUFBd0ssR0FBQUUsRUFBQSxFQUFxRUEsRUFBQUYsRUFBZUUsSUFDcEZELEVBQUFDLEdBQUEvTSxVQUFBK00sR0FHQSxHQUFBRCxFQUFBN00sT0FBQSxFQUNBLE9BQUEwTCxFQUFBbUIsRUFBQUUsSUFBQSxTQUFBbEssR0FDQSxPQUFBOEosRUFBQTlKLE1BR0EsSUFBQUQsRUFBQWlLLEVBQUEsR0FHQSxPQUZBbE8sT0FBQW9MLEVBQUEsRUFBQXBMLENBQUFpRSxFQUFBbUgsRUFBQSxFQUFBbkksU0FBQSwwQ0FDQWpELE9BQUFvTCxFQUFBLEVBQUFwTCxDQUFBaUUsRUFBQW1ILEVBQUEsRUFBQW5ILEtBQUEsd0JBQUFBLEVBQUEsK0JBQUFrSSxHQUNBQyxFQUFBUixFQUFBM0gsR0FHQSxTQUFBb0ssSUFDQSxRQUFBQyxFQUFBbE4sVUFBQUMsT0FBQTZNLEVBQUF6SyxNQUFBNkssR0FBQUMsRUFBQSxFQUFxRUEsRUFBQUQsRUFBZUMsSUFDcEZMLEVBQUFLLEdBQUFuTixVQUFBbU4sR0FHQSxHQUFBTCxFQUFBN00sT0FBQSxFQUNBLE9BQUEwTCxFQUFBbUIsRUFBQUUsSUFBQSxTQUFBbEssR0FDQSxPQUFBbUssRUFBQW5LLE1BR0EsSUFBQUQsRUFBQWlLLEVBQUEsR0FLQSxPQUpBLElBQUFBLEVBQUE3TSxTQUNBckIsT0FBQW9MLEVBQUEsRUFBQXBMLENBQUFpRSxFQUFBbUgsRUFBQSxFQUFBbkksU0FBQSw0Q0FDQWpELE9BQUFvTCxFQUFBLEVBQUFwTCxDQUFBaUUsRUFBQW1ILEVBQUEsRUFBQW5ILEtBQUEsMEJBQUFBLEVBQUEsK0JBQUFrSSxJQUVBQyxFQUFBbEssRUFBQStCLEdBQUFtSCxFQUFBLEdBR0EsU0FBQW9ELEVBQUFDLEdBQ0EsUUFBQUMsRUFBQXROLFVBQUFDLE9BQUE2SCxFQUFBekYsTUFBQWlMLEVBQUEsRUFBQUEsRUFBQSxLQUFBQyxFQUFBLEVBQXdGQSxFQUFBRCxFQUFlQyxJQUN2R3pGLEVBQUF5RixFQUFBLEdBQUF2TixVQUFBdU4sR0FTQSxPQU5BLElBQUF2TixVQUFBQyxPQUNBb04sRUFBQXJELEVBQUEsR0FFQXBMLE9BQUFvTCxFQUFBLEVBQUFwTCxDQUFBeU8sRUFBQXJELEVBQUEsRUFBQW5JLFNBQUEsMERBQ0FqRCxPQUFBb0wsRUFBQSxFQUFBcEwsQ0FBQXlPLEVBQUFyRCxFQUFBLEVBQUFoSSxLQUFBLG9DQUFBcUwsRUFBQSx1QkFFQXJDLEVBQUFQLEdBQXlCNEMsV0FBQXZGLFNBTXpCLFNBQUEwRixFQUFBakssRUFBQUwsR0FNQSxPQUxBdEUsT0FBQW9MLEVBQUEsRUFBQXBMLENBQUEyRSxFQUFBeUcsRUFBQSxFQUFBbkksU0FBQSw2REFDQTdCLFVBQUFDLE9BQUEsSUFDQXJCLE9BQUFvTCxFQUFBLEVBQUFwTCxDQUFBc0UsRUFBQThHLEVBQUEsRUFBQW5JLFNBQUEsZ0VBQ0FqRCxPQUFBb0wsRUFBQSxFQUFBcEwsQ0FBQXNFLEVBQUE4RyxFQUFBLEVBQUE5RyxPQUFBLDRDQUFBQSxFQUFBLDJCQUVBOEgsRUFBQU4sR0FBaUNuSCxVQUFBTCxXQUdqQyxTQUFBdUssSUFDQSxPQUFBekMsRUFBQUwsTUFHQSxTQUFBK0MsRUFBQWpLLEdBRUEsT0FEQTdFLE9BQUFvTCxFQUFBLEVBQUFwTCxDQUFBNkUsRUFBQXVHLEVBQUEsRUFBQXZHLFFBQUEsNEJBQUFBLEVBQUEseUJBQ0F1SCxFQUFBSixFQUFBbkgsR0FHQSxTQUFBa0ssRUFBQUMsR0FFQSxPQURBaFAsT0FBQW9MLEVBQUEsRUFBQXBMLENBQUFnUCxFQUFBNUQsRUFBQSxFQUFBN0gsT0FBQSw4QkFBQXlMLEVBQUEsb0JBQ0E1QyxFQUFBSCxFQUFBK0MsR0FHQSxTQUFBQyxFQUFBdkosR0FFQSxPQURBMUYsT0FBQW9MLEVBQUEsRUFBQXBMLENBQUEwRixFQUFBMEYsRUFBQSxFQUFBM0ssT0FBQVQsT0FBQW9MLEVBQUEsRUFBQXBMLENBQUEsS0FBQTBGLElBQ0EwRyxFQUFBRixFQUFBeEcsR0FHQSxTQUFBd0osRUFBQXZDLEVBQUF3QyxHQUNBLFFBQUFDLEVBQUFoTyxVQUFBQyxPQUFBNkgsRUFBQXpGLE1BQUEyTCxFQUFBLEVBQUFBLEVBQUEsS0FBQUMsRUFBQSxFQUF3RkEsRUFBQUQsRUFBZUMsSUFDdkduRyxFQUFBbUcsRUFBQSxHQUFBak8sVUFBQWlPLEdBR0EsT0FBQTVDLEVBQUFuRSxXQUFBbkYsR0FBQW1NLEVBQUEsRUFBQTNDLEVBQUF3QyxHQUFBcEIsT0FBQTdFLElBR0EsU0FBQXFHLEVBQUE1QyxFQUFBd0MsR0FDQSxRQUFBSyxFQUFBcE8sVUFBQUMsT0FBQTZILEVBQUF6RixNQUFBK0wsRUFBQSxFQUFBQSxFQUFBLEtBQUFDLEVBQUEsRUFBd0ZBLEVBQUFELEVBQWVDLElBQ3ZHdkcsRUFBQXVHLEVBQUEsR0FBQXJPLFVBQUFxTyxHQUdBLE9BQUFoRCxFQUFBbkUsV0FBQW5GLEdBQUFtTSxFQUFBLEVBQUEzQyxFQUFBd0MsR0FBQXBCLE9BQUE3RSxJQUdBLFNBQUF3RyxFQUFBeEosRUFBQXZCLEVBQUF3SyxHQUNBLFFBQUFRLEVBQUF2TyxVQUFBQyxPQUFBNkgsRUFBQXpGLE1BQUFrTSxFQUFBLEVBQUFBLEVBQUEsS0FBQUMsRUFBQSxFQUE0RkEsRUFBQUQsRUFBaUJDLElBQzdHMUcsRUFBQTBHLEVBQUEsR0FBQXhPLFVBQUF3TyxHQUdBLE9BQUFuRCxFQUFBbkUsV0FBQW5GLEdBQUFtTSxFQUFBLEVBQUFwSixFQUFBdkIsRUFBQXdLLEdBQUFwQixPQUFBN0UsSUEvS0F4RSxFQUFBbUIsUUFBQSxXQUNBLElBQUEwRyxFQUFBN0gsRUFBQTRELFdBQUFuRixFQUFBL0IsV0FFQSxPQURBbUwsRUFBQWpCLEdBQUF6RixTQUFBLEVBQ0EwRyxHQUdBN0gsRUFBQW1MLEtBQUE3UCxPQUFBb0wsRUFBQSxFQUFBcEwsQ0FBQTBFLEVBQUFtQixRQUFBN0YsT0FBQW9MLEVBQUEsRUFBQXBMLENBQUEsMkJBNEtBLElBQUE4UCxFQUFBLFNBQUE5RixHQUNBLGdCQUFBb0MsR0FDQSxPQUFBQSxLQUFBakIsSUFBQWlCLEVBQUFwQyxLQUlBd0MsR0FDQS9ILEtBQUFxTCxFQUFBekUsR0FDQTNHLElBQUFvTCxFQUFBeEUsR0FDQXlCLElBQUErQyxFQUFBdkUsR0FDQTBCLEtBQUE2QyxFQUFBdEUsR0FDQS9MLEtBQUFxUSxFQUFBckUsR0FDQThCLElBQUF1QyxFQUFBcEUsR0FDQWUsS0FBQXFELEVBQUFuRSxHQUNBcUMsS0FBQThCLEVBQUFsRSxHQUNBeUMsT0FBQXlCLEVBQUE1TixHQUNBc00sT0FBQXNCLEVBQUFqRSxHQUNBK0MsY0FBQWtCLEVBQUFoRSxHQUNBK0MsVUFBQWlCLEVBQUEvRCxHQUNBK0MsTUFBQWdCLEVBQUE5RCxHQUNBK0MsV0FBQWUsRUFBQTdELEdBQ0FnRCxXQUFBYSxFQUFBNUQscUJDN1FBLElBQUE2RCxFQUFBN1EsRUFBQSxHQUNBRyxFQUFBRCxRQUFBLFNBQUF5RSxHQUNBLElBQUFrTSxFQUFBbE0sR0FBQSxNQUFBbU0sVUFBQW5NLEVBQUEsc0JBQ0EsT0FBQUEsa0JDRkEsSUFBQThGLEVBQUF0SyxFQUFBRCxRQUFBLG9CQUFBNEksZUFBQWlJLFdBQ0FqSSxPQUFBLG9CQUFBa0ksV0FBQUQsV0FBQUMsS0FFQW5GLFNBQUEsY0FBQUEsR0FDQSxpQkFBQW9GLFVBQUF4RyxrQkNMQXRLLEVBQUFELFFBQUEsU0FBQWdSLEdBQ0EsSUFDQSxRQUFBQSxJQUNHLE1BQUFsSixHQUNILDBCQ0pBN0gsRUFBQUQsUUFBQSxTQUFBeUUsR0FDQSx1QkFBQUEsRUFBQSxPQUFBQSxFQUFBLG1CQUFBQSxpQ0NFQXhFLEVBQUFELFFBQUFGLEVBQUEsc0JDSEEsSUFBQW1SLEVBQUFuUixFQUFBLEdBQUFBLENBQUEsT0FDQWlJLEVBQUFqSSxFQUFBLElBQ0F1QyxFQUFBdkMsRUFBQSxHQUFBdUMsT0FDQTZPLEVBQUEsbUJBQUE3TyxHQUVBcEMsRUFBQUQsUUFBQSxTQUFBUyxHQUNBLE9BQUF3USxFQUFBeFEsS0FBQXdRLEVBQUF4USxHQUNBeVEsR0FBQTdPLEVBQUE1QixLQUFBeVEsRUFBQTdPLEVBQUEwRixHQUFBLFVBQUF0SCxNQUdBd1EseUJDVEEsSUFBQUUsRUFBQXJSLEVBQUEsSUFDQXNSLEVBQUFQLEtBQUFPLElBQ0FuUixFQUFBRCxRQUFBLFNBQUF5RSxHQUNBLE9BQUFBLEVBQUEsRUFBQTJNLEVBQUFELEVBQUExTSxHQUFBLHNDQ0pBLElBQUE0TSxFQUFBdlIsRUFBQSxHQUNBd1IsRUFBQXhSLEVBQUEsS0FDQXlSLEVBQUF6UixFQUFBLElBQ0EwUixFQUFBNVEsT0FBQUMsZUFFQWIsRUFBQWlFLEVBQUFuRSxFQUFBLElBQUFjLE9BQUFDLGVBQUEsU0FBQTRRLEVBQUFsRyxFQUFBbUcsR0FJQSxHQUhBTCxFQUFBSSxHQUNBbEcsRUFBQWdHLEVBQUFoRyxHQUFBLEdBQ0E4RixFQUFBSyxHQUNBSixFQUFBLElBQ0EsT0FBQUUsRUFBQUMsRUFBQWxHLEVBQUFtRyxHQUNHLE1BQUE1SixJQUNILFdBQUE0SixHQUFBLFFBQUFBLEVBQUEsTUFBQWQsVUFBQSw0QkFFQSxNQURBLFVBQUFjLElBQUFELEVBQUFsRyxHQUFBbUcsRUFBQXhRLE9BQ0F1USxvQkNiQXhSLEVBQUFELFNBQUFGLEVBQUEsRUFBQUEsQ0FBQSxXQUNBLE9BQTBFLEdBQTFFYyxPQUFBQyxrQkFBaUMsS0FBUUcsSUFBQSxXQUFtQixZQUFjMlEscUVDQTFFQyxFQUFBQyxFQUFBRixFQUFBRyxPQUNBQyxhQUFBRixFQUFBRixFQUFBM04sS0FBQWdPLFdBQ0FDLGVBQUFKLEVBQUFGLEVBQUEzTixLQUFBZ08sV0FDQUUsaUJBQUFMLEVBQUFGLEVBQUEzTixLQUFBZ08sV0FDQUcsYUFBQU4sRUFBQUYsRUFBQTNOLEtBQUFnTyxhQUdBSSxFQUFBUCxFQUFBRixFQUFBRyxPQUNBN00sVUFBQTRNLEVBQUFGLEVBQUEzTixLQUFBZ08sV0FDQXRJLFNBQUFtSSxFQUFBRixFQUFBM04sS0FBQWdPLFdBQ0FLLFNBQUFSLEVBQUFGLEVBQUEzTixLQUFBZ08sYUNTQSxTQUFBTSxJQUNBLElBQUFDLEVBRUFDLEVBQUF4USxVQUFBQyxPQUFBLFFBQUE4QixJQUFBL0IsVUFBQSxHQUFBQSxVQUFBLFdBR0F5USxFQUZBelEsVUFBQSxJQUVBd1EsRUFBQSxlQUVBRSxFQUFBLFNBQUFDLEdBU0EsU0FBQUQsRUFBQXBNLEVBQUEwSCxJQXRDQSxTQUFBNEUsRUFBQUMsR0FBaUQsS0FBQUQsYUFBQUMsR0FBMEMsVUFBQWpDLFVBQUEscUNBdUMzRmtDLENBQUFDLEtBQUFMLEdBRUEsSUFBQU0sRUF2Q0EsU0FBQWxDLEVBQUF6USxHQUFpRCxJQUFBeVEsRUFBYSxVQUFBbUMsZUFBQSw2REFBeUYsT0FBQTVTLEdBQUEsaUJBQUFBLEdBQUEsbUJBQUFBLEVBQUF5USxFQUFBelEsRUF1Q3ZKNlMsQ0FBQUgsS0FBQUosRUFBQXRTLEtBQUEwUyxLQUFBek0sRUFBQTBILElBR0EsT0FEQWdGLEVBQUFSLEdBQUFsTSxFQUFBMkssTUFDQStCLEVBT0EsT0EvQ0EsU0FBQUcsRUFBQUMsR0FBMEMsc0JBQUFBLEdBQUEsT0FBQUEsRUFBK0QsVUFBQXhDLFVBQUEsa0VBQUF3QyxHQUF1R0QsRUFBQTVSLFVBQUFYLE9BQUF5UyxPQUFBRCxLQUFBN1IsV0FBeUVpQixhQUFldEIsTUFBQWlTLEVBQUFwUyxZQUFBLEVBQUF1UyxVQUFBLEVBQUF4UyxjQUFBLEtBQTZFc1MsSUFBQXhTLE9BQUEyUyxlQUFBM1MsT0FBQTJTLGVBQUFKLEVBQUFDLEdBQUFELEVBQUFLLFVBQUFKLEdBMEJyWEssQ0FBQWYsRUFBQUMsR0FFQUQsRUFBQW5SLFVBQUFtUyxnQkFBQSxXQUNBLElBQUF0TSxFQUVBLE9BQUFBLE1BQXNCb0wsR0FBQU8sS0FBQVAsR0FBQXBMLEVBQUFxTCxHQUFBLEtBQUFyTCxHQVl0QnNMLEVBQUFuUixVQUFBb1MsT0FBQSxXQUNBLE9BQUFDLEVBQUEsU0FBQUMsS0FBQWQsS0FBQXpNLE1BQUF3TixXQUdBcEIsRUF0QkEsQ0F1QkdrQixFQUFBLFdBZ0JILE9BTkFsQixFQUFBcUIsV0FDQTlDLE1BQUFtQixFQUFBSixXQUNBOEIsU0FBQWpDLEVBQUFGLEVBQUFxQyxRQUFBaEMsWUFFQVUsRUFBQXVCLG9CQUFBMUIsTUFBMERDLEdBQUFKLEVBQUFKLFdBQUFPLEVBQUFFLEdBQUFiLEVBQUFXLEdBRTFERyxFQUdBLElBQUF3QixFQUFBNUIsdUNDakVBLElBQUE2QixFQUFBLEtBQ0FDLEdBQ0FDLE9BQUEsY0F1Q0EsSUFBQUMsRUFBQSxXQUNBLFNBQUFBLEVBQUFyRCxFQUFBc0QsRUFBQUMsSUFoREEsU0FBQTVCLEVBQUFDLEdBQWlELEtBQUFELGFBQUFDLEdBQTBDLFVBQUFqQyxVQUFBLHFDQWlEM0Y2RCxDQUFBMUIsS0FBQXVCLEdBRUF2QixLQUFBOUIsUUFDQThCLEtBQUF3QixZQUNBeEIsS0FBQXlCLGdCQUNBekIsS0FBQTJCLFlBQUEsS0FDQTNCLEtBQUE0QixVQUFBUCxFQWlDQSxPQTlCQUUsRUFBQS9TLFVBQUFxVCxhQUFBLFNBQUFDLEdBRUEsT0FEQTlCLEtBQUFoQixlQUNBZ0IsS0FBQTRCLFVBQUExUCxVQUFBNFAsSUFHQVAsRUFBQS9TLFVBQUEyUSxpQkFBQSxXQUNBYSxLQUFBNEIsVUFBQU4sVUFHQUMsRUFBQS9TLFVBQUE0USxhQUFBLFdBQ0EsT0FBQTJDLFFBQUEvQixLQUFBMkIsY0FHQUosRUFBQS9TLFVBQUF3USxhQUFBLFdBNURBLElBR0FnRCxFQUNBclEsRUF5REFxTyxLQUFBMkIsY0FDQTNCLEtBQUEyQixZQUFBM0IsS0FBQXdCLFVBQUF4QixLQUFBd0IsVUFBQUssYUFBQTdCLEtBQUF5QixlQUFBekIsS0FBQTlCLE1BQUFoTSxVQUFBOE4sS0FBQXlCLGVBRUF6QixLQUFBNEIsV0E3REFJLEtBQ0FyUSxNQUdBc1EsTUFBQSxXQUNBdFEsRUFBQXlQLEVBQ0FZLEVBQUFaLEdBRUFFLE9BQUEsV0FFQSxJQURBLElBQUFNLEVBQUFJLEVBQUFyUSxFQUNBeEUsRUFBQSxFQUFxQkEsRUFBQXlVLEVBQUExUyxPQUFzQi9CLElBQzNDeVUsRUFBQXpVLE1BR0FjLElBQUEsV0FDQSxPQUFBMEQsR0FFQU8sVUFBQSxTQUFBNFAsR0FDQSxJQUFBMUMsR0FBQSxFQUlBLE9BSEF6TixJQUFBcVEsSUFBQXJRLEVBQUFxUSxFQUFBRSxTQUNBdlEsRUFBQWtDLEtBQUFpTyxHQUVBLFdBQ0ExQyxHQUFBNEMsSUFBQVosSUFDQWhDLEdBQUEsRUFFQXpOLElBQUFxUSxJQUFBclEsRUFBQXFRLEVBQUFFLFNBQ0F2USxFQUFBd0IsT0FBQXhCLEVBQUF1QixRQUFBNE8sR0FBQSxVQXNDQVAsRUFBQS9TLFVBQUEwUSxlQUFBLFdBQ0FjLEtBQUEyQixjQUNBM0IsS0FBQTJCLGNBQ0EzQixLQUFBMkIsWUFBQSxLQUNBM0IsS0FBQTRCLFVBQUFLLFFBQ0FqQyxLQUFBNEIsVUFBQVAsSUFJQUUsRUF6Q0EsR0MvQ0F6UyxFQUFBakIsT0FBQWtCLFFBQUEsU0FBQUMsR0FBbUQsUUFBQTdCLEVBQUEsRUFBZ0JBLEVBQUE4QixVQUFBQyxPQUFzQi9CLElBQUEsQ0FBTyxJQUFBZ0MsRUFBQUYsVUFBQTlCLEdBQTJCLFFBQUFpQyxLQUFBRCxFQUEwQnRCLE9BQUFXLFVBQUFDLGVBQUFuQixLQUFBNkIsRUFBQUMsS0FBeURKLEVBQUFJLEdBQUFELEVBQUFDLElBQWlDLE9BQUFKLEdBaUIvTyxJQUFBbVQsRUFBQSxFQUNBQyxLQUNBLFNBQUEvUixLQXNCQSxTQUFBZ1MsRUFlQUMsR0FDQSxJQUFBQyxFQUFBQyxFQUVBbk8sRUFBQXBGLFVBQUFDLE9BQUEsUUFBQThCLElBQUEvQixVQUFBLEdBQUFBLFVBQUEsTUFDQXdULEVBQUFwTyxFQUFBcU8sZUFDQUEsT0FBQTFSLElBQUF5UixFQUFBLFNBQUEvVSxHQUNBLHlCQUFBQSxFQUFBLEtBQ0crVSxFQUNIRSxFQUFBdE8sRUFBQXVPLFdBQ0FBLE9BQUE1UixJQUFBMlIsRUFBQSxrQkFBQUEsRUFDQUUsRUFBQXhPLEVBQUF5TyxnQkFDQUEsT0FBQTlSLElBQUE2UixPQUFBN1IsRUFBQTZSLEVBQ0FFLEVBQUExTyxFQUFBMk8seUJBQ0FBLE9BQUFoUyxJQUFBK1IsS0FDQUUsRUFBQTVPLEVBQUFvTCxTQUNBQSxPQUFBek8sSUFBQWlTLEVBQUEsUUFBQUEsRUFDQUMsRUFBQTdPLEVBQUE4TyxRQUNBQSxPQUFBblMsSUFBQWtTLEtBQ0FFLEVBbEVBLFNBQUE1VCxFQUFBNlQsR0FBOEMsSUFBQXJVLEtBQWlCLFFBQUE3QixLQUFBcUMsRUFBcUI2VCxFQUFBblEsUUFBQS9GLElBQUEsR0FBb0NVLE9BQUFXLFVBQUFDLGVBQUFuQixLQUFBa0MsRUFBQXJDLEtBQTZENkIsRUFBQTdCLEdBQUFxQyxFQUFBckMsSUFBc0IsT0FBQTZCLEVBa0UzTXNVLENBQUFqUCxHQUFBLGtHQUVBcUwsRUFBQUQsRUFBQSxlQUNBOEQsRUFBQXBCLElBRUFxQixJQUFBakIsTUFBd0M5QyxHQUFBSixFQUFBa0QsRUFBQTdDLEdBQUFiLEVBQUEwRCxHQUN4Q3JCLElBQUFzQixNQUFrRDlDLEdBQUFiLEVBQUEyRCxHQUVsRCxnQkFBQWlCLEdBQ0FDLElBQUEsbUJBQUFELEVBQUEseURBQUFiLEVBQUEsc0JBQUFlLEtBQUFDLFVBQUFILElBRUEsSUFBQUksRUFBQUosRUFBQUssYUFBQUwsRUFBQS9WLE1BQUEsWUFFQW9XLEVBQUFwQixFQUFBbUIsR0FFQUUsRUFBQWpWLEtBQTRDc1UsR0FDNUNWLGlCQUNBRSxhQUNBRSxrQkFDQUUsMkJBQ0F2RCxXQUNBMEQsVUFDQVcsY0FDQUQsdUJBQ0FKLHFCQUdBTyxFQUFBLFNBQUFwRSxHQUdBLFNBQUFvRSxFQUFBelEsRUFBQTBILElBdEdBLFNBQUE0RSxFQUFBQyxHQUFpRCxLQUFBRCxhQUFBQyxHQUEwQyxVQUFBakMsVUFBQSxxQ0F1RzNGb0csQ0FBQWpFLEtBQUFnRSxHQUVBLElBQUEvRCxFQXZHQSxTQUFBbEMsRUFBQXpRLEdBQWlELElBQUF5USxFQUFhLFVBQUFtQyxlQUFBLDZEQUF5RixPQUFBNVMsR0FBQSxpQkFBQUEsR0FBQSxtQkFBQUEsRUFBQXlRLEVBQUF6USxFQXVHdko0VyxDQUFBbEUsS0FBQUosRUFBQXRTLEtBQUEwUyxLQUFBek0sRUFBQTBILElBYUEsT0FYQWdGLEVBQUFzRCxVQUNBdEQsRUFBQWtFLFNBQ0FsRSxFQUFBbUUsWUFBQSxFQUNBbkUsRUFBQS9CLE1BQUEzSyxFQUFBa00sSUFBQXhFLEVBQUF3RSxHQUNBUSxFQUFBb0UsVUFBQXRDLFFBQUF4TyxFQUFBa00sSUFDQVEsRUFBQXFFLG1CQUFBckUsRUFBQXFFLG1CQUFBQyxLQUFBdEUsR0FFQXlELElBQUF6RCxFQUFBL0IsTUFBQSxtQkFBQXVCLEVBQUEsd0NBQUFxRSxFQUFBLDBFQUFBckUsRUFBQSxtQkFBQXFFLEVBQUEsTUFFQTdELEVBQUF1RSxlQUNBdkUsRUFBQXdFLG1CQUNBeEUsRUE4SEEsT0FoUEEsU0FBQUcsRUFBQUMsR0FBMEMsc0JBQUFBLEdBQUEsT0FBQUEsRUFBK0QsVUFBQXhDLFVBQUEsa0VBQUF3QyxHQUF1R0QsRUFBQTVSLFVBQUFYLE9BQUF5UyxPQUFBRCxLQUFBN1IsV0FBeUVpQixhQUFldEIsTUFBQWlTLEVBQUFwUyxZQUFBLEVBQUF1UyxVQUFBLEVBQUF4UyxjQUFBLEtBQTZFc1MsSUFBQXhTLE9BQUEyUyxlQUFBM1MsT0FBQTJTLGVBQUFKLEVBQUFDLEdBQUFELEVBQUFLLFVBQUFKLEdBZ0dyWHFFLENBQUFWLEVBQUFwRSxHQXFCQW9FLEVBQUF4VixVQUFBbVMsZ0JBQUEsV0FDQSxJQUFBZ0UsRUFNQUMsRUFBQTVFLEtBQUFxRSxVQUFBLEtBQUFyRSxLQUFBNEUsYUFDQSxPQUFBRCxNQUF5QmpGLEdBQUFrRixHQUFBNUUsS0FBQS9FLFFBQUF5RSxHQUFBaUYsR0FHekJYLEVBQUF4VixVQUFBcVcsa0JBQUEsV0FDQTdCLElBUUFoRCxLQUFBNEUsYUFBQTVGLGVBQ0FnQixLQUFBMUQsU0FBQXdJLElBQUE5RSxLQUFBek0sT0FDQXlNLEtBQUExRCxTQUFBeUksdUJBQUEvRSxLQUFBZ0YsZ0JBR0FoQixFQUFBeFYsVUFBQXlXLDBCQUFBLFNBQUFDLEdBQ0FsRixLQUFBMUQsU0FBQXdJLElBQUFJLElBR0FsQixFQUFBeFYsVUFBQXVXLHNCQUFBLFdBQ0EsT0FBQS9FLEtBQUExRCxTQUFBeUksdUJBR0FmLEVBQUF4VixVQUFBMlcscUJBQUEsV0FDQW5GLEtBQUE0RSxjQUFBNUUsS0FBQTRFLGFBQUExRixpQkFDQWMsS0FBQTRFLGFBQUEsS0FDQTVFLEtBQUFiLGlCQUFBOU8sRUFDQTJQLEtBQUE5QixNQUFBLEtBQ0E4QixLQUFBMUQsU0FBQXdJLElBQUF6VSxFQUNBMlAsS0FBQTFELFNBQUF5SSx1QkFBQSxHQUdBZixFQUFBeFYsVUFBQTRXLG1CQUFBLFdBRUEsT0FEQTFCLElBQUFQLEVBQUEsd0dBQXVHUCxFQUFBLFlBQ3ZHNUMsS0FBQXFGLGlCQUdBckIsRUFBQXhWLFVBQUE4VixtQkFBQSxTQUFBZ0IsR0FDQXRGLEtBQUFxRixnQkFBQUMsR0FHQXRCLEVBQUF4VixVQUFBZ1csYUFBQSxXQUNBLElBQUFlLEVBQUFqRCxFQUFBdEMsS0FBQTlCLE1BQUF2SCxTQUFBb04sR0FDQS9ELEtBQUExRCxTQTVKQSxTQUFBaUosRUFBQXJILEdBRUEsSUFBQTVCLEdBQ0F3SSxJQUFBLFNBQUF2UixHQUNBLElBQ0EsSUFBQTJSLEVBQUFLLEVBQUFySCxFQUFBb0IsV0FBQS9MLElBQ0EyUixJQUFBNUksRUFBQS9JLE9BQUErSSxFQUFBN0wsU0FDQTZMLEVBQUF5SSx1QkFBQSxFQUNBekksRUFBQS9JLE1BQUEyUixFQUNBNUksRUFBQTdMLE1BQUEsTUFFTyxNQUFBQSxHQUNQNkwsRUFBQXlJLHVCQUFBLEVBQ0F6SSxFQUFBN0wsV0FLQSxPQUFBNkwsRUEwSUFrSixDQUFBRCxFQUFBdkYsS0FBQTlCLE9BQ0E4QixLQUFBMUQsU0FBQXdJLElBQUE5RSxLQUFBek0sUUFHQXlRLEVBQUF4VixVQUFBaVcsaUJBQUEsV0FDQSxHQUFBekIsRUFBQSxDQUlBLElBQUF4QixHQUFBeEIsS0FBQXFFLFVBQUFyRSxLQUFBek0sTUFBQXlNLEtBQUEvRSxTQUFBeUUsR0FDQU0sS0FBQTRFLGFBQUEsSUFBQXJELEVBQUF2QixLQUFBOUIsTUFBQXNELEVBQUF4QixLQUFBeUIsY0FBQThDLEtBQUF2RSxPQVFBQSxLQUFBYixpQkFBQWEsS0FBQTRFLGFBQUF6RixpQkFBQW9GLEtBQUF2RSxLQUFBNEUsZ0JBR0FaLEVBQUF4VixVQUFBaVQsY0FBQSxXQUNBekIsS0FBQTFELFNBQUF3SSxJQUFBOUUsS0FBQXpNLE9BRUF5TSxLQUFBMUQsU0FBQXlJLHVCQUdBL0UsS0FBQXlGLG1CQUFBekYsS0FBQTBGLHFDQUNBMUYsS0FBQTJGLFNBQUF2RCxJQUhBcEMsS0FBQWIsb0JBT0E2RSxFQUFBeFYsVUFBQWtYLHFDQUFBLFdBTUExRixLQUFBeUYsd0JBQUF6VSxFQUNBZ1AsS0FBQWIsb0JBR0E2RSxFQUFBeFYsVUFBQTRRLGFBQUEsV0FDQSxPQUFBMkMsUUFBQS9CLEtBQUE0RSxlQUFBNUUsS0FBQTRFLGFBQUF4RixnQkFHQTRFLEVBQUF4VixVQUFBb1gsY0FBQSxTQUFBclMsR0FDQSxLQUFBNFAsR0FBQUwsR0FBQTlDLEtBQUFxRSxXQUFBckUsS0FBQTRFLGNBQUEsT0FBQXJSLEVBS0EsSUFBQXNTLEVBQUEvVyxLQUFvQ3lFLEdBSXBDLE9BSEE0UCxJQUFBMEMsRUFBQVAsSUFBQXRGLEtBQUFzRSxvQkFDQXhCLElBQUErQyxFQUFBL0MsR0FBQTlDLEtBQUFvRSxlQUNBcEUsS0FBQXFFLFdBQUFyRSxLQUFBNEUsZUFBQWlCLEVBQUFuRyxHQUFBTSxLQUFBNEUsY0FDQWlCLEdBR0E3QixFQUFBeFYsVUFBQW9TLE9BQUEsV0FDQSxJQUFBdEUsRUFBQTBELEtBQUExRCxTQUdBLEdBRkFBLEVBQUF5SSx1QkFBQSxFQUVBekksRUFBQTdMLE1BQ0EsTUFBQTZMLEVBQUE3TCxNQUVBLE9BQUE1QyxPQUFBZ1QsRUFBQSxjQUFBaFQsQ0FBQTRWLEVBQUF6RCxLQUFBNEYsY0FBQXRKLEVBQUEvSSxTQUlBeVEsRUFqSkEsQ0FrSktuRCxFQUFBLFdBdUNMLE9BckNBbUQsRUFBQVAsbUJBQ0FPLEVBQUFGLGNBQ0FFLEVBQUE5QyxvQkFDQThDLEVBQUFSLGVBQ0FRLEVBQUFoRCxVQUFBd0MsRUFpQ0FzQyxJQUFBOUIsRUFBQVAsSUM5UkEsSUFBQTdTLEVBQUEvQyxPQUFBVyxVQUFBQyxlQUVBLFNBQUFvQyxFQUFBa1YsRUFBQUMsR0FDQSxPQUFBRCxJQUFBQyxFQUNBLElBQUFELEdBQUEsSUFBQUMsR0FBQSxFQUFBRCxHQUFBLEVBQUFDLEVBRUFELE1BQUFDLEtBSUEsU0FBQUMsRUFBQUMsRUFBQUMsR0FDQSxHQUFBdFYsRUFBQXFWLEVBQUFDLEdBQUEsU0FFQSxvQkFBQUQsR0FBQSxPQUFBQSxHQUFBLGlCQUFBQyxHQUFBLE9BQUFBLEVBQ0EsU0FHQSxJQUFBQyxFQUFBdlksT0FBQXdWLEtBQUE2QyxHQUNBRyxFQUFBeFksT0FBQXdWLEtBQUE4QyxHQUVBLEdBQUFDLEVBQUFsWCxTQUFBbVgsRUFBQW5YLE9BQUEsU0FFQSxRQUFBL0IsRUFBQSxFQUFpQkEsRUFBQWlaLEVBQUFsWCxPQUFrQi9CLElBQ25DLElBQUF5RCxFQUFBdEQsS0FBQTZZLEVBQUFDLEVBQUFqWixNQUFBMEQsRUFBQXFWLEVBQUFFLEVBQUFqWixJQUFBZ1osRUFBQUMsRUFBQWpaLEtBQ0EsU0FJQSwrQkN6QkFtWixFQUFBLGlCQUFBdkksaUJBQUFsUSxpQkFBQWtRLEtDRUF3SSxHRENBQyxFQUFBLEdBQUFGLEdBQUExTixTQUFBLGNBQUFBLElDSEF0SixPQ0FBbVgsRUFBQTVZLE9BQUFXLFVBR0FpWSxFQUFBaFksZUFPQWdZLEVBQUFDLFNBR0FILEtBQUFJLFlDZkE5WSxPQUFBVyxVQU9Ba1ksU0NDQUgsS0FBQUksWUNOQTlZLE9BQUErWSxlQUFBL1ksT0N5QkEsSUNwQkFnWixFQUFBak8sU0FBQXBLLFVBQ0FzWSxFQUFBalosT0FBQVcsVUFHQXVZLEVBQUFGLEVBQUFILFNBR0FJLEVBQUFyWSxlQUdBc1ksRUFBQXpaLEtBQUFPLFFDaEJBLFNBQUFtWixFQUFBQyxHQUNBLGdCQUFBdFEsRUFBQXVRLEdBQ0EsSUFBQUMsRUFBQUYsRUFBQXRRLEVBQUF1USxHQUVBLFNBQUFFLElBQ0EsT0FBQUQsRUFHQSxPQURBQyxFQUFBQyxtQkFBQSxFQUNBRCxHQVdBLFNBQUFFLEVBQUFDLEdBQ0EsY0FBQUEsRUFBQUYsd0JBQUFyVyxJQUFBdVcsRUFBQUYsa0JBQUF0RixRQUFBd0YsRUFBQUYsbUJBQUEsSUFBQUUsRUFBQXJZLE9BZUEsU0FBQXNZLEVBQUFELEVBQUEzRSxHQUNBLGdCQUFBak0sRUFBQXRDLEdBQ0FBLEVBQUF5UCxZQUFBLElBRUEyRCxFQUFBLFNBQUFDLEVBQUFDLEdBQ0EsT0FBQUYsRUFBQUosa0JBQUFJLEVBQUFGLFdBQUFHLEVBQUFDLEdBQUFGLEVBQUFGLFdBQUFHLElBc0JBLE9BbEJBRCxFQUFBSixtQkFBQSxFQUVBSSxFQUFBRixXQUFBLFNBQUFHLEVBQUFDLEdBQ0FGLEVBQUFGLGFBQ0FFLEVBQUFKLGtCQUFBQyxFQUFBQyxHQUNBLElBQUFoVSxFQUFBa1UsRUFBQUMsRUFBQUMsR0FVQSxNQVJBLG1CQUFBcFUsSUFDQWtVLEVBQUFGLFdBQUFoVSxFQUNBa1UsRUFBQUosa0JBQUFDLEVBQUEvVCxHQUNBQSxFQUFBa1UsRUFBQUMsRUFBQUMsSUFLQXBVLEdBR0FrVSxHQzdDQSxJQUFBRyxHQWhCQSxTQUFBQyxHQUNBLHlCQUFBQSxFQUFBTCxFQUFBSyxRQUFBN1csR0FHQSxTQUFBNlcsR0FDQSxPQUFBQSxPQUVHN1csRUFGSGdXLEVBQUEsU0FBQXJRLEdBQ0EsT0FBWUEsZUFJWixTQUFBa1IsR0FDQSxPQUFBQSxHQUFBLGlCQUFBQSxFQUFBYixFQUFBLFNBQUFyUSxHQUNBLE9BQUE5SSxPQUFBaWEsRUFBQSxtQkFBQWphLENBQUFnYSxFQUFBbFIsVUFDRzNGLElDSkgsSUFBQStXLEdBVkEsU0FBQUMsR0FDQSx5QkFBQUEsRUFBQVIsRUFBQVEsUUFBQWhYLEdBR0EsU0FBQWdYLEdBQ0EsT0FBQUEsT0FFR2hYLEVBRkhnVyxFQUFBLFdBQ0EsYUNSQWlCLEVBQUFwYSxPQUFBa0IsUUFBQSxTQUFBQyxHQUFtRCxRQUFBN0IsRUFBQSxFQUFnQkEsRUFBQThCLFVBQUFDLE9BQXNCL0IsSUFBQSxDQUFPLElBQUFnQyxFQUFBRixVQUFBOUIsR0FBMkIsUUFBQWlDLEtBQUFELEVBQTBCdEIsT0FBQVcsVUFBQUMsZUFBQW5CLEtBQUE2QixFQUFBQyxLQUF5REosRUFBQUksR0FBQUQsRUFBQUMsSUFBaUMsT0FBQUosR0FJL08sU0FBQWtaLEVBQUFDLEVBQUFDLEVBQUFULEdBQ0EsT0FBQU0sS0FBb0JOLEVBQUFRLEVBQUFDLEdBdUNwQixJQUFBQyxHQVZBLFNBQUFDLEdBQ0EseUJBQUFBLEVBM0JBLFNBQUFBLEdBQ0EsZ0JBQUEzUixFQUFBdEMsR0FDQUEsRUFBQXlQLFlBQUEsSUFDQXlFLEVBQUFsVSxFQUFBa1UsS0FDQUMsRUFBQW5VLEVBQUFtVSxvQkFFQUMsR0FBQSxFQUNBQyxPQUFBLEVBRUEsZ0JBQUFQLEVBQUFDLEVBQUFULEdBQ0EsSUFBQWdCLEVBQUFMLEVBQUFILEVBQUFDLEVBQUFULEdBV0EsT0FUQWMsRUFDQUYsR0FBQUMsRUFBQUcsRUFBQUQsT0FBQUMsSUFFQUYsR0FBQSxFQUNBQyxFQUFBQyxHQUtBRCxJQU1BRSxDQUFBTixRQUFBdFgsR0FHQSxTQUFBc1gsR0FDQSxPQUFBQSxPQUVHdFgsRUFGSCxXQUNBLE9BQUFrWCxLQ3BDQSxTQUFBVyxFQUFBYixFQUFBSCxFQUFBUyxFQUFBM1IsR0FDQSxnQkFBQXdOLEVBQUF3RCxHQUNBLE9BQUFXLEVBQUFOLEVBQUE3RCxFQUFBd0QsR0FBQUUsRUFBQWxSLEVBQUFnUixPQUlBLFNBQUFtQixFQUFBZCxFQUFBSCxFQUFBUyxFQUFBM1IsRUFBQXRDLEdBQ0EsSUFBQTBVLEVBQUExVSxFQUFBMFUsZUFDQUMsRUFBQTNVLEVBQUEyVSxpQkFDQUMsRUFBQTVVLEVBQUE0VSxtQkFFQUMsR0FBQSxFQUNBL0UsT0FBQSxFQUNBd0QsT0FBQSxFQUNBUSxPQUFBLEVBQ0FDLE9BQUEsRUFDQU0sT0FBQSxFQXdDQSxTQUFBUyxFQUFBQyxFQUFBQyxHQUNBLElBVkFDLEVBQ0FDLEVBU0FDLEdBQUFSLEVBQUFLLEVBQUExQixHQUNBOEIsR0FBQVYsRUFBQUssRUFBQWpGLEdBSUEsT0FIQUEsRUFBQWlGLEVBQ0F6QixFQUFBMEIsRUFFQUcsR0FBQUMsR0FqQ0F0QixFQUFBSCxFQUFBN0QsRUFBQXdELEdBRUFFLEVBQUFSLG9CQUFBZSxFQUFBUCxFQUFBbFIsRUFBQWdSLElBRUFlLEVBQUFKLEVBQUFILEVBQUFDLEVBQUFULElBOEJBNkIsR0F6QkF4QixFQUFBWCxvQkFBQWMsRUFBQUgsRUFBQTdELEVBQUF3RCxJQUVBRSxFQUFBUixvQkFBQWUsRUFBQVAsRUFBQWxSLEVBQUFnUixJQUVBZSxFQUFBSixFQUFBSCxFQUFBQyxFQUFBVCxJQXNCQThCLEdBakJBSCxFQUFBdEIsRUFBQTdELEVBQUF3RCxHQUNBNEIsR0FBQU4sRUFBQUssRUFBQW5CLEdBQ0FBLEVBQUFtQixFQUVBQyxJQUFBYixFQUFBSixFQUFBSCxFQUFBQyxFQUFBVCxJQUVBZSxHQVlBQSxFQUdBLGdCQUFBVSxFQUFBQyxHQUNBLE9BQUFILEVBQUFDLEVBQUFDLEVBQUFDLElBaERBbEIsRUFBQUgsRUFGQTdELEVBa0RBaUYsRUFqREF6QixFQWlEQTBCLEdBL0NBakIsRUFBQVAsRUFBQWxSLEVBQUFnUixHQUNBZSxFQUFBSixFQUFBSCxFQUFBQyxFQUFBVCxHQUNBdUIsR0FBQSxFQUNBUixJQXVEQSxTQUFBZ0IsRUFBQS9TLEVBQUFnTyxHQUNBLElBQUFnRixFQUFBaEYsRUFBQWdGLG9CQUNBQyxFQUFBakYsRUFBQWlGLHVCQUNBQyxFQUFBbEYsRUFBQWtGLGVBQ0EzQyxFQXhGQSxTQUFBMVgsRUFBQTZULEdBQThDLElBQUFyVSxLQUFpQixRQUFBN0IsS0FBQXFDLEVBQXFCNlQsRUFBQW5RLFFBQUEvRixJQUFBLEdBQW9DVSxPQUFBVyxVQUFBQyxlQUFBbkIsS0FBQWtDLEVBQUFyQyxLQUE2RDZCLEVBQUE3QixHQUFBcUMsRUFBQXJDLElBQXNCLE9BQUE2QixFQXdGM004YSxDQUFBbkYsR0FBQSxrRUFFQXFELEVBQUEyQixFQUFBaFQsRUFBQXVRLEdBQ0FXLEVBQUErQixFQUFBalQsRUFBQXVRLEdBQ0FvQixFQUFBdUIsRUFBQWxULEVBQUF1USxHQVFBLE9BRkFBLEVBQUFxQixLQUFBTyxFQUFBRCxHQUVBYixFQUFBSCxFQUFBUyxFQUFBM1IsRUFBQXVRLEdDcEdBLElBQUE2QyxFQUFBbGMsT0FBQWtCLFFBQUEsU0FBQUMsR0FBbUQsUUFBQTdCLEVBQUEsRUFBZ0JBLEVBQUE4QixVQUFBQyxPQUFzQi9CLElBQUEsQ0FBTyxJQUFBZ0MsRUFBQUYsVUFBQTlCLEdBQTJCLFFBQUFpQyxLQUFBRCxFQUEwQnRCLE9BQUFXLFVBQUFDLGVBQUFuQixLQUFBNkIsRUFBQUMsS0FBeURKLEVBQUFJLEdBQUFELEVBQUFDLElBQWlDLE9BQUFKLEdBNEIvTyxTQUFBZ2IsRUFBQTdTLEVBQUE4UyxFQUFBdmMsR0FDQSxRQUFBUCxFQUFBOGMsRUFBQS9hLE9BQUEsRUFBb0MvQixHQUFBLEVBQVFBLElBQUEsQ0FDNUMsSUFBQXVILEVBQUF1VixFQUFBOWMsR0FBQWdLLEdBQ0EsR0FBQXpDLEVBQUEsT0FBQUEsRUFHQSxnQkFBQWlDLEVBQUF1USxHQUNBLFVBQUF2VyxNQUFBLGdDQUFBd0csRUFBQSxRQUFBekosRUFBQSx1Q0FBQXdaLEVBQUFyRCxxQkFBQSxNQUlBLFNBQUFxRyxFQUFBdEwsRUFBQWhLLEdBQ0EsT0FBQWdLLElBQUFoSyxFQThEQSxJQUFBdVYsRUF6REEsV0FDQSxJQUFBOVYsRUFBQXBGLFVBQUFDLE9BQUEsUUFBQThCLElBQUEvQixVQUFBLEdBQUFBLFVBQUEsTUFDQW1iLEVBQUEvVixFQUFBZ1csV0FDQUEsT0FBQXJaLElBQUFvWixFQUFBL0gsRUFBQStILEVBQ0FFLEVBQUFqVyxFQUFBa1cseUJBQ0FBLE9BQUF2WixJQUFBc1osRUFBQXZDLEVBQUF1QyxFQUNBRSxFQUFBblcsRUFBQW9XLDRCQUNBQSxPQUFBelosSUFBQXdaLEVBQUE1QyxFQUFBNEMsRUFDQUUsRUFBQXJXLEVBQUFzVyxvQkFDQUEsT0FBQTNaLElBQUEwWixFQUFBckMsRUFBQXFDLEVBQ0FFLEVBQUF2VyxFQUFBaU8sZ0JBQ0FBLE9BQUF0UixJQUFBNFosRUFBQWxCLEVBQUFrQixFQUVBLGdCQUFBNUMsRUFBQUgsRUFBQVMsR0FDQSxJQUFBM0QsRUFBQTFWLFVBQUFDLE9BQUEsUUFBQThCLElBQUEvQixVQUFBLEdBQUFBLFVBQUEsTUFDQTRiLEVBQUFsRyxFQUFBNEQsS0FDQUEsT0FBQXZYLElBQUE2WixLQUNBQyxFQUFBbkcsRUFBQW9FLGVBQ0FBLE9BQUEvWCxJQUFBOFosRUFBQVosRUFBQVksRUFDQUMsRUFBQXBHLEVBQUFxRSxpQkFDQUEsT0FBQWhZLElBQUErWixFQUFBOUUsRUFBQThFLEVBQ0FDLEVBQUFyRyxFQUFBc0UsbUJBQ0FBLE9BQUFqWSxJQUFBZ2EsRUFBQS9FLEVBQUErRSxFQUNBQyxFQUFBdEcsRUFBQTZELG9CQUNBQSxPQUFBeFgsSUFBQWlhLEVBQUFoRixFQUFBZ0YsRUFDQUMsRUFwRUEsU0FBQTFiLEVBQUE2VCxHQUE4QyxJQUFBclUsS0FBaUIsUUFBQTdCLEtBQUFxQyxFQUFxQjZULEVBQUFuUSxRQUFBL0YsSUFBQSxHQUFvQ1UsT0FBQVcsVUFBQUMsZUFBQW5CLEtBQUFrQyxFQUFBckMsS0FBNkQ2QixFQUFBN0IsR0FBQXFDLEVBQUFyQyxJQUFzQixPQUFBNkIsRUFvRTNNbWMsQ0FBQXhHLEdBQUEsd0ZBRUFnRixFQUFBSyxFQUFBaEMsRUFBQXVDLEVBQUEsbUJBQ0FYLEVBQUFJLEVBQUFuQyxFQUFBNEMsRUFBQSxzQkFDQVosRUFBQUcsRUFBQTFCLEVBQUFxQyxFQUFBLGNBRUEsT0FBQU4sRUFBQS9ILEVBQUF5SCxHQUVBbkgsV0FBQSxVQUdBRixlQUFBLFNBQUFoVixHQUNBLGlCQUFBQSxFQUFBLEtBSUFzVix5QkFBQWpCLFFBQUFpRyxHQUdBMkIsc0JBQ0FDLHlCQUNBQyxpQkFDQXRCLE9BQ0FRLGlCQUNBQyxtQkFDQUMscUJBQ0FULHVCQUVLMEMsS0FJTCw0TENyR0EsSUFBQUUsRUFBQXJlLEVBQUEsSUFDQUcsRUFBQUQsUUFBQSxTQUFBeUUsR0FDQSxPQUFBN0QsT0FBQXVkLEVBQUExWixzUENIQTJaLEVBQUF0ZSxFQUFBLElBQUErQixFQUFBakIsT0FBQWtCLFFBQUEsU0FBQUMsR0FBbUQsUUFBQTdCLEVBQUEsRUFBZ0JBLEVBQUE4QixVQUFBQyxPQUFzQi9CLElBQUEsQ0FBTyxJQUFBZ0MsRUFBQUYsVUFBQTlCLEdBQTJCLFFBQUFpQyxLQUFBRCxFQUEwQnRCLE9BQUFXLFVBQUFDLGVBQUFuQixLQUFBNkIsRUFBQUMsS0FBeURKLEVBQUFJLEdBQUFELEVBQUFDLElBQWlDLE9BQUFKLEdBTy9Pc2MsR0FBa0J6VCxLQURsQiw0QkFFQTBULEVBQUEsU0FBQTNNLEdBQ0EsT0FBQUEsR0FIQSw2QkFHQUEsRUFBQS9HLE1BR0EsU0FBQTJULElBQ0EsSUFBQUMsS0FnQkEsT0FDQXZaLFVBZkEsU0FBQXdaLEdBRUEsT0FEQUQsRUFBQTVYLEtBQUE2WCxHQUNBLFdBQ0EsT0FBQTdkLE9BQUFvTCxFQUFBLEVBQUFwTCxDQUFBNGQsRUFBQUMsS0FhQUMsS0FUQSxTQUFBM1ksR0FFQSxJQURBLElBQUFLLEVBQUFvWSxFQUFBdkosUUFDQS9VLEVBQUEsRUFBQXllLEVBQUF2WSxFQUFBbkUsT0FBcUMvQixFQUFBeWUsRUFBU3plLElBQzlDa0csRUFBQWxHLEdBQUE2RixLQVVBLElBQUE2WSxFQUFBLG9EQUNBQyxFQUFBLDZDQU1BLFNBQUFwWixJQUNBLElBQUFQLEVBQUFsRCxVQUFBQyxPQUFBLFFBQUE4QixJQUFBL0IsVUFBQSxHQUFBQSxVQUFBLEdBQUE4YyxFQUFBLEVBQUFDLFFBRUFDLEdBQUEsRUFDQUMsS0FJQSxTQUFBQyxJQUNBLEdBQUFGLEdBQUFDLEVBQUFoZCxPQUNBLE1BQUFyQixPQUFBb0wsRUFBQSxFQUFBcEwsQ0FBQSxvREFFQSxHQUFBcWUsRUFBQWhkLFNBQUFpRCxFQUFBRSxVQUNBLE1BQUF4RSxPQUFBb0wsRUFBQSxFQUFBcEwsQ0FBQSxvREE4REEsT0FyRUFBLE9BQUFvTCxFQUFBLEVBQUFwTCxDQUFBc0UsRUFBQThHLEVBQUEsRUFBQTlHLE9BQUEwWixJQXNFQXZaLEtBekNBLFNBQUE4WixHQUNBRCxJQUNBdGUsT0FBQW9MLEVBQUEsRUFBQXBMLENBQUF1ZSxFQUFBblQsRUFBQSxFQUFBaEksS0FBQSw4Q0FFQWdiLEdBQUE5WixFQUFBRSxVQUNBK1osRUFBQWQsR0FDS25aLEVBQUFFLFdBR0w2WixFQUFBclksS0FBQXVZLEdBQ0FBLEVBQUFsUSxPQUFBLFdBQ0EsT0FBQXJPLE9BQUFvTCxFQUFBLEVBQUFwTCxDQUFBcWUsRUFBQUUsS0FKQUEsRUFBQWphLEVBQUFHLFNBbUNBQyxJQTVEQSxTQUFBOFosR0FHQSxHQUZBRixJQUNBdGUsT0FBQW9MLEVBQUEsRUFBQXBMLENBQUF3ZSxFQUFBcFQsRUFBQSxFQUFBbkksU0FBQWdiLElBQ0FHLEVBQUEsQ0FHQSxJQUFBQyxFQUFBaGQsT0FDQSxPQUFBaUQsRUFBQUksSUFBQThaLEdBRUEsUUFBQWxmLEVBQUEsRUFBbUJBLEVBQUErZSxFQUFBaGQsT0FBbUIvQixJQUFBLENBQ3RDLElBQUFpZixFQUFBRixFQUFBL2UsR0FDQSxJQUFBaWYsRUFBQW5ULEVBQUEsSUFBQW1ULEVBQUFuVCxFQUFBLEdBQUFvVCxHQUVBLE9BREFILEVBQUEvWSxPQUFBaEcsRUFBQSxHQUNBaWYsRUFBQUMsTUFnREExUCxNQTNCQSxTQUFBeVAsR0FDQUQsSUFDQXRlLE9BQUFvTCxFQUFBLEVBQUFwTCxDQUFBdWUsRUFBQW5ULEVBQUEsRUFBQWhJLEtBQUEsOENBQ0FnYixHQUFBOVosRUFBQUUsVUFDQStaLEVBQUFkLEdBR0FjLEVBQUFqYSxFQUFBd0ssVUFxQkEvSixNQWxCQSxXQUVBLEdBREF1WixLQUNBRixJQUNBQSxHQUFBLEVBQ0FDLEVBQUFoZCxRQUFBLENBQ0EsSUFBQW1FLEVBQUE2WSxFQUNBQSxLQUNBLFFBQUEvZSxFQUFBLEVBQUF5ZSxFQUFBdlksRUFBQW5FLE9BQXlDL0IsRUFBQXllLEVBQVN6ZSxJQUNsRGtHLEVBQUFsRyxHQUFBbWUsS0FXQWdCLGlCQUNBLE9BQUFKLEdBRUFLLGlCQUNBLE9BQUFOLElBS0EsU0FBQU8sRUFBQXRhLEdBQ0EsSUFBQUMsRUFBQWxELFVBQUFDLE9BQUEsUUFBQThCLElBQUEvQixVQUFBLEdBQUFBLFVBQUEsR0FBQThjLEVBQUEsRUFBQVUsT0FDQUMsRUFBQXpkLFVBQUEsR0FNQUEsVUFBQUMsT0FBQSxHQUNBckIsT0FBQW9MLEVBQUEsRUFBQXBMLENBQUE2ZSxFQUFBelQsRUFBQSxFQUFBaEksS0FBQSxpREFHQSxJQUFBMGIsRUFBQWphLEVBQUFQLEdBQ0FTLEVBQUEsV0FDQStaLEVBQUFKLGFBQ0E1SyxHQUNBQSxJQUVBZ0wsRUFBQS9aLFVBR0ErTyxFQUFBelAsRUFBQSxTQUFBbWEsR0FDQWQsRUFBQWMsR0FDQXpaLElBR0E4WixNQUFBTCxJQUdBTSxFQUFBcGEsSUFBQThaLEtBTUEsR0FKQU0sRUFBQUosWUFDQTVLLEtBR0ExSSxFQUFBLEVBQUFoSSxLQUFBMFEsR0FDQSxVQUFBaFIsTUFBQSxzRUFHQSxPQUNBMkIsS0FBQXFhLEVBQUFyYSxLQUNBcUssTUFBQWdRLEVBQUFoUSxNQUNBL0osU0FJQSxTQUFBZ2EsRUFBQTFhLEdBQ0EsSUFBQXlhLEVBQUFILEVBQUEsU0FBQUosR0FDQSxPQUFBbGEsRUFBQSxTQUFBbWEsR0FDQUEsRUFBQXBULEVBQUEsR0FDQW1ULEVBQUFDLEdBR0F4ZSxPQUFBd2QsRUFBQSxFQUFBeGQsQ0FBQSxXQUNBLE9BQUF1ZSxFQUFBQyxTQUtBLE9BQUF2ZCxLQUFvQjZkLEdBQ3BCcmEsS0FBQSxTQUFBOFosRUFBQU0sR0FDQXpkLFVBQUFDLE9BQUEsSUFDQXJCLE9BQUFvTCxFQUFBLEVBQUFwTCxDQUFBNmUsRUFBQXpULEVBQUEsRUFBQWhJLEtBQUEsc0RBQ0FtYixFQUFBblQsRUFBQSxHQUFBeVQsR0FFQUMsRUFBQXJhLEtBQUE4WixzRkNsTU8sSUFBTVMsV0FFVEMsV0FBWSxXQVFSLE9BSklDLEVBQUdDLFNBQVNDLGdCQUFnQkMsWUFDNUJDLEVBQUdILFNBQVNDLGdCQUFnQkcsZUFPcENDLFFBQVMsU0FBQ3RILEVBQUd1SCxHQUNULE9BQU9BLEVBQUt2SCxHQUloQndILFFBQVMsU0FBQ3ZILEVBQUd3SCxHQUNULE9BQU94SCxHQUlYeUgsUUFBUyxTQUFDMUgsRUFBR3VILEdBQ1QsT0FBT0EsRUFBS3ZILEdBSWhCMkgsUUFBUyxTQUFDMUgsRUFBR3dILEdBQ1QsT0FBT3hILEdBS1gySCxpQkFBa0IsU0FBQ0MsRUFBSUMsRUFBSUMsRUFBSUMsR0FDM0IsSUFBSUMsS0FPSixPQUxBQSxFQUFLakksRUFBSTZILEVBQ1RJLEVBQUtoSSxFQUFJNkgsRUFDVEcsRUFBS2pCLEVBQUllLEVBQUtGLEVBQ2RJLEVBQUtiLEVBQUlZLEVBQUtGLEVBRVBHLEdBTVhDLGlCQUFrQixTQUFDbEksRUFBR0MsRUFBRytHLEVBQUdJLEdBQ3hCLElBQUlhLEtBT0osT0FMQUEsRUFBS0osR0FBSzdILEVBQ1ZpSSxFQUFLSCxHQUFLN0gsRUFDVmdJLEVBQUtGLEdBQUsvSCxFQUFJZ0gsRUFDZGlCLEVBQUtELEdBQUsvSCxFQUFJbUgsRUFFUGEsR0FJWEUsV0FBWSxTQUFDTixFQUFJQyxFQUFJQyxFQUFJQyxFQUFJVCxFQUFJRSxHQUM3QixJQUFJUSxLQU9KLE9BTEFBLEVBQUtKLEdBQUtmLEVBQU1RLFFBQVFTLEVBQUlSLEdBQzVCVSxFQUFLSCxHQUFLaEIsRUFBTVUsUUFBUU0sRUFBSUwsR0FDNUJRLEVBQUtGLEdBQUtqQixFQUFNUSxRQUFRTyxFQUFJTixHQUM1QlUsRUFBS0QsR0FBS2xCLEVBQU1RLFFBQVFVLEVBQUlQLEdBRXJCUSxHQUlYRyxXQUFZLFNBQUNQLEVBQUlDLEVBQUlDLEVBQUlDLEVBQUlULEVBQUlFLEdBQzdCLElBQUlRLEtBT0osT0FMQUEsRUFBS0osR0FBS2YsRUFBTVksUUFBUUssRUFBSVIsR0FDNUJVLEVBQUtILEdBQUtoQixFQUFNYSxRQUFRRyxFQUFJTCxHQUM1QlEsRUFBS0YsR0FBS2pCLEVBQU1ZLFFBQVFHLEVBQUlOLEdBQzVCVSxFQUFLRCxHQUFLbEIsRUFBTWEsUUFBUUssRUFBSVAsR0FFckJRLEdBSVhJLFdBQVksU0FBQ3JJLEVBQUdDLEVBQUcrRyxFQUFHSSxFQUFHRyxFQUFJRSxHQUN6QixJQUFJYSxLQU9KLE9BTEFBLEVBQUt0SSxFQUFJOEcsRUFBTVEsUUFBUXRILEVBQUlnSCxFQUFHTyxHQUM5QmUsRUFBS3JJLEVBQUk2RyxFQUFNVSxRQUFRdkgsRUFBR3dILEdBQzFCYSxFQUFLdEIsRUFBSUEsRUFDVHNCLEVBQUtsQixFQUFJQSxFQUVGa0IsR0FJWEMsV0FBWSxTQUFDdkksRUFBR0MsRUFBRytHLEVBQUdJLEVBQUdHLEVBQUlFLEdBQ3pCLElBQUlhLEtBT0osT0FMQUEsRUFBS3RJLEVBQUk4RyxFQUFNWSxRQUFRMUgsRUFBSWdILEVBQUdPLEdBQzlCZSxFQUFLckksRUFBSTZHLEVBQU1hLFFBQVExSCxFQUFHd0gsR0FDMUJhLEVBQUt0QixFQUFJQSxFQUNUc0IsRUFBS2xCLEVBQUlBLEVBRUZrQixHQUlYRSxpQkFBa0IsU0FBQ1gsRUFBSUMsRUFBSUMsRUFBSUMsRUFBSVQsRUFBSUUsR0FDbkMsSUFBSWEsS0FPSixPQUxBQSxFQUFLdEksRUFBSThHLEVBQU1RLFFBQVFTLEVBQUlSLEdBQzNCZSxFQUFLckksRUFBSTZHLEVBQU1VLFFBQVFNLEVBQUlMLEdBQzNCYSxFQUFLdEIsRUFBSWUsRUFBS0YsRUFDZFMsRUFBS2xCLEVBQUlZLEVBQUtGLEVBRVBRLEdBSVhHLGlCQUFrQixTQUFDWixFQUFJQyxFQUFJQyxFQUFJQyxFQUFJVCxFQUFJRSxHQUNuQyxJQUFJYSxLQU9KLE9BTEFBLEVBQUt0SSxFQUFJOEcsRUFBTVksUUFBUUssRUFBSVIsR0FDM0JlLEVBQUtySSxFQUFJNkcsRUFBTWEsUUFBUUcsRUFBSUwsR0FDM0JhLEVBQUt0QixFQUFJZSxFQUFLRixFQUNkUyxFQUFLbEIsRUFBSVksRUFBS0YsRUFFUFEsR0FJWEksaUJBQWtCLFNBQUMxSSxFQUFHQyxFQUFHK0csRUFBR0ksRUFBR0csRUFBSUUsR0FDL0IsSUFBSVEsS0FPSixPQUxBQSxFQUFLSixHQUFLZixFQUFNUSxRQUFRdEgsRUFBSWdILEVBQUdPLEdBQy9CVSxFQUFLSCxHQUFLaEIsRUFBTVUsUUFBUXZILEVBQUd3SCxHQUMzQlEsRUFBS0YsR0FBS2pCLEVBQU1RLFFBQVF0SCxFQUFHdUgsR0FDM0JVLEVBQUtELEdBQUtsQixFQUFNVSxRQUFRdkgsRUFBSW1ILEVBQUdLLEdBRXhCUSxHQUlYVSxpQkFBa0IsU0FBQzNJLEVBQUdDLEVBQUcrRyxFQUFHSSxFQUFHRyxFQUFJRSxHQUMvQixJQUFJUSxLQU9KLE9BTEFBLEVBQUtKLEdBQUtmLEVBQU1ZLFFBQVExSCxFQUFJZ0gsRUFBR08sR0FDL0JVLEVBQUtILEdBQUtoQixFQUFNYSxRQUFRMUgsRUFBR3dILEdBQzNCUSxFQUFLRixHQUFLakIsRUFBTVksUUFBUTFILEVBQUd1SCxHQUMzQlUsRUFBS0QsR0FBS2xCLEVBQU1hLFFBQVExSCxFQUFJbUgsRUFBR0ssR0FFeEJRLG1CQzNKZjlnQixFQUFBRCxRQUFBLFNBQUF5RSxHQUNBLHNCQUFBQSxFQUFBLE1BQUFtTSxVQUFBbk0sRUFBQSx1QkFDQSxPQUFBQSxvQkNGQSxJQUFBa0csRUFBQTdLLEVBQUEsR0FDQTRoQixFQUFBNWhCLEVBQUEsR0FDQXFlLEVBQUFyZSxFQUFBLElBQ0E2aEIsRUFBQSxLQUVBQyxFQUFBLFNBQUF6ZCxFQUFBMGQsRUFBQUMsRUFBQTVnQixHQUNBLElBQUFtSyxFQUFBbUMsT0FBQTJRLEVBQUFoYSxJQUNBNGQsRUFBQSxJQUFBRixFQUVBLE1BREEsS0FBQUMsSUFBQUMsR0FBQSxJQUFBRCxFQUFBLEtBQUF0VSxPQUFBdE0sR0FBQThnQixRQUFBTCxFQUFBLFVBQTBGLEtBQzFGSSxFQUFBLElBQUExVyxFQUFBLEtBQUF3VyxFQUFBLEtBRUE1aEIsRUFBQUQsUUFBQSxTQUFBaWlCLEVBQUFqUixHQUNBLElBQUFTLEtBQ0FBLEVBQUF3USxHQUFBalIsRUFBQTRRLEdBQ0FqWCxJQUFBWSxFQUFBWixFQUFBTSxFQUFBeVcsRUFBQSxXQUNBLElBQUFRLEVBQUEsR0FBQUQsR0FBQSxLQUNBLE9BQUFDLE1BQUFDLGVBQUFELEVBQUFFLE1BQUEsS0FBQW5nQixPQUFBLElBQ0csU0FBQXdQLHFCQ2pCSCxJQUFBbEgsRUFBQXpLLEVBQUEsR0FDQTJLLEVBQUEzSyxFQUFBLElBQ0F1aUIsRUFBQXZpQixFQUFBLElBQ0F3aUIsRUFBQXhpQixFQUFBLEdBQUFBLENBQUEsT0FFQXlpQixFQUFBNVcsU0FBQSxTQUNBNlcsR0FBQSxHQUFBRCxHQUFBSCxNQUZBLFlBSUF0aUIsRUFBQSxJQUFBMmlCLGNBQUEsU0FBQWhlLEdBQ0EsT0FBQThkLEVBQUFsaUIsS0FBQW9FLEtBR0F4RSxFQUFBRCxRQUFBLFNBQUF5UixFQUFBdFAsRUFBQTRFLEVBQUEyYixHQUNBLElBQUFDLEVBQUEsbUJBQUE1YixFQUNBNGIsSUFBQU4sRUFBQXRiLEVBQUEsU0FBQTBELEVBQUExRCxFQUFBLE9BQUE1RSxJQUNBc1AsRUFBQXRQLEtBQUE0RSxJQUNBNGIsSUFBQU4sRUFBQXRiLEVBQUF1YixJQUFBN1gsRUFBQTFELEVBQUF1YixFQUFBN1EsRUFBQXRQLEdBQUEsR0FBQXNQLEVBQUF0UCxHQUFBcWdCLEVBQUE1VCxLQUFBcEIsT0FBQXJMLE1BQ0FzUCxJQUFBbEgsRUFDQWtILEVBQUF0UCxHQUFBNEUsRUFDRzJiLEVBR0FqUixFQUFBdFAsR0FDSHNQLEVBQUF0UCxHQUFBNEUsRUFFQTBELEVBQUFnSCxFQUFBdFAsRUFBQTRFLFdBTEEwSyxFQUFBdFAsR0FDQXNJLEVBQUFnSCxFQUFBdFAsRUFBQTRFLE9BT0M0RSxTQUFBcEssVUF4QkQsV0F3QkMsV0FDRCx5QkFBQXdSLFdBQUF1UCxJQUFBQyxFQUFBbGlCLEtBQUEwUyx5QkM3QkEsSUFBQXZCLEVBQUExUixFQUFBLElBQ0E4aUIsRUFBQTlpQixFQUFBLElBQ0FHLEVBQUFELFFBQUFGLEVBQUEsYUFBQXVCLEVBQUFjLEVBQUFqQixHQUNBLE9BQUFzUSxFQUFBdk4sRUFBQTVDLEVBQUFjLEVBQUF5Z0IsRUFBQSxFQUFBMWhCLEtBQ0MsU0FBQUcsRUFBQWMsRUFBQWpCLEdBRUQsT0FEQUcsRUFBQWMsR0FBQWpCLEVBQ0FHLG9CQ0xBLElBQUFnaEIsRUFBQXZpQixFQUFBLElBQ0EraUIsRUFBQS9pQixFQUFBLElBQ0FnakIsRUFBQWhqQixFQUFBLElBQUFBLENBQUEsWUFDQWlqQixFQUFBbmlCLE9BQUFXLFVBRUF0QixFQUFBRCxRQUFBWSxPQUFBK1ksZ0JBQUEsU0FBQWxJLEdBRUEsT0FEQUEsRUFBQW9SLEVBQUFwUixHQUNBNFEsRUFBQTVRLEVBQUFxUixHQUFBclIsRUFBQXFSLEdBQ0EsbUJBQUFyUixFQUFBalAsYUFBQWlQLGVBQUFqUCxZQUNBaVAsRUFBQWpQLFlBQUFqQixVQUNHa1EsYUFBQTdRLE9BQUFtaUIsRUFBQSx1QkNYSCxJQUFBQyxFQUFBbGpCLEVBQUEsSUFDQThpQixFQUFBOWlCLEVBQUEsSUFDQW1qQixFQUFBbmpCLEVBQUEsSUFDQXlSLEVBQUF6UixFQUFBLElBQ0F1aUIsRUFBQXZpQixFQUFBLElBQ0F3UixFQUFBeFIsRUFBQSxLQUNBb2pCLEVBQUF0aUIsT0FBQXVpQix5QkFFQW5qQixFQUFBaUUsRUFBQW5FLEVBQUEsSUFBQW9qQixFQUFBLFNBQUF6UixFQUFBbEcsR0FHQSxHQUZBa0csRUFBQXdSLEVBQUF4UixHQUNBbEcsRUFBQWdHLEVBQUFoRyxHQUFBLEdBQ0ErRixFQUFBLElBQ0EsT0FBQTRSLEVBQUF6UixFQUFBbEcsR0FDRyxNQUFBekQsSUFDSCxHQUFBdWEsRUFBQTVRLEVBQUFsRyxHQUFBLE9BQUFxWCxHQUFBSSxFQUFBL2UsRUFBQTVELEtBQUFvUixFQUFBbEcsR0FBQWtHLEVBQUFsRyxzQkNiQSxJQUFBNlgsRUFBQXRqQixFQUFBLElBQ0FxZSxFQUFBcmUsRUFBQSxJQUNBRyxFQUFBRCxRQUFBLFNBQUF5RSxHQUNBLE9BQUEyZSxFQUFBakYsRUFBQTFaLG9CQ0pBLElBQUFqRCxLQUF1QkEsZUFDdkJ2QixFQUFBRCxRQUFBLFNBQUF5RSxFQUFBdEMsR0FDQSxPQUFBWCxFQUFBbkIsS0FBQW9FLEVBQUF0QyxxQkN3QkFsQyxFQUFBRCxRQUFBRixFQUFBLElBQUFBLGlDQ3pCQSxJQUFBNGhCLEVBQUE1aEIsRUFBQSxHQUVBRyxFQUFBRCxRQUFBLFNBQUFxakIsRUFBQW5aLEdBQ0EsUUFBQW1aLEdBQUEzQixFQUFBLFdBRUF4WCxFQUFBbVosRUFBQWhqQixLQUFBLGtCQUF1RCxHQUFBZ2pCLEVBQUFoakIsS0FBQSx3QkNOdkQsSUFBQW9aLEtBQWlCQSxTQUVqQnhaLEVBQUFELFFBQUEsU0FBQXlFLEdBQ0EsT0FBQWdWLEVBQUFwWixLQUFBb0UsR0FBQXdRLE1BQUEsd0JDRkEsSUFBQXFPLEVBQUF4akIsRUFBQSxJQUNBRyxFQUFBRCxRQUFBLFNBQUFnSixFQUFBdWEsRUFBQXRoQixHQUVBLEdBREFxaEIsRUFBQXRhLFFBQ0FqRixJQUFBd2YsRUFBQSxPQUFBdmEsRUFDQSxPQUFBL0csR0FDQSx1QkFBQTBQLEdBQ0EsT0FBQTNJLEVBQUEzSSxLQUFBa2pCLEVBQUE1UixJQUVBLHVCQUFBQSxFQUFBaEssR0FDQSxPQUFBcUIsRUFBQTNJLEtBQUFrakIsRUFBQTVSLEVBQUFoSyxJQUVBLHVCQUFBZ0ssRUFBQWhLLEVBQUFwSCxHQUNBLE9BQUF5SSxFQUFBM0ksS0FBQWtqQixFQUFBNVIsRUFBQWhLLEVBQUFwSCxJQUdBLGtCQUNBLE9BQUF5SSxFQUFBRSxNQUFBcWEsRUFBQXZoQiw0QkNqQkEsSUFBQXdJLEVBQUF2SyxFQUFBRCxTQUE2QnNXLFFBQUEsU0FDN0IsaUJBQUFrTixVQUFBaFosa0ZDR2FpWixVQUVUQyxjQUNJQyxNQUFRLElBQ1JDLE9BQVEsTUFJWkMsTUFDSUYsTUFBTyxHQUNQQyxPQUFRLElBSVpFLFFBQ0lILE1BQU8sR0FDUEMsT0FBUSxzQkNiaEIsSUFBQXBhLEVBQUExSixFQUFBLElBQ0FzakIsRUFBQXRqQixFQUFBLElBQ0EraUIsRUFBQS9pQixFQUFBLElBQ0Fpa0IsRUFBQWprQixFQUFBLEdBQ0Fra0IsRUFBQWxrQixFQUFBLElBQ0FHLEVBQUFELFFBQUEsU0FBQWlrQixFQUFBQyxHQUNBLElBQUFDLEVBQUEsR0FBQUYsRUFDQUcsRUFBQSxHQUFBSCxFQUNBSSxFQUFBLEdBQUFKLEVBQ0FLLEVBQUEsR0FBQUwsRUFDQU0sRUFBQSxHQUFBTixFQUNBTyxFQUFBLEdBQUFQLEdBQUFNLEVBQ0FsUixFQUFBNlEsR0FBQUYsRUFDQSxnQkFBQVMsRUFBQUMsRUFBQW5CLEdBUUEsSUFQQSxJQU1BeGMsRUFBQTRkLEVBTkFsVCxFQUFBb1IsRUFBQTRCLEdBQ0EzVCxFQUFBc1MsRUFBQTNSLEdBQ0F4TixFQUFBdUYsRUFBQWtiLEVBQUFuQixFQUFBLEdBQ0F0aEIsRUFBQThoQixFQUFBalQsRUFBQTdPLFFBQ0ErRCxFQUFBLEVBQ0F5QixFQUFBMGMsRUFBQTlRLEVBQUFvUixFQUFBeGlCLEdBQUFtaUIsRUFBQS9RLEVBQUFvUixFQUFBLFFBQUExZ0IsRUFFVTlCLEVBQUErRCxFQUFlQSxJQUFBLElBQUF3ZSxHQUFBeGUsS0FBQThLLEtBRXpCNlQsRUFBQTFnQixFQURBOEMsRUFBQStKLEVBQUE5SyxHQUNBQSxFQUFBeUwsR0FDQXdTLEdBQ0EsR0FBQUUsRUFBQTFjLEVBQUF6QixHQUFBMmUsT0FDQSxHQUFBQSxFQUFBLE9BQUFWLEdBQ0EsZ0JBQ0EsY0FBQWxkLEVBQ0EsY0FBQWYsRUFDQSxPQUFBeUIsRUFBQWIsS0FBQUcsUUFDUyxHQUFBdWQsRUFBQSxTQUdULE9BQUFDLEdBQUEsRUFBQUYsR0FBQUMsSUFBQTdjLHFCQ3hDQSxJQUFBa0QsRUFBQTdLLEVBQUEsR0FDQTBLLEVBQUExSyxFQUFBLElBQ0E0aEIsRUFBQTVoQixFQUFBLEdBQ0FHLEVBQUFELFFBQUEsU0FBQTRrQixFQUFBNVQsR0FDQSxJQUFBaEksR0FBQXdCLEVBQUE1SixZQUE2QmdrQixJQUFBaGtCLE9BQUFna0IsR0FDN0I3WixLQUNBQSxFQUFBNlosR0FBQTVULEVBQUFoSSxHQUNBMkIsSUFBQVUsRUFBQVYsRUFBQU0sRUFBQXlXLEVBQUEsV0FBcUQxWSxFQUFBLEtBQVMsU0FBQStCLG1CQ1A5RCxJQUFBOFosRUFBQWhVLEtBQUFnVSxLQUNBQyxFQUFBalUsS0FBQWlVLE1BQ0E3a0IsRUFBQUQsUUFBQSxTQUFBeUUsR0FDQSxPQUFBc2dCLE1BQUF0Z0IsTUFBQSxHQUFBQSxFQUFBLEVBQUFxZ0IsRUFBQUQsR0FBQXBnQixtQkNIQXhFLEVBQUFELFFBQUEsU0FBQXlFLEdBQ0EsUUFBQVYsR0FBQVUsRUFBQSxNQUFBbU0sVUFBQSx5QkFBQW5NLEdBQ0EsT0FBQUEsb0JDRkEsSUFBQWtNLEVBQUE3USxFQUFBLEdBR0FHLEVBQUFELFFBQUEsU0FBQXlFLEVBQUE0RyxHQUNBLElBQUFzRixFQUFBbE0sR0FBQSxPQUFBQSxFQUNBLElBQUF1RSxFQUFBakMsRUFDQSxHQUFBc0UsR0FBQSxtQkFBQXJDLEVBQUF2RSxFQUFBZ1YsWUFBQTlJLEVBQUE1SixFQUFBaUMsRUFBQTNJLEtBQUFvRSxJQUFBLE9BQUFzQyxFQUNBLHNCQUFBaUMsRUFBQXZFLEVBQUF1Z0IsV0FBQXJVLEVBQUE1SixFQUFBaUMsRUFBQTNJLEtBQUFvRSxJQUFBLE9BQUFzQyxFQUNBLElBQUFzRSxHQUFBLG1CQUFBckMsRUFBQXZFLEVBQUFnVixZQUFBOUksRUFBQTVKLEVBQUFpQyxFQUFBM0ksS0FBQW9FLElBQUEsT0FBQXNDLEVBQ0EsTUFBQTZKLFVBQUEsNkRDVkEsSUFBQXFVLEVBQUFubEIsRUFBQSxLQUNBNkssRUFBQTdLLEVBQUEsR0FDQW9sQixFQUFBcGxCLEVBQUEsR0FBQUEsQ0FBQSxZQUNBbVIsRUFBQWlVLEVBQUFqVSxRQUFBaVUsRUFBQWpVLE1BQUEsSUFBQW5SLEVBQUEsT0FFQXFsQixFQUFBLFNBQUFwakIsRUFBQXFqQixFQUFBL1IsR0FDQSxJQUFBZ1MsRUFBQXBVLEVBQUFqUSxJQUFBZSxHQUNBLElBQUFzakIsRUFBQSxDQUNBLElBQUFoUyxFQUFBLE9BQ0FwQyxFQUFBcVUsSUFBQXZqQixFQUFBc2pCLEVBQUEsSUFBQUosR0FFQSxJQUFBTSxFQUFBRixFQUFBcmtCLElBQUFva0IsR0FDQSxJQUFBRyxFQUFBLENBQ0EsSUFBQWxTLEVBQUEsT0FDQWdTLEVBQUFDLElBQUFGLEVBQUFHLEVBQUEsSUFBQU4sR0FDRyxPQUFBTSxHQTBCSHRsQixFQUFBRCxTQUNBaVIsUUFDQWpDLElBQUFtVyxFQUNBOUMsSUEzQkEsU0FBQW1ELEVBQUEvVCxFQUFBbEcsR0FDQSxJQUFBa2EsRUFBQU4sRUFBQTFULEVBQUFsRyxHQUFBLEdBQ0EsWUFBQXhILElBQUEwaEIsS0FBQXBELElBQUFtRCxJQTBCQXhrQixJQXhCQSxTQUFBd2tCLEVBQUEvVCxFQUFBbEcsR0FDQSxJQUFBa2EsRUFBQU4sRUFBQTFULEVBQUFsRyxHQUFBLEdBQ0EsWUFBQXhILElBQUEwaEIsT0FBQTFoQixFQUFBMGhCLEVBQUF6a0IsSUFBQXdrQixJQXVCQUYsSUFyQkEsU0FBQUUsRUFBQUUsRUFBQWpVLEVBQUFsRyxHQUNBNFosRUFBQTFULEVBQUFsRyxHQUFBLEdBQUErWixJQUFBRSxFQUFBRSxJQXFCQXRQLEtBbkJBLFNBQUFyVSxFQUFBcWpCLEdBQ0EsSUFBQUssRUFBQU4sRUFBQXBqQixFQUFBcWpCLEdBQUEsR0FDQWhQLEtBRUEsT0FEQXFQLEtBQUFwYixRQUFBLFNBQUFzYixFQUFBeGpCLEdBQTBEaVUsRUFBQXhQLEtBQUF6RSxLQUMxRGlVLEdBZ0JBalUsSUFkQSxTQUFBc0MsR0FDQSxZQUFBVixJQUFBVSxHQUFBLGlCQUFBQSxJQUFBK0ksT0FBQS9JLElBY0FzRyxJQVpBLFNBQUEwRyxHQUNBOUcsSUFBQVUsRUFBQSxVQUFBb0csbUNDckNBLEdBQUEzUixFQUFBLEtBQ0EsSUFBQThsQixFQUFBOWxCLEVBQUEsSUFDQXlLLEVBQUF6SyxFQUFBLEdBQ0E0aEIsRUFBQTVoQixFQUFBLEdBQ0E2SyxFQUFBN0ssRUFBQSxHQUNBK2xCLEVBQUEvbEIsRUFBQSxJQUNBZ21CLEVBQUFobUIsRUFBQSxJQUNBMEosRUFBQTFKLEVBQUEsSUFDQWltQixFQUFBam1CLEVBQUEsSUFDQWttQixFQUFBbG1CLEVBQUEsSUFDQTJLLEVBQUEzSyxFQUFBLElBQ0FtbUIsRUFBQW5tQixFQUFBLElBQ0FxUixFQUFBclIsRUFBQSxJQUNBaWtCLEVBQUFqa0IsRUFBQSxHQUNBb21CLEVBQUFwbUIsRUFBQSxLQUNBcW1CLEVBQUFybUIsRUFBQSxJQUNBeVIsRUFBQXpSLEVBQUEsSUFDQXVpQixFQUFBdmlCLEVBQUEsSUFDQXNtQixFQUFBdG1CLEVBQUEsSUFDQTZRLEVBQUE3USxFQUFBLEdBQ0EraUIsRUFBQS9pQixFQUFBLElBQ0F1bUIsRUFBQXZtQixFQUFBLElBQ0F1VCxFQUFBdlQsRUFBQSxJQUNBNlosRUFBQTdaLEVBQUEsSUFDQXdtQixFQUFBeG1CLEVBQUEsSUFBQW1FLEVBQ0FzaUIsRUFBQXptQixFQUFBLElBQ0FpSSxFQUFBakksRUFBQSxJQUNBMG1CLEVBQUExbUIsRUFBQSxHQUNBMm1CLEVBQUEzbUIsRUFBQSxJQUNBNG1CLEVBQUE1bUIsRUFBQSxJQUNBNm1CLEVBQUE3bUIsRUFBQSxJQUNBOG1CLEVBQUE5bUIsRUFBQSxJQUNBK21CLEVBQUEvbUIsRUFBQSxJQUNBZ25CLEVBQUFobkIsRUFBQSxJQUNBaW5CLEVBQUFqbkIsRUFBQSxJQUNBa25CLEVBQUFsbkIsRUFBQSxJQUNBbW5CLEVBQUFubkIsRUFBQSxLQUNBb25CLEVBQUFwbkIsRUFBQSxJQUNBcW5CLEVBQUFybkIsRUFBQSxJQUNBMFIsRUFBQTBWLEVBQUFqakIsRUFDQWlmLEVBQUFpRSxFQUFBbGpCLEVBQ0FtakIsRUFBQTdjLEVBQUE2YyxXQUNBeFcsRUFBQXJHLEVBQUFxRyxVQUNBeVcsRUFBQTljLEVBQUE4YyxXQUtBQyxFQUFBampCLE1BQUEsVUFDQWtqQixFQUFBekIsRUFBQTBCLFlBQ0FDLEVBQUEzQixFQUFBNEIsU0FDQUMsRUFBQWxCLEVBQUEsR0FDQW1CLEVBQUFuQixFQUFBLEdBQ0FvQixFQUFBcEIsRUFBQSxHQUNBcUIsRUFBQXJCLEVBQUEsR0FDQXNCLEVBQUF0QixFQUFBLEdBQ0F1QixHQUFBdkIsRUFBQSxHQUNBd0IsR0FBQXZCLEdBQUEsR0FDQXdCLEdBQUF4QixHQUFBLEdBQ0F5QixHQUFBdkIsRUFBQXdCLE9BQ0FDLEdBQUF6QixFQUFBeFEsS0FDQWtTLEdBQUExQixFQUFBMkIsUUFDQUMsR0FBQWxCLEVBQUFtQixZQUNBQyxHQUFBcEIsRUFBQXFCLE9BQ0FDLEdBQUF0QixFQUFBdUIsWUFDQUMsR0FBQXhCLEVBQUExWSxLQUNBbWEsR0FBQXpCLEVBQUEwQixLQUNBQyxHQUFBM0IsRUFBQXJTLE1BQ0FpVSxHQUFBNUIsRUFBQTdOLFNBQ0EwUCxHQUFBN0IsRUFBQThCLGVBQ0FDLEdBQUE3QyxFQUFBLFlBQ0E4QyxHQUFBOUMsRUFBQSxlQUNBK0MsR0FBQXhoQixFQUFBLHFCQUNBeWhCLEdBQUF6aEIsRUFBQSxtQkFDQTBoQixHQUFBNUQsRUFBQTZELE9BQ0FDLEdBQUE5RCxFQUFBK0QsTUFDQUMsR0FBQWhFLEVBQUFnRSxLQUdBQyxHQUFBckQsRUFBQSxXQUFBaFYsRUFBQXhQLEdBQ0EsT0FBQThuQixHQUFBcEQsRUFBQWxWLElBQUErWCxLQUFBdm5CLEtBR0ErbkIsR0FBQXRJLEVBQUEsV0FFQSxlQUFBMkYsRUFBQSxJQUFBNEMsYUFBQSxJQUFBL2tCLFFBQUEsS0FHQWdsQixLQUFBN0MsT0FBQSxVQUFBL0IsS0FBQTVELEVBQUEsV0FDQSxJQUFBMkYsRUFBQSxHQUFBL0IsVUFHQTZFLEdBQUEsU0FBQTFsQixFQUFBMmxCLEdBQ0EsSUFBQUMsRUFBQWxaLEVBQUExTSxHQUNBLEdBQUE0bEIsRUFBQSxHQUFBQSxFQUFBRCxFQUFBLE1BQUFoRCxFQUFBLGlCQUNBLE9BQUFpRCxHQUdBQyxHQUFBLFNBQUE3bEIsR0FDQSxHQUFBa00sRUFBQWxNLElBQUFrbEIsTUFBQWxsQixFQUFBLE9BQUFBLEVBQ0EsTUFBQW1NLEVBQUFuTSxFQUFBLDJCQUdBc2xCLEdBQUEsU0FBQVEsRUFBQXRvQixHQUNBLEtBQUEwTyxFQUFBNFosSUFBQWhCLE1BQUFnQixHQUNBLE1BQUEzWixFQUFBLHdDQUNLLFdBQUEyWixFQUFBdG9CLElBR0x1b0IsR0FBQSxTQUFBL1ksRUFBQWdaLEdBQ0EsT0FBQUMsR0FBQS9ELEVBQUFsVixJQUFBK1gsS0FBQWlCLElBR0FDLEdBQUEsU0FBQUgsRUFBQUUsR0FJQSxJQUhBLElBQUF6a0IsRUFBQSxFQUNBL0QsRUFBQXdvQixFQUFBeG9CLE9BQ0F3RixFQUFBc2lCLEdBQUFRLEVBQUF0b0IsR0FDQUEsRUFBQStELEdBQUF5QixFQUFBekIsR0FBQXlrQixFQUFBemtCLEtBQ0EsT0FBQXlCLEdBR0FrakIsR0FBQSxTQUFBbG1CLEVBQUF0QyxFQUFBeW9CLEdBQ0FwWixFQUFBL00sRUFBQXRDLEdBQWlCbkIsSUFBQSxXQUFtQixPQUFBK1IsS0FBQThYLEdBQUFELE9BR3BDRSxHQUFBLFNBQUE1b0IsR0FDQSxJQUtBaEMsRUFBQStCLEVBQUFtbUIsRUFBQTNnQixFQUFBc2pCLEVBQUF6b0IsRUFMQW1QLEVBQUFvUixFQUFBM2dCLEdBQ0E4b0IsRUFBQWhwQixVQUFBQyxPQUNBZ3BCLEVBQUFELEVBQUEsRUFBQWhwQixVQUFBLFFBQUErQixFQUNBbW5CLE9BQUFubkIsSUFBQWtuQixFQUNBRSxFQUFBNUUsRUFBQTlVLEdBRUEsUUFBQTFOLEdBQUFvbkIsSUFBQTlFLEVBQUE4RSxHQUFBLENBQ0EsSUFBQTdvQixFQUFBNm9CLEVBQUE5cUIsS0FBQW9SLEdBQUEyVyxLQUFBbG9CLEVBQUEsSUFBeUQ2cUIsRUFBQXpvQixFQUFBb0MsUUFBQTJELEtBQWdDbkksSUFDekZrb0IsRUFBQXhoQixLQUFBbWtCLEVBQUE3cEIsT0FDT3VRLEVBQUEyVyxFQUdQLElBREE4QyxHQUFBRixFQUFBLElBQUFDLEVBQUF6aEIsRUFBQXloQixFQUFBanBCLFVBQUEsT0FDQTlCLEVBQUEsRUFBQStCLEVBQUE4aEIsRUFBQXRTLEVBQUF4UCxRQUFBd0YsRUFBQXNpQixHQUFBaFgsS0FBQTlRLEdBQTZFQSxFQUFBL0IsRUFBWUEsSUFDekZ1SCxFQUFBdkgsR0FBQWdyQixFQUFBRCxFQUFBeFosRUFBQXZSLE1BQUF1UixFQUFBdlIsR0FFQSxPQUFBdUgsR0FHQTJqQixHQUFBLFdBSUEsSUFIQSxJQUFBcGxCLEVBQUEsRUFDQS9ELEVBQUFELFVBQUFDLE9BQ0F3RixFQUFBc2lCLEdBQUFoWCxLQUFBOVEsR0FDQUEsRUFBQStELEdBQUF5QixFQUFBekIsR0FBQWhFLFVBQUFnRSxLQUNBLE9BQUF5QixHQUlBNGpCLEtBQUFoRSxHQUFBM0YsRUFBQSxXQUF5RHlILEdBQUE5b0IsS0FBQSxJQUFBZ25CLEVBQUEsTUFFekRpRSxHQUFBLFdBQ0EsT0FBQW5DLEdBQUFqZ0IsTUFBQW1pQixHQUFBcEMsR0FBQTVvQixLQUFBaXFCLEdBQUF2WCxPQUFBdVgsR0FBQXZYLE1BQUEvUSxZQUdBdXBCLElBQ0FDLFdBQUEsU0FBQXpwQixFQUFBMHBCLEdBQ0EsT0FBQXhFLEVBQUE1bUIsS0FBQWlxQixHQUFBdlgsTUFBQWhSLEVBQUEwcEIsRUFBQXpwQixVQUFBQyxPQUFBLEVBQUFELFVBQUEsUUFBQStCLElBRUEybkIsTUFBQSxTQUFBaEgsR0FDQSxPQUFBb0QsRUFBQXdDLEdBQUF2WCxNQUFBMlIsRUFBQTFpQixVQUFBQyxPQUFBLEVBQUFELFVBQUEsUUFBQStCLElBRUE0bkIsS0FBQSxTQUFBenFCLEdBQ0EsT0FBQThsQixFQUFBOWQsTUFBQW9oQixHQUFBdlgsTUFBQS9RLFlBRUE0cEIsT0FBQSxTQUFBbEgsR0FDQSxPQUFBOEYsR0FBQXpYLEtBQUE2VSxFQUFBMEMsR0FBQXZYLE1BQUEyUixFQUNBMWlCLFVBQUFDLE9BQUEsRUFBQUQsVUFBQSxRQUFBK0IsS0FFQThuQixLQUFBLFNBQUF0b0IsR0FDQSxPQUFBd2tCLEVBQUF1QyxHQUFBdlgsTUFBQXhQLEVBQUF2QixVQUFBQyxPQUFBLEVBQUFELFVBQUEsUUFBQStCLElBRUErbkIsVUFBQSxTQUFBdm9CLEdBQ0EsT0FBQXlrQixHQUFBc0MsR0FBQXZYLE1BQUF4UCxFQUFBdkIsVUFBQUMsT0FBQSxFQUFBRCxVQUFBLFFBQUErQixJQUVBc0csUUFBQSxTQUFBcWEsR0FDQWlELEVBQUEyQyxHQUFBdlgsTUFBQTJSLEVBQUExaUIsVUFBQUMsT0FBQSxFQUFBRCxVQUFBLFFBQUErQixJQUVBa0MsUUFBQSxTQUFBOGxCLEdBQ0EsT0FBQTdELEdBQUFvQyxHQUFBdlgsTUFBQWdaLEVBQUEvcEIsVUFBQUMsT0FBQSxFQUFBRCxVQUFBLFFBQUErQixJQUVBaW9CLFNBQUEsU0FBQUQsR0FDQSxPQUFBOUQsR0FBQXFDLEdBQUF2WCxNQUFBZ1osRUFBQS9wQixVQUFBQyxPQUFBLEVBQUFELFVBQUEsUUFBQStCLElBRUE2SyxLQUFBLFNBQUFxZCxHQUNBLE9BQUFuRCxHQUFBNWYsTUFBQW9oQixHQUFBdlgsTUFBQS9RLFlBRUF5bUIsWUFBQSxTQUFBc0QsR0FDQSxPQUFBdkQsR0FBQXRmLE1BQUFvaEIsR0FBQXZYLE1BQUEvUSxZQUVBZ04sSUFBQSxTQUFBaWMsR0FDQSxPQUFBbkIsR0FBQVEsR0FBQXZYLE1BQUFrWSxFQUFBanBCLFVBQUFDLE9BQUEsRUFBQUQsVUFBQSxRQUFBK0IsSUFFQTRrQixPQUFBLFNBQUFqRSxHQUNBLE9BQUFnRSxHQUFBeGYsTUFBQW9oQixHQUFBdlgsTUFBQS9RLFlBRUE2bUIsWUFBQSxTQUFBbkUsR0FDQSxPQUFBa0UsR0FBQTFmLE1BQUFvaEIsR0FBQXZYLE1BQUEvUSxZQUVBa3FCLFFBQUEsV0FNQSxJQUxBLElBSUFockIsRUFIQWUsRUFBQXFvQixHQURBdlgsTUFDQTlRLE9BQ0FrcUIsRUFBQXRiLEtBQUFpVSxNQUFBN2lCLEVBQUEsR0FDQStELEVBQUEsRUFFQUEsRUFBQW1tQixHQUNBanJCLEVBTkE2UixLQU1BL00sR0FOQStNLEtBT0EvTSxLQVBBK00sT0FPQTlRLEdBUEE4USxLQVFBOVEsR0FBQWYsRUFDTyxPQVRQNlIsTUFXQXFaLEtBQUEsU0FBQTFILEdBQ0EsT0FBQW1ELEVBQUF5QyxHQUFBdlgsTUFBQTJSLEVBQUExaUIsVUFBQUMsT0FBQSxFQUFBRCxVQUFBLFFBQUErQixJQUVBaWxCLEtBQUEsU0FBQXFELEdBQ0EsT0FBQXRELEdBQUExb0IsS0FBQWlxQixHQUFBdlgsTUFBQXNaLElBRUFDLFNBQUEsU0FBQUMsRUFBQUMsR0FDQSxJQUFBL2EsRUFBQTZZLEdBQUF2WCxNQUNBOVEsRUFBQXdQLEVBQUF4UCxPQUNBd3FCLEVBQUF0RyxFQUFBb0csRUFBQXRxQixHQUNBLFdBQUEwa0IsRUFBQWxWLElBQUErWCxLQUFBLENBQ0EvWCxFQUFBdk0sT0FDQXVNLEVBQUFpYixXQUFBRCxFQUFBaGIsRUFBQWtiLGtCQUNBNUksUUFBQWhnQixJQUFBeW9CLEVBQUF2cUIsRUFBQWtrQixFQUFBcUcsRUFBQXZxQixJQUFBd3FCLE1BS0FHLEdBQUEsU0FBQW5CLEVBQUFlLEdBQ0EsT0FBQWhDLEdBQUF6WCxLQUFBa1csR0FBQTVvQixLQUFBaXFCLEdBQUF2WCxNQUFBMFksRUFBQWUsS0FHQUssR0FBQSxTQUFBQyxHQUNBeEMsR0FBQXZYLE1BQ0EsSUFBQXNYLEVBQUFGLEdBQUFub0IsVUFBQSxNQUNBQyxFQUFBOFEsS0FBQTlRLE9BQ0E4cUIsRUFBQWxLLEVBQUFpSyxHQUNBbk8sRUFBQW9GLEVBQUFnSixFQUFBOXFCLFFBQ0ErRCxFQUFBLEVBQ0EsR0FBQTJZLEVBQUEwTCxFQUFBcG9CLEVBQUEsTUFBQW1sQixFQXZLQSxpQkF3S0EsS0FBQXBoQixFQUFBMlksR0FBQTVMLEtBQUFzWCxFQUFBcmtCLEdBQUErbUIsRUFBQS9tQixNQUdBZ25CLElBQ0F6RSxRQUFBLFdBQ0EsT0FBQUQsR0FBQWpvQixLQUFBaXFCLEdBQUF2WCxRQUVBcUQsS0FBQSxXQUNBLE9BQUFpUyxHQUFBaG9CLEtBQUFpcUIsR0FBQXZYLFFBRUFxVixPQUFBLFdBQ0EsT0FBQUQsR0FBQTluQixLQUFBaXFCLEdBQUF2WCxTQUlBa2EsR0FBQSxTQUFBbHJCLEVBQUFJLEdBQ0EsT0FBQXdPLEVBQUE1TyxJQUNBQSxFQUFBNG5CLEtBQ0EsaUJBQUF4bkIsR0FDQUEsS0FBQUosR0FDQXlMLFFBQUFyTCxJQUFBcUwsT0FBQXJMLElBRUErcUIsR0FBQSxTQUFBbnJCLEVBQUFJLEdBQ0EsT0FBQThxQixHQUFBbHJCLEVBQUFJLEVBQUFvUCxFQUFBcFAsR0FBQSxJQUNBNmpCLEVBQUEsRUFBQWprQixFQUFBSSxJQUNBK2dCLEVBQUFuaEIsRUFBQUksSUFFQWdyQixHQUFBLFNBQUFwckIsRUFBQUksRUFBQWlyQixHQUNBLFFBQUFILEdBQUFsckIsRUFBQUksRUFBQW9QLEVBQUFwUCxHQUFBLEtBQ0F3TyxFQUFBeWMsSUFDQS9LLEVBQUErSyxFQUFBLFdBQ0EvSyxFQUFBK0ssRUFBQSxRQUNBL0ssRUFBQStLLEVBQUEsUUFFQUEsRUFBQXRzQixjQUNBdWhCLEVBQUErSyxFQUFBLGNBQUFBLEVBQUE5WixVQUNBK08sRUFBQStLLEVBQUEsZ0JBQUFBLEVBQUFyc0IsV0FJS3lRLEVBQUF6UCxFQUFBSSxFQUFBaXJCLElBRkxyckIsRUFBQUksR0FBQWlyQixFQUFBbHNCLE1BQ0FhLElBSUEwbkIsS0FDQXRDLEVBQUFsakIsRUFBQWlwQixHQUNBaEcsRUFBQWpqQixFQUFBa3BCLElBR0F4aUIsSUFBQVUsRUFBQVYsRUFBQU0sR0FBQXdlLEdBQUEsVUFDQXRHLHlCQUFBK0osR0FDQXJzQixlQUFBc3NCLEtBR0F6TCxFQUFBLFdBQXlCd0gsR0FBQTdvQixhQUN6QjZvQixHQUFBQyxHQUFBLFdBQ0EsT0FBQUwsR0FBQXpvQixLQUFBMFMsUUFJQSxJQUFBc2EsR0FBQXBILEtBQTRDc0YsSUFDNUN0RixFQUFBb0gsR0FBQUwsSUFDQXZpQixFQUFBNGlCLEdBQUFoRSxHQUFBMkQsR0FBQTVFLFFBQ0FuQyxFQUFBb0gsSUFDQXBZLE1BQUEyWCxHQUNBdEgsSUFBQXVILEdBQ0FycUIsWUFBQSxhQUNBaVgsU0FBQXlQLEdBQ0FFLGVBQUFrQyxLQUVBWCxHQUFBMEMsR0FBQSxjQUNBMUMsR0FBQTBDLEdBQUEsa0JBQ0ExQyxHQUFBMEMsR0FBQSxrQkFDQTFDLEdBQUEwQyxHQUFBLGNBQ0E3YixFQUFBNmIsR0FBQS9ELElBQ0F0b0IsSUFBQSxXQUFzQixPQUFBK1IsS0FBQTRXLE9BSXRCMXBCLEVBQUFELFFBQUEsU0FBQTRrQixFQUFBd0YsRUFBQWtELEVBQUFDLEdBRUEsSUFBQXRMLEVBQUEyQyxJQURBMkksT0FDQSxzQkFDQUMsRUFBQSxNQUFBNUksRUFDQTZJLEVBQUEsTUFBQTdJLEVBQ0E4SSxFQUFBbmpCLEVBQUEwWCxHQUNBMEwsRUFBQUQsTUFDQUUsRUFBQUYsR0FBQS9ULEVBQUErVCxHQUNBRyxHQUFBSCxJQUFBN0gsRUFBQWlJLElBQ0FyYyxLQUNBc2MsRUFBQUwsS0FBQSxVQVVBTSxFQUFBLFNBQUF6SyxFQUFBdmQsR0FDQXdMLEVBQUErUixFQUFBdmQsR0FDQWhGLElBQUEsV0FDQSxPQVpBLFNBQUF1aUIsRUFBQXZkLEdBQ0EsSUFBQWlvQixFQUFBMUssRUFBQXNILEdBQ0EsT0FBQW9ELEVBQUEvcUIsRUFBQXNxQixHQUFBeG5CLEVBQUFva0IsRUFBQTZELEVBQUF0dEIsRUFBQXFwQixJQVVBdHBCLENBQUFxUyxLQUFBL00sSUFFQXNmLElBQUEsU0FBQXBrQixHQUNBLE9BWEEsU0FBQXFpQixFQUFBdmQsRUFBQTlFLEdBQ0EsSUFBQStzQixFQUFBMUssRUFBQXNILEdBQ0EwQyxJQUFBcnNCLEtBQUEyUCxLQUFBcWQsTUFBQWh0QixJQUFBLElBQUFBLEVBQUEsWUFBQUEsR0FDQStzQixFQUFBL3FCLEVBQUF1cUIsR0FBQXpuQixFQUFBb2tCLEVBQUE2RCxFQUFBdHRCLEVBQUFPLEVBQUE4b0IsSUFRQW1FLENBQUFwYixLQUFBL00sRUFBQTlFLElBRUFILFlBQUEsS0FHQThzQixHQUNBSCxFQUFBSixFQUFBLFNBQUEvSixFQUFBMEssRUFBQUcsRUFBQUMsR0FDQXRJLEVBQUF4QyxFQUFBbUssRUFBQXpMLEVBQUEsTUFDQSxJQUVBL2MsRUFBQW9wQixFQUFBcnNCLEVBQUFzc0IsRUFGQXZvQixFQUFBLEVBQ0Fxa0IsRUFBQSxFQUVBLEdBQUExWixFQUFBc2QsR0FJUyxNQUFBQSxhQUFBMUcsR0FoVVQsZ0JBZ1VTZ0gsRUFBQW5JLEVBQUE2SCxLQS9UVCxxQkErVFNNLEdBYUEsT0FBQTVFLE1BQUFzRSxFQUNUdkQsR0FBQWdELEVBQUFPLEdBRUFuRCxHQUFBenFCLEtBQUFxdEIsRUFBQU8sR0FmQS9vQixFQUFBK29CLEVBQ0E1RCxFQUFBRixHQUFBaUUsRUFBQWhFLEdBQ0EsSUFBQW9FLEVBQUFQLEVBQUFLLFdBQ0EsUUFBQXZxQixJQUFBc3FCLEVBQUEsQ0FDQSxHQUFBRyxFQUFBcEUsRUFBQSxNQUFBaEQsRUFwU0EsaUJBc1NBLElBREFrSCxFQUFBRSxFQUFBbkUsR0FDQSxRQUFBakQsRUF0U0Esc0JBeVNBLElBREFrSCxFQUFBdkssRUFBQXNLLEdBQUFqRSxHQUNBQyxFQUFBbUUsRUFBQSxNQUFBcEgsRUF6U0EsaUJBMlNBbmxCLEVBQUFxc0IsRUFBQWxFLE9BZkFub0IsRUFBQWlrQixFQUFBK0gsR0FFQS9vQixFQUFBLElBQUFxaUIsRUFEQStHLEVBQUFyc0IsRUFBQW1vQixHQTJCQSxJQVBBM2YsRUFBQThZLEVBQUEsTUFDQTViLEVBQUF6QyxFQUNBdkUsRUFBQTBwQixFQUNBbHFCLEVBQUFtdUIsRUFDQXhtQixFQUFBN0YsRUFDQWlCLEVBQUEsSUFBQXVrQixFQUFBdmlCLEtBRUFjLEVBQUEvRCxHQUFBK3JCLEVBQUF6SyxFQUFBdmQsT0FFQStuQixFQUFBTCxFQUFBLFVBQUFyYSxFQUFBZ2EsSUFDQTVpQixFQUFBc2pCLEVBQUEsY0FBQUwsSUFDS2hNLEVBQUEsV0FDTGdNLEVBQUEsTUFDS2hNLEVBQUEsV0FDTCxJQUFBZ00sR0FBQSxNQUNLNUcsRUFBQSxTQUFBMkgsR0FDTCxJQUFBZixFQUNBLElBQUFBLEVBQUEsTUFDQSxJQUFBQSxFQUFBLEtBQ0EsSUFBQUEsRUFBQWUsS0FDSyxLQUNMZixFQUFBSixFQUFBLFNBQUEvSixFQUFBMEssRUFBQUcsRUFBQUMsR0FFQSxJQUFBRSxFQUdBLE9BSkF4SSxFQUFBeEMsRUFBQW1LLEVBQUF6TCxHQUlBdFIsRUFBQXNkLEdBQ0FBLGFBQUExRyxHQTdXQSxnQkE2V0FnSCxFQUFBbkksRUFBQTZILEtBNVdBLHFCQTRXQU0sT0FDQXhxQixJQUFBc3FCLEVBQ0EsSUFBQVYsRUFBQU0sRUFBQTlELEdBQUFpRSxFQUFBaEUsR0FBQWlFLFFBQ0F0cUIsSUFBQXFxQixFQUNBLElBQUFULEVBQUFNLEVBQUE5RCxHQUFBaUUsRUFBQWhFLElBQ0EsSUFBQXVELEVBQUFNLEdBRUF0RSxNQUFBc0UsRUFBQXZELEdBQUFnRCxFQUFBTyxHQUNBbkQsR0FBQXpxQixLQUFBcXRCLEVBQUFPLEdBVEEsSUFBQU4sRUFBQXpILEVBQUErSCxNQVdBdEcsRUFBQWlHLElBQUFqaUIsU0FBQXBLLFVBQUEra0IsRUFBQXFILEdBQUFoZixPQUFBMlgsRUFBQXNILElBQUF0SCxFQUFBcUgsR0FBQSxTQUFBeHJCLEdBQ0FBLEtBQUF1ckIsR0FBQWpqQixFQUFBaWpCLEVBQUF2ckIsRUFBQXdyQixFQUFBeHJCLE1BRUF1ckIsRUFBQSxVQUFBSyxFQUNBbkksSUFBQW1JLEVBQUF2ckIsWUFBQWtyQixJQUVBLElBQUFnQixFQUFBWCxFQUFBMUUsSUFDQXNGLElBQUFELElBQ0EsVUFBQUEsRUFBQWp1QixXQUFBc0QsR0FBQTJxQixFQUFBanVCLE1BQ0FtdUIsRUFBQTVCLEdBQUE1RSxPQUNBM2QsRUFBQWlqQixFQUFBbkUsSUFBQSxHQUNBOWUsRUFBQXNqQixFQUFBcEUsR0FBQTFILEdBQ0F4WCxFQUFBc2pCLEVBQUFsRSxJQUFBLEdBQ0FwZixFQUFBc2pCLEVBQUF2RSxHQUFBa0UsSUFFQUgsRUFBQSxJQUFBRyxFQUFBLEdBQUFwRSxLQUFBckgsRUFBQXFILE1BQUF5RSxJQUNBdmMsRUFBQXVjLEVBQUF6RSxJQUNBdG9CLElBQUEsV0FBMEIsT0FBQWloQixLQUkxQnhRLEVBQUF3USxHQUFBeUwsRUFFQS9pQixJQUFBUSxFQUFBUixFQUFBa0IsRUFBQWxCLEVBQUFNLEdBQUF5aUIsR0FBQUMsR0FBQWxjLEdBRUE5RyxJQUFBVSxFQUFBNFcsR0FDQTBLLGtCQUFBdkMsSUFHQXpmLElBQUFVLEVBQUFWLEVBQUFNLEVBQUF5VyxFQUFBLFdBQXVEaU0sRUFBQWtCLEdBQUF4dUIsS0FBQXF0QixFQUFBLEtBQStCekwsR0FDdEY5YixLQUFBMmtCLEdBQ0ErRCxHQUFBekQsS0FwWkEsc0JBdVpBMkMsR0FBQXRqQixFQUFBc2pCLEVBdlpBLG9CQXVaQTNELEdBRUF6ZixJQUFBWSxFQUFBMFcsRUFBQXNKLElBRUF4RSxFQUFBOUUsR0FFQXRYLElBQUFZLEVBQUFaLEVBQUFNLEVBQUFpZixHQUFBakksR0FBdURxRCxJQUFBdUgsS0FFdkRsaUIsSUFBQVksRUFBQVosRUFBQU0sR0FBQTBqQixFQUFBMU0sRUFBQStLLElBRUFwSCxHQUFBbUksRUFBQXRVLFVBQUF5UCxLQUFBNkUsRUFBQXRVLFNBQUF5UCxJQUVBdmUsSUFBQVksRUFBQVosRUFBQU0sRUFBQXlXLEVBQUEsV0FDQSxJQUFBZ00sRUFBQSxHQUFBelksVUFDS2dOLEdBQVVoTixNQUFBMlgsS0FFZmppQixJQUFBWSxFQUFBWixFQUFBTSxHQUFBeVcsRUFBQSxXQUNBLFlBQUEwSCxrQkFBQSxJQUFBc0UsR0FBQSxNQUFBdEUscUJBQ0sxSCxFQUFBLFdBQ0xxTSxFQUFBM0UsZUFBQS9vQixNQUFBLFNBQ0s0aEIsR0FBV21ILGVBQUFrQyxLQUVoQnpFLEVBQUE1RSxHQUFBME0sRUFBQUQsRUFBQUUsRUFDQWhKLEdBQUErSSxHQUFBbGtCLEVBQUFzakIsRUFBQTFFLEdBQUF1RixTQUVDM3VCLEVBQUFELFFBQUEsc0ZDN2REOHVCLEVBQUEsNkJBRUFDLEVBQUEsRUFFQUMsRUFBQSxFQUNBQyxFQUFBLEVBRUFDLEdBQWtCOXBCLFFBQUE0RyxFQUFBLEVBQUExRyxJQUFBMEcsRUFBQSxFQUFBM0csS0FBQTJHLEVBQUEsR0FFbEIsU0FBQW1qQixJQUNBLElBQUFDLEVBQUFwdEIsVUFBQUMsT0FBQSxRQUFBOEIsSUFBQS9CLFVBQUEsR0FBQUEsVUFBQSxNQUNBcXRCLEVBQUFydEIsVUFBQSxHQUVBb0UsRUFBQSxJQUFBL0IsTUFBQStxQixHQUNBbnRCLEVBQUEsRUFDQXF0QixFQUFBLEVBQ0FDLEVBQUEsRUFFQTNvQixFQUFBLFNBQUFuQyxHQUNBMkIsRUFBQWtwQixHQUFBN3FCLEVBQ0E2cUIsS0FBQSxHQUFBRixFQUNBbnRCLEtBR0FvRCxFQUFBLFdBQ0EsTUFBQXBELEVBQUEsQ0FDQSxJQUFBd0MsRUFBQTJCLEVBQUFtcEIsR0FJQSxPQUhBbnBCLEVBQUFtcEIsR0FBQSxLQUNBdHRCLElBQ0FzdEIsS0FBQSxHQUFBSCxFQUNBM3FCLElBSUFpTCxFQUFBLFdBRUEsSUFEQSxJQUFBOGYsS0FDQXZ0QixHQUNBdXRCLEVBQUE1b0IsS0FBQXZCLEtBRUEsT0FBQW1xQixHQUdBLE9BQ0FwcUIsUUFBQSxXQUNBLFVBQUFuRCxHQUVBcUQsSUFBQSxTQUFBYixHQUNBLEdBQUF4QyxFQUFBbXRCLEVBQ0F4b0IsRUFBQW5DLE9BQ08sQ0FDUCxJQUFBZ3JCLE9BQUEsRUFDQSxPQUFBSixHQUNBLEtBQUFOLEVBQ0EsVUFBQXJyQixNQUFBb3JCLEdBQ0EsS0FBQUUsRUFDQTVvQixFQUFBa3BCLEdBQUE3cUIsRUFFQThxQixFQURBRCxLQUFBLEdBQUFGLEVBRUEsTUFDQSxLQUFBSCxFQUNBUSxFQUFBLEVBQUFMLEVBRUFocEIsRUFBQXNKLElBRUF6TixFQUFBbUUsRUFBQW5FLE9BQ0FxdEIsRUFBQWxwQixFQUFBbkUsT0FDQXN0QixFQUFBLEVBRUFucEIsRUFBQW5FLE9BQUF3dEIsRUFDQUwsRUFBQUssRUFFQTdvQixFQUFBbkMsTUFPQVksT0FDQXFLLFNBSUEsSUFBQWdnQixHQUNBbFEsS0FBQSxXQUNBLE9BQUEwUCxHQUVBblEsTUFBQSxTQUFBcVEsR0FDQSxPQUFBRCxFQUFBQyxFQUFBTCxJQUVBWSxTQUFBLFNBQUFQLEdBQ0EsT0FBQUQsRUFBQUMsRUF4RkEsSUEwRkFRLFFBQUEsU0FBQVIsR0FDQSxPQUFBRCxFQUFBQyxFQUFBSixJQUVBYSxVQUFBLFNBQUFDLEdBQ0EsT0FBQVgsRUFBQVcsRUFBQWIsc0JDbEdBLElBQUFjLEVBQUFqd0IsRUFBQSxFQUFBQSxDQUFBLGVBQ0F3bkIsRUFBQWpqQixNQUFBOUMsZUFDQXdDLEdBQUF1akIsRUFBQXlJLElBQUFqd0IsRUFBQSxHQUFBQSxDQUFBd25CLEVBQUF5SSxNQUNBOXZCLEVBQUFELFFBQUEsU0FBQW1DLEdBQ0FtbEIsRUFBQXlJLEdBQUE1dEIsSUFBQSxrQkNMQWxDLEVBQUFELFNBQUEsbUJDQUEsSUFBQWd3QixFQUFBbHdCLEVBQUEsR0FBQUEsQ0FBQSxRQUNBNlEsRUFBQTdRLEVBQUEsR0FDQXVpQixFQUFBdmlCLEVBQUEsSUFDQW13QixFQUFBbndCLEVBQUEsSUFBQW1FLEVBQ0F2QixFQUFBLEVBQ0F3dEIsRUFBQXR2QixPQUFBc3ZCLGNBQUEsV0FDQSxVQUVBQyxHQUFBcndCLEVBQUEsRUFBQUEsQ0FBQSxXQUNBLE9BQUFvd0IsRUFBQXR2QixPQUFBd3ZCLHlCQUVBQyxFQUFBLFNBQUE1ckIsR0FDQXdyQixFQUFBeHJCLEVBQUF1ckIsR0FBcUI5dUIsT0FDckJoQixFQUFBLE9BQUF3QyxFQUNBb2QsU0FnQ0F3USxFQUFBcndCLEVBQUFELFNBQ0E0a0IsSUFBQW9MLEVBQ0FPLE1BQUEsRUFDQUMsUUFoQ0EsU0FBQS9yQixFQUFBNE8sR0FFQSxJQUFBMUMsRUFBQWxNLEdBQUEsdUJBQUFBLEtBQUEsaUJBQUFBLEVBQUEsU0FBQUEsRUFDQSxJQUFBNGQsRUFBQTVkLEVBQUF1ckIsR0FBQSxDQUVBLElBQUFFLEVBQUF6ckIsR0FBQSxVQUVBLElBQUE0TyxFQUFBLFVBRUFnZCxFQUFBNXJCLEdBRUcsT0FBQUEsRUFBQXVyQixHQUFBOXZCLEdBc0JIdXdCLFFBcEJBLFNBQUFoc0IsRUFBQTRPLEdBQ0EsSUFBQWdQLEVBQUE1ZCxFQUFBdXJCLEdBQUEsQ0FFQSxJQUFBRSxFQUFBenJCLEdBQUEsU0FFQSxJQUFBNE8sRUFBQSxTQUVBZ2QsRUFBQTVyQixHQUVHLE9BQUFBLEVBQUF1ckIsR0FBQWxRLEdBWUg0USxTQVRBLFNBQUFqc0IsR0FFQSxPQURBMHJCLEdBQUFHLEVBQUFDLE1BQUFMLEVBQUF6ckIsS0FBQTRkLEVBQUE1ZCxFQUFBdXJCLElBQUFLLEVBQUE1ckIsR0FDQUEsNkNDMUNBNEQsR0FBWUEsTUFBQSxFQUFBbkgsV0FBQTZDLEdBQ1o0c0IsS0FFQSxTQUFBQyxFQUFBcmpCLEdBQ0EsT0FBQXNqQixFQUFBLEVBQUFwckIsUUFBQThILEdBQ0EsVUFDR2xKLE1BQUFDLFFBQUFpSixHQUNIQyxPQUFBRCxFQUFBeUIsSUFBQSxTQUFBOGhCLEdBQ0EsT0FBQXRqQixPQUFBc2pCLE1BR0F0akIsT0FBQUQsR0FJQSxTQUFBd2pCLEVBQUFDLEVBQUFDLEdBQ0EsSUFBQXh3QixFQUFBdUIsVUFBQUMsT0FBQSxRQUFBOEIsSUFBQS9CLFVBQUEsR0FBQUEsVUFBQSxjQUVBa3ZCLE9BQUEsRUFDQUMsRUFBQUYsRUFFQSxTQUFBdnNCLEVBQUF3RixFQUFBMUcsR0FDQSxHQUFBMnRCLElBQUFSLEVBQ0EsT0FBQXRvQixFQUdBLEdBQUE3RSxFQUVBLE1BREEydEIsRUFBQVIsRUFDQW50QixFQUVBMHRCLEtBQUFobkIsR0FFQSxJQUFBa25CLEVBQUFKLEVBQUFHLEtBQ0FFLEVBQUFELEVBQUEsR0FDQUUsRUFBQUYsRUFBQSxHQUNBRyxFQUFBSCxFQUFBLEdBSUEsT0FEQUYsRUFBQUssR0FEQUosRUFBQUUsS0FFQVYsRUFBQXRvQixFQUFBaXBCLEVBSUEsT0FBQTF3QixPQUFBaXdCLEVBQUEsRUFBQWp3QixDQUFBOEQsRUFBQSxTQUFBbEIsR0FDQSxPQUFBa0IsRUFBQSxLQUFBbEIsSUFDRy9DLEdBQUEsc0JDM0NILFNBQUFxUCxFQUFBdkMsRUFBQXdDLEdBQ0EsUUFBQWxHLEVBQUE3SCxVQUFBQyxPQUFBNkgsRUFBQXpGLE1BQUF3RixFQUFBLEVBQUFBLEVBQUEsS0FBQUUsRUFBQSxFQUFvRkEsRUFBQUYsRUFBYUUsSUFDakdELEVBQUFDLEVBQUEsR0FBQS9ILFVBQUErSCxHQUdBLElBQUF5bkIsR0FBZW5wQixNQUFBLEVBQUFuSCxNQUFBTixPQUFBNndCLEVBQUEsRUFBQTd3QixDQUFBMk0sSUFLZjVELE9BQUEsRUFDQStuQixFQUFBLFNBQUFDLEdBQ0EsT0FBQWhvQixFQUFBZ29CLEdBR0EsT0FBQVosR0FDQWEsR0FBQSxXQUNBLFlBQUFKLEVBQUFFLElBRUFHLEdBQUEsV0FDQSxPQUFBbG9CLElBQUFtb0IsRUFBQSxHQUFBbkIsSUFBQSxNQWRBZ0IsRUFjQWhvQixHQWJZdEIsTUFBQSxFQUFBbkgsTUFBQXV3QixFQUFBLEVBQUF2b0IsV0FBQW5GLEdBQUFnTSxHQUFBcEIsT0FBQTdFLEdBQUE2bkIsUUFEWixJQUFBQSxJQWdCRyxrQkFBQWYsRUFBQXJqQixHQUFBLEtBQUF3QyxFQUFBdFAsS0FBQSxLQ3RCSCxTQUFBMFAsRUFBQTVDLEVBQUF3QyxHQUNBLFFBQUFsRyxFQUFBN0gsVUFBQUMsT0FBQTZILEVBQUF6RixNQUFBd0YsRUFBQSxFQUFBQSxFQUFBLEtBQUFFLEVBQUEsRUFBb0ZBLEVBQUFGLEVBQWFFLElBQ2pHRCxFQUFBQyxFQUFBLEdBQUEvSCxVQUFBK0gsR0FHQSxJQUFBeW5CLEdBQWVucEIsTUFBQSxFQUFBbkgsTUFBQU4sT0FBQTZ3QixFQUFBLEVBQUE3d0IsQ0FBQTJNLElBQ2Z3a0IsRUFBQSxTQUFBSixHQUNBLE9BQVl0cEIsTUFBQSxFQUFBbkgsTUFBQXV3QixFQUFBLEVBQUF2b0IsV0FBQW5GLEdBQUFnTSxHQUFBcEIsT0FBQTdFLEdBQUE2bkIsT0FNWjlzQixPQUFBLEVBQ0E4RSxPQUFBLEVBQ0Fxb0IsRUFBQSxTQUFBbHRCLEdBQ0EsT0FBQUQsRUFBQUMsR0FFQTRzQixFQUFBLFNBQUFDLEdBQ0EsT0FBQWhvQixFQUFBZ29CLEdBR0EsT0FBQVosR0FDQWEsR0FBQSxXQUNBLFlBQUFKLEVBQUFFLElBRUFHLEdBQUEsV0FDQSxPQUFBbG9CLElBQUFtb0IsRUFBQSxHQUFBbkIsR0FBQTlyQixHQUFBLEtBbEJBLFNBQUFBLEdBQ0EsT0FBWXdELE1BQUEsRUFBQW5ILE1BQUFOLE9BQUE2d0IsRUFBQSxFQUFBN3dCLENBQUFpRSxJQWlCWm90QixDQUFBcHRCLEtBQUEsS0FBQWt0QixFQUFBcG9CLEdBQUFxb0IsSUFFQUUsR0FBQSxXQUNBLFlBQUFILEVBQUFwb0IsR0FBQXFvQixLQUVHLG1CQUFBcEIsRUFBQXJqQixHQUFBLEtBQUF3QyxFQUFBdFAsS0FBQSxpQkM5QkgsU0FBQTZQLEVBQUE2aEIsRUFBQTVzQixFQUFBd0ssR0FDQSxRQUFBbEcsRUFBQTdILFVBQUFDLE9BQUE2SCxFQUFBekYsTUFBQXdGLEVBQUEsRUFBQUEsRUFBQSxLQUFBRSxFQUFBLEVBQW9GQSxFQUFBRixFQUFhRSxJQUNqR0QsRUFBQUMsRUFBQSxHQUFBL0gsVUFBQStILEdBR0EsSUFBQUosT0FBQSxFQUNBbEUsT0FBQSxFQUVBMnNCLEdBQXdCL3BCLE1BQUEsRUFBQW5ILE1BQUFOLE9BQUE2d0IsRUFBQSxFQUFBN3dCLENBQUEyRSxFQUFBbXFCLEVBQUEsRUFBQUUsUUFBQSxLQU94QnlDLEdBQWdCaHFCLE1BQUEsRUFBQW5ILE1BQUFOLE9BQUE2d0IsRUFBQSxFQUFBN3dCLENBQUFpd0IsRUFBQSxFQUFBc0IsSUFFaEJULEVBQUEsU0FBQUMsR0FDQSxPQUFBaG9CLEVBQUFnb0IsR0FFQVcsRUFBQSxTQUFBNXNCLEdBQ0EsT0FBQUQsRUFBQUMsR0FHQSxPQUFBcXJCLEdBQ0FhLEdBQUEsV0FDQSxZQUFBUSxFQUFBRSxJQUVBVCxHQUFBLFdBQ0EsYUFuQll4cEIsTUFBQSxFQUFBbkgsTUFBQU4sT0FBQTZ3QixFQUFBLEVBQUE3d0IsQ0FBQTZFLElBbUJaaXNCLElBRUFRLEdBQUEsV0FDQSxPQUFBdm9CLElBQUFtb0IsRUFBQSxHQUFBbkIsSUFBQSxNQXBCQWdCLEVBb0JBaG9CLEdBbkJZdEIsTUFBQSxFQUFBbkgsTUFBQXV3QixFQUFBLEVBQUF2b0IsV0FBQW5GLEdBQUFnTSxHQUFBcEIsT0FBQTdFLEdBQUE2bkIsUUFEWixJQUFBQSxHQXNCQVksR0FBQSxXQUNBLFlBQUFGLEtBRUcsaUJBQUF6QixFQUFBcnJCLEdBQUEsS0FBQXdLLEVBQUF0UCxLQUFBLHFNQ3JDSCxJQUFBd0ksRUFBQSxTQUFBdXBCLEdBQ0Esa0JBQWtCQSxFQUFBLGlFQUFrRkEsRUFBQSw2SkFBcUJBLEVBQUEsNkVBR3pIQyxFQUFBN3hCLE9BQUFpd0IsRUFBQSxFQUFBandCLENBQUFrUCxFQUFBN0csRUFBQSxjQUNBeXBCLEVBQUE5eEIsT0FBQWl3QixFQUFBLEVBQUFqd0IsQ0FBQXVQLEVBQUFsSCxFQUFBLGVBQ0EwcEIsRUFBQS94QixPQUFBaXdCLEVBQUEsRUFBQWp3QixDQUFBMFAsRUFBQXJILEVBQUEscTRCQ1pBLElBQUF5QixFQUFBNUssRUFBQSxJQUNBRyxFQUFBRCxRQUFBLFNBQUErQixFQUFBZ3JCLEVBQUFySyxHQUNBLFFBQUF2Z0IsS0FBQTRxQixFQUFBcmlCLEVBQUEzSSxFQUFBSSxFQUFBNHFCLEVBQUE1cUIsR0FBQXVnQixHQUNBLE9BQUEzZ0Isb0JDSEEsSUFBQXlILEVBQUExSixFQUFBLElBQ0FPLEVBQUFQLEVBQUEsS0FDQXVtQixFQUFBdm1CLEVBQUEsSUFDQXVSLEVBQUF2UixFQUFBLEdBQ0Fpa0IsRUFBQWprQixFQUFBLEdBQ0F5bUIsRUFBQXptQixFQUFBLElBQ0E4eUIsS0FDQUMsTUFDQTd5QixFQUFBQyxFQUFBRCxRQUFBLFNBQUE0RSxFQUFBMmpCLEVBQUF2ZixFQUFBdWEsRUFBQThGLEdBQ0EsSUFHQXBuQixFQUFBOG9CLEVBQUF6b0IsRUFBQW1GLEVBSEEwakIsRUFBQTlCLEVBQUEsV0FBdUMsT0FBQXprQixHQUFtQjJoQixFQUFBM2hCLEdBQzFEWCxFQUFBdUYsRUFBQVIsRUFBQXVhLEVBQUFnRixFQUFBLEtBQ0F2aUIsRUFBQSxFQUVBLHNCQUFBbWxCLEVBQUEsTUFBQXZhLFVBQUFoTSxFQUFBLHFCQUVBLEdBQUF5aEIsRUFBQThFLElBQUEsSUFBQWxwQixFQUFBOGhCLEVBQUFuZixFQUFBM0MsUUFBbUVBLEVBQUErRCxFQUFnQkEsSUFFbkYsSUFEQXlCLEVBQUE4Z0IsRUFBQXRrQixFQUFBb04sRUFBQTBaLEVBQUFubUIsRUFBQW9CLElBQUEsR0FBQStrQixFQUFBLElBQUE5bUIsRUFBQVcsRUFBQW9CLE9BQ0E0c0IsR0FBQW5yQixJQUFBb3JCLEVBQUEsT0FBQXByQixPQUNHLElBQUFuRixFQUFBNm9CLEVBQUE5cUIsS0FBQXVFLEtBQTRDbW1CLEVBQUF6b0IsRUFBQW9DLFFBQUEyRCxNQUUvQyxJQURBWixFQUFBcEgsRUFBQWlDLEVBQUEyQixFQUFBOG1CLEVBQUE3cEIsTUFBQXFuQixNQUNBcUssR0FBQW5yQixJQUFBb3JCLEVBQUEsT0FBQXByQixJQUdBbXJCLFFBQ0E1eUIsRUFBQTZ5Qix3QkN4QkE1eUIsRUFBQUQsUUFBQSxTQUFBeUUsRUFBQW9PLEVBQUFwUyxFQUFBcXlCLEdBQ0EsS0FBQXJ1QixhQUFBb08sU0FBQTlPLElBQUErdUIsUUFBQXJ1QixFQUNBLE1BQUFtTSxVQUFBblEsRUFBQSwyQkFDRyxPQUFBZ0UsaUNDRkgsSUFBQThGLEVBQUF6SyxFQUFBLEdBQ0EwUixFQUFBMVIsRUFBQSxJQUNBaXpCLEVBQUFqekIsRUFBQSxJQUNBa3pCLEVBQUFsekIsRUFBQSxFQUFBQSxDQUFBLFdBRUFHLEVBQUFELFFBQUEsU0FBQTRrQixHQUNBLElBQUEyRixFQUFBaGdCLEVBQUFxYSxHQUNBbU8sR0FBQXhJLE1BQUF5SSxJQUFBeGhCLEVBQUF2TixFQUFBc21CLEVBQUF5SSxHQUNBbHlCLGNBQUEsRUFDQUUsSUFBQSxXQUFzQixPQUFBK1IsMEJDVHRCLElBQUFrZ0IsRUFBQW56QixFQUFBLEtBQ0FvekIsRUFBQXB6QixFQUFBLEtBQUE2TyxPQUFBLHNCQUVBM08sRUFBQWlFLEVBQUFyRCxPQUFBdXlCLHFCQUFBLFNBQUExaEIsR0FDQSxPQUFBd2hCLEVBQUF4aEIsRUFBQXloQixxQkNKQSxJQUFBN2hCLEVBQUF2UixFQUFBLEdBQ0FzekIsRUFBQXR6QixFQUFBLEtBQ0F1ekIsRUFBQXZ6QixFQUFBLEtBQ0FnakIsRUFBQWhqQixFQUFBLElBQUFBLENBQUEsWUFDQXd6QixFQUFBLGFBSUFDLEVBQUEsV0FFQSxJQUlBQyxFQUpBQyxFQUFBM3pCLEVBQUEsSUFBQUEsQ0FBQSxVQUNBSSxFQUFBbXpCLEVBQUFweEIsT0FjQSxJQVZBd3hCLEVBQUFDLE1BQUFDLFFBQUEsT0FDQTd6QixFQUFBLEtBQUE4ekIsWUFBQUgsR0FDQUEsRUFBQTFHLElBQUEsZUFHQXlHLEVBQUFDLEVBQUFJLGNBQUE5VCxVQUNBK1QsT0FDQU4sRUFBQU8sTUFBQUMsdUNBQ0FSLEVBQUE3dEIsUUFDQTR0QixFQUFBQyxFQUFBdm9CLEVBQ0EvSyxZQUFBcXpCLEVBQUEsVUFBQUYsRUFBQW56QixJQUNBLE9BQUFxekIsS0FHQXR6QixFQUFBRCxRQUFBWSxPQUFBeVMsUUFBQSxTQUFBNUIsRUFBQXdpQixHQUNBLElBQUF4c0IsRUFRQSxPQVBBLE9BQUFnSyxHQUNBNmhCLEVBQUEsVUFBQWppQixFQUFBSSxHQUNBaEssRUFBQSxJQUFBNnJCLEVBQ0FBLEVBQUEsZUFFQTdyQixFQUFBcWIsR0FBQXJSLEdBQ0doSyxFQUFBOHJCLFNBQ0h4dkIsSUFBQWt3QixFQUFBeHNCLEVBQUEyckIsRUFBQTNyQixFQUFBd3NCLHFCQ3ZDQSxJQUFBOWlCLEVBQUFyUixFQUFBLElBQ0FvMEIsRUFBQXJqQixLQUFBcWpCLElBQ0E5aUIsRUFBQVAsS0FBQU8sSUFDQW5SLEVBQUFELFFBQUEsU0FBQWdHLEVBQUEvRCxHQUVBLE9BREErRCxFQUFBbUwsRUFBQW5MLElBQ0EsRUFBQWt1QixFQUFBbHVCLEVBQUEvRCxFQUFBLEdBQUFtUCxFQUFBcEwsRUFBQS9ELHFCQ0pBLElBQUFneEIsRUFBQW56QixFQUFBLEtBQ0F1ekIsRUFBQXZ6QixFQUFBLEtBRUFHLEVBQUFELFFBQUFZLE9BQUF3VixNQUFBLFNBQUEzRSxHQUNBLE9BQUF3aEIsRUFBQXhoQixFQUFBNGhCLG1CQ0xBLElBQUEzd0IsRUFBQSxFQUNBeXhCLEVBQUF0akIsS0FBQXVqQixTQUNBbjBCLEVBQUFELFFBQUEsU0FBQW1DLEdBQ0EsZ0JBQUF3TSxZQUFBNUssSUFBQTVCLEVBQUEsR0FBQUEsRUFBQSxRQUFBTyxFQUFBeXhCLEdBQUExYSxTQUFBLHFCQ0hBeFosRUFBQUQsUUFBQSxTQUFBcTBCLEVBQUFuekIsR0FDQSxPQUNBSCxhQUFBLEVBQUFzekIsR0FDQXZ6QixlQUFBLEVBQUF1ekIsR0FDQS9nQixXQUFBLEVBQUErZ0IsR0FDQW56QiwyQkNMQSxJQUFBeVAsRUFBQTdRLEVBQUEsR0FDQUcsRUFBQUQsUUFBQSxTQUFBeUUsRUFBQXdmLEdBQ0EsSUFBQXRULEVBQUFsTSxNQUFBNnZCLEtBQUFyUSxFQUFBLE1BQUFyVCxVQUFBLDBCQUFBcVQsRUFBQSxjQUNBLE9BQUF4ZixrQkNIQXhFLEVBQUFELDRCQ0FBLElBQUEySyxFQUFBN0ssRUFBQSxHQUNBcWUsRUFBQXJlLEVBQUEsSUFDQTRoQixFQUFBNWhCLEVBQUEsR0FDQXkwQixFQUFBejBCLEVBQUEsS0FDQTAwQixFQUFBLElBQUFELEVBQUEsSUFFQUUsRUFBQUMsT0FBQSxJQUFBRixJQUFBLEtBQ0FHLEVBQUFELE9BQUFGLElBQUEsTUFFQUksRUFBQSxTQUFBaFEsRUFBQTVULEVBQUE2akIsR0FDQSxJQUFBOXBCLEtBQ0ErcEIsRUFBQXBULEVBQUEsV0FDQSxRQUFBNlMsRUFBQTNQLE1BUEEsV0FPQUEsT0FFQTViLEVBQUErQixFQUFBNlosR0FBQWtRLEVBQUE5akIsRUFBQStqQixHQUFBUixFQUFBM1AsR0FDQWlRLElBQUE5cEIsRUFBQThwQixHQUFBN3JCLEdBQ0EyQixJQUFBWSxFQUFBWixFQUFBTSxFQUFBNnBCLEVBQUEsU0FBQS9wQixJQU1BZ3FCLEVBQUFILEVBQUFHLEtBQUEsU0FBQTV3QixFQUFBOGYsR0FJQSxPQUhBOWYsRUFBQXFKLE9BQUEyUSxFQUFBaGEsSUFDQSxFQUFBOGYsSUFBQTlmLElBQUE2ZCxRQUFBeVMsRUFBQSxLQUNBLEVBQUF4USxJQUFBOWYsSUFBQTZkLFFBQUEyUyxFQUFBLEtBQ0F4d0IsR0FHQWxFLEVBQUFELFFBQUE0MEIsbUJDN0JBLElBQUFydUIsRUFBQXpHLEVBQUEsSUFBQW1FLEVBQ0FvZSxFQUFBdmlCLEVBQUEsSUFDQXdwQixFQUFBeHBCLEVBQUEsRUFBQUEsQ0FBQSxlQUVBRyxFQUFBRCxRQUFBLFNBQUF5RSxFQUFBb2QsRUFBQW1ULEdBQ0F2d0IsSUFBQTRkLEVBQUE1ZCxFQUFBdXdCLEVBQUF2d0IsSUFBQWxELFVBQUErbkIsSUFBQS9pQixFQUFBOUIsRUFBQTZrQixHQUFvRXhvQixjQUFBLEVBQUFJLE1BQUEyZ0IsbUdDTHBFL2hCLEVBQUFVLEVBQUFtQixFQUFBLHNCQUFBK04sSUFBQSxJQUFBdWxCLEtBUUFDLEVBQUEsRUFPQSxTQUFBbGtCLEVBQUFuTSxHQUNBLElBQ0Fzd0IsSUFDQXR3QixJQUNHLFFBQ0h1d0IsS0FPQSxTQUFBQyxFQUFBeHdCLEdBQ0Fvd0IsRUFBQXJ1QixLQUFBL0IsR0FFQXF3QixJQUNBQyxJQUNBemxCLEtBUUEsU0FBQXlsQixJQUNBRCxJQU1BLFNBQUFFLElBQ0FGLElBTUEsU0FBQXhsQixJQUNBMGxCLElBR0EsSUFEQSxJQUFBdndCLE9BQUEsR0FDQXF3QixRQUFBbnhCLEtBQUFjLEVBQUFvd0IsRUFBQUssVUFDQXRrQixFQUFBbk0sbUZDM0RPLElBQU0wd0IsbUNBQWlDLGlDQUNqQ0MsbUNBQWlDLGlDQUNqQ0MsbUNBQWlDLGlDQUNqQ0MsbUNBQWlDLGlDQUNqQ0MsbUNBQWlDLGlDQUdqQ0MsaUNBQWlDLFdBQWtCLElBQWpCM29CLEVBQWlCakwsVUFBQUMsT0FBQSxRQUFBOEIsSUFBQS9CLFVBQUEsR0FBQUEsVUFBQSxNQUM1RCxPQUNJNEksS0FBTTJxQixFQUNOdG9CLFNBQ0k0b0IsTUFBTzVvQixFQUFRNG9CLFNBS2RDLGlDQUFpQyxXQUFrQixJQUFqQjdvQixFQUFpQmpMLFVBQUFDLE9BQUEsUUFBQThCLElBQUEvQixVQUFBLEdBQUFBLFVBQUEsTUFDNUQsT0FDSTRJLEtBQU00cUIsRUFDTnZvQixTQUNJdkssR0FBSXVLLEVBQVF2SyxNQUtYcXpCLGlDQUFpQyxXQUFrQixJQUFqQjlvQixFQUFpQmpMLFVBQUFDLE9BQUEsUUFBQThCLElBQUEvQixVQUFBLEdBQUFBLFVBQUEsTUFDNUQsT0FDSTRJLEtBQU02cUIsRUFDTnhvQixTQUNJdkssR0FBSXVLLEVBQVF2SyxHQUNaa0ksS0FBTXFDLEVBQVFyQyxLQUNkb3JCLEtBQU0vb0IsRUFBUStvQixLQUNkQyxNQUFPaHBCLEVBQVFncEIsU0FLZEMsaUNBQWlDLFdBQWtCLElBQWpCanBCLEVBQWlCakwsVUFBQUMsT0FBQSxRQUFBOEIsSUFBQS9CLFVBQUEsR0FBQUEsVUFBQSxNQUM1RCxPQUNJNEksS0FBTThxQixFQUNOem9CLFNBQ0l2SyxHQUFJdUssRUFBUXZLLE1BS1h5ekIsaUNBQWlDLFdBQWtCLElBQWpCbHBCLEVBQWlCakwsVUFBQUMsT0FBQSxRQUFBOEIsSUFBQS9CLFVBQUEsR0FBQUEsVUFBQSxNQUM1RCxPQUNJNEksS0FBTStxQixFQUNOMW9CLFNBQ0l2SyxHQUFJdUssRUFBUXZLLHFGQ2xEakIsSUFBTTB6QiwrQkFBK0IsNkJBQy9CQyw0QkFBK0IsMEJBRS9CQyxpQ0FBK0IsK0JBQy9CQyxvQ0FBa0Msa0NBR2xDQyw2QkFBNkIsV0FBa0J4MEIsVUFBQUMsT0FBQSxRQUFBOEIsSUFBQS9CLFVBQUEsSUFBQUEsVUFBQSxHQUN4RCxPQUNJNEksS0FBTXdyQixFQUNObnBCLFNBQ0l2SyxHQUFPLEtBQ1BrSSxLQUFPLEdBQ1A2ckIsTUFBTyxHQUNQQyxHQUFPLEtBS05DLDBCQUEwQixXQUFrQixJQUFqQjFwQixFQUFpQmpMLFVBQUFDLE9BQUEsUUFBQThCLElBQUEvQixVQUFBLEdBQUFBLFVBQUEsTUFDckQsT0FDSTRJLEtBQU15ckIsRUFDTnBwQixTQUNJdkssR0FBT3VLLEVBQVF2SyxHQUNma0ksS0FBT3FDLEVBQVFyQyxLQUNmNnJCLE1BQU94cEIsRUFBUXdwQixNQUNmQyxHQUFPenBCLEVBQVF5cEIsTUFLZEUsK0JBQStCLFdBQWtCLElBQWpCM3BCLEVBQWlCakwsVUFBQUMsT0FBQSxRQUFBOEIsSUFBQS9CLFVBQUEsR0FBQUEsVUFBQSxNQUMxRCxPQUNJNEksS0FBTTByQixFQUNOcnBCLFNBQ0l2SyxHQUFJdUssRUFBUXZLLEdBQ1ppZSxHQUFJMVQsRUFBUTBULEdBQ1pDLEdBQUkzVCxFQUFRMlQsR0FDWkMsR0FBSTVULEVBQVE0VCxHQUNaQyxHQUFJN1QsRUFBUTZULE1BS1grVixrQ0FBa0MsV0FBa0IsSUFBakI1cEIsRUFBaUJqTCxVQUFBQyxPQUFBLFFBQUE4QixJQUFBL0IsVUFBQSxHQUFBQSxVQUFBLE1BQzdELE9BQ0k0SSxLQUFNMnJCLEVBQ050cEIsU0FDSXZLLEdBQUl1SyxFQUFRdkssR0FDWmllLEdBQUkxVCxFQUFRMFQsR0FDWkMsR0FBSTNULEVBQVEyVCxHQUNaQyxHQUFJNVQsRUFBUTRULEdBQ1pDLEdBQUk3VCxFQUFRNlQsdUJDbkR4QixJQUFBZ1csRUFBQWgzQixFQUFBLElBQ0F3cEIsRUFBQXhwQixFQUFBLEVBQUFBLENBQUEsZUFFQWkzQixFQUErQyxhQUEvQ0QsRUFBQSxXQUEyQixPQUFBOTBCLFVBQTNCLElBU0EvQixFQUFBRCxRQUFBLFNBQUF5RSxHQUNBLElBQUFnTixFQUFBdWxCLEVBQUF2ckIsRUFDQSxZQUFBMUgsSUFBQVUsRUFBQSxtQkFBQUEsRUFBQSxPQUVBLGlCQUFBdXlCLEVBVkEsU0FBQXZ5QixFQUFBdEMsR0FDQSxJQUNBLE9BQUFzQyxFQUFBdEMsR0FDRyxNQUFBMkYsS0FPSG12QixDQUFBeGxCLEVBQUE3USxPQUFBNkQsR0FBQTZrQixJQUFBME4sRUFFQUQsRUFBQUQsRUFBQXJsQixHQUVBLFdBQUFoRyxFQUFBcXJCLEVBQUFybEIsS0FBQSxtQkFBQUEsRUFBQXlsQixPQUFBLFlBQUF6ckIsa0JDckJBekwsRUFBQWlFLEtBQWNrekIsc0NDQ2QsSUFBQUwsRUFBQWgzQixFQUFBLElBRUFHLEVBQUFELFFBQUFZLE9BQUEsS0FBQXUyQixxQkFBQSxHQUFBdjJCLE9BQUEsU0FBQTZELEdBQ0EsZ0JBQUFxeUIsRUFBQXJ5QixLQUFBMmQsTUFBQSxJQUFBeGhCLE9BQUE2RCxtQkNKQSxJQUFBMnlCLEVBR0FBLEVBQUEsV0FDQSxPQUFBcmtCLEtBREEsR0FJQSxJQUVBcWtCLEtBQUF6ckIsU0FBQSxjQUFBQSxLQUFBLEVBQUEwckIsTUFBQSxRQUNDLE1BQUF2dkIsR0FFRCxpQkFBQWMsU0FBQXd1QixFQUFBeHVCLFFBT0EzSSxFQUFBRCxRQUFBbzNCLGlGQ25CTyxJQUFNRSx1Q0FBcUMscUNBQ3JDQyx1Q0FBcUMscUNBQ3JDQyx1Q0FBcUMscUNBR3JDQyxxQ0FBcUMsV0FBa0IsSUFBakJ4cUIsRUFBaUJqTCxVQUFBQyxPQUFBLFFBQUE4QixJQUFBL0IsVUFBQSxHQUFBQSxVQUFBLE1BQ2hFLE9BQ0k0SSxLQUFNMHNCLEVBQ05ycUIsU0FDSXlxQixJQUFLenFCLEVBQVF5cUIsT0FLWkMscUNBQXFDLFdBQWtCLElBQWpCMXFCLEVBQWlCakwsVUFBQUMsT0FBQSxRQUFBOEIsSUFBQS9CLFVBQUEsR0FBQUEsVUFBQSxNQUNoRSxPQUNJNEksS0FBTTJzQixFQUNOdHFCLFNBQ0l2SyxHQUFJdUssRUFBUXZLLE1BS1hrMUIscUNBQXFDLFdBQWtCLElBQWpCM3FCLEVBQWlCakwsVUFBQUMsT0FBQSxRQUFBOEIsSUFBQS9CLFVBQUEsR0FBQUEsVUFBQSxNQUNoRSxPQUNJNEksS0FBTTRzQixFQUNOdnFCLFNBQ0l5cUIsSUFBS3pxQixFQUFReXFCLHNGQzNCbEIsSUFBTUcsaUNBQWlDLCtCQUNqQ0MsOEJBQWlDLDRCQUVqQ0MsbUNBQWlDLGlDQUNqQ0Msc0NBQW9DLG9DQUdwQ0MsK0JBQStCLFdBQWtCajJCLFVBQUFDLE9BQUEsUUFBQThCLElBQUEvQixVQUFBLElBQUFBLFVBQUEsR0FDMUQsT0FDSTRJLEtBQU1pdEIsRUFDTjVxQixTQUNJdkssR0FBTyxLQUNQa0ksS0FBTyxHQUNQNnJCLE1BQU8sR0FDUEMsR0FBTyxLQUtOd0IsNEJBQTRCLFdBQWtCLElBQWpCanJCLEVBQWlCakwsVUFBQUMsT0FBQSxRQUFBOEIsSUFBQS9CLFVBQUEsR0FBQUEsVUFBQSxNQUN2RCxPQUNJNEksS0FBTWt0QixFQUNON3FCLFNBQ0l2SyxHQUFPdUssRUFBUXZLLEdBQ2ZrSSxLQUFPcUMsRUFBUXJDLEtBQ2Y2ckIsTUFBT3hwQixFQUFRd3BCLE1BQ2ZDLEdBQU96cEIsRUFBUXlwQixNQUtkeUIsaUNBQWlDLFdBQWtCLElBQWpCbHJCLEVBQWlCakwsVUFBQUMsT0FBQSxRQUFBOEIsSUFBQS9CLFVBQUEsR0FBQUEsVUFBQSxNQUM1RCxPQUNJNEksS0FBTW10QixFQUNOOXFCLFNBQ0l2SyxHQUFJdUssRUFBUXZLLEdBQ1ppZSxHQUFJMVQsRUFBUTBULEdBQ1pDLEdBQUkzVCxFQUFRMlQsR0FDWkMsR0FBSTVULEVBQVE0VCxHQUNaQyxHQUFJN1QsRUFBUTZULE1BS1hzWCxvQ0FBb0MsV0FBa0IsSUFBakJuckIsRUFBaUJqTCxVQUFBQyxPQUFBLFFBQUE4QixJQUFBL0IsVUFBQSxHQUFBQSxVQUFBLE1BQy9ELE9BQ0k0SSxLQUFNb3RCLEVBQ04vcUIsU0FDSXZLLEdBQUl1SyxFQUFRdkssR0FDWmllLEdBQUkxVCxFQUFRMFQsR0FDWkMsR0FBSTNULEVBQVEyVCxHQUNaQyxHQUFJNVQsRUFBUTRULEdBQ1pDLEdBQUk3VCxFQUFRNlQscUZDaERYdFQsVUFDVDZxQixVQUFXLFNBQUNuM0IsR0FDUixHQUFhLElBQVRBLEVBQ0EsTUFBTyxHQUdYLElBQUlvM0IsRUFBTUMsU0FBU3IzQixFQUFPLElBQzFCLE9BQUk2akIsTUFBTXVULEdBQ0MsR0FHSkEsa0NDYmYsSUFBQTN0QixFQUFBN0ssRUFBQSxHQUNBd2pCLEVBQUF4akIsRUFBQSxJQUNBMEosRUFBQTFKLEVBQUEsSUFDQTA0QixFQUFBMTRCLEVBQUEsSUFFQUcsRUFBQUQsUUFBQSxTQUFBeTRCLEdBQ0E5dEIsSUFBQVUsRUFBQW90QixHQUFrQ3R5QixLQUFBLFNBQUFqRSxHQUNsQyxJQUNBZ3BCLEVBQUF3TixFQUFBdjNCLEVBQUFnZSxFQURBd1osRUFBQTMyQixVQUFBLEdBS0EsT0FIQXNoQixFQUFBdlEsT0FDQW1ZLE9BQUFubkIsSUFBQTQwQixJQUNBclYsRUFBQXFWLFFBQ0E1MEIsR0FBQTdCLEVBQUEsSUFBQTZRLE1BQ0EybEIsS0FDQXhOLEdBQ0EvcEIsRUFBQSxFQUNBZ2UsRUFBQTNWLEVBQUFtdkIsRUFBQTMyQixVQUFBLE1BQ0F3MkIsRUFBQXQyQixHQUFBLFdBQUEwMkIsR0FDQUYsRUFBQTl4QixLQUFBdVksRUFBQXlaLEVBQUF6M0IsU0FHQXEzQixFQUFBdDJCLEdBQUEsRUFBQXcyQixFQUFBOXhCLEtBQUE4eEIsR0FFQSxJQUFBM2xCLEtBQUEybEIsc0NDdkJBLElBQUEvdEIsRUFBQTdLLEVBQUEsR0FFQUcsRUFBQUQsUUFBQSxTQUFBeTRCLEdBQ0E5dEIsSUFBQVUsRUFBQW90QixHQUFrQzVKLEdBQUEsV0FHbEMsSUFGQSxJQUFBNXNCLEVBQUFELFVBQUFDLE9BQ0F5MkIsRUFBQSxJQUFBcjBCLE1BQUFwQyxHQUNBQSxLQUFBeTJCLEVBQUF6MkIsR0FBQUQsVUFBQUMsR0FDQSxXQUFBOFEsS0FBQTJsQixxQ0NQQXo0QixFQUFBRCxRQUFBRixFQUFBLE1BQUFBLEVBQUEsRUFBQUEsQ0FBQSxXQUNBLElBQUErNEIsRUFBQWhvQixLQUFBdWpCLFNBR0EwRSxpQkFBQXo0QixLQUFBLEtBQUF3NEIsRUFBQSxxQkFDQS80QixFQUFBLEdBQUErNEIsc0JDUUEsSUFmQSxJQVNBRSxFQVRBeHVCLEVBQUF6SyxFQUFBLEdBQ0EySyxFQUFBM0ssRUFBQSxJQUNBaUksRUFBQWpJLEVBQUEsSUFDQThwQixFQUFBN2hCLEVBQUEsZUFDQThoQixFQUFBOWhCLEVBQUEsUUFDQStsQixLQUFBdmpCLEVBQUFpZCxjQUFBamQsRUFBQW1kLFVBQ0FnQyxFQUFBb0UsRUFDQTV0QixFQUFBLEVBSUE4NEIsRUFBQSxpSEFFQTVXLE1BQUEsS0FFQWxpQixFQVBBLElBUUE2NEIsRUFBQXh1QixFQUFBeXVCLEVBQUE5NEIsUUFDQXVLLEVBQUFzdUIsRUFBQXgzQixVQUFBcW9CLEdBQUEsR0FDQW5mLEVBQUFzdUIsRUFBQXgzQixVQUFBc29CLEdBQUEsSUFDR0gsR0FBQSxFQUdIenBCLEVBQUFELFNBQ0E4dEIsTUFDQXBFLFNBQ0FFLFFBQ0FDLHNDQ3pCQSxJQUFBdGYsRUFBQXpLLEVBQUEsR0FDQTZLLEVBQUE3SyxFQUFBLEdBQ0E0SyxFQUFBNUssRUFBQSxJQUNBbW1CLEVBQUFubUIsRUFBQSxJQUNBd3dCLEVBQUF4d0IsRUFBQSxJQUNBMDRCLEVBQUExNEIsRUFBQSxJQUNBaW1CLEVBQUFqbUIsRUFBQSxJQUNBNlEsRUFBQTdRLEVBQUEsR0FDQTRoQixFQUFBNWhCLEVBQUEsR0FDQWduQixFQUFBaG5CLEVBQUEsSUFDQW01QixFQUFBbjVCLEVBQUEsSUFDQW81QixFQUFBcDVCLEVBQUEsS0FFQUcsRUFBQUQsUUFBQSxTQUFBaWlCLEVBQUFxTCxFQUFBNkwsRUFBQUMsRUFBQWpWLEVBQUFrVixHQUNBLElBQUExTCxFQUFBcGpCLEVBQUEwWCxHQUNBc0ksRUFBQW9ELEVBQ0EyTCxFQUFBblYsRUFBQSxZQUNBb0gsRUFBQWhCLEtBQUFocEIsVUFDQWtRLEtBQ0E4bkIsRUFBQSxTQUFBM1UsR0FDQSxJQUFBNWIsRUFBQXVpQixFQUFBM0csR0FDQWxhLEVBQUE2Z0IsRUFBQTNHLEVBQ0EsVUFBQUEsRUFBQSxTQUFBalQsR0FDQSxRQUFBMG5CLElBQUExb0IsRUFBQWdCLEtBQUEzSSxFQUFBM0ksS0FBQTBTLEtBQUEsSUFBQXBCLEVBQUEsRUFBQUEsSUFDTyxPQUFBaVQsRUFBQSxTQUFBalQsR0FDUCxRQUFBMG5CLElBQUExb0IsRUFBQWdCLEtBQUEzSSxFQUFBM0ksS0FBQTBTLEtBQUEsSUFBQXBCLEVBQUEsRUFBQUEsSUFDTyxPQUFBaVQsRUFBQSxTQUFBalQsR0FDUCxPQUFBMG5CLElBQUExb0IsRUFBQWdCLFFBQUE1TixFQUFBaUYsRUFBQTNJLEtBQUEwUyxLQUFBLElBQUFwQixFQUFBLEVBQUFBLElBQ08sT0FBQWlULEVBQUEsU0FBQWpULEdBQW1FLE9BQWhDM0ksRUFBQTNJLEtBQUEwUyxLQUFBLElBQUFwQixFQUFBLEVBQUFBLEdBQWdDb0IsTUFDMUUsU0FBQXBCLEVBQUFoSyxHQUFpRSxPQUFuQ3FCLEVBQUEzSSxLQUFBMFMsS0FBQSxJQUFBcEIsRUFBQSxFQUFBQSxFQUFBaEssR0FBbUNvTCxRQUdqRSxzQkFBQXdYLElBQUE4TyxHQUFBOU4sRUFBQWxoQixVQUFBcVgsRUFBQSxZQUNBLElBQUE2SSxHQUFBaEMsVUFBQTdqQixVQU1HLENBQ0gsSUFBQWtPLEVBQUEsSUFBQTJYLEVBRUFpUCxFQUFBNW1CLEVBQUEwbUIsR0FBQUQsTUFBcUQsTUFBQXptQixFQUVyRDZtQixFQUFBL1gsRUFBQSxXQUFrRDlPLEVBQUF5UCxJQUFBLEtBRWxEcVgsRUFBQTVTLEVBQUEsU0FBQTJILEdBQXdELElBQUFsRSxFQUFBa0UsS0FFeERrTCxHQUFBTixHQUFBM1gsRUFBQSxXQUlBLElBRkEsSUFBQWtZLEVBQUEsSUFBQXJQLEVBQ0F2a0IsRUFBQSxFQUNBQSxLQUFBNHpCLEVBQUFOLEdBQUF0ekIsS0FDQSxPQUFBNHpCLEVBQUF2WCxLQUFBLEtBRUFxWCxLQUNBblAsRUFBQStDLEVBQUEsU0FBQXZyQixFQUFBNkMsR0FDQW1oQixFQUFBaGtCLEVBQUF3b0IsRUFBQXRJLEdBQ0EsSUFBQXNCLEVBQUEyVixFQUFBLElBQUF2TCxFQUFBNXJCLEVBQUF3b0IsR0FFQSxZQURBeG1CLEdBQUFhLEdBQUE0ekIsRUFBQTV6QixFQUFBdWYsRUFBQVosRUFBQStWLEdBQUEvVixHQUNBQSxLQUVBaGlCLFVBQUFncUIsRUFDQUEsRUFBQS9vQixZQUFBK25CLElBRUFrUCxHQUFBRSxLQUNBSixFQUFBLFVBQ0FBLEVBQUEsT0FDQXBWLEdBQUFvVixFQUFBLFNBRUFJLEdBQUFILElBQUFELEVBQUFELEdBRUFELEdBQUE5TixFQUFBdlcsY0FBQXVXLEVBQUF2VyxXQXBDQXVWLEVBQUE2TyxFQUFBUyxlQUFBdk0sRUFBQXJMLEVBQUFrQyxFQUFBbVYsR0FDQXJULEVBQUFzRSxFQUFBaHBCLFVBQUE0M0IsR0FDQTdJLEVBQUFDLE1BQUEsRUE0Q0EsT0FQQTBJLEVBQUExTyxFQUFBdEksR0FFQXhRLEVBQUF3USxHQUFBc0ksRUFDQTVmLElBQUFRLEVBQUFSLEVBQUFrQixFQUFBbEIsRUFBQU0sR0FBQXNmLEdBQUFvRCxHQUFBbGMsR0FFQTRuQixHQUFBRCxFQUFBVSxVQUFBdlAsRUFBQXRJLEVBQUFrQyxHQUVBb0csb0JDbkZBLElBQ0F3UCxFQURBajZCLEVBQUEsR0FDQWk2QixVQUVBOTVCLEVBQUFELFFBQUErNUIsS0FBQUMsV0FBQSxvQkNGQSxJQUFBM29CLEVBQUF2UixFQUFBLEdBQ0F3akIsRUFBQXhqQixFQUFBLElBQ0FrekIsRUFBQWx6QixFQUFBLEVBQUFBLENBQUEsV0FDQUcsRUFBQUQsUUFBQSxTQUFBeVIsRUFBQXdvQixHQUNBLElBQ0E1dUIsRUFEQWtmLEVBQUFsWixFQUFBSSxHQUFBalAsWUFFQSxZQUFBdUIsSUFBQXdtQixRQUFBeG1CLElBQUFzSCxFQUFBZ0csRUFBQWtaLEdBQUF5SSxJQUFBaUgsRUFBQTNXLEVBQUFqWSxrQ0NOQSxJQUFBWixFQUFBM0ssRUFBQSxJQUNBNEssRUFBQTVLLEVBQUEsSUFDQTRoQixFQUFBNWhCLEVBQUEsR0FDQXFlLEVBQUFyZSxFQUFBLElBQ0EwbUIsRUFBQTFtQixFQUFBLEdBRUFHLEVBQUFELFFBQUEsU0FBQTRrQixFQUFBM2lCLEVBQUErTyxHQUNBLElBQUFrcEIsRUFBQTFULEVBQUE1QixHQUNBdVYsRUFBQW5wQixFQUFBbU4sRUFBQStiLEVBQUEsR0FBQXRWLElBQ0F3VixFQUFBRCxFQUFBLEdBQ0FFLEVBQUFGLEVBQUEsR0FDQXpZLEVBQUEsV0FDQSxJQUFBalEsS0FFQSxPQURBQSxFQUFBeW9CLEdBQUEsV0FBNkIsVUFDN0IsTUFBQXRWLEdBQUFuVCxPQUVBL0csRUFBQThDLE9BQUFqTSxVQUFBcWpCLEVBQUF3VixHQUNBM3ZCLEVBQUFpcUIsT0FBQW56QixVQUFBMjRCLEVBQUEsR0FBQWo0QixFQUdBLFNBQUFrQyxFQUFBK0YsR0FBZ0MsT0FBQW13QixFQUFBaDZCLEtBQUE4RCxFQUFBNE8sS0FBQTdJLElBR2hDLFNBQUEvRixHQUEyQixPQUFBazJCLEVBQUFoNkIsS0FBQThELEVBQUE0Tyx3Q0N0QjNCLElBQUExQixFQUFBdlIsRUFBQSxHQUNBRyxFQUFBRCxRQUFBLFdBQ0EsSUFBQXVqQixFQUFBbFMsRUFBQTBCLE1BQ0F0TCxFQUFBLEdBTUEsT0FMQThiLEVBQUFoWixTQUFBOUMsR0FBQSxLQUNBOGIsRUFBQStXLGFBQUE3eUIsR0FBQSxLQUNBOGIsRUFBQWdYLFlBQUE5eUIsR0FBQSxLQUNBOGIsRUFBQWlYLFVBQUEveUIsR0FBQSxLQUNBOGIsRUFBQWtYLFNBQUFoekIsR0FBQSxLQUNBQSxvQkNYQSxJQUFBNGhCLEVBQUF2cEIsRUFBQSxFQUFBQSxDQUFBLFlBQ0E0NkIsR0FBQSxFQUVBLElBQ0EsSUFBQUMsR0FBQSxHQUFBdFIsS0FDQXNSLEVBQUEsa0JBQWlDRCxHQUFBLEdBRWpDcjJCLE1BQUE4QixLQUFBdzBCLEVBQUEsV0FBaUMsVUFDaEMsTUFBQTd5QixJQUVEN0gsRUFBQUQsUUFBQSxTQUFBZ1IsRUFBQTRwQixHQUNBLElBQUFBLElBQUFGLEVBQUEsU0FDQSxJQUFBaFksR0FBQSxFQUNBLElBQ0EsSUFBQXRjLEdBQUEsR0FDQXFvQixFQUFBcm9CLEVBQUFpakIsS0FDQW9GLEVBQUEvcEIsS0FBQSxXQUE2QixPQUFTMkQsS0FBQXFhLEdBQUEsSUFDdEN0YyxFQUFBaWpCLEdBQUEsV0FBaUMsT0FBQW9GLEdBQ2pDemQsRUFBQTVLLEdBQ0csTUFBQTBCLElBQ0gsT0FBQTRhLG9CQ25CQSxJQUFBL1IsRUFBQTdRLEVBQUEsR0FDQWczQixFQUFBaDNCLEVBQUEsSUFDQStDLEVBQUEvQyxFQUFBLEVBQUFBLENBQUEsU0FDQUcsRUFBQUQsUUFBQSxTQUFBeUUsR0FDQSxJQUFBbzJCLEVBQ0EsT0FBQWxxQixFQUFBbE0sVUFBQVYsS0FBQTgyQixFQUFBcDJCLEVBQUE1QixNQUFBZzRCLEVBQUEsVUFBQS9ELEVBQUFyeUIsc0JDTEEsSUFBQXF5QixFQUFBaDNCLEVBQUEsSUFDQUcsRUFBQUQsUUFBQXFFLE1BQUFDLFNBQUEsU0FBQTRGLEdBQ0EsZUFBQTRzQixFQUFBNXNCLG1CQ0hBbEssRUFBQWlFLEVBQUFyRCxPQUFBazZCLHVDQ0VBLElBQUE3WCxFQUFBbmpCLEVBQUEsSUFDQWlrQixFQUFBamtCLEVBQUEsR0FDQXFtQixFQUFBcm1CLEVBQUEsSUFDQUcsRUFBQUQsUUFBQSxTQUFBKzZCLEdBQ0EsZ0JBQUF0VyxFQUFBdVcsRUFBQUMsR0FDQSxJQUdBLzVCLEVBSEF1USxFQUFBd1IsRUFBQXdCLEdBQ0F4aUIsRUFBQThoQixFQUFBdFMsRUFBQXhQLFFBQ0ErRCxFQUFBbWdCLEVBQUE4VSxFQUFBaDVCLEdBSUEsR0FBQTg0QixHQUFBQyxNQUFBLEtBQUEvNEIsRUFBQStELEdBR0EsSUFGQTlFLEVBQUF1USxFQUFBekwsT0FFQTlFLEVBQUEsY0FFSyxLQUFZZSxFQUFBK0QsRUFBZUEsSUFBQSxJQUFBKzBCLEdBQUEvMEIsS0FBQXlMLElBQ2hDQSxFQUFBekwsS0FBQWcxQixFQUFBLE9BQUFELEdBQUEvMEIsR0FBQSxFQUNLLE9BQUErMEIsSUFBQSxxQkNwQkwsSUFBQXZ3QixFQUFBMUssRUFBQSxJQUNBeUssRUFBQXpLLEVBQUEsR0FFQW1SLEVBQUExRyxFQURBLHdCQUNBQSxFQURBLDJCQUdBdEssRUFBQUQsUUFBQSxTQUFBbUMsRUFBQWpCLEdBQ0EsT0FBQStQLEVBQUE5TyxLQUFBOE8sRUFBQTlPLFFBQUE0QixJQUFBN0MsVUFDQyxlQUFBMEYsTUFDRDBQLFFBQUE5TCxFQUFBOEwsUUFDQTRrQixLQUFBcDdCLEVBQUEsb0JBQ0FxN0IsVUFBQSx1RUNzQ0FsN0IsRUFBQUQsUUE1QkEsU0FBQW83QixFQUFBQyxFQUFBMXBCLEVBQUFoSyxFQUFBcEgsRUFBQUMsRUFBQXNILEVBQUE3RCxHQU9BLElBQUFtM0IsRUFBQSxDQUNBLElBQUE1M0IsRUFDQSxRQUFBTyxJQUFBczNCLEVBQ0E3M0IsRUFBQSxJQUFBRSxNQUNBLHFJQUdLLENBQ0wsSUFBQW9HLEdBQUE2SCxFQUFBaEssRUFBQXBILEVBQUFDLEVBQUFzSCxFQUFBN0QsR0FDQXEzQixFQUFBLEdBQ0E5M0IsRUFBQSxJQUFBRSxNQUNBMjNCLEVBQUFyWixRQUFBLGlCQUEwQyxPQUFBbFksRUFBQXd4QixTQUUxQzc2QixLQUFBLHNCQUlBLE1BREErQyxFQUFBKzNCLFlBQUEsRUFDQS8zQiwwZkN4Q2FnNEIsVUFrQlRDLGlCQUFrQixTQUFDQyxHQUlmLElBSEEsSUFBSUMsS0FDQUMsU0FFSzE3QixFQUFJLEVBQUdBLEVBQUl3N0IsRUFBSXo1QixPQUFRL0IsSUFDNUIwN0IsR0FDSUMsS0FBTUgsRUFBSUksT0FBTzU3QixFQUFHLEdBQ3BCNjdCLE9BQVEsRUFDUkMsT0FBUSxFQUNSQyxLQUFNLEdBR1ZOLEVBQVcvMEIsS0FBS2cxQixHQUdwQixPQUFPRCxHQXNCWE8sMEJBQTJCLFNBQ3ZCQyxFQUNBMVEsRUFDQTJRLEVBQ0FDLEVBQ0FDLEVBQ0FDLEdBRUEsSUFBSUMsRUFBVSxFQUNWQyxTQUVKRCxHQUFXSCxFQUVYLElBQUluOEIsU0FDQThGLFNBQ0EwMkIsRUFBWSxFQUVoQixJQUFLeDhCLEVBQUl1ckIsRUFBT3ZyQixFQUFJaThCLEVBQVdsNkIsT0FBUS9CLElBQUssQ0FReEMsR0FBS3M4QixHQUxEQyxFQUR3QixHQUF4Qk4sRUFBV2o4QixHQUFHNjdCLE9BQ1BRLEVBRUFKLEVBQVdqOEIsR0FBRzY3QixRQUdESyxFQUFhRSxFQUFZLENBSW5CLE1BQXRCSCxFQUFXajhCLEdBQUcyN0IsT0FDVjM3QixHQUFLdXJCLEdBSUx2ckIsS0FHUnc4QixFQUFZLEVBQ1osTUFJSixHQUEwQixNQUF0QlAsRUFBV2o4QixHQUFHMjdCLEtBQWMsQ0FDNUIzN0IsSUFDQXc4QixFQUFZLEVBQ1osTUFHSkYsR0FBV0MsRUFZZixPQVRJdjhCLEdBQUt1ckIsRUFDTHpsQixHQUFTLEdBRUw5RixHQUFLaThCLEVBQVdsNkIsU0FDaEJ5NkIsRUFBWSxHQUVoQjEyQixFQUFROUYsRUFBSSxJQUdSOEYsRUFBTzAyQixJQW9CbkJDLGFBQWMsU0FDVlIsRUFDQVMsRUFDQUMsRUFDQVQsRUFDQUMsRUFDQUMsRUFDQUMsR0FPQSxJQUpBLElBQU1PLEVBQVdWLEdBQWNDLEVBQVlDLEdBR3ZDUyxFQUFTLEVBQ0o3OEIsRUFBSTA4QixFQUFTMThCLEdBQUsyOEIsRUFBUzM4QixJQUNOLE1BQXRCaThCLEVBQVdqOEIsR0FBRzI3QixNQUNka0IsSUFPUixJQUZBLElBQUlDLEVBQVUsRUFDVlAsU0FDS3Y4QixFQUFJMDhCLEVBQVMxOEIsR0FBSzI4QixFQUFTMzhCLElBRTVCdThCLEVBRHdCLEdBQXhCTixFQUFXajhCLEdBQUc2N0IsT0FDUFEsRUFFQUosRUFBV2o4QixHQUFHNjdCLE9BR0MsTUFBdEJJLEVBQVdqOEIsR0FBRzI3QixPQUNkbUIsR0FBV1AsR0FLbkIsSUFDTVEsR0FEUUgsRUFBV0UsSUFDREQsRUFBUyxHQUc3QkcsS0FDQVYsRUFBVSxFQUNkQSxHQUFXSCxFQUNYLElBQUssSUFBSW44QixFQUFJMDhCLEVBQVMxOEIsR0FBSzI4QixFQUFTMzhCLElBQ04sTUFBdEJpOEIsRUFBV2o4QixHQUFHMjdCLE1BTWRZLEVBRHdCLEdBQXhCTixFQUFXajhCLEdBQUc2N0IsT0FDUFEsRUFFQUosRUFBV2o4QixHQUFHNjdCLE9BR3pCbUIsRUFBVXQyQixLQUFLNDFCLEVBQVdDLEVBQU8sR0FFakNELEdBQVdDLEVBQ1hELEdBQVdTLEdBYlBDLEVBQVV0MkIsS0FBSyxHQWdCdkIsT0FBT3MyQixHQWtCWEMsdUJBQXdCLFNBQ3BCaEIsRUFDQVMsRUFDQUMsRUFDQVIsRUFDQUUsR0FJQSxJQURBLElBQ1NyOEIsRUFBSTA4QixFQUFTMThCLEdBQUsyOEIsRUFBUzM4QixJQUNOLE1BQXRCaThCLEVBQVdqOEIsR0FBRzI3QixNQUNma0IsRUFLUCxJQUFJRyxLQUNBVixFQUFVLEVBQ2RBLEdBQVdILEVBQ1gsSUFBSyxJQUFJbjhCLEVBQUkwOEIsRUFBUzE4QixHQUFLMjhCLEVBQVMzOEIsSUFDaEMsR0FBMEIsTUFBdEJpOEIsRUFBV2o4QixHQUFHMjdCLEtBQWxCLENBS0EsSUFBSVksU0FFQUEsRUFEd0IsR0FBeEJOLEVBQVdqOEIsR0FBRzY3QixPQUNQUSxFQUVBSixFQUFXajhCLEdBQUc2N0IsT0FHekJtQixFQUFVdDJCLEtBQUs0MUIsRUFBV0MsRUFBTyxHQUVqQ0QsR0FBV0MsT0FiUFMsRUFBVXQyQixLQUFLLEdBZ0J2QixPQUFPczJCLEdBMEJYRSxrQkFBbUIsU0FDZmpCLEVBQ0ExUSxFQUNBMlEsRUFDQUMsRUFDQUMsRUFDQUMsR0FFQSxJQUFJYyxLQUNBQyxLQUVKLEdBQUluQixFQUFXbDZCLFFBQVUsRUFDckIsT0FBT283QixFQUdYLE9BQVUsS0FBQUUsRUFFaUIvQixFQUFLVSwwQkFDeEJDLEVBQ0ExUSxFQUNBMlEsRUFDQUMsRUFDQUMsRUFDQUMsR0FSRWlCLEVBQUFDLEVBQUFGLEVBQUEsR0FFRC9RLEVBRkNnUixFQUFBLEdBRUlkLEVBRkpjLEVBQUEsR0FZTixJQUFZLEdBQVJoUixFQUNBLE1BV0osR0FSQThRLEdBQ0k1N0IsRUFBRytwQixFQUNIM2pCLEVBQUcwa0IsRUFDSGtRLFVBQVdBLEdBRWZXLEVBQVN6MkIsS0FBSzAyQixHQUdWOVEsR0FBTzJQLEVBQVdsNkIsT0FBUyxFQUMzQixNQUdKd3BCLEVBQVFlLEVBQU0sRUFHbEIsT0FBTzZRLEdBZVhLLGdCQUFpQixTQUNidkIsRUFDQVMsRUFDQUMsRUFDQU4sR0FLQSxJQUhBLElBQUlySSxFQUFNLEVBQ051SSxTQUVLdjhCLEVBQUkwOEIsRUFBUzE4QixHQUFLMjhCLEVBQVMzOEIsSUFPNUJnMEIsR0FMQXVJLEVBRHdCLEdBQXhCTixFQUFXajhCLEdBQUc4N0IsT0FDUE8sRUFFQUosRUFBV2o4QixHQUFHODdCLFVBSXJCOUgsRUFBTXVJLEdBSWQsT0FBT3ZJLEdBc0JYeUosZUFBZ0IsU0FDWnhCLEVBQ0ExUSxFQUNBMlEsRUFDQXdCLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0F6QixFQUNBMEIsR0FFQSxJQUFJZixLQUNBZ0IsRUFBWSxFQUdWQyxFQUFjM0MsRUFBSzRCLGtCQUNyQmpCLEVBQ0ExUSxFQUNBMlEsRUFDQXlCLEVBQ0FDLEVBQ0F2QixHQUdBQyxFQUFVLEVBQ2RBLEdBQVd1QixFQUNYLElBQUssSUFBSTc5QixFQUFJLEVBQUdBLEVBQUlpK0IsRUFBWWw4QixVQVN2QnU2QixHQVBMMEIsRUFBWTFDLEVBQUtrQyxnQkFDYnZCLEVBQ0FnQyxFQUFZaitCLEdBQUd3QixFQUNmeThCLEVBQVlqK0IsR0FBRzRILEVBQ2Z5MEIsSUFHeUJxQixFQUFhSSxHQVROOTlCLElBYXBDZzlCLEVBQVV0MkIsS0FBSzQxQixFQUFXMEIsRUFBWSxHQUV0QzFCLEdBQVcwQixFQUNYMUIsR0FBV3lCLEVBR2YsT0FBT2YsR0ErQlhrQixvQkFBcUIsU0FDakJqQyxFQUNBMVEsRUFDQTJRLEVBQ0F3QixFQUNBQyxFQUNBQyxFQUNBQyxFQUNBQyxFQUNBakMsRUFDQUMsRUFDQWlDLEdBRUEsSUFBSWYsS0FHRW1CLEVBQWlCN0MsRUFBSzRCLGtCQUN4QmpCLEVBQ0ExUSxFQUNBMlEsRUFDQXlCLEVBQ0FDLEVBQ0EvQixHQUlFdUMsRUFBYzlDLEVBQUttQyxlQUNyQnhCLEVBQ0ExUSxFQUNBMlEsRUFDQXdCLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FoQyxFQUNBaUMsR0FHQU0sU0FFQW5ILFNBQUdvSCxTQUNQLElBQUtwSCxFQUFJLEVBQUdBLEVBQUlrSCxFQUFZcjhCLE9BQVFtMUIsSUFxQmhDLElBbkJJbUgsRUFEK0IsR0FBL0JGLEVBQWVqSCxHQUFHc0YsVUFDTmxCLEVBQUttQixhQUNiUixFQUNBa0MsRUFBZWpILEdBQUcxMUIsRUFDbEIyOEIsRUFBZWpILEdBQUd0dkIsRUFDbEJzMEIsRUFDQXlCLEVBQ0FDLEVBQ0EvQixHQUdRUCxFQUFLMkIsdUJBQ2JoQixFQUNBa0MsRUFBZWpILEdBQUcxMUIsRUFDbEIyOEIsRUFBZWpILEdBQUd0dkIsRUFDbEIrMUIsRUFDQTlCLEdBSUh5QyxFQUFJLEVBQUdBLEVBQUlELEVBQVV0OEIsT0FBUXU4QixJQUM5QnRCLEVBQVV0MkIsTUFBTTIzQixFQUFVQyxHQUFJRixFQUFZbEgsS0FZbEQsT0FBUThGLEVBTko5RixHQUFLLEdBQ1EsRUFFRGlILEVBQWVqSCxFQUFJLEdBQUd0dkIsSUEyQjFDMjJCLGNBQWUsU0FDWHZCLEVBQ0FmLEVBQ0ExUSxHQU9BLElBTEEsSUFBSWlULEtBQ0FuOEIsS0FFQW84QixFQUFTbFQsRUFFSnZyQixFQUFJLEVBQUdBLEVBQUlnOUIsRUFBVWo3QixPQUFRL0IsSUFDbENxQyxHQUNJczVCLEtBQU1NLEVBQVd3QyxHQUFROUMsS0FDekJFLE9BQVFJLEVBQVd3QyxHQUFRNUMsT0FDM0JDLE9BQVFHLEVBQVd3QyxHQUFRM0MsT0FDM0J3QyxFQUFHdEIsRUFBVWg5QixHQUFHLEdBQ2hCazNCLEVBQUc4RixFQUFVaDlCLEdBQUcsSUFHcEJ3K0IsRUFBVzkzQixLQUFLckUsR0FFaEJvOEIsSUFHSixPQUFPRCxtRkMxa0JSLElBQU1FLDhCQUE0Qiw0QkFDNUJDLHdCQUFzQixzQkFHdEJDLDRCQUE0QixXQUFrQixJQUFqQjd4QixFQUFpQmpMLFVBQUFDLE9BQUEsUUFBQThCLElBQUEvQixVQUFBLEdBQUFBLFVBQUEsTUFDdkQsT0FDSTRJLEtBQU1nMEIsRUFDTjN4QixTQUNJOHhCLE9BQVE5eEIsRUFBUTh4QixPQUNoQk4sY0FBZ0J4eEIsRUFBUXd4QixpQkFLdkJPLHNCQUFzQixXQUFrQixJQUFqQi94QixFQUFpQmpMLFVBQUFDLE9BQUEsUUFBQThCLElBQUEvQixVQUFBLEdBQUFBLFVBQUEsTUFDakQsT0FDSTRJLEtBQU1pMEIsRUFDTjV4QixTQUNJd3BCLE1BQU94cEIsRUFBUXdwQiw0Z0JDbEIzQndJLEVBQUFuL0IsRUFBQSxLQU1hby9CLFNBV1RDLE9BQVEsU0FBQ0MsRUFBTTE4QixHQUdYLElBRkEsSUFBSWcxQixFQUFNLEdBRUR4M0IsRUFBSSxFQUFHQSxFQUFJay9CLEVBQUtuOUIsT0FBUS9CLElBQzdCLEdBQUlrL0IsRUFBS2wvQixHQUFHd0MsSUFBTUEsRUFBSSxDQUNsQmcxQixFQUFNMEgsRUFBS2wvQixHQUNYLE1BSVIsT0FBT3czQixHQWFYMkgsY0FBZSxTQUFDRCxFQUFNMThCLEdBSWxCLElBSEEsSUFBSSt6QixFQUFRLEdBQ1JDLEdBQU0sRUFFRHgyQixFQUFJLEVBQUdBLEVBQUlrL0IsRUFBS245QixPQUFRL0IsSUFDN0IsR0FBSWsvQixFQUFLbC9CLEdBQUd3QyxJQUFNQSxFQUFJLENBQ2xCK3pCLEVBQVEySSxFQUFLbC9CLEdBQUd1MkIsTUFDaEJDLEVBQUswSSxFQUFLbC9CLEdBQUd3MkIsR0FDYixNQUlSLE9BQVFELEVBQU9DLElBWW5CNEksWUFBYSxTQUFDRixHQUdWLElBRkEsSUFBSUcsS0FFS3IvQixFQUFJLEVBQUdBLEVBQUlrL0IsRUFBS245QixPQUFRL0IsSUFDN0JxL0IsRUFBTUMsV0FBU0MsZUFBZUYsRUFBS0gsRUFBS2wvQixHQUFHdTJCLE9BRy9DLE9BQU84SSxHQWFYRyxjQUFlLFNBQUNOLEVBQU0zSSxHQUdsQixJQUZBLElBQUk4SSxLQUVLci9CLEVBQUksRUFBR0EsRUFBSWsvQixFQUFLbjlCLE9BQVEvQixJQUN6QmsvQixFQUFLbC9CLEdBQUd1MkIsT0FBU0EsR0FDakI4SSxFQUFJMzRCLEtBQUt3NEIsRUFBS2wvQixHQUFHdzJCLElBTXpCLE9BRkE2SSxFQUFJdlcsS0FBSyxTQUFDclgsRUFBR2hLLEdBQUosT0FBVWdLLEVBQUloSyxJQUVoQjQzQixHQWNYSSxTQUFVLFNBQUNQLEVBQU0zSSxFQUFPQyxHQUdwQixJQUZBLElBQUloMEIsRUFBSyxHQUVBeEMsRUFBSSxFQUFHQSxFQUFJay9CLEVBQUtuOUIsT0FBUS9CLElBQzdCLEdBQUlrL0IsRUFBS2wvQixHQUFHdTJCLE9BQVNBLEdBQVMySSxFQUFLbC9CLEdBQUd3MkIsSUFBTUEsRUFBSSxDQUM1Q2gwQixFQUFLMDhCLEVBQUtsL0IsR0FBR3dDLEdBQ2IsTUFJUixPQUFPQSxHQUdYazlCLGFBQWMsU0FBQ1IsRUFBTVMsRUFBT0MsR0FLeEIsSUFKQSxJQUFJckosRUFBUSxHQUdSc0ksRUFBUyxHQUNKNytCLEVBQUksRUFBR0EsRUFBSTIvQixFQUFNNTlCLE9BQVEvQixJQUM5QixHQUFJMi9CLEVBQU0zL0IsR0FBRzQvQixVQUFZQSxFQUFVLENBQy9CZixFQUFTYyxFQUFNMy9CLEdBQUc2K0IsT0FDbEIsTUFJUixHQUFjLElBQVZBLEVBQWMsS0FBQWdCLEVBQ0FiLEVBQUlHLGNBQWNELEVBQU1MLEdBRHhCaUIsRUFBQXZDLEVBQUFzQyxFQUFBLEdBQ2J0SixFQURhdUosRUFBQSxHQUFBQSxFQUFBLEdBSWxCLE9BQU92SixrQ0N6SWYsSUFBQWxzQixFQUFBekssRUFBQSxHQUNBaXpCLEVBQUFqekIsRUFBQSxJQUNBOGxCLEVBQUE5bEIsRUFBQSxJQUNBK2xCLEVBQUEvbEIsRUFBQSxJQUNBMkssRUFBQTNLLEVBQUEsSUFDQW1tQixFQUFBbm1CLEVBQUEsSUFDQTRoQixFQUFBNWhCLEVBQUEsR0FDQWltQixFQUFBam1CLEVBQUEsSUFDQXFSLEVBQUFyUixFQUFBLElBQ0Fpa0IsRUFBQWprQixFQUFBLEdBQ0FvbUIsRUFBQXBtQixFQUFBLEtBQ0F3bUIsRUFBQXhtQixFQUFBLElBQUFtRSxFQUNBdU4sRUFBQTFSLEVBQUEsSUFBQW1FLEVBQ0EraUIsRUFBQWxuQixFQUFBLElBQ0FtNUIsRUFBQW41QixFQUFBLElBR0FtZ0MsRUFBQSxZQUVBQyxFQUFBLGVBQ0EzWSxFQUFBaGQsRUFBQSxZQUNBa2QsRUFBQWxkLEVBQUEsU0FDQXNHLEVBQUF0RyxFQUFBc0csS0FDQXVXLEVBQUE3YyxFQUFBNmMsV0FFQStZLEVBQUE1MUIsRUFBQTQxQixTQUNBQyxFQUFBN1ksRUFDQThZLEVBQUF4dkIsRUFBQXd2QixJQUNBQyxFQUFBenZCLEVBQUF5dkIsSUFDQXhiLEVBQUFqVSxFQUFBaVUsTUFDQXJoQixFQUFBb04sRUFBQXBOLElBQ0E4OEIsRUFBQTF2QixFQUFBMHZCLElBSUFDLEVBQUF6TixFQUFBLEtBSEEsU0FJQTBOLEVBQUExTixFQUFBLEtBSEEsYUFJQTJOLEVBQUEzTixFQUFBLEtBSEEsYUFNQSxTQUFBNE4sRUFBQXovQixFQUFBMC9CLEVBQUFDLEdBQ0EsSUFPQS80QixFQUFBeEgsRUFBQUMsRUFQQTJFLEVBQUEsSUFBQWIsTUFBQXc4QixHQUNBQyxFQUFBLEVBQUFELEVBQUFELEVBQUEsRUFDQUcsR0FBQSxHQUFBRCxHQUFBLEVBQ0FFLEVBQUFELEdBQUEsRUFDQUUsRUFBQSxLQUFBTCxFQUFBTixFQUFBLE9BQUFBLEVBQUEsU0FDQXBnQyxFQUFBLEVBQ0F3QixFQUFBUixFQUFBLE9BQUFBLEdBQUEsRUFBQUEsRUFBQSxNQWtDQSxLQWhDQUEsRUFBQW0vQixFQUFBbi9CLEtBRUFBLE9BQUFpL0IsR0FFQTcvQixFQUFBWSxLQUFBLElBQ0E0RyxFQUFBaTVCLElBRUFqNUIsRUFBQWdkLEVBQUFyaEIsRUFBQXZDLEdBQUFxL0IsR0FDQXIvQixHQUFBWCxFQUFBKy9CLEVBQUEsR0FBQXg0QixJQUFBLElBQ0FBLElBQ0F2SCxHQUFBLElBR0FXLEdBREE0RyxFQUFBazVCLEdBQUEsRUFDQUMsRUFBQTFnQyxFQUVBMGdDLEVBQUFYLEVBQUEsSUFBQVUsSUFFQXpnQyxHQUFBLElBQ0F1SCxJQUNBdkgsR0FBQSxHQUVBdUgsRUFBQWs1QixHQUFBRCxHQUNBemdDLEVBQUEsRUFDQXdILEVBQUFpNUIsR0FDS2o1QixFQUFBazVCLEdBQUEsR0FDTDFnQyxHQUFBWSxFQUFBWCxFQUFBLEdBQUErL0IsRUFBQSxFQUFBTSxHQUNBOTRCLEdBQUFrNUIsSUFFQTFnQyxFQUFBWSxFQUFBby9CLEVBQUEsRUFBQVUsRUFBQSxHQUFBVixFQUFBLEVBQUFNLEdBQ0E5NEIsRUFBQSxJQUdRODRCLEdBQUEsRUFBVzE3QixFQUFBaEYsS0FBQSxJQUFBSSxLQUFBLElBQUFzZ0MsR0FBQSxHQUduQixJQUZBOTRCLEtBQUE4NEIsRUFBQXRnQyxFQUNBd2dDLEdBQUFGLEVBQ1FFLEVBQUEsRUFBVTU3QixFQUFBaEYsS0FBQSxJQUFBNEgsS0FBQSxJQUFBZzVCLEdBQUEsR0FFbEIsT0FEQTU3QixJQUFBaEYsSUFBQSxJQUFBd0IsRUFDQXdELEVBRUEsU0FBQWc4QixFQUFBaDhCLEVBQUEwN0IsRUFBQUMsR0FDQSxJQU9BdmdDLEVBUEF3Z0MsRUFBQSxFQUFBRCxFQUFBRCxFQUFBLEVBQ0FHLEdBQUEsR0FBQUQsR0FBQSxFQUNBRSxFQUFBRCxHQUFBLEVBQ0FJLEVBQUFMLEVBQUEsRUFDQTVnQyxFQUFBMmdDLEVBQUEsRUFDQW4vQixFQUFBd0QsRUFBQWhGLEtBQ0E0SCxFQUFBLElBQUFwRyxFQUdBLElBREFBLElBQUEsRUFDUXkvQixFQUFBLEVBQVdyNUIsRUFBQSxJQUFBQSxFQUFBNUMsRUFBQWhGLE9BQUFpaEMsR0FBQSxHQUluQixJQUhBN2dDLEVBQUF3SCxHQUFBLElBQUFxNUIsR0FBQSxFQUNBcjVCLEtBQUFxNUIsRUFDQUEsR0FBQVAsRUFDUU8sRUFBQSxFQUFXN2dDLEVBQUEsSUFBQUEsRUFBQTRFLEVBQUFoRixPQUFBaWhDLEdBQUEsR0FDbkIsT0FBQXI1QixFQUNBQSxFQUFBLEVBQUFrNUIsTUFDRyxJQUFBbDVCLElBQUFpNUIsRUFDSCxPQUFBemdDLEVBQUE4Z0MsSUFBQTEvQixHQUFBeStCLElBRUE3L0IsR0FBQWdnQyxFQUFBLEVBQUFNLEdBQ0E5NEIsR0FBQWs1QixFQUNHLE9BQUF0L0IsR0FBQSxLQUFBcEIsRUFBQWdnQyxFQUFBLEVBQUF4NEIsRUFBQTg0QixHQUdILFNBQUFTLEVBQUFDLEdBQ0EsT0FBQUEsRUFBQSxPQUFBQSxFQUFBLE9BQUFBLEVBQUEsTUFBQUEsRUFBQSxHQUVBLFNBQUFDLEVBQUE5OEIsR0FDQSxXQUFBQSxHQUVBLFNBQUErOEIsRUFBQS84QixHQUNBLFdBQUFBLEtBQUEsT0FFQSxTQUFBZzlCLEVBQUFoOUIsR0FDQSxXQUFBQSxLQUFBLE1BQUFBLEdBQUEsT0FBQUEsR0FBQSxRQUVBLFNBQUFpOUIsRUFBQWo5QixHQUNBLE9BQUFrOEIsRUFBQWw4QixFQUFBLE1BRUEsU0FBQWs5QixFQUFBbDlCLEdBQ0EsT0FBQWs4QixFQUFBbDhCLEVBQUEsTUFHQSxTQUFBa21CLEVBQUFKLEVBQUFwb0IsRUFBQXlvQixHQUNBcFosRUFBQStZLEVBQUEwVixHQUFBOTlCLEdBQXlCbkIsSUFBQSxXQUFtQixPQUFBK1IsS0FBQTZYLE1BRzVDLFNBQUE1cEIsRUFBQTRnQyxFQUFBTixFQUFBdDdCLEVBQUE2N0IsR0FDQSxJQUNBQyxFQUFBNWIsR0FEQWxnQixHQUVBLEdBQUE4N0IsRUFBQVIsRUFBQU0sRUFBQW5CLEdBQUEsTUFBQXJaLEVBQUE4WSxHQUNBLElBQUFqdkIsRUFBQTJ3QixFQUFBcEIsR0FBQXVCLEdBQ0F0VyxFQUFBcVcsRUFBQUYsRUFBQWxCLEdBQ0FzQixFQUFBL3dCLEVBQUFnRSxNQUFBd1csSUFBQTZWLEdBQ0EsT0FBQU8sRUFBQUcsSUFBQTlWLFVBRUEsU0FBQTVHLEVBQUFzYyxFQUFBTixFQUFBdDdCLEVBQUFpOEIsRUFBQS9nQyxFQUFBMmdDLEdBQ0EsSUFDQUMsRUFBQTViLEdBREFsZ0IsR0FFQSxHQUFBODdCLEVBQUFSLEVBQUFNLEVBQUFuQixHQUFBLE1BQUFyWixFQUFBOFksR0FJQSxJQUhBLElBQUFqdkIsRUFBQTJ3QixFQUFBcEIsR0FBQXVCLEdBQ0F0VyxFQUFBcVcsRUFBQUYsRUFBQWxCLEdBQ0FzQixFQUFBQyxHQUFBL2dDLEdBQ0FoQixFQUFBLEVBQWlCQSxFQUFBb2hDLEVBQVdwaEMsSUFBQStRLEVBQUF3YSxFQUFBdnJCLEdBQUE4aEMsRUFBQUgsRUFBQTNoQyxFQUFBb2hDLEVBQUFwaEMsRUFBQSxHQUc1QixHQUFBMmxCLEVBQUFpSSxJQWdGQyxDQUNELElBQUFwTSxFQUFBLFdBQ0E2RixFQUFBLE9BQ0c3RixFQUFBLFdBQ0gsSUFBQTZGLEdBQUEsTUFDRzdGLEVBQUEsV0FJSCxPQUhBLElBQUE2RixFQUNBLElBQUFBLEVBQUEsS0FDQSxJQUFBQSxFQUFBNlosS0FwT0EsZUFxT0E3WixFQUFBOW1CLE9BQ0csQ0FNSCxJQURBLElBQ0EwQixFQURBKy9CLEdBSkEzYSxFQUFBLFNBQUF0bEIsR0FFQSxPQURBOGpCLEVBQUFoVCxLQUFBd1UsR0FDQSxJQUFBNlksRUFBQWxhLEVBQUFqa0IsTUFFQWcrQixHQUFBRyxFQUFBSCxHQUNBN3BCLEVBQUFrUSxFQUFBOFosR0FBQTVCLEVBQUEsRUFBaURwb0IsRUFBQW5VLE9BQUF1OEIsSUFDakRyOEIsRUFBQWlVLEVBQUFvb0IsUUFBQWpYLEdBQUE5YyxFQUFBOGMsRUFBQXBsQixFQUFBaStCLEVBQUFqK0IsSUFFQXlqQixJQUFBc2MsRUFBQTEvQixZQUFBK2tCLEdBR0EsSUFBQXFhLEVBQUEsSUFBQW5hLEVBQUEsSUFBQUYsRUFBQSxJQUNBNGEsRUFBQTFhLEVBQUF3WSxHQUFBbUMsUUFDQVIsRUFBQVEsUUFBQSxjQUNBUixFQUFBUSxRQUFBLGVBQ0FSLEVBQUFTLFFBQUEsSUFBQVQsRUFBQVMsUUFBQSxJQUFBcGMsRUFBQXdCLEVBQUF3WSxJQUNBbUMsUUFBQSxTQUFBMVYsRUFBQXhyQixHQUNBaWhDLEVBQUE5aEMsS0FBQTBTLEtBQUEyWixFQUFBeHJCLEdBQUEsU0FFQW9oQyxTQUFBLFNBQUE1VixFQUFBeHJCLEdBQ0FpaEMsRUFBQTloQyxLQUFBMFMsS0FBQTJaLEVBQUF4ckIsR0FBQSxXQUVHLFFBaEhIcW1CLEVBQUEsU0FBQXRsQixHQUNBOGpCLEVBQUFoVCxLQUFBd1UsRUE5SUEsZUErSUEsSUFBQStHLEVBQUFwSSxFQUFBamtCLEdBQ0E4USxLQUFBZ3ZCLEdBQUEvYSxFQUFBM21CLEtBQUEsSUFBQWdFLE1BQUFpcUIsR0FBQSxHQUNBdmIsS0FBQTB0QixHQUFBblMsR0FHQTdHLEVBQUEsU0FBQXZpQixFQUFBd25CLEVBQUE0QixHQUNBdkksRUFBQWhULEtBQUEwVSxFQXBKQSxZQXFKQTFCLEVBQUE3Z0IsRUFBQXFpQixFQXJKQSxZQXNKQSxJQUFBZ2IsRUFBQXI5QixFQUFBdTdCLEdBQ0FwVyxFQUFBbFosRUFBQXViLEdBQ0EsR0FBQXJDLEVBQUEsR0FBQUEsRUFBQWtZLEVBQUEsTUFBQW5iLEVBQUEsaUJBRUEsR0FBQWlELEdBREFpRSxPQUFBdnFCLElBQUF1cUIsRUFBQWlVLEVBQUFsWSxFQUFBdEcsRUFBQXVLLElBQ0FpVSxFQUFBLE1BQUFuYixFQXhKQSxpQkF5SkFyVSxLQUFBeXRCLEdBQUF0N0IsRUFDQTZOLEtBQUEydEIsR0FBQXJXLEVBQ0F0WCxLQUFBMHRCLEdBQUFuUyxHQUdBeUUsSUFDQXBJLEVBQUFwRCxFQWhKQSxhQWdKQSxNQUNBb0QsRUFBQWxELEVBbEpBLFNBa0pBLE1BQ0FrRCxFQUFBbEQsRUFsSkEsYUFrSkEsTUFDQWtELEVBQUFsRCxFQWxKQSxhQWtKQSxPQUdBeEIsRUFBQXdCLEVBQUF3WSxJQUNBb0MsUUFBQSxTQUFBM1YsR0FDQSxPQUFBMXJCLEVBQUErUixLQUFBLEVBQUEyWixHQUFBLFlBRUE4VixTQUFBLFNBQUE5VixHQUNBLE9BQUExckIsRUFBQStSLEtBQUEsRUFBQTJaLEdBQUEsSUFFQStWLFNBQUEsU0FBQS9WLEdBQ0EsSUFBQTRVLEVBQUF0Z0MsRUFBQStSLEtBQUEsRUFBQTJaLEVBQUExcUIsVUFBQSxJQUNBLE9BQUFzL0IsRUFBQSxNQUFBQSxFQUFBLGFBRUFvQixVQUFBLFNBQUFoVyxHQUNBLElBQUE0VSxFQUFBdGdDLEVBQUErUixLQUFBLEVBQUEyWixFQUFBMXFCLFVBQUEsSUFDQSxPQUFBcy9CLEVBQUEsTUFBQUEsRUFBQSxJQUVBcUIsU0FBQSxTQUFBalcsR0FDQSxPQUFBMlUsRUFBQXJnQyxFQUFBK1IsS0FBQSxFQUFBMlosRUFBQTFxQixVQUFBLE1BRUE0Z0MsVUFBQSxTQUFBbFcsR0FDQSxPQUFBMlUsRUFBQXJnQyxFQUFBK1IsS0FBQSxFQUFBMlosRUFBQTFxQixVQUFBLFVBRUE2Z0MsV0FBQSxTQUFBblcsR0FDQSxPQUFBd1UsRUFBQWxnQyxFQUFBK1IsS0FBQSxFQUFBMlosRUFBQTFxQixVQUFBLFdBRUE4Z0MsV0FBQSxTQUFBcFcsR0FDQSxPQUFBd1UsRUFBQWxnQyxFQUFBK1IsS0FBQSxFQUFBMlosRUFBQTFxQixVQUFBLFdBRUFvZ0MsUUFBQSxTQUFBMVYsRUFBQXhyQixHQUNBb2tCLEVBQUF2UyxLQUFBLEVBQUEyWixFQUFBNlUsRUFBQXJnQyxJQUVBb2hDLFNBQUEsU0FBQTVWLEVBQUF4ckIsR0FDQW9rQixFQUFBdlMsS0FBQSxFQUFBMlosRUFBQTZVLEVBQUFyZ0MsSUFFQTZoQyxTQUFBLFNBQUFyVyxFQUFBeHJCLEdBQ0Fva0IsRUFBQXZTLEtBQUEsRUFBQTJaLEVBQUE4VSxFQUFBdGdDLEVBQUFjLFVBQUEsS0FFQWdoQyxVQUFBLFNBQUF0VyxFQUFBeHJCLEdBQ0Fva0IsRUFBQXZTLEtBQUEsRUFBQTJaLEVBQUE4VSxFQUFBdGdDLEVBQUFjLFVBQUEsS0FFQWloQyxTQUFBLFNBQUF2VyxFQUFBeHJCLEdBQ0Fva0IsRUFBQXZTLEtBQUEsRUFBQTJaLEVBQUErVSxFQUFBdmdDLEVBQUFjLFVBQUEsS0FFQWtoQyxVQUFBLFNBQUF4VyxFQUFBeHJCLEdBQ0Fva0IsRUFBQXZTLEtBQUEsRUFBQTJaLEVBQUErVSxFQUFBdmdDLEVBQUFjLFVBQUEsS0FFQW1oQyxXQUFBLFNBQUF6VyxFQUFBeHJCLEdBQ0Fva0IsRUFBQXZTLEtBQUEsRUFBQTJaLEVBQUFpVixFQUFBemdDLEVBQUFjLFVBQUEsS0FFQW9oQyxXQUFBLFNBQUExVyxFQUFBeHJCLEdBQ0Fva0IsRUFBQXZTLEtBQUEsRUFBQTJaLEVBQUFnVixFQUFBeGdDLEVBQUFjLFVBQUEsT0FzQ0FpM0IsRUFBQTFSLEVBL1BBLGVBZ1FBMFIsRUFBQXhSLEVBL1BBLFlBZ1FBaGQsRUFBQWdkLEVBQUF3WSxHQUFBcGEsRUFBQWdFLE1BQUEsR0FDQTdwQixFQUFBLFlBQUF1bkIsRUFDQXZuQixFQUFBLFNBQUF5bkIsZ0NDalJBLElBQUFuRSxFQUFBeGpCLEVBQUEsSUFhQUcsRUFBQUQsUUFBQWlFLEVBQUEsU0FBQXNtQixHQUNBLFdBWkEsU0FBQUEsR0FDQSxJQUFBOWpCLEVBQUFDLEVBQ0FxTSxLQUFBeE8sUUFBQSxJQUFBZ21CLEVBQUEsU0FBQThZLEVBQUFDLEdBQ0EsUUFBQXYvQixJQUFBMEMsUUFBQTFDLElBQUEyQyxFQUFBLE1BQUFrSyxVQUFBLDJCQUNBbkssRUFBQTQ4QixFQUNBMzhCLEVBQUE0OEIsSUFFQXZ3QixLQUFBdE0sUUFBQTZjLEVBQUE3YyxHQUNBc00sS0FBQXJNLE9BQUE0YyxFQUFBNWMsR0FJQSxDQUFBNmpCLHFCQ2hCQSxJQUFBaGdCLEVBQUF6SyxFQUFBLEdBQ0F5akMsRUFBQXpqQyxFQUFBLElBQUF3bEIsSUFDQWtlLEVBQUFqNUIsRUFBQWs1QixrQkFBQWw1QixFQUFBbTVCLHVCQUNBQyxFQUFBcDVCLEVBQUFvNUIsUUFDQW45QixFQUFBK0QsRUFBQS9ELFFBQ0FvOUIsRUFBQSxXQUFBOWpDLEVBQUEsR0FBQUEsQ0FBQTZqQyxHQUVBMWpDLEVBQUFELFFBQUEsV0FDQSxJQUFBNmpDLEVBQUFDLEVBQUF6dkIsRUFFQTNFLEVBQUEsV0FDQSxJQUFBcTBCLEVBQUEvNkIsRUFFQSxJQURBNDZCLElBQUFHLEVBQUFKLEVBQUFLLFNBQUFELEVBQUFFLE9BQ0FKLEdBQUEsQ0FDQTc2QixFQUFBNjZCLEVBQUE3NkIsR0FDQTY2QixJQUFBbi9CLEtBQ0EsSUFDQXNFLElBQ08sTUFBQWxCLEdBR1AsTUFGQSs3QixFQUFBeHZCLElBQ0F5dkIsT0FBQS8vQixFQUNBK0QsR0FFS2c4QixPQUFBLy9CLEVBQ0xnZ0MsS0FBQUcsU0FJQSxHQUFBTixFQUNBdnZCLEVBQUEsV0FDQXN2QixFQUFBUSxTQUFBejBCLFNBR0csSUFBQTh6QixHQUFBajVCLEVBQUF3dkIsV0FBQXh2QixFQUFBd3ZCLFVBQUFxSyxXQVFBLEdBQUE1OUIsS0FBQUMsUUFBQSxDQUVILElBQUFsQyxFQUFBaUMsRUFBQUMsYUFBQTFDLEdBQ0FzUSxFQUFBLFdBQ0E5UCxFQUFBQyxLQUFBa0wsU0FTQTJFLEVBQUEsV0FFQWt2QixFQUFBbGpDLEtBQUFrSyxFQUFBbUYsUUF2QkcsQ0FDSCxJQUFBMjBCLEdBQUEsRUFDQUMsRUFBQXZrQixTQUFBd2tCLGVBQUEsSUFDQSxJQUFBZixFQUFBOXpCLEdBQUE4MEIsUUFBQUYsR0FBdUNHLGVBQUEsSUFDdkNwd0IsRUFBQSxXQUNBaXdCLEVBQUFyVyxLQUFBb1csTUFzQkEsZ0JBQUFyN0IsR0FDQSxJQUFBbkUsR0FBZ0JtRSxLQUFBdEUsVUFBQVgsR0FDaEIrL0IsTUFBQXAvQixLQUFBRyxHQUNBZy9CLElBQ0FBLEVBQUFoL0IsRUFDQXdQLEtBQ0t5dkIsRUFBQWovQixxQkNsRUwsSUFhQTYvQixFQUFBai9CLEVBQUFrL0IsRUFiQW43QixFQUFBMUosRUFBQSxJQUNBOGtDLEVBQUE5a0MsRUFBQSxLQUNBK2tDLEVBQUEva0MsRUFBQSxLQUNBZ2xDLEVBQUFobEMsRUFBQSxLQUNBeUssRUFBQXpLLEVBQUEsR0FDQTZqQyxFQUFBcDVCLEVBQUFvNUIsUUFDQTNSLEVBQUF6bkIsRUFBQXc2QixhQUNBQyxFQUFBejZCLEVBQUEwNkIsZUFDQUMsRUFBQTM2QixFQUFBMjZCLGVBQ0FDLEVBQUE1NkIsRUFBQTQ2QixTQUNBQyxFQUFBLEVBQ0FuUSxLQUdBcGQsRUFBQSxXQUNBLElBQUFuVixHQUFBcVEsS0FFQSxHQUFBa2lCLEVBQUF6ekIsZUFBQWtCLEdBQUEsQ0FDQSxJQUFBc0csRUFBQWlzQixFQUFBdnlCLFVBQ0F1eUIsRUFBQXZ5QixHQUNBc0csTUFHQTZMLEVBQUEsU0FBQXd3QixHQUNBeHRCLEVBQUF4WCxLQUFBZ2xDLEVBQUFwWCxPQUdBK0QsR0FBQWdULElBQ0FoVCxFQUFBLFNBQUFocEIsR0FHQSxJQUZBLElBQUFjLEtBQ0E1SixFQUFBLEVBQ0E4QixVQUFBQyxPQUFBL0IsR0FBQTRKLEVBQUFsRCxLQUFBNUUsVUFBQTlCLE1BTUEsT0FMQSswQixJQUFBbVEsR0FBQSxXQUVBUixFQUFBLG1CQUFBNTdCLElBQUEyQyxTQUFBM0MsR0FBQWMsSUFFQTQ2QixFQUFBVSxHQUNBQSxHQUVBSixFQUFBLFNBQUF0aUMsVUFDQXV5QixFQUFBdnlCLElBR0EsV0FBQTVDLEVBQUEsR0FBQUEsQ0FBQTZqQyxHQUNBZSxFQUFBLFNBQUFoaUMsR0FDQWloQyxFQUFBUSxTQUFBMzZCLEVBQUFxTyxFQUFBblYsRUFBQSxLQUdHeWlDLEtBQUFHLElBQ0haLEVBQUEsU0FBQWhpQyxHQUNBeWlDLEVBQUFHLElBQUE5N0IsRUFBQXFPLEVBQUFuVixFQUFBLEtBR0d3aUMsR0FFSFAsR0FEQWwvQixFQUFBLElBQUF5L0IsR0FDQUssTUFDQTkvQixFQUFBKy9CLE1BQUFDLFVBQUE1d0IsRUFDQTZ2QixFQUFBbDdCLEVBQUFtN0IsRUFBQWUsWUFBQWYsRUFBQSxJQUdHcDZCLEVBQUFvN0Isa0JBQUEsbUJBQUFELGNBQUFuN0IsRUFBQXE3QixlQUNIbEIsRUFBQSxTQUFBaGlDLEdBQ0E2SCxFQUFBbTdCLFlBQUFoakMsRUFBQSxTQUVBNkgsRUFBQW83QixpQkFBQSxVQUFBOXdCLEdBQUEsSUFHQTZ2QixFQXZEQSx1QkFzREdJLEVBQUEsVUFDSCxTQUFBcGlDLEdBQ0FtaUMsRUFBQWpSLFlBQUFrUixFQUFBLHlDQUNBRCxFQUFBZ0IsWUFBQTl5QixNQUNBOEUsRUFBQXhYLEtBQUFxQyxLQUtBLFNBQUFBLEdBQ0F1RSxXQUFBdUMsRUFBQXFPLEVBQUFuVixFQUFBLFFBSUF6QyxFQUFBRCxTQUNBc2xCLElBQUEwTSxFQUNBaGQsTUFBQWd3QixpQ0NqRkEsSUFBQWMsRUFBQWhtQyxFQUFBLElBQ0FpckIsRUFBQWpyQixFQUFBLEtBQ0ErbUIsRUFBQS9tQixFQUFBLElBQ0FtakIsRUFBQW5qQixFQUFBLElBTUFHLEVBQUFELFFBQUFGLEVBQUEsR0FBQUEsQ0FBQXVFLE1BQUEsaUJBQUEwaEMsRUFBQUMsR0FDQWp6QixLQUFBdWhCLEdBQUFyUixFQUFBOGlCLEdBQ0FoekIsS0FBQWt6QixHQUFBLEVBQ0FsekIsS0FBQW16QixHQUFBRixHQUVDLFdBQ0QsSUFBQXYwQixFQUFBc0IsS0FBQXVoQixHQUNBMFIsRUFBQWp6QixLQUFBbXpCLEdBQ0FsZ0MsRUFBQStNLEtBQUFrekIsS0FDQSxPQUFBeDBCLEdBQUF6TCxHQUFBeUwsRUFBQXhQLFFBQ0E4USxLQUFBdWhCLFFBQUF2d0IsRUFDQWduQixFQUFBLElBRUFBLEVBQUEsVUFBQWliLEVBQUFoZ0MsRUFDQSxVQUFBZ2dDLEVBQUF2MEIsRUFBQXpMLElBQ0FBLEVBQUF5TCxFQUFBekwsTUFDQyxVQUdENmdCLEVBQUFzZixVQUFBdGYsRUFBQXhpQixNQUVBeWhDLEVBQUEsUUFDQUEsRUFBQSxVQUNBQSxFQUFBLHlDQy9CQSxJQUFBampCLEVBQUEvaUIsRUFBQSxJQUNBcW1CLEVBQUFybUIsRUFBQSxJQUNBaWtCLEVBQUFqa0IsRUFBQSxHQUNBRyxFQUFBRCxRQUFBLFNBQUFrQixHQU9BLElBTkEsSUFBQXVRLEVBQUFvUixFQUFBOVAsTUFDQTlRLEVBQUE4aEIsRUFBQXRTLEVBQUF4UCxRQUNBK29CLEVBQUFocEIsVUFBQUMsT0FDQStELEVBQUFtZ0IsRUFBQTZFLEVBQUEsRUFBQWhwQixVQUFBLFFBQUErQixFQUFBOUIsR0FDQXVxQixFQUFBeEIsRUFBQSxFQUFBaHBCLFVBQUEsUUFBQStCLEVBQ0FxaUMsT0FBQXJpQyxJQUFBeW9CLEVBQUF2cUIsRUFBQWtrQixFQUFBcUcsRUFBQXZxQixHQUNBbWtDLEVBQUFwZ0MsR0FBQXlMLEVBQUF6TCxLQUFBOUUsRUFDQSxPQUFBdVEsb0JDWkEsSUFBQWtWLEVBQUE3bUIsRUFBQSxLQUVBRyxFQUFBRCxRQUFBLFNBQUFxbUMsRUFBQXBrQyxHQUNBLFdBQUEwa0IsRUFBQTBmLEdBQUEsQ0FBQXBrQyxxQkNKQSxJQUFBbWtCLEVBQUF0bUIsRUFBQSxJQUNBdXBCLEVBQUF2cEIsRUFBQSxFQUFBQSxDQUFBLFlBQ0ErbUIsRUFBQS9tQixFQUFBLElBQ0FHLEVBQUFELFFBQUFGLEVBQUEsSUFBQXdtQyxrQkFBQSxTQUFBN2hDLEdBQ0EsUUFBQVYsR0FBQVUsRUFBQSxPQUFBQSxFQUFBNGtCLElBQ0E1a0IsRUFBQSxlQUNBb2lCLEVBQUFULEVBQUEzaEIsbUNDTEEsSUFBQThoQyxFQUFBem1DLEVBQUEsSUFDQThpQixFQUFBOWlCLEVBQUEsSUFFQUcsRUFBQUQsUUFBQSxTQUFBcUIsRUFBQTJFLEVBQUE5RSxHQUNBOEUsS0FBQTNFLEVBQUFrbEMsRUFBQXRpQyxFQUFBNUMsRUFBQTJFLEVBQUE0YyxFQUFBLEVBQUExaEIsSUFDQUcsRUFBQTJFLEdBQUE5RSxvQkNMQSxJQUFBMmxCLEVBQUEvbUIsRUFBQSxJQUNBdXBCLEVBQUF2cEIsRUFBQSxFQUFBQSxDQUFBLFlBQ0F3bkIsRUFBQWpqQixNQUFBOUMsVUFFQXRCLEVBQUFELFFBQUEsU0FBQXlFLEdBQ0EsWUFBQVYsSUFBQVUsSUFBQW9pQixFQUFBeGlCLFFBQUFJLEdBQUE2aUIsRUFBQStCLEtBQUE1a0IscUJDTkEsSUFBQTVCLEVBQUEvQyxFQUFBLEVBQUFBLENBQUEsU0FDQUcsRUFBQUQsUUFBQSxTQUFBNGtCLEdBQ0EsSUFBQTRoQixFQUFBLElBQ0EsSUFDQSxNQUFBNWhCLEdBQUE0aEIsR0FDRyxNQUFBMStCLEdBQ0gsSUFFQSxPQURBMCtCLEVBQUEzakMsSUFBQSxHQUNBLE1BQUEraEIsR0FBQTRoQixHQUNLLE1BQUF2aUMsS0FDRiwyQkNUSCxJQUFBNDJCLEVBQUEvNkIsRUFBQSxJQUNBcWUsRUFBQXJlLEVBQUEsSUFFQUcsRUFBQUQsUUFBQSxTQUFBdWpCLEVBQUFrakIsRUFBQXhrQixHQUNBLEdBQUE0WSxFQUFBNEwsR0FBQSxNQUFBNzFCLFVBQUEsVUFBQXFSLEVBQUEsMEJBQ0EsT0FBQXpVLE9BQUEyUSxFQUFBb0YsbUNDTEEsSUFBQWxRLEVBQUF2VCxFQUFBLElBQ0E0bUMsRUFBQTVtQyxFQUFBLElBQ0FtNUIsRUFBQW41QixFQUFBLElBQ0E2bUMsS0FHQTdtQyxFQUFBLEdBQUFBLENBQUE2bUMsRUFBQTdtQyxFQUFBLEVBQUFBLENBQUEsdUJBQWtGLE9BQUFpVCxPQUVsRjlTLEVBQUFELFFBQUEsU0FBQTZTLEVBQUFvUCxFQUFBdmQsR0FDQW1PLEVBQUF0UixVQUFBOFIsRUFBQXN6QixHQUFxRGppQyxLQUFBZ2lDLEVBQUEsRUFBQWhpQyxLQUNyRHUwQixFQUFBcG1CLEVBQUFvUCxFQUFBLDRDQ1ZBLElBQUEyRCxFQUFBOWxCLEVBQUEsSUFDQTZLLEVBQUE3SyxFQUFBLEdBQ0E0SyxFQUFBNUssRUFBQSxJQUNBMkssRUFBQTNLLEVBQUEsSUFDQSttQixFQUFBL21CLEVBQUEsSUFDQThtQyxFQUFBOW1DLEVBQUEsSUFDQW01QixFQUFBbjVCLEVBQUEsSUFDQTZaLEVBQUE3WixFQUFBLElBQ0F1cEIsRUFBQXZwQixFQUFBLEVBQUFBLENBQUEsWUFDQSttQyxPQUFBendCLE1BQUEsV0FBQUEsUUFLQTB3QixFQUFBLFdBQThCLE9BQUEvekIsTUFFOUI5UyxFQUFBRCxRQUFBLFNBQUEydEIsRUFBQTFMLEVBQUFwUCxFQUFBbk8sRUFBQXFpQyxFQUFBQyxFQUFBblosR0FDQStZLEVBQUEvekIsRUFBQW9QLEVBQUF2ZCxHQUNBLElBZUF5MEIsRUFBQWgzQixFQUFBd2tDLEVBZkFNLEVBQUEsU0FBQWpCLEdBQ0EsSUFBQWEsR0FBQWIsS0FBQXphLEVBQUEsT0FBQUEsRUFBQXlhLEdBQ0EsT0FBQUEsR0FDQSxJQVZBLE9BV0EsSUFWQSxTQVVBLGtCQUE2QyxXQUFBbnpCLEVBQUFFLEtBQUFpekIsSUFDeEMsa0JBQTRCLFdBQUFuekIsRUFBQUUsS0FBQWl6QixLQUVqQzFjLEVBQUFySCxFQUFBLFlBQ0FpbEIsRUFkQSxVQWNBSCxFQUNBSSxHQUFBLEVBQ0E1YixFQUFBb0MsRUFBQXBzQixVQUNBNmxDLEVBQUE3YixFQUFBbEMsSUFBQWtDLEVBbkJBLGVBbUJBd2IsR0FBQXhiLEVBQUF3YixHQUNBTSxFQUFBRCxHQUFBSCxFQUFBRixHQUNBTyxFQUFBUCxFQUFBRyxFQUFBRCxFQUFBLFdBQUFJLE9BQUF0akMsRUFDQXdqQyxFQUFBLFNBQUF0bEIsR0FBQXNKLEVBQUFoRCxTQUFBNmUsRUF3QkEsR0FyQkFHLElBQ0FaLEVBQUFodEIsRUFBQTR0QixFQUFBbG5DLEtBQUEsSUFBQXN0QixPQUNBL3NCLE9BQUFXLFdBQUFvbEMsRUFBQWppQyxPQUVBdTBCLEVBQUEwTixFQUFBcmQsR0FBQSxHQUVBMUQsR0FBQSxtQkFBQStnQixFQUFBdGQsSUFBQTVlLEVBQUFrOEIsRUFBQXRkLEVBQUF5ZCxJQUlBSSxHQUFBRSxHQWpDQSxXQWlDQUEsRUFBQTNtQyxPQUNBMG1DLEdBQUEsRUFDQUUsRUFBQSxXQUFrQyxPQUFBRCxFQUFBL21DLEtBQUEwUyxRQUdsQzZTLElBQUFpSSxJQUFBZ1osSUFBQU0sR0FBQTViLEVBQUFsQyxJQUNBNWUsRUFBQThnQixFQUFBbEMsRUFBQWdlLEdBR0F4Z0IsRUFBQTVFLEdBQUFvbEIsRUFDQXhnQixFQUFBeUMsR0FBQXdkLEVBQ0FDLEVBTUEsR0FMQTVOLEdBQ0EvUSxPQUFBOGUsRUFBQUcsRUFBQUosRUE5Q0EsVUErQ0E3d0IsS0FBQTR3QixFQUFBSyxFQUFBSixFQWhEQSxRQWlEQTFlLFFBQUErZSxHQUVBelosRUFBQSxJQUFBMXJCLEtBQUFnM0IsRUFDQWgzQixLQUFBb3BCLEdBQUE3Z0IsRUFBQTZnQixFQUFBcHBCLEVBQUFnM0IsRUFBQWgzQixTQUNLd0ksSUFBQVksRUFBQVosRUFBQU0sR0FBQTQ3QixHQUFBTSxHQUFBbGxCLEVBQUFrWCxHQUVMLE9BQUFBLG9CQ25FQSxJQUFBaG9CLEVBQUFyUixFQUFBLElBQ0FxZSxFQUFBcmUsRUFBQSxJQUdBRyxFQUFBRCxRQUFBLFNBQUF3bkMsR0FDQSxnQkFBQWprQixFQUFBa2tCLEdBQ0EsSUFHQTkxQixFQUFBaEssRUFIQWpHLEVBQUE4TCxPQUFBMlEsRUFBQW9GLElBQ0FyakIsRUFBQWlSLEVBQUFzMkIsR0FDQXRuQyxFQUFBdUIsRUFBQU8sT0FFQSxPQUFBL0IsRUFBQSxHQUFBQSxHQUFBQyxFQUFBcW5DLEVBQUEsUUFBQXpqQyxHQUNBNE4sRUFBQWpRLEVBQUFnbUMsV0FBQXhuQyxJQUNBLE9BQUF5UixFQUFBLE9BQUF6UixFQUFBLElBQUFDLElBQUF3SCxFQUFBakcsRUFBQWdtQyxXQUFBeG5DLEVBQUEsV0FBQXlILEVBQUEsTUFDQTYvQixFQUFBOWxDLEVBQUFpbUMsT0FBQXpuQyxHQUFBeVIsRUFDQTYxQixFQUFBOWxDLEVBQUF1VCxNQUFBL1UsSUFBQSxHQUFBeUgsRUFBQSxPQUFBZ0ssRUFBQSxrQ0NiQSxJQUFBaTJCLEVBQUEvMkIsS0FBQWczQixNQUNBNW5DLEVBQUFELFNBQUE0bkMsR0FFQUEsRUFBQSx3QkFBQUEsRUFBQSx5QkFFQSxPQUFBQSxHQUFBLE9BQ0EsU0FBQTl1QixHQUNBLFdBQUFBLFdBQUEsTUFBQUEsRUFBQSxLQUFBQSxNQUFBLEVBQUFqSSxLQUFBOUYsSUFBQStOLEdBQUEsR0FDQzh1QixpQkNSRDNuQyxFQUFBRCxRQUFBNlEsS0FBQWkzQixNQUFBLFNBQUFodkIsR0FFQSxXQUFBQSxnQkFBQSxzQ0NGQSxJQUFBM0gsRUFBQXJSLEVBQUEsSUFDQXFlLEVBQUFyZSxFQUFBLElBRUFHLEVBQUFELFFBQUEsU0FBQStuQyxHQUNBLElBQUFyTSxFQUFBbHVCLE9BQUEyUSxFQUFBcEwsT0FDQTRSLEVBQUEsR0FDQXhqQixFQUFBZ1EsRUFBQTQyQixHQUNBLEdBQUE1bUMsRUFBQSxHQUFBQSxHQUFBZy9CLElBQUEsTUFBQS9ZLFdBQUEsMkJBQ0EsS0FBUWptQixFQUFBLEdBQU1BLEtBQUEsS0FBQXU2QixNQUFBLEVBQUF2NkIsSUFBQXdqQixHQUFBK1csR0FDZCxPQUFBL1csb0JDVkEsSUFBQWhVLEVBQUE3USxFQUFBLEdBQ0F5VCxFQUFBelQsRUFBQSxLQUFBd2xCLElBQ0FybEIsRUFBQUQsUUFBQSxTQUFBdWpCLEVBQUF4aEIsRUFBQXdvQixHQUNBLElBQ0FoZixFQURBRixFQUFBdEosRUFBQVMsWUFJRyxPQUZINkksSUFBQWtmLEdBQUEsbUJBQUFsZixJQUFBRSxFQUFBRixFQUFBOUosYUFBQWdwQixFQUFBaHBCLFdBQUFvUCxFQUFBcEYsSUFBQWdJLEdBQ0FBLEVBQUFnUSxFQUFBaFksR0FDR2dZLGtCQ1BIdGpCLEVBQUFELFFBQUEsa0VDRUEsSUFBQTJRLEVBQUE3USxFQUFBLEdBQ0F1UixFQUFBdlIsRUFBQSxHQUNBd0QsRUFBQSxTQUFBbU8sRUFBQThaLEdBRUEsR0FEQWxhLEVBQUFJLElBQ0FkLEVBQUE0YSxJQUFBLE9BQUFBLEVBQUEsTUFBQTNhLFVBQUEyYSxFQUFBLDhCQUVBdHJCLEVBQUFELFNBQ0FzbEIsSUFBQTFrQixPQUFBMlMsaUJBQUEsZ0JBQ0EsU0FBQTJPLEVBQUE4bEIsRUFBQTFpQixHQUNBLEtBQ0FBLEVBQUF4bEIsRUFBQSxHQUFBQSxDQUFBNkwsU0FBQXRMLEtBQUFQLEVBQUEsSUFBQW1FLEVBQUFyRCxPQUFBVyxVQUFBLGFBQUErakIsSUFBQSxJQUNBcEQsTUFDQThsQixJQUFBOWxCLGFBQUE3ZCxPQUNPLE1BQUF5RCxHQUFZa2dDLEdBQUEsRUFDbkIsZ0JBQUF2MkIsRUFBQThaLEdBSUEsT0FIQWpvQixFQUFBbU8sRUFBQThaLEdBQ0F5YyxFQUFBdjJCLEVBQUErQixVQUFBK1gsRUFDQWpHLEVBQUE3VCxFQUFBOFosR0FDQTlaLEdBVkEsS0FZUSxRQUFBMU4sR0FDUlQsMEJDdkJBLElBQUF5YyxFQUFBamdCLEVBQUEsR0FBQWlnQixTQUNBOWYsRUFBQUQsUUFBQStmLEtBQUFDLCtCQ0FBL2YsRUFBQUQsUUFBQSxnR0FFQW9pQixNQUFBLHNCQ0hBLElBQUE4QyxFQUFBcGxCLEVBQUEsR0FBQUEsQ0FBQSxRQUNBaUksRUFBQWpJLEVBQUEsSUFDQUcsRUFBQUQsUUFBQSxTQUFBbUMsR0FDQSxPQUFBK2lCLEVBQUEvaUIsS0FBQStpQixFQUFBL2lCLEdBQUE0RixFQUFBNUYsc0JDSEEsSUFBQW9JLEVBQUF6SyxFQUFBLEdBQ0EwSyxFQUFBMUssRUFBQSxJQUNBOGxCLEVBQUE5bEIsRUFBQSxJQUNBbW9DLEVBQUFub0MsRUFBQSxLQUNBZSxFQUFBZixFQUFBLElBQUFtRSxFQUNBaEUsRUFBQUQsUUFBQSxTQUFBUyxHQUNBLElBQUF5bkMsRUFBQTE5QixFQUFBbkksU0FBQW1JLEVBQUFuSSxPQUFBdWpCLEtBQTBEcmIsRUFBQWxJLFlBQzFELEtBQUE1QixFQUFBa25DLE9BQUEsSUFBQWxuQyxLQUFBeW5DLEdBQUFybkMsRUFBQXFuQyxFQUFBem5DLEdBQWtGUyxNQUFBK21DLEVBQUFoa0MsRUFBQXhELHVCQ1BsRixJQUFBa1EsRUFBQTdRLEVBQUEsR0FDQWlnQixFQUFBamdCLEVBQUEsR0FBQWlnQixTQUVBbmMsRUFBQStNLEVBQUFvUCxJQUFBcFAsRUFBQW9QLEVBQUFvb0IsZUFDQWxvQyxFQUFBRCxRQUFBLFNBQUF5RSxHQUNBLE9BQUFiLEVBQUFtYyxFQUFBb29CLGNBQUExakMscUNDTUEsU0FBQTJqQyxFQUFBbCtCLEdBQ0Esa0JBQ0EsT0FBQUEsR0FTQSxJQUFBbStCLEVBQUEsYUFFQUEsRUFBQUMsWUFBQUYsRUFDQUMsRUFBQUUsaUJBQUFILEdBQUEsR0FDQUMsRUFBQUcsZ0JBQUFKLEdBQUEsR0FDQUMsRUFBQUksZ0JBQUFMLEVBQUEsTUFDQUMsRUFBQUssZ0JBQUEsV0FDQSxPQUFBMzFCLE1BRUFzMUIsRUFBQU0sb0JBQUEsU0FBQXorQixHQUNBLE9BQUFBLEdBR0FqSyxFQUFBRCxRQUFBcW9DLGdDQ2RBLElBQUFPLEVBQUEsU0FBQXZOLEtBK0JBcDdCLEVBQUFELFFBckJBLFNBQUFvN0IsRUFBQUMsRUFBQTFwQixFQUFBaEssRUFBQXBILEVBQUFDLEVBQUFzSCxFQUFBN0QsR0FHQSxHQUZBMmtDLEVBQUF2TixJQUVBRCxFQUFBLENBQ0EsSUFBQTUzQixFQUNBLFFBQUFPLElBQUFzM0IsRUFDQTczQixFQUFBLElBQUFFLE1BQUEscUlBQ0ssQ0FDTCxJQUFBb0csR0FBQTZILEVBQUFoSyxFQUFBcEgsRUFBQUMsRUFBQXNILEVBQUE3RCxHQUNBcTNCLEVBQUEsR0FDQTkzQixFQUFBLElBQUFFLE1BQUEyM0IsRUFBQXJaLFFBQUEsaUJBQ0EsT0FBQWxZLEVBQUF3eEIsU0FFQTc2QixLQUFBLHNCQUlBLE1BREErQyxFQUFBKzNCLFlBQUEsRUFDQS8zQiwyVUN4Q0FxbEMsR0FDQUMsS0FBQSxlQUFBajRCLEtBQUF1akIsU0FBQTNhLFNBQUEsSUFBQXN2QixVQUFBLEdBQUEzbUIsTUFBQSxJQUFBeFQsS0FBQSxLQUNBbzZCLFFBQUEsa0JBQUFuNEIsS0FBQXVqQixTQUFBM2EsU0FBQSxJQUFBc3ZCLFVBQUEsR0FBQTNtQixNQUFBLElBQUF4VCxLQUFBLE1BR0F4TSxFQUFBLG1CQUFBQyxRQUFBLGlCQUFBQSxPQUFBQyxTQUFBLFNBQUFDLEdBQ0EsY0FBQUEsR0FDQyxTQUFBQSxHQUNELE9BQUFBLEdBQUEsbUJBQUFGLFFBQUFFLEVBQUFDLGNBQUFILFFBQUFFLElBQUFGLE9BQUFkLFVBQUEsZ0JBQUFnQixHQUdBVixFQUFBakIsT0FBQWtCLFFBQUEsU0FBQUMsR0FDQSxRQUFBN0IsRUFBQSxFQUFpQkEsRUFBQThCLFVBQUFDLE9BQXNCL0IsSUFBQSxDQUN2QyxJQUFBZ0MsRUFBQUYsVUFBQTlCLEdBRUEsUUFBQWlDLEtBQUFELEVBQ0F0QixPQUFBVyxVQUFBQyxlQUFBbkIsS0FBQTZCLEVBQUFDLEtBQ0FKLEVBQUFJLEdBQUFELEVBQUFDLElBS0EsT0FBQUosR0FPQSxTQUFBa25DLEVBQUExbUMsR0FDQSx3QkFBQUEsRUFBQSxZQUFBSCxFQUFBRyxLQUFBLE9BQUFBLEVBQUEsU0FHQSxJQURBLElBQUFncEIsRUFBQWhwQixFQUNBLE9BQUEzQixPQUFBK1ksZUFBQTRSLElBQ0FBLEVBQUEzcUIsT0FBQStZLGVBQUE0UixHQUdBLE9BQUEzcUIsT0FBQStZLGVBQUFwWCxLQUFBZ3BCLEVBNEJBLFNBQUEyZCxFQUFBQyxFQUFBQyxFQUFBQyxHQUNBLElBQUEzeEIsRUFPQSxHQUxBLG1CQUFBMHhCLFFBQUEsSUFBQUMsSUFDQUEsRUFBQUQsRUFDQUEsT0FBQXJsQyxRQUdBLElBQUFzbEMsRUFBQSxDQUNBLHNCQUFBQSxFQUNBLFVBQUEzbEMsTUFBQSwyQ0FHQSxPQUFBMmxDLEVBQUFILEVBQUFHLENBQUFGLEVBQUFDLEdBR0Esc0JBQUFELEVBQ0EsVUFBQXpsQyxNQUFBLDBDQUdBLElBQUE0bEMsRUFBQUgsRUFDQUksRUFBQUgsRUFDQUksS0FDQUMsRUFBQUQsRUFDQUUsR0FBQSxFQUVBLFNBQUFDLElBQ0FGLElBQUFELElBQ0FDLEVBQUFELEVBQUF2MEIsU0FTQSxTQUFBNUMsSUFDQSxHQUFBcTNCLEVBQ0EsVUFBQWhtQyxNQUFBLHdNQUdBLE9BQUE2bEMsRUEwQkEsU0FBQXRrQyxFQUFBNFAsR0FDQSxzQkFBQUEsRUFDQSxVQUFBblIsTUFBQSwyQ0FHQSxHQUFBZ21DLEVBQ0EsVUFBQWhtQyxNQUFBLCtUQUdBLElBQUF5TyxHQUFBLEVBS0EsT0FIQXczQixJQUNBRixFQUFBN2lDLEtBQUFpTyxHQUVBLFdBQ0EsR0FBQTFDLEVBQUEsQ0FJQSxHQUFBdTNCLEVBQ0EsVUFBQWhtQyxNQUFBLG9LQUdBeU8sR0FBQSxFQUVBdzNCLElBQ0EsSUFBQTNqQyxFQUFBeWpDLEVBQUF4akMsUUFBQTRPLEdBQ0E0MEIsRUFBQXZqQyxPQUFBRixFQUFBLEtBNkJBLFNBQUEwRCxFQUFBQyxHQUNBLElBQUFzL0IsRUFBQXQvQixHQUNBLFVBQUFqRyxNQUFBLDJFQUdBLFlBQUFpRyxFQUFBaUIsS0FDQSxVQUFBbEgsTUFBQSxzRkFHQSxHQUFBZ21DLEVBQ0EsVUFBQWhtQyxNQUFBLHNDQUdBLElBQ0FnbUMsR0FBQSxFQUNBSCxFQUFBRCxFQUFBQyxFQUFBNS9CLEdBQ0ssUUFDTCsvQixHQUFBLEVBSUEsSUFEQSxJQUFBLzBCLEVBQUE2MEIsRUFBQUMsRUFDQXZwQyxFQUFBLEVBQW1CQSxFQUFBeVUsRUFBQTFTLE9BQXNCL0IsSUFBQSxFQUV6QzJVLEVBREFGLEVBQUF6VSxNQUlBLE9BQUF5SixFQWtFQSxPQUZBRCxHQUFZa0IsS0FBQWkrQixFQUFBQyxRQUVacHhCLEdBQ0FoTyxXQUNBekUsWUFDQW9OLFdBQ0F1M0IsZUF6REEsU0FBQUMsR0FDQSxzQkFBQUEsRUFDQSxVQUFBbm1DLE1BQUEsOENBR0E0bEMsRUFBQU8sRUFDQW5nQyxHQUFja0IsS0FBQWkrQixFQUFBRyxhQW9EWGMsRUFBQSxHQTNDSCxXQUNBLElBQUExaUMsRUFFQTJpQyxFQUFBOWtDLEVBQ0EsT0FBQW1DLEdBU0FuQyxVQUFBLFNBQUEra0MsR0FDQSx3QkFBQUEsRUFBQSxZQUFBNW5DLEVBQUE0bkMsS0FBQSxPQUFBQSxFQUNBLFVBQUFwNUIsVUFBQSwwQ0FHQSxTQUFBcTVCLElBQ0FELEVBQUF0bEMsTUFDQXNsQyxFQUFBdGxDLEtBQUEyTixLQU1BLE9BRkE0M0IsS0FFZ0J2MUIsWUFEaEJxMUIsRUFBQUUsT0FHS0gsRUFBQSxjQUNMLE9BQUEvMkIsTUFDSzNMLEdBYUZzUSxFQXVCSCxTQUFBd3lCLEVBQUEvbkMsRUFBQXdILEdBQ0EsSUFBQXdnQyxFQUFBeGdDLEtBQUFpQixLQUdBLGdCQUZBdS9CLEdBQUEsV0FBQTM4QixPQUFBMjhCLEdBQUEsa0JBRUEsY0FBQWhvQyxFQUFBLGlMQThEQSxTQUFBaW9DLEVBQUFDLEdBR0EsSUFGQSxJQUFBQyxFQUFBMXBDLE9BQUF3VixLQUFBaTBCLEdBQ0FFLEtBQ0FycUMsRUFBQSxFQUFpQkEsRUFBQW9xQyxFQUFBcm9DLE9BQXdCL0IsSUFBQSxDQUN6QyxJQUFBaUMsRUFBQW1vQyxFQUFBcHFDLEdBRUEsRUFNQSxtQkFBQW1xQyxFQUFBbG9DLEtBQ0Fvb0MsRUFBQXBvQyxHQUFBa29DLEVBQUFsb0MsSUFHQSxJQUFBcW9DLEVBQUE1cEMsT0FBQXdWLEtBQUFtMEIsR0FPQSxJQUFBRSxPQUFBLEVBQ0EsS0F4REEsU0FBQUosR0FDQXpwQyxPQUFBd1YsS0FBQWkwQixHQUFBaGdDLFFBQUEsU0FBQWxJLEdBQ0EsSUFBQWduQyxFQUFBa0IsRUFBQWxvQyxHQUdBLFlBRkFnbkMsT0FBQXBsQyxHQUEyQzZHLEtBQUFpK0IsRUFBQUMsT0FHM0MsVUFBQXBsQyxNQUFBLFlBQUF2QixFQUFBLGlSQUlBLFFBQWdELElBQWhEZ25DLE9BQUFwbEMsR0FBbUM2RyxLQURuQyxnQ0FBQWlHLEtBQUF1akIsU0FBQTNhLFNBQUEsSUFBQXN2QixVQUFBLEdBQUEzbUIsTUFBQSxJQUFBeFQsS0FBQSxPQUVBLFVBQUFsTCxNQUFBLFlBQUF2QixFQUFBLDZFQUFBMG1DLEVBQUFDLEtBQUEsaVRBOENBNEIsQ0FBQUgsR0FDRyxNQUFBemlDLEdBQ0gyaUMsRUFBQTNpQyxFQUdBLGtCQUNBLElBQUFvUCxFQUFBbFYsVUFBQUMsT0FBQSxRQUFBOEIsSUFBQS9CLFVBQUEsR0FBQUEsVUFBQSxNQUNBMkgsRUFBQTNILFVBQUEsR0FFQSxHQUFBeW9DLEVBQ0EsTUFBQUEsRUFZQSxJQUZBLElBQUFFLEdBQUEsRUFDQXh1QixLQUNBOHBCLEVBQUEsRUFBb0JBLEVBQUF1RSxFQUFBdm9DLE9BQThCZ2tDLElBQUEsQ0FDbEQsSUFBQWw4QixFQUFBeWdDLEVBQUF2RSxHQUNBa0QsRUFBQW9CLEVBQUF4Z0MsR0FDQTZnQyxFQUFBMXpCLEVBQUFuTixHQUNBOGdDLEVBQUExQixFQUFBeUIsRUFBQWpoQyxHQUNBLFlBQUFraEMsRUFBQSxDQUNBLElBQUFDLEVBQUFaLEVBQUFuZ0MsRUFBQUosR0FDQSxVQUFBakcsTUFBQW9uQyxHQUVBM3VCLEVBQUFwUyxHQUFBOGdDLEVBQ0FGLEtBQUFFLElBQUFELEVBRUEsT0FBQUQsRUFBQXh1QixFQUFBakYsR0FJQSxTQUFBNnpCLEVBQUFDLEVBQUF0aEMsR0FDQSxrQkFDQSxPQUFBQSxFQUFBc2hDLEVBQUE5aEMsTUFBQTZKLEtBQUEvUSxhQXlCQSxTQUFBaXBDLEVBQUFDLEVBQUF4aEMsR0FDQSxzQkFBQXdoQyxFQUNBLE9BQUFILEVBQUFHLEVBQUF4aEMsR0FHQSx3QkFBQXdoQyxFQUFBLFlBQUE5b0MsRUFBQThvQyxLQUFBLE9BQUFBLEVBQ0EsVUFBQXhuQyxNQUFBLGlGQUFBd25DLEVBQUEsZ0JBQUFBLEVBQUEsWUFBQTlvQyxFQUFBOG9DLElBQUEsOEZBS0EsSUFGQSxJQUFBOTBCLEVBQUF4VixPQUFBd1YsS0FBQTgwQixHQUNBQyxLQUNBanJDLEVBQUEsRUFBaUJBLEVBQUFrVyxFQUFBblUsT0FBaUIvQixJQUFBLENBQ2xDLElBQUFpQyxFQUFBaVUsRUFBQWxXLEdBQ0E4cUMsRUFBQUUsRUFBQS9vQyxHQUNBLG1CQUFBNm9DLElBQ0FHLEVBQUFocEMsR0FBQTRvQyxFQUFBQyxFQUFBdGhDLElBR0EsT0FBQXloQyxFQWNBLFNBQUFDLElBQ0EsUUFBQXZoQyxFQUFBN0gsVUFBQUMsT0FBQW9wQyxFQUFBaG5DLE1BQUF3RixHQUFBRSxFQUFBLEVBQWtFQSxFQUFBRixFQUFhRSxJQUMvRXNoQyxFQUFBdGhDLEdBQUEvSCxVQUFBK0gsR0FHQSxXQUFBc2hDLEVBQUFwcEMsT0FDQSxTQUFBaUksR0FDQSxPQUFBQSxHQUlBLElBQUFtaEMsRUFBQXBwQyxPQUNBb3BDLEVBQUEsR0FHQUEsRUFBQTFpQixPQUFBLFNBQUFoWCxFQUFBaEssR0FDQSxrQkFDQSxPQUFBZ0ssRUFBQWhLLEVBQUF1QixXQUFBbkYsRUFBQS9CLGVBcUJBLFNBQUFzcEMsSUFDQSxRQUFBemhDLEVBQUE3SCxVQUFBQyxPQUFBc3BDLEVBQUFsbkMsTUFBQXdGLEdBQUFFLEVBQUEsRUFBd0VBLEVBQUFGLEVBQWFFLElBQ3JGd2hDLEVBQUF4aEMsR0FBQS9ILFVBQUErSCxHQUdBLGdCQUFBbS9CLEdBQ0Esa0JBQ0EsUUFBQTk2QixFQUFBcE0sVUFBQUMsT0FBQTZILEVBQUF6RixNQUFBK0osR0FBQUMsRUFBQSxFQUF3RUEsRUFBQUQsRUFBZUMsSUFDdkZ2RSxFQUFBdUUsR0FBQXJNLFVBQUFxTSxHQUdBLElBQUE0QyxFQUFBaTRCLEVBQUFoZ0MsV0FBQW5GLEVBQUErRixHQUNBMGhDLEVBQUEsV0FDQSxVQUFBOW5DLE1BQUEsMkhBR0ErbkMsR0FDQXA1QixTQUFBcEIsRUFBQW9CLFNBQ0EzSSxTQUFBLFdBQ0EsT0FBQThoQyxFQUFBdGlDLFdBQUFuRixFQUFBL0IsYUFHQTBwQyxFQUFBSCxFQUFBdjhCLElBQUEsU0FBQTI4QixHQUNBLE9BQUFBLEVBQUFGLEtBSUEsT0FGQUQsRUFBQUosRUFBQWxpQyxXQUFBbkYsRUFBQTJuQyxFQUFBTixDQUFBbjZCLEVBQUF2SCxVQUVBN0gsS0FBd0JvUCxHQUN4QnZILFNBQUE4aEMsb0RDM2pCQSxJQUdBSSxFQUhBQyxFQUFBL3JDLEVBQUEsS0FNQThyQyxFQURBLG9CQUFBOTZCLEtBQ0FBLEtBQ0Msb0JBQUFsSSxPQUNEQSxZQUNDLElBQUEyQixFQUNEQSxFQUVBdEssRUFLQSxJQUFBd0gsRUFBQTdHLE9BQUFpckMsRUFBQSxFQUFBanJDLENBQUFnckMsR0FDQWpxQyxFQUFBLGdIQ2RhbXFDLFNBV1RDLFNBQVUsU0FBQ2xXLEVBQU9uekIsR0FHZCxJQUZBLElBQUlzcEMsRUFBWSxHQUVQOXJDLEVBQUksRUFBR0EsRUFBSTIxQixFQUFNNXpCLE9BQVEvQixJQUM5QixHQUFJMjFCLEVBQU0zMUIsR0FBR3dDLElBQU1BLEVBQUksQ0FDbkJzcEMsRUFBWW5XLEVBQU0zMUIsR0FDbEIsTUFJUixPQUFPOHJDLDRmQ2ZFQyxnQkEwRkFDLHFCQW1CQUMsbUJBU0FDLHFCQW1CQUMsaUJBbkpqQixJQUFBQyxFQUFBeHNDLEVBQUEsSUFFQXlzQyxFQUFBenNDLEVBQUEsSUFJQTBzQyxFQUFBMXNDLEVBQUEsSUFDQTJzQyxFQUFBM3NDLEVBQUEsSUFDQTRzQyxFQUFBNXNDLEVBQUEsK0JBRWlCbXNDLDZCQTBGQUMsNkJBbUJBQyw2QkFTQUMsNkJBbUJBQyxHQXpJVixTQUFVSixFQUFZeFYsRUFBT3FKLEdBQTdCLElBQUFWLEVBQUF1TixFQUFBQyxFQUFBL1csRUFBQW1XLEVBQUFhLEVBQUEzUCxFQUFBNFAsRUFBQTNyQyxFQUFBNHJDLEVBQUFDLEVBQUE1USxFQUFBd0IsRUFBQXFQLEVBQUFDLEVBQUFqZ0MsRUFBQXd4QixFQUFBME8sRUFBQSxPQUFBQyxtQkFBQUMsS0FBQSxTQUFBQyxHQUFBLGNBQUFBLEVBQUFDLEtBQUFELEVBQUE1b0MsTUFBQSxjQUFBNG9DLEVBQUE1b0MsS0FBQSxHQUVnQixFQUFBNG5DLEVBQUFsOUIsUUFBTyxTQUFDOEgsR0FBRCxPQUFXQSxFQUFNa29CLE9BRnhDLFVBRUdBLEVBRkhrTyxFQUFBRSxLQUtHYixFQUFTek4sTUFBSVEsY0FBY04sRUFBTTNJLEdBQ2pDbVcsRUFBZTFOLE1BQUlTLFNBQVNQLEVBQU0zSSxFQUFPa1csRUFBTyxJQUd0QyxRQUZKek4sTUFBSUMsT0FBT0MsRUFBTXdOLEdBRXJCaGlDLEtBVEwsQ0FBQTBpQyxFQUFBNW9DLEtBQUEsZ0JBQUE0b0MsRUFBQTVvQyxLQUFBLEdBV3FCLEVBQUE0bkMsRUFBQWw5QixRQUFPLFNBQUM4SCxHQUFELE9BQVdBLEVBQU0yZSxRQVg3QyxPQVdPQSxFQVhQeVgsRUFBQUUsS0FZT3hCLEVBQVlGLFFBQU1DLFNBQVNsVyxFQUFPaUssR0FFcEMrTSxFQUFhLEVBR2IzUCxPQWpCTCxFQWlCZ0I0UCxPQWpCaEIsRUFrQlUzckMsRUFBSSxFQWxCZCxhQWtCaUJBLEVBQUl3ckMsRUFBTzFxQyxRQWxCNUIsQ0FBQXFyQyxFQUFBNW9DLEtBQUEsWUFvQldxb0MsRUFBZ0I3TixNQUFJUyxTQUFTUCxFQUFNM0ksRUFBT2tXLEVBQU94ckMsSUFDakQ2ckMsRUFBVTlOLE1BQUlDLE9BQU9DLEVBQU0yTixHQUc3QjNRLE9BeEJULEVBd0JxQndCLE9BeEJyQixFQXlCa0MsUUFBekJvUCxFQUFRaFgsS0FBS3lYLFVBQ2JyUixFQUFhNFEsRUFBUWxzQixHQUFLa3NCLEVBQVFwc0IsR0FDbENnZCxFQUFhb1AsRUFBUW5zQixHQUFLbXNCLEVBQVFyc0IsS0FFbEN5YixFQUFhNFEsRUFBUW5zQixHQUFLbXNCLEVBQVFyc0IsR0FDbENpZCxFQUFhb1AsRUFBUWxzQixHQUFLa3NCLEVBQVFwc0IsSUE5QjNDcXNCLEVBa0M4QnpSLE9BQUs0QyxvQkFDMUI0TixFQUFVN1AsV0FDVjBRLEVBQ0F6USxFQUNBd0IsRUFDQW9QLEVBQVFoWCxLQUFLNkgsV0FDYm1QLEVBQVFoWCxLQUFLOEgsV0FDYmtQLEVBQVFoWCxLQUFLK0gsV0FDYmlQLEVBQVFoWCxLQUFLZ0ksV0FDYmdQLEVBQVFoWCxLQUFLK0YsT0FDYmlSLEVBQVFoWCxLQUFLZ0csT0FDYmdSLEVBQVFoWCxLQUFLaUksUUE3Q3RCaVAsRUFBQXpQLEVBQUF3UCxFQUFBLEdBa0NNL1AsRUFsQ05nUSxFQUFBLElBZ0R1QixJQWROSixFQWxDakJJLEVBQUEsS0FBQUksRUFBQTVvQyxLQUFBLGdCQWtEZXVJLEdBQ0Y4eEIsT0FBUWdPLEVBQ1J0TyxrQkFwRGI2TyxFQUFBNW9DLEtBQUEsSUF1RGUsRUFBQTRuQyxFQUFBaG5DLE1BQUksRUFBQWluQyxFQUFBek4sMkJBQTBCN3hCLElBdkQ3QyxRQUFBcWdDLEVBQUE1b0MsS0FBQSx3QkEyRGUrNUIsRUFBZ0JqRCxPQUFLaUQsY0FDdkJ2QixFQUNBOE8sRUFBVTdQLFdBQ1YwUSxHQUdFNS9CLEdBQ0Y4eEIsT0FBUWdPLEVBQ1J0TyxjQUFlQSxHQW5FNUI2TyxFQUFBNW9DLEtBQUEsSUFzRWUsRUFBQTRuQyxFQUFBaG5DLE1BQUksRUFBQWluQyxFQUFBek4sMkJBQTBCN3hCLElBdEU3QyxRQXdFUzQvQixFQUFhQyxFQUFZLEVBRVBkLEVBQVU3UCxXQUFXbDZCLE9BMUVoRCxRQWtCb0NkLElBbEJwQ21zQyxFQUFBNW9DLEtBQUEsbUJBa0ZtQixHQUFkb29DLEdBQ0FBLEVBQVksRUFBSWQsRUFBVTdQLFdBQVdsNkIsVUFDakQ0RyxRQUFRcEYsSUFBSXFwQyxHQUNaamtDLFFBQVFwRixJQUFJLFdBckZMLHlCQUFBNnBDLEVBQUFJLFNBQUFDLEVBQUE1NkIsTUEwRkEsU0FBVW01QixFQUFpQnpWLEdBQTNCLElBQUFvSixFQUFBQyxFQUFBNS9CLEVBQUEsT0FBQWt0QyxtQkFBQUMsS0FBQSxTQUFBTyxHQUFBLGNBQUFBLEVBQUFMLEtBQUFLLEVBQUFscEMsTUFBQSxjQUFBa3BDLEVBQUFscEMsS0FBQSxHQUVpQixFQUFBNG5DLEVBQUFsOUIsUUFBTyxTQUFDOEgsR0FBRCxPQUFXQSxFQUFNMm9CLFFBRnpDLE9BRUdBLEVBRkgrTixFQUFBSixLQUlDMU4sRUFBVyxHQUNONS9CLEVBQUksRUFMVixZQUthQSxFQUFJMi9CLEVBQU01OUIsUUFMdkIsQ0FBQTJyQyxFQUFBbHBDLEtBQUEsWUFNS203QixFQUFNMy9CLEdBQUd1MkIsT0FBU0EsRUFOdkIsQ0FBQW1YLEVBQUFscEMsS0FBQSxlQU9LbzdCLEVBQVdELEVBQU0zL0IsR0FBRzQvQixTQVB6QjhOLEVBQUFDLE9BQUEsbUJBSytCM3RDLElBTC9CMHRDLEVBQUFscEMsS0FBQSxtQkFZYSxJQUFabzdCLEVBWkQsQ0FBQThOLEVBQUFscEMsS0FBQSxnQkFBQWtwQyxFQUFBQyxPQUFBLHlCQUFBRCxFQUFBbHBDLEtBQUEsSUFnQkcsRUFBQTRuQyxFQUFBai9CLE1BQUs0K0IsRUFBYXhWLEVBQU9xSixHQWhCNUIseUJBQUE4TixFQUFBRixTQUFBSSxFQUFBLzZCLE1BbUJBLFNBQVVvNUIsRUFBZXBOLEdBQXpCLElBQUFLLEVBQUFXLEVBQUFDLEVBQUF2SixFQUFBLE9BQUEyVyxtQkFBQUMsS0FBQSxTQUFBVSxHQUFBLGNBQUFBLEVBQUFSLEtBQUFRLEVBQUFycEMsTUFBQSxjQUFBcXBDLEVBQUFycEMsS0FBQSxHQUVpQixFQUFBNG5DLEVBQUFsOUIsUUFBTyxTQUFDOEgsR0FBRCxPQUFXQSxFQUFNa29CLE9BRnpDLGNBRUdBLEVBRkgyTyxFQUFBUCxLQUFBek4sRUFJaUJiLE1BQUlHLGNBQWNELEVBQU1MLEdBSnpDaUIsRUFBQXZDLEVBQUFzQyxFQUFBLEdBSUl0SixFQUpKdUosRUFBQSxHQUFBQSxFQUFBLEdBQUErTixFQUFBcnBDLEtBQUEsR0FNRyxFQUFBNG5DLEVBQUFqL0IsTUFBSzYrQixFQUFrQnpWLEdBTjFCLHdCQUFBc1gsRUFBQUwsU0FBQU0sRUFBQWo3QixNQVNBLFNBQVVxNUIsRUFBaUJ0TSxHQUEzQixJQUFBRCxFQUFBcEosRUFBQXYyQixFQUFBLE9BQUFrdEMsbUJBQUFDLEtBQUEsU0FBQVksR0FBQSxjQUFBQSxFQUFBVixLQUFBVSxFQUFBdnBDLE1BQUEsY0FBQXVwQyxFQUFBdnBDLEtBQUEsR0FFaUIsRUFBQTRuQyxFQUFBbDlCLFFBQU8sU0FBQzhILEdBQUQsT0FBV0EsRUFBTTJvQixRQUZ6QyxPQUVHQSxFQUZIb08sRUFBQVQsS0FJQy9XLEVBQVEsR0FDSHYyQixFQUFJLEVBTFYsWUFLYUEsRUFBSTIvQixFQUFNNTlCLFFBTHZCLENBQUFnc0MsRUFBQXZwQyxLQUFBLFlBTUttN0IsRUFBTTMvQixHQUFHNC9CLFVBQVlBLEVBTjFCLENBQUFtTyxFQUFBdnBDLEtBQUEsZUFPSyt4QixFQUFRb0osRUFBTTMvQixHQUFHdTJCLE1BUHRCd1gsRUFBQUosT0FBQSxtQkFLK0IzdEMsSUFML0IrdEMsRUFBQXZwQyxLQUFBLG1CQVlVLElBQVQreEIsRUFaRCxDQUFBd1gsRUFBQXZwQyxLQUFBLGdCQUFBdXBDLEVBQUFKLE9BQUEseUJBQUFJLEVBQUF2cEMsS0FBQSxJQWdCRyxFQUFBNG5DLEVBQUFqL0IsTUFBSzQrQixFQUFheFYsRUFBT3FKLEdBaEI1Qix5QkFBQW1PLEVBQUFQLFNBQUFRLEVBQUFuN0IsTUFtQkEsU0FBVXM1QixJQUFWLElBQUF4TSxFQUFBMy9CLEVBQUEsT0FBQWt0QyxtQkFBQUMsS0FBQSxTQUFBYyxHQUFBLGNBQUFBLEVBQUFaLEtBQUFZLEVBQUF6cEMsTUFBQSxjQUFBeXBDLEVBQUF6cEMsS0FBQSxHQUVpQixFQUFBNG5DLEVBQUFsOUIsUUFBTyxTQUFDOEgsR0FBRCxPQUFXQSxFQUFNMm9CLFFBRnpDLE9BRUdBLEVBRkhzTyxFQUFBWCxLQUlNdHRDLEVBQUksRUFKVixZQUlhQSxFQUFJMi9CLEVBQU01OUIsUUFKdkIsQ0FBQWtzQyxFQUFBenBDLEtBQUEsZ0JBQUF5cEMsRUFBQXpwQyxLQUFBLEdBS08sRUFBQTRuQyxFQUFBai9CLE1BQUs0K0IsRUFBYXBNLEVBQU0zL0IsR0FBR3UyQixNQUFPb0osRUFBTTMvQixHQUFHNC9CLFVBTGxELE9BSStCNS9CLElBSi9CaXVDLEVBQUF6cEMsS0FBQSxpQ0FBQXlwQyxFQUFBVCxTQUFBVSxFQUFBcjdCLHNGQ25KQSxJQUFNczdCLGlDQUErQiwrQkFDL0JDLGlDQUErQiwrQkFHL0JDLCtCQUErQixXQUFrQixJQUFqQnRoQyxFQUFpQmpMLFVBQUFDLE9BQUEsUUFBQThCLElBQUEvQixVQUFBLEdBQUFBLFVBQUEsTUFDMUQsT0FDSTRJLEtBQU15akMsRUFDTnBoQyxTQUNJd3BCLE1BQU94cEIsRUFBUXdwQixNQUNmcUosU0FBVTd5QixFQUFRNnlCLFlBS2pCME8sK0JBQStCLFdBQWtCLElBQWpCdmhDLEVBQWlCakwsVUFBQUMsT0FBQSxRQUFBOEIsSUFBQS9CLFVBQUEsR0FBQUEsVUFBQSxNQUMxRCxPQUNJNEksS0FBTTBqQyxFQUNOcmhDLFNBQ0l3cEIsTUFBT3hwQixFQUFRd3BCLHdGQ2xCcEIsSUFBTWdZLHlCQUF1Qix1QkFHdkJDLHVCQUF1QixXQUFrQixJQUFqQnpoQyxFQUFpQmpMLFVBQUFDLE9BQUEsUUFBQThCLElBQUEvQixVQUFBLEdBQUFBLFVBQUEsTUFDbEQsT0FDSTRJLEtBQU02akMsRUFDTnhoQyxTQUNJdkssR0FBSXVLLEVBQVF2SyxHQUNab1csRUFBSTdMLEVBQVE2TCxFQUNaQyxFQUFJOUwsRUFBUThMLG9GQ1RqQixJQUFNNDFCLHlDQUF1Qyx1Q0FHdkNDLHVDQUF1QyxXQUFrQixJQUFqQjNoQyxFQUFpQmpMLFVBQUFDLE9BQUEsUUFBQThCLElBQUEvQixVQUFBLEdBQUFBLFVBQUEsTUFDbEUsT0FDSTRJLEtBQU0rakMsRUFDTjFoQyxTQUNJeXFCLElBQUt6cUIsRUFBUXlxQixzRkNQbEIsSUFBTW1YLHNCQUFvQixvQkFHcEJDLG9CQUFvQixXQUFrQixJQUFqQjdoQyxFQUFpQmpMLFVBQUFDLE9BQUEsUUFBQThCLElBQUEvQixVQUFBLEdBQUFBLFVBQUEsTUFDL0MsT0FDSTRJLEtBQU1pa0MsRUFDTjVoQyxTQUNJOGhDLE1BQU85aEMsRUFBUThoQyx3RkNQcEIsSUFBTUMsc0NBQW9DLG9DQUNwQ0Msc0NBQW9DLG9DQUdwQ0Msb0NBQW9DLFdBQWtCLElBQWpCamlDLEVBQWlCakwsVUFBQUMsT0FBQSxRQUFBOEIsSUFBQS9CLFVBQUEsR0FBQUEsVUFBQSxNQUMvRCxPQUNJNEksS0FBTW9rQyxFQUNOL2hDLFNBQ0l3cEIsTUFBT3hwQixFQUFRd3BCLE1BQ2ZxSixTQUFVN3lCLEVBQVE2eUIsWUFLakJxUCxvQ0FBb0MsV0FBa0IsSUFBakJsaUMsRUFBaUJqTCxVQUFBQyxPQUFBLFFBQUE4QixJQUFBL0IsVUFBQSxHQUFBQSxVQUFBLE1BQy9ELE9BQ0k0SSxLQUFNcWtDLEVBQ05oaUMsU0FDSXdwQixNQUFPeHBCLEVBQVF3cEIsd0ZDbEJwQixJQUFNMlksdUNBQXFDLHFDQUNyQ0MsdUNBQXFDLHFDQUNyQ0MsdUNBQXFDLHFDQUNyQ0MsaUNBQXFDLCtCQUNyQ0MsaUNBQXFDLCtCQUdyQ0MscUNBQXFDLFdBQWtCLElBQWpCeGlDLEVBQWlCakwsVUFBQUMsT0FBQSxRQUFBOEIsSUFBQS9CLFVBQUEsR0FBQUEsVUFBQSxNQUNoRSxPQUNJNEksS0FBTXdrQyxFQUNObmlDLFNBQ0k0b0IsTUFBTzVvQixFQUFRNG9CLFNBS2Q2WixxQ0FBcUMsV0FBa0IsSUFBakJ6aUMsRUFBaUJqTCxVQUFBQyxPQUFBLFFBQUE4QixJQUFBL0IsVUFBQSxHQUFBQSxVQUFBLE1BQ2hFLE9BQ0k0SSxLQUFNeWtDLEVBQ05waUMsU0FDSXZLLEdBQUl1SyxFQUFRdkssTUFLWGl0QyxxQ0FBcUMsV0FBa0IsSUFBakIxaUMsRUFBaUJqTCxVQUFBQyxPQUFBLFFBQUE4QixJQUFBL0IsVUFBQSxHQUFBQSxVQUFBLE1BQ2hFLE9BQ0k0SSxLQUFNMGtDLEVBQ05yaUMsU0FDSXZLLEdBQUl1SyxFQUFRdkssR0FDWmtJLEtBQU1xQyxFQUFRckMsS0FDZG9yQixLQUFNL29CLEVBQVErb0IsS0FDZEMsTUFBT2hwQixFQUFRZ3BCLFNBS2QyWiwrQkFBK0IsV0FBa0IsSUFBakIzaUMsRUFBaUJqTCxVQUFBQyxPQUFBLFFBQUE4QixJQUFBL0IsVUFBQSxHQUFBQSxVQUFBLE1BQzFELE9BQ0k0SSxLQUFNMmtDLEVBQ050aUMsU0FDSXZLLEdBQUl1SyxFQUFRdkssTUFLWG10QywrQkFBK0IsV0FBa0IsSUFBakI1aUMsRUFBaUJqTCxVQUFBQyxPQUFBLFFBQUE4QixJQUFBL0IsVUFBQSxHQUFBQSxVQUFBLE1BQzFELE9BQ0k0SSxLQUFNNGtDLEVBQ052aUMsU0FDSXZLLEdBQUl1SyxFQUFRdksscUZDbERqQixJQUFNb3RDLDBDQUF3Qyx3Q0FHeENDLHdDQUF3QyxXQUFrQixJQUFqQjlpQyxFQUFpQmpMLFVBQUFDLE9BQUEsUUFBQThCLElBQUEvQixVQUFBLEdBQUFBLFVBQUEsTUFDbkUsT0FDSTRJLEtBQU1rbEMsRUFDTjdpQyxTQUNJeXFCLElBQUt6cUIsRUFBUXlxQixzRkNQbEIsSUFBTXNZLHlDQUF1Qyx1Q0FDdkNDLHlDQUF1Qyx1Q0FDdkNDLHlDQUF1Qyx1Q0FHdkNDLHVDQUF1QyxXQUFrQixJQUFqQmxqQyxFQUFpQmpMLFVBQUFDLE9BQUEsUUFBQThCLElBQUEvQixVQUFBLEdBQUFBLFVBQUEsTUFDbEUsT0FDSTRJLEtBQU1vbEMsRUFDTi9pQyxTQUNJeXFCLElBQUt6cUIsRUFBUXlxQixPQUtaMFksdUNBQXVDLFdBQWtCLElBQWpCbmpDLEVBQWlCakwsVUFBQUMsT0FBQSxRQUFBOEIsSUFBQS9CLFVBQUEsR0FBQUEsVUFBQSxNQUNsRSxPQUNJNEksS0FBTXFsQyxFQUNOaGpDLFNBQ0l2SyxHQUFJdUssRUFBUXZLLE1BS1gydEMsdUNBQXVDLFdBQWtCLElBQWpCcGpDLEVBQWlCakwsVUFBQUMsT0FBQSxRQUFBOEIsSUFBQS9CLFVBQUEsR0FBQUEsVUFBQSxNQUNsRSxPQUNJNEksS0FBTXNsQyxFQUNOampDLFNBQ0l5cUIsSUFBS3pxQixFQUFReXFCLHNGQzNCbEIsSUFBTTRZLG9DQUFrQyxrQ0FDbENDLG9DQUFrQyxrQ0FDbENDLHVDQUFxQyxxQ0FHckNDLGtDQUFrQyxXQUFrQnp1QyxVQUFBQyxPQUFBLFFBQUE4QixJQUFBL0IsVUFBQSxJQUFBQSxVQUFBLEdBQzdELE9BQ0k0SSxLQUFNMGxDLEVBQ05yakMsYUFLS3lqQyxrQ0FBa0MsV0FBa0IxdUMsVUFBQUMsT0FBQSxRQUFBOEIsSUFBQS9CLFVBQUEsSUFBQUEsVUFBQSxHQUM3RCxPQUNJNEksS0FBTTJsQyxFQUNOdGpDLGFBS0swakMscUNBQXFDLFdBQWtCM3VDLFVBQUFDLE9BQUEsUUFBQThCLElBQUEvQixVQUFBLElBQUFBLFVBQUEsR0FDaEUsT0FDSTRJLEtBQU00bEMsRUFDTnZqQyw0RkN4QkQsSUFBTTJqQyx1QkFBcUIscUJBR3JCQyxxQkFBcUIsV0FBa0IsSUFBakI1akMsRUFBaUJqTCxVQUFBQyxPQUFBLFFBQUE4QixJQUFBL0IsVUFBQSxHQUFBQSxVQUFBLE1BQ2hELE9BQ0k0SSxLQUFNZ21DLEVBQ04zakMsU0FDSXZLLEdBQUl1SyxFQUFRdkssR0FDWm9XLEVBQUk3TCxFQUFRNkwsRUFDWkMsRUFBSTlMLEVBQVE4TCxvQkNSeEI5WSxFQUFBRCxRQUFBNlEsS0FBQWsrQixPQUFBLFNBQUFqMkIsRUFBQWc0QixFQUFBQyxFQUFBQyxFQUFBQyxHQUNBLE9BQ0EsSUFBQWp2QyxVQUFBQyxRQUVBNlcsTUFFQWc0QixNQUVBQyxNQUVBQyxNQUVBQyxLQUNBN1AsSUFDQXRvQixJQUFBcW5CLEtBQUFybkIsS0FBQXFuQixJQUFBcm5CLEdBQ0FBLEVBQUFnNEIsSUFBQUcsRUFBQUQsSUFBQUQsRUFBQUQsR0FBQUUsb0JDaEJBLElBQUF4WSxFQUFBMTRCLEVBQUEsSUFFQUcsRUFBQUQsUUFBQSxTQUFBeXVCLEVBQUFwRixHQUNBLElBQUE1aEIsS0FFQSxPQURBK3dCLEVBQUEvSixHQUFBLEVBQUFobkIsRUFBQWIsS0FBQWEsRUFBQTRoQixHQUNBNWhCLG9CQ0pBLElBQUEyZSxFQUFBdG1CLEVBQUEsSUFDQXFHLEVBQUFyRyxFQUFBLEtBQ0FHLEVBQUFELFFBQUEsU0FBQWlpQixHQUNBLGtCQUNBLEdBQUFtRSxFQUFBclQsT0FBQWtQLEVBQUEsTUFBQXJSLFVBQUFxUixFQUFBLHlCQUNBLE9BQUE5YixFQUFBNE0seUJDTkEsSUFBQW0rQixFQUFBcHhDLEVBQUEsSUFDQW1qQixFQUFBbmpCLEVBQUEsSUFDQXF4QyxFQUFBcnhDLEVBQUEsSUFBQW1FLEVBQ0FoRSxFQUFBRCxRQUFBLFNBQUFveEMsR0FDQSxnQkFBQTNzQyxHQU9BLElBTkEsSUFLQXRDLEVBTEFzUCxFQUFBd1IsRUFBQXhlLEdBQ0EyUixFQUFBODZCLEVBQUF6L0IsR0FDQXhQLEVBQUFtVSxFQUFBblUsT0FDQS9CLEVBQUEsRUFDQXVILEtBRUF4RixFQUFBL0IsR0FBQWl4QyxFQUFBOXdDLEtBQUFvUixFQUFBdFAsRUFBQWlVLEVBQUFsVyxPQUNBdUgsRUFBQWIsS0FBQXdxQyxHQUFBanZDLEVBQUFzUCxFQUFBdFAsSUFBQXNQLEVBQUF0UCxJQUNLLE9BQUFzRixxQkNaTCxJQUFBc2MsRUFBQWprQixFQUFBLEdBQ0F1eEMsRUFBQXZ4QyxFQUFBLEtBQ0FxZSxFQUFBcmUsRUFBQSxJQUVBRyxFQUFBRCxRQUFBLFNBQUF1akIsRUFBQSt0QixFQUFBQyxFQUFBQyxHQUNBLElBQUFubUMsRUFBQW1DLE9BQUEyUSxFQUFBb0YsSUFDQWt1QixFQUFBcG1DLEVBQUFwSixPQUNBeXZDLE9BQUEzdEMsSUFBQXd0QyxFQUFBLElBQUEvakMsT0FBQStqQyxHQUNBSSxFQUFBNXRCLEVBQUF1dEIsR0FDQSxHQUFBSyxHQUFBRixHQUFBLElBQUFDLEVBQUEsT0FBQXJtQyxFQUNBLElBQUF1bUMsRUFBQUQsRUFBQUYsRUFDQUksRUFBQVIsRUFBQWh4QyxLQUFBcXhDLEVBQUE3Z0MsS0FBQWdVLEtBQUErc0IsRUFBQUYsRUFBQXp2QyxTQUVBLE9BREE0dkMsRUFBQTV2QyxPQUFBMnZDLElBQUFDLElBQUE1OEIsTUFBQSxFQUFBMjhCLElBQ0FKLEVBQUFLLEVBQUF4bUMsSUFBQXdtQyxpQ0NaQSxJQUFBdnRDLEVBQUF4RSxFQUFBLElBQ0E2USxFQUFBN1EsRUFBQSxHQUNBaWtCLEVBQUFqa0IsRUFBQSxHQUNBMEosRUFBQTFKLEVBQUEsSUFDQWd5QyxFQUFBaHlDLEVBQUEsRUFBQUEsQ0FBQSxzQkFnQ0FHLEVBQUFELFFBOUJBLFNBQUEreEMsRUFBQWh3QyxFQUFBc2tDLEVBQUFua0MsRUFBQTh2QyxFQUFBdm1CLEVBQUF3bUIsRUFBQUMsRUFBQUMsR0FNQSxJQUxBLElBR0FuK0IsRUFBQW8rQixFQUhBQyxFQUFBNW1CLEVBQ0E2bUIsRUFBQSxFQUNBM1osSUFBQXVaLEdBQUExb0MsRUFBQTBvQyxFQUFBQyxFQUFBLEdBR0FHLEVBQUFOLEdBQUEsQ0FDQSxHQUFBTSxLQUFBcHdDLEVBQUEsQ0FTQSxHQVJBOFIsRUFBQTJrQixJQUFBejJCLEVBQUFvd0MsS0FBQWpNLEdBQUFua0MsRUFBQW93QyxHQUVBRixHQUFBLEVBQ0F6aEMsRUFBQXFELEtBRUFvK0IsT0FBQXJ1QyxLQURBcXVDLEVBQUFwK0IsRUFBQTg5QixNQUNBTSxFQUFBOXRDLEVBQUEwUCxJQUdBbytCLEdBQUFILEVBQUEsRUFDQUksRUFBQU4sRUFBQWh3QyxFQUFBc2tDLEVBQUFyeUIsRUFBQStQLEVBQUEvUCxFQUFBL1IsUUFBQW93QyxFQUFBSixFQUFBLFNBQ08sQ0FDUCxHQUFBSSxHQUFBLHVCQUFBemhDLFlBQ0E3TyxFQUFBc3dDLEdBQUFyK0IsRUFHQXErQixJQUVBQyxJQUVBLE9BQUFELG9CQ2xDQSxJQUFBL3JCLEVBQUF4bUIsRUFBQSxJQUNBeXlDLEVBQUF6eUMsRUFBQSxJQUNBdVIsRUFBQXZSLEVBQUEsR0FDQTB5QyxFQUFBMXlDLEVBQUEsR0FBQTB5QyxRQUNBdnlDLEVBQUFELFFBQUF3eUMsS0FBQUMsU0FBQSxTQUFBaHVDLEdBQ0EsSUFBQTJSLEVBQUFrUSxFQUFBcmlCLEVBQUFvTixFQUFBNU0sSUFDQWl1QyxFQUFBSCxFQUFBdHVDLEVBQ0EsT0FBQXl1QyxFQUFBdDhCLEVBQUF6SCxPQUFBK2pDLEVBQUFqdUMsSUFBQTJSLG9CQ1BBLElBQUFqRixFQUFBclIsRUFBQSxJQUNBaWtCLEVBQUFqa0IsRUFBQSxHQUNBRyxFQUFBRCxRQUFBLFNBQUF5RSxHQUNBLFFBQUFWLElBQUFVLEVBQUEsU0FDQSxJQUFBUCxFQUFBaU4sRUFBQTFNLEdBQ0F4QyxFQUFBOGhCLEVBQUE3ZixHQUNBLEdBQUFBLElBQUFqQyxFQUFBLE1BQUFtbEIsV0FBQSxpQkFDQSxPQUFBbmxCLGlDQ1BBLElBQUFna0IsRUFBQW5tQixFQUFBLElBQ0Eyd0IsRUFBQTN3QixFQUFBLElBQUEyd0IsUUFDQXBmLEVBQUF2UixFQUFBLEdBQ0E2USxFQUFBN1EsRUFBQSxHQUNBaW1CLEVBQUFqbUIsRUFBQSxJQUNBMDRCLEVBQUExNEIsRUFBQSxJQUNBMm1CLEVBQUEzbUIsRUFBQSxJQUNBNnlDLEVBQUE3eUMsRUFBQSxJQUNBd3FCLEVBQUF4cUIsRUFBQSxJQUNBaW9CLEVBQUF0QixFQUFBLEdBQ0F1QixFQUFBdkIsRUFBQSxHQUNBL2pCLEVBQUEsRUFHQWt3QyxFQUFBLFNBQUFydkIsR0FDQSxPQUFBQSxFQUFBc3ZCLEtBQUF0dkIsRUFBQXN2QixHQUFBLElBQUFDLElBRUFBLEVBQUEsV0FDQS8vQixLQUFBcEIsTUFFQW9oQyxFQUFBLFNBQUE5aEMsRUFBQTlPLEdBQ0EsT0FBQTRsQixFQUFBOVcsRUFBQVUsRUFBQSxTQUFBbE4sR0FDQSxPQUFBQSxFQUFBLEtBQUF0QyxLQUdBMndDLEVBQUF2eEMsV0FDQVAsSUFBQSxTQUFBbUIsR0FDQSxJQUFBMnVCLEVBQUFpaUIsRUFBQWhnQyxLQUFBNVEsR0FDQSxHQUFBMnVCLEVBQUEsT0FBQUEsRUFBQSxJQUVBek8sSUFBQSxTQUFBbGdCLEdBQ0EsUUFBQTR3QyxFQUFBaGdDLEtBQUE1USxJQUVBbWpCLElBQUEsU0FBQW5qQixFQUFBakIsR0FDQSxJQUFBNHZCLEVBQUFpaUIsRUFBQWhnQyxLQUFBNVEsR0FDQTJ1QixJQUFBLEdBQUE1dkIsRUFDQTZSLEtBQUFwQixFQUFBL0ssTUFBQXpFLEVBQUFqQixLQUVBOHhDLE9BQUEsU0FBQTd3QyxHQUNBLElBQUE2RCxFQUFBZ2lCLEVBQUFqVixLQUFBcEIsRUFBQSxTQUFBbE4sR0FDQSxPQUFBQSxFQUFBLEtBQUF0QyxJQUdBLE9BREE2RCxHQUFBK00sS0FBQXBCLEVBQUF6TCxPQUFBRixFQUFBLE1BQ0FBLElBSUEvRixFQUFBRCxTQUNBNjVCLGVBQUEsU0FBQXZNLEVBQUFyTCxFQUFBa0MsRUFBQW1WLEdBQ0EsSUFBQS9PLEVBQUErQyxFQUFBLFNBQUEvSixFQUFBM2UsR0FDQW1oQixFQUFBeEMsRUFBQWdILEVBQUF0SSxFQUFBLE1BQ0FzQixFQUFBK1EsR0FBQXJTLEVBQ0FzQixFQUFBMGlCLEdBQUF2akMsSUFDQTZnQixFQUFBc3ZCLFFBQUE5dUMsT0FDQUEsR0FBQWEsR0FBQTR6QixFQUFBNXpCLEVBQUF1ZixFQUFBWixFQUFBK1YsR0FBQS9WLEtBb0JBLE9BbEJBMEMsRUFBQXNFLEVBQUFocEIsV0FHQXl4QyxPQUFBLFNBQUE3d0MsR0FDQSxJQUFBd08sRUFBQXhPLEdBQUEsU0FDQSxJQUFBOHJCLEVBQUF3QyxFQUFBdHVCLEdBQ0EsV0FBQThyQixFQUFBMmtCLEVBQUF0b0IsRUFBQXZYLEtBQUFrUCxJQUFBLE9BQUE5ZixHQUNBOHJCLEdBQUEwa0IsRUFBQTFrQixFQUFBbGIsS0FBQWt6QixZQUFBaFksRUFBQWxiLEtBQUFrekIsS0FJQTVqQixJQUFBLFNBQUFsZ0IsR0FDQSxJQUFBd08sRUFBQXhPLEdBQUEsU0FDQSxJQUFBOHJCLEVBQUF3QyxFQUFBdHVCLEdBQ0EsV0FBQThyQixFQUFBMmtCLEVBQUF0b0IsRUFBQXZYLEtBQUFrUCxJQUFBSSxJQUFBbGdCLEdBQ0E4ckIsR0FBQTBrQixFQUFBMWtCLEVBQUFsYixLQUFBa3pCLE9BR0ExYixHQUVBaGtCLElBQUEsU0FBQWdkLEVBQUFwaEIsRUFBQWpCLEdBQ0EsSUFBQStzQixFQUFBd0MsRUFBQXBmLEVBQUFsUCxJQUFBLEdBR0EsT0FGQSxJQUFBOHJCLEVBQUEya0IsRUFBQXJ2QixHQUFBK0IsSUFBQW5qQixFQUFBakIsR0FDQStzQixFQUFBMUssRUFBQTBpQixJQUFBL2tDLEVBQ0FxaUIsR0FFQTB2QixRQUFBTCxpQ0NsRkEsSUFhQU0sRUFiQUMsRUFBQXJ6QyxFQUFBLEdBQUFBLENBQUEsR0FDQTRLLEVBQUE1SyxFQUFBLElBQ0F3d0IsRUFBQXh3QixFQUFBLElBQ0FnQyxFQUFBaEMsRUFBQSxLQUNBc3pDLEVBQUF0ekMsRUFBQSxLQUNBNlEsRUFBQTdRLEVBQUEsR0FDQTRoQixFQUFBNWhCLEVBQUEsR0FDQXdxQixFQUFBeHFCLEVBQUEsSUFFQTJ3QixFQUFBSCxFQUFBRyxRQUNBUCxFQUFBdHZCLE9BQUFzdkIsYUFDQTBpQixFQUFBUSxFQUFBSCxRQUNBSSxLQUdBL2xCLEVBQUEsU0FBQXRzQixHQUNBLGtCQUNBLE9BQUFBLEVBQUErUixLQUFBL1EsVUFBQUMsT0FBQSxFQUFBRCxVQUFBLFFBQUErQixLQUlBbzFCLEdBRUFuNEIsSUFBQSxTQUFBbUIsR0FDQSxHQUFBd08sRUFBQXhPLEdBQUEsQ0FDQSxJQUFBOHJCLEVBQUF3QyxFQUFBdHVCLEdBQ0EsV0FBQThyQixFQUFBMmtCLEVBQUF0b0IsRUFBQXZYLEtBbEJBLFlBa0JBL1IsSUFBQW1CLEdBQ0E4ckIsSUFBQWxiLEtBQUFrekIsU0FBQWxpQyxJQUlBdWhCLElBQUEsU0FBQW5qQixFQUFBakIsR0FDQSxPQUFBa3lDLEVBQUE3c0MsSUFBQStqQixFQUFBdlgsS0F4QkEsV0F3QkE1USxFQUFBakIsS0FLQW95QyxFQUFBcnpDLEVBQUFELFFBQUFGLEVBQUEsR0FBQUEsQ0E3QkEsVUE2QkF3dEIsRUFBQTZMLEVBQUFpYSxHQUFBLE1BR0ExeEIsRUFBQSxXQUF1QixlQUFBNHhCLEdBQUFodUIsS0FBQTFrQixPQUFBMnlDLFFBQUEzeUMsUUFBQXl5QyxHQUFBLEdBQUFyeUMsSUFBQXF5QyxPQUV2QnZ4QyxHQURBb3hDLEVBQUFFLEVBQUF2WixlQUFBdk0sRUFqQ0EsWUFrQ0EvckIsVUFBQTQzQixHQUNBN0ksRUFBQUMsTUFBQSxFQUNBNGlCLEdBQUEscUNBQUFoeEMsR0FDQSxJQUFBb3BCLEVBQUErbkIsRUFBQS94QyxVQUNBOGhCLEVBQUFrSSxFQUFBcHBCLEdBQ0F1SSxFQUFBNmdCLEVBQUFwcEIsRUFBQSxTQUFBd1AsRUFBQWhLLEdBRUEsR0FBQWdKLEVBQUFnQixLQUFBdWUsRUFBQXZlLEdBQUEsQ0FDQW9CLEtBQUF5Z0MsS0FBQXpnQyxLQUFBeWdDLEdBQUEsSUFBQU4sR0FDQSxJQUFBenJDLEVBQUFzTCxLQUFBeWdDLEdBQUFyeEMsR0FBQXdQLEVBQUFoSyxHQUNBLGFBQUF4RixFQUFBNFEsS0FBQXRMLEVBRU8sT0FBQTRiLEVBQUFoakIsS0FBQTBTLEtBQUFwQixFQUFBaEssc0NDdERQLElBQUE4ckMsRUFBQTN6QyxFQUFBLEtBQ0F3cUIsRUFBQXhxQixFQUFBLElBSUFHLEVBQUFELFFBQUFGLEVBQUEsR0FBQUEsQ0FIQSxNQUdBLFNBQUFrQixHQUNBLGtCQUF5QixPQUFBQSxFQUFBK1IsS0FBQS9RLFVBQUFDLE9BQUEsRUFBQUQsVUFBQSxRQUFBK0IsTUFHekIydkMsSUFBQSxTQUFBeHlDLEdBQ0EsT0FBQXV5QyxFQUFBbHRDLElBQUErakIsRUFBQXZYLEtBUkEsT0FRQTdSLEVBQUEsSUFBQUEsRUFBQSxFQUFBQSxPQUVDdXlDLGlDQ1pELElBQUFqaUMsRUFBQTFSLEVBQUEsSUFBQW1FLEVBQ0FvUCxFQUFBdlQsRUFBQSxJQUNBbW1CLEVBQUFubUIsRUFBQSxJQUNBMEosRUFBQTFKLEVBQUEsSUFDQWltQixFQUFBam1CLEVBQUEsSUFDQTA0QixFQUFBMTRCLEVBQUEsSUFDQTZ6QyxFQUFBN3pDLEVBQUEsSUFDQWlyQixFQUFBanJCLEVBQUEsS0FDQWluQixFQUFBam5CLEVBQUEsSUFDQWl6QixFQUFBanpCLEVBQUEsSUFDQTB3QixFQUFBMXdCLEVBQUEsSUFBQTB3QixRQUNBbEcsRUFBQXhxQixFQUFBLElBQ0E4ekMsRUFBQTdnQixFQUFBLFlBRUE4Z0IsRUFBQSxTQUFBdHdCLEVBQUFwaEIsR0FFQSxJQUNBMnVCLEVBREE5cUIsRUFBQXdxQixFQUFBcnVCLEdBRUEsU0FBQTZELEVBQUEsT0FBQXVkLEVBQUEwaUIsR0FBQWpnQyxHQUVBLElBQUE4cUIsRUFBQXZOLEVBQUFpd0IsR0FBdUIxaUIsRUFBT0EsSUFBQTN2QixFQUM5QixHQUFBMnZCLEVBQUFnakIsR0FBQTN4QyxFQUFBLE9BQUEydUIsR0FJQTd3QixFQUFBRCxTQUNBNjVCLGVBQUEsU0FBQXZNLEVBQUFyTCxFQUFBa0MsRUFBQW1WLEdBQ0EsSUFBQS9PLEVBQUErQyxFQUFBLFNBQUEvSixFQUFBM2UsR0FDQW1oQixFQUFBeEMsRUFBQWdILEVBQUF0SSxFQUFBLE1BQ0FzQixFQUFBK1EsR0FBQXJTLEVBQ0FzQixFQUFBMGlCLEdBQUE1eUIsRUFBQSxNQUNBa1EsRUFBQWl3QixRQUFBenZDLEVBQ0F3ZixFQUFBc3ZCLFFBQUE5dUMsRUFDQXdmLEVBQUFxd0IsR0FBQSxPQUNBN3ZDLEdBQUFhLEdBQUE0ekIsRUFBQTV6QixFQUFBdWYsRUFBQVosRUFBQStWLEdBQUEvVixLQXNEQSxPQXBEQTBDLEVBQUFzRSxFQUFBaHBCLFdBR0F5VCxNQUFBLFdBQ0EsUUFBQXVPLEVBQUErRyxFQUFBdlgsS0FBQWtQLEdBQUFnTSxFQUFBMUssRUFBQTBpQixHQUFBblYsRUFBQXZOLEVBQUFpd0IsR0FBOEUxaUIsRUFBT0EsSUFBQTN2QixFQUNyRjJ2QixFQUFBN3ZCLEdBQUEsRUFDQTZ2QixFQUFBcnZCLElBQUFxdkIsRUFBQXJ2QixFQUFBcXZCLEVBQUFydkIsRUFBQU4sT0FBQTRDLFVBQ0FrcUIsRUFBQTZDLEVBQUE1d0IsR0FFQXFqQixFQUFBaXdCLEdBQUFqd0IsRUFBQXN2QixRQUFBOXVDLEVBQ0F3ZixFQUFBcXdCLEdBQUEsR0FJQVosT0FBQSxTQUFBN3dDLEdBQ0EsSUFBQW9oQixFQUFBK0csRUFBQXZYLEtBQUFrUCxHQUNBNk8sRUFBQStpQixFQUFBdHdCLEVBQUFwaEIsR0FDQSxHQUFBMnVCLEVBQUEsQ0FDQSxJQUFBcHNCLEVBQUFvc0IsRUFBQTN2QixFQUNBb3NDLEVBQUF6YyxFQUFBcnZCLFNBQ0E4aEIsRUFBQTBpQixHQUFBblYsRUFBQTV3QixHQUNBNHdCLEVBQUE3dkIsR0FBQSxFQUNBc3NDLE1BQUFwc0MsRUFBQXVELEdBQ0FBLE1BQUFqRCxFQUFBOHJDLEdBQ0FocUIsRUFBQWl3QixJQUFBMWlCLElBQUF2TixFQUFBaXdCLEdBQUE5dUMsR0FDQTZlLEVBQUFzdkIsSUFBQS9oQixJQUFBdk4sRUFBQXN2QixHQUFBdEYsR0FDQWhxQixFQUFBcXdCLEtBQ1MsUUFBQTlpQixHQUlUem1CLFFBQUEsU0FBQXFhLEdBQ0E0RixFQUFBdlgsS0FBQWtQLEdBR0EsSUFGQSxJQUNBNk8sRUFEQTdzQixFQUFBdUYsRUFBQWtiLEVBQUExaUIsVUFBQUMsT0FBQSxFQUFBRCxVQUFBLFFBQUErQixFQUFBLEdBRUErc0IsTUFBQTN2QixFQUFBNFIsS0FBQXlnQyxJQUdBLElBRkF2dkMsRUFBQTZzQixFQUFBNXRCLEVBQUE0dEIsRUFBQWdqQixFQUFBL2dDLE1BRUErZCxLQUFBN3ZCLEdBQUE2dkIsSUFBQXJ2QixHQUtBNGdCLElBQUEsU0FBQWxnQixHQUNBLFFBQUEweEMsRUFBQXZwQixFQUFBdlgsS0FBQWtQLEdBQUE5ZixNQUdBNHdCLEdBQUF2aEIsRUFBQStZLEVBQUFocEIsVUFBQSxRQUNBUCxJQUFBLFdBQ0EsT0FBQXNwQixFQUFBdlgsS0FBQWtQLEdBQUEyeEIsTUFHQXJwQixHQUVBaGtCLElBQUEsU0FBQWdkLEVBQUFwaEIsRUFBQWpCLEdBQ0EsSUFDQXFzQyxFQUFBdm5DLEVBREE4cUIsRUFBQStpQixFQUFBdHdCLEVBQUFwaEIsR0FvQkssT0FqQkwydUIsRUFDQUEsRUFBQTV0QixFQUFBaEMsR0FHQXFpQixFQUFBc3ZCLEdBQUEvaEIsR0FDQTV3QixFQUFBOEYsRUFBQXdxQixFQUFBcnVCLEdBQUEsR0FDQTJ4QyxFQUFBM3hDLEVBQ0FlLEVBQUFoQyxFQUNBTyxFQUFBOHJDLEVBQUFocUIsRUFBQXN2QixHQUNBMXhDLE9BQUE0QyxFQUNBOUMsR0FBQSxHQUVBc2lCLEVBQUFpd0IsS0FBQWp3QixFQUFBaXdCLEdBQUExaUIsR0FDQXljLE1BQUFwc0MsRUFBQTJ2QixHQUNBdk4sRUFBQXF3QixLQUVBLE1BQUE1dEMsSUFBQXVkLEVBQUEwaUIsR0FBQWpnQyxHQUFBOHFCLElBQ0t2TixHQUVMc3dCLFdBQ0EvWixVQUFBLFNBQUF2UCxFQUFBdEksRUFBQWtDLEdBR0F3dkIsRUFBQXBwQixFQUFBdEksRUFBQSxTQUFBOGpCLEVBQUFDLEdBQ0FqekIsS0FBQXVoQixHQUFBaEssRUFBQXliLEVBQUE5akIsR0FDQWxQLEtBQUFtekIsR0FBQUYsRUFDQWp6QixLQUFBOC9CLFFBQUE5dUMsR0FDSyxXQUtMLElBSkEsSUFDQWlpQyxFQURBanpCLEtBQ0FtekIsR0FDQXBWLEVBRkEvZCxLQUVBOC9CLEdBRUEvaEIsS0FBQTd2QixHQUFBNnZCLElBQUFydkIsRUFFQSxPQU5Bc1IsS0FNQXVoQixLQU5BdmhCLEtBTUE4L0IsR0FBQS9oQixNQUFBM3ZCLEVBTkE0UixLQU1BdWhCLEdBQUFrZixJQU1Bem9CLEVBQUEsVUFBQWliLEVBQUFsVixFQUFBZ2pCLEVBQ0EsVUFBQTlOLEVBQUFsVixFQUFBNXRCLEdBQ0E0dEIsRUFBQWdqQixFQUFBaGpCLEVBQUE1dEIsS0FkQTZQLEtBUUF1aEIsUUFBQXZ3QixFQUNBZ25CLEVBQUEsS0FNSzVHLEVBQUEsb0JBQUFBLEdBQUEsR0FHTDRDLEVBQUE5RSxtQ0M1SUEsSUFBQXd4QixFQUFBM3pDLEVBQUEsS0FDQXdxQixFQUFBeHFCLEVBQUEsSUFJQUcsRUFBQUQsUUFBQUYsRUFBQSxHQUFBQSxDQUhBLE1BR0EsU0FBQWtCLEdBQ0Esa0JBQXlCLE9BQUFBLEVBQUErUixLQUFBL1EsVUFBQUMsT0FBQSxFQUFBRCxVQUFBLFFBQUErQixNQUd6Qi9DLElBQUEsU0FBQW1CLEdBQ0EsSUFBQTJ1QixFQUFBMmlCLEVBQUFJLFNBQUF2cEIsRUFBQXZYLEtBUkEsT0FRQTVRLEdBQ0EsT0FBQTJ1QixLQUFBNXRCLEdBR0FvaUIsSUFBQSxTQUFBbmpCLEVBQUFqQixHQUNBLE9BQUF1eUMsRUFBQWx0QyxJQUFBK2pCLEVBQUF2WCxLQWJBLE9BYUEsSUFBQTVRLEVBQUEsRUFBQUEsRUFBQWpCLEtBRUN1eUMsR0FBQSxvQkNsQkQsSUFBQXBpQyxFQUFBdlIsRUFBQSxHQUNBNlEsRUFBQTdRLEVBQUEsR0FDQWkwQyxFQUFBajBDLEVBQUEsSUFFQUcsRUFBQUQsUUFBQSxTQUFBdXFCLEVBQUF6UixHQUVBLEdBREF6SCxFQUFBa1osR0FDQTVaLEVBQUFtSSxNQUFBdFcsY0FBQStuQixFQUFBLE9BQUF6UixFQUNBLElBQUFrN0IsRUFBQUQsRUFBQTl2QyxFQUFBc21CLEdBR0EsT0FEQTlqQixFQURBdXRDLEVBQUF2dEMsU0FDQXFTLEdBQ0FrN0IsRUFBQXp2Qyx3QkNWQXRFLEVBQUFELFFBQUEsU0FBQWdSLEdBQ0EsSUFDQSxPQUFZbEosR0FBQSxFQUFBNUUsRUFBQThOLEtBQ1QsTUFBQWxKLEdBQ0gsT0FBWUEsR0FBQSxFQUFBNUUsRUFBQTRFLHNCQ0haaEksRUFBQSxlQUFBbTBDLE9BQUFuMEMsRUFBQSxJQUFBbUUsRUFBQXl3QixPQUFBbnpCLFVBQUEsU0FDQVQsY0FBQSxFQUNBRSxJQUFBbEIsRUFBQSxxQkNIQUcsRUFBQUQsUUFBQSxTQUFBcUksRUFBQW5ILEdBQ0EsT0FBVUEsUUFBQW1ILHlDQ0NWLElBQUF3YSxFQUFBL2lCLEVBQUEsSUFDQXFtQixFQUFBcm1CLEVBQUEsSUFDQWlrQixFQUFBamtCLEVBQUEsR0FFQUcsRUFBQUQsV0FBQXdyQixZQUFBLFNBQUF6cEIsRUFBQTBwQixHQUNBLElBQUFoYSxFQUFBb1IsRUFBQTlQLE1BQ0E0TCxFQUFBb0YsRUFBQXRTLEVBQUF4UCxRQUNBaXlDLEVBQUEvdEIsRUFBQXBrQixFQUFBNGMsR0FDQXhZLEVBQUFnZ0IsRUFBQXNGLEVBQUE5TSxHQUNBNk4sRUFBQXhxQixVQUFBQyxPQUFBLEVBQUFELFVBQUEsUUFBQStCLEVBQ0Fna0MsRUFBQWwzQixLQUFBTyxVQUFBck4sSUFBQXlvQixFQUFBN04sRUFBQXdILEVBQUFxRyxFQUFBN04sSUFBQXhZLEVBQUF3WSxFQUFBdTFCLEdBQ0FDLEVBQUEsRUFNQSxJQUxBaHVDLEVBQUErdEMsS0FBQS90QyxFQUFBNGhDLElBQ0FvTSxHQUFBLEVBQ0FodUMsR0FBQTRoQyxFQUFBLEVBQ0FtTSxHQUFBbk0sRUFBQSxHQUVBQSxLQUFBLEdBQ0E1aEMsS0FBQXNMLElBQUF5aUMsR0FBQXppQyxFQUFBdEwsVUFDQXNMLEVBQUF5aUMsR0FDQUEsR0FBQUMsRUFDQWh1QyxHQUFBZ3VDLEVBQ0csT0FBQTFpQyxvQkN4QkgsSUFBQTZSLEVBQUF4akIsRUFBQSxJQUNBK2lCLEVBQUEvaUIsRUFBQSxJQUNBc2pCLEVBQUF0akIsRUFBQSxJQUNBaWtCLEVBQUFqa0IsRUFBQSxHQUVBRyxFQUFBRCxRQUFBLFNBQUF1akIsRUFBQW1CLEVBQUFzRyxFQUFBb3BCLEVBQUFDLEdBQ0Evd0IsRUFBQW9CLEdBQ0EsSUFBQWpULEVBQUFvUixFQUFBVSxHQUNBelMsRUFBQXNTLEVBQUEzUixHQUNBeFAsRUFBQThoQixFQUFBdFMsRUFBQXhQLFFBQ0ErRCxFQUFBcXVDLEVBQUFweUMsRUFBQSxJQUNBL0IsRUFBQW0wQyxHQUFBLElBQ0EsR0FBQXJwQixFQUFBLFNBQXVCLENBQ3ZCLEdBQUFobEIsS0FBQThLLEVBQUEsQ0FDQXNqQyxFQUFBdGpDLEVBQUE5SyxHQUNBQSxHQUFBOUYsRUFDQSxNQUdBLEdBREE4RixHQUFBOUYsRUFDQW0wQyxFQUFBcnVDLEVBQUEsRUFBQS9ELEdBQUErRCxFQUNBLE1BQUE0SyxVQUFBLCtDQUdBLEtBQVF5akMsRUFBQXJ1QyxHQUFBLEVBQUEvRCxFQUFBK0QsRUFBc0NBLEdBQUE5RixFQUFBOEYsS0FBQThLLElBQzlDc2pDLEVBQUExdkIsRUFBQTB2QixFQUFBdGpDLEVBQUE5SyxLQUFBeUwsSUFFQSxPQUFBMmlDLG9CQ3pCQSxJQUFBL2lDLEVBQUF2UixFQUFBLEdBQ0FHLEVBQUFELFFBQUEsU0FBQXNDLEVBQUEwRyxFQUFBOUgsRUFBQXFuQixHQUNBLElBQ0EsT0FBQUEsRUFBQXZmLEVBQUFxSSxFQUFBblEsR0FBQSxHQUFBQSxFQUFBLElBQUE4SCxFQUFBOUgsR0FFRyxNQUFBNEcsR0FDSCxJQUFBd3NDLEVBQUFoeUMsRUFBQSxPQUVBLFdBREF5QixJQUFBdXdDLEdBQUFqakMsRUFBQWlqQyxFQUFBajBDLEtBQUFpQyxJQUNBd0YscUJDUkEsSUFBQWdnQyxFQUFBaG9DLEVBQUEsS0FDQXdnQyxFQUFBenZCLEtBQUF5dkIsSUFDQWlVLEVBQUFqVSxFQUFBLE9BQ0FrVSxFQUFBbFUsRUFBQSxPQUNBbVUsRUFBQW5VLEVBQUEsVUFBQWtVLEdBQ0FFLEVBQUFwVSxFQUFBLFFBTUFyZ0MsRUFBQUQsUUFBQTZRLEtBQUE4akMsUUFBQSxTQUFBNzdCLEdBQ0EsSUFFQW5ILEVBQUFsSyxFQUZBbXRDLEVBQUEvakMsS0FBQXd2QixJQUFBdm5CLEdBQ0ErN0IsRUFBQS9NLEVBQUFodkIsR0FFQSxPQUFBODdCLEVBQUFGLEVBQUFHLEdBQUFELEVBQUFGLEVBQUFGLEVBUEEsRUFBQUQsRUFBQSxFQUFBQSxHQU9BRyxFQUFBRixHQUVBL3NDLEdBREFrSyxHQUFBLEVBQUE2aUMsRUFBQUQsR0FBQUssSUFDQWpqQyxFQUFBaWpDLElBRUFILEdBQUFodEMsS0FBQW90QyxHQUFBMVUsS0FDQTBVLEVBQUFwdEMsa0JDcEJBeEgsRUFBQUQsUUFBQTZRLEtBQUFpa0MsT0FBQSxTQUFBaDhCLEdBQ0EsT0FBQUEsT0FBQSxNQUFBQSxFQUFBLEtBQUFBLE1BQUEsRUFBQWpJLEtBQUFwTixJQUFBLEVBQUFxVixxQkNEQSxJQUFBbkksRUFBQTdRLEVBQUEsR0FDQWdsQixFQUFBalUsS0FBQWlVLE1BQ0E3a0IsRUFBQUQsUUFBQSxTQUFBeUUsR0FDQSxPQUFBa00sRUFBQWxNLElBQUFzd0MsU0FBQXR3QyxJQUFBcWdCLEVBQUFyZ0IseUJDSkEsSUFBQXF5QixFQUFBaDNCLEVBQUEsSUFDQUcsRUFBQUQsUUFBQSxTQUFBeUUsRUFBQXV3QyxHQUNBLG9CQUFBdndDLEdBQUEsVUFBQXF5QixFQUFBcnlCLEdBQUEsTUFBQW1NLFVBQUFva0MsR0FDQSxPQUFBdndDLG9CQ0hBLElBQUF3d0MsRUFBQW4xQyxFQUFBLEdBQUFvMUMsV0FDQUMsRUFBQXIxQyxFQUFBLElBQUFpMUIsS0FFQTkwQixFQUFBRCxRQUFBLEVBQUFpMUMsRUFBQW4xQyxFQUFBLGFBQUFxZ0MsSUFBQSxTQUFBekUsR0FDQSxJQUFBdjNCLEVBQUFneEMsRUFBQTNuQyxPQUFBa3VCLEdBQUEsR0FDQWowQixFQUFBd3RDLEVBQUE5d0MsR0FDQSxXQUFBc0QsR0FBQSxLQUFBdEQsRUFBQXdqQyxPQUFBLE1BQUFsZ0MsR0FDQ3d0QyxtQkNQRCxJQUFBRyxFQUFBdDFDLEVBQUEsR0FBQXk0QixTQUNBNGMsRUFBQXIxQyxFQUFBLElBQUFpMUIsS0FDQXNnQixFQUFBdjFDLEVBQUEsS0FDQXcxQyxFQUFBLGNBRUFyMUMsRUFBQUQsUUFBQSxJQUFBbzFDLEVBQUFDLEVBQUEsWUFBQUQsRUFBQUMsRUFBQSxpQkFBQTNaLEVBQUE2WixHQUNBLElBQUFweEMsRUFBQWd4QyxFQUFBM25DLE9BQUFrdUIsR0FBQSxHQUNBLE9BQUEwWixFQUFBanhDLEVBQUFveEMsSUFBQSxJQUFBRCxFQUFBcHpCLEtBQUEvZCxHQUFBLFNBQ0NpeEMsaUJDUERuMUMsRUFBQUQsUUFBQSxTQUFBZ0osRUFBQWMsRUFBQXlaLEdBQ0EsSUFBQWl5QixPQUFBenhDLElBQUF3ZixFQUNBLE9BQUF6WixFQUFBN0gsUUFDQSxjQUFBdXpDLEVBQUF4c0MsSUFDQUEsRUFBQTNJLEtBQUFrakIsR0FDQSxjQUFBaXlCLEVBQUF4c0MsRUFBQWMsRUFBQSxJQUNBZCxFQUFBM0ksS0FBQWtqQixFQUFBelosRUFBQSxJQUNBLGNBQUEwckMsRUFBQXhzQyxFQUFBYyxFQUFBLEdBQUFBLEVBQUEsSUFDQWQsRUFBQTNJLEtBQUFrakIsRUFBQXpaLEVBQUEsR0FBQUEsRUFBQSxJQUNBLGNBQUEwckMsRUFBQXhzQyxFQUFBYyxFQUFBLEdBQUFBLEVBQUEsR0FBQUEsRUFBQSxJQUNBZCxFQUFBM0ksS0FBQWtqQixFQUFBelosRUFBQSxHQUFBQSxFQUFBLEdBQUFBLEVBQUEsSUFDQSxjQUFBMHJDLEVBQUF4c0MsRUFBQWMsRUFBQSxHQUFBQSxFQUFBLEdBQUFBLEVBQUEsR0FBQUEsRUFBQSxJQUNBZCxFQUFBM0ksS0FBQWtqQixFQUFBelosRUFBQSxHQUFBQSxFQUFBLEdBQUFBLEVBQUEsR0FBQUEsRUFBQSxJQUNHLE9BQUFkLEVBQUFFLE1BQUFxYSxFQUFBelosa0NDYkgsSUFBQXdaLEVBQUF4akIsRUFBQSxJQUNBNlEsRUFBQTdRLEVBQUEsR0FDQThrQyxFQUFBOWtDLEVBQUEsS0FDQW1wQixLQUFBaFUsTUFDQStILEtBVUEvYyxFQUFBRCxRQUFBMkwsU0FBQTJMLE1BQUEsU0FBQWlNLEdBQ0EsSUFBQXZhLEVBQUFzYSxFQUFBdlEsTUFDQTBpQyxFQUFBeHNCLEVBQUE1b0IsS0FBQTJCLFVBQUEsR0FDQTB6QyxFQUFBLFdBQ0EsSUFBQTVyQyxFQUFBMnJDLEVBQUE5bUMsT0FBQXNhLEVBQUE1b0IsS0FBQTJCLFlBQ0EsT0FBQStRLGdCQUFBMmlDLEVBYkEsU0FBQXpxQyxFQUFBMFQsRUFBQTdVLEdBQ0EsS0FBQTZVLEtBQUEzQixHQUFBLENBQ0EsUUFBQTdiLEtBQUFqQixFQUFBLEVBQTJCQSxFQUFBeWUsRUFBU3plLElBQUFpQixFQUFBakIsR0FBQSxLQUFBQSxFQUFBLElBRXBDOGMsRUFBQTJCLEdBQUFoVCxTQUFBLHNCQUFBeEssRUFBQXlOLEtBQUEsVUFDRyxPQUFBb08sRUFBQTJCLEdBQUExVCxFQUFBbkIsR0FRSDZyQyxDQUFBM3NDLEVBQUFjLEVBQUE3SCxPQUFBNkgsR0FBQTg2QixFQUFBNTdCLEVBQUFjLEVBQUF5WixJQUdBLE9BREE1UyxFQUFBM0gsRUFBQXpILGFBQUFtMEMsRUFBQW4wQyxVQUFBeUgsRUFBQXpILFdBQ0FtMEMsaUNDckJBLElBQUF4RSxFQUFBcHhDLEVBQUEsSUFDQXl5QyxFQUFBenlDLEVBQUEsSUFDQWtqQixFQUFBbGpCLEVBQUEsSUFDQStpQixFQUFBL2lCLEVBQUEsSUFDQXNqQixFQUFBdGpCLEVBQUEsSUFDQTgxQyxFQUFBaDFDLE9BQUFrQixPQUdBN0IsRUFBQUQsU0FBQTQxQyxHQUFBOTFDLEVBQUEsRUFBQUEsQ0FBQSxXQUNBLElBQUE0NEIsS0FDQWp0QixLQUVBSixFQUFBaEosU0FDQXcyQixFQUFBLHVCQUdBLE9BRkFILEVBQUFydEIsR0FBQSxFQUNBd3RCLEVBQUF6VyxNQUFBLElBQUEvWCxRQUFBLFNBQUF5cEMsR0FBb0Nyb0MsRUFBQXFvQyxPQUNqQixHQUFuQjhCLEtBQW1CbGQsR0FBQXJ0QixJQUFBekssT0FBQXdWLEtBQUF3L0IsS0FBc0NucUMsSUFBQW1ELEtBQUEsS0FBQWlxQixJQUN4RCxTQUFBOTJCLEVBQUFHLEdBTUQsSUFMQSxJQUFBODBCLEVBQUFuVSxFQUFBOWdCLEdBQ0FpcEIsRUFBQWhwQixVQUFBQyxPQUNBK0QsRUFBQSxFQUNBMHNDLEVBQUFILEVBQUF0dUMsRUFDQWt0QyxFQUFBbnVCLEVBQUEvZSxFQUNBK21CLEVBQUFobEIsR0FNQSxJQUxBLElBSUE3RCxFQUpBa0osRUFBQStYLEVBQUFwaEIsVUFBQWdFLE1BQ0FvUSxFQUFBczhCLEVBQUF4QixFQUFBN2xDLEdBQUFzRCxPQUFBK2pDLEVBQUFybkMsSUFBQTZsQyxFQUFBN2xDLEdBQ0FwSixFQUFBbVUsRUFBQW5VLE9BQ0F1OEIsRUFBQSxFQUVBdjhCLEVBQUF1OEIsR0FBQTJTLEVBQUE5d0MsS0FBQWdMLEVBQUFsSixFQUFBaVUsRUFBQW9vQixRQUFBeEgsRUFBQTcwQixHQUFBa0osRUFBQWxKLElBQ0csT0FBQTYwQixHQUNGNGUsbUJDaENELElBQUEzeUIsRUFBQW5qQixFQUFBLElBQ0F3bUIsRUFBQXhtQixFQUFBLElBQUFtRSxFQUNBd1YsS0FBaUJBLFNBRWpCbzhCLEVBQUEsaUJBQUFqdEMsZ0JBQUFoSSxPQUFBdXlCLG9CQUNBdnlCLE9BQUF1eUIsb0JBQUF2cUIsV0FVQTNJLEVBQUFELFFBQUFpRSxFQUFBLFNBQUFRLEdBQ0EsT0FBQW94QyxHQUFBLG1CQUFBcDhCLEVBQUFwWixLQUFBb0UsR0FUQSxTQUFBQSxHQUNBLElBQ0EsT0FBQTZoQixFQUFBN2hCLEdBQ0csTUFBQXFELEdBQ0gsT0FBQSt0QyxFQUFBNWdDLFNBS0E2Z0MsQ0FBQXJ4QyxHQUFBNmhCLEVBQUFyRCxFQUFBeGUsc0JDakJBLElBQUErTSxFQUFBMVIsRUFBQSxJQUNBdVIsRUFBQXZSLEVBQUEsR0FDQW94QyxFQUFBcHhDLEVBQUEsSUFFQUcsRUFBQUQsUUFBQUYsRUFBQSxJQUFBYyxPQUFBbTFDLGlCQUFBLFNBQUF0a0MsRUFBQXdpQixHQUNBNWlCLEVBQUFJLEdBS0EsSUFKQSxJQUdBbEcsRUFIQTZLLEVBQUE4NkIsRUFBQWpkLEdBQ0FoeUIsRUFBQW1VLEVBQUFuVSxPQUNBL0IsRUFBQSxFQUVBK0IsRUFBQS9CLEdBQUFzUixFQUFBdk4sRUFBQXdOLEVBQUFsRyxFQUFBNkssRUFBQWxXLEtBQUErekIsRUFBQTFvQixJQUNBLE9BQUFrRyxvQkNYQSxJQUFBNFEsRUFBQXZpQixFQUFBLElBQ0FtakIsRUFBQW5qQixFQUFBLElBQ0Fvb0IsRUFBQXBvQixFQUFBLEdBQUFBLEVBQUEsR0FDQWdqQixFQUFBaGpCLEVBQUEsSUFBQUEsQ0FBQSxZQUVBRyxFQUFBRCxRQUFBLFNBQUFxQixFQUFBMjBDLEdBQ0EsSUFHQTd6QyxFQUhBc1AsRUFBQXdSLEVBQUE1aEIsR0FDQW5CLEVBQUEsRUFDQXVILEtBRUEsSUFBQXRGLEtBQUFzUCxFQUFBdFAsR0FBQTJnQixHQUFBVCxFQUFBNVEsRUFBQXRQLElBQUFzRixFQUFBYixLQUFBekUsR0FFQSxLQUFBNnpDLEVBQUEvekMsT0FBQS9CLEdBQUFtaUIsRUFBQTVRLEVBQUF0UCxFQUFBNnpDLEVBQUE5MUMsU0FDQWdvQixFQUFBemdCLEVBQUF0RixJQUFBc0YsRUFBQWIsS0FBQXpFLElBRUEsT0FBQXNGLG9CQ2ZBekgsRUFBQWlFLEVBQUFuRSxFQUFBLG9CQ0FBRyxFQUFBRCxTQUFBRixFQUFBLE1BQUFBLEVBQUEsRUFBQUEsQ0FBQSxXQUNBLE9BQXVHLEdBQXZHYyxPQUFBQyxlQUFBZixFQUFBLElBQUFBLENBQUEsWUFBc0VrQixJQUFBLFdBQW1CLFlBQWMyUSxrQ0NldkcxUixFQUFBRDs7Ozs7RUNSQSxJQUFBODZCLEVBQUFsNkIsT0FBQWs2QixzQkFDQXQ1QixFQUFBWixPQUFBVyxVQUFBQyxlQUNBeTBDLEVBQUFyMUMsT0FBQVcsVUFBQTQxQixxQkFzREFsM0IsRUFBQUQsUUE1Q0EsV0FDQSxJQUNBLElBQUFZLE9BQUFrQixPQUNBLFNBTUEsSUFBQW8wQyxFQUFBLElBQUExb0MsT0FBQSxPQUVBLEdBREEwb0MsRUFBQSxRQUNBLE1BQUF0MUMsT0FBQXV5QixvQkFBQStpQixHQUFBLEdBQ0EsU0FLQSxJQURBLElBQUFDLEtBQ0FqMkMsRUFBQSxFQUFpQkEsRUFBQSxHQUFRQSxJQUN6QmkyQyxFQUFBLElBQUEzb0MsT0FBQTRvQyxhQUFBbDJDLE1BS0Esa0JBSEFVLE9BQUF1eUIsb0JBQUFnakIsR0FBQW5uQyxJQUFBLFNBQUE3TixHQUNBLE9BQUFnMUMsRUFBQWgxQyxLQUVBeU4sS0FBQSxJQUNBLFNBSUEsSUFBQXluQyxLQUlBLE1BSEEsdUJBQUFqMEIsTUFBQSxJQUFBL1gsUUFBQSxTQUFBaXNDLEdBQ0FELEVBQUFDLE9BR0EseUJBREExMUMsT0FBQXdWLEtBQUF4VixPQUFBa0IsVUFBa0N1MEMsSUFBQXpuQyxLQUFBLElBTWhDLE1BQUF6RyxHQUVGLFVBSUFvdUMsR0FBQTMxQyxPQUFBa0IsT0FBQSxTQUFBQyxFQUFBRyxHQUtBLElBSkEsSUFBQWlFLEVBRUFxd0MsRUFEQXRDLEVBdERBLFNBQUFudEMsR0FDQSxVQUFBQSxRQUFBaEQsSUFBQWdELEVBQ0EsVUFBQTZKLFVBQUEseURBR0EsT0FBQWhRLE9BQUFtRyxHQWlEQThiLENBQUE5Z0IsR0FHQUwsRUFBQSxFQUFnQkEsRUFBQU0sVUFBQUMsT0FBc0JQLElBQUEsQ0FHdEMsUUFBQVMsS0FGQWdFLEVBQUF2RixPQUFBb0IsVUFBQU4sSUFHQUYsRUFBQW5CLEtBQUE4RixFQUFBaEUsS0FDQSt4QyxFQUFBL3hDLEdBQUFnRSxFQUFBaEUsSUFJQSxHQUFBMjRCLEVBQUEsQ0FDQTBiLEVBQUExYixFQUFBMzBCLEdBQ0EsUUFBQWpHLEVBQUEsRUFBa0JBLEVBQUFzMkMsRUFBQXYwQyxPQUFvQi9CLElBQ3RDKzFDLEVBQUE1MUMsS0FBQThGLEVBQUFxd0MsRUFBQXQyQyxNQUNBZzBDLEVBQUFzQyxFQUFBdDJDLElBQUFpRyxFQUFBcXdDLEVBQUF0MkMsTUFNQSxPQUFBZzBDLG9CQ25GQWowQyxFQUFBRCxRQUdDLFdBQ0QsYUFFQSxJQUFBeTJDLEdBQ0F4aUMsbUJBQUEsRUFDQXNDLGNBQUEsRUFDQW1nQyxjQUFBLEVBQ0E3L0IsYUFBQSxFQUNBOC9CLGlCQUFBLEVBQ0FDLDBCQUFBLEVBQ0FDLFFBQUEsRUFDQTlpQyxXQUFBLEVBQ0FuSixNQUFBLEdBR0Frc0MsR0FDQXIyQyxNQUFBLEVBQ0F3QixRQUFBLEVBQ0FWLFdBQUEsRUFDQXcxQyxRQUFBLEVBQ0E3ZixRQUFBLEVBQ0FsMUIsV0FBQSxFQUNBZzFDLE9BQUEsR0FHQW4yQyxFQUFBRCxPQUFBQyxlQUNBc3lCLEVBQUF2eUIsT0FBQXV5QixvQkFDQTJILEVBQUFsNkIsT0FBQWs2QixzQkFDQTNYLEVBQUF2aUIsT0FBQXVpQix5QkFDQXhKLEVBQUEvWSxPQUFBK1ksZUFDQXM5QixFQUFBdDlCLEtBQUEvWSxRQUVBLGdCQUFBczJDLEVBQUFDLEVBQUFDLEVBQUFDLEdBQ0Esb0JBQUFELEVBQUEsQ0FFQSxHQUFBSCxFQUFBLENBQ0EsSUFBQUssRUFBQTM5QixFQUFBeTlCLEdBQ0FFLE9BQUFMLEdBQ0FDLEVBQUFDLEVBQUFHLEVBQUFELEdBSUEsSUFBQWpoQyxFQUFBK2MsRUFBQWlrQixHQUVBdGMsSUFDQTFrQixJQUFBekgsT0FBQW1zQixFQUFBc2MsS0FHQSxRQUFBbDNDLEVBQUEsRUFBMkJBLEVBQUFrVyxFQUFBblUsU0FBaUIvQixFQUFBLENBQzVDLElBQUFpQyxFQUFBaVUsRUFBQWxXLEdBQ0EsS0FBQXUyQyxFQUFBdDBDLElBQUEyMEMsRUFBQTMwQyxJQUFBazFDLEtBQUFsMUMsSUFBQSxDQUNBLElBQUF1a0MsRUFBQXZqQixFQUFBaTBCLEVBQUFqMUMsR0FDQSxJQUNBdEIsRUFBQXMyQyxFQUFBaDFDLEVBQUF1a0MsR0FDcUIsTUFBQTUrQixNQUlyQixPQUFBcXZDLEVBR0EsT0FBQUEsR0FoRUFJLGlDQ0xBLFNBQUFDLEVBQUE1TCxHQUNBLElBQUFua0MsRUFDQXBGLEVBQUF1cEMsRUFBQXZwQyxPQWFBLE1BWEEsbUJBQUFBLEVBQ0FBLEVBQUEwQyxXQUNBMEMsRUFBQXBGLEVBQUEwQyxZQUVBMEMsRUFBQXBGLEVBQUEsY0FDQUEsRUFBQTBDLFdBQUEwQyxHQUdBQSxFQUFBLGVBR0FBLGlpQkNmQTVGLEVBQUFqQixPQUFBa0IsUUFBQSxTQUFBQyxHQUFtRCxRQUFBN0IsRUFBQSxFQUFnQkEsRUFBQThCLFVBQUFDLE9BQXNCL0IsSUFBQSxDQUFPLElBQUFnQyxFQUFBRixVQUFBOUIsR0FBMkIsUUFBQWlDLEtBQUFELEVBQTBCdEIsT0FBQVcsVUFBQUMsZUFBQW5CLEtBQUE2QixFQUFBQyxLQUF5REosRUFBQUksR0FBQUQsRUFBQUMsSUFBaUMsT0FBQUosR0FFL09LLEVBQUEsbUJBQUFDLFFBQUEsaUJBQUFBLE9BQUFDLFNBQUEsU0FBQUMsR0FBb0csY0FBQUEsR0FBcUIsU0FBQUEsR0FBbUIsT0FBQUEsR0FBQSxtQkFBQUYsUUFBQUUsRUFBQUMsY0FBQUgsUUFBQUUsSUFBQUYsT0FBQWQsVUFBQSxnQkFBQWdCLEdBVTVJLElBQUFrMUMsRUFBQSxpRUFFQUMsR0FDQWorQixTQUFBLFdBQ0EsbUNBR0FrK0IsR0FDQWwrQixTQUFBLFdBQ0EsbUNBSUFtK0IsR0FDQUMsU0FBQSxXQUNBLE9BQUFobkIsRUFBQSxHQUVBaW5CLFFBQUEsU0FBQXZ5QyxHQUNBLDJCQUFBQSxFQUFBLFlBQUFuRCxFQUFBbUQsSUFBQSxTQUFBNlosR0FDQSxPQUFBQSxFQUFBeFUsT0FBQXJGLEdBQ0ssU0FBQTZaLEdBQ0wsT0FBQUEsRUFBQXhVLE9BQUE0QyxPQUFBakksS0FHQW5CLE1BQUEsU0FBQTJ6QyxHQUNBLGdCQUFBMzRCLEdBQ0EsT0FBQTI0QixFQUFBM3JCLEtBQUEsU0FBQTNxQixHQUNBLE9BQUFnZSxFQUFBaGUsRUFBQWdlLENBQUFMLE9BSUE3YixVQUFBLFNBQUF5MEMsR0FDQSxnQkFBQTU0QixHQUNBLE9BQUE0NEIsRUFBQTU0QixNQUtBLFNBQUFLLEVBQUFsYSxHQUVBLGFBQUFBLEVBQUFxeUMsRUFBQUMsU0FBQWhuQixFQUFBLEVBQUF6c0IsTUFBQW1CLEdBQUFxeUMsRUFBQXh6QyxNQUFBeXNCLEVBQUEsRUFBQWhyQixlQUFBTixHQUFBcXlDLEVBQUFFLFFBQUFqbkIsRUFBQSxFQUFBN3NCLEtBQUF1QixHQUFBcXlDLEVBQUFyMEMsVUFBQXEwQyxFQUFBRSxTQUFBdnlDLEdBNEhBLElBQUEweUMsRUFBQSxTQUFBcnlDLEdBQ0EsT0FBVW9ELEdBQUFwRCxJQUdWLFNBQUFzeUMsRUFBQTUxQyxHQUNBLElBQUEyQyxFQUFBakQsVUFBQUMsT0FBQSxRQUFBOEIsSUFBQS9CLFVBQUEsR0FBQUEsVUFBQSxjQUNBLE9BQUE2dUIsRUFBQSxHQUVBbm5CLEVBQUExSCxVQUFBQyxPQUFBLFFBQUE4QixJQUFBL0IsVUFBQSxHQUFBQSxVQUFBLEdBQUE2dUIsRUFBQSxFQUNBeGUsRUFBQXJRLFVBQUFDLE9BQUEsUUFBQThCLElBQUEvQixVQUFBLEdBQUFBLFVBQUEsR0FBQTZ1QixFQUFBLEVBQ0FzbkIsRUFBQW4yQyxVQUFBQyxPQUFBLFFBQUE4QixJQUFBL0IsVUFBQSxHQUFBQSxVQUFBLE1BQ0FpWSxFQUFBalksVUFBQUMsT0FBQSxRQUFBOEIsSUFBQS9CLFVBQUEsR0FBQUEsVUFBQSxNQUNBbzJDLEVBQUFwMkMsVUFBQUMsT0FBQSxRQUFBOEIsSUFBQS9CLFVBQUEsR0FBQUEsVUFBQSxLQUNBdkIsRUFBQXVCLFVBQUFDLE9BQUEsUUFBQThCLElBQUEvQixVQUFBLEdBQUFBLFVBQUEsZUFDQXEyQyxFQUFBcjJDLFVBQUEsR0FFQXBCLE9BQUFpd0IsRUFBQSxFQUFBandCLENBQUEwQixFQUFBdXVCLEVBQUEsRUFBQXZ1QixTQUFBbTFDLEdBRUEsSUFDQWEsRUFBQTEzQyxPQUFBaXdCLEVBQUEsRUFBQWp3QixDQUFBMjNDLEVBQUEzM0MsT0FBQWl3QixFQUFBLEVBQUFqd0IsQ0FEQSxlQUNBLHNCQUVBNDNDLEVBQUF2K0IsRUFBQXUrQixZQUNBQyxFQUFBeCtCLEVBQUF3K0IsT0FDQUMsRUFBQXorQixFQUFBeStCLFFBRUFqMUMsRUFBQWcxQyxHQUFBNW5CLEVBQUEsRUFDQThuQixFQUFBLFNBQUF4d0MsR0FDQSxJQUFBUSxFQUFBUixFQUFBeXdDLFdBRUFqd0MsR0FBQVIsRUFBQVcsUUFDQUgsR0FBQSxJQUFBUixFQUFBVyxNQUFBc1osTUFBQSxTQUFBbmMsUUFBQWtDLEVBQUFRLFNBQUFSLEVBQUFXLE1BQUEsVUFBQVgsRUFBQVEsUUFBQSxLQUFBUixFQUFBVyxPQUdBckYsRUFBQSx1QkFBQWhELEVBQUFrSSxHQUFBUixFQUFBUSxTQUFBUixJQUVBd1gsRUFBQS9lLE9BQUFreEIsRUFBQSxFQUFBbHhCLENBQUFxRSxHQUNBNHpDLEVBQUFqNEMsT0FBQXlTLE9BQUE4a0MsR0FNQXp6QyxFQUFBdUssT0FBQTRoQixFQUFBLEVBTUEsSUFBQWhzQixFQTBmQSxTQUFBbkMsRUFBQWpDLEVBQUE2QixFQUFBKzFDLEdBQ0EsSUFBQVMsRUFBQUMsRUFHQSxPQURBejJDLEVBQUEwMkMsYUFBQSxNQUNBRixNQUFxQmpvQixFQUFBLE1BQUFpb0IsRUFBQXAyQyxLQUFBbzJDLEVBQUFyNEMsT0FBQSxRQUFBczRDLE1BQXdGLEtBQUFBLEVBQUEsU0FBK0NBLEVBQUEsS0FBQS8zQyxJQUFBLFdBQzVKLEdBQUFzQixFQUFBMDJDLGFBQ0EsT0FBQTEyQyxFQUFBMDJDLGFBQUF6MEMsUUFFQSxJQUFBZ0MsRUFBQTNGLE9BQUFpd0IsRUFBQSxFQUFBandCLEdBS0EsT0FKQTBCLEVBQUEwMkMsYUFBQXp5QyxFQUNBakUsRUFBQTIyQyxhQUNBMzJDLEVBQUFpRixPQUFBaEIsRUFBQUcsT0FBQXBFLEVBQUFpRixRQUFBaEIsRUFBQUUsUUFBQW5FLEVBQUFnRixVQUVBZixFQUFBaEMsU0FFS3UwQyxFQUFBVCxPQUFBUyxFQUFBSSxXQUFBSixFQUFBN3BDLFNBQUE2cEMsRUFBQXR4QyxVQUFBLFdBQ0wsT0FBQWxGLEVBQUEyMkMsWUFDS0gsRUFBQUssWUFBQSxXQUNMLE9BQUE3MkMsRUFBQTgyQyxjQUNLTixFQUFBTyxVQUFBLFdBQ0wsT0FBQS8yQyxFQUFBZzNDLFlBQ0tSLEVBQUFyeEMsT0FBQSxXQUNMLE9BQUFuRixFQUFBZ0YsU0FDS3d4QyxFQUFBdDFDLE1BQUEsV0FDTCxPQUFBbEIsRUFBQWlGLFFBQ0t1eEMsRUFBQWpwQyxXQUFBLFNBQUF2SixHQUNMMUYsT0FBQWl3QixFQUFBLEVBQUFqd0IsQ0FBQTBGLEVBQUF1cUIsRUFBQSxFQUFBeHZCLE9BQUFULE9BQUFpd0IsRUFBQSxFQUFBandCLENBQUEsT0FBQTBGLElBQ0F1cUIsRUFBQSxFQUFBL3VCLE9BQUErMkMsRUFBQXZ5QyxJQWp2QkEsU0FBQS9ELEVBQUFnM0MsR0FBa0QsUUFBQXAzQyxLQUFBbzNDLEVBQUEsQ0FBeUIsSUFBQW5zQixFQUFBbXNCLEVBQUFwM0MsR0FBdUJpckIsRUFBQXRzQixhQUFBc3NCLEVBQUFyc0IsWUFBQSxFQUE0QyxVQUFBcXNCLE1BQUE5WixVQUFBLEdBQTJDMVMsT0FBQUMsZUFBQTBCLEVBQUFKLEVBQUFpckIsSUFrdkJwTG9zQixDQUFBVixFQUFBQyxHQUFBRCxFQXRoQkxXLENBQUFyQixFQUFBMzNDLEVBQUE2QixFQUFBKzFDLEdBQ0FxQixHQUFrQmo1QyxPQUFBd08sT0FNbEIsV0FDQXlxQyxFQUFBbHlDLFlBQUFreUMsRUFBQVAsY0FDQU8sRUFBQVAsYUFBQSxFQUNBejBDLEVBQUFpekMsS0FUa0Jud0MsV0FBQSxHQUNsQm15QyxFQTVKQSxTQUFBbDVDLEVBQUFpNUMsRUFBQXY2QixHQUNBLElBQUFyUSxLQUNBckgsT0FBQSxFQUNBbXlDLEdBQUEsRUFHQSxTQUFBQyxFQUFBMXhDLEdBQ0EyeEMsSUFDQTM2QixFQUFBaFgsR0FBQSxHQUdBLFNBQUE0eEMsRUFBQWwxQyxHQUNBaUssRUFBQWxJLEtBQUEvQixHQUNBQSxFQUFBd3pDLEtBQUEsU0FBQTF6QixFQUFBcTFCLEdBQ0FKLElBSUFoNUMsT0FBQWl3QixFQUFBLEVBQUFqd0IsQ0FBQWtPLEVBQUFqSyxHQUNBQSxFQUFBd3pDLEtBQUF4bkIsRUFBQSxFQUNBbXBCLEVBQ0FILEVBQUFsMUIsSUFFQTlmLElBQUE2MEMsSUFDQWp5QyxFQUFBa2QsR0FFQTdWLEVBQUE3TSxTQUNBMjNDLEdBQUEsRUFDQXo2QixFQUFBMVgsT0FPQSxTQUFBcXlDLElBQ0FGLElBR0FBLEdBQUEsRUFDQTlxQyxFQUFBekUsUUFBQSxTQUFBdkYsR0FDQUEsRUFBQXV6QyxLQUFBeG5CLEVBQUEsRUFDQS9yQixFQUFBbUssV0FFQUgsTUFHQSxPQTNDQWlyQyxFQUFBTCxJQTRDQUssVUFDQUQsWUFDQUQsUUFDQUksU0FBQSxXQUNBLE9BQUFuckMsR0FFQW9yQyxVQUFBLFdBQ0EsT0FBQXByQyxFQUFBRSxJQUFBLFNBQUFsSyxHQUNBLE9BQUFBLEVBQUFyRSxTQW9HQTA1QyxDQUFBMTVDLEVBQUFpNUMsRUFBQWx0QixHQW1CQSxTQUFBdmQsSUFLQTNNLEVBQUEyMkMsYUFBQTMyQyxFQUFBODJDLGVBQ0E5MkMsRUFBQTgyQyxjQUFBLEVBQ0FPLEVBQUFHLFlBSUF0dEIsRUFBQW1yQixJQWdCQSxPQVRBVSxNQUFBcHBDLFVBR0EzTSxFQUFBMjJDLFlBQUEsRUFHQXYwQyxJQUdBRyxFQU9BLFNBQUFILEVBQUF3RixFQUFBOHZDLEdBRUEsSUFBQU4sRUFBQWx5QyxVQUNBLFVBQUE5RCxNQUFBLGtEQUdBLElBQ0EsSUFBQStELE9BQUEsRUFDQXV5QyxFQUNBdnlDLEVBQUFuRixFQUFBcUMsTUFBQXVGLEdBQ09BLElBQUF5dEMsR0FPUCtCLEVBQUFQLGFBQUEsRUFJQXowQyxFQUFBdUssU0FLQXhILEVBQUFvcEIsRUFBQSxFQUFBN3NCLEtBQUExQixFQUFBbUcsUUFBQW5HLEVBQUFtRyxPQUFBa3ZDLElBQTRFdHZDLE1BQUEsRUFBQW5ILE1BQUF5MkMsSUFHNUVsd0MsRUFGT3lDLElBQUF3dEMsRUFFUDdtQixFQUFBLEVBQUE3c0IsS0FBQTFCLEVBQUFtRyxRQUFBbkcsRUFBQW1HLFVBQWlFSixNQUFBLEdBRWpFL0YsRUFBQW9DLEtBQUF3RixHQUdBekMsRUFBQVksTUFNQXF4QyxFQUFBVSxlQUFBLEVBQ0FWLEVBQUFyQixNQUFBcUIsRUFBQXJCLEtBQUE1d0MsRUFBQXZHLFFBTkFtNUMsRUFBQTV5QyxFQUFBdkcsTUFBQWszQyxFQUFBLEdBQUExekMsR0FRSyxNQUFBbEIsR0FDTGsyQyxFQUFBUCxhQUNBUixFQUFBbjFDLEdBRUFrMkMsRUFBQVUsZUFBQSxFQUNBVixFQUFBckIsS0FBQTcwQyxHQUFBLElBSUEsU0FBQWdwQixFQUFBL2tCLEVBQUF1eUMsR0FDQTEzQyxFQUFBMjJDLFlBQUEsRUFDQXQ1QixFQUFBaGEsUUFDQXEwQyxHQUlBdnlDLGFBQUEvRCxPQUNBOUMsT0FBQUMsZUFBQTRHLEVBQUEsYUFDQXZHLE1BQUEsTUFBQVQsRUFBQSxRQUFBZ0gsRUFBQW14QyxXQUFBbnhDLEVBQUFxQixPQUNBaEksY0FBQSxJQUdBK0QsRUFBQXd6QyxPQUNBNXdDLGFBQUEvRCxPQUFBZzFDLEVBQ0FBLEVBQUFqeEMsR0FFQWt4QyxFQUFBbHhDLElBR0FuRixFQUFBaUYsT0FBQUUsRUFDQW5GLEVBQUFnM0MsWUFBQSxFQUNBaDNDLEVBQUEwMkMsY0FBQTEyQyxFQUFBMDJDLGFBQUF0eUMsT0FBQWUsS0FsQkFuRixFQUFBZ0YsUUFBQUcsRUFDQW5GLEVBQUEwMkMsY0FBQTEyQyxFQUFBMDJDLGFBQUF2eUMsUUFBQWdCLElBbUJBNUMsRUFBQXd6QyxNQUFBeHpDLEVBQUF3ekMsS0FBQTV3QyxFQUFBdXlDLEdBQ0FuMUMsRUFBQXEwQyxRQUFBN3VDLFFBQUEsU0FBQW0wQixHQUNBLE9BQUFBLEVBQUFyZixHQUFBMVgsRUFBQXV5QyxLQUVBbjFDLEVBQUFxMEMsUUFBQSxLQUdBLFNBQUFtQixFQUFBcnRDLEVBQUFvckMsR0FDQSxJQUFBa0MsRUFBQXQ0QyxVQUFBQyxPQUFBLFFBQUE4QixJQUFBL0IsVUFBQSxHQUFBQSxVQUFBLE1BQ0FtZCxFQUFBbmQsVUFBQSxHQUVBdTRDLEVBQUEzNUMsT0FBQWl3QixFQUFBLEVBQUFqd0IsR0FDQTQzQyxLQUFBZ0MsaUJBQWdERCxXQUFBbkMsaUJBQUFrQyxRQUFBdHRDLFdBT2hELElBQUF5dEMsT0FBQSxFQUdBLFNBQUFDLEVBQUEvMUIsRUFBQXExQixHQUNBUyxJQUlBQSxHQUFBLEVBQ0F0N0IsRUFBQWxRLE9BQUE0aEIsRUFBQSxFQUNBMm5CLElBQ0F3QixFQUFBeEIsRUFBQW1DLGVBQUFKLEVBQUE1MUIsR0FBQTZ6QixFQUFBb0MsZUFBQUwsRUFBQTUxQixJQUVBeEYsRUFBQXdGLEVBQUFxMUIsSUFHQVUsRUFBQXpyQyxPQUFBNGhCLEVBQUEsRUFHQTFSLEVBQUFsUSxPQUFBLFdBRUEsSUFBQXdyQyxFQUFBLENBSUFBLEdBQUEsRUFNQSxJQUNBQyxFQUFBenJDLFNBQ08sTUFBQTlHLEdBQ1B3d0MsRUFBQXh3QyxHQUVBdXlDLEVBQUF6ckMsT0FBQTRoQixFQUFBLEVBRUEybkIsS0FBQXFDLGdCQUFBTixLQWVBLElBQUF0c0IsT0FBQSxFQUVBLE9BRUE0QyxFQUFBLEVBQUF0c0IsUUFBQXlJLEdBQUE4dEMsRUFBQTl0QyxFQUFBMHRDLEdBQUE3cEIsRUFBQSxFQUFBanJCLE9BQUFvSCxHQUFBK3RDLEVBQUE5QyxFQUFBanJDLEdBQUF1dEMsRUFBQUcsR0FBQTdwQixFQUFBLEVBQUF2dUIsU0FBQTBLLEdBQUFndUMsRUFBQWh1QyxFQUFBdXRDLEVBQUE5NUMsRUFBQWk2QyxHQUdBN3BCLEVBQUEsRUFBQXpzQixNQUFBNEksR0FBQXNyQyxFQUFBdHJDLEVBQUF1dEMsRUFBQUcsSUFBQXpzQixFQUFBd0QsRUFBQSxFQUFBcHNCLEtBQUEySCxJQXdCQSxTQUFBMEssRUFBQXlILEdBQ0EsSUFBQTFaLEVBQUFpUyxFQUFBalMsUUFDQUYsRUFBQW1TLEVBQUFuUyxRQUNBa0ksRUFBQWlLLEVBQUFqSyxNQUVBaEksS0FBQWthLEVBQ0EsSUFBQXM3QixFQUFBLFNBQUFDLEdBQ0EsT0FBQUEsYUFBQXgzQyxNQUFBeWIsRUFBQSs3QixHQUFBLEdBQUF0NkMsT0FBQWt4QixFQUFBLEVBQUFseEIsQ0FBQXM2QyxLQUFBenRDLEVBQUEwUixFQUFBdTRCLEdBQUF2NEIsRUFBQSs3QixJQUVBLElBQ0F6MUMsRUFBQUosS0FBQTQxQyxFQUFBeDdCLEVBQUFsYSxJQUNLLE1BQUE0QyxHQUNMLE9BQUFnWCxFQUFBaFgsR0FBQSxHQUVBZ1gsRUFBQWxRLE9BQUFnc0MsRUFBQWhzQyxPQXRDQWtzQyxDQUFBbHRCLEVBQUF5c0IsSUFBQXpzQixFQUFBd0QsRUFBQSxFQUFBbnNCLElBQUEwSCxJQXlDQSxTQUFBb3VDLEVBQUFqOEIsR0FDQSxJQUFBMVosRUFBQTIxQyxFQUFBMzFDLFFBQ0FrRSxFQUFBeXhDLEVBQUF6eEMsT0FDQWxELEVBQUEyMEMsRUFBQTMwQyxRQU9BN0YsT0FBQXk2QyxFQUFBLEVBQUF6NkMsQ0FBQSxXQUNBLElBQUE2RyxPQUFBLEVBQ0EsSUFDQUEsR0FBQWhDLElBQUFILElBQUFvRSxHQUFBQyxHQUNPLE1BQUFuRyxHQUVQLEdBQUFpQyxHQUFBZ0IsRUFBQSxPQUFBMFksRUFBQTNiLEdBQUEsR0FDQW0xQyxFQUFBbjFDLEdBR0EsSUFBQWlELElBQUFvcUIsRUFBQSxFQUFBdHNCLFFBQUFrRCxHQUdBLE9BQUEwWCxFQUFBMVgsR0FGQXF6QyxFQUFBcnpDLEVBQUEwWCxLQTlEQW04QixDQUFBcnRCLEVBQUF5c0IsSUFBQXpzQixFQUFBd0QsRUFBQSxFQUFBOWpCLElBQUFYLElBQUF1ckMsRUFBQXRxQixFQUFBc3NCLEVBQUFHLElBQUF6c0IsRUFBQXdELEVBQUEsRUFBQTVqQixLQUFBYixJQXFOQSxTQUFBWSxFQUFBMnNDLEVBQUFwN0IsR0FDQSxJQUFBeTZCLE9BQUEsRUFDQXhqQyxFQUFBeFYsT0FBQXdWLEtBQUF4SSxHQUNBMnRDLEtBRUFubEMsRUFBQS9MLFFBQUEsU0FBQWxJLEdBQ0EsSUFBQXE1QyxFQUFBLFNBQUE3MkIsRUFBQXExQixHQUNBLElBQUFKLEVBSUEsR0FBQUksRUFFQTc2QixFQUFBbFEsU0FDQWtRLEVBQUF3RixHQUFBLFFBQ1MsSUFBQS9qQixPQUFBa3hCLEVBQUEsRUFBQWx4QixDQUFBK2pCLFFBQUEreUIsR0FBQS95QixJQUFBZ3pCLEVBQUEsQ0FDVCxJQUFBOEQsRUFFQXQ4QixFQUFBbFEsU0FDQTJxQyxHQUFBLEVBQ0EsSUFBQThCLElBQUFELE1BQXdDdDVDLEdBQUF3aUIsRUFBQTgyQixHQUN4Q3Q4QixFQUFBMFIsRUFBQSxFQUFBenNCLE1BQUF3SixNQUFBcUgsTUFBQTVVLEtBQUF3QixLQUEwRDY1QyxHQUFhejVDLE9BQUFtVSxFQUFBblUsVUFBc0J5NUMsS0FHN0ZGLEVBQUF2c0MsT0FBQTRoQixFQUFBLEVBQ0EwcUIsRUFBQXA1QyxHQUFBcTVDLElBR0FyOEIsRUFBQWxRLE9BQUEsV0FFQTJxQyxJQUNBQSxHQUFBLEVBQ0F4akMsRUFBQS9MLFFBQUEsU0FBQWxJLEdBQ0EsT0FBQW81QyxFQUFBcDVDLEdBQUE4TSxhQUlBbUgsRUFBQS9MLFFBQUEsU0FBQWxJLEdBQ0F5M0MsR0FHQVMsRUFBQXpzQyxFQUFBekwsR0FBQW80QyxFQUFBcDRDLEVBQUFvNUMsRUFBQXA1QyxNQTlQQXc1QyxDQUFBMXRCLEVBQUFzc0IsRUFBQUcsSUFBQXpzQixFQUFBd0QsRUFBQSxFQUFBcHhCLEtBQUEyTSxJQXNFQSxTQUFBNHVDLEVBQUFyQixFQUFBcDdCLEdBQ0EsSUFBQW5SLEVBQUE0dEMsRUFBQTV0QyxRQUNBaEYsRUFBQTR5QyxFQUFBNXlDLEdBQ0FjLEVBQUE4eEMsRUFBQTl4QyxLQUVBckMsT0FBQSxFQUVBLElBQ0FBLEVBQUF1QixFQUFBRSxNQUFBOEUsRUFBQWxFLEdBQ0ssTUFBQXRHLEdBQ0wsT0FBQTJiLEVBQUEzYixHQUFBLEdBRUEsT0FBQXF0QixFQUFBLEVBQUF0c0IsUUFBQWtELEdBQUFxekMsRUFBQXJ6QyxFQUFBMFgsR0FBQTBSLEVBQUEsRUFBQXZ1QixTQUFBbUYsR0FBQXV6QyxFQUFBdnpDLEVBQUE4eUMsRUFBQXZ4QyxFQUFBdkksS0FBQTBlLEtBQUExWCxHQWxGQW8wQyxDQUFBNXRCLEVBQUFzc0IsRUFBQUcsSUFBQXpzQixFQUFBd0QsRUFBQSxFQUFBdGpCLElBQUFuQixJQXFGQSxTQUFBOHVDLEVBQUEzOEIsR0FDQSxJQUFBblIsRUFBQTh0QyxFQUFBOXRDLFFBQ0FoRixFQUFBOHlDLEVBQUE5eUMsR0FDQWMsRUFBQWd5QyxFQUFBaHlDLEtBTUEsSUFDQSxJQUFBaXlDLEVBQUEsU0FBQTV6QyxFQUFBd2MsR0FDQSxPQUFBa00sRUFBQSxFQUFBL3NCLE1BQUFxRSxHQUFBZ1gsRUFBQXdGLEdBQUF4RixFQUFBaFgsR0FBQSxJQUVBYSxFQUFBRSxNQUFBOEUsRUFBQWxFLEVBQUE2RSxPQUFBb3RDLElBQ0FBLEVBQUE5c0MsU0FDQWtRLEVBQUFsUSxPQUFBLFdBQ0EsT0FBQThzQyxFQUFBOXNDLFdBR0ssTUFBQXpMLEdBQ0wsT0FBQTJiLEVBQUEzYixHQUFBLElBekdBdzRDLENBQUEvdEIsRUFBQXlzQixJQUFBenNCLEVBQUF3RCxFQUFBLEVBQUFwa0IsS0FBQUwsSUFBQSt0QyxFQUFBOXNCLEVBQUFzc0IsRUFBQUcsSUFBQXpzQixFQUFBd0QsRUFBQSxFQUFBN2lCLEtBQUE1QixJQTJJQSxTQUFBbEksRUFBQXFhLEdBQ0EsR0FBQXJhLEVBQUEwQyxZQUFBLENBQ0EsSUFBQXkwQyxHQUFvQnAzQyxPQUFBc2EsTUFDcEJBLEVBQUFsUSxPQUFBLFdBQ0EsT0FBQXJPLE9BQUFpd0IsRUFBQSxFQUFBandCLENBQUFrRSxFQUFBbzBDLFFBQUErQyxJQUVBbjNDLEVBQUFvMEMsUUFBQXR5QyxLQUFBcTFDLFFBRUFuM0MsRUFBQXUwQyxZQUFBbDZCLEVBQUFyYSxFQUFBdEIsU0FBQSxHQUFBMmIsRUFBQXJhLEVBQUEyQyxVQW5KQXkwQyxDQUFBanVCLEVBQUF5c0IsSUFBQXpzQixFQUFBd0QsRUFBQSxFQUFBeGlCLE9BQUFqQyxJQXVKQSxTQUFBbXZDLEVBQUFoOUIsR0FDQWc5QixJQUFBdHJCLEVBQUEsSUFDQXNyQixFQUFBdDNDLEdBRUFzM0MsRUFBQTMwQyxhQUNBMjBDLEVBQUFsdEMsU0FFQWtRLElBOUpBaTlCLENBQUFudUIsRUFBQXlzQixJQUFBenNCLEVBQUF3RCxFQUFBLEVBQUFyaUIsT0FBQXBDLElBa1FBLFNBQUFxdkMsRUFBQWw5QixHQUNBLElBQUE5UCxFQUFBZ3RDLEVBQUFodEMsU0FDQXZGLEVBQUF1eUMsRUFBQXZ5QyxLQUVBLElBQ0EsSUFBQW9OLEVBQUE3SCxFQUFBbkcsV0FBQW5GLEdBQUFzTyxLQUFBMUQsT0FBQTdFLElBQ0FxVixFQUFBakksR0FDSyxNQUFBMVQsR0FDTDJiLEVBQUEzYixHQUFBLElBMVFBODRDLENBQUFydUIsRUFBQXlzQixJQUFBenNCLEVBQUF3RCxFQUFBLEVBQUFqaUIsY0FBQXhDLElBOFFBLFNBQUF1dkMsRUFBQXA5QixHQUNBLElBQUE1WixFQUFBZzNDLEVBQUFoM0MsUUFDQUwsRUFBQXEzQyxFQUFBcjNDLE9BRUE2WCxFQUFBMEMsRUFBQWxhLEdBQ0F3WCxFQUFBeFgsVUFDQTRaLEVBQUF2ZSxPQUFBa3hCLEVBQUEsRUFBQWx4QixDQUFBcUUsRUFBQUMsR0FBQXdxQixFQUFBLEVBQUEzUSxRQUFBaEMsSUFwUkF5L0IsQ0FBQXZ1QixFQUFBeXNCLElBQUF6c0IsRUFBQXdELEVBQUEsRUFBQS9oQixNQUFBMUMsSUEyUkEsU0FBQXZILEVBQUEwWixHQUNBMVosRUFBQWlLLE1BQUF5UCxHQTVSQXM5QixDQUFBeHVCLEVBQUF5c0IsSUFBQXpzQixFQUFBd0QsRUFBQSxFQUFBaGlCLFVBQUF6QyxJQXVSQSxTQUFBaWhCLEVBQUE5TyxHQUNBQSxJQUFBdTZCLEVBQUFQLGFBeFJBdUQsQ0FBQXp1QixFQUFBeXNCLElBQUF6c0IsRUFBQXdELEVBQUEsRUFBQTloQixXQUFBM0MsSUErUkEsU0FBQTRDLEVBQUF1UCxHQUNBQSxFQUFBMDVCLEVBQUFqcEMsSUFoU0Erc0MsQ0FBQTF1QixFQUFBeXNCLElBQUF6c0IsRUFBQXdELEVBQUEsRUFBQTVoQixXQUFBN0MsSUFtU0EsU0FBQTFHLEVBQUE2WSxHQUNBMFIsRUFBQSxFQUFBL3VCLE9BQUErMkMsRUFBQXZ5QyxHQUNBNlksSUFyU0F5OUIsQ0FBQTN1QixFQUFBeXNCLEtBQUExdEMsR0FJQSxTQUFBOHRDLEVBQUF2MkMsRUFBQTRhLEdBQ0EsSUFBQTA5QixFQUFBdDRDLEVBQUFzc0IsRUFBQSxHQUNBQSxFQUFBLEVBQUE3c0IsS0FBQTY0QyxHQUNBMTlCLEVBQUFsUSxPQUFBNHRDLEVBQ0toc0IsRUFBQSxFQUFBN3NCLEtBQUFPLEVBQUFzMUMsU0FDTDE2QixFQUFBbFEsT0FBQSxXQUNBLE9BQUExSyxFQUFBczFDLFVBS0F0MUMsRUFBQUMsS0FBQTJhLEVBQUEsU0FBQTNiLEdBQ0EsT0FBQTJiLEVBQUEzYixHQUFBLEtBSUEsU0FBQXczQyxFQUFBMTRDLEVBQUFpNEMsRUFBQTk1QyxFQUFBMGUsR0FDQSs0QixFQUFBNTFDLEVBQUEyQyxFQUFBeUUsRUFBQTJJLEVBQUF3bUMsRUFBQTUrQixFQUFBc2dDLEVBQUE5NUMsRUFBQTBlLEdBd0ZBLFNBQUE0N0IsRUFBQStCLEVBQUF2QyxFQUFBcDdCLEdBQ0EsSUFBQW5SLEVBQUE4dUMsRUFBQTl1QyxRQUNBaEYsRUFBQTh6QyxFQUFBOXpDLEdBQ0FjLEVBQUFnekMsRUFBQWh6QyxLQUNBd0QsRUFBQXd2QyxFQUFBeHZDLFNBRUF5dkMsRUFqYUEsU0FBQTMxQyxHQUNBLElBQUE0RyxFQUFBNUcsRUFBQTRHLFFBQ0FoRixFQUFBNUIsRUFBQTRCLEdBQ0FjLEVBQUExQyxFQUFBMEMsS0FFQSxHQUFBK21CLEVBQUEsRUFBQXZ1QixTQUFBMEcsR0FDQSxPQUFBQSxFQUlBLElBa0JBZzBDLEVBQ0E3dkMsRUFuQkExRixPQUFBLEVBQ0FqRSxPQUFBLEVBQ0EsSUFDQWlFLEVBQUF1QixFQUFBRSxNQUFBOEUsRUFBQWxFLEdBQ0csTUFBQTNCLEdBQ0gzRSxFQUFBMkUsRUFJQSxPQUFBMG9CLEVBQUEsRUFBQXZ1QixTQUFBbUYsR0FDQUEsRUFLQWpFLEVBQUE1QyxPQUFBaXdCLEVBQUEsRUFBQWp3QixDQUFBLFdBQ0EsTUFBQTRDLElBQ0c1QyxPQUFBaXdCLEVBQUEsRUFBQWp3QixFQUNIbzhDLE9BQUEsRUFDQTd2QyxHQUFlOUUsTUFBQSxFQUFBbkgsTUFBQXVHLEdBSWYsU0FBQXlDLEdBQ0EsT0FBQTh5QyxHQUhjMzBDLE1BQUEsRUFBQW5ILE1BT2RnSixJQUhBOHlDLEdBQUEsRUFDQTd2QyxNQTZYQTh2QyxFQUEyQ2p2QyxVQUFBaEYsS0FBQWMsU0FFM0MsSUFDQWxKLE9BQUF5NkMsRUFBQSxFQUFBejZDLEdBQ0EsSUFBQXM4QyxFQUFBaEYsRUFBQTZFLEVBQUE5M0MsRUFBQXlFLEVBQUEySSxFQUFBd21DLEVBQUE1K0IsRUFBQXNnQyxFQUFBdnhDLEVBQUF2SSxLQUFBNk0sRUFBQSxLQUFBdWpCLEVBQUEsR0FFQXZqQixFQUNBNlIsRUFBQSs5QixHQUVBSCxFQUFBOUQsWUFDQVUsRUFBQUksUUFBQW1ELEdBQ0EvOUIsRUFBQSs5QixJQUNTSCxFQUFBeDFDLE9BQ1RveUMsRUFBQUUsTUFBQWtELEVBQUF4MUMsUUFFQTRYLEVBQUErOUIsR0FHSyxRQUNMdDhDLE9BQUF5NkMsRUFBQSxFQUFBejZDLElBNEJBLFNBQUEyM0MsRUFBQTNxQyxFQUFBMnNDLEVBQUFwN0IsR0FDQSxJQUFBL0ksRUFBQXhWLE9BQUF3VixLQUFBeEksR0FFQSxJQUFBd0ksRUFBQW5VLE9BQ0EsT0FBQWtkLEVBQUEwUixFQUFBLEVBQUF6c0IsTUFBQXdKLFVBR0EsSUFBQXV2QyxFQUFBLEVBQ0F2RCxPQUFBLEVBQ0F3RCxLQUNBN0IsS0FTQW5sQyxFQUFBL0wsUUFBQSxTQUFBbEksR0FDQSxJQUFBcTVDLEVBQUEsU0FBQTcyQixFQUFBcTFCLEdBQ0FKLElBR0FJLEdBQUFwNUMsT0FBQWt4QixFQUFBLEVBQUFseEIsQ0FBQStqQixRQUFBK3lCLEdBQUEveUIsSUFBQWd6QixHQUNBeDRCLEVBQUFsUSxTQUNBa1EsRUFBQXdGLEVBQUFxMUIsS0FFQW9ELEVBQUFqN0MsR0FBQXdpQixJQUNBdzRCLElBaEJBL21DLEVBQUFuVSxTQUNBMjNDLEdBQUEsRUFDQXo2QixFQUFBMFIsRUFBQSxFQUFBenNCLE1BQUF3SixHQUFBaWpCLEVBQUEsRUFBQTFxQixLQUFBdEUsS0FBcUR1N0MsR0FBWW43QyxPQUFBbVUsRUFBQW5VLFVBQXNCbTdDLE9Ba0J2RjVCLEVBQUF2c0MsT0FBQTRoQixFQUFBLEVBQ0EwcUIsRUFBQXA1QyxHQUFBcTVDLElBR0FyOEIsRUFBQWxRLE9BQUEsV0FDQTJxQyxJQUNBQSxHQUFBLEVBQ0F4akMsRUFBQS9MLFFBQUEsU0FBQWxJLEdBQ0EsT0FBQW81QyxFQUFBcDVDLEdBQUE4TSxhQUtBbUgsRUFBQS9MLFFBQUEsU0FBQWxJLEdBQ0EsT0FBQWs0QyxFQUFBenNDLEVBQUF6TCxHQUFBbzRDLEVBQUFwNEMsRUFBQW81QyxFQUFBcDVDLE9DaG9CQSxJQUNBazdDLEVBQUFDLHNGQUVBLFNBQUFDLEVBQUFDLEVBQUFDLEdBQ0EsUUFBQTV6QyxFQUFBN0gsVUFBQUMsT0FBQTZILEVBQUF6RixNQUFBd0YsRUFBQSxFQUFBQSxFQUFBLEtBQUFFLEVBQUEsRUFBb0ZBLEVBQUFGLEVBQWFFLElBQ2pHRCxFQUFBQyxFQUFBLEdBQUEvSCxVQUFBK0gsR0FHQSxJQUFBekgsT0FBQSxFQUVBdXVCLEVBQUEsRUFBQXZ1QixTQUFBazdDLElBSUFsN0MsRUFBQWs3QyxFQUNBQSxFQUFBQyxJQUVBNzhDLE9BQUFpd0IsRUFBQSxFQUFBandCLENBQUE2OEMsRUFBQTVzQixFQUFBLEVBQUE3c0IsS0FBQXE1QyxHQUNBLzZDLEVBQUFtN0MsRUFBQXYwQyxXQUFBbkYsRUFBQStGLEdBQ0FsSixPQUFBaXdCLEVBQUEsRUFBQWp3QixDQUFBMEIsRUFBQXV1QixFQUFBLEVBQUF2dUIsU0FBQSs2QyxJQUdBLElBQUFLLEVBQUFGLEVBQ0F2NEMsRUFBQXk0QyxFQUFBejRDLFVBQ0F5RSxFQUFBZzBDLEVBQUFoMEMsU0FDQTJJLEVBQUFxckMsRUFBQXJyQyxTQUNBckUsRUFBQTB2QyxFQUFBMXZDLFFBQ0F3cUMsRUFBQWtGLEVBQUFsRixZQUNBQyxFQUFBaUYsRUFBQWpGLE9BQ0FDLEVBQUFnRixFQUFBaEYsUUFHQTZCLEVBQUEzNUMsT0FBQWl3QixFQUFBLEVBQUFqd0IsR0FFQTQzQyxJQUVBQSxFQUFBZ0MsZ0JBQUFoQyxFQUFBZ0MsaUJBQUEzcEIsRUFBQSxFQUNBMm5CLEVBQUFvQyxlQUFBcEMsRUFBQW9DLGdCQUFBL3BCLEVBQUEsRUFDQTJuQixFQUFBbUMsZUFBQW5DLEVBQUFtQyxnQkFBQTlwQixFQUFBLEVBQ0EybkIsRUFBQXFDLGdCQUFBckMsRUFBQXFDLGlCQUFBaHFCLEVBQUEsRUFDQTJuQixFQUFBbUYsaUJBQUFuRixFQUFBbUYsa0JBQUE5c0IsRUFBQSxFQUVBMm5CLEVBQUFnQyxpQkFBaUNELFdBQUEzTyxNQUFBLEVBQUF3TSxlQUFBLEVBQUFwckMsUUFBNkQ0K0IsTUFBQSxFQUFBNlIsT0FBQTN6QyxXQUc5RixJQUFBakYsRUFBQXF6QyxFQUFBNTFDLEVBQUEyQyxFQUFBckUsT0FBQWl3QixFQUFBLEVBQUFqd0IsQ0FBQThJLEdBQUEySSxFQUFBckUsR0FBdUZ3cUMsY0FBQUMsU0FBQUMsV0FBNkQ2QixFQUFBa0QsRUFBQWg5QyxNQU1wSixPQUpBKzNDLEdBQ0FBLEVBQUFvQyxlQUFBTCxFQUFBMTFDLEdBR0FBLHloQkNyREFsRCxFQUFBLFFDTUEsV0FDQSxJQUFBeUYsRUFBQXBGLFVBQUFDLE9BQUEsUUFBQThCLElBQUEvQixVQUFBLEdBQUFBLFVBQUEsTUFFQTQ3QyxFQUFBeDJDLEVBQUE0RyxRQUNBQSxPQUFBakssSUFBQTY1QyxLQUErQ0EsRUFDL0MzakMsRUFaQSxTQUFBMVgsRUFBQTZULEdBQThDLElBQUFyVSxLQUFpQixRQUFBN0IsS0FBQXFDLEVBQXFCNlQsRUFBQW5RLFFBQUEvRixJQUFBLEdBQW9DVSxPQUFBVyxVQUFBQyxlQUFBbkIsS0FBQWtDLEVBQUFyQyxLQUE2RDZCLEVBQUE3QixHQUFBcUMsRUFBQXJDLElBQXNCLE9BQUE2QixFQVkzTXNVLENBQUFqUCxHQUFBLFlBRUFveEMsRUFBQXYrQixFQUFBdStCLFlBQ0FDLEVBQUF4K0IsRUFBQXcrQixPQUNBQyxFQUFBeitCLEVBQUF5K0IsUUFHQSxHQUFBN25CLEVBQUEsRUFBQTdzQixLQUFBaVcsR0FFQSxVQUFBdlcsTUFBQSx3RkFNQSxHQUFBKzBDLElBQUE1bkIsRUFBQSxFQUFBN3NCLEtBQUF5MEMsR0FDQSxVQUFBLzBDLE1BQUEscUVBT0EsR0FBQWcxQyxJQUFBN25CLEVBQUEsRUFBQTdzQixLQUFBMDBDLEdBQ0EsVUFBQWgxQyxNQUFBLHNFQUdBLEdBQUF1VyxFQUFBc0UsVUFBQXNTLEVBQUEsRUFBQTdzQixLQUFBaVcsRUFBQXNFLFNBQ0EsVUFBQTdhLE1BQUEsc0VBR0EsU0FBQW02QyxFQUFBbm1DLEdBQ0EsSUFBQXJGLEVBQUFxRixFQUFBckYsU0FDQTNJLEVBQUFnTyxFQUFBaE8sU0FFQW8wQyxFQUFBbDlDLE9BQUFreEIsRUFBQSxFQUFBbHhCLEdBYUEsT0FaQWs5QyxFQUFBcC9CLE1BQUF6RSxFQUFBc0UsU0FBQXNTLEVBQUEsR0FBQWl0QixFQUFBcC9CLE1BRUFtL0IsRUFBQWhtQyxJQUFBMGxDLEVBQUFqbUMsS0FBQSxNQUNBdEosVUFDQS9JLFVBQUE2NEMsRUFBQTc0QyxVQUNBeUUsV0FDQTJJLFdBQ0FtbUMsY0FDQUMsU0FDQUMsWUFHQSxTQUFBaDBDLEdBQ0EsZ0JBQUFpRixHQUNBNnVDLEtBQUFtRixrQkFDQW5GLEVBQUFtRixpQkFBQWgwQyxHQUVBLElBQUFsQyxFQUFBL0MsRUFBQWlGLEdBRUEsT0FEQW0wQyxFQUFBcC9CLEtBQUEvVSxHQUNBbEMsSUFjQSxPQVRBbzJDLEVBQUFobUMsSUFBQSxXQUNBLFVBQUFuVSxNQUFBLGlHQUdBbTZDLEVBQUFodUMsV0FBQSxTQUFBdkosR0FDQTFGLE9BQUFpd0IsRUFBQSxFQUFBandCLENBQUEwRixFQUFBdXFCLEVBQUEsRUFBQXh2QixPQUFBVCxPQUFBaXdCLEVBQUEsRUFBQWp3QixDQUFBLGlCQUFBMEYsSUFDQXVxQixFQUFBLEVBQUEvdUIsT0FBQWtNLEVBQUExSCxJQUdBdTNDLDRGQ25FeUI5TyxFQWR6QixJQUFBekMsRUFBQXhzQyxFQUFBLElBRUFpK0MsRUFBQWorQyxFQUFBLEtBTUFrK0MsRUFBQWwrQyxFQUFBLCtCQU15Qml2QyxHQUZuQmtQLEVBQVcsU0FBQy9tQyxHQUFELE9BQVdBLEVBQU02M0IsT0FFbkIsU0FBVUEsSUFBVixPQUFBM0IsbUJBQUFDLEtBQUEsU0FBQVksR0FBQSxjQUFBQSxFQUFBVixLQUFBVSxFQUFBdnBDLE1BQUEsY0FBQXVwQyxFQUFBdnBDLEtBQUEsR0FDTCxFQUFBNG5DLEVBQUF4OEIsV0FBVXdnQyxrQ0FBVmxELG1CQUFBOFEsS0FBMkMsU0FBQUMsRUFBV3gwQyxHQUFYLElBQUFvbEMsRUFBQSxPQUFBM0IsbUJBQUFDLEtBQUEsU0FBQUMsR0FBQSxjQUFBQSxFQUFBQyxLQUFBRCxFQUFBNW9DLE1BQUEsY0FBQTRvQyxFQUFBNW9DLEtBQUEsR0FDM0IsRUFBQTRuQyxFQUFBbDlCLFFBQU82dUMsR0FEb0IsY0FDekNsUCxFQUR5Q3pCLEVBQUFFLE1BRTdDdUIsR0FBUyxLQUNJLEtBQ1RBLEVBQVEsSUFKaUN6QixFQUFBNW9DLEtBQUEsR0FNdkMsRUFBQTRuQyxFQUFBaG5DLE1BQUksRUFBQTA0QyxFQUFBbFAsb0JBQW1CQyxNQUFPQSxLQU5TLHdCQUFBekIsRUFBQUksU0FBQXlRLEVBQUFwckMsU0FEdEMsY0FBQWs3QixFQUFBdnBDLEtBQUEsR0FVTCxFQUFBNG5DLEVBQUF4OEIsV0FBVXlnQyxrQ0FBVm5ELG1CQUFBOFEsS0FBMkMsU0FBQUUsRUFBV3owQyxHQUFYLElBQUFvbEMsRUFBQSxPQUFBM0IsbUJBQUFDLEtBQUEsU0FBQU8sR0FBQSxjQUFBQSxFQUFBTCxLQUFBSyxFQUFBbHBDLE1BQUEsY0FBQWtwQyxFQUFBbHBDLEtBQUEsR0FFM0IsRUFBQTRuQyxFQUFBbDlCLFFBQU82dUMsR0FGb0IsY0FFekNsUCxFQUZ5Q25CLEVBQUFKLE1BRzdDdUIsR0FBUyxLQUNJLE1BQ1RBLEVBQVEsS0FMaUNuQixFQUFBbHBDLEtBQUEsR0FPdkMsRUFBQTRuQyxFQUFBaG5DLE1BQUksRUFBQTA0QyxFQUFBbFAsb0JBQW1CQyxNQUFPQSxLQVBTLHdCQUFBbkIsRUFBQUYsU0FBQTBRLEVBQUFyckMsU0FWdEMsY0FBQWs3QixFQUFBdnBDLEtBQUEsR0FvQkwsRUFBQTRuQyxFQUFBeDhCLFdBQVUwZ0MscUNBQVZwRCxtQkFBQThRLEtBQThDLFNBQUFHLEVBQVcxMEMsR0FBWCxPQUFBeWpDLG1CQUFBQyxLQUFBLFNBQUFVLEdBQUEsY0FBQUEsRUFBQVIsS0FBQVEsRUFBQXJwQyxNQUFBLGNBQUFxcEMsRUFBQXJwQyxLQUFBLEdBQzFDLEVBQUE0bkMsRUFBQWhuQyxNQUFJLEVBQUEwNEMsRUFBQWxQLG9CQUFtQkMsTUFBTyxPQURZLHdCQUFBaEIsRUFBQUwsU0FBQTJRLEVBQUF0ckMsU0FwQnpDLHdCQUFBazdCLEVBQUFQLFNBQUFDLEVBQUE1NkIsdWdCQ3NEVXVyQyxFQXBFekIsSUFBQWhTLEVBQUF4c0MsRUFBQSxJQUVBeStDLEVBQUF6K0MsRUFBQSxLQUdBMCtDLEVBQUExK0MsRUFBQSxLQUlBMitDLEVBQUEzK0MsRUFBQSxLQUtBNCtDLEVBQUE1K0MsRUFBQSxJQU1BNitDLEVBQUE3K0MsRUFBQSxLQUdBOCtDLEVBQUE5K0MsRUFBQSxLQUlBKytDLEVBQUEvK0MsRUFBQSxLQU1BZy9DLEVBQUFoL0MsRUFBQSxJQU9BaS9DLEVBQUFqL0MsRUFBQSxLQUlBay9DLEVBQUFsL0MsRUFBQSxLQUtBeXNDLEVBQUF6c0MsRUFBQSxJQUtBbS9DLEVBQUFuL0MsRUFBQSxLQVFBby9DLEVBQUFwL0MsRUFBQSxJQUVBMnNDLEdBREEzc0MsRUFBQSxJQUNBQSxFQUFBLFFBQ0FBLEVBQUEsNkJBR3lCdytDLElBQVYsU0FBVUEsSUFBVixJQUFBem9CLEVBQUEzMUIsRUFBQWl0QyxFQUFBZ1MsRUFBQWx5QyxFQUFBZzVCLEVBQUEsT0FBQW1ILG1CQUFBQyxLQUFBLFNBQUErUixHQUFBLGNBQUFBLEVBQUE3UixLQUFBNlIsRUFBQTE2QyxNQUFBLGNBQUEwNkMsRUFBQTE2QyxLQUFBLEdBRVMsRUFBQTRuQyxFQUFBbDlCLFFBQU8sU0FBQzhILEdBQUQsT0FBV0EsRUFBTTJlLFFBRmpDLE9BRUxBLEVBRkt1cEIsRUFBQTVSLEtBR0Z0dEMsRUFBSSxFQUhGLFlBR0tBLEVBQUkyMUIsRUFBTTV6QixRQUhmLENBQUFtOUMsRUFBQTE2QyxLQUFBLGdCQUlEdUksR0FDRjRvQixPQUNJbnpCLEdBQUltekIsRUFBTTMxQixHQUFHd0MsR0FDYmtJLEtBQU1pckIsRUFBTTMxQixHQUFHMEssS0FDZm9yQixLQUFNSCxFQUFNMzFCLEdBQUc4MUIsS0FDZkMsTUFBT0osRUFBTTMxQixHQUFHKzFCLFFBVGpCbXBCLEVBQUExNkMsS0FBQSxHQVlELEVBQUE0bkMsRUFBQWhuQyxNQUFJLEVBQUF3NUMsRUFBQWxwQixnQ0FBK0Izb0IsSUFabEMsT0FHdUIvTSxJQUh2QmsvQyxFQUFBMTZDLEtBQUEsdUJBQUEwNkMsRUFBQTE2QyxLQUFBLElBZ0JZLEVBQUE0bkMsRUFBQWw5QixRQUFPLFNBQUM4SCxHQUFELE9BQVdBLEVBQU1pb0MsV0FoQnBDLFFBZ0JMQSxFQWhCS0MsRUFBQTVSLEtBaUJQdmdDLEtBRUsvTSxFQUFJLEVBbkJGLGFBbUJLQSxFQUFJaS9DLEVBQVNsOUMsUUFuQmxCLENBQUFtOUMsRUFBQTE2QyxLQUFBLFNBQUEwNkMsRUFBQUMsR0FvQkNGLEVBQVNqL0MsR0FBRzBLLEtBcEJidzBDLEVBQUExNkMsS0FxQkYsVUFyQkUwNkMsRUFBQUMsR0FBQSxHQWdDRixZQWhDRUQsRUFBQUMsR0FBQSxHQTJDRixhQTNDRUQsRUFBQUMsR0FBQSxHQXNERixVQXRERUQsRUFBQUMsR0FBQSxHQWlFRixTQWpFRUQsRUFBQUMsR0FBQSwyQkFzQkhweUMsR0FDSXZLLEdBQUl5OEMsRUFBU2ovQyxHQUFHd0MsR0FDaEJvVyxFQUFHOEcsUUFBTUMsYUFBYUMsRUFBSXEvQixFQUFTai9DLEdBQUc0ZixFQUFJLEdBQzFDL0csRUFBRyxHQXpCSnFtQyxFQUFBMTZDLEtBQUEsSUE0QkcsRUFBQTRuQyxFQUFBaG5DLE1BQUksRUFBQWs1QyxFQUFBOVAsc0JBQXFCemhDLElBNUI1QixlQUFBbXlDLEVBQUF2UixPQUFBLDJCQWlDSDVnQyxHQUNJdkssR0FBSXk4QyxFQUFTai9DLEdBQUd3QyxHQUNoQm9XLEVBQUc4RyxRQUFNQyxhQUFhQyxFQUFJcS9CLEVBQVNqL0MsR0FBRzRmLEVBQUksR0FDMUMvRyxFQUFHLElBcENKcW1DLEVBQUExNkMsS0FBQSxJQXVDRyxFQUFBNG5DLEVBQUFobkMsTUFBSSxFQUFBazVDLEVBQUE5UCxzQkFBcUJ6aEMsSUF2QzVCLGVBQUFteUMsRUFBQXZSLE9BQUEsMkJBNENINWdDLEdBQ0l2SyxHQUFJeThDLEVBQVNqL0MsR0FBR3dDLEdBQ2hCb1csRUFBRzhHLFFBQU1DLGFBQWFDLEVBQUlxL0IsRUFBU2ovQyxHQUFHNGYsRUFBSSxHQUMxQy9HLEVBQUcsS0EvQ0pxbUMsRUFBQTE2QyxLQUFBLElBa0RHLEVBQUE0bkMsRUFBQWhuQyxNQUFJLEVBQUFrNUMsRUFBQTlQLHNCQUFxQnpoQyxJQWxENUIsZUFBQW15QyxFQUFBdlIsT0FBQSwyQkF1REg1Z0MsR0FDSXZLLEdBQUl5OEMsRUFBU2ovQyxHQUFHd0MsR0FDaEJvVyxFQUFHOEcsUUFBTUMsYUFBYUMsRUFBSXEvQixFQUFTai9DLEdBQUc0ZixFQUFJLEdBQUssSUFBTSxFQUNyRC9HLEVBQUcsR0ExREpxbUMsRUFBQTE2QyxLQUFBLElBNkRHLEVBQUE0bkMsRUFBQWhuQyxNQUFJLEVBQUFrNUMsRUFBQTlQLHNCQUFxQnpoQyxJQTdENUIsZUFBQW15QyxFQUFBdlIsT0FBQSwyQkFrRUg1Z0MsR0FDSXZLLEdBQUl5OEMsRUFBU2ovQyxHQUFHd0MsR0FDaEJvVyxFQUFHOEcsUUFBTUMsYUFBYUMsRUFBSXEvQixFQUFTai9DLEdBQUc0ZixFQUFJLEdBQUssSUFBTSxFQUFJLElBQU0sRUFDL0QvRyxFQUFHLEdBckVKcW1DLEVBQUExNkMsS0FBQSxJQXdFRyxFQUFBNG5DLEVBQUFobkMsTUFBSSxFQUFBazVDLEVBQUE5UCxzQkFBcUJ6aEMsSUF4RTVCLGVBQUFteUMsRUFBQXZSLE9BQUEsb0JBbUIwQjN0QyxJQW5CMUJrL0MsRUFBQTE2QyxLQUFBLHdCQUFBMDZDLEVBQUExNkMsS0FBQSxJQWdGTCxFQUFBNG5DLEVBQUF4OEIsV0FBVThnQyxxQkFBVnhELG1CQUFBOFEsS0FBOEIsU0FBQUMsRUFBV3gwQyxHQUFYLE9BQUF5akMsbUJBQUFDLEtBQUEsU0FBQUMsR0FBQSxjQUFBQSxFQUFBQyxLQUFBRCxFQUFBNW9DLE1BQUEsY0FBQTRvQyxFQUFBNW9DLEtBQUEsR0FDMUIsRUFBQTRuQyxFQUFBaG5DLE1BQUksRUFBQWs1QyxFQUFBOVAsc0JBQXFCL2tDLEVBQU9zRCxVQUROLHdCQUFBcWdDLEVBQUFJLFNBQUF5USxFQUFBcHJDLFNBaEZ6QixlQUFBcXNDLEVBQUExNkMsS0FBQSxJQW9GTCxFQUFBNG5DLEVBQUF4OEIsV0FBVWtnQyx1Q0FBVjVDLG1CQUFBOFEsS0FBZ0QsU0FBQUUsRUFBV3owQyxHQUFYLE9BQUF5akMsbUJBQUFDLEtBQUEsU0FBQU8sR0FBQSxjQUFBQSxFQUFBTCxLQUFBSyxFQUFBbHBDLE1BQUEsY0FBQWtwQyxFQUFBbHBDLEtBQUEsR0FDNUMsRUFBQTRuQyxFQUFBaG5DLE1BQUksRUFBQW81QyxFQUFBam5CLG9DQUFtQzl0QixFQUFPc0QsVUFERixjQUFBMmdDLEVBQUFscEMsS0FBQSxHQUk1QyxFQUFBNG5DLEVBQUFqL0IsTUFBS2cvQixrQkFKdUMsd0JBQUF1QixFQUFBRixTQUFBMFEsRUFBQXJyQyxTQXBGM0MsZUFBQXFzQyxFQUFBMTZDLEtBQUEsSUEwRkwsRUFBQTRuQyxFQUFBeDhCLFdBQVVtZ0MsdUNBQVY3QyxtQkFBQThRLEtBQWdELFNBQUFHLEVBQVcxMEMsR0FBWCxJQUFBeTFCLEVBQUFXLEVBQUFDLEVBQUF2SixFQUFBNm9CLEVBQUEsT0FBQWxTLG1CQUFBQyxLQUFBLFNBQUFVLEdBQUEsY0FBQUEsRUFBQVIsS0FBQVEsRUFBQXJwQyxNQUFBLGNBQUFxcEMsRUFBQXJwQyxLQUFBLEdBRWpDLEVBQUE0bkMsRUFBQWw5QixRQUFPLFNBQUM4SCxHQUFELE9BQVdBLEVBQU1rb0IsT0FGUyxjQUU5Q0EsRUFGOEMyTyxFQUFBUCxLQUFBek4sRUFHOUJiLE1BQUlHLGNBQWNELEVBQU16MUIsRUFBT3NELFFBQVF2SyxJQUhUczlCLEVBQUF2QyxFQUFBc0MsRUFBQSxHQUczQ3RKLEVBSDJDdUosRUFBQSxHQUFBQSxFQUFBLEdBQUErTixFQUFBcnBDLEtBQUEsR0FNNUMsRUFBQTRuQyxFQUFBaG5DLE1BQUksRUFBQW81QyxFQUFBL21CLG9DQUFtQ2h1QixFQUFPc0QsVUFORixjQUFBOGdDLEVBQUFycEMsS0FBQSxHQVVyQyxFQUFBNG5DLEVBQUFsOUIsUUFBTyxTQUFDOEgsR0FBRCxPQUFXQSxFQUFNa29CLE9BVmEsVUFVbERBLEVBVmtEMk8sRUFBQVAsT0FXbkN0TyxNQUFJSSxZQUFZRixHQUNwQm41QixRQUFRd3dCLEdBQVMsR0Fac0IsQ0FBQXNYLEVBQUFycEMsS0FBQSxnQkFheEN1SSxHQUNGd3BCLE1BQU9BLEdBZG1Dc1gsRUFBQXJwQyxLQUFBLElBZ0J4QyxFQUFBNG5DLEVBQUFobkMsTUFBSSxFQUFBMDVDLEVBQUF4USw4QkFBNkJ2aEMsSUFoQk8sUUFBQThnQyxFQUFBcnBDLEtBQUEsd0JBQUFxcEMsRUFBQXJwQyxLQUFBLElBbUJ4QyxFQUFBNG5DLEVBQUFqL0IsTUFBSzYrQixtQkFBa0J6VixHQW5CaUIseUJBQUFzWCxFQUFBTCxTQUFBMlEsRUFBQXRyQyxTQTFGM0MsZUFBQXFzQyxFQUFBMTZDLEtBQUEsSUFnSEwsRUFBQTRuQyxFQUFBeDhCLFdBQVVvZ0MsdUNBQVY5QyxtQkFBQThRLEtBQWdELFNBQUFxQixFQUFXNTFDLEdBQVgsT0FBQXlqQyxtQkFBQUMsS0FBQSxTQUFBWSxHQUFBLGNBQUFBLEVBQUFWLEtBQUFVLEVBQUF2cEMsTUFBQSxjQUFBdXBDLEVBQUF2cEMsS0FBQSxHQUM1QyxFQUFBNG5DLEVBQUFobkMsTUFBSSxFQUFBbzVDLEVBQUE5bUIsb0NBQW1DanVCLEVBQU9zRCxVQURGLHdCQUFBZ2hDLEVBQUFQLFNBQUE2UixFQUFBeHNDLFNBaEgzQyxlQUFBcXNDLEVBQUExNkMsS0FBQSxJQW9ITCxFQUFBNG5DLEVBQUF4OEIsV0FBVWdnQyx3Q0FBVjFDLG1CQUFBOFEsS0FBaUQsU0FBQXNCLEVBQVc3MUMsR0FBWCxPQUFBeWpDLG1CQUFBQyxLQUFBLFNBQUFjLEdBQUEsY0FBQUEsRUFBQVosS0FBQVksRUFBQXpwQyxNQUFBLGNBQUF5cEMsRUFBQXpwQyxLQUFBLEdBQzdDLEVBQUE0bkMsRUFBQWhuQyxNQUFJLEVBQUFzNUMsRUFBQWhRLHNDQUFxQ2psQyxFQUFPc0QsVUFESCxjQUFBa2hDLEVBQUF6cEMsS0FBQSxHQUk3QyxFQUFBNG5DLEVBQUFqL0IsTUFBSzgrQixpQkFBZ0J4aUMsRUFBT3NELFFBQVF5cUIsSUFBSWgxQixJQUpLLHdCQUFBeXJDLEVBQUFULFNBQUE4UixFQUFBenNDLFNBcEg1QyxlQUFBcXNDLEVBQUExNkMsS0FBQSxJQTJITCxFQUFBNG5DLEVBQUF4OEIsV0FBVXMvQixxQ0FBVmhDLG1CQUFBOFEsS0FBOEMsU0FBQXVCLEVBQVc5MUMsR0FBWCxPQUFBeWpDLG1CQUFBQyxLQUFBLFNBQUFxUyxHQUFBLGNBQUFBLEVBQUFuUyxLQUFBbVMsRUFBQWg3QyxNQUFBLGNBQUFnN0MsRUFBQWg3QyxLQUFBLEdBQzFDLEVBQUE0bkMsRUFBQWhuQyxNQUFJLEVBQUF3NUMsRUFBQWxwQixnQ0FBK0Jqc0IsRUFBT3NELFVBREEsY0FBQXl5QyxFQUFBaDdDLEtBQUEsR0FJMUMsRUFBQTRuQyxFQUFBai9CLE1BQUsrK0IsbUJBQWtCemlDLEVBQU9zRCxRQUFRNG9CLE1BQU1uekIsSUFKRix3QkFBQWc5QyxFQUFBaFMsU0FBQStSLEVBQUExc0MsU0EzSHpDLGVBQUFxc0MsRUFBQTE2QyxLQUFBLElBaUlMLEVBQUE0bkMsRUFBQXg4QixXQUFVdS9CLHFDQUFWakMsbUJBQUE4USxLQUE4QyxTQUFBeUIsRUFBV2gyQyxHQUFYLElBQUF5MUIsRUFBQVMsRUFBQXBKLEVBQUFtcEIsRUFBQSxPQUFBeFMsbUJBQUFDLEtBQUEsU0FBQXdTLEdBQUEsY0FBQUEsRUFBQXRTLEtBQUFzUyxFQUFBbjdDLE1BQUEsY0FBQW03QyxFQUFBbjdDLEtBQUEsR0FHNUIsRUFBQTRuQyxFQUFBbDlCLFFBQU8sU0FBQzhILEdBQUQsT0FBV0EsRUFBTWtvQixPQUhJLGNBRzFDQSxFQUgwQ3lnQixFQUFBclMsS0FBQXFTLEVBQUFuN0MsS0FBQSxHQUk1QixFQUFBNG5DLEVBQUFsOUIsUUFBTyxTQUFDOEgsR0FBRCxPQUFXQSxFQUFNMm9CLFFBSkksVUFJMUNBLEVBSjBDZ2dCLEVBQUFyUyxLQU1uQyxLQURQL1csRUFBUXlJLE1BQUlVLGFBQWFSLEVBQU1TLEVBQU9sMkIsRUFBT3NELFFBQVF2SyxLQUxYLENBQUFtOUMsRUFBQW43QyxLQUFBLGdCQU90Q3VJLEdBQ0Z3cEIsTUFBT0EsR0FSaUNvcEIsRUFBQW43QyxLQUFBLElBVXRDLEVBQUE0bkMsRUFBQWhuQyxNQUFJLEVBQUFpbkMsRUFBQXZOLHFCQUFvQi94QixJQVZjLGVBQUE0eUMsRUFBQW43QyxLQUFBLElBYTFDLEVBQUE0bkMsRUFBQWhuQyxNQUFJLEVBQUF3NUMsRUFBQWhwQixnQ0FBK0Juc0IsRUFBT3NELFVBYkEseUJBQUE0eUMsRUFBQW5TLFNBQUFpUyxFQUFBNXNDLFNBakl6QyxlQUFBcXNDLEVBQUExNkMsS0FBQSxJQWdKTCxFQUFBNG5DLEVBQUF4OEIsV0FBVXcvQixxQ0FBVmxDLG1CQUFBOFEsS0FBOEMsU0FBQTRCLEVBQVduMkMsR0FBWCxPQUFBeWpDLG1CQUFBQyxLQUFBLFNBQUEwUyxHQUFBLGNBQUFBLEVBQUF4UyxLQUFBd1MsRUFBQXI3QyxNQUFBLGNBQUFxN0MsRUFBQXI3QyxLQUFBLEdBQzFDLEVBQUE0bkMsRUFBQWhuQyxNQUFJLEVBQUF3NUMsRUFBQS9vQixnQ0FBK0Jwc0IsRUFBT3NELFVBREEsd0JBQUE4eUMsRUFBQXJTLFNBQUFvUyxFQUFBL3NDLFNBaEp6QyxlQUFBcXNDLEVBQUExNkMsS0FBQSxJQW1KTCxFQUFBNG5DLEVBQUF4OEIsV0FBVTAvQiwrQkFBVnBDLG1CQUFBOFEsS0FBd0MsU0FBQThCLEVBQVdyMkMsR0FBWCxPQUFBeWpDLG1CQUFBQyxLQUFBLFNBQUE0UyxHQUFBLGNBQUFBLEVBQUExUyxLQUFBMFMsRUFBQXY3QyxNQUFBLGNBQUF1N0MsRUFBQXY3QyxLQUFBLEdBQ3BDLEVBQUE0bkMsRUFBQWhuQyxNQUFJLEVBQUF3NUMsRUFBQTNvQixnQ0FBK0J4c0IsRUFBT3NELFVBRE4sd0JBQUFnekMsRUFBQXZTLFNBQUFzUyxFQUFBanRDLFNBbkpuQyxlQUFBcXNDLEVBQUExNkMsS0FBQSxJQXVKTCxFQUFBNG5DLEVBQUF4OEIsV0FBVWsvQixvQ0FBVjVCLG1CQUFBOFEsS0FBNkMsU0FBQWdDLEVBQVd2MkMsR0FBWCxPQUFBeWpDLG1CQUFBQyxLQUFBLFNBQUE4UyxHQUFBLGNBQUFBLEVBQUE1UyxLQUFBNFMsRUFBQXo3QyxNQUFBLGNBQUF5N0MsRUFBQXo3QyxLQUFBLEdBQ3pDLEVBQUE0bkMsRUFBQWhuQyxNQUFJLEVBQUEwNUMsRUFBQXpRLDhCQUE2QjVrQyxFQUFPc0QsVUFEQyxjQUFBa3pDLEVBQUF6N0MsS0FBQSxHQUl6QyxFQUFBNG5DLEVBQUFqL0IsTUFBSzQrQixjQUFhdGlDLEVBQU9zRCxRQUFRd3BCLE1BQU85c0IsRUFBT3NELFFBQVE2eUIsVUFKZCx3QkFBQXFnQixFQUFBelMsU0FBQXdTLEVBQUFudEMsU0F2SnhDLGVBQUFxc0MsRUFBQTE2QyxLQUFBLElBNkpMLEVBQUE0bkMsRUFBQXg4QixXQUFVbS9CLG9DQUFWN0IsbUJBQUE4USxLQUE2QyxTQUFBa0MsRUFBV3oyQyxHQUFYLE9BQUF5akMsbUJBQUFDLEtBQUEsU0FBQWdULEdBQUEsY0FBQUEsRUFBQTlTLEtBQUE4UyxFQUFBMzdDLE1BQUEsY0FBQTI3QyxFQUFBMzdDLEtBQUEsR0FFekMsRUFBQTRuQyxFQUFBaG5DLE1BQUksRUFBQWluQyxFQUFBdk4scUJBQW9CcjFCLEVBQU9zRCxVQUZVLGNBQUFvekMsRUFBQTM3QyxLQUFBLEdBSXpDLEVBQUE0bkMsRUFBQWhuQyxNQUFJLEVBQUEwNUMsRUFBQXhRLDhCQUE2QjdrQyxFQUFPc0QsVUFKQyx3QkFBQW96QyxFQUFBM1MsU0FBQTBTLEVBQUFydEMsU0E3SnhDLHlCQUFBcXNDLEVBQUExUixTQUFBQyxFQUFBNTZCLHNGQ2hFUixJQUFNdXRDLFVBSVRDLFdBQVksU0FBQzFnQixFQUFPcEosR0FHaEIsSUFGQSxJQUFJcUosRUFBVyxHQUVONS9CLEVBQUksRUFBR0EsRUFBSTIvQixFQUFNNTlCLE9BQVEvQixJQUM5QixHQUFJMi9CLEVBQU0zL0IsR0FBR3UyQixPQUFTQSxFQUFPLENBQ3pCcUosRUFBV0QsRUFBTTMvQixHQUFHNC9CLFNBQ3BCLE1BSVIsT0FBT0EsR0FNWDBnQixvQkFBcUIsU0FBQzNnQixFQUFPVCxFQUFNTCxHQUkvQixJQUhBLElBQUllLEVBQVcsR0FDWHJKLEVBQVEsR0FFSHYyQixFQUFJLEVBQUdBLEVBQUlrL0IsRUFBS245QixPQUFRL0IsSUFDN0IsR0FBSWsvQixFQUFLbC9CLEdBQUd3QyxJQUFNcThCLEVBQVEsQ0FDdEJ0SSxFQUFRMkksRUFBS2wvQixHQUFHdTJCLE1BQ2hCLE1BUVIsTUFKYSxJQUFUQSxJQUNBcUosRUFBV3dnQixFQUFLQyxXQUFXMWdCLEVBQU9wSixJQUcvQnFKLDZGQ1JVMmdCLEVBL0J6QixJQUFBblUsRUFBQXhzQyxFQUFBLElBRUE0Z0QsRUFBQTVnRCxFQUFBLElBT0E2Z0QsRUFBQTdnRCxFQUFBLElBT0ErK0MsRUFBQS8rQyxFQUFBLElBSUF5c0MsRUFBQXpzQyxFQUFBLEtBUUE4Z0QsRUFBQTlnRCxFQUFBLCtCQUd5QjJnRCxHQUFWLFNBQVVBLElBQVYsSUFBQXJoQixFQUFBbC9CLEVBQUErTSxFQUFBLE9BQUFtZ0MsbUJBQUFDLEtBQUEsU0FBQWMsR0FBQSxjQUFBQSxFQUFBWixLQUFBWSxFQUFBenBDLE1BQUEsY0FBQXlwQyxFQUFBenBDLEtBQUEsR0FFUSxFQUFBNG5DLEVBQUFsOUIsUUFBTyxTQUFDOEgsR0FBRCxPQUFXQSxFQUFNa29CLE9BRmhDLE9BRUxBLEVBRksrTyxFQUFBWCxLQUdGdHRDLEVBQUksRUFIRixZQUdLQSxFQUFJay9CLEVBQUtuOUIsUUFIZCxDQUFBa3NDLEVBQUF6cEMsS0FBQSxZQUlhLFFBQWhCMDZCLEVBQUtsL0IsR0FBRzBLLEtBSkwsQ0FBQXVqQyxFQUFBenBDLEtBQUEsZUFLR3VJLEdBQ0Z2SyxHQUFJMDhCLEVBQUtsL0IsR0FBR3dDLEdBQ1ppZSxHQUFJeWUsRUFBS2wvQixHQUFHeWdCLEdBQ1pDLEdBQUl3ZSxFQUFLbC9CLEdBQUcwZ0IsR0FDWkMsR0FBSXVlLEVBQUtsL0IsR0FBRzJnQixHQUNaQyxHQUFJc2UsRUFBS2wvQixHQUFHNGdCLElBVmJxdEIsRUFBQXpwQyxLQUFBLEdBWUcsRUFBQTRuQyxFQUFBaG5DLE1BQUksRUFBQXE3QyxFQUFBdm9CLG1DQUFrQ25yQixJQVp6QyxPQUdzQi9NLElBSHRCaXVDLEVBQUF6cEMsS0FBQSx1QkFBQXlwQyxFQUFBenBDLEtBQUEsSUFpQkwsRUFBQTRuQyxFQUFBeDhCLFdBQVVzbUIsNkJBQVZnWCxtQkFBQThRLEtBQXNDLFNBQUFDLEVBQVd4MEMsR0FBWCxPQUFBeWpDLG1CQUFBQyxLQUFBLFNBQUFDLEdBQUEsY0FBQUEsRUFBQUMsS0FBQUQsRUFBQTVvQyxNQUFBLGNBQUE0b0MsRUFBQTVvQyxLQUFBLEdBQ2xDLEVBQUE0bkMsRUFBQWhuQyxNQUFJLEVBQUFxN0MsRUFBQTFvQiw4QkFBNkJ0dUIsRUFBT3NELFVBRE4sd0JBQUFxZ0MsRUFBQUksU0FBQXlRLEVBQUFwckMsU0FqQmpDLGVBQUFvN0IsRUFBQXpwQyxLQUFBLElBcUJMLEVBQUE0bkMsRUFBQXg4QixXQUFVdW1CLDBCQUFWK1csbUJBQUE4USxLQUFtQyxTQUFBRSxFQUFXejBDLEdBQVgsSUFBQWsyQixFQUFBVCxFQUFBVSxFQUFBLE9BQUFzTixtQkFBQUMsS0FBQSxTQUFBTyxHQUFBLGNBQUFBLEVBQUFMLEtBQUFLLEVBQUFscEMsTUFBQSxjQUFBa3BDLEVBQUFscEMsS0FBQSxHQUMvQixFQUFBNG5DLEVBQUFobkMsTUFBSSxFQUFBcTdDLEVBQUF6b0IsMkJBQTBCdnVCLEVBQU9zRCxVQUROLGNBQUEyZ0MsRUFBQWxwQyxLQUFBLEdBSWpCLEVBQUE0bkMsRUFBQWw5QixRQUFPLFNBQUM4SCxHQUFELE9BQVdBLEVBQU0yb0IsUUFKUCxjQUkvQkEsRUFKK0IrTixFQUFBSixLQUFBSSxFQUFBbHBDLEtBQUEsR0FLakIsRUFBQTRuQyxFQUFBbDlCLFFBQU8sU0FBQzhILEdBQUQsT0FBV0EsRUFBTWtvQixPQUxQLFVBSy9CQSxFQUwrQndPLEVBQUFKLEtBT3JCLEtBRFYxTixFQUFXd2dCLE9BQUtFLG9CQUFvQjNnQixFQUFPVCxFQUFNejFCLEVBQU9zRCxRQUFRdkssS0FOakMsQ0FBQWtyQyxFQUFBbHBDLEtBQUEsZ0JBQUFrcEMsRUFBQWxwQyxLQUFBLElBUTNCLEVBQUE0bkMsRUFBQWhuQyxNQUFJLEVBQUF1NUMsRUFBQTNvQixpQ0FBZ0N4ekIsR0FBSW85QixLQVJiLHlCQUFBOE4sRUFBQUYsU0FBQTBRLEVBQUFyckMsU0FyQjlCLGVBQUFvN0IsRUFBQXpwQyxLQUFBLElBaUNMLEVBQUE0bkMsRUFBQXg4QixXQUFVd21CLCtCQUFWOFcsbUJBQUE4USxLQUF3QyxTQUFBRyxFQUFXMTBDLEdBQVgsT0FBQXlqQyxtQkFBQUMsS0FBQSxTQUFBVSxHQUFBLGNBQUFBLEVBQUFSLEtBQUFRLEVBQUFycEMsTUFBQSxjQUFBcXBDLEVBQUFycEMsS0FBQSxHQUNwQyxFQUFBNG5DLEVBQUFobkMsTUFBSSxFQUFBcTdDLEVBQUF4b0IsZ0NBQStCeHVCLEVBQU9zRCxVQUROLHdCQUFBOGdDLEVBQUFMLFNBQUEyUSxFQUFBdHJDLFNBakNuQyxlQUFBbzdCLEVBQUF6cEMsS0FBQSxJQXFDTCxFQUFBNG5DLEVBQUF4OEIsV0FBVXltQixrQ0FBVjZXLG1CQUFBOFEsS0FBMkMsU0FBQXFCLEVBQVc1MUMsR0FBWCxPQUFBeWpDLG1CQUFBQyxLQUFBLFNBQUFZLEdBQUEsY0FBQUEsRUFBQVYsS0FBQVUsRUFBQXZwQyxNQUFBLGNBQUF1cEMsRUFBQXZwQyxLQUFBLEdBQ3ZDLEVBQUE0bkMsRUFBQWhuQyxNQUFJLEVBQUFxN0MsRUFBQXZvQixtQ0FBa0N6dUIsRUFBT3NELFVBRE4sY0FBQWdoQyxFQUFBdnBDLEtBQUEsR0FJdkMsRUFBQTRuQyxFQUFBai9CLE1BQUs4K0IsaUJBQWdCeGlDLEVBQU9zRCxRQUFRdkssSUFKRyx3QkFBQXVyQyxFQUFBUCxTQUFBNlIsRUFBQXhzQyxTQXJDdEMseUJBQUFvN0IsRUFBQVQsU0FBQUMsRUFBQTU2QixnR0N6QlU4dEMsRUFOekIsSUFBQXZVLEVBQUF4c0MsRUFBQSxRQUVBQSxFQUFBLFVBQ0FBLEVBQUEsVUFDQUEsRUFBQSx1RkFFeUIrZ0QsR0FBVixTQUFVQSxJQUFWLE9BQUF6VCxtQkFBQUMsS0FBQSxTQUFBQyxHQUFBLGNBQUFBLEVBQUFDLEtBQUFELEVBQUE1b0MsTUFBQSxjQUFBNG9DLEVBQUE1b0MsS0FBQSxHQUNMLEVBQUE0bkMsRUFBQWovQixNQUFLb3pDLFdBREEsY0FBQW5ULEVBQUE1b0MsS0FBQSxHQUVMLEVBQUE0bkMsRUFBQWovQixNQUFLaXhDLFdBRkEsY0FBQWhSLEVBQUE1b0MsS0FBQSxHQUdMLEVBQUE0bkMsRUFBQWovQixNQUFLMGhDLFdBSEEsd0JBQUF6QixFQUFBSSxTQUFBQyxFQUFBNTZCLHFHQ05malQsRUFBQSxRQUVBaS9DLEVBQUFqL0MsRUFBQSxLQUtBKytDLEVBQUEvK0MsRUFBQSxJQUdBQSxFQUFBLElBc0JhKy9CLFFBQVEsV0FBd0IsSUFBdkIzb0IsRUFBdUJsVixVQUFBQyxPQUFBLFFBQUE4QixJQUFBL0IsVUFBQSxHQUFBQSxVQUFBLE1BQVgySCxFQUFXM0gsVUFBQSxHQUNyQzgrQyxTQUNBQyxTQUVKLE9BQVFwM0MsRUFBT2lCLE1BQ2YsS0FBS3lqQywrQkFVRCxPQVRBeVMsRUFBUTVwQyxFQUFNakMsUUFFZDhyQyxHQUNJdHFCLE1BQU85c0IsRUFBT3NELFFBQVF3cEIsTUFDdEJxSixTQUFVbjJCLEVBQU9zRCxRQUFRNnlCLFVBRzdCZ2hCLEVBQU1sNkMsS0FBS202QyxHQUVKRCxFQUVYLEtBQUt4UywrQkFDRHdTLEVBQVE1cEMsRUFBTWpDLFFBRWQsSUFBSyxJQUFJL1UsRUFBSSxFQUFHQSxFQUFJNGdELEVBQU03K0MsT0FBUS9CLElBQzlCLEdBQUk0Z0QsRUFBTTVnRCxHQUFHdTJCLE9BQVM5c0IsRUFBT3NELFFBQVF3cEIsTUFBTyxDQUN4Q3FxQixFQUFNNTZDLE9BQU9oRyxFQUFHLEdBQ2hCLE1BSVIsT0FBTzRnRCxFQUVYLEtBQUt0ckIsaUNBQ0RzckIsRUFBUTVwQyxFQUFNakMsUUFFZCxJQUFLLElBQUkvVSxFQUFJLEVBQUdBLEVBQUk0Z0QsRUFBTTcrQyxPQUFRL0IsSUFDOUIsR0FBSTRnRCxFQUFNNWdELEdBQUc0L0IsVUFBWW4yQixFQUFPc0QsUUFBUXZLLEdBQUksQ0FDeENvK0MsRUFBTTU2QyxPQUFPaEcsRUFBRyxHQUNoQixNQUlSLE9BQU80Z0QsRUFFWCxRQUNJLE9BQU81cEMsa0dDMUVmcFgsRUFBQSxRQUVBMHNDLEVBQUExc0MsRUFBQSxJQUVBKytDLEVBQUEvK0MsRUFBQSxJQXFCYSsxQixRQUFRLFdBV1AsSUFYUTNlLEVBV1JsVixVQUFBQyxPQUFBLFFBQUE4QixJQUFBL0IsVUFBQSxHQUFBQSxVQUFBLEtBVE5VLEdBQUksTUFDSmtJLEtBQU0sT0FDTm9yQixLQUFNLGl5Q0FDTm1HLGNBQ0FsRyxNQUFPLEdBRVA3bUIsT0FBUSxLQUdiekYsRUFBVzNILFVBQUEsR0FDTjgrQyxTQUNBanJCLFNBRUosT0FBUWxzQixFQUFPaUIsTUFDZixLQUFLOHFCLGlDQUNEb3JCLEVBQVE1cEMsRUFBTWpDLFFBRWQsSUFBSyxJQUFJL1UsRUFBSSxFQUFHQSxFQUFJNGdELEVBQU03K0MsT0FBUS9CLElBQzlCNGdELEVBQU01Z0QsR0FBR2tQLE9BQVMsR0FHdEIsSUFBSyxJQUFJbFAsRUFBSSxFQUFHQSxFQUFJNGdELEVBQU03K0MsT0FBUS9CLElBQzlCLEdBQUk0Z0QsRUFBTTVnRCxHQUFHd0MsSUFBTWlILEVBQU9zRCxRQUFRdkssR0FBSSxDQUNsQ28rQyxFQUFNNWdELEdBQUdrUCxPQUFTLEtBQ2xCLE1BSVIsT0FBTzB4QyxFQUVYLEtBQUtuckIsaUNBQ0RtckIsRUFBUTVwQyxFQUFNakMsUUFLZCxJQUhBLElBQUlqUCxTQUNBb0osU0FFS2xQLEVBQUksRUFBR0EsRUFBSTRnRCxFQUFNNytDLE9BQVEvQixJQUM5QixHQUFJNGdELEVBQU01Z0QsR0FBR3dDLElBQU1pSCxFQUFPc0QsUUFBUXZLLEdBQUksQ0FDbENzRCxFQUFROUYsRUFDUmtQLEVBQVMweEMsRUFBTTVnRCxHQUFHa1AsT0FDbEIsTUFJUixJQUFLLElBQUlsUCxFQUFJLEVBQUdBLEVBQUk0Z0QsRUFBTTcrQyxPQUFRL0IsSUFDOUI0Z0QsRUFBTTVnRCxHQUFHa1AsT0FBUyxHQU90QixPQUpBQSxFQUFvQixNQUFWQSxFQUFrQixHQUFLLEtBRWpDMHhDLEVBQU05NkMsR0FBT29KLE9BQVNBLEVBRWYweEMsRUFFWCxLQUFLdnJCLGlDQUNEdXJCLEVBQVE1cEMsRUFBTWpDLFFBRWQsSUFBSyxJQUFJL1UsRUFBSSxFQUFHQSxFQUFJNGdELEVBQU03K0MsT0FBUS9CLElBRzlCLEdBQUk0Z0QsRUFBTTVnRCxHQUFHd0MsSUFBTWlILEVBQU9zRCxRQUFRNG9CLE1BQU1uekIsR0FBSSxDQUN4Q28rQyxFQUFNNWdELEdBQUcwSyxLQUFPakIsRUFBT3NELFFBQVE0b0IsTUFBTWpyQixLQUNyQ2syQyxFQUFNNWdELEdBQUc4MUIsS0FBT3JzQixFQUFPc0QsUUFBUTRvQixNQUFNRyxLQUdyQzhxQixFQUFNNWdELEdBQUdpOEIsV0FBYVgsT0FBS0MsaUJBQWlCOXhCLEVBQU9zRCxRQUFRNG9CLE1BQU1HLE1BRWpFOHFCLEVBQU01Z0QsR0FBRysxQixNQUFRdHNCLEVBQU9zRCxRQUFRNG9CLE1BQU1JLE1BSXRDLE1BSVIsT0FBTzZxQixFQUVYLEtBQUt0ckIsaUNBQ0RzckIsRUFBUTVwQyxFQUFNakMsUUFFZCxJQUFLLElBQUkvVSxFQUFJLEVBQUdBLEVBQUk0Z0QsRUFBTTcrQyxPQUFRL0IsSUFDOUI0Z0QsRUFBTTVnRCxHQUFHa1AsT0FBUyxHQUd0QixJQUFLLElBQUlsUCxFQUFJLEVBQUdBLEVBQUk0Z0QsRUFBTTcrQyxPQUFRL0IsSUFDOUIsR0FBSTRnRCxFQUFNNWdELEdBQUd3QyxJQUFNaUgsRUFBT3NELFFBQVF2SyxHQUFJLENBQ2xDbytDLEVBQU01NkMsT0FBT2hHLEVBQUcsR0FDaEIsTUFJUixPQUFPNGdELEVBRVgsS0FBS3JyQixpQ0FDRHFyQixFQUFRNXBDLEVBQU1qQyxRQUVkLElBQUssSUFBSS9VLEVBQUksRUFBR0EsRUFBSTRnRCxFQUFNNytDLE9BQVEvQixJQUM5QjRnRCxFQUFNNWdELEdBQUdrUCxPQUFTLEdBa0J0QixPQWZBeW1CLEdBQ0luekIsR0FBSWlILEVBQU9zRCxRQUFRdkssR0FDbkJrSSxLQUFNakIsRUFBT3NELFFBQVFyQyxLQUNyQm9yQixLQUFNcnNCLEVBQU9zRCxRQUFRK29CLEtBR3JCbUcsV0FBWVgsT0FBS0MsaUJBQWlCOXhCLEVBQU9zRCxRQUFRK29CLE1BRWpEQyxNQUFPdHNCLEVBQU9zRCxRQUFRZ3BCLE1BRXRCN21CLE9BQVEsTUFHWjB4QyxFQUFNbDZDLEtBQUtpdkIsR0FFSmlyQixFQUVYLFFBQ0ksT0FBTzVwQyxxR0NqSmZwWCxFQUFBLFFBRUF5K0MsRUFBQXorQyxFQUFBLEtBSUE0Z0QsRUFBQTVnRCxFQUFBLElBbUJhcS9DLFdBQVcsV0E4Q1YsSUE5Q1dqb0MsRUE4Q1hsVixVQUFBQyxPQUFBLFFBQUE4QixJQUFBL0IsVUFBQSxHQUFBQSxVQUFBLEtBNUNOVSxHQUFJLGFBQ0prSSxLQUFNLFFBQ05rTyxFQUFHLEVBQ0hDLEVBQUcsRUFDSCtHLEVBQUcsSUFDSEksRUFBRyxHQUNIMGhCLEtBQU0sU0FHTmwvQixHQUFJLGFBQ0prSSxLQUFNLFVBQ05rTyxFQUFHLEVBQ0hDLEVBQUcsRUFDSCtHLEVBQUcsSUFDSEksRUFBRyxJQUNIMGhCLEtBQU0sU0FHTmwvQixHQUFJLGFBQ0prSSxLQUFNLFdBQ05rTyxFQUFHLEVBQ0hDLEVBQUcsRUFDSCtHLEVBQUcsSUFDSEksRUFBRyxJQUNIMGhCLEtBQU0sU0FHTmwvQixHQUFJLGFBQ0prSSxLQUFNLFFBQ05rTyxFQUFHLEVBQ0hDLEVBQUcsRUFDSCtHLEVBQUcsSUFDSEksRUFBRyxJQUNIMGhCLEtBQU0sU0FHTmwvQixHQUFJLGFBQ0prSSxLQUFNLE9BQ05rTyxFQUFHLEVBQ0hDLEVBQUcsRUFDSCtHLEVBQUcsSUFDSEksRUFBRyxJQUNIMGhCLEtBQU0sU0FFWGo0QixFQUFXM0gsVUFBQSxHQUNObTlDLFNBRUosT0FBUXgxQyxFQUFPaUIsTUFDZixLQUFLNmpDLHVCQUNEMFEsRUFBV2pvQyxFQUFNakMsUUFFakIsSUFBSyxJQUFJL1UsRUFBSSxFQUFHQSxFQUFJaS9DLEVBQVNsOUMsT0FBUS9CLElBQ2pDLEdBQUlpL0MsRUFBU2ovQyxHQUFHd0MsSUFBTWlILEVBQU9zRCxRQUFRdkssR0FBSSxDQUNyQ3k4QyxFQUFTai9DLEdBQUc0WSxFQUFJblAsRUFBT3NELFFBQVE2TCxFQUMvQnFtQyxFQUFTai9DLEdBQUc2WSxFQUFJcFAsRUFBT3NELFFBQVE4TCxFQUMvQixNQUlSLE9BQU9vbUMsRUFFWCxLQUFLcm5CLDRCQUNEcW5CLEVBQVdqb0MsRUFBTWpDLFFBRWpCcE0sUUFBUXBGLElBQUlrRyxHQUNaLElBQUssSUFBSXpKLEVBQUksRUFBR0EsRUFBSWkvQyxFQUFTbDlDLFNBQ0QsWUFBcEJrOUMsRUFBU2ovQyxHQUFHMEssTUFBNkMsUUFBdkJqQixFQUFPc0QsUUFBUXJDLE1BRHBCMUssS0FPckMsT0FBT2kvQyxFQUVYLEtBQUt0bkIsK0JBQ0RzbkIsRUFBV2pvQyxFQUFNakMsUUFFakIsSUFBSyxJQUFJL1UsRUFBSSxFQUFHQSxFQUFJaS9DLEVBQVNsOUMsUUFDRCxZQUFwQms5QyxFQUFTai9DLEdBQUcwSyxLQURpQjFLLEtBT3JDLE9BQU9pL0MsRUFFWCxRQUNJLE9BQU9qb0MscUdDbEhmLElBQUF3cEMsRUFBQTVnRCxFQUFBLElBS0EyK0MsRUFBQTMrQyxFQUFBLElBY2FraEQsV0FBVyxXQUFnRCxJQUEvQzlwQyxFQUErQ2xWLFVBQUFDLE9BQUEsUUFBQThCLElBQUEvQixVQUFBLEdBQUFBLFVBQUEsSUFBdENVLEdBQUksR0FBSSt6QixNQUFPLEdBQUlDLEdBQUksR0FBSS9zQixFQUFXM0gsVUFBQSxHQUNwRSxPQUFRMkgsRUFBT2lCLE1BQ2YsS0FBS2l0QiwrQkFDRCxPQUNJbjFCLEdBQUksR0FDSmtJLEtBQU0sR0FDTjZyQixNQUFPLEdBQ1BDLEdBQUksR0FHWixLQUFLb0IsNEJBQ0QsT0FDSXAxQixHQUFPaUgsRUFBT3NELFFBQVF2SyxHQUN0QmtJLEtBQU9qQixFQUFPc0QsUUFBUXJDLEtBQ3RCNnJCLE1BQU85c0IsRUFBT3NELFFBQVF3cEIsTUFDdEJDLEdBQU8vc0IsRUFBT3NELFFBQVF5cEIsSUFHOUIsS0FBS1kscUNBQ0QsT0FDSTUwQixHQUFPaUgsRUFBT3NELFFBQVF5cUIsSUFBSWgxQixHQUMxQmtJLEtBQU9qQixFQUFPc0QsUUFBUXlxQixJQUFJOXNCLEtBQzFCNnJCLE1BQU85c0IsRUFBT3NELFFBQVF5cUIsSUFBSWpCLE1BQzFCQyxHQUFPL3NCLEVBQU9zRCxRQUFReXFCLElBQUloQixJQUdsQyxLQUFLYSxxQ0FDRCxPQUNJNzBCLEdBQUksR0FDSmtJLEtBQU0sR0FDTjZyQixNQUFPLEdBQ1BDLEdBQUksR0FHWixLQUFLYyxxQ0FDRCxPQUNJOTBCLEdBQU9pSCxFQUFPc0QsUUFBUXlxQixJQUFJaDFCLEdBQzFCa0ksS0FBT2pCLEVBQU9zRCxRQUFReXFCLElBQUk5c0IsS0FDMUI2ckIsTUFBTzlzQixFQUFPc0QsUUFBUXlxQixJQUFJakIsTUFDMUJDLEdBQU8vc0IsRUFBT3NELFFBQVF5cUIsSUFBSWhCLElBR2xDLFFBQ0ksT0FBT3hmLG1GQzFEUixJQUFNK3BDLGNBcUJUQyxlQUFnQixTQUNaOWtCLEVBQ0F3QixFQUNBQyxFQUNBQyxFQUNBQyxFQUNBQyxFQUNBakMsRUFDQUMsRUFDQWlDLEdBZUEsSUFiQSxJQUFJa2pCLEtBR0U3aUIsRUFBYzJpQixFQUFTRyxtQkFDekJ4akIsRUFBWUcsRUFBWUMsRUFBWUMsRUFBUWpDLEdBSTFDdUMsRUFBWTBpQixFQUFTSSxpQkFDdkJqbEIsRUFBWXlCLEVBQVlDLEVBQVkvQixHQUkvQjNFLEVBQUksRUFBR0EsRUFBSWtILEVBQVlyOEIsT0FBUW0xQixJQUNwQyxJQUFLLElBQUlvSCxFQUFJLEVBQUdBLEVBQUlELEVBQVV0OEIsT0FBUXU4QixJQUNsQzJpQixFQUFRdjZDLE1BQU0yM0IsRUFBVUMsR0FBSUYsRUFBWWxILEtBSWhELE9BQU8rcEIsR0FlWEUsaUJBQWtCLFNBQUMxaUMsRUFBSzBkLEVBQVdDLEVBQVdHLEdBQzFDLElBQU1LLEVBQVduZSxHQUFPMGQsRUFBWUMsR0FDOUJnbEIsRUFBU3p3QyxLQUFLaVUsTUFBTWdZLEVBQVdMLEdBRS9CUSxFQURRSCxFQUFXTCxHQUNENmtCLEVBQVMsR0FFN0JILEtBQ0Eza0IsRUFBVSxFQUNkQSxHQUFXSCxFQUNYLElBQUssSUFBSW44QixFQUFJLEVBQUdBLEVBQUlvaEQsRUFBUXBoRCxJQUN4QmloRCxFQUFRdjZDLEtBQUs0MUIsRUFBV0MsRUFBTyxHQUUvQkQsR0FBV0MsRUFDWEQsR0FBV1MsRUFHZixPQUFPa2tCLEdBZ0JYQyxtQkFBb0IsU0FBQ3ppQyxFQUFLMGQsRUFBV0MsRUFBVzJCLEVBQVF4QixHQUNwRCxJQUFJMGtCLEtBQ0Eza0IsRUFBVSxFQUVkLElBREFBLEdBQVdILElBRUZHLEVBQVVDLEVBQVM5ZCxFQUFNMmQsSUFJOUI2a0IsRUFBUXY2QyxLQUFLNDFCLEVBQVdDLEVBQU8sR0FFL0JELEdBQVlDLEVBQU93QixFQUd2QixPQUFPa2pCLGlHQ3BIZnJoRCxFQUFBLFFBRUF5aEQsRUFBQXpoRCxFQUFBLEtBRUE0Z0QsRUFBQTVnRCxFQUFBLElBS0EyK0MsRUFBQTMrQyxFQUFBLElBTUE2K0MsRUFBQTcrQyxFQUFBLEtBUUF5c0MsR0FKQXpzQyxFQUFBLElBSUFBLEVBQUEsS0EwQ2FzL0IsT0FBTyxXQXVFTixJQXZFT2xvQixFQXVFUGxWLFVBQUFDLE9BQUEsUUFBQThCLElBQUEvQixVQUFBLEdBQUFBLFVBQUEsS0FyRU5VLEdBQUksT0FDSmtJLEtBQU0sT0FDTjZyQixNQUFPLFFBQ1BDLEdBQUksRUFDSi9WLEdBQUksSUFDSkMsR0FBSSxJQUNKQyxHQUFJLElBQ0pDLEdBQUksSUFFSmtWLE1BQ0l5WCxTQUFVLE9BQ1Y1UCxXQUFZLEdBQ1pDLFdBQVksR0FDWkMsV0FBWSxHQUNaQyxXQUFZLEdBQ1pqQyxPQUFRLEdBQ1JDLE9BQVEsR0FDUmlDLE9BQVEsR0FFWnVqQixZQUNBQyxnQkFHQS8rQyxHQUFJLE9BQ0prSSxLQUFNLE9BQ042ckIsTUFBTyxRQUNQQyxHQUFJLEVBQ0ovVixHQUFJLElBQ0pDLEdBQUksSUFDSkMsR0FBSSxJQUNKQyxHQUFJLElBRUprVixNQUNJeVgsU0FBVSxPQUNWNVAsV0FBWSxHQUNaQyxXQUFZLEdBQ1pDLFdBQVksR0FDWkMsV0FBWSxHQUNaakMsT0FBUSxHQUNSQyxPQUFRLEdBQ1JpQyxPQUFRLEdBRVp1akIsWUFDQUMsZ0JBR0EvK0MsR0FBSSxPQUNKa0ksS0FBTSxPQUNONnJCLE1BQU8sUUFDUEMsR0FBSSxFQUNKL1YsR0FBSSxJQUNKQyxHQUFJLElBQ0pDLEdBQUksSUFDSkMsR0FBSSxJQUVKa1YsTUFDSXlYLFNBQVUsT0FDVjVQLFdBQVksR0FDWkMsV0FBWSxHQUNaQyxXQUFZLEdBQ1pDLFdBQVksR0FDWmpDLE9BQVEsR0FDUkMsT0FBUSxHQUNSaUMsT0FBUSxHQUVadWpCLFlBQ0FDLGdCQUdMOTNDLEVBQVczSCxVQUFBLEdBQ05vOUIsU0FDQWhELFNBQVl3QixTQUVoQixPQUFRajBCLEVBQU9pQixNQUNmLEtBQUttdEIsaUNBQ0RxSCxFQUFPbG9CLEVBQU1qQyxRQUViLElBQUssSUFBSS9VLEVBQUksRUFBR0EsRUFBSWsvQixFQUFLbjlCLE9BQVEvQixJQUM3QixHQUFJay9CLEVBQUtsL0IsR0FBR3dDLElBQU1pSCxFQUFPc0QsUUFBUXZLLEdBQUksQ0FDakMwOEIsRUFBS2wvQixHQUFHeWdCLEdBQUtoWCxFQUFPc0QsUUFBUTBULEdBQzVCeWUsRUFBS2wvQixHQUFHMGdCLEdBQUtqWCxFQUFPc0QsUUFBUTJULEdBQzVCd2UsRUFBS2wvQixHQUFHMmdCLEdBQUtsWCxFQUFPc0QsUUFBUTRULEdBQzVCdWUsRUFBS2wvQixHQUFHNGdCLEdBQUtuWCxFQUFPc0QsUUFBUTZULEdBRTVCLE1BSVIsT0FBT3NlLEVBRVgsS0FBS3BILG9DQUNEb0gsRUFBT2xvQixFQUFNakMsUUFFYixJQUFLLElBQUkvVSxFQUFJLEVBQUdBLEVBQUlrL0IsRUFBS245QixPQUFRL0IsSUFDN0IsR0FBSWsvQixFQUFLbC9CLEdBQUd3QyxJQUFNaUgsRUFBT3NELFFBQVF2SyxHQUFJLENBQ2pDMDhCLEVBQUtsL0IsR0FBR3lnQixHQUFLaFgsRUFBT3NELFFBQVEwVCxHQUM1QnllLEVBQUtsL0IsR0FBRzBnQixHQUFLalgsRUFBT3NELFFBQVEyVCxHQUM1QndlLEVBQUtsL0IsR0FBRzJnQixHQUFLbFgsRUFBT3NELFFBQVE0VCxHQUM1QnVlLEVBQUtsL0IsR0FBRzRnQixHQUFLblgsRUFBT3NELFFBQVE2VCxHQUdDLFFBQXpCc2UsRUFBS2wvQixHQUFHODFCLEtBQUt5WCxVQUNiclIsRUFBYWdELEVBQUtsL0IsR0FBRzRnQixHQUFLc2UsRUFBS2wvQixHQUFHMGdCLEdBQ2xDZ2QsRUFBYXdCLEVBQUtsL0IsR0FBRzJnQixHQUFLdWUsRUFBS2wvQixHQUFHeWdCLEtBRWxDeWIsRUFBYWdELEVBQUtsL0IsR0FBRzJnQixHQUFLdWUsRUFBS2wvQixHQUFHeWdCLEdBQ2xDaWQsRUFBYXdCLEVBQUtsL0IsR0FBRzRnQixHQUFLc2UsRUFBS2wvQixHQUFHMGdCLElBRXRDLElBQU00Z0MsRUFBV1AsV0FBU0MsZUFDdEI5a0IsRUFDQXdCLEVBQ0F3QixFQUFLbC9CLEdBQUc4MUIsS0FBSzZILFdBQ2J1QixFQUFLbC9CLEdBQUc4MUIsS0FBSzhILFdBQ2JzQixFQUFLbC9CLEdBQUc4MUIsS0FBSytILFdBQ2JxQixFQUFLbC9CLEdBQUc4MUIsS0FBS2dJLFdBQ2JvQixFQUFLbC9CLEdBQUc4MUIsS0FBSytGLE9BQ2JxRCxFQUFLbC9CLEdBQUc4MUIsS0FBS2dHLE9BQ2JvRCxFQUFLbC9CLEdBQUc4MUIsS0FBS2lJLFFBRWpCbUIsRUFBS2wvQixHQUFHc2hELFNBQVdBLEVBRW5CLE1BSVIsT0FBT3BpQixFQUVYLEtBQUs5SCxxQ0FDRDhILEVBQU9sb0IsRUFBTWpDLFFBRWIsSUFBSyxJQUFJL1UsRUFBSSxFQUFHQSxFQUFJay9CLEVBQUtuOUIsT0FBUS9CLElBQzdCLEdBQUlrL0IsRUFBS2wvQixHQUFHd0MsSUFBTWlILEVBQU9zRCxRQUFReXFCLElBQUloMUIsR0FBSSxDQUNyQzA4QixFQUFLbC9CLEdBQUd1MkIsTUFBUTlzQixFQUFPc0QsUUFBUXlxQixJQUFJakIsTUFDbkMySSxFQUFLbC9CLEdBQUd3MkIsR0FBSy9zQixFQUFPc0QsUUFBUXlxQixJQUFJaEIsR0FFaEMsTUFJUixPQUFPMEksRUFFWCxLQUFLdVAsdUNBQ0R2UCxFQUFPbG9CLEVBQU1qQyxRQUViLElBQUssSUFBSS9VLEVBQUksRUFBR0EsRUFBSWsvQixFQUFLbjlCLE9BQVEvQixJQUM3QixHQUFJay9CLEVBQUtsL0IsR0FBR3dDLElBQU1pSCxFQUFPc0QsUUFBUXlxQixJQUFJaDFCLEdBQUksQ0FDckMwOEIsRUFBS2wvQixHQUFHODFCLEtBQUs2SCxXQUFhbDBCLEVBQU9zRCxRQUFReXFCLElBQUkxQixLQUFLNkgsV0FDbER1QixFQUFLbC9CLEdBQUc4MUIsS0FBSzhILFdBQWFuMEIsRUFBT3NELFFBQVF5cUIsSUFBSTFCLEtBQUs4SCxXQUNsRHNCLEVBQUtsL0IsR0FBRzgxQixLQUFLK0gsV0FBYXAwQixFQUFPc0QsUUFBUXlxQixJQUFJMUIsS0FBSytILFdBQ2xEcUIsRUFBS2wvQixHQUFHODFCLEtBQUtnSSxXQUFhcjBCLEVBQU9zRCxRQUFReXFCLElBQUkxQixLQUFLZ0ksV0FDbERvQixFQUFLbC9CLEdBQUc4MUIsS0FBS3lYLFNBQVc5akMsRUFBT3NELFFBQVF5cUIsSUFBSTFCLEtBQUt5WCxTQUNoRHJPLEVBQUtsL0IsR0FBRzgxQixLQUFLaUksT0FBU3QwQixFQUFPc0QsUUFBUXlxQixJQUFJMUIsS0FBS2lJLE9BR2pCLFFBQXpCbUIsRUFBS2wvQixHQUFHODFCLEtBQUt5WCxVQUNiclIsRUFBYWdELEVBQUtsL0IsR0FBRzRnQixHQUFLc2UsRUFBS2wvQixHQUFHMGdCLEdBQ2xDZ2QsRUFBYXdCLEVBQUtsL0IsR0FBRzJnQixHQUFLdWUsRUFBS2wvQixHQUFHeWdCLEtBRWxDeWIsRUFBYWdELEVBQUtsL0IsR0FBRzJnQixHQUFLdWUsRUFBS2wvQixHQUFHeWdCLEdBQ2xDaWQsRUFBYXdCLEVBQUtsL0IsR0FBRzRnQixHQUFLc2UsRUFBS2wvQixHQUFHMGdCLElBRXRDLElBQU00Z0MsRUFBV1AsV0FBU0MsZUFDdEI5a0IsRUFDQXdCLEVBQ0F3QixFQUFLbC9CLEdBQUc4MUIsS0FBSzZILFdBQ2J1QixFQUFLbC9CLEdBQUc4MUIsS0FBSzhILFdBQ2JzQixFQUFLbC9CLEdBQUc4MUIsS0FBSytILFdBQ2JxQixFQUFLbC9CLEdBQUc4MUIsS0FBS2dJLFdBQ2JvQixFQUFLbC9CLEdBQUc4MUIsS0FBSytGLE9BQ2JxRCxFQUFLbC9CLEdBQUc4MUIsS0FBS2dHLE9BQ2JvRCxFQUFLbC9CLEdBQUc4MUIsS0FBS2lJLFFBRWpCbUIsRUFBS2wvQixHQUFHc2hELFNBQVdBLEVBRW5CLE1BSVIsT0FBT3BpQixFQUVYLEtBQUs3SCxxQ0FDRDZILEVBQU9sb0IsRUFBTWpDLFFBRWIsSUFBSyxJQUFJL1UsRUFBSSxFQUFHQSxFQUFJay9CLEVBQUtuOUIsT0FBUS9CLElBQzdCLEdBQUlrL0IsRUFBS2wvQixHQUFHd0MsSUFBTWlILEVBQU9zRCxRQUFRdkssR0FBSSxDQUNqQzA4QixFQUFLbDVCLE9BQU9oRyxFQUFHLEdBQ2YsTUFJUixPQUFPay9CLEVBRVgsS0FBSzVILHFDQUNENEgsRUFBT2xvQixFQUFNakMsUUFFYixJQUFJeWlCLFNBdUJxQixTQXRCekJBLEdBQ0loMUIsR0FBSWlILEVBQU9zRCxRQUFReXFCLElBQUloMUIsR0FDdkJrSSxLQUFNakIsRUFBT3NELFFBQVF5cUIsSUFBSTlzQixLQUN6QitWLEdBQUksSUFDSkMsR0FBSSxJQUNKQyxHQUFJLElBQ0pDLEdBQUksSUFDSjJWLE1BQU85c0IsRUFBT3NELFFBQVF5cUIsSUFBSWpCLE1BQzFCQyxHQUFJL3NCLEVBQU9zRCxRQUFReXFCLElBQUloQixHQUN2QlYsTUFDSXlYLFNBQVUsT0FDVjVQLFdBQVksR0FDWkMsV0FBWSxHQUNaQyxXQUFZLEdBQ1pDLFdBQVksR0FDWmpDLE9BQVEsR0FDUkMsT0FBUSxHQUNSaUMsT0FBUSxLQUtSakksS0FBS3lYLFVBQ1RyUixFQUFhMUUsRUFBSTVXLEdBQUs0VyxFQUFJOVcsR0FDMUJnZCxFQUFhbEcsRUFBSTdXLEdBQUs2VyxFQUFJL1csS0FFMUJ5YixFQUFhMUUsRUFBSTdXLEdBQUs2VyxFQUFJL1csR0FDMUJpZCxFQUFhbEcsRUFBSTVXLEdBQUs0VyxFQUFJOVcsSUFFOUIsSUFBTTRnQyxFQUFXUCxXQUFTQyxlQUN0QjlrQixFQUNBd0IsRUFDQWxHLEVBQUkxQixLQUFLNkgsV0FDVG5HLEVBQUkxQixLQUFLOEgsV0FDVHBHLEVBQUkxQixLQUFLK0gsV0FDVHJHLEVBQUkxQixLQUFLZ0ksV0FDVHRHLEVBQUkxQixLQUFLK0YsT0FDVHJFLEVBQUkxQixLQUFLZ0csT0FDVHRFLEVBQUkxQixLQUFLaUksUUFRYixPQU5BdkcsRUFBSThwQixTQUFXQSxFQUNmOXBCLEVBQUkrcEIsY0FHSnJpQixFQUFLeDRCLEtBQUs4d0IsR0FFSDBILEVBRVgsS0FBS1IsNEJBQ0RRLEVBQU9sb0IsRUFBTWpDLFFBRWIsSUFBSyxJQUFJL1UsRUFBSSxFQUFHQSxFQUFJay9CLEVBQUtuOUIsT0FBUS9CLElBQzdCLEdBQUlrL0IsRUFBS2wvQixHQUFHd0MsSUFBTWlILEVBQU9zRCxRQUFROHhCLE9BQVEsQ0FDckNLLEVBQUtsL0IsR0FBR3VoRCxXQUFhOTNDLEVBQU9zRCxRQUFRd3hCLGNBQ3BDLE1BSVIsT0FBT1csRUFFWCxLQUFLUCxzQkFDRE8sRUFBT2xvQixFQUFNakMsUUFFYixJQUFLLElBQUkvVSxFQUFJLEVBQUdBLEVBQUlrL0IsRUFBS245QixPQUFRL0IsSUFDekJrL0IsRUFBS2wvQixHQUFHdTJCLE9BQVM5c0IsRUFBT3NELFFBQVF3cEIsUUFDaEMySSxFQUFLbC9CLEdBQUd1aEQsZUFJaEIsT0FBT3JpQixFQUVYLFFBQ0ksT0FBT2xvQixrR0MvVWYsSUFBQTZtQyxFQUFBaitDLEVBQUEsS0FRYWl2QyxRQUFRLFdBQXlCLElBQXhCNzNCLEVBQXdCbFYsVUFBQUMsT0FBQSxRQUFBOEIsSUFBQS9CLFVBQUEsR0FBQUEsVUFBQSxHQUFoQixJQUFLMkgsRUFBVzNILFVBQUEsR0FDMUMsT0FBUTJILEVBQU9pQixNQUNmLEtBQUtpa0Msb0JBQ0QsT0FBT2xsQyxFQUFPc0QsUUFBUThoQyxNQUUxQixRQUNJLE9BQU83M0IsbUZDZGYsSUFBQXdxQyxFQUFBNWhELEVBQUEsS0FFQTZoRCxFQUFBN2hELEVBQUEsS0FDQThoRCxFQUFBOWhELEVBQUEsS0FDQStoRCxFQUFBL2hELEVBQUEsS0FDQWdpRCxFQUFBaGlELEVBQUEsS0FDQTRzQyxFQUFBNXNDLEVBQUEsS0FDQWlpRCxFQUFBamlELEVBQUEsS0FFTWtpRCxHQUFjLEVBQUFOLEVBQUF0WCxrQkFDaEIyRSxjQUNBM1AsWUFDQTRoQixvQkFDQTdCLG9CQUNBdHBCLGNBQ0FnSywwQkFHV21pQixpRkNkRnhpQixZQVlUQyxlQUFnQixTQUFDRixFQUFLeDRCLEdBR2xCLElBRkEsSUFBSWs3QyxHQUFNLEVBRUQvaEQsRUFBSSxFQUFHQSxFQUFJcS9CLEVBQUl0OUIsT0FBUS9CLElBQzVCLEdBQUlxL0IsRUFBSXIvQixJQUFNNkcsRUFBSyxDQUNmazdDLEdBQU0sRUFDTixNQVFSLE9BSlcsR0FBUEEsR0FDQTFpQixFQUFJMzRCLEtBQUtHLEdBR053NEIsa2ZDOUJmMmlCLEVBQUFwaUQsRUFBQSx1Q0FHQTJzQyxHQURBM3NDLEVBQUEsSUFDQUEsRUFBQSxLQUVBLElBQU1xaUQsR0FDRkMsV0FDSUMsVUFBVyxPQUNYQyxXQUFZLE9BRWhCQyxNQUNJMytCLE9BQVEsT0FDUjQrQixTQUFVLE9BQ1ZDLFdBQVksUUFFaEJDLFFBQ0kvK0IsTUFBTyxPQUNQQyxPQUFRLE9BQ1I0K0IsU0FBVSxPQUNWSCxVQUFXLFNBQ1hJLFdBQVksT0FDWkUsT0FBUSxpQkFDUkMsZ0JBQWlCLGFBQ2pCQyxhQUFjLE9BRWxCQyxZQUNJbi9CLE1BQU8sT0FDUEMsT0FBUSxRQUVSbS9CLFVBQVcsU0FDWEMsUUFBUyxvQkFDVEosZ0JBQWlCLFNBRXJCSyxjQUNJdC9CLE1BQU8sT0FDUEMsT0FBUSxRQUNSbS9CLFVBQVcsU0FFWEMsUUFBUyxvQkFDVEosZ0JBQWlCLFNBRXJCTSxhQUNJdi9CLE1BQU8sT0FDUEMsT0FBUSxRQUNSbS9CLFVBQVcsU0FFWEMsUUFBUyxvQkFDVEosZ0JBQWlCLFNBRXJCbjRCLE1BQ0k5RyxNQUFPLE9BQ1BDLE9BQVEsT0FDUjYrQixXQUFZLE9BQ1pVLGFBQWMsa0JBRWxCQyxVQUNJei9CLE1BQU8sT0FDUEMsT0FBUSxPQUNSNitCLFdBQVksT0FDWlUsYUFBYyxpQkFDZFAsZ0JBQWlCLGNBVUpTLGNBQ2pCLFNBQUFBLEVBQVkvOEMsZ0dBQU93TSxDQUFBQyxLQUFBc3dDLEdBQUEsSUFBQXJ3QyxtS0FBQUUsQ0FBQUgsTUFBQXN3QyxFQUFBN3ZDLFdBQUE1UyxPQUFBK1ksZUFBQTBwQyxJQUFBaGpELEtBQUEwUyxLQUNUek0sSUFEUyxPQUdmME0sRUFBS2tFLE9BQ0R1ZixNQUFPLEdBQ1BxSixTQUFVLElBTEM5c0IscVVBRGtCc3dDLFVBQU1DLGdFQVVqQnRyQyxHQUN0QmxGLEtBQUsyRixVQUNEK2QsTUFBTyxHQUNQcUosU0FBVSwwQ0FJTHJKLEdBQ1QsSUFBSS96QixTQUdBQSxFQURBcVEsS0FBS21FLE1BQU11ZixPQUFTQSxFQUNmLEdBRUFBLEVBR1QxakIsS0FBSzJGLFVBQ0QrZCxNQUFPL3pCLDJDQUlBbzlCLEdBQ1gsSUFBSXA5QixTQUdBQSxFQURBcVEsS0FBS21FLE1BQU00b0IsVUFBWUEsRUFDbEIsR0FFQUEsRUFHVC9zQixLQUFLMkYsVUFDRG9uQixTQUFVcDlCLGdEQUtVLElBQXBCcVEsS0FBS21FLE1BQU11ZixPQUNZLElBQXZCMWpCLEtBQUttRSxNQUFNNG9CLFVBSWYvc0IsS0FBS3pNLE1BQU1rOUMscUJBQ1Avc0IsTUFBTzFqQixLQUFLbUUsTUFBTXVmLE1BQ2xCcUosU0FBVS9zQixLQUFLbUUsTUFBTTRvQixxREFJWHJKLEdBQ21CLEdBQTdCZ3RCLFFBQVEsbUJBSVoxd0MsS0FBS3pNLE1BQU1vOUMscUJBQ1BqdEIsTUFBT0EsbURBS1FBLEdBQ25CLElBQUssSUFBSXYyQixFQUFJLEVBQUdBLEVBQUk2UyxLQUFLek0sTUFBTXU1QixNQUFNNTlCLE9BQVEvQixJQUN6QyxHQUFJNlMsS0FBS3pNLE1BQU11NUIsTUFBTTMvQixHQUFHdTJCLE9BQVNBLEVBQzdCLE9BQU8sRUFJZixPQUFPLG1EQUljcUosR0FDckIsSUFBSyxJQUFJNS9CLEVBQUksRUFBR0EsRUFBSTZTLEtBQUt6TSxNQUFNdTVCLE1BQU01OUIsT0FBUS9CLElBQ3pDLEdBQUk2UyxLQUFLek0sTUFBTXU1QixNQUFNMy9CLEdBQUc0L0IsVUFBWUEsRUFDaEMsT0FBTyxFQUlmLE9BQU8sc0NBVVAsSUFQUSxJQUFBNmpCLEVBQUE1d0MsS0FDSjBYLEtBQ0FvYSxLQUdFK2UsRUFBWTFrQixNQUFJSSxZQUFZdnNCLEtBQUt6TSxNQUFNODRCLE1BRXBDbC9CLEVBQUksRUFBR0EsRUFBSTBqRCxFQUFVM2hELE9BQVEvQixJQUVlLEdBQTdDNlMsS0FBSzh3Qyx1QkFBdUJELEVBQVUxakQsS0FLMUN1cUIsRUFBSzdqQixNQUNENnZCLE1BQU9tdEIsRUFBVTFqRCxLQUl6QixJQW5CUSxJQUFBNGpELEVBQUEsU0FtQkM1akQsR0FDTCxJQUFJNmpELFNBRUFBLEVBREFKLEVBQUt6c0MsTUFBTXVmLE9BQVNoTSxFQUFLdnFCLEdBQUd1MkIsTUFDbEIsTUFFQSxjQUdkb08sRUFBS2orQixLQUNEbzlDLEVBQUFsTSxRQUFBM1AsY0FBQSxPQUNJelUsTUFBQTd4QixLQUNPc2dELEVBQU8xM0IsTUFDVm00QixnQkFBaUJtQixJQUVyQkUsUUFBUyxTQUFDbjhDLEdBQUQsT0FBTzY3QyxFQUFLTyxhQUFhejVCLEVBQUt2cUIsR0FBR3UyQixTQUV6Q2hNLEVBQUt2cUIsR0FBR3UyQixTQWhCWnYyQixFQUFJLEVBQUdBLEVBQUl1cUIsRUFBS3hvQixPQUFRL0IsSUFBSzRqRCxFQUE3QjVqRCxHQXFCVCxPQUFPMmtDLHNDQU9QLElBSlEsSUFBQXNmLEVBQUFweEMsS0FDSjBYLEtBQ0FvYSxLQUVLM2tDLEVBQUksRUFBR0EsRUFBSTZTLEtBQUt6TSxNQUFNdXZCLE1BQU01ekIsT0FBUS9CLElBRW9CLEdBQXpENlMsS0FBS3F4Qyx5QkFBeUJyeEMsS0FBS3pNLE1BQU11dkIsTUFBTTMxQixHQUFHd0MsS0FLdEQrbkIsRUFBSzdqQixNQUNEazVCLFNBQVUvc0IsS0FBS3pNLE1BQU11dkIsTUFBTTMxQixHQUFHd0MsS0FJdEMsSUFoQlEsSUFBQTJoRCxFQUFBLFNBZ0JDbmtELEdBQ0wsSUFBSTZqRCxTQUVBQSxFQURBSSxFQUFLanRDLE1BQU00b0IsVUFBWXJWLEVBQUt2cUIsR0FBRzQvQixTQUNyQixNQUVBLGNBR2QrRSxFQUFLaitCLEtBQ0RvOUMsRUFBQWxNLFFBQUEzUCxjQUFBLE9BQ0l6VSxNQUFBN3hCLEtBQ09zZ0QsRUFBTzEzQixNQUNWbTRCLGdCQUFpQm1CLElBRXJCRSxRQUFTLFNBQUNuOEMsR0FBRCxPQUFPcThDLEVBQUtHLGVBQWU3NUIsRUFBS3ZxQixHQUFHNC9CLFlBRTNDclYsRUFBS3ZxQixHQUFHNC9CLFlBaEJaNS9CLEVBQUksRUFBR0EsRUFBSXVxQixFQUFLeG9CLE9BQVEvQixJQUFLbWtELEVBQTdCbmtELEdBcUJULE9BQU8ya0MscUNBTVAsSUFITyxJQUFBMGYsRUFBQXh4QyxLQUNIOHhCLEtBREcyZixFQUFBLFNBR0V0a0QsR0FDTDJrQyxFQUFLaitCLEtBQ0RvOUMsRUFBQWxNLFFBQUEzUCxjQUFBLE9BQ0l6VSxNQUFBN3hCLEtBQ09zZ0QsRUFBT2lCLFdBR2RZLEVBQUFsTSxRQUFBM1AsY0FBQSxRQUNJelUsT0FDSS9QLE1BQU8sTUFDUEMsT0FBUSxNQUNSZy9CLGdCQUFpQixhQUVyQnFCLFFBQVMsU0FBQ244QyxHQUFELE9BQU95OEMsRUFBS0Usa0JBQWtCRixFQUFLaitDLE1BQU11NUIsTUFBTTMvQixHQUFHdTJCLFNBTi9ELEtBTEosSUFjSzh0QixFQUFLaitDLE1BQU11NUIsTUFBTTMvQixHQUFHdTJCLE1BQU11dEIsRUFBQWxNLFFBQUEzUCxjQUFBLFdBQzNCNmIsRUFBQWxNLFFBQUEzUCxjQUFBLFFBQU16VSxPQUFRL1AsTUFBTyxNQUFPQyxPQUFRLFFBQXBDLEtBZkosSUFpQksyZ0MsRUFBS2orQyxNQUFNdTVCLE1BQU0zL0IsR0FBRzQvQixZQW5CeEI1L0IsRUFBSSxFQUFHQSxFQUFJNlMsS0FBS3pNLE1BQU11NUIsTUFBTTU5QixPQUFRL0IsSUFBS3NrRCxFQUF6Q3RrRCxHQXdCVCxPQUFPMmtDLG1DQUlGLElBQUE2ZixFQUFBM3hDLEtBQ0wsT0FDSWl4QyxFQUFBbE0sUUFBQTNQLGNBQUEsT0FDSXpVLE1BQU95dUIsRUFBT0MsV0FFZDRCLEVBQUFsTSxRQUFBM1AsY0FBQSxPQUNJelUsTUFBQTd4QixLQUNPc2dELEVBQU9JLE1BQ1ZvQyxNQUFPLFVBSGYsV0FRQVgsRUFBQWxNLFFBQUEzUCxjQUFBLE9BQ0l6VSxNQUFBN3hCLEtBQ09zZ0QsRUFBT1csYUFHYi92QyxLQUFLNnhDLGFBR1ZaLEVBQUFsTSxRQUFBM1AsY0FBQSxPQUNJelUsTUFBQTd4QixLQUNPc2dELEVBQU9JLE1BQ1ZvQyxNQUFPLFVBSGYsU0FRQVgsRUFBQWxNLFFBQUEzUCxjQUFBLE9BQ0l6VSxNQUFBN3hCLEtBQ09zZ0QsRUFBT2MsZUFHYmx3QyxLQUFLOHhDLGFBR1ZiLEVBQUFsTSxRQUFBM1AsY0FBQSxPQUNJelUsTUFBQTd4QixLQUNPc2dELEVBQU9PLFFBQ1YvK0IsTUFBTyxPQUNQbWhDLE1BQU8sUUFDUEMsVUFBVyxRQUVmZCxRQUFTLFNBQUNuOEMsR0FBRCxPQUFPNDhDLEVBQUtNLHNCQVB6QixPQVdBaEIsRUFBQWxNLFFBQUEzUCxjQUFBLE9BQUt6VSxPQUFRMWUsTUFBTyxVQUVwQmd2QyxFQUFBbE0sUUFBQTNQLGNBQUEsT0FDSXpVLE1BQUE3eEIsS0FDT3NnRCxFQUFPSSxNQUNWb0MsTUFBTyxXQUhmLFVBUUFYLEVBQUFsTSxRQUFBM1AsY0FBQSxPQUNJelUsTUFBQTd4QixLQUNPc2dELEVBQU9lLGNBR2Jud0MsS0FBS3F3QyxnQ0ExUUxDLDJQQ3RFckI0QixFQUFBbmxELEVBQUEsSUFFQW9sRCxFQUFBcGxELEVBQUEseUNBSUFpL0MsR0FGQWovQyxFQUFBLElBRUFBLEVBQUEsTUFPQSxJQW9DTXFsRCxHQUFpQixFQUFBRixFQUFBRyxTQXBDQyxTQUFDbHVDLEVBQU81USxHQUM1QixPQUFBekUsS0FDT3FWLElBS2dCLFNBQUN4TixFQUFVcEQsR0FDbEMsT0FDSW9ELGFBS1csU0FBQ3dOLEVBQU94TixFQUFVcEQsR0FDakMsT0FPSXU1QixNQUFPM29CLEVBQU0yb0IsTUFDYlQsS0FBTWxvQixFQUFNa29CLEtBQ1p2SixNQUFPM2UsRUFBTTJlLE1BRWIydEIsb0JBQXFCLFNBQUN2MkMsR0FDbEJ2RCxFQUFTQSxVQUFTLEVBQUFxMUMsRUFBQTdQLG1DQUFrQ2ppQyxLQUV4RHkyQyxvQkFBcUIsU0FBQ3oyQyxHQUNsQnZELEVBQVNBLFVBQVMsRUFBQXExQyxFQUFBNVAsbUNBQWtDbGlDLE9BTXpDLENBSXJCbzRDLHFCQUVhRixnZkN2RGZqRCxFQUFBcGlELEVBQUEsdUNBRUFBLEVBQUEsSUFFQSxJQUFNcWlELEdBQ0ZDLFdBQ0lDLFVBQVcsT0FDWEMsV0FBWSxPQUVoQkMsTUFDSTMrQixPQUFRLE9BQ1I0K0IsU0FBVSxPQUNWQyxXQUFZLFFBRWhCQyxRQUNJLytCLE1BQU8sT0FDUEMsT0FBUSxPQUNSNCtCLFNBQVUsT0FDVkgsVUFBVyxTQUNYSSxXQUFZLE9BQ1pFLE9BQVEsaUJBQ1JDLGdCQUFpQixhQUNqQkMsYUFBYyxPQUVsQnpqQyxPQUNJd0UsT0FBUSxPQUVaMGhDLFNBQ0kzaEMsTUFBTyxPQUNQQyxPQUFRLFFBRVJtL0IsVUFBVyxTQUNYQyxRQUFTLG9CQUNUSixnQkFBaUIsU0FFckIyQyxTQUNJNWhDLE1BQU8sUUFDUEMsT0FBUSxRQUNSbWhDLFVBQVcsT0FFZkYsV0FDSWxoQyxNQUFPLE9BQ1BDLE9BQVEsT0FDUjYrQixXQUFZLE9BQ1pVLGFBQWMsbUJBSWhCcUMsRUFDSSxjQURKQSxFQUVLLE9BRkxBLEVBR00sTUFHU0MsY0FDakIsU0FBQUEsRUFBWW4vQyxnR0FBT3dNLENBQUFDLEtBQUEweUMsR0FBQSxJQUFBenlDLG1LQUFBRSxDQUFBSCxNQUFBMHlDLEVBQUFqeUMsV0FBQTVTLE9BQUErWSxlQUFBOHJDLElBQUFwbEQsS0FBQTBTLEtBQ1R6TSxJQURTLE9BR2YwTSxFQUFLMHZDLE9BQVMsR0FFZDF2QyxFQUFLa0UsT0FDRHhVLEdBQUksR0FDSmdqRCxRQUFTLEdBQ1Q5NkMsS0FBTSxHQUNOb3JCLEtBQU0sR0FDTkMsTUFBTyxJQVZJampCLHFVQURtQnN3QyxVQUFNQyxnRUFlbEJ0ckMsR0FFdEIsSUFEQSxJQUFJNGQsRUFBUSxHQUNIMzFCLEVBQUksRUFBR0EsRUFBSStYLEVBQVU0ZCxNQUFNNXpCLE9BQVEvQixJQUN4QyxHQUFpQyxNQUE3QitYLEVBQVU0ZCxNQUFNMzFCLEdBQUdrUCxPQUFnQixDQUNuQ3ltQixFQUFRNWQsRUFBVTRkLE1BQU0zMUIsR0FDeEIsTUFJSyxJQUFUMjFCLEVBQ0E5aUIsS0FBSzJGLFVBQ0RoVyxHQUFJLEdBQ0pnakQsUUFBUyxHQUNUOTZDLEtBQU0sR0FDTm9yQixLQUFNLEdBQ05DLE1BQU8sS0FHWGxqQixLQUFLMkYsVUFDRGhXLEdBQUltekIsRUFBTW56QixHQUNWa0ksS0FBTWlyQixFQUFNanJCLEtBQ1pvckIsS0FBTUgsRUFBTUcsS0FDWkMsTUFBT0osRUFBTUksMENBS2ZKLEdBQ045aUIsS0FBS3pNLE1BQU1xL0Msa0JBQWtCampELEdBQUltekIsRUFBTW56QixpREFJdkMsSUFBSW16QixHQUNBbnpCLEdBQUlxUSxLQUFLbUUsTUFBTXhVLEdBQ2ZrSSxLQUFNbUksS0FBS21FLE1BQU10TSxLQUNqQm9yQixLQUFNampCLEtBQUttRSxNQUFNOGUsS0FDakJDLE1BQU9sakIsS0FBS21FLE1BQU0rZSxPQUd0QmxqQixLQUFLek0sTUFBTXMvQyxxQkFDUC92QixNQUFPQSxJQUdYOWlCLEtBQUsydkMsT0FBUyxtREFHQWhnRCxHQUNtQixHQUE3QitnRCxRQUFRLG1CQUlaMXdDLEtBQUt6TSxNQUFNbzlDLHFCQUNQaGhELEdBQUlBLGdEQUtrQixJQUF0QnFRLEtBQUttRSxNQUFNd3VDLFNBQ1EsSUFBbkIzeUMsS0FBS21FLE1BQU10TSxLQUtYbUksS0FBS3pNLE1BQU11L0MsZ0JBQWdCOXlDLEtBQUttRSxNQUFNd3VDLFNBQ3RDSSxNQUFNLG9CQUlhLFFBQW5CL3lDLEtBQUttRSxNQUFNdE0sTUFLZm1JLEtBQUt6TSxNQUFNazlDLHFCQUNQOWdELEdBQUlxUSxLQUFLbUUsTUFBTXd1QyxRQUNmOTZDLEtBQU1tSSxLQUFLbUUsTUFBTXRNLEtBQ2pCb3JCLEtBQU1qakIsS0FBS21FLE1BQU04ZSxLQUNqQkMsTUFBT2xqQixLQUFLbUUsTUFBTStlLFFBR3RCbGpCLEtBQUsyRixVQUNEZ3RDLFFBQVMsTUFaVEksTUFBTSx5QkFWTEEsTUFBTSwyREEwQkgsSUFBQW5DLEVBQUE1d0MsS0FDUixPQUNJQSxLQUFLek0sTUFBTXV2QixNQUFNN21CLElBQUksU0FBQysyQyxHQUNsQixJQUFJcEIsU0FDSixPQUFRb0IsRUFBSW43QyxNQUNaLElBQUssT0FDRCs1QyxFQUFRYSxFQUNSLE1BQ0osSUFBSyxRQUNEYixFQUFRYSxFQVFaLE1BSmtCLE1BQWRPLEVBQUkzMkMsU0FDSnUxQyxFQUFRYSxHQUlSeEIsRUFBQWxNLFFBQUEzUCxjQUFBLE9BQ0l6VSxNQUFBN3hCLEtBQ09zZ0QsRUFBTzBDLFdBQ1ZqQyxnQkFBaUIrQixJQUVyQlYsUUFBUyxTQUFDbjhDLEdBQ042N0MsRUFBS3FDLFVBQVVELEtBR25CL0IsRUFBQWxNLFFBQUEzUCxjQUFBLFFBQ0l6VSxPQUNJL1AsTUFBTyxNQUNQQyxPQUFRLE1BQ1JnL0IsZ0JBQWlCLGFBRXJCcUIsUUFBUyxTQUFDbjhDLEdBQUQsT0FBTzY3QyxFQUFLYyxrQkFBa0JzQixFQUFJcmpELE1BTi9DLEtBVEosSUFnQmVxakQsRUFBSXJqRCx1Q0FPMUIsSUFBQXloRCxFQUFBcHhDLEtBc0RMLE1BcERxQixJQUFqQkEsS0FBS21FLE1BQU14VSxJQUVQc2hELEVBQUFsTSxRQUFBM1AsY0FBQSxPQUNJelUsTUFBQTd4QixLQUNPc2dELEVBQU9JLE9BRmxCLFFBS1N5QixFQUFBbE0sUUFBQTNQLGNBQUEsU0FDT3Y5QixLQUFLLE9BQ0w4b0IsTUFBQTd4QixLQUNPc2dELEVBQU8vaUMsT0FDVnVFLE1BQU8sU0FFWHppQixNQUFPNlIsS0FBS21FLE1BQU13dUMsUUFDbEJPLFNBQVUsU0FBQ24rQyxHQUFELE9BQU9xOEMsRUFBS3pyQyxVQUFVZ3RDLFFBQVM1OUMsRUFBRS9GLE9BQU9iLFlBR2xFOGlELEVBQUFsTSxRQUFBM1AsY0FBQSxPQUNJelUsTUFBQTd4QixLQUNPc2dELEVBQU9JLE9BRmxCLE9BS1F5QixFQUFBbE0sUUFBQTNQLGNBQUEsU0FDUXY5QixLQUFLLE9BQ0w4b0IsTUFBQTd4QixLQUNPc2dELEVBQU8vaUMsT0FDVnVFLE1BQU8sU0FFWHppQixNQUFPNlIsS0FBS21FLE1BQU10TSxLQUNsQnE3QyxTQUFVLFNBQUNuK0MsR0FBRCxPQUFPcThDLEVBQUt6ckMsVUFBVTlOLEtBQU05QyxFQUFFL0YsT0FBT2IsY0FNL0Q4aUQsRUFBQWxNLFFBQUEzUCxjQUFBLE9BQ0l6VSxNQUFBN3hCLEtBQ09zZ0QsRUFBT0ksT0FGbEIsUUFLVXh2QyxLQUFLbUUsTUFBTXhVLElBRXJCc2hELEVBQUFsTSxRQUFBM1AsY0FBQSxPQUNJelUsTUFBQTd4QixLQUNPc2dELEVBQU9JLE9BRmxCLE9BS1N4dkMsS0FBS21FLE1BQU10TSxpREFRZCxJQUFBMjVDLEVBQUF4eEMsS0E2QmQsTUEzQnFCLElBQWpCQSxLQUFLbUUsTUFBTXhVLElBRVBzaEQsRUFBQWxNLFFBQUEzUCxjQUFBLE9BQ0l6VSxNQUFBN3hCLEtBQ09zZ0QsRUFBT08sUUFDVi8rQixNQUFPLE9BQ1BtaEMsTUFBTyxVQUVYYixRQUFTLFNBQUNuOEMsR0FBRCxPQUFPeThDLEVBQUtTLHNCQU56QixVQWFBaEIsRUFBQWxNLFFBQUEzUCxjQUFBLE9BQ0l6VSxNQUFBN3hCLEtBQ09zZ0QsRUFBT08sUUFDVm9DLE1BQU8sVUFFWGIsUUFBUyxTQUFDbjhDLEdBQUQsT0FBT3k4QyxFQUFLMkIsc0JBTHpCLHdDQWdCSCxJQUFBeEIsRUFBQTN4QyxLQUNMLE9BQ0lpeEMsRUFBQWxNLFFBQUEzUCxjQUFBLE9BQ0l6bEMsR0FBRyxlQUNIZ3hCLE1BQU95dUIsRUFBT0MsV0FFZDRCLEVBQUFsTSxRQUFBM1AsY0FBQSxPQUFLelUsT0FBUTlQLE9BQVEsU0FFckJvZ0MsRUFBQWxNLFFBQUEzUCxjQUFBLE9BQ0l6VSxNQUFBN3hCLEtBQ09zZ0QsRUFBT21ELFNBQ1ZhLGFBQWMsU0FHakJwekMsS0FBSzh4QyxhQUdUOXhDLEtBQUtxekMsU0FFTnBDLEVBQUFsTSxRQUFBM1AsY0FBQSxZQUNJemxDLEdBQUcsdUJBQ0h4QixNQUFPNlIsS0FBS21FLE1BQU04ZSxLQUNsQnRDLE1BQUE3eEIsS0FDT3NnRCxFQUFPb0QsU0FFZFUsU0FBVSxTQUFDbitDLEdBQUQsT0FBTzQ4QyxFQUFLaHNDLFVBQVVzZCxLQUFNbHVCLEVBQUUvRixPQUFPYixXQUdsRDZSLEtBQUtzekMsc0NBblFEWiwyUEN0RHJCUixFQUFBbmxELEVBQUEsSUFFQXdtRCxFQUFBeG1ELEVBQUEseUNBSUErK0MsR0FGQS8rQyxFQUFBLElBRUFBLEVBQUEsTUFTQSxJQWtETXltRCxHQUFrQixFQUFBdEIsRUFBQUcsU0FsREEsU0FBQ2x1QyxFQUFPNVEsR0FDNUIsT0FBQXpFLEtBQ09xVixJQUtnQixTQUFDeE4sRUFBVXBELEdBQ2xDLE9BQ0lvRCxhQUtXLFNBQUN3TixFQUFPeE4sRUFBVXBELEdBQ2pDLE9BT0l1dkIsTUFBTzNlLEVBQU0yZSxNQUViOHZCLGlCQUFrQixTQUFDMTRDLEdBQ2Z2RCxFQUFTQSxVQUFTLEVBQUFtMUMsRUFBQWhQLDhCQUE2QjVpQyxLQUVuRDI0QyxvQkFBcUIsU0FBQzM0QyxHQUNsQnZELEVBQVNBLFVBQVMsRUFBQW0xQyxFQUFBcFAsb0NBQW1DeGlDLEtBRXpEeTJDLG9CQUFxQixTQUFDejJDLEdBQ2xCdkQsRUFBU0EsVUFBUyxFQUFBbTFDLEVBQUFuUCxvQ0FBbUN6aUMsS0FFekR1MkMsb0JBQXFCLFNBQUN2MkMsR0FDbEJ2RCxFQUFTQSxVQUFTLEVBQUFtMUMsRUFBQWxQLG9DQUFtQzFpQyxLQUd6RDQ0QyxnQkFBaUIsU0FBQ25qRCxHQUNkLElBQUssSUFBSXhDLEVBQUksRUFBR0EsRUFBSWdYLEVBQU0yZSxNQUFNNXpCLE9BQVEvQixJQUNwQyxHQUFJZ1gsRUFBTTJlLE1BQU0zMUIsR0FBR3dDLElBQU1BLEVBQ3JCLE9BQU8sRUFJZixPQUFPLEtBTUssQ0FJdEIraUQscUJBRWFjLGdmQ3ZFZnJFLEVBQUFwaUQsRUFBQSx1Q0FFQTBtRCxFQUFBMW1ELEVBQUEsSUFFQSxJQUFNcWlELEdBQ0ZDLFdBQ0lDLFVBQVcsUUFFZkUsTUFDSTMrQixPQUFRLE9BQ1I0K0IsU0FBVSxPQUNWQyxXQUFZLFFBRWhCQyxRQUNJLytCLE1BQU8sT0FDUEMsT0FBUSxPQUNSNCtCLFNBQVUsT0FDVkgsVUFBVyxTQUNYSSxXQUFZLE9BQ1pFLE9BQVEsaUJBQ1JDLGdCQUFpQixhQUNqQkMsYUFBYyxPQUVsQnpqQyxPQUNJd0UsT0FBUSxRQUlLNmlDLGNBQ2pCLFNBQUFBLEVBQVluZ0QsZ0dBQU93TSxDQUFBQyxLQUFBMHpDLEdBQUEsSUFBQXp6QyxtS0FBQUUsQ0FBQUgsTUFBQTB6QyxFQUFBanpDLFdBQUE1UyxPQUFBK1ksZUFBQThzQyxJQUFBcG1ELEtBQUEwUyxLQUNUek0sSUFEUyxPQUdmME0sRUFBS2tFLE9BQ0QybUIsV0FBWXYzQixFQUFNb3hCLElBQUkxQixLQUFLNkgsV0FDM0JDLFdBQVl4M0IsRUFBTW94QixJQUFJMUIsS0FBSzhILFdBQzNCQyxXQUFZejNCLEVBQU1veEIsSUFBSTFCLEtBQUsrSCxXQUMzQkMsV0FBWTEzQixFQUFNb3hCLElBQUkxQixLQUFLZ0ksV0FDM0J5UCxTQUFVbm5DLEVBQU1veEIsSUFBSTFCLEtBQUt5WCxTQUN6QjFSLE9BQVF6MUIsRUFBTW94QixJQUFJMUIsS0FBSytGLE9BQ3ZCQyxPQUFRMTFCLEVBQU1veEIsSUFBSTFCLEtBQUtnRyxPQUN2QmlDLE9BQVEzM0IsRUFBTW94QixJQUFJMUIsS0FBS2lJLFFBWFpqckIscVVBRHNCc3dDLFVBQU1DLGdFQWdCckJ0ckMsR0FDdEJsRixLQUFLMkYsVUFDRG1sQixXQUFZNWxCLEVBQVV5ZixJQUFJMUIsS0FBSzZILFdBQy9CQyxXQUFZN2xCLEVBQVV5ZixJQUFJMUIsS0FBSzhILFdBQy9CQyxXQUFZOWxCLEVBQVV5ZixJQUFJMUIsS0FBSytILFdBQy9CQyxXQUFZL2xCLEVBQVV5ZixJQUFJMUIsS0FBS2dJLFdBQy9CeVAsU0FBVXgxQixFQUFVeWYsSUFBSTFCLEtBQUt5WCxTQUM3QjFSLE9BQVE5akIsRUFBVXlmLElBQUkxQixLQUFLK0YsT0FDM0JDLE9BQVEvakIsRUFBVXlmLElBQUkxQixLQUFLZ0csT0FDM0JpQyxPQUFRaG1CLEVBQVV5ZixJQUFJMUIsS0FBS2lJLHFEQUsvQixJQUFJdkcsRUFBTTNrQixLQUFLek0sTUFBTW94QixJQUVTLEtBQTFCM2tCLEtBQUttRSxNQUFNMm1CLFlBQ2UsS0FBMUI5cUIsS0FBS21FLE1BQU00bUIsWUFDZSxLQUExQi9xQixLQUFLbUUsTUFBTTZtQixZQUNlLEtBQTFCaHJCLEtBQUttRSxNQUFNOG1CLFlBQ2EsS0FBeEJqckIsS0FBS21FLE1BQU11MkIsVUFDVyxLQUF0QjE2QixLQUFLbUUsTUFBTTZrQixRQUNXLEtBQXRCaHBCLEtBQUttRSxNQUFNOGtCLFFBQ1csS0FBdEJqcEIsS0FBS21FLE1BQU0rbUIsT0FLWSxRQUF2QmxyQixLQUFLbUUsTUFBTXUyQixVQUE2QyxRQUF2QjE2QixLQUFLbUUsTUFBTXUyQixVQUtoRC9WLEVBQUloMUIsR0FBS3FRLEtBQUt6TSxNQUFNb3hCLElBQUloMUIsR0FDeEJnMUIsRUFBSTFCLEtBQUs2SCxXQUFhOXFCLEtBQUttRSxNQUFNMm1CLFdBQ2pDbkcsRUFBSTFCLEtBQUs4SCxXQUFhL3FCLEtBQUttRSxNQUFNNG1CLFdBQ2pDcEcsRUFBSTFCLEtBQUsrSCxXQUFhaHJCLEtBQUttRSxNQUFNNm1CLFdBQ2pDckcsRUFBSTFCLEtBQUtnSSxXQUFhanJCLEtBQUttRSxNQUFNOG1CLFdBQ2pDdEcsRUFBSTFCLEtBQUt5WCxTQUFXMTZCLEtBQUttRSxNQUFNdTJCLFNBQy9CL1YsRUFBSTFCLEtBQUsrRixPQUFTaHBCLEtBQUttRSxNQUFNNmtCLE9BQzdCckUsRUFBSTFCLEtBQUtnRyxPQUFTanBCLEtBQUttRSxNQUFNOGtCLE9BQzdCdEUsRUFBSTFCLEtBQUtpSSxPQUFTbHJCLEtBQUttRSxNQUFNK21CLE9BRTdCbHJCLEtBQUt6TSxNQUFNcy9DLHFCQUNQbHVCLElBQUtBLEtBZkxvdUIsTUFBTSxrQ0FMTEEsTUFBTSxtREF5Qk4sSUFBQW5DLEVBQUE1d0MsS0FDTCxPQUNJaXhDLEVBQUFsTSxRQUFBM1AsY0FBQSxPQUNJelUsTUFBT3l1QixFQUFPQyxXQUVkNEIsRUFBQWxNLFFBQUEzUCxjQUFBLE9BQ0l6VSxNQUFBN3hCLEtBQ09zZ0QsRUFBT0ksT0FGbEIsaUJBTUt5QixFQUFBbE0sUUFBQTNQLGNBQUEsU0FDR3Y5QixLQUFLLE9BQ0wxSixNQUFPNlIsS0FBS21FLE1BQU0ybUIsV0FDbEJuSyxNQUFBN3hCLEtBQVdzZ0QsRUFBTy9pQyxPQUFPdUUsTUFBTyxTQUNoQ3NpQyxTQUFVLFNBQUNuK0MsR0FBRCxPQUFPNjdDLEVBQUtqckMsVUFBVW1sQixXQUFZcndCLFNBQU82cUIsVUFBVXZ3QixFQUFFL0YsT0FBT2IsWUFWOUUsTUFhSzhpRCxFQUFBbE0sUUFBQTNQLGNBQUEsU0FDR3Y5QixLQUFLLE9BQ0wxSixNQUFPNlIsS0FBS21FLE1BQU00bUIsV0FDbEJwSyxNQUFBN3hCLEtBQVdzZ0QsRUFBTy9pQyxPQUFPdUUsTUFBTyxTQUNoQ3NpQyxTQUFVLFNBQUNuK0MsR0FBRCxPQUFPNjdDLEVBQUtqckMsVUFBVW9sQixXQUFZdHdCLFNBQU82cUIsVUFBVXZ3QixFQUFFL0YsT0FBT2IsYUFHOUU4aUQsRUFBQWxNLFFBQUEzUCxjQUFBLE9BQ0l6VSxNQUFBN3hCLEtBQ09zZ0QsRUFBT0ksT0FGbEIsaUJBTUt5QixFQUFBbE0sUUFBQTNQLGNBQUEsU0FDR3Y5QixLQUFLLE9BQ0wxSixNQUFPNlIsS0FBS21FLE1BQU02bUIsV0FDbEJySyxNQUFBN3hCLEtBQVdzZ0QsRUFBTy9pQyxPQUFPdUUsTUFBTyxTQUNoQ3NpQyxTQUFVLFNBQUNuK0MsR0FBRCxPQUFPNjdDLEVBQUtqckMsVUFBVXFsQixXQUFZdndCLFNBQU82cUIsVUFBVXZ3QixFQUFFL0YsT0FBT2IsWUFWOUUsTUFhSzhpRCxFQUFBbE0sUUFBQTNQLGNBQUEsU0FDR3Y5QixLQUFLLE9BQ0wxSixNQUFPNlIsS0FBS21FLE1BQU04bUIsV0FDbEJ0SyxNQUFBN3hCLEtBQVdzZ0QsRUFBTy9pQyxPQUFPdUUsTUFBTyxTQUNoQ3NpQyxTQUFVLFNBQUNuK0MsR0FBRCxPQUFPNjdDLEVBQUtqckMsVUFBVXNsQixXQUFZeHdCLFNBQU82cUIsVUFBVXZ3QixFQUFFL0YsT0FBT2IsYUFHOUU4aUQsRUFBQWxNLFFBQUEzUCxjQUFBLE9BQ0l6VSxNQUFBN3hCLEtBQ09zZ0QsRUFBT0ksT0FGbEIsT0FLUXlCLEVBQUFsTSxRQUFBM1AsY0FBQSxTQUNRdjlCLEtBQUssT0FDTDFKLE1BQU82UixLQUFLbUUsTUFBTXUyQixTQUNsQi9aLE1BQUE3eEIsS0FBV3NnRCxFQUFPL2lDLE9BQU91RSxNQUFPLFNBQ2hDc2lDLFNBQVUsU0FBQ24rQyxHQUFELE9BQU82N0MsRUFBS2pyQyxVQUFVKzBCLFNBQVUzbEMsRUFBRS9GLE9BQU9iLFdBVG5FLFFBWU84aUQsRUFBQWxNLFFBQUEzUCxjQUFBLFNBQ1N2OUIsS0FBSyxPQUNMMUosTUFBTzZSLEtBQUttRSxNQUFNK21CLE9BQ2xCdkssTUFBQTd4QixLQUFXc2dELEVBQU8vaUMsT0FBT3VFLE1BQU8sU0FDaENzaUMsU0FBVSxTQUFDbitDLEdBQUQsT0FBTzY3QyxFQUFLanJDLFVBQVV1bEIsT0FBUXp3QixTQUFPNnFCLFVBQVV2d0IsRUFBRS9GLE9BQU9iLGFBR2xGOGlELEVBQUFsTSxRQUFBM1AsY0FBQSxPQUNJelUsTUFBQTd4QixLQUNPc2dELEVBQU9JLE9BRmxCLFlBS2F5QixFQUFBbE0sUUFBQTNQLGNBQUEsU0FDV3Y5QixLQUFLLE9BQ0wxSixNQUFPNlIsS0FBS21FLE1BQU02a0IsT0FDbEJySSxNQUFBN3hCLEtBQVdzZ0QsRUFBTy9pQyxPQUFPdUUsTUFBTyxTQUNoQ3NpQyxTQUFVLFNBQUNuK0MsR0FBRCxPQUFPNjdDLEVBQUtqckMsVUFBVXFqQixPQUFRdnVCLFNBQU82cUIsVUFBVXZ3QixFQUFFL0YsT0FBT2IsYUFHMUY4aUQsRUFBQWxNLFFBQUEzUCxjQUFBLE9BQ0l6VSxNQUFBN3hCLEtBQ09zZ0QsRUFBT0ksT0FGbEIsWUFLYXlCLEVBQUFsTSxRQUFBM1AsY0FBQSxTQUNHdjlCLEtBQUssT0FDTDFKLE1BQU82UixLQUFLbUUsTUFBTThrQixPQUNsQnRJLE1BQUE3eEIsS0FBV3NnRCxFQUFPL2lDLE9BQU91RSxNQUFPLFNBQ2hDc2lDLFNBQVUsU0FBQ24rQyxHQUFELE9BQU82N0MsRUFBS2pyQyxVQUFVc2pCLE9BQVF4dUIsU0FBTzZxQixVQUFVdndCLEVBQUUvRixPQUFPYixhQUdsRjhpRCxFQUFBbE0sUUFBQTNQLGNBQUEsT0FDSXpVLE1BQUE3eEIsS0FDT3NnRCxFQUFPSSxRQUdsQnlCLEVBQUFsTSxRQUFBM1AsY0FBQSxPQUNJelUsTUFBQTd4QixLQUNPc2dELEVBQU9JLE9BR2R5QixFQUFBbE0sUUFBQTNQLGNBQUEsT0FDSXpVLE1BQUE3eEIsS0FDT3NnRCxFQUFPTyxRQUNWb0MsTUFBTyxVQUVYYixRQUFTLGtCQUFNTixFQUFLdUMsc0JBTHhCLDJCQW5LQ08sMlBDNUJyQnhCLEVBQUFubEQsRUFBQSxJQUVBNG1ELEVBQUE1bUQsRUFBQSx5Q0FFQW8vQyxFQUFBcC9DLEVBQUEsSUFFQTYrQyxFQUFBNytDLEVBQUEsS0FNQSxJQThETTZtRCxHQUFxQixFQUFBMUIsRUFBQUcsU0E5REgsU0FBQ2x1QyxFQUFPNVEsR0FDNUIsT0FBQXpFLEtBQ09xVixJQUtnQixTQUFDeE4sRUFBVXBELEdBQ2xDLE9BQ0lvRCxhQUtXLFNBQUN3TixFQUFPeE4sRUFBVXBELEdBRWpDLElBQUlveEIsR0FDQWgxQixHQUFJLEdBQ0pzekIsTUFDSXlYLFNBQVUsR0FDVjVQLFdBQVksR0FDWkMsV0FBWSxHQUNaQyxXQUFZLEdBQ1pDLFdBQVksR0FDWmpDLE9BQVEsR0FDUkMsT0FBUSxHQUNSaUMsT0FBUSxLQUdoQixHQUF5QixJQUFyQi9tQixFQUFNOHBDLFNBQVN0K0MsR0FDZixJQUFLLElBQUl4QyxFQUFJLEVBQUdBLEVBQUlnWCxFQUFNa29CLEtBQUtuOUIsT0FBUS9CLElBQ25DLEdBQUlnWCxFQUFNa29CLEtBQUtsL0IsR0FBR3dDLElBQU13VSxFQUFNOHBDLFNBQVN0K0MsR0FBSSxDQUN2QyxJQUFNa2tELEVBQUlobkMsUUFBTWMsaUJBQWlCeEosRUFBTWtvQixLQUFLbC9CLEdBQUd5Z0IsR0FDZHpKLEVBQU1rb0IsS0FBS2wvQixHQUFHMGdCLEdBQ2QxSixFQUFNa29CLEtBQUtsL0IsR0FBRzJnQixHQUNkM0osRUFBTWtvQixLQUFLbC9CLEdBQUc0Z0IsS0FDL0M0VyxFQUFNeGdCLEVBQU1rb0IsS0FBS2wvQixJQUNiNFksRUFBSTh0QyxFQUFFOXRDLEVBQ1Y0ZSxFQUFJM2UsRUFBSTZ0QyxFQUFFN3RDLEVBQ1YyZSxFQUFJNVgsRUFBSThtQyxFQUFFOW1DLEVBQ1Y0WCxFQUFJeFgsRUFBSTBtQyxFQUFFMW1DLEVBRVYsTUFLWixPQU9Jd1gsSUFBS0EsRUFDTGt1QixvQkFBcUIsU0FBQzM0QyxHQUNsQnZELEVBQVNBLFVBQVMsRUFBQWkxQyxFQUFBNU8sdUNBQXNDOWlDLE9BTXpDLENBSXpCdzVDLHFCQUVhRSxnZkNoRmZ6RSxFQUFBcGlELEVBQUEsdUNBRUEwbUQsRUFBQTFtRCxFQUFBLElBRUEsSUFBTXFpRCxHQUNGQyxXQUNJQyxVQUFXLFFBRWZFLE1BQ0kzK0IsT0FBUSxPQUNSNCtCLFNBQVUsT0FDVkMsV0FBWSxRQUVoQkMsUUFDSS8rQixNQUFPLE9BQ1BDLE9BQVEsT0FDUjQrQixTQUFVLE9BQ1ZILFVBQVcsU0FDWEksV0FBWSxPQUNaRSxPQUFRLGlCQUNSQyxnQkFBaUIsYUFDakJDLGFBQWMsT0FFbEJ6akMsT0FDSXdFLE9BQVEsUUFJS2lqQyxjQUNqQixTQUFBQSxFQUFZdmdELGdHQUFPd00sQ0FBQUMsS0FBQTh6QyxHQUFBLElBQUE3ekMsbUtBQUFFLENBQUFILE1BQUE4ekMsRUFBQXJ6QyxXQUFBNVMsT0FBQStZLGVBQUFrdEMsSUFBQXhtRCxLQUFBMFMsS0FDVHpNLElBRFMsT0FHZjBNLEVBQUtrRSxPQUNEeFUsR0FBSTRELEVBQU1veEIsSUFBSWgxQixHQUNka0ksS0FBTXRFLEVBQU1veEIsSUFBSTlzQixLQUNoQjZyQixNQUFPbndCLEVBQU1veEIsSUFBSWpCLE1BQ2pCQyxHQUFJcHdCLEVBQU1veEIsSUFBSWhCLElBUEgxakIscVVBRHFCc3dDLFVBQU1DLGdFQVlwQnRyQyxHQUN0QmxGLEtBQUsyRixVQUNEaFcsR0FBSXVWLEVBQVV5ZixJQUFJaDFCLEdBQ2xCa0ksS0FBTXFOLEVBQVV5ZixJQUFJOXNCLEtBQ3BCNnJCLE1BQU94ZSxFQUFVeWYsSUFBSWpCLE1BQ3JCQyxHQUFJemUsRUFBVXlmLElBQUloQixpREFLdEIsSUFBSWdCLEVBQU0za0IsS0FBS3pNLE1BQU1veEIsSUFFSyxLQUF0QjNrQixLQUFLek0sTUFBTW94QixJQUFJaDFCLElBQ1MsS0FBeEJxUSxLQUFLek0sTUFBTW94QixJQUFJOXNCLE1BQ00sS0FBckJtSSxLQUFLbUUsTUFBTXVmLE9BQ08sS0FBbEIxakIsS0FBS21FLE1BQU13ZixJQUtmZ0IsRUFBSWgxQixHQUFLcVEsS0FBS3pNLE1BQU1veEIsSUFBSWgxQixHQUN4QmcxQixFQUFJOXNCLEtBQU9tSSxLQUFLek0sTUFBTW94QixJQUFJOXNCLEtBQzFCOHNCLEVBQUlqQixNQUFRMWpCLEtBQUttRSxNQUFNdWYsTUFDdkJpQixFQUFJaEIsR0FBSzNqQixLQUFLbUUsTUFBTXdmLEdBRXBCM2pCLEtBQUt6TSxNQUFNcy9DLHFCQUNQbHVCLElBQUtBLEtBVkpvdUIsTUFBTSw4REFlMkIsR0FBbENyQyxRQUFRLHdCQUlaMXdDLEtBQUt6TSxNQUFNbzlDLHFCQUNQaGhELEdBQUlxUSxLQUFLbUUsTUFBTXhVLGlEQUtuQixJQUFJZzFCLEVBQU0za0IsS0FBS3pNLE1BQU1veEIsSUFFQyxLQUFsQjNrQixLQUFLbUUsTUFBTXhVLElBQ1MsS0FBcEJxUSxLQUFLbUUsTUFBTXRNLE1BQ1UsS0FBckJtSSxLQUFLbUUsTUFBTXVmLE9BQ08sS0FBbEIxakIsS0FBS21FLE1BQU13ZixHQU1YM2pCLEtBQUt6TSxNQUFNd2dELGFBQWEvekMsS0FBS21FLE1BQU14VSxJQUNuQ29qRCxNQUFNLG9CQUlhLFFBQW5CL3lDLEtBQUttRSxNQUFNdE0sTUFLZjhzQixFQUFJaDFCLEdBQUtxUSxLQUFLbUUsTUFBTXhVLEdBQ3BCZzFCLEVBQUk5c0IsS0FBT21JLEtBQUttRSxNQUFNdE0sS0FDdEI4c0IsRUFBSWpCLE1BQVExakIsS0FBS21FLE1BQU11ZixNQUN2QmlCLEVBQUloQixHQUFLM2pCLEtBQUttRSxNQUFNd2YsR0FFcEIzakIsS0FBS3pNLE1BQU1rOUMscUJBQ1A5ckIsSUFBS0EsS0FWTG91QixNQUFNLHlCQVhOQSxNQUFNLG1EQXlCTCxJQUFBbkMsRUFBQTV3QyxLQUNMLE9BQ0lpeEMsRUFBQWxNLFFBQUEzUCxjQUFBLE9BQ0l6VSxNQUFPeXVCLEVBQU9DLFdBRWQ0QixFQUFBbE0sUUFBQTNQLGNBQUEsT0FDSXpVLE1BQUE3eEIsS0FDT3NnRCxFQUFPSSxPQUZsQixVQU1JeUIsRUFBQWxNLFFBQUEzUCxjQUFBLFFBQ0l6VSxPQUNJL1AsTUFBTyxNQUNQQyxPQUFRLE1BQ1JnL0IsZ0JBQWlCLGFBRXJCcUIsUUFBUyxTQUFDbjhDLEdBQUQsT0FBTzY3QyxFQUFLYyxzQkFOekIsS0FOSixJQWVJVCxFQUFBbE0sUUFBQTNQLGNBQUEsUUFBTXpVLE9BQVFxekIsV0FBWSxPQUFRcEMsTUFBTyxTQUFVNXhDLEtBQUt6TSxNQUFNb3hCLElBQUloMUIsS0FFdEVzaEQsRUFBQWxNLFFBQUEzUCxjQUFBLE9BQ0l6VSxNQUFBN3hCLEtBQ09zZ0QsRUFBT0ksT0FGbEIsUUFLU3lCLEVBQUFsTSxRQUFBM1AsY0FBQSxRQUFNelUsT0FBUWl4QixNQUFPLFVBQVc1eEMsS0FBS3pNLE1BQU1veEIsSUFBSTlzQixPQUV4RG81QyxFQUFBbE0sUUFBQTNQLGNBQUEsT0FDSXpVLE1BQUE3eEIsS0FDT3NnRCxFQUFPSSxPQUZsQixXQUtZeUIsRUFBQWxNLFFBQUEzUCxjQUFBLFNBQ0l2OUIsS0FBSyxPQUNMMUosTUFBTzZSLEtBQUttRSxNQUFNdWYsTUFDbEIvQyxNQUFBN3hCLEtBQVdzZ0QsRUFBTy9pQyxPQUFPdUUsTUFBTyxVQUNoQ3NpQyxTQUFVLFNBQUNuK0MsR0FBRCxPQUFPNjdDLEVBQUtqckMsVUFBVStkLE1BQU8zdUIsRUFBRS9GLE9BQU9iLFlBR2hFOGlELEVBQUFsTSxRQUFBM1AsY0FBQSxPQUNJelUsTUFBQTd4QixLQUNPc2dELEVBQU9JLE9BRmxCLE1BS095QixFQUFBbE0sUUFBQTNQLGNBQUEsU0FDS3Y5QixLQUFLLE9BQ0wxSixNQUFPNlIsS0FBS21FLE1BQU13ZixHQUNsQmhELE1BQUE3eEIsS0FBV3NnRCxFQUFPL2lDLE9BQU91RSxNQUFPLFNBQ2hDc2lDLFNBQVUsU0FBQ24rQyxHQUFELE9BQU82N0MsRUFBS2pyQyxVQUFVZ2UsR0FBSWxwQixTQUFPNnFCLFVBQVV2d0IsRUFBRS9GLE9BQU9iLGFBRzFFOGlELEVBQUFsTSxRQUFBM1AsY0FBQSxPQUNJelUsTUFBQTd4QixLQUNPc2dELEVBQU9JLE9BRmxCLEtBS094dkMsS0FBS3pNLE1BQU1veEIsSUFBSTVlLEVBTHRCLE1BSzRCL0YsS0FBS3pNLE1BQU1veEIsSUFBSTNlLEVBTDNDLE1BS2lEaEcsS0FBS3pNLE1BQU1veEIsSUFBSTVYLEVBTGhFLE1BS3NFL00sS0FBS3pNLE1BQU1veEIsSUFBSXhYLEdBRXJGOGpDLEVBQUFsTSxRQUFBM1AsY0FBQSxPQUNJelUsTUFBQTd4QixLQUNPc2dELEVBQU9JLE9BR2R5QixFQUFBbE0sUUFBQTNQLGNBQUEsT0FDSXpVLE1BQUE3eEIsS0FDT3NnRCxFQUFPTyxRQUNWb0MsTUFBTyxVQUVYYixRQUFTLGtCQUFNTixFQUFLdUMsc0JBTHhCLHlDQWNQLElBQUEvQixFQUFBcHhDLEtBQ0wsT0FDSWl4QyxFQUFBbE0sUUFBQTNQLGNBQUEsT0FDSXpVLE1BQU95dUIsRUFBT0MsV0FFZDRCLEVBQUFsTSxRQUFBM1AsY0FBQSxPQUNJelUsTUFBQTd4QixLQUNPc2dELEVBQU9JLE9BRmxCLFdBS1l5QixFQUFBbE0sUUFBQTNQLGNBQUEsU0FDSXY5QixLQUFLLE9BQ0wxSixNQUFPNlIsS0FBS21FLE1BQU14VSxHQUNsQmd4QixNQUFBN3hCLEtBQVdzZ0QsRUFBTy9pQyxPQUFPdUUsTUFBTyxTQUNoQ3NpQyxTQUFVLFNBQUNuK0MsR0FBRCxPQUFPcThDLEVBQUt6ckMsVUFBVWhXLEdBQUlvRixFQUFFL0YsT0FBT2IsWUFHN0Q4aUQsRUFBQWxNLFFBQUEzUCxjQUFBLE9BQ0l6VSxNQUFBN3hCLEtBQ09zZ0QsRUFBT0ksT0FGbEIsUUFLU3lCLEVBQUFsTSxRQUFBM1AsY0FBQSxTQUNPdjlCLEtBQUssT0FDTDFKLE1BQU82UixLQUFLbUUsTUFBTXRNLEtBQ2xCOG9CLE1BQUE3eEIsS0FBV3NnRCxFQUFPL2lDLE9BQU91RSxNQUFPLFNBQ2hDc2lDLFNBQVUsU0FBQ24rQyxHQUFELE9BQU9xOEMsRUFBS3pyQyxVQUFVOU4sS0FBTTlDLEVBQUUvRixPQUFPYixZQUcvRDhpRCxFQUFBbE0sUUFBQTNQLGNBQUEsT0FDSXpVLE1BQUE3eEIsS0FDT3NnRCxFQUFPSSxPQUZsQixXQUtZeUIsRUFBQWxNLFFBQUEzUCxjQUFBLFNBQ0l2OUIsS0FBSyxPQUNMMUosTUFBTzZSLEtBQUttRSxNQUFNdWYsTUFDbEIvQyxNQUFBN3hCLEtBQVdzZ0QsRUFBTy9pQyxPQUFPdUUsTUFBTyxVQUNoQ3NpQyxTQUFVLFNBQUNuK0MsR0FBRCxPQUFPcThDLEVBQUt6ckMsVUFBVStkLE1BQU8zdUIsRUFBRS9GLE9BQU9iLFlBR2hFOGlELEVBQUFsTSxRQUFBM1AsY0FBQSxPQUNJelUsTUFBQTd4QixLQUNPc2dELEVBQU9JLE9BRmxCLE1BS095QixFQUFBbE0sUUFBQTNQLGNBQUEsU0FDS3Y5QixLQUFLLE9BQ0wxSixNQUFPNlIsS0FBS21FLE1BQU13ZixHQUNsQmhELE1BQUE3eEIsS0FBV3NnRCxFQUFPL2lDLE9BQU91RSxNQUFPLFNBQ2hDc2lDLFNBQVUsU0FBQ24rQyxHQUFELE9BQU9xOEMsRUFBS3pyQyxVQUFVZ2UsR0FBSWxwQixTQUFPNnFCLFVBQVV2d0IsRUFBRS9GLE9BQU9iLGFBRzFFOGlELEVBQUFsTSxRQUFBM1AsY0FBQSxPQUNJelUsTUFBQTd4QixLQUNPc2dELEVBQU9JLFFBR2xCeUIsRUFBQWxNLFFBQUEzUCxjQUFBLE9BQ0l6VSxNQUFBN3hCLEtBQ09zZ0QsRUFBT0ksT0FHZHlCLEVBQUFsTSxRQUFBM1AsY0FBQSxPQUNJelUsTUFBQTd4QixLQUNPc2dELEVBQU9PLFFBQ1YvK0IsTUFBTyxPQUNQbWhDLE1BQU8sVUFFWGIsUUFBUyxrQkFBTUUsRUFBS2Esc0JBTnhCLDJDQXVCWixNQU55QixJQUFyQmp5QyxLQUFLek0sTUFBTW94QixJQUFJaDFCLEdBQ1JxUSxLQUFLaTBDLFNBRUxqMEMsS0FBS2swQyw0QkF0UEhKLDJQQzVCckI1QixFQUFBbmxELEVBQUEsSUFFQW9uRCxFQUFBcG5ELEVBQUEseUNBRUFvL0MsRUFBQXAvQyxFQUFBLElBRUEyK0MsRUFBQTMrQyxFQUFBLEtBUUEsSUFtRk1xbkQsR0FBb0IsRUFBQWxDLEVBQUFHLFNBbkZGLFNBQUNsdUMsRUFBTzVRLEdBQzVCLE9BQUF6RSxLQUNPcVYsSUFLZ0IsU0FBQ3hOLEVBQVVwRCxHQUNsQyxPQUNJb0QsYUFLVyxTQUFDd04sRUFBT3hOLEVBQVVwRCxHQUVqQyxJQUFJb3hCLEdBQ0FoMUIsR0FBSSxHQUNKa0ksS0FBTSxHQUNONnJCLE1BQU8sR0FDUEMsR0FBSSxHQUNKVixNQUNJeVgsU0FBVSxHQUNWNVAsV0FBWSxHQUNaQyxXQUFZLEdBQ1pDLFdBQVksR0FDWkMsV0FBWSxHQUNaakMsT0FBUSxHQUNSQyxPQUFRLEdBQ1JpQyxPQUFRLEtBR2hCLEdBQXlCLElBQXJCL21CLEVBQU04cEMsU0FBU3QrQyxHQUNmLElBQUssSUFBSXhDLEVBQUksRUFBR0EsRUFBSWdYLEVBQU1rb0IsS0FBS245QixPQUFRL0IsSUFDbkMsR0FBSWdYLEVBQU1rb0IsS0FBS2wvQixHQUFHd0MsSUFBTXdVLEVBQU04cEMsU0FBU3QrQyxHQUFJLENBQ3ZDLElBQU1ra0QsRUFBSWhuQyxRQUFNYyxpQkFBaUJ4SixFQUFNa29CLEtBQUtsL0IsR0FBR3lnQixHQUNkekosRUFBTWtvQixLQUFLbC9CLEdBQUcwZ0IsR0FDZDFKLEVBQU1rb0IsS0FBS2wvQixHQUFHMmdCLEdBQ2QzSixFQUFNa29CLEtBQUtsL0IsR0FBRzRnQixLQUMvQzRXLEVBQU14Z0IsRUFBTWtvQixLQUFLbC9CLElBQ2I0WSxFQUFJOHRDLEVBQUU5dEMsRUFDVjRlLEVBQUkzZSxFQUFJNnRDLEVBQUU3dEMsRUFDVjJlLEVBQUk1WCxFQUFJOG1DLEVBQUU5bUMsRUFDVjRYLEVBQUl4WCxFQUFJMG1DLEVBQUUxbUMsRUFFVixNQUtaLE9BT0l3WCxJQUFLQSxFQUNMa3VCLG9CQUFxQixTQUFDMzRDLEdBQ2xCdkQsRUFBU0EsVUFBUyxFQUFBKzBDLEVBQUF0TyxzQ0FBcUNsakMsS0FFM0R5MkMsb0JBQXFCLFNBQUN6MkMsR0FDbEJ2RCxFQUFTQSxVQUFTLEVBQUErMEMsRUFBQXJPLHNDQUFxQ25qQyxLQUUzRHUyQyxvQkFBcUIsU0FBQ3YyQyxHQUNsQnZELEVBQVNBLFVBQVMsRUFBQSswQyxFQUFBcE8sc0NBQXFDcGpDLEtBRzNENjVDLGFBQWMsU0FBQ3BrRCxHQUN2Qm1HLFFBQVFwRixJQUFJLE9BQ0EsSUFBSyxJQUFJdkQsRUFBSSxFQUFHQSxFQUFJZ1gsRUFBTWtvQixLQUFLbjlCLE9BQVEvQixJQUVuQyxHQURoQjJJLFFBQVFwRixJQUFJLE9BQ1F5VCxFQUFNa29CLEtBQUtsL0IsR0FBR3dDLElBQU1BLEVBQ3BCLE9BQU8sRUFJZixPQUFPLEtBTU8sQ0FJeEJta0QscUJBRWFNLGdmQ3ZHZmpGLEVBQUFwaUQsRUFBQSx1Q0FFQSxJQUFNcWlELEdBQ0ZDLFdBQ0lDLFVBQVcsUUFFZitFLEtBQ0l6akMsTUFBTyxPQUNQNitCLFNBQVUsT0FDVkgsVUFBVyxPQUNYSSxXQUFZLFFBRWhCQyxRQUNJcUMsVUFBVyxNQUNYcGhDLE1BQU8sT0FDUEMsT0FBUSxPQUNSeStCLFVBQVcsU0FDWEcsU0FBVSxPQUNWQyxXQUFZLE9BQ1pFLE9BQVEsaUJBQ1JFLGFBQWMsTUFDZEQsZ0JBQWlCLGFBQ2pCeUUsV0FBWSxTQUlDQyxnckJBQXFCaEUsVUFBTUMsK0NBQ25DLElBQUFJLEVBQUE1d0MsS0FDTCxPQUNJaXhDLEVBQUFsTSxRQUFBM1AsY0FBQSxPQUNJelUsTUFBT3l1QixFQUFPQyxXQUVkNEIsRUFBQWxNLFFBQUEzUCxjQUFBLE9BQUt6VSxNQUFBN3hCLEtBQ0VzZ0QsRUFBT2lGLEtBQ1Z0QyxNQUFPLFVBRU4veEMsS0FBS3pNLE1BQU15b0MsTUFKaEIsTUFNQWlWLEVBQUFsTSxRQUFBM1AsY0FBQSxPQUNJelUsTUFBQTd4QixLQUNPc2dELEVBQU9PLFFBQ1ZvQyxNQUFPLFVBRVhiLFFBQVMsa0JBQU1OLEVBQUtyOUMsTUFBTWloRCx3QkFMOUIsUUFTQXZELEVBQUFsTSxRQUFBM1AsY0FBQSxPQUNJelUsTUFBQTd4QixLQUNPc2dELEVBQU9PLFFBQ1ZvQyxNQUFPLFFBQ1AwQyxZQUFhLFFBRWpCdkQsUUFBUyxrQkFBTU4sRUFBS3I5QyxNQUFNbWhELHFCQU45QixNQVVBekQsRUFBQWxNLFFBQUEzUCxjQUFBLE9BQ0l6VSxNQUFBN3hCLEtBQ09zZ0QsRUFBT08sUUFDVm9DLE1BQU8sUUFDUDBDLFlBQWEsUUFFakJ2RCxRQUFTLGtCQUFNTixFQUFLcjlDLE1BQU1vaEQscUJBTjlCLDBCQS9CS0osMlBDMUJyQnJDLEVBQUFubEQsRUFBQSxJQUVBNm5ELEVBQUE3bkQsRUFBQSx5Q0FFQWkrQyxFQUFBaitDLEVBQUEsS0FRQSxJQW9DTThuRCxHQUFrQixFQUFBM0MsRUFBQUcsU0FwQ0EsU0FBQ2x1QyxFQUFPNVEsR0FDNUIsT0FBQXpFLEtBQ09xVixJQUtnQixTQUFDeE4sRUFBVXBELEdBQ2xDLE9BQ0lvRCxhQUtXLFNBQUN3TixFQUFPeE4sRUFBVXBELEdBQ2pDLE9BT0l5b0MsTUFBTzczQixFQUFNNjNCLE1BQ2IyWSxpQkFBa0IsV0FDZGgrQyxFQUFTQSxVQUFTLEVBQUFxMEMsRUFBQXROLHFDQUV0QmdYLGlCQUFrQixXQUNkLzlDLEVBQVNBLFVBQVMsRUFBQXEwQyxFQUFBck4scUNBRXRCNlcsb0JBQXFCLFdBQ2pCNzlDLEVBQVNBLFVBQVMsRUFBQXEwQyxFQUFBcE4sMENBTU4sQ0FJdEIyVyxxQkFFYU0sbTVCQ3REZjFGLEVBQUFwaUQsRUFBQSx1Q0FFQSxJQUFNcWlELEdBQ0ZDLFdBQ0l5RixTQUFVLFdBQ1ZoRixhQUFjLE1BQ2RpRixVQUFXLGdCQUVmQyxPQUNJcGtDLE1BQU8sMEJBQ1BDLE9BQVEsT0FDUisrQixPQUFRLGlCQUNScUYsUUFBUyxXQUNUeEYsU0FBVSxPQUNWQyxXQUFZLE9BQ1prQyxNQUFPLE9BQ1A5QixhQUFjLGNBQ2RSLFVBQVcsT0FDWE8sZ0JBQWlCLFVBQ2pCeUUsV0FBWSxRQUdoQlksTUFDSXRrQyxNQUFPLDBCQUNQcWtDLFFBQVMsV0FDVG5GLGFBQWMsY0FDZHFGLFdBQVksaUJBQ1pDLFlBQWEsaUJBQ2JoRixhQUFjLGlCQUNkWCxTQUFVLE9BQ1ZILFVBQVcsT0FDWE8sZ0JBQWlCLFVBQ2pCeUUsV0FBWSxTQUlDZSxjQUNqQixTQUFBQSxFQUFZOWhELGdHQUFPd00sQ0FBQUMsS0FBQXExQyxHQUFBLElBQUFwMUMsbUtBQUFFLENBQUFILE1BQUFxMUMsRUFBQTUwQyxXQUFBNVMsT0FBQStZLGVBQUF5dUMsSUFBQS9uRCxLQUFBMFMsS0FDVHpNLElBRFMsT0FJZjBNLEVBQUtxMUMsV0FDRHZ2QyxFQUFHeFMsRUFBTXdTLEVBQ1RDLEVBQUd6UyxFQUFNeVMsR0FJbkIvRixFQUFLczFDLFVBQ0p4dkMsRUFBRyxFQUNIQyxFQUFHLEdBR0UvRixFQUFLa0UsT0FDRDRCLEVBQUc5RixFQUFLcTFDLFVBQVV2dkMsRUFDbEJDLEVBQUcvRixFQUFLcTFDLFVBQVV0dkMsR0FHdEIvRixFQUFLdTFDLFVBQVl2MUMsRUFBS3UxQyxVQUFVanhDLEtBQWZ0RSxHQUNqQkEsRUFBS3cxQyxRQUFZeDFDLEVBQUt3MUMsUUFBUWx4QyxLQUFidEUsR0FyQkZBLHFVQURjc3dDLFVBQU1DLGdFQXlCYnRyQyxHQUN0QmxGLEtBQUtzMUMsV0FDRHZ2QyxFQUFHYixFQUFVYSxFQUNiQyxFQUFHZCxFQUFVYyxxQ0FJWGpSLEdBQ05BLEVBQUUyZ0Qsa0JBQ0YzZ0QsRUFBRTRnRCxpQkFHRjNvQyxTQUFTNGxCLGlCQUFpQixZQUFhNXlCLEtBQUt3MUMsV0FBVyxHQUN2RHhvQyxTQUFTNGxCLGlCQUFpQixVQUFhNXlCLEtBQUt5MUMsU0FBUyxHQUdyRHoxQyxLQUFLdTFDLFNBQVN4dkMsRUFBSWhSLEVBQUU2Z0QsTUFDcEI1MUMsS0FBS3UxQyxTQUFTdnZDLEVBQUlqUixFQUFFOGdELHdDQUdkOWdELEdBQ05BLEVBQUUyZ0Qsa0JBQ0YzZ0QsRUFBRTRnRCxpQkFHRixJQUFNRyxFQUFRL2dELEVBQUU2Z0QsTUFDVkcsRUFBUWhoRCxFQUFFOGdELE1BR1o5dkMsRUFBSS9GLEtBQUtzMUMsVUFBVXZ2QyxHQUFLK3ZDLEVBQVE5MUMsS0FBS3UxQyxTQUFTeHZDLEdBQzlDQyxFQUFJaEcsS0FBS3MxQyxVQUFVdHZDLEdBQUsrdkMsRUFBUS8xQyxLQUFLdTFDLFNBQVN2dkMsR0FWekNnd0MsRUFhUWgyQyxLQUFLaTJDLFlBQVlsd0MsRUFBR0MsR0FiNUJrd0MsRUFBQXhyQixFQUFBc3JCLEVBQUEsR0FhRkcsRUFiRUQsRUFBQSxHQWFFRSxFQWJGRixFQUFBLEdBZ0JUbDJDLEtBQUsyRixVQUNESSxFQUFHb3dDLEVBQ0hud0MsRUFBR293QyxvQ0FJSHJoRCxHQUNKQSxFQUFFMmdELGtCQUNGM2dELEVBQUU0Z0QsaUJBR0Yzb0MsU0FBU3FwQyxvQkFBb0IsWUFBYXIyQyxLQUFLdzFDLFdBQy9DeG9DLFNBQVNxcEMsb0JBQW9CLFVBQWFyMkMsS0FBS3kxQyxTQUcvQ3oxQyxLQUFLek0sTUFBTStpRCxZQUNQM21ELEdBQUlxUSxLQUFLek0sTUFBTTVELEdBQ2ZvVyxFQUFJL0YsS0FBS21FLE1BQU00QixFQUNmQyxFQUFJaEcsS0FBS21FLE1BQU02Qix3Q0FJWEQsRUFBR0MsR0FDWCxJQUFNdXdDLEVBQVcxZ0QsT0FBTzJnRCxXQUNsQkMsRUFBVzVnRCxPQUFPNmdELFlBZ0J4QixPQWRJM3dDLEVBQUkvRixLQUFLek0sTUFBTXdaLEdBQUt3cEMsSUFDcEJ4d0MsRUFBSXd3QyxFQUFXdjJDLEtBQUt6TSxNQUFNd1osR0FFMUJoSCxHQUFLLElBQ0xBLEVBQUksR0FHSkMsRUFBSSxJQUFNeXdDLElBQ1Z6d0MsRUFBSXl3QyxFQUFXLElBRWZ6d0MsR0FBSyxJQUNMQSxFQUFJLElBR0FELEVBQUdDLG9DQUlOLElBQUE0cUMsRUFBQTV3QyxLQUNMLE9BQ0lpeEMsRUFBQWxNLFFBQUEzUCxjQUFBLE9BQ0l6VSxNQUFBN3hCLEtBQ09zZ0QsRUFBT0MsV0FDVjVRLEtBQVd6K0IsS0FBS21FLE1BQU00QixFQUF0QixLQUNBNHdDLElBQVczMkMsS0FBS21FLE1BQU02QixFQUF0QixLQUNBNEssTUFBVzVRLEtBQUt6TSxNQUFNd1osRUFBdEIsS0FDQThELE9BQVc3USxLQUFLek0sTUFBTTRaLEVBQXRCLE9BRUorakMsUUFBUyxTQUFDbjhDLEdBR04sT0FGQUEsRUFBRTJnRCxrQkFDRjNnRCxFQUFFNGdELGtCQUNLLElBR1gxRSxFQUFBbE0sUUFBQTNQLGNBQUEsT0FDSXpVLE1BQU95dUIsRUFBTzRGLE1BQ2Q0QixZQUFhLFNBQUM3aEQsR0FBRCxPQUFPNjdDLEVBQUtpRyxVQUFVOWhELEtBRWxDaUwsS0FBS3pNLE1BQU15aEQsT0FHaEIvRCxFQUFBbE0sUUFBQTNQLGNBQUEsT0FBS3pVLE1BQUE3eEIsS0FDRXNnRCxFQUFPOEYsTUFDVnJrQyxlQUFnQjdRLEtBQUt6TSxNQUFNNFosRUFBM0IsZUFFRW5OLEtBQUt6TSxNQUFNd04sOEJBcElaczBDLDJQQ3BDckJuRCxFQUFBbmxELEVBQUEsSUFFQStwRCxFQUFBL3BELEVBQUEseUNBRUF5K0MsRUFBQXorQyxFQUFBLEtBTUEsSUE4Qk1ncUQsR0FBYSxFQUFBN0UsRUFBQUcsU0E5QkssU0FBQ2x1QyxFQUFPNVEsR0FDNUIsT0FBQXpFLEtBQ09xVixJQUtnQixTQUFDeE4sRUFBVXBELEdBQ2xDLE9BQ0lvRCxhQUtXLFNBQUN3TixFQUFPeE4sRUFBVXBELEdBQ2pDLE9BQUF6RSxLQU1PeUUsR0FFSCtpRCxXQUFZLFNBQUNwOEMsR0FDVHZELEVBQVNBLFVBQVMsRUFBQTYwQyxFQUFBMU4sb0JBQW1CNWpDLFFBTTlCLENBSWpCbTdDLHFCQUVhMEIsNFVDOUNmNUgsRUFBQXBpRCxFQUFBLHVDQUVBby9DLEVBQUFwL0MsRUFBQSxJQUNBaXFELEVBQUFqcUQsRUFBQSxRQU1xQmtxRCxjQUNqQixTQUFBQSxFQUFZMWpELGdHQUFPd00sQ0FBQUMsS0FBQWkzQyxHQUFBLElBQUFoM0MsbUtBQUFFLENBQUFILE1BQUFpM0MsRUFBQXgyQyxXQUFBNVMsT0FBQStZLGVBQUFxd0MsSUFBQTNwRCxLQUFBMFMsS0FDVHpNLElBRFMsT0FHZjBNLEVBQUtpM0MsU0FBV2ozQyxFQUFLaTNDLFNBQVMzeUMsS0FBZHRFLEdBSERBLHFVQURzQnN3QyxVQUFNQywwREFRM0N4akMsU0FBU21xQyxlQUFrQm4zQyxLQUFLek0sTUFBTTVELEdBQXRDLGNBQXNEaWpDLGlCQUFpQixRQUFTNXlCLEtBQUtrM0MsVUFBVSxvQ0FHMUZuaUQsR0FXTCxPQVZBQSxFQUFFMmdELGtCQUNGM2dELEVBQUU0Z0QsaUJBRUYzMUMsS0FBS3pNLE1BQU02akQsWUFDUHpuRCxHQUFPcVEsS0FBS3pNLE1BQU01RCxHQUNsQmtJLEtBQU9tSSxLQUFLek0sTUFBTXNFLEtBQ2xCNnJCLE1BQU8xakIsS0FBS3pNLE1BQU1td0IsTUFDbEJDLEdBQU8zakIsS0FBS3pNLE1BQU1vd0IsTUFHZixtQ0FLUCxJQUFNa3dCLEVBQUlobkMsUUFBTTJCLGlCQUFpQnhPLEtBQUt6TSxNQUFNcWEsR0FDWDVOLEtBQUt6TSxNQUFNc2EsR0FDWDdOLEtBQUt6TSxNQUFNdWEsR0FDWDlOLEtBQUt6TSxNQUFNd2EsR0FDWDJDLFNBQU9DLGFBQWFDLE1BQ3BCRixTQUFPQyxhQUFhRSxRQUVyRCxPQUNJb2dDLEVBQUFsTSxRQUFBM1AsY0FBQSxTQUNJNmIsRUFBQWxNLFFBQUEzUCxjQUFBLFFBQ0l6bEMsR0FBT3FRLEtBQUt6TSxNQUFNNUQsR0FBbEIsYUFDQW9XLEVBQUc4dEMsRUFBRTl0QyxFQUNMQyxFQUFHNnRDLEVBQUU3dEMsRUFDTDRLLE1BQU9pakMsRUFBRTltQyxFQUNUOEQsT0FBUWdqQyxFQUFFMW1DLEVBQ1Z3VCxPQUNJL0gsS0FBTSxRQUNOeStCLFlBQWEsTUFJYkMsT0FBUSw4QkFoRFhMLDJQQ1RyQi9FLEVBQUFubEQsRUFBQSxJQUVBd3FELEVBQUF4cUQsRUFBQSx5Q0FFQTRnRCxFQUFBNWdELEVBQUEsSUFNQSxJQTZCTXlxRCxHQUFxQixFQUFBdEYsRUFBQUcsU0E3QkgsU0FBQ2x1QyxFQUFPNVEsR0FDNUIsT0FBQXpFLEtBQ09xVixJQUtnQixTQUFDeE4sRUFBVXBELEdBQ2xDLE9BQ0lvRCxhQUtXLFNBQUN3TixFQUFPeE4sRUFBVXBELEdBQ2pDLE9BQUF6RSxLQU1PeUUsR0FDSDZqRCxXQUFZLFNBQUNsOUMsR0FDVHZELEVBQVNBLFVBQVMsRUFBQWczQyxFQUFBL3BCLHlCQUF3QjFwQixRQU0zQixDQUl6Qis4QyxxQkFFYU8sNFVDN0NmckksRUFBQXBpRCxFQUFBLHVDQUVBby9DLEVBQUFwL0MsRUFBQSxJQUNBaXFELEVBQUFqcUQsRUFBQSxRQU1xQjBxRCxjQUNqQixTQUFBQSxFQUFZbGtELGdHQUFPd00sQ0FBQUMsS0FBQXkzQyxHQUFBLElBQUF4M0MsbUtBQUFFLENBQUFILE1BQUF5M0MsRUFBQWgzQyxXQUFBNVMsT0FBQStZLGVBQUE2d0MsSUFBQW5xRCxLQUFBMFMsS0FDVHpNLElBRFMsT0FHZjBNLEVBQUtpM0MsU0FBV2ozQyxFQUFLaTNDLFNBQVMzeUMsS0FBZHRFLEdBSERBLHFVQURxQnN3QyxVQUFNQywwREFRMUN4akMsU0FBU21xQyxlQUFrQm4zQyxLQUFLek0sTUFBTTVELEdBQXRDLGNBQXNEaWpDLGlCQUFpQixRQUFTNXlCLEtBQUtrM0MsVUFBVSxvQ0FHMUZuaUQsR0FXTCxPQVZBQSxFQUFFMmdELGtCQUNGM2dELEVBQUU0Z0QsaUJBRUYzMUMsS0FBS3pNLE1BQU02akQsWUFDUHpuRCxHQUFPcVEsS0FBS3pNLE1BQU01RCxHQUNsQmtJLEtBQU9tSSxLQUFLek0sTUFBTXNFLEtBQ2xCNnJCLE1BQU8xakIsS0FBS3pNLE1BQU1td0IsTUFDbEJDLEdBQU8zakIsS0FBS3pNLE1BQU1vd0IsTUFHZixtQ0FLUCxJQUFNa3dCLEVBQUlobkMsUUFBTTJCLGlCQUFpQnhPLEtBQUt6TSxNQUFNcWEsR0FDWDVOLEtBQUt6TSxNQUFNc2EsR0FDWDdOLEtBQUt6TSxNQUFNdWEsR0FDWDlOLEtBQUt6TSxNQUFNd2EsR0FDWDJDLFNBQU9DLGFBQWFDLE1BQ3BCRixTQUFPQyxhQUFhRSxRQUVyRCxPQUNJb2dDLEVBQUFsTSxRQUFBM1AsY0FBQSxTQUNJNmIsRUFBQWxNLFFBQUEzUCxjQUFBLFFBQ0l6bEMsR0FBT3FRLEtBQUt6TSxNQUFNNUQsR0FBbEIsYUFDQW9XLEVBQUc4dEMsRUFBRTl0QyxFQUNMQyxFQUFHNnRDLEVBQUU3dEMsRUFDTDRLLE1BQU9pakMsRUFBRTltQyxFQUNUOEQsT0FBUWdqQyxFQUFFMW1DLEVBQ1Z3VCxPQUNJL0gsS0FBTSxPQUNOeStCLFlBQWEsTUFJYkMsT0FBUSxVQU9oQnJHLEVBQUFsTSxRQUFBM1AsY0FBQSxRQUNJcnZCLEVBQUc4dEMsRUFBRTl0QyxFQUFJLEVBQ1RDLEVBQUc2dEMsRUFBRTd0QyxFQUFJLEdBQ1QyYSxPQUNJOHVCLFNBQVUsR0FDVjZILE9BQVEsT0FDUjErQixLQUFNLFFBQ055K0IsWUFBYSxRQUdoQnIzQyxLQUFLek0sTUFBTW93Qix3QkFqRVg4ekIsMlBDVHJCdkYsRUFBQW5sRCxFQUFBLElBRUEycUQsRUFBQTNxRCxFQUFBLHlDQUVBNGdELEVBQUE1Z0QsRUFBQSxJQU1BLElBNkJNNHFELEdBQW9CLEVBQUF6RixFQUFBRyxTQTdCRixTQUFDbHVDLEVBQU81USxHQUM1QixPQUFBekUsS0FDT3FWLElBS2dCLFNBQUN4TixFQUFVcEQsR0FDbEMsT0FDSW9ELGFBS1csU0FBQ3dOLEVBQU94TixFQUFVcEQsR0FDakMsT0FBQXpFLEtBTU95RSxHQUNINmpELFdBQVksU0FBQ2w5QyxHQUNUdkQsRUFBU0EsVUFBUyxFQUFBZzNDLEVBQUEvcEIseUJBQXdCMXBCLFFBTTVCLENBSXhCdTlDLHFCQUVhRSwrdUJDN0NmeEksRUFBQXBpRCxFQUFBLHVDQUVBaXFELEVBQUFqcUQsRUFBQSxRQU1xQjZxRCxjQUNqQixTQUFBQSxFQUFZcmtELGdHQUFPd00sQ0FBQUMsS0FBQTQzQyxHQUFBLElBQUEzM0MsbUtBQUFFLENBQUFILE1BQUE0M0MsRUFBQW4zQyxXQUFBNVMsT0FBQStZLGVBQUFneEMsSUFBQXRxRCxLQUFBMFMsS0FDVHpNLElBRFMsT0FJZjBNLEVBQUtxMUMsV0FDRHZ2QyxFQUFHeFMsRUFBTXdTLEVBQ1RDLEVBQUd6UyxFQUFNeVMsRUFDVCtHLEVBQUd4WixFQUFNd1osRUFDVEksRUFBRzVaLEVBQU00WixHQUlibE4sRUFBSzQzQyxjQUNEOXhDLEVBQUd4UyxFQUFNd1MsRUFBS3hTLEVBQU13WixFQUFJLEVBQ3hCL0csRUFBR3pTLEVBQU15UyxFQUFJelMsRUFBTTRaLEdBSTdCbE4sRUFBS3MxQyxVQUNKeHZDLEVBQUcsRUFDSEMsRUFBRyxHQUlFL0YsRUFBS2tFLE9BQ0Q0QixFQUFHOUYsRUFBSzQzQyxhQUFhOXhDLEVBQ3JCQyxFQUFHL0YsRUFBSzQzQyxhQUFhN3hDLEdBR3pCL0YsRUFBS3UxQyxVQUFZdjFDLEVBQUt1MUMsVUFBVWp4QyxLQUFmdEUsR0FDakJBLEVBQUt3MUMsUUFBWXgxQyxFQUFLdzFDLFFBQVFseEMsS0FBYnRFLEdBOUJGQSxxVUFEY3N3QyxVQUFNQyxnRUFrQ2J0ckMsR0FDUyxHQUEzQkEsRUFBVTR5QyxnQkFDVjkzQyxLQUFLczFDLFdBQ0R2dkMsRUFBR2IsRUFBVWEsRUFDYkMsRUFBR2QsRUFBVWMsRUFDYitHLEVBQUc3SCxFQUFVNkgsRUFDYkksRUFBR2pJLEVBQVVpSSxHQUdqQm5OLEtBQUs2M0MsY0FDRDl4QyxFQUFHYixFQUFVYSxFQUFLYixFQUFVNkgsRUFBSSxFQUNoQy9HLEVBQUdkLEVBQVVjLEVBQUlkLEVBQVVpSSxJQUluQ25OLEtBQUsyRixVQUNESSxFQUFHYixFQUFVYSxFQUFLYixFQUFVNkgsRUFBSSxFQUNoQy9HLEVBQUdkLEVBQVVjLEVBQUlkLEVBQVVpSSxzQ0FJekJwWSxHQUNOQSxFQUFFMmdELGtCQUNGM2dELEVBQUU0Z0QsaUJBR0Yzb0MsU0FBUzRsQixpQkFBaUIsWUFBYTV5QixLQUFLdzFDLFdBQVcsR0FDdkR4b0MsU0FBUzRsQixpQkFBaUIsVUFBYTV5QixLQUFLeTFDLFNBQVMsR0FHckR6b0MsU0FBUzRsQixpQkFBaUIsUUFBUzV5QixLQUFLKzNDLE9BQU8sR0FHckQvM0MsS0FBS3UxQyxTQUFTeHZDLEVBQWMsSUFBVmhSLEVBQUU2Z0QsTUFBYzUxQyxLQUFLek0sTUFBTXlvQyxNQUN2Q2g4QixLQUFLdTFDLFNBQVN2dkMsRUFBYyxJQUFWalIsRUFBRThnRCxNQUFjNzFDLEtBQUt6TSxNQUFNeW9DLE1BRzdDaDhCLEtBQUt6TSxNQUFNeWtELG9EQUdMampELEdBQ05BLEVBQUUyZ0Qsa0JBQ0YzZ0QsRUFBRTRnRCxpQkFJUixJQUFNSSxFQUFrQixJQUFWaGhELEVBQUU4Z0QsTUFBYzcxQyxLQUFLek0sTUFBTXlvQyxNQUkvQmoyQixFQUFJL0YsS0FBSzYzQyxhQUFhOXhDLEVBQ3RCQyxFQUFJaEcsS0FBSzYzQyxhQUFhN3hDLEdBQUsrdkMsRUFBUS8xQyxLQUFLdTFDLFNBQVN2dkMsR0FYNUNpeUMsRUFlQWo0QyxLQUFLazRDLGdCQUFnQm55QyxFQUFHQyxHQWZ4Qm15QyxFQUFBenRCLEVBQUF1dEIsRUFBQSxHQWVSbHlDLEVBZlFveUMsRUFBQSxHQWVMbnlDLEVBZktteUMsRUFBQSxPQUFBQyxFQWtCQXA0QyxLQUFLek0sTUFBTThrRCxTQUFTdHlDLEVBQUdDLEdBbEJ2QnN5QyxFQUFBNXRCLEVBQUEwdEIsRUFBQSxHQWtCUnJ5QyxFQWxCUXV5QyxFQUFBLEdBa0JMdHlDLEVBbEJLc3lDLEVBQUEsT0FBQUMsRUFxQk52NEMsS0FBS3pNLE1BQU1pbEQsV0FBV3p5QyxFQUFHQyxHQXJCbkJ5eUMsRUFBQS90QixFQUFBNnRCLEVBQUEsR0FxQmR4eUMsRUFyQmMweUMsRUFBQSxHQXFCWHp5QyxFQXJCV3l5QyxFQUFBLEdBd0JUejRDLEtBQUt6TSxNQUFNbWxELFdBQ1AxNEMsS0FBS3MxQyxVQUFVdnZDLEVBQ2YvRixLQUFLczFDLFVBQVV0dkMsRUFDZmhHLEtBQUtzMUMsVUFBVXZvQyxFQUNmL0csRUFBSWhHLEtBQUtzMUMsVUFBVXR2QyxtQ0FJbkJqUixHQUNKQSxFQUFFMmdELGtCQUNGM2dELEVBQUU0Z0QsaUJBR0Yzb0MsU0FBU3FwQyxvQkFBb0IsWUFBYXIyQyxLQUFLdzFDLFdBQy9DeG9DLFNBQVNxcEMsb0JBQW9CLFVBQWFyMkMsS0FBS3kxQyxTQVkvQyxPQUxBem9DLFNBQVM0bEIsaUJBQWlCLFFBSlAsU0FBZitsQixFQUFnQjVqRCxHQUNoQkEsRUFBRTJnRCxrQkFDRjFvQyxTQUFTcXBDLG9CQUFvQixRQUFTc0MsR0FBYyxLQUVQLEdBR2pEMzRDLEtBQUt6TSxNQUFNcWxELGlCQUVKLDBDQUdLN3lDLEVBQUdDLEdBQ2YsSUFBTStILEVBQUsvTixLQUFLczFDLFVBQVV0dkMsRUFNMUIsT0FKSUEsRUFBSStILEVBQUsyQyxTQUFPSSxLQUFLRCxTQUNyQjdLLEVBQUkrSCxFQUFLMkMsU0FBT0ksS0FBS0QsU0FHakI5SyxFQUFHQyxvQ0FHTixJQUFBNHFDLEVBQUE1d0MsS0FFQzY0QyxFQUE0QixJQUF2Qm5vQyxTQUFPSyxPQUFPSCxNQUFlNVEsS0FBS3pNLE1BQU15b0MsTUFDN0M4YyxFQUE0QixJQUF2QnBvQyxTQUFPSyxPQUFPRixPQUFlN1EsS0FBS3pNLE1BQU15b0MsTUFFbkQsT0FDSWlWLEVBQUFsTSxRQUFBM1AsY0FBQSxRQUNJcnZCLEVBQUcvRixLQUFLbUUsTUFBTTRCLEVBQUs4eUMsRUFBSyxFQUN4Qjd5QyxFQUFHaEcsS0FBS21FLE1BQU02QixFQUFLOHlDLEVBQUssRUFDeEJsb0MsTUFBT2lvQyxFQUNQaG9DLE9BQVFpb0MsRUFDUm40QixPQUNJL0gsS0FBTSxRQUdWczRCLFFBQVMsU0FBQ244QyxHQUNOQSxFQUFFMmdELGtCQUNGM2dELEVBQUU0Z0Qsa0JBRU5pQixZQUFhLFNBQUM3aEQsR0FBRCxPQUFPNjdDLEVBQUtpRyxVQUFVOWhELHlCQTVKOUI2aUQsMlBDUnJCMUYsRUFBQW5sRCxFQUFBLElBRUFnc0QsRUFBQWhzRCxFQUFBLHlDQUdBLElBMkJNaXNELEdBQWEsRUFBQTlHLEVBQUFHLFNBM0JLLFNBQUNsdUMsRUFBTzVRLEdBQzVCLE9BQUF6RSxLQUNPcVYsSUFLZ0IsU0FBQ3hOLEVBQVVwRCxHQUNsQyxPQUNJb0QsYUFLVyxTQUFDd04sRUFBT3hOLEVBQVVwRCxHQUNqQyxPQUFBekUsS0FNT3lFLEdBQ0h5b0MsTUFBTzczQixFQUFNNjNCLFNBS0YsQ0FJakI0YixxQkFFYW9CLCt1QkN0Q2Y3SixFQUFBcGlELEVBQUEsdUNBRUFpcUQsRUFBQWpxRCxFQUFBLFFBTXFCa3NELGNBQ2pCLFNBQUFBLEVBQVkxbEQsZ0dBQU93TSxDQUFBQyxLQUFBaTVDLEdBQUEsSUFBQWg1QyxtS0FBQUUsQ0FBQUgsTUFBQWk1QyxFQUFBeDRDLFdBQUE1UyxPQUFBK1ksZUFBQXF5QyxJQUFBM3JELEtBQUEwUyxLQUNUek0sSUFEUyxPQUlmME0sRUFBS3ExQyxXQUNEdnZDLEVBQUd4UyxFQUFNd1MsRUFDVEMsRUFBR3pTLEVBQU15UyxFQUNUK0csRUFBR3haLEVBQU13WixFQUNUSSxFQUFHNVosRUFBTTRaLEdBSWJsTixFQUFLNDNDLGNBQ0Q5eEMsRUFBR3hTLEVBQU13UyxFQUFJeFMsRUFBTXdaLEVBQ25CL0csRUFBR3pTLEVBQU15UyxFQUFLelMsRUFBTTRaLEVBQUksR0FJbENsTixFQUFLczFDLFVBQ0p4dkMsRUFBRyxFQUNIQyxFQUFHLEdBSUUvRixFQUFLa0UsT0FDRDRCLEVBQUc5RixFQUFLNDNDLGFBQWE5eEMsRUFDckJDLEVBQUcvRixFQUFLNDNDLGFBQWE3eEMsR0FHekIvRixFQUFLdTFDLFVBQVl2MUMsRUFBS3UxQyxVQUFVanhDLEtBQWZ0RSxHQUNqQkEsRUFBS3cxQyxRQUFZeDFDLEVBQUt3MUMsUUFBUWx4QyxLQUFidEUsR0E5QkZBLHFVQURjc3dDLFVBQU1DLGdFQWtDYnRyQyxHQUNTLEdBQTNCQSxFQUFVNHlDLGdCQUNWOTNDLEtBQUtzMUMsV0FDRHZ2QyxFQUFHYixFQUFVYSxFQUNiQyxFQUFHZCxFQUFVYyxFQUNiK0csRUFBRzdILEVBQVU2SCxFQUNiSSxFQUFHakksRUFBVWlJLEdBR2pCbk4sS0FBSzYzQyxjQUNEOXhDLEVBQUdiLEVBQVVhLEVBQUliLEVBQVU2SCxFQUMzQi9HLEVBQUdkLEVBQVVjLEVBQUtkLEVBQVVpSSxFQUFJLElBSXhDbk4sS0FBSzJGLFVBQ0RJLEVBQUdiLEVBQVVhLEVBQUliLEVBQVU2SCxFQUMzQi9HLEVBQUdkLEVBQVVjLEVBQUtkLEVBQVVpSSxFQUFJLHNDQUk5QnBZLEdBQ05BLEVBQUUyZ0Qsa0JBQ0YzZ0QsRUFBRTRnRCxpQkFHRjNvQyxTQUFTNGxCLGlCQUFpQixZQUFhNXlCLEtBQUt3MUMsV0FBVyxHQUN2RHhvQyxTQUFTNGxCLGlCQUFpQixVQUFhNXlCLEtBQUt5MUMsU0FBUyxHQUdyRHpvQyxTQUFTNGxCLGlCQUFpQixRQUFTNXlCLEtBQUsrM0MsT0FBTyxHQUdyRC8zQyxLQUFLdTFDLFNBQVN4dkMsRUFBYyxJQUFWaFIsRUFBRTZnRCxNQUFjNTFDLEtBQUt6TSxNQUFNeW9DLE1BQ3ZDaDhCLEtBQUt1MUMsU0FBU3Z2QyxFQUFjLElBQVZqUixFQUFFOGdELE1BQWM3MUMsS0FBS3pNLE1BQU15b0MsTUFHN0NoOEIsS0FBS3pNLE1BQU15a0Qsb0RBR0xqakQsR0FDTkEsRUFBRTJnRCxrQkFDRjNnRCxFQUFFNGdELGlCQUdSLElBQU1HLEVBQWtCLElBQVYvZ0QsRUFBRTZnRCxNQUFjNTFDLEtBQUt6TSxNQUFNeW9DLE1BSS9CajJCLEVBQUkvRixLQUFLNjNDLGFBQWE5eEMsR0FBSyt2QyxFQUFROTFDLEtBQUt1MUMsU0FBU3h2QyxHQUdqREMsRUFBSWhHLEtBQUs2M0MsYUFBYTd4QyxFQVpqQml5QyxFQWVBajRDLEtBQUtrNEMsZ0JBQWdCbnlDLEVBQUdDLEdBZnhCbXlDLEVBQUF6dEIsRUFBQXV0QixFQUFBLEdBZVJseUMsRUFmUW95QyxFQUFBLEdBZUxueUMsRUFmS215QyxFQUFBLE9BQUFDLEVBa0JBcDRDLEtBQUt6TSxNQUFNOGtELFNBQVN0eUMsRUFBR0MsR0FsQnZCc3lDLEVBQUE1dEIsRUFBQTB0QixFQUFBLEdBa0JScnlDLEVBbEJRdXlDLEVBQUEsR0FrQkx0eUMsRUFsQktzeUMsRUFBQSxPQUFBQyxFQXFCTnY0QyxLQUFLek0sTUFBTWlsRCxXQUFXenlDLEVBQUdDLEdBckJuQnl5QyxFQUFBL3RCLEVBQUE2dEIsRUFBQSxHQXFCZHh5QyxFQXJCYzB5QyxFQUFBLEdBcUJYenlDLEVBckJXeXlDLEVBQUEsR0F3QlR6NEMsS0FBS3pNLE1BQU1tbEQsV0FDUDE0QyxLQUFLczFDLFVBQVV2dkMsRUFDZi9GLEtBQUtzMUMsVUFBVXR2QyxFQUNmRCxFQUFJL0YsS0FBS3MxQyxVQUFVdnZDLEVBQ25CL0YsS0FBS3MxQyxVQUFVbm9DLG1DQUlmcFksR0FDSkEsRUFBRTJnRCxrQkFDRjNnRCxFQUFFNGdELGlCQUdGM29DLFNBQVNxcEMsb0JBQW9CLFlBQWFyMkMsS0FBS3cxQyxXQUMvQ3hvQyxTQUFTcXBDLG9CQUFvQixVQUFhcjJDLEtBQUt5MUMsU0FZL0MsT0FMQXpvQyxTQUFTNGxCLGlCQUFpQixRQUpQLFNBQWYrbEIsRUFBZ0I1akQsR0FDaEJBLEVBQUUyZ0Qsa0JBQ0Yxb0MsU0FBU3FwQyxvQkFBb0IsUUFBU3NDLEdBQWMsS0FFUCxHQUdqRDM0QyxLQUFLek0sTUFBTXFsRCxpQkFFSiwwQ0FHSzd5QyxFQUFHQyxHQUNmLElBQU04SCxFQUFLOU4sS0FBS3MxQyxVQUFVdnZDLEVBTTFCLE9BSklBLEVBQUkrSCxFQUFLNEMsU0FBT0ksS0FBS0YsUUFDckI3SyxFQUFJK0gsRUFBSzRDLFNBQU9JLEtBQUtGLFFBR2pCN0ssRUFBR0Msb0NBR04sSUFBQTRxQyxFQUFBNXdDLEtBRUM2NEMsRUFBNEIsSUFBdkJub0MsU0FBT0ssT0FBT0gsTUFBZTVRLEtBQUt6TSxNQUFNeW9DLE1BQzdDOGMsRUFBNEIsSUFBdkJwb0MsU0FBT0ssT0FBT0YsT0FBZTdRLEtBQUt6TSxNQUFNeW9DLE1BRW5ELE9BQ0lpVixFQUFBbE0sUUFBQTNQLGNBQUEsUUFDSXJ2QixFQUFHL0YsS0FBS21FLE1BQU00QixFQUFLOHlDLEVBQUssRUFDeEI3eUMsRUFBR2hHLEtBQUttRSxNQUFNNkIsRUFBSzh5QyxFQUFLLEVBQ3hCbG9DLE1BQU9pb0MsRUFDUGhvQyxPQUFRaW9DLEVBQ1JuNEIsT0FDSS9ILEtBQU0sUUFHVnM0QixRQUFTLFNBQUNuOEMsS0FHVjZoRCxZQUFhLFNBQUM3aEQsR0FBRCxPQUFPNjdDLEVBQUtpRyxVQUFVOWhELHlCQTNKOUJra0QsMlBDUnJCL0csRUFBQW5sRCxFQUFBLElBRUFtc0QsRUFBQW5zRCxFQUFBLHlDQUdBLElBMkJNb3NELEdBQWEsRUFBQWpILEVBQUFHLFNBM0JLLFNBQUNsdUMsRUFBTzVRLEdBQzVCLE9BQUF6RSxLQUNPcVYsSUFLZ0IsU0FBQ3hOLEVBQVVwRCxHQUNsQyxPQUNJb0QsYUFLVyxTQUFDd04sRUFBT3hOLEVBQVVwRCxHQUNqQyxPQUFBekUsS0FNT3lFLEdBQ0h5b0MsTUFBTzczQixFQUFNNjNCLFNBS0YsQ0FJakJpZCxxQkFFYUUsK3VCQ3RDZmhLLEVBQUFwaUQsRUFBQSx1Q0FFQWlxRCxFQUFBanFELEVBQUEsUUFNcUJxc0QsY0FDakIsU0FBQUEsRUFBWTdsRCxnR0FBT3dNLENBQUFDLEtBQUFvNUMsR0FBQSxJQUFBbjVDLG1LQUFBRSxDQUFBSCxNQUFBbzVDLEVBQUEzNEMsV0FBQTVTLE9BQUErWSxlQUFBd3lDLElBQUE5ckQsS0FBQTBTLEtBQ1R6TSxJQURTLE9BSWYwTSxFQUFLcTFDLFdBQ0R2dkMsRUFBR3hTLEVBQU13UyxFQUNUQyxFQUFHelMsRUFBTXlTLEVBQ1QrRyxFQUFHeFosRUFBTXdaLEVBQ1RJLEVBQUc1WixFQUFNNFosR0FJYmxOLEVBQUs0M0MsY0FDRDl4QyxFQUFHeFMsRUFBTXdTLEVBQ1RDLEVBQUd6UyxFQUFNeVMsRUFBS3pTLEVBQU00WixFQUFJLEdBSWxDbE4sRUFBS3MxQyxVQUNKeHZDLEVBQUcsRUFDSEMsRUFBRyxHQUlFL0YsRUFBS2tFLE9BQ0Q0QixFQUFHOUYsRUFBSzQzQyxhQUFhOXhDLEVBQ3JCQyxFQUFHL0YsRUFBSzQzQyxhQUFhN3hDLEdBR3pCL0YsRUFBS3UxQyxVQUFZdjFDLEVBQUt1MUMsVUFBVWp4QyxLQUFmdEUsR0FDakJBLEVBQUt3MUMsUUFBWXgxQyxFQUFLdzFDLFFBQVFseEMsS0FBYnRFLEdBOUJGQSxxVUFEY3N3QyxVQUFNQyxnRUFrQ2J0ckMsR0FDUyxHQUEzQkEsRUFBVTR5QyxnQkFDVjkzQyxLQUFLczFDLFdBQ0R2dkMsRUFBR2IsRUFBVWEsRUFDYkMsRUFBR2QsRUFBVWMsRUFDYitHLEVBQUc3SCxFQUFVNkgsRUFDYkksRUFBR2pJLEVBQVVpSSxHQUdqQm5OLEtBQUs2M0MsY0FDRDl4QyxFQUFHYixFQUFVYSxFQUNiQyxFQUFHZCxFQUFVYyxFQUFLZCxFQUFVaUksRUFBSSxJQUl4Q25OLEtBQUsyRixVQUNESSxFQUFHYixFQUFVYSxFQUNiQyxFQUFHZCxFQUFVYyxFQUFLZCxFQUFVaUksRUFBSSxzQ0FJOUJwWSxHQUNOQSxFQUFFMmdELGtCQUNGM2dELEVBQUU0Z0QsaUJBR0Yzb0MsU0FBUzRsQixpQkFBaUIsWUFBYTV5QixLQUFLdzFDLFdBQVcsR0FDdkR4b0MsU0FBUzRsQixpQkFBaUIsVUFBYTV5QixLQUFLeTFDLFNBQVMsR0FHckR6b0MsU0FBUzRsQixpQkFBaUIsUUFBUzV5QixLQUFLKzNDLE9BQU8sR0FHckQvM0MsS0FBS3UxQyxTQUFTeHZDLEVBQWMsSUFBVmhSLEVBQUU2Z0QsTUFBYzUxQyxLQUFLek0sTUFBTXlvQyxNQUN2Q2g4QixLQUFLdTFDLFNBQVN2dkMsRUFBYyxJQUFWalIsRUFBRThnRCxNQUFjNzFDLEtBQUt6TSxNQUFNeW9DLE1BRzdDaDhCLEtBQUt6TSxNQUFNeWtELG9EQUdMampELEdBQ05BLEVBQUUyZ0Qsa0JBQ0YzZ0QsRUFBRTRnRCxpQkFHUixJQUFNRyxFQUFrQixJQUFWL2dELEVBQUU2Z0QsTUFBYzUxQyxLQUFLek0sTUFBTXlvQyxNQUkvQmoyQixFQUFJL0YsS0FBSzYzQyxhQUFhOXhDLEdBQUsrdkMsRUFBUTkxQyxLQUFLdTFDLFNBQVN4dkMsR0FHakRDLEVBQUloRyxLQUFLNjNDLGFBQWE3eEMsRUFaakJpeUMsRUFlQWo0QyxLQUFLazRDLGdCQUFnQm55QyxFQUFHQyxHQWZ4Qm15QyxFQUFBenRCLEVBQUF1dEIsRUFBQSxHQWVSbHlDLEVBZlFveUMsRUFBQSxHQWVMbnlDLEVBZktteUMsRUFBQSxPQUFBQyxFQWtCQXA0QyxLQUFLek0sTUFBTThrRCxTQUFTdHlDLEVBQUdDLEdBbEJ2QnN5QyxFQUFBNXRCLEVBQUEwdEIsRUFBQSxHQWtCUnJ5QyxFQWxCUXV5QyxFQUFBLEdBa0JMdHlDLEVBbEJLc3lDLEVBQUEsT0FBQUMsRUFxQk52NEMsS0FBS3pNLE1BQU1pbEQsV0FBV3p5QyxFQUFHQyxHQXJCbkJ5eUMsRUFBQS90QixFQUFBNnRCLEVBQUEsR0FxQmR4eUMsRUFyQmMweUMsRUFBQSxHQXFCWHp5QyxFQXJCV3l5QyxFQUFBLEdBd0JUejRDLEtBQUt6TSxNQUFNbWxELFdBQ1AzeUMsRUFDQS9GLEtBQUtzMUMsVUFBVXR2QyxFQUNmaEcsS0FBS3MxQyxVQUFVdnZDLEVBQUlBLEVBQUkvRixLQUFLczFDLFVBQVV2b0MsRUFDdEMvTSxLQUFLczFDLFVBQVVub0MsbUNBSWZwWSxHQUNKQSxFQUFFMmdELGtCQUNGM2dELEVBQUU0Z0QsaUJBR0Yzb0MsU0FBU3FwQyxvQkFBb0IsWUFBYXIyQyxLQUFLdzFDLFdBQy9DeG9DLFNBQVNxcEMsb0JBQW9CLFVBQWFyMkMsS0FBS3kxQyxTQVkvQyxPQUxBem9DLFNBQVM0bEIsaUJBQWlCLFFBSlAsU0FBZitsQixFQUFnQjVqRCxHQUNoQkEsRUFBRTJnRCxrQkFDRjFvQyxTQUFTcXBDLG9CQUFvQixRQUFTc0MsR0FBYyxLQUVQLEdBR2pEMzRDLEtBQUt6TSxNQUFNcWxELGlCQUVKLDBDQUdLN3lDLEVBQUdDLEdBQ2YsSUFBTThILEVBQUs5TixLQUFLczFDLFVBQVV2dkMsRUFBSS9GLEtBQUtzMUMsVUFBVXZvQyxFQU03QyxPQUpJaEgsRUFBSStILEVBQUs0QyxTQUFPSSxLQUFLRixRQUNyQjdLLEVBQUkrSCxFQUFLNEMsU0FBT0ksS0FBS0YsUUFHakI3SyxFQUFHQyxvQ0FHTixJQUFBNHFDLEVBQUE1d0MsS0FFQzY0QyxFQUE0QixJQUF2Qm5vQyxTQUFPSyxPQUFPSCxNQUFlNVEsS0FBS3pNLE1BQU15b0MsTUFDN0M4YyxFQUE0QixJQUF2QnBvQyxTQUFPSyxPQUFPRixPQUFlN1EsS0FBS3pNLE1BQU15b0MsTUFFbkQsT0FDSWlWLEVBQUFsTSxRQUFBM1AsY0FBQSxRQUNJcnZCLEVBQUcvRixLQUFLbUUsTUFBTTRCLEVBQUs4eUMsRUFBSyxFQUN4Qjd5QyxFQUFHaEcsS0FBS21FLE1BQU02QixFQUFLOHlDLEVBQUssRUFDeEJsb0MsTUFBT2lvQyxFQUNQaG9DLE9BQVFpb0MsRUFDUm40QixPQUNJL0gsS0FBTSxRQUdWczRCLFFBQVMsU0FBQ244QyxLQUdWNmhELFlBQWEsU0FBQzdoRCxHQUFELE9BQU82N0MsRUFBS2lHLFVBQVU5aEQseUJBM0o5QnFrRCwyUENSckJsSCxFQUFBbmxELEVBQUEsSUFFQXNzRCxFQUFBdHNELEVBQUEseUNBR0EsSUEyQk11c0QsR0FBYSxFQUFBcEgsRUFBQUcsU0EzQkssU0FBQ2x1QyxFQUFPNVEsR0FDNUIsT0FBQXpFLEtBQ09xVixJQUtnQixTQUFDeE4sRUFBVXBELEdBQ2xDLE9BQ0lvRCxhQUtXLFNBQUN3TixFQUFPeE4sRUFBVXBELEdBQ2pDLE9BQUF6RSxLQU1PeUUsR0FDSHlvQyxNQUFPNzNCLEVBQU02M0IsU0FLRixDQUlqQm9kLHFCQUVhRSwrdUJDdENmbkssRUFBQXBpRCxFQUFBLHVDQUVBaXFELEVBQUFqcUQsRUFBQSxRQU1xQndzRCxjQUNqQixTQUFBQSxFQUFZaG1ELGdHQUFPd00sQ0FBQUMsS0FBQXU1QyxHQUFBLElBQUF0NUMsbUtBQUFFLENBQUFILE1BQUF1NUMsRUFBQTk0QyxXQUFBNVMsT0FBQStZLGVBQUEyeUMsSUFBQWpzRCxLQUFBMFMsS0FDVHpNLElBRFMsT0FJZjBNLEVBQUtxMUMsV0FDRHZ2QyxFQUFHeFMsRUFBTXdTLEVBQ1RDLEVBQUd6UyxFQUFNeVMsRUFDVCtHLEVBQUd4WixFQUFNd1osRUFDVEksRUFBRzVaLEVBQU00WixHQUlibE4sRUFBSzQzQyxjQUNEOXhDLEVBQUd4UyxFQUFNd1MsRUFBS3hTLEVBQU13WixFQUFJLEVBQ3hCL0csRUFBR3pTLEVBQU15UyxHQUluQi9GLEVBQUtzMUMsVUFDSnh2QyxFQUFHLEVBQ0hDLEVBQUcsR0FJRS9GLEVBQUtrRSxPQUNENEIsRUFBRzlGLEVBQUs0M0MsYUFBYTl4QyxFQUNyQkMsRUFBRy9GLEVBQUs0M0MsYUFBYTd4QyxHQUd6Qi9GLEVBQUt1MUMsVUFBWXYxQyxFQUFLdTFDLFVBQVVqeEMsS0FBZnRFLEdBQ2pCQSxFQUFLdzFDLFFBQVl4MUMsRUFBS3cxQyxRQUFRbHhDLEtBQWJ0RSxHQTlCRkEscVVBRGNzd0MsVUFBTUMsZ0VBa0NidHJDLEdBQ1MsR0FBM0JBLEVBQVU0eUMsZ0JBQ1Y5M0MsS0FBS3MxQyxXQUNEdnZDLEVBQUdiLEVBQVVhLEVBQ2JDLEVBQUdkLEVBQVVjLEVBQ2IrRyxFQUFHN0gsRUFBVTZILEVBQ2JJLEVBQUdqSSxFQUFVaUksR0FHakJuTixLQUFLNjNDLGNBQ0Q5eEMsRUFBR2IsRUFBVWEsRUFBS2IsRUFBVTZILEVBQUksRUFDaEMvRyxFQUFHZCxFQUFVYyxJQUlyQmhHLEtBQUsyRixVQUNESSxFQUFHYixFQUFVYSxFQUFLYixFQUFVNkgsRUFBSSxFQUNoQy9HLEVBQUdkLEVBQVVjLHNDQUlYalIsR0FDTkEsRUFBRTJnRCxrQkFDRjNnRCxFQUFFNGdELGlCQUdGM29DLFNBQVM0bEIsaUJBQWlCLFlBQWE1eUIsS0FBS3cxQyxXQUFXLEdBQ3ZEeG9DLFNBQVM0bEIsaUJBQWlCLFVBQWE1eUIsS0FBS3kxQyxTQUFTLEdBR3JEem9DLFNBQVM0bEIsaUJBQWlCLFFBQVM1eUIsS0FBSyszQyxPQUFPLEdBR3JELzNDLEtBQUt1MUMsU0FBU3h2QyxFQUFjLElBQVZoUixFQUFFNmdELE1BQWM1MUMsS0FBS3pNLE1BQU15b0MsTUFDdkNoOEIsS0FBS3UxQyxTQUFTdnZDLEVBQWMsSUFBVmpSLEVBQUU4Z0QsTUFBYzcxQyxLQUFLek0sTUFBTXlvQyxNQUc3Q2g4QixLQUFLek0sTUFBTXlrRCxvREFHTGpqRCxHQUNOQSxFQUFFMmdELGtCQUNGM2dELEVBQUU0Z0QsaUJBSVIsSUFBTUksRUFBa0IsSUFBVmhoRCxFQUFFOGdELE1BQWM3MUMsS0FBS3pNLE1BQU15b0MsTUFJL0JqMkIsRUFBSS9GLEtBQUs2M0MsYUFBYTl4QyxFQUN0QkMsRUFBSWhHLEtBQUs2M0MsYUFBYTd4QyxHQUFLK3ZDLEVBQVEvMUMsS0FBS3UxQyxTQUFTdnZDLEdBWDVDaXlDLEVBZUFqNEMsS0FBS2s0QyxnQkFBZ0JueUMsRUFBR0MsR0FmeEJteUMsRUFBQXp0QixFQUFBdXRCLEVBQUEsR0FlUmx5QyxFQWZRb3lDLEVBQUEsR0FlTG55QyxFQWZLbXlDLEVBQUEsT0FBQUMsRUFrQkFwNEMsS0FBS3pNLE1BQU04a0QsU0FBU3R5QyxFQUFHQyxHQWxCdkJzeUMsRUFBQTV0QixFQUFBMHRCLEVBQUEsR0FrQlJyeUMsRUFsQlF1eUMsRUFBQSxHQWtCTHR5QyxFQWxCS3N5QyxFQUFBLE9BQUFDLEVBcUJOdjRDLEtBQUt6TSxNQUFNaWxELFdBQVd6eUMsRUFBR0MsR0FyQm5CeXlDLEVBQUEvdEIsRUFBQTZ0QixFQUFBLEdBcUJkeHlDLEVBckJjMHlDLEVBQUEsR0FxQlh6eUMsRUFyQld5eUMsRUFBQSxHQXdCVHo0QyxLQUFLek0sTUFBTW1sRCxXQUNQMTRDLEtBQUtzMUMsVUFBVXZ2QyxFQUNmQyxFQUNBaEcsS0FBS3MxQyxVQUFVdm9DLEVBQ2YvTSxLQUFLczFDLFVBQVV0dkMsRUFBSUEsRUFBSWhHLEtBQUtzMUMsVUFBVW5vQyxtQ0FJdENwWSxHQUNKQSxFQUFFMmdELGtCQUNGM2dELEVBQUU0Z0QsaUJBR0Yzb0MsU0FBU3FwQyxvQkFBb0IsWUFBYXIyQyxLQUFLdzFDLFdBQy9DeG9DLFNBQVNxcEMsb0JBQW9CLFVBQWFyMkMsS0FBS3kxQyxTQVkvQyxPQUxBem9DLFNBQVM0bEIsaUJBQWlCLFFBSlAsU0FBZitsQixFQUFnQjVqRCxHQUNoQkEsRUFBRTJnRCxrQkFDRjFvQyxTQUFTcXBDLG9CQUFvQixRQUFTc0MsR0FBYyxLQUVQLEdBR2pEMzRDLEtBQUt6TSxNQUFNcWxELGlCQUVKLDBDQUdLN3lDLEVBQUdDLEdBQ2YsSUFBTStILEVBQUsvTixLQUFLczFDLFVBQVV0dkMsRUFBSWhHLEtBQUtzMUMsVUFBVW5vQyxFQU03QyxPQUpJbkgsRUFBSStILEVBQUsyQyxTQUFPSSxLQUFLRCxTQUNyQjdLLEVBQUkrSCxFQUFLMkMsU0FBT0ksS0FBS0QsU0FHakI5SyxFQUFHQyxvQ0FHTixJQUFBNHFDLEVBQUE1d0MsS0FFQzY0QyxFQUE0QixJQUF2Qm5vQyxTQUFPSyxPQUFPSCxNQUFlNVEsS0FBS3pNLE1BQU15b0MsTUFDN0M4YyxFQUE0QixJQUF2QnBvQyxTQUFPSyxPQUFPRixPQUFlN1EsS0FBS3pNLE1BQU15b0MsTUFFbkQsT0FDSWlWLEVBQUFsTSxRQUFBM1AsY0FBQSxRQUNJcnZCLEVBQUcvRixLQUFLbUUsTUFBTTRCLEVBQUs4eUMsRUFBSyxFQUN4Qjd5QyxFQUFHaEcsS0FBS21FLE1BQU02QixFQUFLOHlDLEVBQUssRUFDeEJsb0MsTUFBT2lvQyxFQUNQaG9DLE9BQVFpb0MsRUFDUm40QixPQUNJL0gsS0FBTSxRQUdWczRCLFFBQVMsU0FBQ244QyxHQUNOQSxFQUFFMmdELGtCQUNGM2dELEVBQUU0Z0Qsa0JBRU5pQixZQUFhLFNBQUM3aEQsR0FBRCxPQUFPNjdDLEVBQUtpRyxVQUFVOWhELHlCQTVKOUJ3a0QsMlBDUnJCckgsRUFBQW5sRCxFQUFBLElBRUF5c0QsRUFBQXpzRCxFQUFBLHlDQUdBLElBMkJNMHNELEdBQWEsRUFBQXZILEVBQUFHLFNBM0JLLFNBQUNsdUMsRUFBTzVRLEdBQzVCLE9BQUF6RSxLQUNPcVYsSUFLZ0IsU0FBQ3hOLEVBQVVwRCxHQUNsQyxPQUNJb0QsYUFLVyxTQUFDd04sRUFBT3hOLEVBQVVwRCxHQUNqQyxPQUFBekUsS0FNT3lFLEdBQ0h5b0MsTUFBTzczQixFQUFNNjNCLFNBS0YsQ0FJakJ1ZCxxQkFFYUUsaXZCQ3RDZjFzRCxFQUFBLFFBRUFBLEVBQUEsVUFDQUEsRUFBQSxVQUNBQSxFQUFBLFVBQ0FBLEVBQUEsTUFFQWlxRCxFQUFBanFELEVBQUEsSUFDQW8vQyxFQUFBcC9DLEVBQUEsMkRBTXFCMnNELGNBQ2pCLFNBQUFBLEVBQVlubUQsZ0dBQU93TSxDQUFBQyxLQUFBMDVDLEdBQUEsSUFBQXo1QyxtS0FBQUUsQ0FBQUgsTUFBQTA1QyxFQUFBajVDLFdBQUE1UyxPQUFBK1ksZUFBQTh5QyxJQUFBcHNELEtBQUEwUyxLQUNUek0sSUFHQXd0QyxFQUFJbDBCLFFBQU1zQixXQUFXNWEsRUFBTXFhLEdBQ05yYSxFQUFNc2EsR0FDTnRhLEVBQU11YSxHQUNOdmEsRUFBTXdhLEdBQ04yQyxTQUFPQyxhQUFhQyxNQUNwQkYsU0FBT0MsYUFBYUUsUUFDL0M1USxFQUFLcTFDLFdBQ0R2dkMsRUFBR2c3QixFQUFFbnpCLEdBQ0w1SCxFQUFHKzZCLEVBQUVsekIsSUFJZjVOLEVBQUtzMUMsVUFDSnh2QyxFQUFHLEVBQ0hDLEVBQUcsR0FJRSxJQUFNNnRDLEVBQUlobkMsUUFBTTJCLGlCQUFpQmpiLEVBQU1xYSxHQUNOcmEsRUFBTXNhLEdBQ050YSxFQUFNdWEsR0FDTnZhLEVBQU13YSxHQUNOMkMsU0FBT0MsYUFBYUMsTUFDcEJGLFNBQU9DLGFBQWFFLFFBM0J0QyxPQTRCZjVRLEVBQUtrRSxPQUNENEIsRUFBRzh0QyxFQUFFOXRDLEVBQ0xDLEVBQUc2dEMsRUFBRTd0QyxFQUNMK0csRUFBRzhtQyxFQUFFOW1DLEVBQ0xJLEVBQUcwbUMsRUFBRTFtQyxFQUNMd3NDLGdCQUFnQixHQUdwQjE1QyxFQUFLdTFDLFVBQVl2MUMsRUFBS3UxQyxVQUFVanhDLEtBQWZ0RSxHQUNqQkEsRUFBS3cxQyxRQUFZeDFDLEVBQUt3MUMsUUFBUWx4QyxLQUFidEUsR0FDakJBLEVBQUsyNUMsVUFBWTM1QyxFQUFLMjVDLFVBQVVyMUMsS0FBZnRFLEdBR2pCQSxFQUFLNDVDLG9CQXpDVTU1QyxxVUFEb0Jzd0MsVUFBTUMsZ0VBNkNuQnRyQyxHQUN0QixJQUFNbUosRUFBT3hCLFFBQU0yQixpQkFBaUJ0SixFQUFVMEksR0FDVjFJLEVBQVUySSxHQUNWM0ksRUFBVTRJLEdBQ1Y1SSxFQUFVNkksR0FDVjJDLFNBQU9DLGFBQWFDLE1BQ3BCRixTQUFPQyxhQUFhRSxRQUV4RDdRLEtBQUtzMUMsV0FDRHZ2QyxFQUFHc0ksRUFBS3RJLEVBQ1JDLEVBQUdxSSxFQUFLckksR0FHWmhHLEtBQUsyRixVQUNESSxFQUFHc0ksRUFBS3RJLEVBQ1JDLEVBQUdxSSxFQUFLckksRUFDUitHLEVBQUdzQixFQUFLdEIsRUFDUkksRUFBR2tCLEVBQUtsQixFQUNSd3NDLGdCQUFnQixtREFLcEIzNUMsS0FBSzg1QyxtRUFLTDlzQyxTQUFTbXFDLGVBQWUsV0FBV3ZrQixpQkFBaUIsUUFBUzV5QixLQUFLNDVDLFdBQVcsa0RBSTdFNXNDLFNBQVNtcUMsZUFBZSxXQUFXZCxvQkFBb0IsUUFBU3IyQyxLQUFLNDVDLDZDQUcvRDdrRCxHQVNOLE9BUkFBLEVBQUUyZ0Qsa0JBQ0YzZ0QsRUFBRTRnRCxpQkFHRjMxQyxLQUFLODVDLHVCQUVMOTVDLEtBQUt6TSxNQUFNd21ELGVBRUosb0NBR0RobEQsR0FDTkEsRUFBRTJnRCxrQkFDRjNnRCxFQUFFNGdELGlCQUdGMzFDLEtBQUs4NUMsdUJBR0w5c0MsU0FBUzRsQixpQkFBaUIsWUFBYTV5QixLQUFLdzFDLFdBQVcsR0FDdkR4b0MsU0FBUzRsQixpQkFBaUIsVUFBYTV5QixLQUFLeTFDLFNBQVMsR0FHM0R6MUMsS0FBS3UxQyxTQUFTeHZDLEVBQWMsSUFBVmhSLEVBQUU2Z0QsTUFBYzUxQyxLQUFLek0sTUFBTXlvQyxNQUM3Q2g4QixLQUFLdTFDLFNBQVN2dkMsRUFBYyxJQUFWalIsRUFBRThnRCxNQUFjNzFDLEtBQUt6TSxNQUFNeW9DLHdDQUdqQ2puQyxHQUNOQSxFQUFFMmdELGtCQUNGM2dELEVBQUU0Z0QsaUJBR1IsSUFBTUcsRUFBa0IsSUFBVi9nRCxFQUFFNmdELE1BQWM1MUMsS0FBS3pNLE1BQU15b0MsTUFDbkMrWixFQUFrQixJQUFWaGhELEVBQUU4Z0QsTUFBYzcxQyxLQUFLek0sTUFBTXlvQyxNQUdyQ2oyQixFQUFJL0YsS0FBS3MxQyxVQUFVdnZDLEdBQUsrdkMsRUFBUTkxQyxLQUFLdTFDLFNBQVN4dkMsR0FDeENDLEVBQUloRyxLQUFLczFDLFVBQVV0dkMsR0FBSyt2QyxFQUFRLzFDLEtBQUt1MUMsU0FBU3Z2QyxHQVZ6Q2cwQyxFQWFBaDZDLEtBQUtxNEMsU0FBU3R5QyxFQUFHQyxHQWJqQmkwQyxFQUFBdnZCLEVBQUFzdkIsRUFBQSxHQWFSajBDLEVBYlFrMEMsRUFBQSxHQWFMajBDLEVBYktpMEMsRUFBQSxPQUFBakUsRUFnQk5oMkMsS0FBS2kyQyxZQUFZbHdDLEVBQUdDLEVBQUdoRyxLQUFLbUUsTUFBTTRJLEVBQUcvTSxLQUFLbUUsTUFBTWdKLEdBaEIxQytvQyxFQUFBeHJCLEVBQUFzckIsRUFBQSxHQWdCZGp3QyxFQWhCY213QyxFQUFBLEdBZ0JYbHdDLEVBaEJXa3dDLEVBQUEsR0FtQlRsMkMsS0FBSzJGLFVBQ0RJLEVBQUdBLEVBQ0hDLEVBQUdBLEVBQ0gyekMsZ0JBQWdCLG9DQUloQjVrRCxHQUNKQSxFQUFFMmdELGtCQUNGM2dELEVBQUU0Z0QsaUJBR0Yzb0MsU0FBU3FwQyxvQkFBb0IsWUFBYXIyQyxLQUFLdzFDLFdBQy9DeG9DLFNBQVNxcEMsb0JBQW9CLFVBQWFyMkMsS0FBS3kxQyxTQU8vQ3pvQyxTQUFTNGxCLGlCQUFpQixRQUpQLFNBQWYrbEIsRUFBZ0I1akQsR0FDaEJBLEVBQUUyZ0Qsa0JBQ0Yxb0MsU0FBU3FwQyxvQkFBb0IsUUFBU3NDLEdBQWMsS0FFUCxHQUdqRDM0QyxLQUFLNjVDLG9CQUdMLElBQU1oRyxFQUFJaG5DLFFBQU00QixpQkFBaUJ6TyxLQUFLbUUsTUFBTTRCLEVBQ1gvRixLQUFLbUUsTUFBTTZCLEVBQ1hoRyxLQUFLbUUsTUFBTTRJLEVBQ1gvTSxLQUFLbUUsTUFBTWdKLEVBQ1h1RCxTQUFPQyxhQUFhQyxNQUNwQkYsU0FBT0MsYUFBYUUsUUFDckQ3USxLQUFLek0sTUFBTStpRCxZQUNQM21ELEdBQUlxUSxLQUFLek0sTUFBTTVELEdBQ2ZpZSxHQUFJaW1DLEVBQUVqbUMsR0FDTkMsR0FBSWdtQyxFQUFFaG1DLEdBQ05DLEdBQUkrbEMsRUFBRS9sQyxHQUNOQyxHQUFJOGxDLEVBQUU5bEMsc0NBT0xoSSxFQUFHQyxHQUVSLElBQUlrMEMsRUFBT3J0QyxRQUFNUSxRQUFRdEgsRUFBRzJLLFNBQU9DLGFBQWFDLE9BQzVDdXBDLEVBQU90dEMsUUFBTVUsUUFBUXZILEVBQUcwSyxTQUFPQyxhQUFhRSxRQUc1Q3VwQyxTQUFPQyxTQUFLQyxTQUFNQyxTQUVULElBRGJILEVBQVFGLEVBQU94cEMsU0FBT0ksS0FBS0YsU0FNdkIwcEMsR0FEQUQsRUFBTXY4QyxLQUFLaVUsTUFBTW1vQyxFQUFPeHBDLFNBQU9JLEtBQUtGLFFBQ3ZCRixTQUFPSSxLQUFLRixNQUV6QjJwQyxHQUFRRixFQUFNLEdBQUszcEMsU0FBT0ksS0FBS0YsTUFJM0JzcEMsRUFEQUUsR0FBVTFwQyxTQUFPSSxLQUFLRixNQUFRLEVBQ3ZCMnBDLEVBRUFELEdBS2YsSUFBSUUsU0FBTUMsU0F1QlYsT0FyQmEsSUFEYkwsRUFBUUQsRUFBT3pwQyxTQUFPSSxLQUFLRCxVQU12QjJwQyxHQURBSCxFQUFNdjhDLEtBQUtpVSxNQUFNb29DLEVBQU96cEMsU0FBT0ksS0FBS0QsU0FDdkJILFNBQU9JLEtBQUtELE9BRXpCNHBDLEdBQVFKLEVBQU0sR0FBSzNwQyxTQUFPSSxLQUFLRCxPQUkzQnNwQyxFQURBQyxHQUFVMXBDLFNBQU9JLEtBQUtELE9BQVMsRUFDeEI0cEMsRUFFQUQsSUFLZnowQyxFQUFJOEcsUUFBTVksUUFBUXlzQyxFQUFNeHBDLFNBQU9DLGFBQWFDLE9BQzVDNUssRUFBSTZHLFFBQU1hLFFBQVF5c0MsRUFBTXpwQyxTQUFPQyxhQUFhRSw2Q0FRdkM5SyxFQUFHQyxFQUFHK0csRUFBR0ksR0FFZCxJQUdTdXRDLEVBQVNDLEVBSFp0c0MsRUFBT3hCLFFBQU11QixXQUFXckksRUFBR0MsRUFBRytHLEVBQUdJLEVBQUd1RCxTQUFPQyxhQUFhQyxNQUFPRixTQUFPQyxhQUFhRSxRQUdyRndwQyxTQUNKQSxFQUFNdjhDLEtBQUtpVSxNQUFNckIsU0FBT0MsYUFBYUMsTUFBUUYsU0FBT0ksS0FBS0YsT0FDekQ4cEMsRUFBVWhxQyxTQUFPSSxLQUFLRixNQUFReXBDLEVBRTlCQSxFQUFNdjhDLEtBQUtpVSxNQUFNckIsU0FBT0MsYUFBYUUsT0FBU0gsU0FBT0ksS0FBS0QsUUFDMUQ4cEMsRUFBVWpxQyxTQUFPSSxLQUFLRCxPQUFTd3BDLEVBRWpDaHNDLEVBQUt0SSxHQUFLLEVBQ2JzSSxFQUFLdEksRUFBSSxFQUNDc0ksRUFBS3RJLEVBQUlnSCxHQUFLMnRDLElBQ3hCcnNDLEVBQUt0SSxFQUFJMjBDLEVBQVVyc0MsRUFBS3RCLEdBR3JCc0IsRUFBS3JJLEdBQUssRUFDYnFJLEVBQUtySSxFQUFJLEVBQ0NxSSxFQUFLckksRUFBSW1ILEdBQUt3dEMsSUFDeEJ0c0MsRUFBS3JJLEVBQUkyMEMsRUFBVXRzQyxFQUFLbEIsR0FJbkIsSUFBTTBtQyxFQUFJaG5DLFFBQU15QixXQUFXRCxFQUFLdEksRUFBR3NJLEVBQUtySSxFQUFHcUksRUFBS3RCLEVBQUdzQixFQUFLbEIsRUFBR3VELFNBQU9DLGFBQWFDLE1BQU9GLFNBQU9DLGFBQWFFLFFBRTFHLE9BQVFnakMsRUFBRTl0QyxFQUFHOHRDLEVBQUU3dEMsc0NBSVJELEVBQUdDLEdBRVYsSUFJUzAwQyxFQUFTQyxFQUpkQyxFQUFLL3RDLFFBQU1RLFFBQVF0SCxFQUFHMkssU0FBT0MsYUFBYUMsT0FDMUNpcUMsRUFBS2h1QyxRQUFNVSxRQUFRdkgsRUFBRzBLLFNBQU9DLGFBQWFFLFFBRzFDd3BDLFNBdUJKLE9BdEJBQSxFQUFNdjhDLEtBQUtpVSxNQUFNckIsU0FBT0MsYUFBYUMsTUFBUUYsU0FBT0ksS0FBS0YsT0FDekQ4cEMsRUFBVWhxQyxTQUFPSSxLQUFLRixNQUFReXBDLEVBRTlCQSxFQUFNdjhDLEtBQUtpVSxNQUFNckIsU0FBT0MsYUFBYUUsT0FBU0gsU0FBT0ksS0FBS0QsUUFDMUQ4cEMsRUFBVWpxQyxTQUFPSSxLQUFLRCxPQUFTd3BDLEVBRWpDTyxHQUFNLEVBQ1RBLEVBQUssRUFDS0EsR0FBTUYsSUFDaEJFLEVBQUtGLEdBR0ZHLEdBQU0sRUFDVEEsRUFBSyxFQUNLQSxHQUFNRixJQUNoQkUsRUFBS0YsSUFJQTUwQyxFQUFJOEcsUUFBTVksUUFBUW10QyxFQUFJbHFDLFNBQU9DLGFBQWFDLE9BQzFDNUssRUFBSTZHLFFBQU1hLFFBQVFtdEMsRUFBSW5xQyxTQUFPQyxhQUFhRSxtREFRMUM3USxLQUFLODVDLDBEQUlFL3pDLEVBQUdDLEVBQUcrRyxFQUFHSSxHQUNoQm5OLEtBQUsyRixVQUNESSxFQUFHQSxFQUNIQyxFQUFHQSxFQUNIK0csRUFBR0EsRUFDSEksRUFBR0EsRUFDSHdzQyxnQkFBZ0IsNENBT3BCMzVDLEtBQUs2NUMsb0JBR0wsSUFBTWhHLEVBQUlobkMsUUFBTTRCLGlCQUFpQnpPLEtBQUttRSxNQUFNNEIsRUFDeEMvRixLQUFLbUUsTUFBTTZCLEVBQ1hoRyxLQUFLbUUsTUFBTTRJLEVBQ1gvTSxLQUFLbUUsTUFBTWdKLEVBQ1h1RCxTQUFPQyxhQUFhQyxNQUNwQkYsU0FBT0MsYUFBYUUsUUFFeEI3USxLQUFLMkYsVUFDRGcwQyxnQkFBZ0IsSUFHcEIzNUMsS0FBS3pNLE1BQU11bkQsa0JBQ1BuckQsR0FBSXFRLEtBQUt6TSxNQUFNNUQsR0FDZmllLEdBQUlpbUMsRUFBRWptQyxHQUNOQyxHQUFJZ21DLEVBQUVobUMsR0FDTkMsR0FBSStsQyxFQUFFL2xDLEdBQ05DLEdBQUk4bEMsRUFBRTlsQyxzQ0FJTCxJQUFBNmlDLEVBQUE1d0MsS0FDTCxPQUNJaXhDLEVBQUFsTSxRQUFBM1AsY0FBQSxTQUNJNmIsRUFBQWxNLFFBQUEzUCxjQUFBLFFBQ0l6bEMsR0FBT3FRLEtBQUt6TSxNQUFNNUQsR0FBbEIsYUFDQW9XLEVBQUcvRixLQUFLbUUsTUFBTTRCLEVBQ2RDLEVBQUdoRyxLQUFLbUUsTUFBTTZCLEVBQ2Q0SyxNQUFPNVEsS0FBS21FLE1BQU00SSxFQUNsQjhELE9BQVE3USxLQUFLbUUsTUFBTWdKLEVBQ25Cd1QsT0FDSS9ILEtBQU0sT0FDTnkrQixZQUFhLE1BRWJDLE9BQVEsT0FDUnlELFlBQWEsSUFBVS82QyxLQUFLek0sTUFBTXlvQyxPQUd0Q2tWLFFBQVMsU0FBQ244QyxHQUNOQSxFQUFFMmdELGtCQUNGM2dELEVBQUU0Z0Qsa0JBRU5pQixZQUFhLFNBQUM3aEQsR0FBRCxPQUFPNjdDLEVBQUtpRyxVQUFVOWhELE1BSXZDazhDLEVBQUFsTSxRQUFBM1AsY0FBQSxRQUNJcnZCLEVBQUcvRixLQUFLbUUsTUFBTTRCLEVBQUksRUFDbEJDLEVBQUdoRyxLQUFLbUUsTUFBTTZCLEVBQUksR0FDbEIyYSxPQUNJOHVCLFNBQVUsR0FDVjZILE9BQVEsT0FDUjErQixLQUFNLFFBQ055K0IsWUFBYSxRQUdoQnIzQyxLQUFLek0sTUFBTW93QixJQUdoQnN0QixFQUFBbE0sUUFBQTNQLGNBQUM0bEIsRUFBQWpXLFNBQ0doL0IsRUFBRy9GLEtBQUttRSxNQUFNNEIsRUFDZEMsRUFBR2hHLEtBQUttRSxNQUFNNkIsRUFDZCtHLEVBQUcvTSxLQUFLbUUsTUFBTTRJLEVBQ2RJLEVBQUduTixLQUFLbUUsTUFBTWdKLEVBRWQycUMsY0FBZTkzQyxLQUFLbUUsTUFBTXcxQyxlQUUxQnRCLFNBQVUsU0FBQ3R5QyxFQUFHQyxHQUFKLE9BQVU0cUMsRUFBS3lILFNBQVN0eUMsRUFBR0MsSUFDckN3eUMsV0FBWSxTQUFDenlDLEVBQUdDLEVBQUcrRyxFQUFHSSxHQUFWLE9BQWdCeWpDLEVBQUs0SCxXQUFXenlDLEVBQUdDLEVBQUcrRyxFQUFHSSxJQUNyRDZxQyxnQkFBaUIsa0JBQU1wSCxFQUFLb0gsbUJBQzVCVSxXQUFZLFNBQUMzeUMsRUFBR0MsRUFBRytHLEVBQUdJLEdBQVYsT0FBZ0J5akMsRUFBSzhILFdBQVczeUMsRUFBR0MsRUFBRytHLEVBQUdJLElBQ3JEeXJDLGNBQWUsa0JBQU1oSSxFQUFLZ0ksbUJBRTlCM0gsRUFBQWxNLFFBQUEzUCxjQUFDNmxCLEVBQUFsVyxTQUNHaC9CLEVBQUcvRixLQUFLbUUsTUFBTTRCLEVBQ2RDLEVBQUdoRyxLQUFLbUUsTUFBTTZCLEVBQ2QrRyxFQUFHL00sS0FBS21FLE1BQU00SSxFQUNkSSxFQUFHbk4sS0FBS21FLE1BQU1nSixFQUVkMnFDLGNBQWU5M0MsS0FBS21FLE1BQU13MUMsZUFFMUJ0QixTQUFVLFNBQUN0eUMsRUFBR0MsR0FBSixPQUFVNHFDLEVBQUt5SCxTQUFTdHlDLEVBQUdDLElBQ3JDd3lDLFdBQVksU0FBQ3p5QyxFQUFHQyxFQUFHK0csRUFBR0ksR0FBVixPQUFnQnlqQyxFQUFLNEgsV0FBV3p5QyxFQUFHQyxFQUFHK0csRUFBR0ksSUFDckQ2cUMsZ0JBQWlCLGtCQUFNcEgsRUFBS29ILG1CQUM1QlUsV0FBWSxTQUFDM3lDLEVBQUdDLEVBQUcrRyxFQUFHSSxHQUFWLE9BQWdCeWpDLEVBQUs4SCxXQUFXM3lDLEVBQUdDLEVBQUcrRyxFQUFHSSxJQUNyRHlyQyxjQUFlLGtCQUFNaEksRUFBS2dJLG1CQUU5QjNILEVBQUFsTSxRQUFBM1AsY0FBQzhsQixFQUFBblcsU0FDR2gvQixFQUFHL0YsS0FBS21FLE1BQU00QixFQUNkQyxFQUFHaEcsS0FBS21FLE1BQU02QixFQUNkK0csRUFBRy9NLEtBQUttRSxNQUFNNEksRUFDZEksRUFBR25OLEtBQUttRSxNQUFNZ0osRUFFZDJxQyxjQUFlOTNDLEtBQUttRSxNQUFNdzFDLGVBRTFCdEIsU0FBVSxTQUFDdHlDLEVBQUdDLEdBQUosT0FBVTRxQyxFQUFLeUgsU0FBU3R5QyxFQUFHQyxJQUNyQ3d5QyxXQUFZLFNBQUN6eUMsRUFBR0MsRUFBRytHLEVBQUdJLEdBQVYsT0FBZ0J5akMsRUFBSzRILFdBQVd6eUMsRUFBR0MsRUFBRytHLEVBQUdJLElBQ3JENnFDLGdCQUFpQixrQkFBTXBILEVBQUtvSCxtQkFDNUJVLFdBQVksU0FBQzN5QyxFQUFHQyxFQUFHK0csRUFBR0ksR0FBVixPQUFnQnlqQyxFQUFLOEgsV0FBVzN5QyxFQUFHQyxFQUFHK0csRUFBR0ksSUFDckR5ckMsY0FBZSxrQkFBTWhJLEVBQUtnSSxtQkFFOUIzSCxFQUFBbE0sUUFBQTNQLGNBQUMrbEIsRUFBQXBXLFNBQ0doL0IsRUFBRy9GLEtBQUttRSxNQUFNNEIsRUFDZEMsRUFBR2hHLEtBQUttRSxNQUFNNkIsRUFDZCtHLEVBQUcvTSxLQUFLbUUsTUFBTTRJLEVBQ2RJLEVBQUduTixLQUFLbUUsTUFBTWdKLEVBRWQycUMsY0FBZTkzQyxLQUFLbUUsTUFBTXcxQyxlQUUxQnRCLFNBQVUsU0FBQ3R5QyxFQUFHQyxHQUFKLE9BQVU0cUMsRUFBS3lILFNBQVN0eUMsRUFBR0MsSUFDckN3eUMsV0FBWSxTQUFDenlDLEVBQUdDLEVBQUcrRyxFQUFHSSxHQUFWLE9BQWdCeWpDLEVBQUs0SCxXQUFXenlDLEVBQUdDLEVBQUcrRyxFQUFHSSxJQUNyRDZxQyxnQkFBaUIsa0JBQU1wSCxFQUFLb0gsbUJBQzVCVSxXQUFZLFNBQUMzeUMsRUFBR0MsRUFBRytHLEVBQUdJLEdBQVYsT0FBZ0J5akMsRUFBSzhILFdBQVczeUMsRUFBR0MsRUFBRytHLEVBQUdJLElBQ3JEeXJDLGNBQWUsa0JBQU1oSSxFQUFLZ0ksdUNBeGF6QmMsMlBDZHJCeEgsRUFBQW5sRCxFQUFBLElBRUFxdUQsRUFBQXJ1RCxFQUFBLHlDQUVBNGdELEVBQUE1Z0QsRUFBQSxJQU9BLElBdUNNc3VELEdBQW1CLEVBQUFuSixFQUFBRyxTQXZDRCxTQUFDbHVDLEVBQU81USxHQUM1QixPQUFBekUsS0FDT3FWLElBS2dCLFNBQUN4TixFQUFVcEQsR0FDbEMsT0FDSW9ELGFBS1csU0FBQ3dOLEVBQU94TixFQUFVcEQsR0FDakMsT0FBQXpFLEtBTU95RSxHQUNIeW9DLE1BQU83M0IsRUFBTTYzQixNQUVic2EsV0FBWSxTQUFDcDhDLEdBQ1R2RCxFQUFTQSxVQUFTLEVBQUFnM0MsRUFBQTlwQiw4QkFBNkIzcEIsS0FFbkQ0Z0QsaUJBQWtCLFNBQUM1Z0QsR0FDZnZELEVBQVNBLFVBQVMsRUFBQWczQyxFQUFBN3BCLGlDQUFnQzVwQixLQUd0RDYvQyxZQUFhLFdBQ1RwakQsRUFBU0EsVUFBUyxFQUFBZzNDLEVBQUFscUIsbUNBT0wsQ0FJdkJpMkIscUJBRWEyQiw4VUN4RGZ0dUQsRUFBQSxRQUVBQSxFQUFBLFVBQ0FBLEVBQUEsVUFDQUEsRUFBQSw2REFNcUJ1dUQsY0FDakIsU0FBQUEsRUFBWS9uRCxHQUFPLG1HQUFBd00sQ0FBQUMsS0FBQXM3QyxvS0FBQW43QyxDQUFBSCxNQUFBczdDLEVBQUE3NkMsV0FBQTVTLE9BQUErWSxlQUFBMDBDLElBQUFodUQsS0FBQTBTLEtBQ1R6TSx1VUFGMEJnOUMsVUFBTUMsMkRBUXRDLElBRkEsSUFBSStLLEtBRUtwdUQsRUFBSSxFQUFHQSxFQUFJNlMsS0FBS3pNLE1BQU04NEIsS0FBS245QixPQUFRL0IsSUFDeENvdUQsRUFBVzFuRCxLQUNQbzlDLEVBQUFsTSxRQUFBM1AsY0FBQ29tQixFQUFBelcsU0FDR3AxQyxHQUFJcVEsS0FBS3pNLE1BQU04NEIsS0FBS2wvQixHQUFHd0MsR0FDdkJrSSxLQUFNbUksS0FBS3pNLE1BQU04NEIsS0FBS2wvQixHQUFHMEssS0FDekIrVixHQUFJNU4sS0FBS3pNLE1BQU04NEIsS0FBS2wvQixHQUFHeWdCLEdBQ3ZCQyxHQUFJN04sS0FBS3pNLE1BQU04NEIsS0FBS2wvQixHQUFHMGdCLEdBQ3ZCQyxHQUFJOU4sS0FBS3pNLE1BQU04NEIsS0FBS2wvQixHQUFHMmdCLEdBQ3ZCQyxHQUFJL04sS0FBS3pNLE1BQU04NEIsS0FBS2wvQixHQUFHNGdCLEdBQ3ZCMlYsTUFBTzFqQixLQUFLek0sTUFBTTg0QixLQUFLbC9CLEdBQUd1MkIsTUFDMUJDLEdBQUkzakIsS0FBS3pNLE1BQU04NEIsS0FBS2wvQixHQUFHdzJCLE1BS25DLE9BQU80M0Isc0NBT1AsSUFIQSxJQUFJQSxLQUNBRSxTQUVLdHVELEVBQUksRUFBR0EsRUFBSTZTLEtBQUt6TSxNQUFNODRCLEtBQUtuOUIsT0FBUS9CLElBRXBDNlMsS0FBS3pNLE1BQU0wNkMsU0FBU3QrQyxJQUFNcVEsS0FBS3pNLE1BQU04NEIsS0FBS2wvQixHQUFHd0MsR0FrQjdDcVEsS0FBS3pNLE1BQU0wNkMsU0FBU3ZxQixPQUFTMWpCLEtBQUt6TSxNQUFNODRCLEtBQUtsL0IsR0FBR3UyQixNQWtCcEQ2M0IsRUFBVzFuRCxLQUNQbzlDLEVBQUFsTSxRQUFBM1AsY0FBQ29tQixFQUFBelcsU0FDR3AxQyxHQUFJcVEsS0FBS3pNLE1BQU04NEIsS0FBS2wvQixHQUFHd0MsR0FDdkJrSSxLQUFNbUksS0FBS3pNLE1BQU04NEIsS0FBS2wvQixHQUFHMEssS0FDekIrVixHQUFJNU4sS0FBS3pNLE1BQU04NEIsS0FBS2wvQixHQUFHeWdCLEdBQ3ZCQyxHQUFJN04sS0FBS3pNLE1BQU04NEIsS0FBS2wvQixHQUFHMGdCLEdBQ3ZCQyxHQUFJOU4sS0FBS3pNLE1BQU04NEIsS0FBS2wvQixHQUFHMmdCLEdBQ3ZCQyxHQUFJL04sS0FBS3pNLE1BQU04NEIsS0FBS2wvQixHQUFHNGdCLEdBQ3ZCMlYsTUFBTzFqQixLQUFLek0sTUFBTTg0QixLQUFLbC9CLEdBQUd1MkIsTUFDMUJDLEdBQUkzakIsS0FBS3pNLE1BQU04NEIsS0FBS2wvQixHQUFHdzJCLE1BMUIzQjQzQixFQUFXMW5ELEtBQ1BvOUMsRUFBQWxNLFFBQUEzUCxjQUFDc21CLEVBQUEzVyxTQUNHcDFDLEdBQUlxUSxLQUFLek0sTUFBTTg0QixLQUFLbC9CLEdBQUd3QyxHQUN2QmtJLEtBQU1tSSxLQUFLek0sTUFBTTg0QixLQUFLbC9CLEdBQUcwSyxLQUN6QitWLEdBQUk1TixLQUFLek0sTUFBTTg0QixLQUFLbC9CLEdBQUd5Z0IsR0FDdkJDLEdBQUk3TixLQUFLek0sTUFBTTg0QixLQUFLbC9CLEdBQUcwZ0IsR0FDdkJDLEdBQUk5TixLQUFLek0sTUFBTTg0QixLQUFLbC9CLEdBQUcyZ0IsR0FDdkJDLEdBQUkvTixLQUFLek0sTUFBTTg0QixLQUFLbC9CLEdBQUc0Z0IsR0FDdkIyVixNQUFPMWpCLEtBQUt6TSxNQUFNODRCLEtBQUtsL0IsR0FBR3UyQixNQUMxQkMsR0FBSTNqQixLQUFLek0sTUFBTTg0QixLQUFLbC9CLEdBQUd3MkIsTUEzQi9CODNCLEVBQ0l4SyxFQUFBbE0sUUFBQTNQLGNBQUN1bUIsRUFBQTVXLFNBQ0dwMUMsR0FBSXFRLEtBQUt6TSxNQUFNODRCLEtBQUtsL0IsR0FBR3dDLEdBQ3ZCa0ksS0FBTW1JLEtBQUt6TSxNQUFNODRCLEtBQUtsL0IsR0FBRzBLLEtBQ3pCK1YsR0FBSTVOLEtBQUt6TSxNQUFNODRCLEtBQUtsL0IsR0FBR3lnQixHQUN2QkMsR0FBSTdOLEtBQUt6TSxNQUFNODRCLEtBQUtsL0IsR0FBRzBnQixHQUN2QkMsR0FBSTlOLEtBQUt6TSxNQUFNODRCLEtBQUtsL0IsR0FBRzJnQixHQUN2QkMsR0FBSS9OLEtBQUt6TSxNQUFNODRCLEtBQUtsL0IsR0FBRzRnQixHQUN2QjJWLE1BQU8xakIsS0FBS3pNLE1BQU04NEIsS0FBS2wvQixHQUFHdTJCLE1BQzFCQyxHQUFJM2pCLEtBQUt6TSxNQUFNODRCLEtBQUtsL0IsR0FBR3cyQixLQTJDdkMsT0FGQTQzQixFQUFXMW5ELEtBQUs0bkQsR0FFVEYsbUNBS1AsSUFBSUEsU0FPSixPQUxJQSxFQUQwQixJQUExQnY3QyxLQUFLek0sTUFBTTA2QyxTQUFTdCtDLEdBQ1BxUSxLQUFLNDdDLHFCQUVMNTdDLEtBQUs2N0MsWUFJbEI1SyxFQUFBbE0sUUFBQTNQLGNBQUEsU0FDS21tQixzQkFuR0lELDJQQ1ZyQnBKLEVBQUFubEQsRUFBQSxJQUVBK3VELEVBQUEvdUQsRUFBQSx5Q0FRQSxJQTRCTWd2RCxHQUFnQixFQUFBN0osRUFBQUcsU0E1QkUsU0FBQ2x1QyxFQUFPNVEsR0FDNUIsT0FBQXpFLEtBQ09xVixJQUtnQixTQUFDeE4sRUFBVXBELEdBQ2xDLE9BQ0lvRCxhQUtXLFNBQUN3TixFQUFPeE4sRUFBVXBELEdBQ2pDLE9BT0k4NEIsS0FBTWxvQixFQUFNa29CLEtBQ1o0aEIsU0FBVTlwQyxFQUFNOHBDLFdBS0YsQ0FJcEJxTixxQkFFYVMsNFVDNUNmNU0sRUFBQXBpRCxFQUFBLHVDQUVBby9DLEVBQUFwL0MsRUFBQSxJQUVBLElBQU1xaUQsR0FDRkMsV0FDSVEsZ0JBQWlCLFdBSUptTSxjQUNqQixTQUFBQSxFQUFZem9ELEdBQU8sbUdBQUF3TSxDQUFBQyxLQUFBZzhDLG9LQUFBNzdDLENBQUFILE1BQUFnOEMsRUFBQXY3QyxXQUFBNVMsT0FBQStZLGVBQUFvMUMsSUFBQTF1RCxLQUFBMFMsS0FDVHpNLHVVQUZ1Qmc5QyxVQUFNQyw0Q0FNbkMsT0FDSVMsRUFBQWxNLFFBQUEzUCxjQUFBLFFBQ0lydkIsRUFBRSxJQUNGQyxFQUFFLElBQ0Y0SyxNQUFPNVEsS0FBS3pNLE1BQU1xZCxNQUNsQkMsT0FBUTdRLEtBQUt6TSxNQUFNc2QsT0FDbkI4UCxPQUNJMjJCLE9BQVEsT0FDUjErQixLQUFNLGNBQ05xakMsUUFBUyw0Q0FVckIsSUFIQSxJQUFJenZCLEtBR0tyL0IsRUFBSSxFQUFHQSxFQUFJNlMsS0FBS3pNLE1BQU1rN0MsU0FBU3YvQyxPQUFRL0IsSUFBSyxDQUNqRCxJQUFJK3VELEVBQUlDLEVBQUlwMkMsU0FBR0MsU0FBR28yQyxTQUFRQyxTQUMxQkgsRUFBS2w4QyxLQUFLek0sTUFBTWs3QyxTQUFTdGhELEdBQUcsR0FDNUJndkQsRUFBS244QyxLQUFLek0sTUFBTWs3QyxTQUFTdGhELEdBQUcsR0FFSSxRQUE1QjZTLEtBQUt6TSxNQUFNMHZCLEtBQUt5WCxVQUNoQjMwQixFQUFJOEcsUUFBTVksUUFBUTB1QyxFQUFJbjhDLEtBQUt6TSxNQUFNcWQsT0FDakM1SyxFQUFJNkcsUUFBTWEsUUFBUXd1QyxFQUFJbDhDLEtBQUt6TSxNQUFNc2QsUUFDakN1ckMsRUFBU3A4QyxLQUFLek0sTUFBTTB2QixLQUFLZ0csT0FDekJvekIsRUFBU3I4QyxLQUFLek0sTUFBTTB2QixLQUFLK0YsU0FFekJqakIsRUFBSW0yQyxFQUNKbDJDLEVBQUltMkMsRUFDSkMsRUFBU3A4QyxLQUFLek0sTUFBTTB2QixLQUFLK0YsT0FDekJxekIsRUFBU3I4QyxLQUFLek0sTUFBTTB2QixLQUFLZ0csUUFHN0J1RCxFQUFJMzRCLEtBQ0FvOUMsRUFBQWxNLFFBQUEzUCxjQUFBLFFBQ0lydkIsRUFBR0EsRUFBS3EyQyxFQUFTLEVBQ2pCcDJDLEVBQUdBLEVBQUtxMkMsRUFBUyxFQUNqQnpyQyxNQUFPd3JDLEVBQ1B2ckMsT0FBUXdyQyxFQUNSMTdCLE9BQ0kyMkIsT0FBUSxZQUNSeUQsWUFBYSxJQUNibmlDLEtBQU0sV0FNdEIsT0FBTzRULGlDQUlQLElBQUlBLEtBR1oxMkIsUUFBUXBGLElBQUlzUCxLQUFLek0sTUFBTW03QyxZQUVmLElBQUssSUFBSXZoRCxFQUFJLEVBQUdBLEVBQUk2UyxLQUFLek0sTUFBTW03QyxXQUFXeC9DLE9BQVEvQixJQUFLLENBQ25ELElBQUkrdUQsRUFBSUMsRUFBSXAyQyxTQUFHQyxTQUFHbzJDLFNBQVFDLFNBQzFCSCxFQUFLbDhDLEtBQUt6TSxNQUFNbTdDLFdBQVd2aEQsR0FBR3MrQixFQUM5QjB3QixFQUFLbjhDLEtBQUt6TSxNQUFNbTdDLFdBQVd2aEQsR0FBR2szQixFQUVFLFFBQTVCcmtCLEtBQUt6TSxNQUFNMHZCLEtBQUt5WCxVQUVaMGhCLEVBRG1DLEdBQW5DcDhDLEtBQUt6TSxNQUFNbTdDLFdBQVd2aEQsR0FBRzg3QixPQUNoQmpwQixLQUFLek0sTUFBTTB2QixLQUFLZ0csT0FFaEJqcEIsS0FBS3pNLE1BQU1tN0MsV0FBV3ZoRCxHQUFHODdCLE9BR2xDb3pCLEVBRG1DLEdBQW5DcjhDLEtBQUt6TSxNQUFNbTdDLFdBQVd2aEQsR0FBRzY3QixPQUNoQmhwQixLQUFLek0sTUFBTTB2QixLQUFLK0YsT0FFaEJocEIsS0FBS3pNLE1BQU1tN0MsV0FBV3ZoRCxHQUFHNjdCLE9BR3RDampCLEVBQUk4RyxRQUFNWSxRQUFRMHVDLEVBQUluOEMsS0FBS3pNLE1BQU1xZCxPQUNqQzVLLEVBQUk2RyxRQUFNYSxRQUFRd3VDLEVBQUlsOEMsS0FBS3pNLE1BQU1zZCxVQUc3QnVyQyxFQURtQyxHQUFuQ3A4QyxLQUFLek0sTUFBTW03QyxXQUFXdmhELEdBQUc2N0IsT0FDaEJocEIsS0FBS3pNLE1BQU0wdkIsS0FBSytGLE9BRWhCaHBCLEtBQUt6TSxNQUFNbTdDLFdBQVd2aEQsR0FBRzY3QixPQUdsQ3F6QixFQURtQyxHQUFuQ3I4QyxLQUFLek0sTUFBTW03QyxXQUFXdmhELEdBQUc4N0IsT0FDaEJqcEIsS0FBS3pNLE1BQU0wdkIsS0FBS2dHLE9BRWhCanBCLEtBQUt6TSxNQUFNbTdDLFdBQVd2aEQsR0FBRzg3QixPQUd0Q2xqQixFQUFJbTJDLEVBQ0psMkMsRUFBSW0yQyxHQUdSM3ZCLEVBQUkzNEIsS0FDQW85QyxFQUFBbE0sUUFBQTNQLGNBQUEsUUFDSXJ2QixFQUFHQSxFQUFLcTJDLEVBQVMsRUFDakJwMkMsRUFBR0EsRUFBS3EyQyxFQUFTLEVBQWUsS0FBVEEsRUFBZ0IsSUFDdkMxN0IsT0FDSTh1QixTQUFVMk0sRUFDVjlFLE9BQVEsT0FDUjErQixLQUFNLFVBR1Q1WSxLQUFLek0sTUFBTW03QyxXQUFXdmhELEdBQUcyN0IsT0FLdEMsT0FBTzBELG1DQUtQLE9BQ0l5a0IsRUFBQWxNLFFBQUEzUCxjQUFBLEtBQ0l6bEMsR0FBSXFRLEtBQUt6TSxNQUFNNUQsR0FDZjJzRCxVQUFBLGFBQXdCdDhDLEtBQUt6TSxNQUFNd1MsRUFBbkMsSUFBd0MvRixLQUFLek0sTUFBTXlTLEVBQW5ELElBQ0E0SyxNQUFPNVEsS0FBS3pNLE1BQU1xZCxNQUNsQkMsT0FBUTdRLEtBQUt6TSxNQUFNc2QsT0FDbkI4UCxNQUFPeXVCLEVBQU9DLFdBR2JydkMsS0FBSzJrQixNQUtMM2tCLEtBQUt5dUMsV0FHTHp1QyxLQUFLaWpCLDJCQTFJRCs0QiwyUENWckI5SixFQUFBbmxELEVBQUEsSUFFQXd2RCxFQUFBeHZELEVBQUEseUNBSUEsSUEwQk15dkQsR0FBYSxFQUFBdEssRUFBQUcsU0ExQkssU0FBQ2x1QyxFQUFPNVEsR0FDNUIsT0FBQXpFLEtBQ09xVixJQUtnQixTQUFDeE4sRUFBVXBELEdBQ2xDLE9BQ0lvRCxhQUtXLFNBQUN3TixFQUFPeE4sRUFBVXBELEdBQ2pDLE9BQUF6RSxLQU1PeUUsSUFLUSxDQUlqQnlvRCxxQkFFYVEsOFVDdENmenZELEVBQUEsUUFFQUEsRUFBQSxNQUVBaXFELEVBQUFqcUQsRUFBQSxJQUNBby9DLEVBQUFwL0MsRUFBQSwyREFNcUIwdkQsZ3JCQUFhbE0sVUFBTUMsK0NBRWhDLE9BQ0lTLEVBQUFsTSxRQUFBM1AsY0FBQSxLQUFHemxDLEdBQUlxUSxLQUFLek0sTUFBTTVELElBQ2JxUSxLQUFLek0sTUFBTTg0QixLQUFLcHdCLElBQUksU0FBQzBvQixHQUNsQixJQUFNa3ZCLEVBQUlobkMsUUFBTTJCLGlCQUFpQm1XLEVBQUkvVyxHQUNKK1csRUFBSTlXLEdBQ0o4VyxFQUFJN1csR0FDSjZXLEVBQUk1VyxHQUNKMkMsU0FBT0MsYUFBYUMsTUFDcEJGLFNBQU9DLGFBQWFFLFFBRXJELE9BQVE4VCxFQUFJOXNCLE1BQ1osSUFBSyxPQUNELE9BQ0lvNUMsRUFBQWxNLFFBQUEzUCxjQUFDc25CLEVBQUEzWCxTQUNHcDFDLEdBQUlnMUIsRUFBSWgxQixHQUNSb1csRUFBRzh0QyxFQUFFOXRDLEVBQ0xDLEVBQUc2dEMsRUFBRTd0QyxFQUNMNEssTUFBT2lqQyxFQUFFOW1DLEVBQ1Q4RCxPQUFRZ2pDLEVBQUUxbUMsRUFDVnVXLE1BQU9pQixFQUFJakIsTUFDWEMsR0FBSWdCLEVBQUloQixHQUVSVixLQUFNMEIsRUFBSTFCLEtBQ1Z3ckIsU0FBVTlwQixFQUFJOHBCLFNBQ2RDLFdBQVkvcEIsRUFBSStwQixhQUk1QixJQUFLLFFBQ0QsTUFBTywwQkEvQlYrTiwyUENYckJ2SyxFQUFBbmxELEVBQUEsSUFFQTR2RCxFQUFBNXZELEVBQUEseUNBR0EsSUEyQk02dkQsR0FBVSxFQUFBMUssRUFBQUcsU0EzQlEsU0FBQ2x1QyxFQUFPNVEsR0FDNUIsT0FBQXpFLEtBQ09xVixJQUtnQixTQUFDeE4sRUFBVXBELEdBQ2xDLE9BQ0lvRCxhQUtXLFNBQUN3TixFQUFPeE4sRUFBVXBELEdBQ2pDLE9BQUF6RSxLQU1PeUUsR0FDSDg0QixLQUFNbG9CLEVBQU1rb0IsUUFLSixDQUlkb3dCLHFCQUVhRyw0VUN0Q2Z6TixFQUFBcGlELEVBQUEsdUNBRUFvL0MsRUFBQXAvQyxFQUFBLElBQ0FpcUQsRUFBQWpxRCxFQUFBLElBTUEsSUFJcUI4dkQsZ3JCQUFhdE0sVUFBTUMsZ0RBS2hDLElBRkEsSUFBSTFlLEtBRUs5ckIsRUFBSSxFQUFHQSxHQUFLaEcsS0FBS3pNLE1BQU1zZCxPQUFRN0ssR0FBSzBLLFNBQU9JLEtBQUtELE9BQVEsQ0FDN0QsSUFBSWlzQyxFQUFLLElBQVU5OEMsS0FBS3pNLE1BQU15b0MsTUFDMUIrZ0IsRUFYRixVQVlFLzJDLEdBQTBCLEVBQXJCMEssU0FBT0ksS0FBS0QsU0FBZSxJQUNoQ2lzQyxFQUFLLElBQVU5OEMsS0FBS3pNLE1BQU15b0MsTUFDMUIrZ0IsRUFiRixXQWVFLzJDLEdBQTBCLEdBQXJCMEssU0FBT0ksS0FBS0QsU0FBZ0IsSUFDakNpc0MsRUFBSyxJQUFTOThDLEtBQUt6TSxNQUFNeW9DLE1BQ3pCK2dCLEVBaEJGLFdBbUJGanJCLEVBQUtqK0IsS0FDRG85QyxFQUFBbE0sUUFBQTNQLGNBQUEsUUFDSXhuQixHQUFJLEVBQ0pDLEdBQUloQixRQUFNVSxRQUFRdkgsRUFBR2hHLEtBQUt6TSxNQUFNc2QsUUFDaEMvQyxHQUFJOU4sS0FBS3pNLE1BQU1xZCxNQUNmN0MsR0FBSWxCLFFBQU1VLFFBQVF2SCxFQUFHaEcsS0FBS3pNLE1BQU1zZCxRQUNoQ2txQyxZQUFhK0IsRUFDYnhGLE9BQVF5RixLQUtwQixPQUFPanJCLG9DQU1QLElBRkEsSUFBSUEsS0FFSy9yQixFQUFJLEVBQUdBLEVBQUkvRixLQUFLek0sTUFBTXFkLE1BQU83SyxHQUFLMkssU0FBT0ksS0FBS0YsTUFBTyxDQUMxRCxJQUFJa3NDLEVBQUssSUFBVTk4QyxLQUFLek0sTUFBTXlvQyxNQUMxQitnQixFQXpDRixVQTBDRWgzQyxHQUF5QixFQUFwQjJLLFNBQU9JLEtBQUtGLFFBQWMsSUFDL0Jrc0MsRUFBSyxJQUFVOThDLEtBQUt6TSxNQUFNeW9DLE1BQzFCK2dCLEVBM0NGLFdBNkNFaDNDLEdBQXlCLEdBQXBCMkssU0FBT0ksS0FBS0YsUUFBZSxJQUNoQ2tzQyxFQUFLLElBQVU5OEMsS0FBS3pNLE1BQU15b0MsTUFDMUIrZ0IsRUE5Q0YsV0FpREZqckIsRUFBS2orQixLQUNEbzlDLEVBQUFsTSxRQUFBM1AsY0FBQSxRQUNJeG5CLEdBQUlmLFFBQU1RLFFBQVF0SCxFQUFHL0YsS0FBS3pNLE1BQU1xZCxPQUNoQy9DLEdBQUksRUFDSkMsR0FBSWpCLFFBQU1RLFFBQVF0SCxFQUFHL0YsS0FBS3pNLE1BQU1xZCxPQUNoQzdDLEdBQUkvTixLQUFLek0sTUFBTXNkLE9BQ2ZrcUMsWUFBYStCLEVBQ2J4RixPQUFReUYsS0FLcEIsT0FBT2pyQixtQ0FJUCxPQUNJbWYsRUFBQWxNLFFBQUEzUCxjQUFBLFNBQ1FwMUIsS0FBS2c5QyxVQUNMaDlDLEtBQUtpOUMsOEJBbEVKSiw4VUNickI5dkQsRUFBQSxRQUVBQSxFQUFBLFVBQ0FBLEVBQUEsVUFDQUEsRUFBQSx5REFFQSxJQUFNcWlELEdBQ0ZDLFdBQ0lRLGdCQUFpQixTQUlKcU4sZ3JCQUFpQjNNLFVBQU1DLCtDQUVwQyxPQUNJUyxFQUFBbE0sUUFBQTNQLGNBQUEsT0FDSXhrQixNQUFPNVEsS0FBS3pNLE1BQU1xZCxNQUFRNVEsS0FBS3pNLE1BQU15b0MsTUFBUSxJQUM3Q25yQixPQUFRN1EsS0FBS3pNLE1BQU1zZCxPQUFTN1EsS0FBS3pNLE1BQU15b0MsTUFBUSxJQUMvQ21oQixRQUFBLE9BQWdCbjlDLEtBQUt6TSxNQUFNcWQsTUFBM0IsSUFBb0M1USxLQUFLek0sTUFBTXNkLE9BQy9DOFAsTUFBT3l1QixFQUFPQyxXQUlkNEIsRUFBQWxNLFFBQUEzUCxjQUFDZ29CLEVBQUFyWSxTQUNHbjBCLE1BQU81USxLQUFLek0sTUFBTXFkLE1BQ2xCQyxPQUFRN1EsS0FBS3pNLE1BQU1zZCxPQUNuQm1yQixNQUFPaDhCLEtBQUt6TSxNQUFNeW9DLFFBSXRCaVYsRUFBQWxNLFFBQUEzUCxjQUFDaW9CLEVBQUF0WSxRQUFELE1BR0FrTSxFQUFBbE0sUUFBQTNQLGNBQUNrb0IsRUFBQXZZLFFBQUQsMEJBckJLbVksMlBDWnJCaEwsRUFBQW5sRCxFQUFBLElBRUF3d0QsRUFBQXh3RCxFQUFBLHlDQUlBLElBNEJNeXdELEdBQWMsRUFBQXRMLEVBQUFHLFNBNUJJLFNBQUNsdUMsRUFBTzVRLEdBQzVCLE9BQUF6RSxLQUNPcVYsSUFLZ0IsU0FBQ3hOLEVBQVVwRCxHQUNsQyxPQUNJb0QsYUFLVyxTQUFDd04sRUFBT3hOLEVBQVVwRCxHQUNqQyxPQU1JcWQsTUFBT3JkLEVBQU1xZCxNQUNiQyxPQUFRdGQsRUFBTXNkLE9BQ2RtckIsTUFBTzczQixFQUFNNjNCLFFBS0QsQ0FJbEJraEIscUJBRWFNLGtmQ3hDZnp3RCxFQUFBLFFBRUFBLEVBQUEsTUFFQWlxRCxFQUFBanFELEVBQUEsdURBRUEsSUFBTXFpRCxHQUVFcU8sU0FBVSxTQUNWNU4sZ0JBQWlCLE9BRWpCai9CLE1BQU8sT0FDUEMsT0FBUSxTQUlLNnNDLGNBQ2pCLFNBQUFBLEVBQVlucUQsR0FBTyxtR0FBQXdNLENBQUFDLEtBQUEwOUMsb0tBQUF2OUMsQ0FBQUgsTUFBQTA5QyxFQUFBajlDLFdBQUE1UyxPQUFBK1ksZUFBQTgyQyxJQUFBcHdELEtBQUEwUyxLQUNUek0sdVVBRnVCZzlDLFVBQU1DLDRGQTJCbkMsT0FDSVMsRUFBQWxNLFFBQUEzUCxjQUFBLE9BQ0l6bEMsR0FBRyxVQUNIZ3hCLE1BQUE3eEIsS0FDT3NnRCxFQUNBcHZDLEtBQUt6TSxNQUFNb3RCLFFBR2xCc3dCLEVBQUFsTSxRQUFBM1AsY0FBQ3VvQixFQUFBNVksU0FDR24wQixNQUFPRixTQUFPQyxhQUFhQyxNQUMzQkMsT0FBUUgsU0FBT0MsYUFBYUUsNkJBckMzQjZzQyw4VUNoQnJCM3dELEVBQUEsUUFFQUEsRUFBQSxVQUVBQSxFQUFBLFVBQ0FBLEVBQUEsVUFDQUEsRUFBQSxVQUNBQSxFQUFBLFVBQ0FBLEVBQUEsVUFDQUEsRUFBQSx5REFFQSxJQUFNcWlELEdBQ0ZDLFdBQ0l5RixTQUFVLFdBQ1ZyRixTQUFVLE9BQ1Z1RSxXQUFZLE9BQ1pwQyxNQUFPLFFBQ1BoaEMsTUFBTyxPQUNQQyxPQUFRLFFBQ1I0c0MsU0FBVSxXQUlHRyxnckJBQWtCck4sVUFBTUMsaURBSXJDLElBRkEsSUFBSXBFLEtBRUtqL0MsRUFBSSxFQUFHQSxFQUFJNlMsS0FBS3pNLE1BQU02NEMsU0FBU2w5QyxPQUFRL0IsSUFDNUMsT0FBUTZTLEtBQUt6TSxNQUFNNjRDLFNBQVNqL0MsR0FBRzBLLE1BQy9CLElBQUssUUFDRCxHQUFtQyxTQUEvQm1JLEtBQUt6TSxNQUFNNjRDLFNBQVNqL0MsR0FBRzBoQyxLQUN2QixNQUVKdWQsRUFBU3Y0QyxLQUNMbzlDLEVBQUFsTSxRQUFBM1AsY0FBQ3lvQixFQUFBOVksU0FDR3AxQyxHQUFJcVEsS0FBS3pNLE1BQU02NEMsU0FBU2ovQyxHQUFHd0MsR0FDM0JvVyxFQUFHL0YsS0FBS3pNLE1BQU02NEMsU0FBU2ovQyxHQUFHNFksRUFDMUJDLEVBQUdoRyxLQUFLek0sTUFBTTY0QyxTQUFTai9DLEdBQUc2WSxFQUMxQitHLEVBQUcvTSxLQUFLek0sTUFBTTY0QyxTQUFTai9DLEdBQUc0ZixFQUMxQkksRUFBR25OLEtBQUt6TSxNQUFNNjRDLFNBQVNqL0MsR0FBR2dnQixFQUMxQjZuQyxNQUFNLFFBRU4vRCxFQUFBbE0sUUFBQTNQLGNBQUMwb0IsRUFBQS9ZLFFBQUQsUUFHUixNQUVKLElBQUssVUFDRCxHQUFtQyxTQUEvQi9rQyxLQUFLek0sTUFBTTY0QyxTQUFTai9DLEdBQUcwaEMsS0FDdkIsTUFFSnVkLEVBQVN2NEMsS0FDTG85QyxFQUFBbE0sUUFBQTNQLGNBQUN5b0IsRUFBQTlZLFNBQ0dwMUMsR0FBSXFRLEtBQUt6TSxNQUFNNjRDLFNBQVNqL0MsR0FBR3dDLEdBQzNCb1csRUFBRy9GLEtBQUt6TSxNQUFNNjRDLFNBQVNqL0MsR0FBRzRZLEVBQzFCQyxFQUFHaEcsS0FBS3pNLE1BQU02NEMsU0FBU2ovQyxHQUFHNlksRUFDMUIrRyxFQUFHL00sS0FBS3pNLE1BQU02NEMsU0FBU2ovQyxHQUFHNGYsRUFDMUJJLEVBQUduTixLQUFLek0sTUFBTTY0QyxTQUFTai9DLEdBQUdnZ0IsRUFDMUI2bkMsTUFBTSxVQUVOL0QsRUFBQWxNLFFBQUEzUCxjQUFDMm9CLEVBQUFoWixRQUFELFFBR1IsTUFFSixJQUFLLFdBQ0QsR0FBbUMsU0FBL0Iva0MsS0FBS3pNLE1BQU02NEMsU0FBU2ovQyxHQUFHMGhDLEtBQ3ZCLE1BRUp1ZCxFQUFTdjRDLEtBQ0xvOUMsRUFBQWxNLFFBQUEzUCxjQUFDeW9CLEVBQUE5WSxTQUNHcDFDLEdBQUlxUSxLQUFLek0sTUFBTTY0QyxTQUFTai9DLEdBQUd3QyxHQUMzQm9XLEVBQUcvRixLQUFLek0sTUFBTTY0QyxTQUFTai9DLEdBQUc0WSxFQUMxQkMsRUFBR2hHLEtBQUt6TSxNQUFNNjRDLFNBQVNqL0MsR0FBRzZZLEVBQzFCK0csRUFBRy9NLEtBQUt6TSxNQUFNNjRDLFNBQVNqL0MsR0FBRzRmLEVBQzFCSSxFQUFHbk4sS0FBS3pNLE1BQU02NEMsU0FBU2ovQyxHQUFHZ2dCLEVBQzFCNm5DLE1BQU0sZUFFTi9ELEVBQUFsTSxRQUFBM1AsY0FBQzRvQixFQUFBalosUUFBRCxRQUdSLE1BRUosSUFBSyxRQUNELEdBQW1DLFNBQS9CL2tDLEtBQUt6TSxNQUFNNjRDLFNBQVNqL0MsR0FBRzBoQyxLQUN2QixNQUVKdWQsRUFBU3Y0QyxLQUNMbzlDLEVBQUFsTSxRQUFBM1AsY0FBQ3lvQixFQUFBOVksU0FDR3AxQyxHQUFJcVEsS0FBS3pNLE1BQU02NEMsU0FBU2ovQyxHQUFHd0MsR0FDM0JvVyxFQUFHL0YsS0FBS3pNLE1BQU02NEMsU0FBU2ovQyxHQUFHNFksRUFDMUJDLEVBQUdoRyxLQUFLek0sTUFBTTY0QyxTQUFTai9DLEdBQUc2WSxFQUMxQitHLEVBQUcvTSxLQUFLek0sTUFBTTY0QyxTQUFTai9DLEdBQUc0ZixFQUMxQkksRUFBR25OLEtBQUt6TSxNQUFNNjRDLFNBQVNqL0MsR0FBR2dnQixFQUMxQjZuQyxNQUFNLFNBRU4vRCxFQUFBbE0sUUFBQTNQLGNBQUM2b0IsRUFBQWxaLFFBQUQsUUFHUixNQUVKLElBQUssT0FDRCxHQUFtQyxTQUEvQi9rQyxLQUFLek0sTUFBTTY0QyxTQUFTai9DLEdBQUcwaEMsS0FDdkIsTUFFSnVkLEVBQVN2NEMsS0FDTG85QyxFQUFBbE0sUUFBQTNQLGNBQUN5b0IsRUFBQTlZLFNBQ0dwMUMsR0FBSXFRLEtBQUt6TSxNQUFNNjRDLFNBQVNqL0MsR0FBR3dDLEdBQzNCb1csRUFBRy9GLEtBQUt6TSxNQUFNNjRDLFNBQVNqL0MsR0FBRzRZLEVBQzFCQyxFQUFHaEcsS0FBS3pNLE1BQU02NEMsU0FBU2ovQyxHQUFHNlksRUFDMUIrRyxFQUFHL00sS0FBS3pNLE1BQU02NEMsU0FBU2ovQyxHQUFHNGYsRUFDMUJJLEVBQUduTixLQUFLek0sTUFBTTY0QyxTQUFTai9DLEdBQUdnZ0IsRUFDMUI2bkMsTUFBTSxVQUVOL0QsRUFBQWxNLFFBQUEzUCxjQUFDOG9CLEVBQUFuWixRQUFELFFBT2hCLE9BQU9xSCxtQ0FJUCxPQUNJNkUsRUFBQWxNLFFBQUEzUCxjQUFBLE9BQ0l6VSxNQUFPeXVCLEVBQU9DLFdBR2Q0QixFQUFBbE0sUUFBQTNQLGNBQUMrb0IsRUFBQXBaLFFBQUQsTUFHRS9rQyxLQUFLbytDLCtCQTlHRlIsMlBDdkJyQjFMLEVBQUFubEQsRUFBQSxJQUVBc3hELEVBQUF0eEQsRUFBQSx5Q0FFQUEsRUFBQSxJQU1BLElBMEJNdXhELEdBQWUsRUFBQXBNLEVBQUFHLFNBMUJHLFNBQUNsdUMsRUFBTzVRLEdBQzVCLE9BQUF6RSxLQUNPcVYsSUFLZ0IsU0FBQ3hOLEVBQVVwRCxHQUNsQyxPQUNJb0QsYUFLVyxTQUFDd04sRUFBT3hOLEVBQVVwRCxHQUNqQyxPQU1JNjRDLFNBQVVqb0MsRUFBTWlvQyxXQUtILENBSW5Cd1IscUJBRWFVLG9CQzFDZixTQUFBOW1ELElBQThLLFNBQUF6QyxHQUFrQixhQUFhLFNBQUFoRCxFQUFBZ0QsRUFBQWhELEdBQWdCZ0QsRUFBQXdwRCxPQUFBeHNELEVBQUFnRCxFQUFBdkcsVUFBQVgsT0FBQXlTLE9BQUF2TyxFQUFBdkQsV0FBa0RpQixhQUFhdEIsTUFBQTRHLEVBQUEvRyxZQUFBLEVBQUF1UyxVQUFBLEVBQUF4UyxjQUFBLEtBQXFELFNBQUFHLEVBQUE2RyxFQUFBaEQsR0FBZ0JsRSxPQUFBQyxlQUFBa1MsS0FBQSxRQUFtQzdSLE1BQUE0RyxFQUFBL0csWUFBQSxJQUFzQitELEtBQUE3QyxRQUFBckIsT0FBQUMsZUFBQWtTLEtBQUEsUUFBa0Q3UixNQUFBNEQsRUFBQS9ELFlBQUEsSUFBd0IsU0FBQUksRUFBQTJHLEVBQUFoRCxFQUFBN0QsR0FBa0JFLEVBQUFtd0QsT0FBQWp4RCxLQUFBMFMsS0FBQSxJQUFBakwsR0FBQWxILE9BQUFDLGVBQUFrUyxLQUFBLE9BQTREN1IsTUFBQTRELEVBQUEvRCxZQUFBLElBQXNCSCxPQUFBQyxlQUFBa1MsS0FBQSxPQUFvQzdSLE1BQUFELEVBQUFGLFlBQUEsSUFBd0IsU0FBQUosRUFBQW1ILEVBQUFoRCxHQUFnQm5FLEVBQUEyd0QsT0FBQWp4RCxLQUFBMFMsS0FBQSxJQUFBakwsR0FBQWxILE9BQUFDLGVBQUFrUyxLQUFBLE9BQTREN1IsTUFBQTRELEVBQUEvRCxZQUFBLElBQXdCLFNBQUFiLEVBQUE0SCxFQUFBaEQsR0FBZ0I1RSxFQUFBb3hELE9BQUFqeEQsS0FBQTBTLEtBQUEsSUFBQWpMLEdBQUFsSCxPQUFBQyxlQUFBa1MsS0FBQSxPQUE0RDdSLE1BQUE0RCxFQUFBL0QsWUFBQSxJQUF3QixTQUFBNFEsRUFBQTdKLEVBQUFoRCxFQUFBN0QsR0FBa0IwUSxFQUFBMi9DLE9BQUFqeEQsS0FBQTBTLEtBQUEsSUFBQWpMLEdBQUFsSCxPQUFBQyxlQUFBa1MsS0FBQSxTQUE4RDdSLE1BQUE0RCxFQUFBL0QsWUFBQSxJQUFzQkgsT0FBQUMsZUFBQWtTLEtBQUEsUUFBcUM3UixNQUFBRCxFQUFBRixZQUFBLElBQXdCLFNBQUFrRCxFQUFBNkQsRUFBQWhELEVBQUE3RCxHQUFrQixJQUFBRSxFQUFBMkcsRUFBQW1OLE9BQUFoVSxHQUFBNkQsR0FBQSxHQUFBZ0QsRUFBQTdGLFFBQWtDLE9BQUE2RixFQUFBN0YsT0FBQTZDLEVBQUEsRUFBQWdELEVBQUE3RixPQUFBNkMsSUFBQWdELEVBQUFsQixLQUFBc0MsTUFBQXBCLEVBQUEzRyxHQUFBMkcsRUFBcUQsU0FBQXlwRCxFQUFBenBELEdBQWMsSUFBQWhELE9BQUEsSUFBQWdELEVBQUEsWUFBQTBwRCxFQUFBMXBELEdBQTZDLGlCQUFBaEQsSUFBQWdELElBQUErSSxLQUFBLGNBQUEvSSxFQUFBLE9BQUF6RCxNQUFBQyxRQUFBd0QsR0FBQSwwQkFBQWxILE9BQUFXLFVBQUFrWSxTQUFBcFosS0FBQXlILEdBQUEsMEJBQUFBLEVBQUEyUixVQUFBLFVBQUF5SSxLQUFBcGEsRUFBQTJSLFlBQUEsa0JBQXVOLFNBQUF0WixFQUFBMkgsRUFBQWhELEVBQUE3RCxFQUFBVixFQUFBbUIsRUFBQWxCLEVBQUFpQixHQUEwQkMsUUFBQUQsUUFBZ0IsSUFBQTIxQixFQUFBMTFCLEVBQUF1VCxNQUFBLEdBQWlCLFlBQUF6VSxFQUFBLENBQTBCLEdBQUFELEVBQUEsQ0FBTSxzQkFBQUEsS0FBQTYyQixFQUFBNTJCLEdBQUEsT0FBdUMsd0JBQUFELEVBQUEsWUFBQWl4RCxFQUFBanhELElBQUEsQ0FBd0QsR0FBQUEsRUFBQWt4RCxXQUFBbHhELEVBQUFreEQsVUFBQXI2QixFQUFBNTJCLEdBQUEsT0FBd0MsR0FBQUQsRUFBQW14RCxVQUFBLENBQWdCLElBQUF4eEMsRUFBQTNmLEVBQUFteEQsVUFBQXQ2QixFQUFBNTJCLEVBQUFzSCxFQUFBaEQsR0FBMkJvYixJQUFBcFksRUFBQW9ZLEVBQUEsR0FBQXBiLEVBQUFvYixFQUFBLE1BQXFCa1gsRUFBQXh3QixLQUFBcEcsR0FBVSxXQUFBK3dELEVBQUF6cEQsSUFBQSxXQUFBeXBELEVBQUF6c0QsS0FBQWdELElBQUEyUixXQUFBM1UsSUFBQTJVLFlBQWtFLElBQUFWLE9BQUEsSUFBQWpSLEVBQUEsWUFBQTBwRCxFQUFBMXBELEdBQUE1RSxPQUFBLElBQUE0QixFQUFBLFlBQUEwc0QsRUFBQTFzRCxHQUFBNkMsRUFBQSxjQUFBb1IsR0FBQXRYLE9BQUFRLE9BQUEsR0FBQTB2RCxLQUFBbHdELElBQUFRLE9BQUEsR0FBQTB2RCxJQUFBbndELGVBQUFoQixHQUFBRixFQUFBLGNBQUE0QyxHQUFBekIsT0FBQVEsT0FBQSxHQUFBMnZELEtBQUFud0QsSUFBQVEsT0FBQSxHQUFBMnZELElBQUFwd0QsZUFBQWhCLEdBQWdQLElBQUFtSCxHQUFBckgsRUFBQVcsRUFBQSxJQUFBTixFQUFBeTJCLEVBQUF0eUIsU0FBdUIsSUFBQXhFLEdBQUFxSCxFQUFBMUcsRUFBQSxJQUFBZixFQUFBazNCLEVBQUF0dkIsU0FBNEIsR0FBQXlwRCxFQUFBenBELEtBQUF5cEQsRUFBQXpzRCxHQUFBN0QsRUFBQSxJQUFBRSxFQUFBaTJCLEVBQUF0dkIsRUFBQWhELFNBQW9DLFlBQUF5c0QsRUFBQXpwRCxNQUFBaEQsR0FBQSxFQUFBN0QsRUFBQSxJQUFBRSxFQUFBaTJCLEVBQUF0dkIsRUFBQWhELFNBQStDLGNBQUFpVSxHQUFBLE9BQUFqUixHQUFBLE9BQUFoRCxFQUFBLEdBQUFyRCxFQUFBbXFCLE9BQUEsU0FBQTltQixHQUFpRSxPQUFBQSxFQUFBNnNELE1BQUE3cEQsSUFBaUI3RixPQUFBNkYsSUFBQWhELEdBQUE3RCxFQUFBLElBQUFFLEVBQUFpMkIsRUFBQXR2QixFQUFBaEQsUUFBZ0MsQ0FBSyxHQUFBckQsRUFBQW1GLE1BQVcrcUQsSUFBQTdwRCxFQUFBOHBELElBQUE5c0QsSUFBWVQsTUFBQUMsUUFBQXdELEdBQUEsQ0FBb0IsSUFBQWdZLEVBQWUsSUFBVGhZLEVBQUE3RixPQUFTNmQsRUFBQSxFQUFRQSxFQUFBaFksRUFBQTdGLE9BQVc2ZCxPQUFBaGIsRUFBQTdDLE9BQUFoQixFQUFBLElBQUEwUSxFQUFBeWxCLEVBQUF0WCxFQUFBLElBQUE1ZixPQUFBLEVBQUE0SCxFQUFBZ1ksTUFBQTNmLEVBQUEySCxFQUFBZ1ksR0FBQWhiLEVBQUFnYixHQUFBN2UsRUFBQVYsRUFBQTYyQixFQUFBdFgsRUFBQXJlLEdBQXdFLEtBQUtxZSxFQUFBaGIsRUFBQTdDLFFBQVdoQixFQUFBLElBQUEwUSxFQUFBeWxCLEVBQUF0WCxFQUFBLElBQUFuZixPQUFBLEVBQUFtRSxFQUFBZ2IsWUFBb0MsQ0FBSyxJQUFBaEgsRUFBQWxZLE9BQUF3VixLQUFBdE8sR0FBQXVELEVBQUF6SyxPQUFBd1YsS0FBQXRSLEdBQXNDZ1UsRUFBQXpPLFFBQUEsU0FBQWxKLEVBQUFSLEdBQXdCLElBQUFULEVBQUFtTCxFQUFBcEYsUUFBQTlFLEdBQW1CakIsR0FBQSxHQUFBQyxFQUFBMkgsRUFBQTNHLEdBQUEyRCxFQUFBM0QsR0FBQUYsRUFBQVYsRUFBQTYyQixFQUFBajJCLEVBQUFNLEdBQUE0SixFQUFBcEgsRUFBQW9ILEVBQUFuTCxJQUFBQyxFQUFBMkgsRUFBQTNHLFFBQUEsRUFBQUYsRUFBQVYsRUFBQTYyQixFQUFBajJCLEVBQUFNLEtBQWdFNEosRUFBQWhCLFFBQUEsU0FBQXZDLEdBQXdCM0gsT0FBQSxFQUFBMkUsRUFBQWdELEdBQUE3RyxFQUFBVixFQUFBNjJCLEVBQUF0dkIsRUFBQXJHLEtBQTJCQSxFQUFBUSxPQUFBUixFQUFBUSxPQUFBLE9BQW9CNkYsSUFBQWhELElBQUEsV0FBQWlVLEdBQUFnTSxNQUFBamQsSUFBQWlkLE1BQUFqZ0IsSUFBQTdELEVBQUEsSUFBQUUsRUFBQWkyQixFQUFBdHZCLEVBQUFoRCxLQUFnRSxTQUFBdkUsRUFBQXVILEVBQUFoRCxFQUFBN0QsRUFBQUUsR0FBb0IsT0FBQUEsUUFBQWhCLEVBQUEySCxFQUFBaEQsRUFBQSxTQUFBZ0QsR0FBaUNBLEdBQUEzRyxFQUFBeUYsS0FBQWtCLElBQWE3RyxHQUFBRSxFQUFBYyxPQUFBZCxPQUFBLEVBQXNYLFNBQUFYLEVBQUFzSCxFQUFBaEQsRUFBQTdELEdBQWtCLEdBQUE2RyxHQUFBaEQsR0FBQTdELEtBQUEra0MsS0FBQSxDQUFvQixRQUFBN2tDLEVBQUEyRyxFQUFBbkgsR0FBQSxFQUFBVCxFQUFBZSxFQUFBNHdELEtBQUE1d0QsRUFBQTR3RCxLQUFBNXZELE9BQUEsTUFBNEN0QixFQUFBVCxRQUFNLElBQUFpQixFQUFBRixFQUFBNHdELEtBQUFseEQsTUFBQVEsRUFBQUYsRUFBQTR3RCxLQUFBbHhELElBQUEsaUJBQUFNLEVBQUE0d0QsS0FBQWx4RCxVQUFpRlEsSUFBQUYsRUFBQTR3RCxLQUFBbHhELElBQWlCLE9BQUFNLEVBQUEra0MsTUFBZSxTQUF6aUIsU0FBQXRrQyxFQUFBb0csRUFBQWhELEVBQUE3RCxHQUFrQixHQUFBQSxFQUFBNHdELE1BQUE1d0QsRUFBQTR3RCxLQUFBNXZELE9BQUEsQ0FBMEIsSUFBQWQsRUFBQVIsRUFBQW1ILEVBQUFoRCxHQUFBNUUsRUFBQWUsRUFBQTR3RCxLQUFBNXZELE9BQUEsRUFBK0IsSUFBQWQsRUFBQSxFQUFRQSxFQUFBakIsRUFBSWlCLElBQUFSLElBQUFNLEVBQUE0d0QsS0FBQTF3RCxJQUFtQixPQUFBRixFQUFBK2tDLE1BQWUsUUFBQXRrQyxFQUFBZixFQUFBTSxFQUFBNHdELEtBQUExd0QsSUFBQUYsRUFBQStFLE1BQUEvRSxFQUFBOEUsTUFBdUMsTUFBTSxlQUFBcEYsRUFBQU0sRUFBQTR3RCxLQUFBMXdELElBQTRCLE1BQU0sZ0JBQUFSLEVBQUFNLEVBQUE0d0QsS0FBQTF3RCxJQUFBRixFQUFBMndELFVBQW9DLE9BQUEzd0QsRUFBQStrQyxNQUFvQixRQUFBdGtDLEVBQUFvRyxFQUFBaEQsR0FBQTdELEVBQUErRSxNQUFBL0UsRUFBQThFLE1BQStCLE1BQU0sUUFBQStCLEVBQUE3RCxFQUFBNkQsRUFBQWhELEdBQWlCLE1BQU0sZ0JBQUFnRCxFQUFBaEQsR0FBQTdELEVBQUEyd0QsSUFBMkIsT0FBQTlwRCxFQUFrTnBHLENBQUFULEVBQUE0d0QsS0FBQTF3RCxFQUFBRixFQUFBNHdELEtBQUFseEQsSUFBQVEsRUFBQUYsRUFBQStFLE1BQUEvRSxFQUFBOEUsTUFBZ0QsTUFBTSxlQUFBNUUsRUFBQUYsRUFBQTR3RCxLQUFBbHhELElBQTRCLE1BQU0sZ0JBQUFRLEVBQUFGLEVBQUE0d0QsS0FBQWx4RCxJQUFBTSxFQUFBMndELE1BQXlsQyxTQUFBanFELEVBQUFHLEVBQUFoRCxFQUFBN0QsRUFBQUUsR0FBb0IsSUFBQVIsRUFBQUosRUFBQXVILEVBQUFoRCxHQUFhLElBQUkzRCxFQUFBRixFQUFBNndELGVBQUEsUUFBQTd3RCxFQUFBdzFCLE1BQUEsUUFBMkMsTUFBQTN1QixHQUFTN0csRUFBQXdDLElBQUEsUUFBYzlDLElBQUEwSixRQUFBLFNBQUF2QyxHQUF3QixJQUFBaEQsRUFBQWdELEVBQUFrK0IsS0FBQTdrQyxFQUF4VyxTQUFBMkcsR0FBYyxJQUFBaEQsRUFBQWdELEVBQUFrK0IsS0FBQS9rQyxFQUFBNkcsRUFBQStwRCxLQUFBMXdELEVBQUEyRyxFQUFBNnBELElBQUFoeEQsRUFBQW1ILEVBQUE4cEQsSUFBQTF4RCxFQUFBNEgsRUFBQTlCLE1BQUEyTCxFQUFBN0osRUFBQS9CLEtBQXlELE9BQUFqQixHQUFVLGVBQUE3RCxFQUFBMk4sS0FBQSxLQUFBek4sRUFBQSxJQUFBUixHQUFvQyxlQUFBTSxFQUFBMk4sS0FBQSxLQUFBak8sR0FBOEIsZUFBQU0sRUFBQTJOLEtBQUEsTUFBNEIsZUFBQTNOLEVBQUEyTixLQUFBLFNBQUExTyxFQUFBLElBQUF5UixHQUF3QyxrQkFBaUp6TyxDQUFBNEUsR0FBb0I3RyxFQUFBd0MsSUFBQXlGLE1BQUFqSSxHQUFBLE1BQUFnSyxFQUFBbkcsR0FBQWt4QixLQUEzYixTQUFBbHVCLEdBQWMsZ0JBQUFtRCxFQUFBbkQsR0FBQTY4QyxNQUFBLHNCQUE2YTVyQyxDQUFBalUsSUFBQTZKLE9BQUFwRCxFQUFBcEssT0FBbURGLEVBQUF3QyxJQUFBLGlCQUF5QixJQUFJeEMsRUFBQTh3RCxXQUFhLE1BQUFqcUQsR0FBUzdHLEVBQUF3QyxJQUFBLG9CQUEwQixTQUFBbkQsRUFBQXdILEVBQUFoRCxFQUFBN0QsRUFBQUUsR0FBb0IsZ0JBQUEyRyxFQUFBLFlBQUEwcEQsRUFBQTFwRCxJQUErQyxzQ0FBQUEsRUFBQTNHLEdBQUEyRyxFQUFBM0csR0FBQStILE1BQUFwQixFQUFBeUQsRUFBQXRLLElBQUE2RyxFQUFBM0csR0FBbUUsc0JBQUEyRyxFQUFBaEQsR0FBMkIsZUFBQWdELEdBQW1OLFNBQUFnUixFQUFBaFIsRUFBQWhELEdBQWdCLElBQUE3RCxFQUFBNkQsRUFBQTJ6QyxPQUFBdDNDLEVBQUEyRCxFQUFBa3RELGtCQUFBcnhELEVBQUFtRSxFQUFBbXRELGVBQUEveEQsT0FBQSxJQUFBUyxFQUFqTixTQUFBbUgsR0FBYyxJQUFBaEQsRUFBQWdELEVBQUFvcUQsVUFBQWp4RCxFQUFBNkcsRUFBQXFxRCxTQUErQixnQkFBQXJxRCxFQUFBM0csRUFBQVIsR0FBdUIsSUFBQVQsR0FBQSxVQUFpQixPQUFBQSxFQUFBMEcsS0FBQSxLQUFBNEcsT0FBQTFGLEVBQUE4QyxPQUFBOUYsR0FBQTVFLEVBQUEwRyxLQUFBLE9BQUF6RixHQUFBRixHQUFBZixFQUFBMEcsS0FBQSxTQUFBakcsRUFBQXl4RCxRQUFBLFdBQUFseUQsRUFBQTBPLEtBQUEsTUFBNEhrUixDQUFBaGIsR0FBQW5FLEVBQUFnUixFQUFBN00sRUFBQXV0RCxVQUFBcHVELEVBQUFhLEVBQUF3dEQsT0FBQWYsRUFBQXpzRCxFQUFBNEQsTUFBQXZJLEVBQUEyRSxFQUFBeXRELEtBQUFoeUQsT0FBQSxJQUFBdUUsRUFBQW10RCxlQUErSm5xRCxFQUFBdUMsUUFBQSxTQUFBMUosRUFBQWUsR0FBd0IsSUFBQWxCLEVBQUFHLEVBQUE2eEQsUUFBQS93RCxFQUFBZCxFQUFBOHhELFlBQUFyN0IsRUFBQXoyQixFQUFBZ0osT0FBQXVXLEVBQUF2ZixFQUFBK3hELFVBQUEzNUMsRUFBQXBZLEVBQUE2QyxNQUFBTixFQUFBdkMsRUFBQWd5RCxLQUFBN3lDLEVBQUFuZixFQUFBd2IsVUFBQXJELEVBQUFoUixFQUFBcEcsRUFBQSxHQUFtR29YLElBQUFnSCxFQUFBaEgsRUFBQTQ1QyxVQUFBeHZELEVBQUE0VixFQUFBMDVDLFFBQUFoeUQsR0FBaUMsSUFBQTZLLEVBQUFsSyxFQUFBaTJCLEdBQUEwYyxFQUFBLG1CQUFBbmlDLElBQUEsV0FBK0MsT0FBQW1PLEdBQVNzWCxFQUFBejJCLEdBQUFnUixFQUFBNnNCLEVBQUF2RSxFQUFBeDRCLEdBQUFteEQsRUFBQTN1RCxFQUFBOGpELE1BQUEsVUFBQTlqRCxFQUFBOGpELE1BQUExOEMsR0FBQSxJQUFnRCxHQUFBcXRCLEdBQUEsc0NBQThDQSxFQUFBOXhCLEtBQUFnc0QsR0FBQTl0RCxFQUFBb3RELFdBQUF4NUIsRUFBQTl4QixLQUFBLHNDQUFpRTlCLEVBQUFxdEQsVUFBQXo1QixFQUFBOXhCLEtBQUEsc0NBQTRELElBQUE2SyxFQUFBdlIsRUFBQW1MLEVBQUFtekIsRUFBQXQ3QixHQUFlLElBQUk0d0MsRUFBQTd2QyxFQUFBOGpELE9BQUF4bkQsRUFBQVUsRUFBQTZ3RCxlQUFBNW9ELE1BQUFqSSxHQUFBLE1BQUF3USxHQUFBOUMsT0FBQStwQixJQUFBejNCLEVBQUE2d0QsZUFBQXJnRCxHQUFBeE4sRUFBQThqRCxPQUFBeG5ELEVBQUFVLEVBQUF3MUIsTUFBQXZ0QixNQUFBakksR0FBQSxNQUFBd1EsR0FBQTlDLE9BQUErcEIsSUFBQXozQixFQUFBdzFCLE1BQUFobEIsR0FBMEksTUFBQTNKLEdBQVM3RyxFQUFBd0MsSUFBQWdPLEdBQVMsSUFBQSsvQyxFQUFBbHhELEVBQUFpeEQsRUFBQWxtRCxHQUFBNlUsR0FBQSxhQUFBM1UsRUFBQWpMLEVBQUFpeEQsRUFBQWxtRCxNQUFBLFVBQUFrZixFQUFBanFCLEVBQUFpeEQsRUFBQWxtRCxHQUFBME4sRUFBQW1ILEdBQUEsU0FBQWpWLEVBQUEzSyxFQUFBaXhELEVBQUFsbUQsR0FBQXlVLEdBQUEsYUFBbUcsR0FBQTB4QyxFQUFBLEdBQUF2dEQsRUFBQXl1RCxVQUFBLENBQXFCLElBQUFHLEVBQUEsVUFBQTV1RCxFQUFBeXVELFVBQUF4eUMsR0FBQSxzQkFBcURqZixFQUFBdXdELEdBQUEsZ0JBQUFxQixFQUFBM3lDLFFBQTBCamYsRUFBQXV3RCxHQUFBLGFBQUF0eEMsR0FBMEIsR0FBQTNVLEVBQUEsR0FBQXRILEVBQUEwRixPQUFBLENBQWtCLElBQUFxdEIsRUFBQSxVQUFBL3lCLEVBQUEwRixPQUFBMEIsR0FBQSxzQkFBa0RwSyxFQUFBc0ssR0FBQSxnQkFBQXlyQixFQUFBM3JCLFFBQTBCcEssRUFBQXNLLEdBQUEsYUFBQUYsR0FBMEIsR0FBQTBOLEdBQUF3UixFQUFBLEdBQUF0bUIsRUFBQVQsTUFBQSxDQUFvQixJQUFBc3ZELEVBQUEsVUFBQTd1RCxFQUFBVCxNQUFBdVYsRUFBQW1ILEdBQUEsdUJBQW9EamYsRUFBQXNwQixHQUFBLGdCQUFBdW9DLEVBQUEvNUMsUUFBMEI5WCxFQUFBc3BCLEdBQUEsYUFBQXhSLEdBQTBCLEdBQUE5TixFQUFBLEdBQUFoSCxFQUFBa1ksVUFBQSxDQUFxQixJQUFBd0osRUFBQSxVQUFBMWhCLEVBQUFrWSxVQUFBMkQsR0FBQSxzQkFBcUQ3ZSxFQUFBZ0ssR0FBQSxnQkFBQTBhLEVBQUE3RixRQUEwQjdlLEVBQUFnSyxHQUFBLGFBQUE2VSxHQUEwQjNmLEdBQUF3SCxFQUFBdVksRUFBQUosRUFBQTdlLEVBQUE2eUMsR0FBYyxJQUFJN3lDLEVBQUE4d0QsV0FBYSxNQUFBanFELEdBQVM3RyxFQUFBd0MsSUFBQSxvQkFBMEIsU0FBQTRILElBQWEsSUFBQXZELEVBQUE5RixVQUFBQyxPQUFBLFlBQUFELFVBQUEsR0FBQUEsVUFBQSxNQUErRDhDLEVBQUFsRSxPQUFBa0IsVUFBbUIrd0QsRUFBQS9xRCxHQUFBN0csRUFBQTZELEVBQUEyekMsT0FBQXQzQyxFQUFBMkQsRUFBQWl1RCxpQkFBQXB5RCxFQUFBbUUsRUFBQWt1RCxpQkFBQTl5RCxFQUFBNEUsRUFBQXZCLFVBQUFvTyxFQUFBN00sRUFBQW11RCxVQUFBaHZELEVBQUFhLEVBQUFvdUQsY0FBeUcsWUFBQWp5RCxFQUFBLGtCQUEyQyxnQkFBQTZHLEdBQW1CLGdCQUFBaEQsR0FBbUIsT0FBQWdELEVBQUFoRCxNQUFlLEdBQUFnRCxFQUFBdUssVUFBQXZLLEVBQUE0QixTQUFBLE9BQUFiLFFBQUFyRixNQUFBLCtlQUFtZCxXQUFzRixnQkFBQXNFLEdBQW1CLGdCQUFBaEQsR0FBbUIsT0FBQWdELEVBQUFoRCxNQUFlLElBQUF5c0QsS0FBUyxnQkFBQXpwRCxHQUFtQixJQUFBN0csRUFBQTZHLEVBQUF1SyxTQUFpQixnQkFBQXZLLEdBQW1CLGdCQUFBM0gsR0FBbUIsc0JBQUFELE1BQUFlLEVBQUFkLEdBQUEsT0FBQTJILEVBQUEzSCxHQUE2QyxJQUFBSSxLQUFTZ3hELEVBQUEzcUQsS0FBQXJHLEtBQUFpeUQsUUFBQS9nRCxFQUFBNnpCLE1BQUEva0MsRUFBQWt5RCxZQUFBLElBQUFVLEtBQUE1eUQsRUFBQW15RCxVQUFBdnhELEVBQUFGLEtBQUFWLEVBQUFvSixPQUFBeEosRUFBaUYsSUFBQXVCLE9BQUEsRUFBYSxHQUFBaVEsRUFBQSxJQUFTalEsRUFBQW9HLEVBQUEzSCxHQUFPLE1BQUEySCxHQUFTdkgsRUFBQWlELE1BQUE3QyxFQUFBbUgsUUFBYXBHLEVBQUFvRyxFQUFBM0gsR0FBWUksRUFBQW95RCxLQUFBbGhELEVBQUE2ekIsTUFBQS9rQyxFQUFBaXlELFFBQUFqeUQsRUFBQTRiLFVBQUFoYixFQUFBRixLQUE0QyxJQUFBVCxFQUFBc0UsRUFBQXl0RCxNQUFBLG1CQUFBdHVELElBQUFoRCxFQUFBZCxHQUFBMkUsRUFBQXl0RCxLQUFpRCxHQUFBejVDLEVBQUF5NEMsRUFBQTN3RCxPQUFBa0IsVUFBdUJnRCxHQUFJeXRELEtBQUEveEQsS0FBTyt3RCxFQUFBdHZELE9BQUEsRUFBQTFCLEVBQUFpRCxNQUFBLE1BQUFqRCxFQUFBaUQsTUFBb0MsT0FBQTlCLEtBQVksSUFBQW95QyxFQUFBdFYsRUFBc0Q5RixFQUFBLFNBQUE1d0IsRUFBQWhELEdBQWlCLE9BQXZFLFNBQUFnRCxFQUFBaEQsR0FBd0IsV0FBQVQsTUFBQVMsRUFBQSxHQUFBOEosS0FBQTlHLEdBQStDOHFELENBQUEsSUFBQTl0RCxFQUFBZ0QsRUFBQTJSLFdBQUF4WCxRQUFBNkYsR0FBc0NteUIsRUFBQSxTQUFBbnlCLEdBQWUsT0FBQTR3QixFQUFBNXdCLEVBQUFzckQsV0FBQSxPQUFBMTZCLEVBQUE1d0IsRUFBQXVyRCxhQUFBLE9BQUEzNkIsRUFBQTV3QixFQUFBd3JELGFBQUEsT0FBQTU2QixFQUFBNXdCLEVBQUF5ckQsa0JBQUEsSUFBc0c5aEQsRUFBQSxvQkFBQStoRCxhQUFBLE9BQUFBLGFBQUEsbUJBQUFBLFlBQUFsdUIsSUFBQWt1QixZQUFBTCxLQUFBM0IsRUFBQSxtQkFBQW52RCxRQUFBLGlCQUFBQSxPQUFBQyxTQUFBLFNBQUF3RixHQUFzTCxjQUFBQSxHQUFnQixTQUFBQSxHQUFhLE9BQUFBLEdBQUEsbUJBQUF6RixRQUFBeUYsRUFBQXRGLGNBQUFILFFBQUF5RixJQUFBekYsT0FBQWQsVUFBQSxnQkFBQXVHLEdBQW9HeUQsRUFBQSxTQUFBekQsR0FBZSxHQUFBekQsTUFBQUMsUUFBQXdELEdBQUEsQ0FBcUIsUUFBQWhELEVBQUEsRUFBQTdELEVBQUFvRCxNQUFBeUQsRUFBQTdGLFFBQThCNkMsRUFBQWdELEVBQUE3RixPQUFXNkMsSUFBQTdELEVBQUE2RCxHQUFBZ0QsRUFBQWhELEdBQWMsT0FBQTdELEVBQVMsT0FBQW9ELE1BQUE4QixLQUFBMkIsSUFBcUJ5aUIsS0FBTXVwQixFQUFBLHFCQUFBdnBDLEVBQUEsWUFBQWluRCxFQUFBam5ELFNBQUEsb0JBQUEzQixrQkFBbUg0MUIsRUFBQXNWLEVBQUEyZixXQUFBbHBDLEVBQUEzakIsS0FBQSxnQkFBbUMsSUFBQTQzQixHQUFBc1YsRUFBQTJmLFdBQUFsekQsSUFBQXV6QyxFQUFBMmYsU0FBQWoxQixTQUFBLEtBQStEMTVCLEVBQUEzRCxFQUFBRixHQUFBNkQsRUFBQW5FLEVBQUFNLEdBQUE2RCxFQUFBNUUsRUFBQWUsR0FBQTZELEVBQUE2TSxFQUFBMVEsR0FBQUwsT0FBQW0xQyxpQkFBQXgxQyxHQUF5RGd5RCxNQUFNcnhELE1BQUFYLEVBQUFRLFlBQUEsR0FBc0IyeUQsZ0JBQWlCeHlELE1BQUFmLEVBQUFZLFlBQUEsR0FBc0I0eUQsV0FBWXp5RCxNQUFudUosU0FBQTRHLEVBQUFoRCxFQUFBN0QsR0FBa0I2RyxHQUFBaEQsR0FBbUQzRSxFQUFBMkgsRUFBQWhELEVBQTFDLFNBQUEzRCxHQUFrQkYsTUFBQTZHLEVBQUFoRCxFQUFBM0QsSUFBQVgsRUFBQXNILEVBQUFoRCxFQUFBM0QsTUFBc3JKSixZQUFBLEdBQXNCNnlELGFBQWMxeUQsTUFBQVYsRUFBQU8sWUFBQSxHQUFzQjh5RCxjQUFlM3lELE1BQS9sSyxTQUFBNEcsRUFBQWhELEVBQUE3RCxHQUFrQixHQUFBNkcsR0FBQWhELEdBQUE3RCxLQUFBK2tDLEtBQUEsQ0FBb0IsSUFBQTdrQyxFQUFBUixFQUFBVCxFQUFBNEgsRUFBWSxJQUFBbkgsRUFBQU0sRUFBQTR3RCxLQUFBNXZELE9BQUEsRUFBQWQsRUFBQSxFQUEwQkEsRUFBQVIsRUFBSVEsU0FBQSxJQUFBakIsRUFBQWUsRUFBQTR3RCxLQUFBMXdELE1BQUFqQixFQUFBZSxFQUFBNHdELEtBQUExd0QsUUFBc0RqQixJQUFBZSxFQUFBNHdELEtBQUExd0QsSUFBaUIsT0FBQUYsRUFBQStrQyxNQUFlLFNBQWhqQixTQUFBdmtDLEVBQUFxRyxFQUFBaEQsRUFBQTdELEdBQWtCLEdBQUFBLEVBQUE0d0QsTUFBQTV3RCxFQUFBNHdELEtBQUE1dkQsT0FBQSxDQUEwQixJQUFBZCxFQUFBUixFQUFBbUgsRUFBQWhELEdBQUE1RSxFQUFBZSxFQUFBNHdELEtBQUE1dkQsT0FBQSxFQUErQixJQUFBZCxFQUFBLEVBQVFBLEVBQUFqQixFQUFJaUIsSUFBQVIsSUFBQU0sRUFBQTR3RCxLQUFBMXdELElBQW1CLE9BQUFGLEVBQUEra0MsTUFBZSxRQUFBdmtDLEVBQUFkLEVBQUFNLEVBQUE0d0QsS0FBQTF3RCxJQUFBRixFQUFBK0UsTUFBQS9FLEVBQUE4RSxNQUF1QyxNQUFNLFFBQWlDLFFBQUFwRixFQUFBTSxFQUFBNHdELEtBQUExd0QsSUFBQUYsRUFBQTB3RCxJQUEyQixNQUFNLGVBQUFoeEQsRUFBQU0sRUFBQTR3RCxLQUFBMXdELFVBQTZCLE9BQUFGLEVBQUEra0MsTUFBb0IsUUFBQXZrQyxFQUFBcUcsRUFBQWhELEdBQUE3RCxFQUFBK0UsTUFBQS9FLEVBQUE4RSxNQUErQixNQUFNLFFBQXlCLFFBQUErQixFQUFBaEQsR0FBQTdELEVBQUEwd0QsSUFBbUIsTUFBTSxRQUFBN3BELEVBQUE3RCxFQUFBNkQsRUFBQWhELEdBQWlCLE9BQUFnRCxFQUErS3JHLENBQUF2QixFQUFBZSxFQUFBNHdELEtBQUExd0QsSUFBQUYsRUFBQStFLE1BQUEvRSxFQUFBOEUsTUFBdUMsTUFBTSxRQUFpQyxRQUFBN0YsRUFBQWUsRUFBQTR3RCxLQUFBMXdELElBQUFGLEVBQUEwd0QsSUFBMkIsTUFBTSxlQUFBenhELEVBQUFlLEVBQUE0d0QsS0FBQTF3RCxPQUEwMEpKLFlBQUEsR0FBc0IreUQsWUFBYTV5RCxNQUFBLFdBQWlCLGdCQUFBczlCLEdBQTRCejlCLFlBQUEsR0FBZWd6RCxZQUFhN3lELE1BQUEsV0FBaUIsT0FBQXFwQixNQUFBbGdCLFFBQUEsU0FBQXZDLEdBQWlDQSxNQUFJeWlCLEVBQUEsTUFBQWhxQixHQUFZUSxZQUFBLEtBQWtCLElBQUFrSyxHQUFPMm5ELEdBQUdqTyxNQUFBLFVBQUEzdUIsS0FBQSxZQUFnQ3c3QixHQUFJN00sTUFBQSxVQUFBM3VCLEtBQUEsVUFBOEJpRSxHQUFJMHFCLE1BQUEsVUFBQTN1QixLQUFBLFlBQWdDMEMsR0FBSWlzQixNQUFBLFVBQUEzdUIsS0FBQSxXQUErQjY4QixHQUFJbnFELE1BQUEsTUFBQSt2QyxPQUFBNXZDLFFBQUFvcUQsV0FBQSxFQUFBWixlQUFBLEVBQUE5dUQsZUFBQSxFQUFBNHVELFVBQUEsRUFBQUQsV0FBQSxFQUFBYSxpQkFBQSxTQUFBanJELEdBQWdJLE9BQUFBLEdBQVNrcUQsa0JBQUEsU0FBQWxxRCxHQUErQixPQUFBQSxHQUFTa3JELGlCQUFBLFNBQUFsckQsR0FBOEIsT0FBQUEsR0FBU3dxRCxRQUFTdkssTUFBQSxXQUFpQixpQkFBZ0IySyxVQUFBLFdBQXNCLGlCQUFnQi9vRCxPQUFBLFdBQW1CLGlCQUFnQndTLFVBQUEsV0FBc0IsaUJBQWdCM1ksTUFBQSxXQUFrQixrQkFBaUIrdUQsTUFBQSxFQUFBVyxtQkFBQSxFQUFBYyxpQkFBQSxHQUFpRGg5QixFQUFBLFdBQWMsSUFBQWx2QixFQUFBOUYsVUFBQUMsT0FBQSxZQUFBRCxVQUFBLEdBQUFBLFVBQUEsTUFBK0Q4QyxFQUFBZ0QsRUFBQTRCLFNBQUF6SSxFQUFBNkcsRUFBQXVLLFNBQTJCLHlCQUFBdk4sR0FBQSxtQkFBQTdELEVBQUFvSyxLQUFzRDNCLFNBQUE1RSxFQUFBdU4sU0FBQXBSLFNBQXNCNEgsUUFBQXJGLE1BQUEsaVRBQXNVc0UsRUFBQW1zRCxTQUFBcEIsRUFBQS9xRCxFQUFBb3NELGFBQUE3b0QsRUFBQXZELEVBQUEyd0MsT0FBQXpoQixFQUFBbHZCLEVBQUFnd0MsUUFBQTlnQixFQUFBcDJCLE9BQUFDLGVBQUFpSCxFQUFBLGNBQTJGNUcsT0FBQSxJQUFwdlU0RCxDQUFBOUUsb0RDV2ZDLEVBQUFELFFBRkEsNkVDQUEsSUFBQXFvQyxFQUFBdm9DLEVBQUEsS0FDQXEwRCxFQUFBcjBELEVBQUEsS0FDQXMwRCxFQUFBdDBELEVBQUEsS0FFQUcsRUFBQUQsUUFBQSxXQUNBLFNBQUFxMEQsRUFBQS90RCxFQUFBZ3VELEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEdBQ0FBLElBQUFOLEdBSUFELEdBQ0EsRUFDQSxtTEFNQSxTQUFBUSxJQUNBLE9BQUFOLEVBRkFBLEVBQUFyaUQsV0FBQXFpRCxFQU1BLElBQUFPLEdBQ0F4d0QsTUFBQWl3RCxFQUNBUSxLQUFBUixFQUNBcndELEtBQUFxd0QsRUFDQW53RCxPQUFBbXdELEVBQ0FoekQsT0FBQWd6RCxFQUNBbHdELE9BQUFrd0QsRUFDQVMsT0FBQVQsRUFFQVUsSUFBQVYsRUFDQVcsUUFBQUwsRUFDQTNnRCxRQUFBcWdELEVBQ0FZLFdBQUFOLEVBQ0Fyd0IsS0FBQSt2QixFQUNBYSxTQUFBUCxFQUNBUSxNQUFBUixFQUNBUyxVQUFBVCxFQUNBN2lELE1BQUE2aUQsRUFDQVUsTUFBQVYsR0FNQSxPQUhBQyxFQUFBVSxlQUFBanRCLEVBQ0F1c0IsRUFBQVcsVUFBQVgsRUFFQUEsa0JDeERBMzBELEVBQUFELFFBQUEsU0FBQXcxRCxHQUNBLElBQUFBLEVBQUFDLGdCQUFBLENBQ0EsSUFBQXgxRCxFQUFBVyxPQUFBeVMsT0FBQW1pRCxHQUVBdjFELEVBQUE2VCxXQUFBN1QsRUFBQTZULGFBQ0FsVCxPQUFBQyxlQUFBWixFQUFBLFVBQ0FjLFlBQUEsRUFDQUMsSUFBQSxXQUNBLE9BQUFmLEVBQUFFLEtBR0FTLE9BQUFDLGVBQUFaLEVBQUEsTUFDQWMsWUFBQSxFQUNBQyxJQUFBLFdBQ0EsT0FBQWYsRUFBQUMsS0FHQVUsT0FBQUMsZUFBQVosRUFBQSxXQUNBYyxZQUFBLElBRUFkLEVBQUF3MUQsZ0JBQUEsRUFFQSxPQUFBeDFELCtVQ3RCQUgsRUFBQSxJQUNBNGhELEVBQUE1aEQsRUFBQSxLQUNBbWxELEVBQUFubEQsRUFBQSxRQUNBQSxFQUFBLE1BQ0E0MUQsRUFBQTUxRCxFQUFBLFNBRUFBLEVBQUEsVUFDQUEsRUFBQSxVQUVBQSxFQUFBLHlEQUVBLElBQU0rOUMsR0FBaUIsRUFBQThYLEVBQUE3ZCxXQUNqQjdtQyxHQUFRLEVBQUF5d0MsRUFBQXhZLGFBQVk4WSxXQUFhLEVBQUFOLEVBQUFwVyxpQkFBZ0J1UyxHQUFnQixFQUFBNlgsRUFBQXhCLGtCQUN2RXJXLEVBQWVobUMsSUFBSWdwQyxlQUVFbHpCLGdyQkFBYTIxQixVQUFNQywrQ0FFaEMsT0FDSVMsRUFBQWxNLFFBQUEzUCxjQUFDOGMsRUFBQXZ5QyxVQUFTekIsTUFBT0EsR0FDYit5QyxFQUFBbE0sUUFBQTNQLGNBQUN5dEIsRUFBQTlkLFFBQUQsMEJBSktucUIsaUJDZnJCMXRCLEVBQUFELFFBQUEsU0FBQTYxRCxFQUFBN3pDLEdBQ0EsSUFBQTh6QyxFQUFBOXpDLElBQUFwaEIsT0FBQW9oQixHQUFBLFNBQUErekMsR0FDQSxPQUFBL3pDLEVBQUErekMsSUFDRy96QyxFQUNILGdCQUFBdmQsR0FDQSxPQUFBK0ksT0FBQS9JLEdBQUF1ZCxRQUFBNnpDLEVBQUFDLHNCQ0pBLElBQUFuckQsRUFBQTdLLEVBQUEsR0FDQWsyRCxFQUFBbDJELEVBQUEsSUFBQUEsQ0FBQSxzQkFBbUQsUUFFbkQ2SyxJQUFBVSxFQUFBLFVBQThCNHFELE9BQUEsU0FBQXh4RCxHQUE4QixPQUFBdXhELEVBQUF2eEQsdUJDSjVEM0UsRUFBQSxLQUNBRyxFQUFBRCxRQUFBRixFQUFBLElBQUE0MEIsT0FBQXVoQyx5QkNEQSxTQUFBMXJELElBVUEsU0FBQUEsR0FDQSxhQUVBLElBRUF4RyxFQUZBbXlELEVBQUF0MUQsT0FBQVcsVUFDQW9DLEVBQUF1eUQsRUFBQTEwRCxlQUVBMG1DLEVBQUEsbUJBQUE3bEMsaUJBQ0E4ekQsRUFBQWp1QixFQUFBNWxDLFVBQUEsYUFDQTh6RCxFQUFBbHVCLEVBQUFtdUIsZUFBQSxrQkFDQUMsRUFBQXB1QixFQUFBeHVCLGFBQUEsZ0JBRUE2OEMsRUFBQSxpQkFBQXQyRCxFQUNBdTJELEVBQUFqc0QsRUFBQTZpQyxtQkFDQSxHQUFBb3BCLEVBQ0FELElBR0F0MkQsRUFBQUQsUUFBQXcyRCxPQUpBLEVBYUFBLEVBQUFqc0QsRUFBQTZpQyxtQkFBQW1wQixFQUFBdDJELEVBQUFELFlBY0FxdEMsT0FvQkEsSUFBQW9wQixFQUFBLGlCQUNBQyxFQUFBLGlCQUNBQyxFQUFBLFlBQ0FDLEVBQUEsWUFJQUMsS0FZQWx3QixLQUNBQSxFQUFBd3ZCLEdBQUEsV0FDQSxPQUFBcGpELE1BR0EsSUFBQStqRCxFQUFBbDJELE9BQUErWSxlQUNBbzlDLEVBQUFELE9BQUExdUMsUUFDQTJ1QyxHQUNBQSxJQUFBYixHQUNBdnlELEVBQUF0RCxLQUFBMDJELEVBQUFaLEtBR0F4dkIsRUFBQW93QixHQUdBLElBQUFDLEVBQUFDLEVBQUExMUQsVUFDQTIxRCxFQUFBMzFELFVBQUFYLE9BQUF5UyxPQUFBc3pCLEdBQ0F3d0IsRUFBQTUxRCxVQUFBeTFELEVBQUF4MEQsWUFBQXkwRCxFQUNBQSxFQUFBejBELFlBQUEyMEQsRUFDQUYsRUFBQVgsR0FDQWEsRUFBQXRnRCxZQUFBLG9CQVlBMi9DLEVBQUFZLG9CQUFBLFNBQUFDLEdBQ0EsSUFBQUMsRUFBQSxtQkFBQUQsS0FBQTcwRCxZQUNBLFFBQUE4MEQsSUFDQUEsSUFBQUgsR0FHQSx1QkFBQUcsRUFBQXpnRCxhQUFBeWdELEVBQUE3MkQsUUFJQSsxRCxFQUFBdFksS0FBQSxTQUFBbVosR0FVQSxPQVRBejJELE9BQUEyUyxlQUNBM1MsT0FBQTJTLGVBQUE4akQsRUFBQUosSUFFQUksRUFBQTdqRCxVQUFBeWpELEVBQ0FYLEtBQUFlLElBQ0FBLEVBQUFmLEdBQUEsc0JBR0FlLEVBQUE5MUQsVUFBQVgsT0FBQXlTLE9BQUEyakQsR0FDQUssR0FPQWIsRUFBQWUsTUFBQSxTQUFBcnRELEdBQ0EsT0FBWXN0RCxRQUFBdHRELElBa0ZadXRELEVBQUFDLEVBQUFuMkQsV0FDQW0yRCxFQUFBbjJELFVBQUE2MEQsR0FBQSxXQUNBLE9BQUFyakQsTUFFQXlqRCxFQUFBa0IsZ0JBS0FsQixFQUFBbUIsTUFBQSxTQUFBQyxFQUFBQyxFQUFBL21ELEVBQUFnbkQsR0FDQSxJQUFBcnBDLEVBQUEsSUFBQWlwQyxFQUNBcnFCLEVBQUF1cUIsRUFBQUMsRUFBQS9tRCxFQUFBZ25ELElBR0EsT0FBQXRCLEVBQUFZLG9CQUFBUyxHQUNBcHBDLEVBQ0FBLEVBQUEvcEIsT0FBQUYsS0FBQSxTQUFBaUQsR0FDQSxPQUFBQSxFQUFBWSxLQUFBWixFQUFBdkcsTUFBQXV0QixFQUFBL3BCLFVBc0tBK3lELEVBQUFULEdBRUFBLEVBQUFWLEdBQUEsWUFPQVUsRUFBQWIsR0FBQSxXQUNBLE9BQUFwakQsTUFHQWlrRCxFQUFBdjlDLFNBQUEsV0FDQSw0QkFrQ0ErOEMsRUFBQXBnRCxLQUFBLFNBQUEvVSxHQUNBLElBQUErVSxLQUNBLFFBQUFqVSxLQUFBZCxFQUNBK1UsRUFBQXhQLEtBQUF6RSxHQU1BLE9BSkFpVSxFQUFBOFYsVUFJQSxTQUFBeG5CLElBQ0EsS0FBQTBSLEVBQUFuVSxRQUFBLENBQ0EsSUFBQUUsRUFBQWlVLEVBQUEyaEQsTUFDQSxHQUFBNTFELEtBQUFkLEVBR0EsT0FGQXFELEVBQUF4RCxNQUFBaUIsRUFDQXVDLEVBQUEyRCxNQUFBLEVBQ0EzRCxFQVFBLE9BREFBLEVBQUEyRCxNQUFBLEVBQ0EzRCxJQXNDQTh4RCxFQUFBcHVDLFNBTUE0dkMsRUFBQXoyRCxXQUNBaUIsWUFBQXcxRCxFQUVBQyxNQUFBLFNBQUFDLEdBY0EsR0FiQW5sRCxLQUFBdzZCLEtBQUEsRUFDQXg2QixLQUFBck8sS0FBQSxFQUdBcU8sS0FBQXk2QixLQUFBejZCLEtBQUFvbEQsTUFBQXAwRCxFQUNBZ1AsS0FBQTFLLE1BQUEsRUFDQTBLLEtBQUFxbEQsU0FBQSxLQUVBcmxELEtBQUFzUSxPQUFBLE9BQ0F0USxLQUFBN0ksSUFBQW5HLEVBRUFnUCxLQUFBc2xELFdBQUFodUQsUUFBQWl1RCxJQUVBSixFQUNBLFFBQUF6M0QsS0FBQXNTLEtBRUEsTUFBQXRTLEVBQUFrbkMsT0FBQSxJQUNBaGtDLEVBQUF0RCxLQUFBMFMsS0FBQXRTLEtBQ0Fza0IsT0FBQXRrQixFQUFBd1UsTUFBQSxNQUNBbEMsS0FBQXRTLEdBQUFzRCxJQU1BMnBDLEtBQUEsV0FDQTM2QixLQUFBMUssTUFBQSxFQUVBLElBQ0Frd0QsRUFEQXhsRCxLQUFBc2xELFdBQUEsR0FDQUcsV0FDQSxhQUFBRCxFQUFBM3RELEtBQ0EsTUFBQTJ0RCxFQUFBcnVELElBR0EsT0FBQTZJLEtBQUEwbEQsTUFHQUMsa0JBQUEsU0FBQXB1RCxHQUNBLEdBQUF5SSxLQUFBMUssS0FDQSxNQUFBaUMsRUFHQSxJQUFBMEQsRUFBQStFLEtBQ0EsU0FBQStRLEVBQUE2MEMsRUFBQUMsR0FZQSxPQVhBQyxFQUFBanVELEtBQUEsUUFDQWl1RCxFQUFBM3VELElBQUFJLEVBQ0EwRCxFQUFBdEosS0FBQWkwRCxFQUVBQyxJQUdBNXFELEVBQUFxVixPQUFBLE9BQ0FyVixFQUFBOUQsSUFBQW5HLEtBR0E2MEQsRUFHQSxRQUFBMTRELEVBQUE2UyxLQUFBc2xELFdBQUFwMkQsT0FBQSxFQUE4Qy9CLEdBQUEsSUFBUUEsRUFBQSxDQUN0RCxJQUFBNHdCLEVBQUEvZCxLQUFBc2xELFdBQUFuNEQsR0FDQTI0RCxFQUFBL25DLEVBQUEwbkMsV0FFQSxZQUFBMW5DLEVBQUFnb0MsT0FJQSxPQUFBaDFDLEVBQUEsT0FHQSxHQUFBZ04sRUFBQWdvQyxRQUFBL2xELEtBQUF3NkIsS0FBQSxDQUNBLElBQUF3ckIsRUFBQXAxRCxFQUFBdEQsS0FBQXl3QixFQUFBLFlBQ0Frb0MsRUFBQXIxRCxFQUFBdEQsS0FBQXl3QixFQUFBLGNBRUEsR0FBQWlvQyxHQUFBQyxFQUFBLENBQ0EsR0FBQWptRCxLQUFBdzZCLEtBQUF6YyxFQUFBbW9DLFNBQ0EsT0FBQW4xQyxFQUFBZ04sRUFBQW1vQyxVQUFBLEdBQ2EsR0FBQWxtRCxLQUFBdzZCLEtBQUF6YyxFQUFBb29DLFdBQ2IsT0FBQXAxQyxFQUFBZ04sRUFBQW9vQyxpQkFHVyxHQUFBSCxHQUNYLEdBQUFobUQsS0FBQXc2QixLQUFBemMsRUFBQW1vQyxTQUNBLE9BQUFuMUMsRUFBQWdOLEVBQUFtb0MsVUFBQSxPQUdXLEtBQUFELEVBTVgsVUFBQXQxRCxNQUFBLDBDQUxBLEdBQUFxUCxLQUFBdzZCLEtBQUF6YyxFQUFBb29DLFdBQ0EsT0FBQXAxQyxFQUFBZ04sRUFBQW9vQyxnQkFVQXJyQixPQUFBLFNBQUFqakMsRUFBQVYsR0FDQSxRQUFBaEssRUFBQTZTLEtBQUFzbEQsV0FBQXAyRCxPQUFBLEVBQThDL0IsR0FBQSxJQUFRQSxFQUFBLENBQ3RELElBQUE0d0IsRUFBQS9kLEtBQUFzbEQsV0FBQW40RCxHQUNBLEdBQUE0d0IsRUFBQWdvQyxRQUFBL2xELEtBQUF3NkIsTUFDQTVwQyxFQUFBdEQsS0FBQXl3QixFQUFBLGVBQ0EvZCxLQUFBdzZCLEtBQUF6YyxFQUFBb29DLFdBQUEsQ0FDQSxJQUFBQyxFQUFBcm9DLEVBQ0EsT0FJQXFvQyxJQUNBLFVBQUF2dUQsR0FDQSxhQUFBQSxJQUNBdXVELEVBQUFMLFFBQUE1dUQsR0FDQUEsR0FBQWl2RCxFQUFBRCxhQUdBQyxFQUFBLE1BR0EsSUFBQU4sRUFBQU0sSUFBQVgsY0FJQSxPQUhBSyxFQUFBanVELE9BQ0FpdUQsRUFBQTN1RCxNQUVBaXZELEdBQ0FwbUQsS0FBQXNRLE9BQUEsT0FDQXRRLEtBQUFyTyxLQUFBeTBELEVBQUFELFdBQ0FyQyxHQUdBOWpELEtBQUFxbUQsU0FBQVAsSUFHQU8sU0FBQSxTQUFBUCxFQUFBUSxHQUNBLGFBQUFSLEVBQUFqdUQsS0FDQSxNQUFBaXVELEVBQUEzdUQsSUFjQSxNQVhBLFVBQUEydUQsRUFBQWp1RCxNQUNBLGFBQUFpdUQsRUFBQWp1RCxLQUNBbUksS0FBQXJPLEtBQUFtMEQsRUFBQTN1RCxJQUNPLFdBQUEydUQsRUFBQWp1RCxNQUNQbUksS0FBQTBsRCxLQUFBMWxELEtBQUE3SSxJQUFBMnVELEVBQUEzdUQsSUFDQTZJLEtBQUFzUSxPQUFBLFNBQ0F0USxLQUFBck8sS0FBQSxPQUNPLFdBQUFtMEQsRUFBQWp1RCxNQUFBeXVELElBQ1B0bUQsS0FBQXJPLEtBQUEyMEQsR0FHQXhDLEdBR0F5QyxPQUFBLFNBQUFKLEdBQ0EsUUFBQWg1RCxFQUFBNlMsS0FBQXNsRCxXQUFBcDJELE9BQUEsRUFBOEMvQixHQUFBLElBQVFBLEVBQUEsQ0FDdEQsSUFBQTR3QixFQUFBL2QsS0FBQXNsRCxXQUFBbjRELEdBQ0EsR0FBQTR3QixFQUFBb29DLGVBR0EsT0FGQW5tRCxLQUFBcW1ELFNBQUF0b0MsRUFBQTBuQyxXQUFBMW5DLEVBQUF1b0MsVUFDQWYsRUFBQXhuQyxHQUNBK2xDLElBS0EwQyxNQUFBLFNBQUFULEdBQ0EsUUFBQTU0RCxFQUFBNlMsS0FBQXNsRCxXQUFBcDJELE9BQUEsRUFBOEMvQixHQUFBLElBQVFBLEVBQUEsQ0FDdEQsSUFBQTR3QixFQUFBL2QsS0FBQXNsRCxXQUFBbjRELEdBQ0EsR0FBQTR3QixFQUFBZ29DLFdBQUEsQ0FDQSxJQUFBRCxFQUFBL25DLEVBQUEwbkMsV0FDQSxhQUFBSyxFQUFBanVELEtBQUEsQ0FDQSxJQUFBNHVELEVBQUFYLEVBQUEzdUQsSUFDQW91RCxFQUFBeG5DLEdBRUEsT0FBQTBvQyxHQU1BLFVBQUE5MUQsTUFBQSwwQkFHQSsxRCxjQUFBLFNBQUE3MEQsRUFBQTgwRCxFQUFBQyxHQWFBLE9BWkE1bUQsS0FBQXFsRCxVQUNBOTFELFNBQUE4bEIsRUFBQXhqQixHQUNBODBELGFBQ0FDLFdBR0EsU0FBQTVtRCxLQUFBc1EsU0FHQXRRLEtBQUE3SSxJQUFBbkcsR0FHQTh5RCxJQS9xQkEsU0FBQXhwQixFQUFBdXFCLEVBQUFDLEVBQUEvbUQsRUFBQWduRCxHQUVBLElBQUE4QixFQUFBL0IsS0FBQXQyRCxxQkFBQTIxRCxFQUFBVyxFQUFBWCxFQUNBMkMsRUFBQWo1RCxPQUFBeVMsT0FBQXVtRCxFQUFBcjRELFdBQ0F5TSxFQUFBLElBQUFncUQsRUFBQUYsT0FNQSxPQUZBK0IsRUFBQUMsUUE4TUEsU0FBQWxDLEVBQUE5bUQsRUFBQTlDLEdBQ0EsSUFBQWtKLEVBQUF1L0MsRUFFQSxnQkFBQXB6QyxFQUFBblosR0FDQSxHQUFBZ04sSUFBQXkvQyxFQUNBLFVBQUFqekQsTUFBQSxnQ0FHQSxHQUFBd1QsSUFBQTAvQyxFQUFBLENBQ0EsYUFBQXZ6QyxFQUNBLE1BQUFuWixFQUtBLE9BQUE2dkQsSUFNQSxJQUhBL3JELEVBQUFxVixTQUNBclYsRUFBQTlELFFBRUEsQ0FDQSxJQUFBa3VELEVBQUFwcUQsRUFBQW9xRCxTQUNBLEdBQUFBLEVBQUEsQ0FDQSxJQUFBNEIsRUFBQUMsRUFBQTdCLEVBQUFwcUQsR0FDQSxHQUFBZ3NELEVBQUEsQ0FDQSxHQUFBQSxJQUFBbkQsRUFBQSxTQUNBLE9BQUFtRCxHQUlBLFlBQUFoc0QsRUFBQXFWLE9BR0FyVixFQUFBdy9CLEtBQUF4L0IsRUFBQW1xRCxNQUFBbnFELEVBQUE5RCxTQUVTLGFBQUE4RCxFQUFBcVYsT0FBQSxDQUNULEdBQUFuTSxJQUFBdS9DLEVBRUEsTUFEQXYvQyxFQUFBMC9DLEVBQ0E1b0QsRUFBQTlELElBR0E4RCxFQUFBMHFELGtCQUFBMXFELEVBQUE5RCxTQUVTLFdBQUE4RCxFQUFBcVYsUUFDVHJWLEVBQUE2L0IsT0FBQSxTQUFBNy9CLEVBQUE5RCxLQUdBZ04sRUFBQXkvQyxFQUVBLElBQUFrQyxFQUFBcUIsRUFBQXRDLEVBQUE5bUQsRUFBQTlDLEdBQ0EsY0FBQTZxRCxFQUFBanVELEtBQUEsQ0FPQSxHQUpBc00sRUFBQWxKLEVBQUEzRixLQUNBdXVELEVBQ0FGLEVBRUFtQyxFQUFBM3VELE1BQUEyc0QsRUFDQSxTQUdBLE9BQ0EzMUQsTUFBQTIzRCxFQUFBM3VELElBQ0E3QixLQUFBMkYsRUFBQTNGLE1BR1MsVUFBQXd3RCxFQUFBanVELE9BQ1RzTSxFQUFBMC9DLEVBR0E1b0QsRUFBQXFWLE9BQUEsUUFDQXJWLEVBQUE5RCxJQUFBMnVELEVBQUEzdUQsT0F0UkFpd0QsQ0FBQXZDLEVBQUE5bUQsRUFBQTlDLEdBRUE2ckQsRUFjQSxTQUFBSyxFQUFBbHhELEVBQUF6RyxFQUFBMkgsR0FDQSxJQUNBLE9BQWNVLEtBQUEsU0FBQVYsSUFBQWxCLEVBQUEzSSxLQUFBa0MsRUFBQTJILElBQ1QsTUFBQS9CLEdBQ0wsT0FBY3lDLEtBQUEsUUFBQVYsSUFBQS9CLElBaUJkLFNBQUErdUQsS0FDQSxTQUFBQyxLQUNBLFNBQUFGLEtBNEJBLFNBQUFRLEVBQUFsMkQsSUFDQSx5QkFBQThJLFFBQUEsU0FBQWdaLEdBQ0E5aEIsRUFBQThoQixHQUFBLFNBQUFuWixHQUNBLE9BQUE2SSxLQUFBK21ELFFBQUF6MkMsRUFBQW5aLE1Bb0NBLFNBQUF3dEQsRUFBQW1DLEdBQ0EsU0FBQWoxQixFQUFBdmhCLEVBQUFuWixFQUFBekQsRUFBQUMsR0FDQSxJQUFBbXlELEVBQUFxQixFQUFBTCxFQUFBeDJDLEdBQUF3MkMsRUFBQTN2RCxHQUNBLGFBQUEydUQsRUFBQWp1RCxLQUVPLENBQ1AsSUFBQW5ELEVBQUFveEQsRUFBQTN1RCxJQUNBaEosRUFBQXVHLEVBQUF2RyxNQUNBLE9BQUFBLEdBQ0EsaUJBQUFBLEdBQ0F5QyxFQUFBdEQsS0FBQWEsRUFBQSxXQUNBc0YsUUFBQUMsUUFBQXZGLEVBQUFzMkQsU0FBQWh6RCxLQUFBLFNBQUF0RCxHQUNBMGpDLEVBQUEsT0FBQTFqQyxFQUFBdUYsRUFBQUMsSUFDVyxTQUFBeUIsR0FDWHk4QixFQUFBLFFBQUF6OEIsRUFBQTFCLEVBQUFDLEtBSUFGLFFBQUFDLFFBQUF2RixHQUFBc0QsS0FBQSxTQUFBNDFELEdBZ0JBM3lELEVBQUF2RyxNQUFBazVELEVBQ0EzekQsRUFBQWdCLElBQ1NmLEdBaENUQSxFQUFBbXlELEVBQUEzdUQsS0F3Q0EsSUFBQW13RCxFQUpBLGlCQUFBOXZELEVBQUFvNUIsU0FBQXA1QixFQUFBbzVCLFFBQUFLLFNBQ0FZLEVBQUFyNkIsRUFBQW81QixRQUFBSyxPQUFBMXNCLEtBQUFzdEIsSUFtQ0E3eEIsS0FBQSttRCxRQTlCQSxTQUFBejJDLEVBQUFuWixHQUNBLFNBQUFvd0QsSUFDQSxXQUFBOXpELFFBQUEsU0FBQUMsRUFBQUMsR0FDQWsrQixFQUFBdmhCLEVBQUFuWixFQUFBekQsRUFBQUMsS0FJQSxPQUFBMnpELEVBYUFBLElBQUE3MUQsS0FDQTgxRCxFQUdBQSxHQUNBQSxLQStHQSxTQUFBTCxFQUFBN0IsRUFBQXBxRCxHQUNBLElBQUFxVixFQUFBKzBDLEVBQUE5MUQsU0FBQTBMLEVBQUFxVixRQUNBLEdBQUFBLElBQUF0ZixFQUFBLENBS0EsR0FGQWlLLEVBQUFvcUQsU0FBQSxLQUVBLFVBQUFwcUQsRUFBQXFWLE9BQUEsQ0FDQSxHQUFBKzBDLEVBQUE5MUQsU0FBQW1HLFNBR0F1RixFQUFBcVYsT0FBQSxTQUNBclYsRUFBQTlELElBQUFuRyxFQUNBazJELEVBQUE3QixFQUFBcHFELEdBRUEsVUFBQUEsRUFBQXFWLFFBR0EsT0FBQXd6QyxFQUlBN29ELEVBQUFxVixPQUFBLFFBQ0FyVixFQUFBOUQsSUFBQSxJQUFBMEcsVUFDQSxrREFHQSxPQUFBaW1ELEVBR0EsSUFBQWdDLEVBQUFxQixFQUFBNzJDLEVBQUErMEMsRUFBQTkxRCxTQUFBMEwsRUFBQTlELEtBRUEsYUFBQTJ1RCxFQUFBanVELEtBSUEsT0FIQW9ELEVBQUFxVixPQUFBLFFBQ0FyVixFQUFBOUQsSUFBQTJ1RCxFQUFBM3VELElBQ0E4RCxFQUFBb3FELFNBQUEsS0FDQXZCLEVBR0EsSUFBQTBELEVBQUExQixFQUFBM3VELElBRUEsT0FBQXF3RCxFQU9BQSxFQUFBbHlELE1BR0EyRixFQUFBb3FELEVBQUFzQixZQUFBYSxFQUFBcjVELE1BR0E4TSxFQUFBdEosS0FBQTB6RCxFQUFBdUIsUUFRQSxXQUFBM3JELEVBQUFxVixTQUNBclYsRUFBQXFWLE9BQUEsT0FDQXJWLEVBQUE5RCxJQUFBbkcsR0FVQWlLLEVBQUFvcUQsU0FBQSxLQUNBdkIsR0FOQTBELEdBM0JBdnNELEVBQUFxVixPQUFBLFFBQ0FyVixFQUFBOUQsSUFBQSxJQUFBMEcsVUFBQSxvQ0FDQTVDLEVBQUFvcUQsU0FBQSxLQUNBdkIsR0FvREEsU0FBQTJELEVBQUFDLEdBQ0EsSUFBQTNwQyxHQUFpQmdvQyxPQUFBMkIsRUFBQSxJQUVqQixLQUFBQSxJQUNBM3BDLEVBQUFtb0MsU0FBQXdCLEVBQUEsSUFHQSxLQUFBQSxJQUNBM3BDLEVBQUFvb0MsV0FBQXVCLEVBQUEsR0FDQTNwQyxFQUFBdW9DLFNBQUFvQixFQUFBLElBR0ExbkQsS0FBQXNsRCxXQUFBenhELEtBQUFrcUIsR0FHQSxTQUFBd25DLEVBQUF4bkMsR0FDQSxJQUFBK25DLEVBQUEvbkMsRUFBQTBuQyxlQUNBSyxFQUFBanVELEtBQUEsZ0JBQ0FpdUQsRUFBQTN1RCxJQUNBNG1CLEVBQUEwbkMsV0FBQUssRUFHQSxTQUFBYixFQUFBRixHQUlBL2tELEtBQUFzbEQsYUFBd0JTLE9BQUEsU0FDeEJoQixFQUFBenRELFFBQUFtd0QsRUFBQXpuRCxNQUNBQSxLQUFBa2xELE9BQUEsR0E4QkEsU0FBQTd2QyxFQUFBeGpCLEdBQ0EsR0FBQUEsRUFBQSxDQUNBLElBQUE4MUQsRUFBQTkxRCxFQUFBdXhELEdBQ0EsR0FBQXVFLEVBQ0EsT0FBQUEsRUFBQXI2RCxLQUFBdUUsR0FHQSxzQkFBQUEsRUFBQUYsS0FDQSxPQUFBRSxFQUdBLElBQUFtZ0IsTUFBQW5nQixFQUFBM0MsUUFBQSxDQUNBLElBQUEvQixHQUFBLEVBQUF3RSxFQUFBLFNBQUFBLElBQ0EsT0FBQXhFLEVBQUEwRSxFQUFBM0MsUUFDQSxHQUFBMEIsRUFBQXRELEtBQUF1RSxFQUFBMUUsR0FHQSxPQUZBd0UsRUFBQXhELE1BQUEwRCxFQUFBMUUsR0FDQXdFLEVBQUEyRCxNQUFBLEVBQ0EzRCxFQU9BLE9BSEFBLEVBQUF4RCxNQUFBNkMsRUFDQVcsRUFBQTJELE1BQUEsRUFFQTNELEdBR0EsT0FBQUEsVUFLQSxPQUFZQSxLQUFBcTFELEdBSVosU0FBQUEsSUFDQSxPQUFZNzRELE1BQUE2QyxFQUFBc0UsTUFBQSxJQXBnQlosQ0FrdEJBLGlCQUFBa0MsSUFDQSxpQkFBQTNCLGNBQ0EsaUJBQUFrSSxVQUFBaUMsMENDanJCQSxJQTdDQSxJQUFBaWEsRUFBQWx0QixFQUFBLElBQ0FveEMsRUFBQXB4QyxFQUFBLElBQ0E0SyxFQUFBNUssRUFBQSxJQUNBeUssRUFBQXpLLEVBQUEsR0FDQTJLLEVBQUEzSyxFQUFBLElBQ0ErbUIsRUFBQS9tQixFQUFBLElBQ0EwbUIsRUFBQTFtQixFQUFBLEdBQ0F1cEIsRUFBQTdDLEVBQUEsWUFDQW0wQyxFQUFBbjBDLEVBQUEsZUFDQW8wQyxFQUFBL3pDLEVBQUF4aUIsTUFFQXcyRCxHQUNBQyxhQUFBLEVBQ0FDLHFCQUFBLEVBQ0FDLGNBQUEsRUFDQUMsZ0JBQUEsRUFDQUMsYUFBQSxFQUNBQyxlQUFBLEVBQ0FDLGNBQUEsRUFDQUMsc0JBQUEsRUFDQUMsVUFBQSxFQUNBQyxtQkFBQSxFQUNBQyxnQkFBQSxFQUNBQyxpQkFBQSxFQUNBQyxtQkFBQSxFQUNBQyxXQUFBLEVBQ0FDLGVBQUEsRUFDQUMsY0FBQSxFQUNBQyxVQUFBLEVBQ0FDLGtCQUFBLEVBQ0FDLFFBQUEsRUFDQUMsYUFBQSxFQUNBQyxlQUFBLEVBQ0FDLGVBQUEsRUFDQUMsZ0JBQUEsRUFDQUMsY0FBQSxFQUNBQyxlQUFBLEVBQ0FDLGtCQUFBLEVBQ0FDLGtCQUFBLEVBQ0FDLGdCQUFBLEVBQ0FDLGtCQUFBLEVBQ0FDLGVBQUEsRUFDQUMsV0FBQSxHQUdBQyxFQUFBM3JCLEVBQUEycEIsR0FBQTM2RCxFQUFBLEVBQW9EQSxFQUFBMjhELEVBQUE1NkQsT0FBd0IvQixJQUFBLENBQzVFLElBSUFpQyxFQUpBOGYsRUFBQTQ2QyxFQUFBMzhELEdBQ0E0OEQsRUFBQWpDLEVBQUE1NEMsR0FDQTg2QyxFQUFBeHlELEVBQUEwWCxHQUNBc0osRUFBQXd4QyxLQUFBeDdELFVBRUEsR0FBQWdxQixJQUNBQSxFQUFBbEMsSUFBQTVlLEVBQUE4Z0IsRUFBQWxDLEVBQUF1eEMsR0FDQXJ2QyxFQUFBb3ZDLElBQUFsd0QsRUFBQThnQixFQUFBb3ZDLEVBQUExNEMsR0FDQTRFLEVBQUE1RSxHQUFBMjRDLEVBQ0FrQyxHQUFBLElBQUEzNkQsS0FBQTZxQixFQUFBekIsRUFBQXBwQixJQUFBdUksRUFBQTZnQixFQUFBcHBCLEVBQUE2cUIsRUFBQTdxQixJQUFBLHFCQ3ZEQSxJQUFBd0ksRUFBQTdLLEVBQUEsR0FDQWs5RCxFQUFBbDlELEVBQUEsSUFDQTZLLElBQUFRLEVBQUFSLEVBQUFjLEdBQ0FzNUIsYUFBQWk0QixFQUFBMTNDLElBQ0EyZixlQUFBKzNCLEVBQUFob0QseUJDSEEsSUFBQXpLLEVBQUF6SyxFQUFBLEdBQ0E2SyxFQUFBN0ssRUFBQSxHQUNBazZCLEVBQUFsNkIsRUFBQSxJQUNBbVYsV0FDQWdvRCxFQUFBLFdBQUEvNkMsS0FBQThYLEdBQ0FxVCxFQUFBLFNBQUEvbkIsR0FDQSxnQkFBQXRjLEVBQUFrMEQsR0FDQSxJQUFBQyxFQUFBbjdELFVBQUFDLE9BQUEsRUFDQTZILElBQUFxekQsR0FBQWxvRCxFQUFBNVUsS0FBQTJCLFVBQUEsR0FDQSxPQUFBc2pCLEVBQUE2M0MsRUFBQSxZQUVBLG1CQUFBbjBELElBQUEyQyxTQUFBM0MsSUFBQUUsTUFBQTZKLEtBQUFqSixJQUNLZCxFQUFBazBELEtBR0x2eUQsSUFBQVEsRUFBQVIsRUFBQWMsRUFBQWQsRUFBQU0sRUFBQWd5RCxHQUNBaDJELFdBQUFvbUMsRUFBQTlpQyxFQUFBdEQsWUFDQW0yRCxZQUFBL3ZCLEVBQUE5aUMsRUFBQTZ5RCw2Q0NoQkEsSUFBQXp5RCxFQUFBN0ssRUFBQSxHQUNBeUssRUFBQXpLLEVBQUEsR0FDQTBLLEVBQUExSyxFQUFBLElBQ0F1OUQsRUFBQXY5RCxFQUFBLEdBQUFBLEdBQ0F3OUQsRUFBQXg5RCxFQUFBLEVBQUFBLENBQUEsY0FDQXdqQixFQUFBeGpCLEVBQUEsSUFDQXVSLEVBQUF2UixFQUFBLEdBQ0FpbUIsRUFBQWptQixFQUFBLElBQ0FtbUIsRUFBQW5tQixFQUFBLElBQ0EySyxFQUFBM0ssRUFBQSxJQUNBMDRCLEVBQUExNEIsRUFBQSxJQUNBK3lCLEVBQUEyRixFQUFBM0YsT0FFQW9VLEVBQUEsU0FBQWorQixHQUNBLGFBQUFBLE9BQUFqRixFQUFBdWYsRUFBQXRhLElBR0F1MEQsRUFBQSxTQUFBNWxELEdBQ0EsSUFBQTZsRCxFQUFBN2xELEVBQUE4bEQsR0FDQUQsSUFDQTdsRCxFQUFBOGxELFFBQUExNUQsRUFDQXk1RCxNQUlBRSxFQUFBLFNBQUEvbEQsR0FDQSxZQUFBNVQsSUFBQTRULEVBQUFnbUQsSUFHQUMsRUFBQSxTQUFBam1ELEdBQ0ErbEQsRUFBQS9sRCxLQUNBQSxFQUFBZ21ELFFBQUE1NUQsRUFDQXc1RCxFQUFBNWxELEtBSUFyRCxFQUFBLFNBQUEwMUIsRUFBQTZ6QixHQUNBeHNELEVBQUEyNEIsR0FDQWozQixLQUFBMHFELFFBQUExNUQsRUFDQWdQLEtBQUE0cUQsR0FBQTN6QixFQUNBQSxFQUFBLElBQUE4ekIsRUFBQS9xRCxNQUNBLElBQ0EsSUFBQXlxRCxFQUFBSyxFQUFBN3pCLEdBQ0FyeUIsRUFBQTZsRCxFQUNBLE1BQUFBLElBQ0EsbUJBQUFBLEVBQUE5b0QsWUFBQThvRCxFQUFBLFdBQTRFN2xELEVBQUFqRCxlQUM1RTRPLEVBQUFrNkMsR0FDQXpxRCxLQUFBMHFELEdBQUFELEdBRUcsTUFBQTExRCxHQUVILFlBREFraUMsRUFBQXhtQyxNQUFBc0UsR0FFRzQxRCxFQUFBM3FELE9BQUF3cUQsRUFBQXhxRCxPQUdIdUIsRUFBQS9TLFVBQUEwa0IsTUFDQXZSLFlBQUEsV0FBdUNrcEQsRUFBQTdxRCxTQUd2QyxJQUFBK3FELEVBQUEsU0FBQW5tRCxHQUNBNUUsS0FBQWdyRCxHQUFBcG1ELEdBR0FtbUQsRUFBQXY4RCxVQUFBMGtCLE1BQ0F2aEIsS0FBQSxTQUFBeEQsR0FDQSxJQUFBeVcsRUFBQTVFLEtBQUFnckQsR0FDQSxJQUFBTCxFQUFBL2xELEdBQUEsQ0FDQSxJQUFBcXlCLEVBQUFyeUIsRUFBQWdtRCxHQUNBLElBQ0EsSUFBQXI5RCxFQUFBMm1DLEVBQUErQyxFQUFBdGxDLE1BQ0EsR0FBQXBFLEVBQUEsT0FBQUEsRUFBQUQsS0FBQTJwQyxFQUFBOW9DLEdBQ08sTUFBQTRHLEdBQ1AsSUFDQTgxRCxFQUFBam1ELEdBQ1MsUUFDVCxNQUFBN1AsTUFLQXRFLE1BQUEsU0FBQXRDLEdBQ0EsSUFBQXlXLEVBQUE1RSxLQUFBZ3JELEdBQ0EsR0FBQUwsRUFBQS9sRCxHQUFBLE1BQUF6VyxFQUNBLElBQUE4b0MsRUFBQXJ5QixFQUFBZ21ELEdBQ0FobUQsRUFBQWdtRCxRQUFBNTVELEVBQ0EsSUFDQSxJQUFBekQsRUFBQTJtQyxFQUFBK0MsRUFBQXhtQyxPQUNBLElBQUFsRCxFQUFBLE1BQUFZLEVBQ0FBLEVBQUFaLEVBQUFELEtBQUEycEMsRUFBQTlvQyxHQUNLLE1BQUE0RyxHQUNMLElBQ0F5MUQsRUFBQTVsRCxHQUNPLFFBQ1AsTUFBQTdQLEdBR0EsT0FES3kxRCxFQUFBNWxELEdBQ0x6VyxHQUVBazRELFNBQUEsU0FBQWw0RCxHQUNBLElBQUF5VyxFQUFBNUUsS0FBQWdyRCxHQUNBLElBQUFMLEVBQUEvbEQsR0FBQSxDQUNBLElBQUFxeUIsRUFBQXJ5QixFQUFBZ21ELEdBQ0FobUQsRUFBQWdtRCxRQUFBNTVELEVBQ0EsSUFDQSxJQUFBekQsRUFBQTJtQyxFQUFBK0MsRUFBQW92QixVQUNBbDRELEVBQUFaLElBQUFELEtBQUEycEMsRUFBQTlvQyxRQUFBNkMsRUFDTyxNQUFBK0QsR0FDUCxJQUNBeTFELEVBQUE1bEQsR0FDUyxRQUNULE1BQUE3UCxHQUdBLE9BRE95MUQsRUFBQTVsRCxHQUNQelcsTUFLQSxJQUFBODhELEVBQUEsU0FBQUgsR0FDQTkzQyxFQUFBaFQsS0FBQWlyRCxFQUFBLG1CQUFBeHFCLEdBQUFsd0IsRUFBQXU2QyxJQUdBNTNDLEVBQUErM0MsRUFBQXo4RCxXQUNBMEQsVUFBQSxTQUFBK2tDLEdBQ0EsV0FBQTExQixFQUFBMDFCLEVBQUFqM0IsS0FBQXlnQyxLQUVBbnBDLFFBQUEsU0FBQXJCLEdBQ0EsSUFBQXVhLEVBQUF4USxLQUNBLFdBQUF2SSxFQUFBaEUsU0FBQStELEVBQUEvRCxTQUFBLFNBQUFDLEVBQUFDLEdBQ0E0YyxFQUFBdGEsR0FDQSxJQUFBMk8sRUFBQTRMLEVBQUF0ZSxXQUNBUCxLQUFBLFNBQUF4RCxHQUNBLElBQ0EsT0FBQThILEVBQUE5SCxHQUNXLE1BQUE0RyxHQUNYcEIsRUFBQW9CLEdBQ0E2UCxFQUFBakQsZ0JBR0FsUixNQUFBa0QsRUFDQTB5RCxTQUFBM3lELFNBTUF3ZixFQUFBKzNDLEdBQ0E3M0QsS0FBQSxTQUFBMlMsR0FDQSxJQUFBeVIsRUFBQSxtQkFBQXhYLFVBQUFpckQsRUFDQTM2QyxFQUFBNGpCLEVBQUE1MUIsRUFBQXlILEdBQUF3a0QsSUFDQSxHQUFBajZDLEVBQUEsQ0FDQSxJQUFBdGUsRUFBQXNNLEVBQUFnUyxFQUFBaGpCLEtBQUF5WSxJQUNBLE9BQUEvVCxFQUFBdkMsY0FBQStuQixFQUFBeGxCLEVBQUEsSUFBQXdsQixFQUFBLFNBQUF5ZixHQUNBLE9BQUFqbEMsRUFBQUUsVUFBQStrQyxLQUdBLFdBQUF6ZixFQUFBLFNBQUF5ZixHQUNBLElBQUEzaEMsR0FBQSxFQWVBLE9BZEFnMUQsRUFBQSxXQUNBLElBQUFoMUQsRUFBQSxDQUNBLElBQ0EsR0FBQW13QixFQUFBMWYsR0FBQSxXQUFBclUsR0FFQSxHQURBdWxDLEVBQUF0bEMsS0FBQUQsR0FDQTRELEVBQUEsT0FBQXdxQixNQUNhQSxFQUFBLE9BQ0YsTUFBQS9xQixHQUNYLEdBQUFPLEVBQUEsTUFBQVAsRUFFQSxZQURBa2lDLEVBQUF4bUMsTUFBQXNFLEdBRVdraUMsRUFBQW92QixjQUdYLFdBQTBCL3dELEdBQUEsTUFHMUJ3bUIsR0FBQSxXQUNBLFFBQUEzdUIsRUFBQSxFQUFBQyxFQUFBNkIsVUFBQUMsT0FBQXV0QixFQUFBLElBQUFuckIsTUFBQWxFLEdBQStERCxFQUFBQyxHQUFPcXZCLEVBQUF0dkIsR0FBQThCLFVBQUE5QixLQUN0RSw4QkFBQTZTLFVBQUFpckQsR0FBQSxTQUFBaDBCLEdBQ0EsSUFBQTNoQyxHQUFBLEVBU0EsT0FSQWcxRCxFQUFBLFdBQ0EsSUFBQWgxRCxFQUFBLENBQ0EsUUFBQW0yQixFQUFBLEVBQXlCQSxFQUFBaFAsRUFBQXZ0QixTQUFrQnU4QixFQUUzQyxHQURBd0wsRUFBQXRsQyxLQUFBOHFCLEVBQUFnUCxJQUNBbjJCLEVBQUEsT0FDVzJoQyxFQUFBb3ZCLGNBR1gsV0FBMEIvd0QsR0FBQSxRQUsxQm9DLEVBQUF1ekQsRUFBQXo4RCxVQUFBKzdELEVBQUEsV0FBcUQsT0FBQXZxRCxPQUVyRHBJLElBQUFRLEdBQW9COHlELFdBQUFELElBRXBCbCtELEVBQUEsR0FBQUEsQ0FBQSwrQkNyTUEsSUFBQTZLLEVBQUE3SyxFQUFBLEdBQ0F1OUQsRUFBQXY5RCxFQUFBLEdBQUFBLEdBQ0E2akMsRUFBQTdqQyxFQUFBLEdBQUE2akMsUUFDQUMsRUFBQSxXQUFBOWpDLEVBQUEsR0FBQUEsQ0FBQTZqQyxHQUVBaDVCLElBQUFRLEdBQ0FrcUIsS0FBQSxTQUFBcnNCLEdBQ0EsSUFBQWc3QixFQUFBSixHQUFBRCxFQUFBSyxPQUNBcTVCLEVBQUFyNUIsSUFBQTFzQixLQUFBdE8sMEJDVEEsSUFBQWsxRCxFQUFBcCtELEVBQUEsSUFDQXVSLEVBQUF2UixFQUFBLEdBQ0F3akIsRUFBQXhqQixFQUFBLElBQ0FxK0QsRUFBQUQsRUFBQS83RCxJQUNBaThELEVBQUFGLEVBQUE1NEMsSUFFQTQ0QyxFQUFBbnpELEtBQWVzekQsU0FBQSxTQUFBQyxFQUFBQyxHQUNmLGdCQUFBeDhELEVBQUFxakIsR0FDQWc1QyxFQUNBRSxFQUFBQyxRQUNBeDZELElBQUFxaEIsRUFBQS9ULEVBQUFpUyxHQUFBdmhCLEdBQ0FvOEQsRUFBQS80Qyx5QkNYQSxJQUFBaTVDLEVBQUF2K0QsRUFBQSxJQUNBdVIsRUFBQXZSLEVBQUEsR0FDQTArRCxFQUFBSCxFQUFBaDhDLElBQ0E4N0MsRUFBQUUsRUFBQWw4RCxJQUVBazhELEVBQUF0ekQsS0FBYzB6RCxlQUFBLFNBQUFILEVBQUF2OEQsR0FDZCxPQUFBeThELEVBQUFGLEVBQUFqdEQsRUFBQXRQLEdBQ0FDLFVBQUFDLE9BQUEsT0FBQThCLEVBQUFvNkQsRUFBQW44RCxVQUFBLHlCQ1BBLElBQUFxOEQsRUFBQXYrRCxFQUFBLElBQ0F1UixFQUFBdlIsRUFBQSxHQUNBNlosRUFBQTdaLEVBQUEsSUFDQTArRCxFQUFBSCxFQUFBaDhDLElBQ0E4N0MsRUFBQUUsRUFBQWw4RCxJQUVBdThELEVBQUEsU0FBQWw1QyxFQUFBL1QsRUFBQWxHLEdBRUEsR0FEQWl6RCxFQUFBaDVDLEVBQUEvVCxFQUFBbEcsR0FDQSxTQUNBLElBQUF3NEIsRUFBQXBxQixFQUFBbEksR0FDQSxjQUFBc3lCLEdBQUEyNkIsRUFBQWw1QyxFQUFBdWUsRUFBQXg0QixJQUdBOHlELEVBQUF0ekQsS0FBYzR6RCxZQUFBLFNBQUFMLEVBQUF2OEQsR0FDZCxPQUFBMjhELEVBQUFKLEVBQUFqdEQsRUFBQXRQLEdBQUFDLFVBQUFDLE9BQUEsT0FBQThCLEVBQUFvNkQsRUFBQW44RCxVQUFBLHlCQ2RBLElBQUFxOEQsRUFBQXYrRCxFQUFBLElBQ0F1UixFQUFBdlIsRUFBQSxHQUNBOCtELEVBQUFQLEVBQUFqb0QsS0FDQStuRCxFQUFBRSxFQUFBbDhELElBRUFrOEQsRUFBQXR6RCxLQUFjOHpELG1CQUFBLFNBQUE5OEQsR0FDZCxPQUFBNjhELEVBQUF2dEQsRUFBQXRQLEdBQUFDLFVBQUFDLE9BQUEsT0FBQThCLEVBQUFvNkQsRUFBQW44RCxVQUFBLHlCQ05BLElBQUFxOEQsRUFBQXYrRCxFQUFBLElBQ0F1UixFQUFBdlIsRUFBQSxHQUNBZy9ELEVBQUFULEVBQUFyOUQsSUFDQW05RCxFQUFBRSxFQUFBbDhELElBRUFrOEQsRUFBQXR6RCxLQUFjZzBELGVBQUEsU0FBQVQsRUFBQXY4RCxHQUNkLE9BQUErOEQsRUFBQVIsRUFBQWp0RCxFQUFBdFAsR0FDQUMsVUFBQUMsT0FBQSxPQUFBOEIsRUFBQW82RCxFQUFBbjhELFVBQUEseUJDUEEsSUFBQWc5RCxFQUFBbC9ELEVBQUEsS0FDQXFHLEVBQUFyRyxFQUFBLEtBQ0F1K0QsRUFBQXYrRCxFQUFBLElBQ0F1UixFQUFBdlIsRUFBQSxHQUNBNlosRUFBQTdaLEVBQUEsSUFDQTgrRCxFQUFBUCxFQUFBam9ELEtBQ0ErbkQsRUFBQUUsRUFBQWw4RCxJQUVBODhELEVBQUEsU0FBQXh0RCxFQUFBbEcsR0FDQSxJQUFBMnpELEVBQUFOLEVBQUFudEQsRUFBQWxHLEdBQ0F3NEIsRUFBQXBxQixFQUFBbEksR0FDQSxVQUFBc3lCLEVBQUEsT0FBQW03QixFQUNBLElBQUFDLEVBQUFGLEVBQUFsN0IsRUFBQXg0QixHQUNBLE9BQUE0ekQsRUFBQWw5RCxPQUFBaTlELEVBQUFqOUQsT0FBQWtFLEVBQUEsSUFBQTY0RCxFQUFBRSxFQUFBdndELE9BQUF3d0QsT0FBQUQsR0FHQWIsRUFBQXR6RCxLQUFjcTBELGdCQUFBLFNBQUFyOUQsR0FDZCxPQUFBazlELEVBQUE1dEQsRUFBQXRQLEdBQUFDLFVBQUFDLE9BQUEsT0FBQThCLEVBQUFvNkQsRUFBQW44RCxVQUFBLHlCQ2pCQSxJQUFBcThELEVBQUF2K0QsRUFBQSxJQUNBdVIsRUFBQXZSLEVBQUEsR0FDQTZaLEVBQUE3WixFQUFBLElBQ0EwK0QsRUFBQUgsRUFBQWg4QyxJQUNBeThDLEVBQUFULEVBQUFyOUQsSUFDQW05RCxFQUFBRSxFQUFBbDhELElBRUFrOUQsRUFBQSxTQUFBNzVDLEVBQUEvVCxFQUFBbEcsR0FFQSxHQURBaXpELEVBQUFoNUMsRUFBQS9ULEVBQUFsRyxHQUNBLE9BQUF1ekQsRUFBQXQ1QyxFQUFBL1QsRUFBQWxHLEdBQ0EsSUFBQXc0QixFQUFBcHFCLEVBQUFsSSxHQUNBLGNBQUFzeUIsRUFBQXM3QixFQUFBNzVDLEVBQUF1ZSxFQUFBeDRCLFFBQUF4SCxHQUdBczZELEVBQUF0ekQsS0FBY3UwRCxZQUFBLFNBQUFoQixFQUFBdjhELEdBQ2QsT0FBQXM5RCxFQUFBZixFQUFBanRELEVBQUF0UCxHQUFBQyxVQUFBQyxPQUFBLE9BQUE4QixFQUFBbzZELEVBQUFuOEQsVUFBQSx5QkNmQSxJQUFBcThELEVBQUF2K0QsRUFBQSxJQUNBdVIsRUFBQXZSLEVBQUEsR0FDQXErRCxFQUFBRSxFQUFBbDhELElBQ0FnakIsRUFBQWs1QyxFQUFBcnZELElBQ0FpQyxFQUFBb3RELEVBQUFwdEQsTUFFQW90RCxFQUFBdHpELEtBQWN3MEQsZUFBQSxTQUFBakIsRUFBQXY4RCxHQUNkLElBQUFxakIsRUFBQXBqQixVQUFBQyxPQUFBLE9BQUE4QixFQUFBbzZELEVBQUFuOEQsVUFBQSxJQUNBeWpCLEVBQUFOLEVBQUE5VCxFQUFBdFAsR0FBQXFqQixHQUFBLEdBQ0EsUUFBQXJoQixJQUFBMGhCLE1BQUEsT0FBQTY0QyxHQUFBLFNBQ0EsR0FBQTc0QyxFQUFBZ1gsS0FBQSxTQUNBLElBQUFwWCxFQUFBcFUsRUFBQWpRLElBQUFlLEdBRUEsT0FEQXNqQixFQUFBLE9BQUFELEtBQ0FDLEVBQUFvWCxNQUFBeHJCLEVBQUEsT0FBQWxQLHVCQ2JBLElBQUFzOEQsRUFBQXYrRCxFQUFBLElBQ0F1UixFQUFBdlIsRUFBQSxHQUNBcStELEVBQUFFLEVBQUFsOEQsSUFDQWk4RCxFQUFBQyxFQUFBLzRDLElBRUErNEMsRUFBQXR6RCxLQUFjeTBELGVBQUEsU0FBQWxCLEVBQUFDLEVBQUF4OEQsRUFBQXFqQixHQUNkZzVDLEVBQUFFLEVBQUFDLEVBQUFsdEQsRUFBQXRQLEdBQUFvOEQsRUFBQS80QyxxQ0NKQSxJQUFBemEsRUFBQTdLLEVBQUEsR0FDQWkwQyxFQUFBajBDLEVBQUEsSUFDQTIvRCxFQUFBMy9ELEVBQUEsS0FFQTZLLElBQUFVLEVBQUEsV0FBK0JxMEQsSUFBQSxTQUFBaDdDLEdBQy9CLElBQUFzdkIsRUFBQUQsRUFBQTl2QyxFQUFBOE8sTUFDQXRMLEVBQUFnNEQsRUFBQS82QyxHQUVBLE9BREFqZCxFQUFBSyxFQUFBa3NDLEVBQUF0dEMsT0FBQXN0QyxFQUFBdnRDLFNBQUFnQixFQUFBdkUsR0FDQTh3QyxFQUFBenZDLHlDQ1JBLElBQUFvRyxFQUFBN0ssRUFBQSxHQUNBMEssRUFBQTFLLEVBQUEsSUFDQXlLLEVBQUF6SyxFQUFBLEdBQ0E2bUIsRUFBQTdtQixFQUFBLElBQ0E2L0QsRUFBQTcvRCxFQUFBLEtBRUE2SyxJQUFBWSxFQUFBWixFQUFBbUIsRUFBQSxXQUEyQzh6RCxRQUFBLFNBQUFDLEdBQzNDLElBQUF0MUMsRUFBQTVELEVBQUE1VCxLQUFBdkksRUFBQWhFLFNBQUErRCxFQUFBL0QsU0FDQW1jLEVBQUEsbUJBQUFrOUMsRUFDQSxPQUFBOXNELEtBQUF2TyxLQUNBbWUsRUFBQSxTQUFBN0osR0FDQSxPQUFBNm1ELEVBQUFwMUMsRUFBQXMxQyxLQUFBcjdELEtBQUEsV0FBOEQsT0FBQXNVLEtBQ3pEK21ELEVBQ0xsOUMsRUFBQSxTQUFBN2EsR0FDQSxPQUFBNjNELEVBQUFwMUMsRUFBQXMxQyxLQUFBcjdELEtBQUEsV0FBOEQsTUFBQXNELEtBQ3pEKzNELHVCQ2hCTCxJQUFBbDFELEVBQUE3SyxFQUFBLEdBRUE2SyxJQUFBVSxFQUFBLFFBQTRCeTBELFFBQUEsU0FBQWhuRCxHQUU1QixPQUFBQSxXQUFBLEdBQUFBLEVBQUEsRUFBQUEsR0FBQXFuQixJQUFBcm5CLEVBQUEsc0JDSkEsSUFBQW5PLEVBQUE3SyxFQUFBLEdBRUE2SyxJQUFBVSxFQUFBLFFBQ0EwMEQsTUFBQSxTQUFBeE8sRUFBQXJ1RCxHQUNBLElBQ0E4OEQsR0FBQXpPLEVBQ0EwTyxHQUFBLzhELEVBQ0FnOUQsRUFIQSxNQUdBRixFQUNBRyxFQUpBLE1BSUFGLEVBQ0FHLEVBQUFKLElBQUEsR0FDQUssRUFBQUosSUFBQSxHQUNBbjdELEdBQUFzN0QsRUFBQUQsSUFBQSxJQUFBRCxFQUFBQyxJQUFBLElBQ0EsT0FBQUMsRUFBQUMsR0FBQXY3RCxJQUFBLE1BQUFvN0QsRUFBQUcsSUFBQSxJQVJBLE1BUUF2N0QsS0FBQSx3QkNaQSxJQUFBNkYsRUFBQTdLLEVBQUEsR0FFQTZLLElBQUFVLEVBQUEsUUFBNEIwakMsTUFBQWp2QyxFQUFBLHdCQ0Y1QixJQUFBNkssRUFBQTdLLEVBQUEsR0FDQXdnRSxFQUFBenZELEtBQUEwdkQsR0FBQSxJQUVBNTFELElBQUFVLEVBQUEsUUFDQW0xRCxRQUFBLFNBQUFDLEdBQ0EsT0FBQUEsRUFBQUgsc0JDTEEsSUFBQTMxRCxFQUFBN0ssRUFBQSxHQUVBNkssSUFBQVUsRUFBQSxRQUE0QnExRCxZQUFBLElBQUE3dkQsS0FBQTB2RCxzQkNGNUIsSUFBQTUxRCxFQUFBN0ssRUFBQSxHQUVBNkssSUFBQVUsRUFBQSxRQUNBczFELE1BQUEsU0FBQXBQLEVBQUFydUQsR0FDQSxJQUNBODhELEdBQUF6TyxFQUNBME8sR0FBQS84RCxFQUNBZzlELEVBSEEsTUFHQUYsRUFDQUcsRUFKQSxNQUlBRixFQUNBRyxFQUFBSixHQUFBLEdBQ0FLLEVBQUFKLEdBQUEsR0FDQW43RCxHQUFBczdELEVBQUFELElBQUEsSUFBQUQsRUFBQUMsSUFBQSxJQUNBLE9BQUFDLEVBQUFDLEdBQUF2N0QsR0FBQSxNQUFBbzdELEVBQUFHLElBQUEsSUFSQSxNQVFBdjdELElBQUEsd0JDWkEsSUFBQTZGLEVBQUE3SyxFQUFBLEdBRUE2SyxJQUFBVSxFQUFBLFFBQ0F1MUQsTUFBQSxTQUFBQyxFQUFBbGdELEVBQUFtZ0QsRUFBQWxnRCxHQUNBLElBQUFtZ0QsRUFBQUYsSUFBQSxFQUVBRyxFQUFBRixJQUFBLEVBQ0EsT0FGQW5nRCxJQUFBLElBRUFDLElBQUEsTUFBQW1nRCxFQUFBQyxJQUFBRCxFQUFBQyxHQUFBRCxFQUFBQyxJQUFBLCtCQ1BBLElBQUFyMkQsRUFBQTdLLEVBQUEsR0FFQTZLLElBQUFVLEVBQUEsUUFDQTQxRCxNQUFBLFNBQUFKLEVBQUFsZ0QsRUFBQW1nRCxFQUFBbGdELEdBQ0EsSUFBQW1nRCxFQUFBRixJQUFBLEVBRUFHLEVBQUFGLElBQUEsRUFDQSxPQUZBbmdELElBQUEsSUFFQUMsSUFBQSxLQUFBbWdELEVBQUFDLEdBQUFELEVBQUFDLEtBQUFELEVBQUFDLElBQUEsZ0NDUEEsSUFBQXIyRCxFQUFBN0ssRUFBQSxHQUNBaXZDLEVBQUFqdkMsRUFBQSxLQUNBNjBDLEVBQUE3MEMsRUFBQSxLQUVBNkssSUFBQVUsRUFBQSxRQUNBNjFELE9BQUEsU0FBQXBvRCxFQUFBZzRCLEVBQUFDLEVBQUFDLEVBQUFDLEdBQ0EsT0FBQTBELEVBQUE1RixFQUFBajJCLEVBQUFnNEIsRUFBQUMsRUFBQUMsRUFBQUMsd0JDTkEsSUFBQXRtQyxFQUFBN0ssRUFBQSxHQUNBNGdFLEVBQUEsSUFBQTd2RCxLQUFBMHZELEdBRUE1MUQsSUFBQVUsRUFBQSxRQUNBbzFELFFBQUEsU0FBQUQsR0FDQSxPQUFBQSxFQUFBRSxzQkNMQSxJQUFBLzFELEVBQUE3SyxFQUFBLEdBRUE2SyxJQUFBVSxFQUFBLFFBQTRCaTFELFlBQUF6dkQsS0FBQTB2RCxHQUFBLHVCQ0Y1QixJQUFBNTFELEVBQUE3SyxFQUFBLEdBRUE2SyxJQUFBVSxFQUFBLFFBQ0E4MUQsTUFBQSxTQUFBcm9ELEVBQUFzb0QsRUFBQUMsR0FDQSxPQUFBeHdELEtBQUFPLElBQUFpd0QsRUFBQXh3RCxLQUFBcWpCLElBQUFrdEMsRUFBQXRvRCx3QkNKQSxJQUFBbk8sRUFBQTdLLEVBQUEsR0FDQWczQixFQUFBaDNCLEVBQUEsSUFFQTZLLElBQUFVLEVBQUEsU0FDQWkyRCxRQUFBLFNBQUE3OEQsR0FDQSxnQkFBQXF5QixFQUFBcnlCLHVCQ0xBLElBQUFrRyxFQUFBN0ssRUFBQSxHQUVBNkssSUFBQVUsRUFBQSxVQUE4QmQsT0FBQXpLLEVBQUEsc0JDRjlCLElBQUE2SyxFQUFBN0ssRUFBQSxHQUVBNkssSUFBQVEsR0FBb0JaLE9BQUF6SyxFQUFBLHNCQ0ZwQkEsRUFBQSxHQUFBQSxDQUFBLDRCQ0FBQSxFQUFBLEdBQUFBLENBQUEsNEJDQUFBLEVBQUEsR0FBQUEsQ0FBQSx3QkNBQUEsRUFBQSxHQUFBQSxDQUFBLHdCQ0FBQSxFQUFBLEdBQUFBLENBQUEsNEJDQUFBLEVBQUEsR0FBQUEsQ0FBQSw0QkNBQUEsRUFBQSxHQUFBQSxDQUFBLHdCQ0FBQSxFQUFBLEdBQUFBLENBQUEsd0JDQUEsSUFBQTZLLEVBQUE3SyxFQUFBLEdBRUE2SyxJQUFBWSxFQUFBWixFQUFBbUIsRUFBQSxPQUF1Q3kxRCxPQUFBemhFLEVBQUEsSUFBQUEsQ0FBQSwwQkNGdkMsSUFBQTZLLEVBQUE3SyxFQUFBLEdBRUE2SyxJQUFBWSxFQUFBWixFQUFBbUIsRUFBQSxPQUF1Q3kxRCxPQUFBemhFLEVBQUEsSUFBQUEsQ0FBQSx1Q0NGdkMsSUFBQTZLLEVBQUE3SyxFQUFBLEdBQ0EraUIsRUFBQS9pQixFQUFBLElBQ0F5UixFQUFBelIsRUFBQSxJQUNBNlosRUFBQTdaLEVBQUEsSUFDQXFqQixFQUFBcmpCLEVBQUEsSUFBQW1FLEVBR0FuRSxFQUFBLEtBQUE2SyxJQUFBWSxFQUFBekwsRUFBQSxjQUNBMGhFLGlCQUFBLFNBQUFqMkQsR0FDQSxJQUVBMHVCLEVBRkF4b0IsRUFBQW9SLEVBQUE5UCxNQUNBOGxCLEVBQUF0bkIsRUFBQWhHLEdBQUEsR0FFQSxHQUNBLEdBQUEwdUIsRUFBQTlXLEVBQUExUixFQUFBb25CLEdBQUEsT0FBQW9CLEVBQUEzVSxVQUNLN1QsRUFBQWtJLEVBQUFsSSxxQ0NkTCxJQUFBOUcsRUFBQTdLLEVBQUEsR0FDQStpQixFQUFBL2lCLEVBQUEsSUFDQXlSLEVBQUF6UixFQUFBLElBQ0E2WixFQUFBN1osRUFBQSxJQUNBcWpCLEVBQUFyakIsRUFBQSxJQUFBbUUsRUFHQW5FLEVBQUEsS0FBQTZLLElBQUFZLEVBQUF6TCxFQUFBLGNBQ0EyaEUsaUJBQUEsU0FBQWwyRCxHQUNBLElBRUEwdUIsRUFGQXhvQixFQUFBb1IsRUFBQTlQLE1BQ0E4bEIsRUFBQXRuQixFQUFBaEcsR0FBQSxHQUVBLEdBQ0EsR0FBQTB1QixFQUFBOVcsRUFBQTFSLEVBQUFvbkIsR0FBQSxPQUFBb0IsRUFBQWo1QixVQUNLeVEsRUFBQWtJLEVBQUFsSSxxQ0NkTCxJQUFBOUcsRUFBQTdLLEVBQUEsR0FDQStpQixFQUFBL2lCLEVBQUEsSUFDQXdqQixFQUFBeGpCLEVBQUEsSUFDQXltQyxFQUFBem1DLEVBQUEsSUFHQUEsRUFBQSxLQUFBNkssSUFBQVksRUFBQXpMLEVBQUEsY0FDQWc1QixpQkFBQSxTQUFBdnRCLEVBQUE0aUIsR0FDQW9ZLEVBQUF0aUMsRUFBQTRlLEVBQUE5UCxNQUFBeEgsR0FBMEMrWixJQUFBaEMsRUFBQTZLLEdBQUFwdEIsWUFBQSxFQUFBRCxjQUFBLHFDQ1IxQyxJQUFBNkosRUFBQTdLLEVBQUEsR0FDQStpQixFQUFBL2lCLEVBQUEsSUFDQXdqQixFQUFBeGpCLEVBQUEsSUFDQXltQyxFQUFBem1DLEVBQUEsSUFHQUEsRUFBQSxLQUFBNkssSUFBQVksRUFBQXpMLEVBQUEsY0FDQTRoRSxpQkFBQSxTQUFBbjJELEVBQUE3SyxHQUNBNmxDLEVBQUF0aUMsRUFBQTRlLEVBQUE5UCxNQUFBeEgsR0FBMEN2SyxJQUFBc2lCLEVBQUE1aUIsR0FBQUssWUFBQSxFQUFBRCxjQUFBLHdCQ1IxQyxJQUFBNkosRUFBQTdLLEVBQUEsR0FDQXduQyxFQUFBeG5DLEVBQUEsSUFBQUEsRUFBQSxHQUVBNkssSUFBQVUsRUFBQSxVQUNBa2QsUUFBQSxTQUFBOWpCLEdBQ0EsT0FBQTZpQyxFQUFBN2lDLHVCQ0xBLElBQUFrRyxFQUFBN0ssRUFBQSxHQUNBNmhFLEVBQUE3aEUsRUFBQSxJQUFBQSxFQUFBLEdBRUE2SyxJQUFBVSxFQUFBLFVBQ0ErYyxPQUFBLFNBQUEzakIsR0FDQSxPQUFBazlELEVBQUFsOUQsdUJDTEEsSUFBQWtHLEVBQUE3SyxFQUFBLEdBQ0EyeUMsRUFBQTN5QyxFQUFBLEtBQ0FtakIsRUFBQW5qQixFQUFBLElBQ0FvakIsRUFBQXBqQixFQUFBLElBQ0E4aEUsRUFBQTloRSxFQUFBLElBRUE2SyxJQUFBVSxFQUFBLFVBQ0F3MkQsMEJBQUEsU0FBQXhnRSxHQU9BLElBTkEsSUFLQWMsRUFBQWlyQixFQUxBM2IsRUFBQXdSLEVBQUE1aEIsR0FDQXlnRSxFQUFBNStDLEVBQUFqZixFQUNBbVMsRUFBQXE4QixFQUFBaGhDLEdBQ0FoSyxLQUNBdkgsRUFBQSxFQUVBa1csRUFBQW5VLE9BQUEvQixRQUVBNkQsS0FEQXFwQixFQUFBMDBDLEVBQUFyd0QsRUFBQXRQLEVBQUFpVSxFQUFBbFcsUUFDQTBoRSxFQUFBbjZELEVBQUF0RixFQUFBaXJCLEdBRUEsT0FBQTNsQixzQkNuQkEzSCxFQUFBLElBQUFBLENBQUEsK0JDQUFBLEVBQUEsSUFBQUEsQ0FBQSwrQ0NFQSxJQUFBNkssRUFBQTdLLEVBQUEsR0FDQXFlLEVBQUFyZSxFQUFBLElBQ0Fpa0IsRUFBQWprQixFQUFBLEdBQ0ErNkIsRUFBQS82QixFQUFBLElBQ0FpaUUsRUFBQWppRSxFQUFBLElBQ0FraUUsRUFBQXR0QyxPQUFBbnpCLFVBRUEwZ0UsRUFBQSxTQUFBQyxFQUFBLzlELEdBQ0E0TyxLQUFBb3ZELEdBQUFELEVBQ0FudkQsS0FBQWdyRCxHQUFBNTVELEdBR0FyRSxFQUFBLEdBQUFBLENBQUFtaUUsRUFBQSwyQkFDQSxJQUFBbGxELEVBQUFoSyxLQUFBb3ZELEdBQUFueEQsS0FBQStCLEtBQUFnckQsSUFDQSxPQUFVNzhELE1BQUE2YixFQUFBMVUsS0FBQSxPQUFBMFUsS0FHVnBTLElBQUFZLEVBQUEsVUFDQTYyRCxTQUFBLFNBQUFGLEdBRUEsR0FEQS9qRCxFQUFBcEwsT0FDQThuQixFQUFBcW5DLEdBQUEsTUFBQXR4RCxVQUFBc3hELEVBQUEscUJBQ0EsSUFBQTcyRCxFQUFBbUMsT0FBQXVGLE1BQ0FraEMsRUFBQSxVQUFBK3RCLEVBQUF4MEQsT0FBQTAwRCxFQUFBanVCLE9BQUE4dEIsRUFBQTFoRSxLQUFBNmhFLEdBQ0F2VSxFQUFBLElBQUFqNUIsT0FBQXd0QyxFQUFBaGdFLFFBQUEreEMsRUFBQWh1QyxRQUFBLEtBQUFndUMsRUFBQSxJQUFBQSxHQUVBLE9BREEwWixFQUFBMFUsVUFBQXQrQyxFQUFBbStDLEVBQUFHLFdBQ0EsSUFBQUosRUFBQXRVLEVBQUF0aUQsb0NDekJBdkwsRUFBQSxHQUFBQSxDQUFBLHFCQUFBcTFDLEdBQ0Esa0JBQ0EsT0FBQUEsRUFBQXBpQyxLQUFBLEtBRUMseUNDSkRqVCxFQUFBLEdBQUFBLENBQUEsb0JBQUFxMUMsR0FDQSxrQkFDQSxPQUFBQSxFQUFBcGlDLEtBQUEsS0FFQywyQ0NKRCxJQUFBcEksRUFBQTdLLEVBQUEsR0FDQXdpRSxFQUFBeGlFLEVBQUEsS0FDQWs2QixFQUFBbDZCLEVBQUEsSUFHQTZLLElBQUFZLEVBQUFaLEVBQUFNLEVBQUEsb0NBQUFpWCxLQUFBOFgsR0FBQSxVQUNBdW9DLE9BQUEsU0FBQWp4QixHQUNBLE9BQUFneEIsRUFBQXZ2RCxLQUFBdStCLEVBQUF0dkMsVUFBQUMsT0FBQSxFQUFBRCxVQUFBLFFBQUErQixHQUFBLG9DQ1BBLElBQUE0RyxFQUFBN0ssRUFBQSxHQUNBd2lFLEVBQUF4aUUsRUFBQSxLQUNBazZCLEVBQUFsNkIsRUFBQSxJQUdBNkssSUFBQVksRUFBQVosRUFBQU0sRUFBQSxvQ0FBQWlYLEtBQUE4WCxHQUFBLFVBQ0F3b0MsU0FBQSxTQUFBbHhCLEdBQ0EsT0FBQWd4QixFQUFBdnZELEtBQUF1K0IsRUFBQXR2QyxVQUFBQyxPQUFBLEVBQUFELFVBQUEsUUFBQStCLEdBQUEsb0NDUEEsSUFBQTRHLEVBQUE3SyxFQUFBLEdBQ0EyaUUsRUFBQTNpRSxFQUFBLElBQUFBLEVBQUEsR0FFQTZLLElBQUFZLEVBQUEsVUFDQW0zRCxHQUFBLFNBQUFqN0IsR0FDQSxPQUFBZzdCLEVBQUExdkQsS0FBQTAwQixvQ0NMQSxJQUFBOThCLEVBQUE3SyxFQUFBLEdBQ0FpeUMsRUFBQWp5QyxFQUFBLEtBQ0EraUIsRUFBQS9pQixFQUFBLElBQ0Fpa0IsRUFBQWprQixFQUFBLEdBQ0FxUixFQUFBclIsRUFBQSxJQUNBNmlFLEVBQUE3aUUsRUFBQSxJQUVBNkssSUFBQVksRUFBQSxTQUNBcTNELFFBQUEsV0FDQSxJQUFBQyxFQUFBN2dFLFVBQUEsR0FDQXlQLEVBQUFvUixFQUFBOVAsTUFDQWkvQixFQUFBanVCLEVBQUF0UyxFQUFBeFAsUUFDQXkyQixFQUFBaXFDLEVBQUFseEQsRUFBQSxHQUVBLE9BREFzZ0MsRUFBQXJaLEVBQUFqbkIsSUFBQXVnQyxFQUFBLE9BQUFqdUMsSUFBQTgrRCxFQUFBLEVBQUExeEQsRUFBQTB4RCxJQUNBbnFDLEtBSUE1NEIsRUFBQSxHQUFBQSxDQUFBLHlDQ2xCQSxJQUFBNkssRUFBQTdLLEVBQUEsR0FDQWl5QyxFQUFBanlDLEVBQUEsS0FDQStpQixFQUFBL2lCLEVBQUEsSUFDQWlrQixFQUFBamtCLEVBQUEsR0FDQXdqQixFQUFBeGpCLEVBQUEsSUFDQTZpRSxFQUFBN2lFLEVBQUEsSUFFQTZLLElBQUFZLEVBQUEsU0FDQXUzRCxRQUFBLFNBQUFwK0MsR0FDQSxJQUNBc3RCLEVBQUF0WixFQURBam5CLEVBQUFvUixFQUFBOVAsTUFNQSxPQUpBdVEsRUFBQW9CLEdBQ0FzdEIsRUFBQWp1QixFQUFBdFMsRUFBQXhQLFFBQ0F5MkIsRUFBQWlxQyxFQUFBbHhELEVBQUEsR0FDQXNnQyxFQUFBclosRUFBQWpuQixJQUFBdWdDLEVBQUEsSUFBQXR0QixFQUFBMWlCLFVBQUEsSUFDQTAyQixLQUlBNTRCLEVBQUEsR0FBQUEsQ0FBQSx5Q0NuQkEsSUFBQTZLLEVBQUE3SyxFQUFBLEdBQ0FpakUsRUFBQWpqRSxFQUFBLEdBQUFBLEVBQUEsR0FFQTZLLElBQUFZLEVBQUEsU0FDQXlnQixTQUFBLFNBQUFnUCxHQUNBLE9BQUErbkMsRUFBQWh3RCxLQUFBaW9CLEVBQUFoNUIsVUFBQUMsT0FBQSxFQUFBRCxVQUFBLFFBQUErQixNQUlBakUsRUFBQSxHQUFBQSxDQUFBLDZCQ1ZBLElBQUE2SyxFQUFBN0ssRUFBQSxHQUNBa2pFLEVBQUFsakUsRUFBQSxLQUVBa2pFLEdBQUFyNEQsSUFBQVUsRUFBQSxXQUNBa0ksZUFBQSxTQUFBeFIsRUFBQXdwQixHQUNBeTNDLEVBQUExL0QsTUFBQXZCLEVBQUF3cEIsR0FDQSxJQUVBLE9BREF5M0MsRUFBQTE5QyxJQUFBdmpCLEVBQUF3cEIsSUFDQSxFQUNLLE1BQUF6akIsR0FDTCw4QkNWQSxJQUFBMEosRUFBQTFSLEVBQUEsSUFDQW9qQixFQUFBcGpCLEVBQUEsSUFDQTZaLEVBQUE3WixFQUFBLElBQ0F1aUIsRUFBQXZpQixFQUFBLElBQ0E2SyxFQUFBN0ssRUFBQSxHQUNBOGlCLEVBQUE5aUIsRUFBQSxJQUNBdVIsRUFBQXZSLEVBQUEsR0FDQTZRLEVBQUE3USxFQUFBLEdBd0JBNkssSUFBQVUsRUFBQSxXQUErQmlhLElBdEIvQixTQUFBQSxFQUFBdmpCLEVBQUFraEUsRUFBQUMsR0FDQSxJQUVBQyxFQUFBNTNDLEVBRkE2M0MsRUFBQXBoRSxVQUFBQyxPQUFBLEVBQUFGLEVBQUFDLFVBQUEsR0FDQXFoRSxFQUFBbmdELEVBQUFqZixFQUFBb04sRUFBQXRQLEdBQUFraEUsR0FFQSxJQUFBSSxFQUFBLENBQ0EsR0FBQTF5RCxFQUFBNGEsRUFBQTVSLEVBQUE1WCxJQUNBLE9BQUF1akIsRUFBQWlHLEVBQUEwM0MsRUFBQUMsRUFBQUUsR0FFQUMsRUFBQXpnRCxFQUFBLEdBRUEsR0FBQVAsRUFBQWdoRCxFQUFBLFVBQ0EsUUFBQUEsRUFBQS92RCxXQUFBM0MsRUFBQXl5RCxHQUFBLFNBQ0EsR0FBQUQsRUFBQWpnRCxFQUFBamYsRUFBQW0vRCxFQUFBSCxHQUFBLENBQ0EsR0FBQUUsRUFBQW5pRSxLQUFBbWlFLEVBQUE3OUMsTUFBQSxJQUFBNjlDLEVBQUE3dkQsU0FBQSxTQUNBNnZELEVBQUFqaUUsTUFBQWdpRSxFQUNBMXhELEVBQUF2TixFQUFBbS9ELEVBQUFILEVBQUFFLFFBQ0szeEQsRUFBQXZOLEVBQUFtL0QsRUFBQUgsRUFBQXJnRCxFQUFBLEVBQUFzZ0QsSUFDTCxTQUVBLFlBQUFuL0QsSUFBQXMvRCxFQUFBLzlDLE1BQUErOUMsRUFBQS85QyxJQUFBamxCLEtBQUEraUUsRUFBQUYsSUFBQSx1QkM1QkEsSUFBQXY0RCxFQUFBN0ssRUFBQSxHQUNBdVIsRUFBQXZSLEVBQUEsR0FDQXdqRSxFQUFBMWlFLE9BQUF3dkIsa0JBRUF6bEIsSUFBQVUsRUFBQSxXQUNBK2tCLGtCQUFBLFNBQUFydUIsR0FDQXNQLEVBQUF0UCxHQUNBLElBRUEsT0FEQXVoRSxLQUFBdmhFLElBQ0EsRUFDSyxNQUFBK0YsR0FDTCw4QkNYQSxJQUFBNkMsRUFBQTdLLEVBQUEsR0FFQTZLLElBQUFVLEVBQUEsV0FBK0JvbkMsUUFBQTN5QyxFQUFBLHdCQ0YvQixJQUFBNkssRUFBQTdLLEVBQUEsR0FDQXVSLEVBQUF2UixFQUFBLEdBQ0F5akUsRUFBQTNpRSxPQUFBc3ZCLGFBRUF2bEIsSUFBQVUsRUFBQSxXQUNBNmtCLGFBQUEsU0FBQW51QixHQUVBLE9BREFzUCxFQUFBdFAsSUFDQXdoRSxLQUFBeGhFLHVCQ1BBLElBQUE0SSxFQUFBN0ssRUFBQSxHQUVBNkssSUFBQVUsRUFBQSxXQUNBZ1gsSUFBQSxTQUFBdGdCLEVBQUFraEUsR0FDQSxPQUFBQSxLQUFBbGhFLHNCQ0pBLElBQUE0SSxFQUFBN0ssRUFBQSxHQUNBZzNELEVBQUFoM0QsRUFBQSxJQUNBdVIsRUFBQXZSLEVBQUEsR0FFQTZLLElBQUFVLEVBQUEsV0FDQXNPLGVBQUEsU0FBQTVYLEdBQ0EsT0FBQSswRCxFQUFBemxELEVBQUF0UCx3QkNOQSxJQUFBbWhCLEVBQUFwakIsRUFBQSxJQUNBNkssRUFBQTdLLEVBQUEsR0FDQXVSLEVBQUF2UixFQUFBLEdBRUE2SyxJQUFBVSxFQUFBLFdBQ0E4WCx5QkFBQSxTQUFBcGhCLEVBQUFraEUsR0FDQSxPQUFBLy9DLEVBQUFqZixFQUFBb04sRUFBQXRQLEdBQUFraEUsdUJDTkEsSUFBQS8vQyxFQUFBcGpCLEVBQUEsSUFDQTZaLEVBQUE3WixFQUFBLElBQ0F1aUIsRUFBQXZpQixFQUFBLElBQ0E2SyxFQUFBN0ssRUFBQSxHQUNBNlEsRUFBQTdRLEVBQUEsR0FDQXVSLEVBQUF2UixFQUFBLEdBY0E2SyxJQUFBVSxFQUFBLFdBQStCckssSUFaL0IsU0FBQUEsRUFBQWUsRUFBQWtoRSxHQUNBLElBQ0E3MUMsRUFBQTdCLEVBREE2M0MsRUFBQXBoRSxVQUFBQyxPQUFBLEVBQUFGLEVBQUFDLFVBQUEsR0FFQSxPQUFBcVAsRUFBQXRQLEtBQUFxaEUsRUFBQXJoRSxFQUFBa2hFLElBQ0E3MUMsRUFBQWxLLEVBQUFqZixFQUFBbEMsRUFBQWtoRSxJQUFBNWdELEVBQUErSyxFQUFBLFNBQ0FBLEVBQUFsc0IsV0FDQTZDLElBQUFxcEIsRUFBQXBzQixJQUNBb3NCLEVBQUFwc0IsSUFBQVgsS0FBQStpRSxRQUNBci9ELEVBQ0E0TSxFQUFBNGEsRUFBQTVSLEVBQUE1WCxJQUFBZixFQUFBdXFCLEVBQUEwM0MsRUFBQUcsUUFBQSxtQ0NmQSxJQUFBejRELEVBQUE3SyxFQUFBLEdBQ0F1UixFQUFBdlIsRUFBQSxHQUNBMGpFLEVBQUEsU0FBQXo5QixHQUNBaHpCLEtBQUF1aEIsR0FBQWpqQixFQUFBMDBCLEdBQ0FoekIsS0FBQWt6QixHQUFBLEVBQ0EsSUFDQTlqQyxFQURBaVUsRUFBQXJELEtBQUFtekIsTUFFQSxJQUFBL2pDLEtBQUE0akMsRUFBQTN2QixFQUFBeFAsS0FBQXpFLElBRUFyQyxFQUFBLEdBQUFBLENBQUEwakUsRUFBQSxvQkFDQSxJQUVBcmhFLEVBREFpVSxFQURBckQsS0FDQW16QixHQUVBLEdBQ0EsR0FKQW56QixLQUlBa3pCLElBQUE3dkIsRUFBQW5VLE9BQUEsT0FBd0NmLFdBQUE2QyxFQUFBc0UsTUFBQSxZQUNyQ2xHLEVBQUFpVSxFQUxIckQsS0FLR2t6QixTQUxIbHpCLEtBS0d1aEIsS0FDSCxPQUFVcHpCLE1BQUFpQixFQUFBa0csTUFBQSxLQUdWc0MsSUFBQVUsRUFBQSxXQUNBbzRELFVBQUEsU0FBQTFoRSxHQUNBLFdBQUF5aEUsRUFBQXpoRSx1QkN0QkEsSUFBQTRJLEVBQUE3SyxFQUFBLEdBQ0FvakIsRUFBQXBqQixFQUFBLElBQUFtRSxFQUNBb04sRUFBQXZSLEVBQUEsR0FFQTZLLElBQUFVLEVBQUEsV0FDQXE0RCxlQUFBLFNBQUEzaEUsRUFBQWtoRSxHQUNBLElBQUE3MUMsRUFBQWxLLEVBQUE3UixFQUFBdFAsR0FBQWtoRSxHQUNBLFFBQUE3MUMsTUFBQXRzQixzQkFBQWlCLEVBQUFraEUsdUJDUEEsSUFBQXp4RCxFQUFBMVIsRUFBQSxJQUNBNkssRUFBQTdLLEVBQUEsR0FDQXVSLEVBQUF2UixFQUFBLEdBQ0F5UixFQUFBelIsRUFBQSxJQUdBNkssSUFBQVUsRUFBQVYsRUFBQU0sRUFBQW5MLEVBQUEsRUFBQUEsQ0FBQSxXQUVBMHlDLFFBQUEzeEMsZUFBQTJRLEVBQUF2TixLQUFnQyxHQUFNL0MsTUFBQSxJQUFXLEdBQU9BLE1BQUEsTUFDdkQsV0FDREwsZUFBQSxTQUFBa0IsRUFBQWtoRSxFQUFBVSxHQUNBdHlELEVBQUF0UCxHQUNBa2hFLEVBQUExeEQsRUFBQTB4RCxHQUFBLEdBQ0E1eEQsRUFBQXN5RCxHQUNBLElBRUEsT0FEQW55RCxFQUFBdk4sRUFBQWxDLEVBQUFraEUsRUFBQVUsSUFDQSxFQUNLLE1BQUE3N0QsR0FDTCw4QkNsQkEsSUFBQTZDLEVBQUE3SyxFQUFBLEdBQ0F1VCxFQUFBdlQsRUFBQSxJQUNBd2pCLEVBQUF4akIsRUFBQSxJQUNBdVIsRUFBQXZSLEVBQUEsR0FDQTZRLEVBQUE3USxFQUFBLEdBQ0E0aEIsRUFBQTVoQixFQUFBLEdBQ0F3WCxFQUFBeFgsRUFBQSxLQUNBOGpFLEdBQUE5akUsRUFBQSxHQUFBMHlDLGFBQW9EbUQsVUFJcERrdUIsRUFBQW5pRCxFQUFBLFdBQ0EsU0FBQXpXLEtBQ0EsUUFBQTI0RCxFQUFBLGdCQUFpRDM0RCxrQkFFakQ2NEQsR0FBQXBpRCxFQUFBLFdBQ0FraUQsRUFBQSxnQkFHQWo1RCxJQUFBVSxFQUFBVixFQUFBTSxHQUFBNDRELEdBQUFDLEdBQUEsV0FDQW51QixVQUFBLFNBQUFvdUIsRUFBQWo2RCxHQUNBd1osRUFBQXlnRCxHQUNBMXlELEVBQUF2SCxHQUNBLElBQUFrNkQsRUFBQWhpRSxVQUFBQyxPQUFBLEVBQUE4aEUsRUFBQXpnRCxFQUFBdGhCLFVBQUEsSUFDQSxHQUFBOGhFLElBQUFELEVBQUEsT0FBQUQsRUFBQUcsRUFBQWo2RCxFQUFBazZELEdBQ0EsR0FBQUQsR0FBQUMsRUFBQSxDQUVBLE9BQUFsNkQsRUFBQTdILFFBQ0Esa0JBQUE4aEUsRUFDQSxrQkFBQUEsRUFBQWo2RCxFQUFBLElBQ0Esa0JBQUFpNkQsRUFBQWo2RCxFQUFBLEdBQUFBLEVBQUEsSUFDQSxrQkFBQWk2RCxFQUFBajZELEVBQUEsR0FBQUEsRUFBQSxHQUFBQSxFQUFBLElBQ0Esa0JBQUFpNkQsRUFBQWo2RCxFQUFBLEdBQUFBLEVBQUEsR0FBQUEsRUFBQSxHQUFBQSxFQUFBLElBR0EsSUFBQW02RCxHQUFBLE1BRUEsT0FEQUEsRUFBQXI5RCxLQUFBc0MsTUFBQSs2RCxFQUFBbjZELEdBQ0EsSUFBQXdOLEVBQUFwTyxNQUFBNjZELEVBQUFFLElBR0EsSUFBQTE0QyxFQUFBeTRDLEVBQUF6aUUsVUFDQXFSLEVBQUFTLEVBQUExQyxFQUFBNGEsS0FBQTNxQixPQUFBVyxXQUNBa0csRUFBQWtFLFNBQUF6QyxNQUFBN0ksS0FBQTBqRSxFQUFBbnhELEVBQUE5SSxHQUNBLE9BQUE2RyxFQUFBbEosS0FBQW1MLHNCQzNDQSxJQUFBakksRUFBQTdLLEVBQUEsR0FDQXdqQixFQUFBeGpCLEVBQUEsSUFDQXVSLEVBQUF2UixFQUFBLEdBQ0Fva0UsR0FBQXBrRSxFQUFBLEdBQUEweUMsYUFBZ0R0cEMsTUFDaERpN0QsRUFBQXg0RCxTQUFBekMsTUFFQXlCLElBQUFVLEVBQUFWLEVBQUFNLEdBQUFuTCxFQUFBLEVBQUFBLENBQUEsV0FDQW9rRSxFQUFBLGdCQUNDLFdBQ0RoN0QsTUFBQSxTQUFBbkgsRUFBQXFpRSxFQUFBQyxHQUNBLElBQUFydEMsRUFBQTFULEVBQUF2aEIsR0FDQTh3RCxFQUFBeGhELEVBQUFnekQsR0FDQSxPQUFBSCxJQUFBbHRDLEVBQUFvdEMsRUFBQXZSLEdBQUFzUixFQUFBOWpFLEtBQUEyMkIsRUFBQW90QyxFQUFBdlIsdUJDYkEveUQsRUFBQSxHQUFBQSxDQUFBLHFCQUFBd2tFLEdBQ0EsZ0JBQUFyMkMsRUFBQXZCLEVBQUF6cUIsR0FDQSxPQUFBcWlFLEVBQUF2eEQsS0FBQWtiLEVBQUF2QixFQUFBenFCLHVCQ0ZBbkMsRUFBQSxHQUFBQSxDQUFBLHFCQUFBd2tFLEdBQ0EsZ0JBQUFyMkMsRUFBQXZCLEVBQUF6cUIsR0FDQSxPQUFBcWlFLEVBQUF2eEQsS0FBQWtiLEVBQUF2QixFQUFBenFCLHVCQ0ZBbkMsRUFBQSxHQUFBQSxDQUFBLG9CQUFBd2tFLEdBQ0EsZ0JBQUFyMkMsRUFBQXZCLEVBQUF6cUIsR0FDQSxPQUFBcWlFLEVBQUF2eEQsS0FBQWtiLEVBQUF2QixFQUFBenFCLHVCQ0ZBbkMsRUFBQSxHQUFBQSxDQUFBLG1CQUFBd2tFLEdBQ0EsZ0JBQUFyMkMsRUFBQXZCLEVBQUF6cUIsR0FDQSxPQUFBcWlFLEVBQUF2eEQsS0FBQWtiLEVBQUF2QixFQUFBenFCLHVCQ0ZBbkMsRUFBQSxHQUFBQSxDQUFBLG9CQUFBd2tFLEdBQ0EsZ0JBQUFyMkMsRUFBQXZCLEVBQUF6cUIsR0FDQSxPQUFBcWlFLEVBQUF2eEQsS0FBQWtiLEVBQUF2QixFQUFBenFCLHVCQ0ZBbkMsRUFBQSxHQUFBQSxDQUFBLG1CQUFBd2tFLEdBQ0EsZ0JBQUFyMkMsRUFBQXZCLEVBQUF6cUIsR0FDQSxPQUFBcWlFLEVBQUF2eEQsS0FBQWtiLEVBQUF2QixFQUFBenFCLHVCQ0ZBbkMsRUFBQSxHQUFBQSxDQUFBLG1CQUFBd2tFLEdBQ0EsZ0JBQUFyMkMsRUFBQXZCLEVBQUF6cUIsR0FDQSxPQUFBcWlFLEVBQUF2eEQsS0FBQWtiLEVBQUF2QixFQUFBenFCLE1BRUMsb0JDSkRuQyxFQUFBLEdBQUFBLENBQUEsbUJBQUF3a0UsR0FDQSxnQkFBQXIyQyxFQUFBdkIsRUFBQXpxQixHQUNBLE9BQUFxaUUsRUFBQXZ4RCxLQUFBa2IsRUFBQXZCLEVBQUF6cUIsdUJDRkFuQyxFQUFBLEdBQUFBLENBQUEsa0JBQUF3a0UsR0FDQSxnQkFBQXIyQyxFQUFBdkIsRUFBQXpxQixHQUNBLE9BQUFxaUUsRUFBQXZ4RCxLQUFBa2IsRUFBQXZCLEVBQUF6cUIsdUJDRkEsSUFBQTBJLEVBQUE3SyxFQUFBLEdBQ0E2SyxJQUFBUSxFQUFBUixFQUFBa0IsRUFBQWxCLEVBQUFNLEdBQUFuTCxFQUFBLElBQUFndUIsS0FDQXBHLFNBQUE1bkIsRUFBQSxJQUFBNG5CLHlDQ0RBLElBQUEvYyxFQUFBN0ssRUFBQSxHQUNBK2xCLEVBQUEvbEIsRUFBQSxJQUNBb0YsRUFBQXBGLEVBQUEsSUFDQXVSLEVBQUF2UixFQUFBLEdBQ0FxbUIsRUFBQXJtQixFQUFBLElBQ0Fpa0IsRUFBQWprQixFQUFBLEdBQ0E2USxFQUFBN1EsRUFBQSxHQUNBMG5CLEVBQUExbkIsRUFBQSxHQUFBMG5CLFlBQ0FiLEVBQUE3bUIsRUFBQSxJQUNBeW5CLEVBQUFyaUIsRUFBQXNpQixZQUNBQyxFQUFBdmlCLEVBQUF3aUIsU0FDQTY4QyxFQUFBMStDLEVBQUFpSSxLQUFBdEcsRUFBQWc5QyxPQUNBNTNDLEVBQUFyRixFQUFBaG1CLFVBQUEwVCxNQUNBNFUsRUFBQWhFLEVBQUFnRSxLQUdBbGYsSUFBQVEsRUFBQVIsRUFBQWtCLEVBQUFsQixFQUFBTSxHQUFBdWMsSUFBQUQsSUFBNkVDLFlBQUFELElBRTdFNWMsSUFBQVUsRUFBQVYsRUFBQU0sR0FBQTRhLEVBQUE2RCxPQUpBLGVBTUE4NkMsT0FBQSxTQUFBLy9ELEdBQ0EsT0FBQTgvRCxLQUFBOS9ELElBQUFrTSxFQUFBbE0sSUFBQW9sQixLQUFBcGxCLEtBSUFrRyxJQUFBWSxFQUFBWixFQUFBaUIsRUFBQWpCLEVBQUFNLEVBQUFuTCxFQUFBLEVBQUFBLENBQUEsV0FDQSxXQUFBeW5CLEVBQUEsR0FBQXRTLE1BQUEsT0FBQWxSLEdBQUF1cUIsYUFaQSxlQWVBclosTUFBQSxTQUFBd1csRUFBQWUsR0FDQSxRQUFBem9CLElBQUE2b0IsUUFBQTdvQixJQUFBeW9CLEVBQUEsT0FBQUksRUFBQXZzQixLQUFBZ1IsRUFBQTBCLE1BQUEwWSxHQVFBLElBUEEsSUFBQTlNLEVBQUF0TixFQUFBMEIsTUFBQXViLFdBQ0FtMkMsRUFBQXQrQyxFQUFBc0YsRUFBQTlNLEdBQ0ErbEQsRUFBQXYrQyxPQUFBcGlCLElBQUF5b0IsRUFBQTdOLEVBQUE2TixFQUFBN04sR0FDQWxYLEVBQUEsSUFBQWtmLEVBQUE1VCxLQUFBd1UsR0FBQSxDQUFBeEQsRUFBQTJnRCxFQUFBRCxJQUNBRSxFQUFBLElBQUFsOUMsRUFBQTFVLE1BQ0E2eEQsRUFBQSxJQUFBbjlDLEVBQUFoZ0IsR0FDQXpCLEVBQUEsRUFDQXkrRCxFQUFBQyxHQUNBRSxFQUFBdGlDLFNBQUF0OEIsSUFBQTIrRCxFQUFBbmlDLFNBQUFpaUMsTUFDSyxPQUFBaDlELEtBSUwzSCxFQUFBLEdBQUFBLENBOUJBLDZDQ2RBLElBQUFzekMsRUFBQXR6QyxFQUFBLEtBQ0F3cUIsRUFBQXhxQixFQUFBLElBSUFBLEVBQUEsR0FBQUEsQ0FIQSxVQUdBLFNBQUFrQixHQUNBLGtCQUE2QixPQUFBQSxFQUFBK1IsS0FBQS9RLFVBQUFDLE9BQUEsRUFBQUQsVUFBQSxRQUFBK0IsTUFHN0IydkMsSUFBQSxTQUFBeHlDLEdBQ0EsT0FBQWt5QyxFQUFBN3NDLElBQUErakIsRUFBQXZYLEtBUkEsV0FRQTdSLEdBQUEsS0FFQ2t5QyxHQUFBLG9DQ1pELElBd0JBeXhCLEVBQUFDLEVBQUFDLEVBQUFDLEVBeEJBcC9DLEVBQUE5bEIsRUFBQSxJQUNBeUssRUFBQXpLLEVBQUEsR0FDQTBKLEVBQUExSixFQUFBLElBQ0FzbUIsRUFBQXRtQixFQUFBLElBQ0E2SyxFQUFBN0ssRUFBQSxHQUNBNlEsRUFBQTdRLEVBQUEsR0FDQXdqQixFQUFBeGpCLEVBQUEsSUFDQWltQixFQUFBam1CLEVBQUEsSUFDQTA0QixFQUFBMTRCLEVBQUEsSUFDQTZtQixFQUFBN21CLEVBQUEsSUFDQStFLEVBQUEvRSxFQUFBLElBQUF3bEIsSUFDQSszQyxFQUFBdjlELEVBQUEsR0FBQUEsR0FDQW1sRSxFQUFBbmxFLEVBQUEsSUFDQTIvRCxFQUFBMy9ELEVBQUEsS0FDQWs2QixFQUFBbDZCLEVBQUEsSUFDQTYvRCxFQUFBNy9ELEVBQUEsS0FFQThRLEVBQUFyRyxFQUFBcUcsVUFDQSt5QixFQUFBcDVCLEVBQUFvNUIsUUFDQXVoQyxFQUFBdmhDLEtBQUF1aEMsU0FDQUMsRUFBQUQsS0FBQUMsSUFBQSxHQUNBQyxFQUFBNzZELEVBQUEsUUFDQXE1QixFQUFBLFdBQUF4ZCxFQUFBdWQsR0FDQTBoQyxFQUFBLGFBRUF0eEIsRUFBQSt3QixFQUFBRyxFQUFBaGhFLEVBRUFxaEUsSUFBQSxXQUNBLElBRUEsSUFBQS9nRSxFQUFBNmdFLEVBQUEzK0QsUUFBQSxHQUNBOCtELEdBQUFoaEUsRUFBQS9CLGdCQUErQzFDLEVBQUEsRUFBQUEsQ0FBQSxxQkFBQWtSLEdBQy9DQSxFQUFBcTBELE1BR0EsT0FBQXpoQyxHQUFBLG1CQUFBNGhDLHdCQUNBamhFLEVBQUFDLEtBQUE2Z0UsYUFBQUUsR0FJQSxJQUFBSixFQUFBbC9ELFFBQUEsU0FDQSxJQUFBK3pCLEVBQUEvekIsUUFBQSxhQUNHLE1BQUE2QixLQWZILEdBbUJBMjlELEVBQUEsU0FBQWhoRSxHQUNBLElBQUFELEVBQ0EsU0FBQW1NLEVBQUFsTSxJQUFBLG1CQUFBRCxFQUFBQyxFQUFBRCxXQUVBNlAsRUFBQSxTQUFBOVAsRUFBQW1oRSxHQUNBLElBQUFuaEUsRUFBQW9oRSxHQUFBLENBQ0FwaEUsRUFBQW9oRSxJQUFBLEVBQ0EsSUFBQWo2QixFQUFBbm5DLEVBQUFrNUQsR0FDQUosRUFBQSxXQW9DQSxJQW5DQSxJQUFBbjhELEVBQUFxRCxFQUFBcWhFLEdBQ0FDLEVBQUEsR0FBQXRoRSxFQUFBdzVELEdBQ0E3OUQsRUFBQSxFQUNBMlgsRUFBQSxTQUFBaXVELEdBQ0EsSUFJQXIrRCxFQUFBakQsRUFBQXVoRSxFQUpBQyxFQUFBSCxFQUFBQyxFQUFBRCxHQUFBQyxFQUFBRyxLQUNBeC9ELEVBQUFxL0QsRUFBQXIvRCxRQUNBQyxFQUFBby9ELEVBQUFwL0QsT0FDQXM5QixFQUFBOGhDLEVBQUE5aEMsT0FFQSxJQUNBZ2lDLEdBQ0FILElBQ0EsR0FBQXRoRSxFQUFBMmhFLElBQUFDLEVBQUE1aEUsR0FDQUEsRUFBQTJoRSxHQUFBLElBRUEsSUFBQUYsRUFBQXYrRCxFQUFBdkcsR0FFQThpQyxLQUFBRSxRQUNBejhCLEVBQUF1K0QsRUFBQTlrRSxHQUNBOGlDLElBQ0FBLEVBQUFDLE9BQ0E4aEMsR0FBQSxJQUdBdCtELElBQUFxK0QsRUFBQXZoRSxRQUNBbUMsRUFBQWtLLEVBQUEseUJBQ1dwTSxFQUFBaWhFLEVBQUFoK0QsSUFDWGpELEVBQUFuRSxLQUFBb0gsRUFBQWhCLEVBQUFDLEdBQ1dELEVBQUFnQixJQUNGZixFQUFBeEYsR0FDRixNQUFBNEcsR0FDUGs4QixJQUFBK2hDLEdBQUEvaEMsRUFBQUMsT0FDQXY5QixFQUFBb0IsS0FHQTRqQyxFQUFBenBDLE9BQUEvQixHQUFBMlgsRUFBQTZ6QixFQUFBeHJDLE1BQ0FxRSxFQUFBazVELE1BQ0FsNUQsRUFBQW9oRSxJQUFBLEVBQ0FELElBQUFuaEUsRUFBQTJoRSxJQUFBRSxFQUFBN2hFLE9BR0E2aEUsRUFBQSxTQUFBN2hFLEdBQ0FNLEVBQUF4RSxLQUFBa0ssRUFBQSxXQUNBLElBRUE5QyxFQUFBdStELEVBQUFuOUQsRUFGQTNILEVBQUFxRCxFQUFBcWhFLEdBQ0FTLEVBQUFDLEVBQUEvaEUsR0FlQSxHQWJBOGhFLElBQ0E1K0QsRUFBQWc0RCxFQUFBLFdBQ0E3N0IsRUFDQUQsRUFBQWpsQixLQUFBLHFCQUFBeGQsRUFBQXFELElBQ1N5aEUsRUFBQXo3RCxFQUFBZzhELHNCQUNUUCxHQUFtQnpoRSxVQUFBaWlFLE9BQUF0bEUsS0FDVjJILEVBQUEwQixFQUFBMUIsWUFBQXJGLE9BQ1RxRixFQUFBckYsTUFBQSw4QkFBQXRDLEtBSUFxRCxFQUFBMmhFLEdBQUF0aUMsR0FBQTBpQyxFQUFBL2hFLEdBQUEsS0FDS0EsRUFBQWtpRSxRQUFBMWlFLEVBQ0xzaUUsR0FBQTUrRCxFQUFBSyxFQUFBLE1BQUFMLEVBQUF2RSxLQUdBb2pFLEVBQUEsU0FBQS9oRSxHQUNBLFdBQUFBLEVBQUEyaEUsSUFBQSxLQUFBM2hFLEVBQUFraUUsSUFBQWxpRSxFQUFBazVELElBQUF4N0QsUUFFQWtrRSxFQUFBLFNBQUE1aEUsR0FDQU0sRUFBQXhFLEtBQUFrSyxFQUFBLFdBQ0EsSUFBQXk3RCxFQUNBcGlDLEVBQ0FELEVBQUFqbEIsS0FBQSxtQkFBQW5hLElBQ0t5aEUsRUFBQXo3RCxFQUFBbThELHFCQUNMVixHQUFlemhFLFVBQUFpaUUsT0FBQWppRSxFQUFBcWhFLFFBSWZlLEVBQUEsU0FBQXpsRSxHQUNBLElBQUFxRCxFQUFBd08sS0FDQXhPLEVBQUFzbUIsS0FDQXRtQixFQUFBc21CLElBQUEsR0FDQXRtQixJQUFBcWlFLElBQUFyaUUsR0FDQXFoRSxHQUFBMWtFLEVBQ0FxRCxFQUFBdzVELEdBQUEsRUFDQXg1RCxFQUFBa2lFLEtBQUFsaUUsRUFBQWtpRSxHQUFBbGlFLEVBQUFrNUQsR0FBQXhvRCxTQUNBWixFQUFBOVAsR0FBQSxLQUVBc2lFLEVBQUEsU0FBQTNsRSxHQUNBLElBQ0FzRCxFQURBRCxFQUFBd08sS0FFQSxJQUFBeE8sRUFBQXNtQixHQUFBLENBQ0F0bUIsRUFBQXNtQixJQUFBLEVBQ0F0bUIsSUFBQXFpRSxJQUFBcmlFLEVBQ0EsSUFDQSxHQUFBQSxJQUFBckQsRUFBQSxNQUFBMFAsRUFBQSxxQ0FDQXBNLEVBQUFpaEUsRUFBQXZrRSxJQUNBbThELEVBQUEsV0FDQSxJQUFBL3ZDLEdBQXVCczVDLEdBQUFyaUUsRUFBQXNtQixJQUFBLEdBQ3ZCLElBQ0FybUIsRUFBQW5FLEtBQUFhLEVBQUFzSSxFQUFBcTlELEVBQUF2NUMsRUFBQSxHQUFBOWpCLEVBQUFtOUQsRUFBQXI1QyxFQUFBLElBQ1MsTUFBQXhsQixHQUNUNitELEVBQUF0bUUsS0FBQWl0QixFQUFBeGxCLE9BSUF2RCxFQUFBcWhFLEdBQUExa0UsRUFDQXFELEVBQUF3NUQsR0FBQSxFQUNBMXBELEVBQUE5UCxHQUFBLElBRUcsTUFBQXVELEdBQ0g2K0QsRUFBQXRtRSxNQUFrQnVtRSxHQUFBcmlFLEVBQUFzbUIsSUFBQSxHQUF5Qi9pQixNQUszQ3c5RCxJQUVBRixFQUFBLFNBQUEwQixHQUNBL2dELEVBQUFoVCxLQUFBcXlELEVBM0pBLFVBMkpBLE1BQ0E5aEQsRUFBQXdqRCxHQUNBakMsRUFBQXhrRSxLQUFBMFMsTUFDQSxJQUNBK3pELEVBQUF0OUQsRUFBQXE5RCxFQUFBOXpELEtBQUEsR0FBQXZKLEVBQUFtOUQsRUFBQTV6RCxLQUFBLElBQ0ssTUFBQTVLLEdBQ0x3K0QsRUFBQXRtRSxLQUFBMFMsS0FBQTVLLE1BSUEwOEQsRUFBQSxTQUFBaUMsR0FDQS96RCxLQUFBMHFELE1BQ0ExcUQsS0FBQTB6RCxRQUFBMWlFLEVBQ0FnUCxLQUFBZ3JELEdBQUEsRUFDQWhyRCxLQUFBOFgsSUFBQSxFQUNBOVgsS0FBQTZ5RCxRQUFBN2hFLEVBQ0FnUCxLQUFBbXpELEdBQUEsRUFDQW56RCxLQUFBNHlELElBQUEsSUFFQXBrRSxVQUFBekIsRUFBQSxHQUFBQSxDQUFBc2xFLEVBQUE3akUsV0FFQWlELEtBQUEsU0FBQXVpRSxFQUFBQyxHQUNBLElBQUFsQixFQUFBL3hCLEVBQUFwdEIsRUFBQTVULEtBQUFxeUQsSUFPQSxPQU5BVSxFQUFBRCxHQUFBLG1CQUFBa0IsS0FDQWpCLEVBQUFHLEtBQUEsbUJBQUFlLEtBQ0FsQixFQUFBOWhDLE9BQUFKLEVBQUFELEVBQUFLLFlBQUFqZ0MsRUFDQWdQLEtBQUEwcUQsR0FBQTcyRCxLQUFBay9ELEdBQ0EveUQsS0FBQTB6RCxJQUFBMXpELEtBQUEwekQsR0FBQTcvRCxLQUFBay9ELEdBQ0EveUQsS0FBQWdyRCxJQUFBMXBELEVBQUF0QixNQUFBLEdBQ0EreUQsRUFBQXZoRSxTQUdBZzFELE1BQUEsU0FBQXlOLEdBQ0EsT0FBQWowRCxLQUFBdk8sVUFBQVQsRUFBQWlqRSxNQUdBakMsRUFBQSxXQUNBLElBQUF4Z0UsRUFBQSxJQUFBc2dFLEVBQ0E5eEQsS0FBQXhPLFVBQ0F3TyxLQUFBdE0sUUFBQStDLEVBQUFxOUQsRUFBQXRpRSxFQUFBLEdBQ0F3TyxLQUFBck0sT0FBQThDLEVBQUFtOUQsRUFBQXBpRSxFQUFBLElBRUEwZ0UsRUFBQWhoRSxFQUFBOHZDLEVBQUEsU0FBQXhwQixHQUNBLE9BQUFBLElBQUE2NkMsR0FBQTc2QyxJQUFBeTZDLEVBQ0EsSUFBQUQsRUFBQXg2QyxHQUNBdTZDLEVBQUF2NkMsS0FJQTVmLElBQUFRLEVBQUFSLEVBQUFrQixFQUFBbEIsRUFBQU0sR0FBQXE2RCxHQUEwRDkrRCxRQUFBNCtELElBQzFEdGxFLEVBQUEsR0FBQUEsQ0FBQXNsRSxFQTdNQSxXQThNQXRsRSxFQUFBLEdBQUFBLENBOU1BLFdBK01Ba2xFLEVBQUFsbEUsRUFBQSxZQUdBNkssSUFBQVUsRUFBQVYsRUFBQU0sR0FBQXE2RCxFQWxOQSxXQW9OQTUrRCxPQUFBLFNBQUF6RixHQUNBLElBQUFnbUUsRUFBQWx6QixFQUFBaGhDLE1BR0EsT0FEQXV3QixFQURBMmpDLEVBQUF2Z0UsUUFDQXpGLEdBQ0FnbUUsRUFBQTFpRSxXQUdBb0csSUFBQVUsRUFBQVYsRUFBQU0sR0FBQTJhLElBQUEwL0MsR0EzTkEsV0E2TkE3K0QsUUFBQSxTQUFBcVMsR0FDQSxPQUFBNm1ELEVBQUEvNUMsR0FBQTdTLE9BQUFpeUQsRUFBQUksRUFBQXJ5RCxLQUFBK0YsTUFHQW5PLElBQUFVLEVBQUFWLEVBQUFNLElBQUFxNkQsR0FBQXhsRSxFQUFBLEdBQUFBLENBQUEsU0FBQTJ1QixHQUNBMjJDLEVBQUF6M0QsSUFBQThnQixHQUFBLE1BQUE0MkMsTUFsT0EsV0FxT0ExM0QsSUFBQSxTQUFBL0ksR0FDQSxJQUFBMmxCLEVBQUF4WCxLQUNBazBELEVBQUFsekIsRUFBQXhwQixHQUNBOWpCLEVBQUF3Z0UsRUFBQXhnRSxRQUNBQyxFQUFBdWdFLEVBQUF2Z0UsT0FDQWUsRUFBQWc0RCxFQUFBLFdBQ0EsSUFBQXIzQyxLQUNBcGlCLEVBQUEsRUFDQWtoRSxFQUFBLEVBQ0ExdUMsRUFBQTV6QixHQUFBLFdBQUFMLEdBQ0EsSUFBQTRpRSxFQUFBbmhFLElBQ0FvaEUsR0FBQSxFQUNBaC9DLEVBQUF4aEIsVUFBQTdDLEdBQ0FtakUsSUFDQTM4QyxFQUFBOWpCLFFBQUFsQyxHQUFBQyxLQUFBLFNBQUF0RCxHQUNBa21FLElBQ0FBLEdBQUEsRUFDQWgvQyxFQUFBKytDLEdBQUFqbUUsSUFDQWdtRSxHQUFBemdFLEVBQUEyaEIsS0FDUzFoQixPQUVUd2dFLEdBQUF6Z0UsRUFBQTJoQixLQUdBLE9BREEzZ0IsRUFBQUssR0FBQXBCLEVBQUFlLEVBQUF2RSxHQUNBK2pFLEVBQUExaUUsU0FHQXNKLEtBQUEsU0FBQWpKLEdBQ0EsSUFBQTJsQixFQUFBeFgsS0FDQWswRCxFQUFBbHpCLEVBQUF4cEIsR0FDQTdqQixFQUFBdWdFLEVBQUF2Z0UsT0FDQWUsRUFBQWc0RCxFQUFBLFdBQ0FqbkMsRUFBQTV6QixHQUFBLFdBQUFMLEdBQ0FnbUIsRUFBQTlqQixRQUFBbEMsR0FBQUMsS0FBQXlpRSxFQUFBeGdFLFFBQUFDLE9BSUEsT0FEQWUsRUFBQUssR0FBQXBCLEVBQUFlLEVBQUF2RSxHQUNBK2pFLEVBQUExaUUsNEJDMVJBekUsRUFBQSxHQUFBQSxDQUFBLG1CQUFBcWUsRUFBQWtwRCxFQUFBQyxHQUNBLGFBQ0EsSUFBQXpzQyxFQUFBLzZCLEVBQUEsSUFDQXluRSxFQUFBRCxFQUNBRSxLQUFBNWdFLEtBSUEsR0FDQSw4QkFDQSxtQ0FDQSxpQ0FDQSxpQ0FDQSw0QkFDQSxzQkFDQSxDQUNBLElBQUE2Z0UsT0FBQTFqRSxJQUFBLE9BQUFpTixLQUFBLE9BRUFzMkQsRUFBQSxTQUFBcjdDLEVBQUFtRCxHQUNBLElBQUFqckIsRUFBQXFKLE9BQUF1RixNQUNBLFFBQUFoUCxJQUFBa29CLEdBQUEsSUFBQW1ELEVBQUEsU0FFQSxJQUFBeUwsRUFBQTVPLEdBQUEsT0FBQXM3QyxFQUFBbG5FLEtBQUE4RCxFQUFBOG5CLEVBQUFtRCxHQUNBLElBU0FzNEMsRUFBQTNxRCxFQUFBc2xELEVBQUFzRixFQUFBem5FLEVBVEFveEIsS0FDQTJpQixHQUFBaG9CLEVBQUFxTyxXQUFBLFNBQ0FyTyxFQUFBc08sVUFBQSxTQUNBdE8sRUFBQXVPLFFBQUEsU0FDQXZPLEVBQUF3TyxPQUFBLFFBQ0FtdEMsRUFBQSxFQUNBQyxPQUFBOWpFLElBQUFxckIsRUFBQSxXQUFBQSxJQUFBLEVBRUEwNEMsRUFBQSxJQUFBcHpDLE9BQUF6SSxFQUFBL3BCLE9BQUEreEMsRUFBQSxLQUlBLElBREF3ekIsSUFBQUMsRUFBQSxJQUFBaHpDLE9BQUEsSUFBQW96QyxFQUFBNWxFLE9BQUEsV0FBQSt4QyxLQUNBbDNCLEVBQUErcUQsRUFBQTkyRCxLQUFBN00sUUFFQWsrRCxFQUFBdGxELEVBQUEvVyxNQUFBK1csRUFBQSxXQUNBNnFELElBQ0F0MkMsRUFBQTFxQixLQUFBekMsRUFBQThRLE1BQUEyeUQsRUFBQTdxRCxFQUFBL1csU0FHQXloRSxHQUFBMXFELEVBQUEsVUFBQUEsRUFBQSxHQUFBaUYsUUFBQTBsRCxFQUFBLFdBQ0EsSUFBQXhuRSxFQUFBLEVBQXVCQSxFQUFBOEIsVUFBQSxTQUEyQjlCLFNBQUE2RCxJQUFBL0IsVUFBQTlCLEtBQUE2YyxFQUFBN2MsUUFBQTZELEtBRWxEZ1osRUFBQSxVQUFBQSxFQUFBL1csTUFBQTdCLEVBQUEsUUFBQXFqRSxFQUFBdCtELE1BQUFvb0IsRUFBQXZVLEVBQUE5SCxNQUFBLElBQ0EweUQsRUFBQTVxRCxFQUFBLFVBQ0E2cUQsRUFBQXZGLEVBQ0Evd0MsRUFBQSxRQUFBdTJDLEtBRUFDLEVBQUEsWUFBQS9xRCxFQUFBL1csT0FBQThoRSxFQUFBLFlBS0EsT0FIQUYsSUFBQXpqRSxFQUFBLFFBQ0F3akUsR0FBQUcsRUFBQTVsRCxLQUFBLEtBQUFvUCxFQUFBMXFCLEtBQUEsSUFDTzBxQixFQUFBMXFCLEtBQUF6QyxFQUFBOFEsTUFBQTJ5RCxJQUNQdDJDLEVBQUEsT0FBQXUyQyxFQUFBdjJDLEVBQUFyYyxNQUFBLEVBQUE0eUQsR0FBQXYyQyxPQUdHLGVBQUF2dEIsRUFBQSxZQUNIdWpFLEVBQUEsU0FBQXI3QyxFQUFBbUQsR0FDQSxZQUFBcnJCLElBQUFrb0IsR0FBQSxJQUFBbUQsS0FBQW00QyxFQUFBbG5FLEtBQUEwUyxLQUFBa1osRUFBQW1ELEtBSUEsZ0JBQUFuRCxFQUFBbUQsR0FDQSxJQUFBM2QsRUFBQTBNLEVBQUFwTCxNQUNBL0osT0FBQWpGLEdBQUFrb0IsT0FBQWxvQixFQUFBa29CLEVBQUFvN0MsR0FDQSxZQUFBdGpFLElBQUFpRixJQUFBM0ksS0FBQTRyQixFQUFBeGEsRUFBQTJkLEdBQUFrNEMsRUFBQWpuRSxLQUFBbU4sT0FBQWlFLEdBQUF3YSxFQUFBbUQsSUFDR2s0QyxzQkNwRUh4bkUsRUFBQSxHQUFBQSxDQUFBLG9CQUFBcWUsRUFBQTRwRCxFQUFBQyxHQUVBLGdCQUFBOUYsR0FDQSxhQUNBLElBQUF6d0QsRUFBQTBNLEVBQUFwTCxNQUNBL0osT0FBQWpGLEdBQUFtK0QsT0FBQW4rRCxFQUFBbStELEVBQUE2RixHQUNBLFlBQUFoa0UsSUFBQWlGLElBQUEzSSxLQUFBNmhFLEVBQUF6d0QsR0FBQSxJQUFBaWpCLE9BQUF3dEMsR0FBQTZGLEdBQUF2NkQsT0FBQWlFLEtBQ0d1MkQsc0JDUEhsb0UsRUFBQSxHQUFBQSxDQUFBLHFCQUFBcWUsRUFBQTZxQixFQUFBaS9CLEdBRUEsZ0JBQUFDLEVBQUFDLEdBQ0EsYUFDQSxJQUFBMTJELEVBQUEwTSxFQUFBcEwsTUFDQS9KLE9BQUFqRixHQUFBbWtFLE9BQUFua0UsRUFBQW1rRSxFQUFBbC9CLEdBQ0EsWUFBQWpsQyxJQUFBaUYsRUFDQUEsRUFBQTNJLEtBQUE2bkUsRUFBQXoyRCxFQUFBMDJELEdBQ0FGLEVBQUE1bkUsS0FBQW1OLE9BQUFpRSxHQUFBeTJELEVBQUFDLElBQ0dGLHNCQ1RIbm9FLEVBQUEsR0FBQUEsQ0FBQSxtQkFBQXFlLEVBQUF0YixFQUFBdWxFLEdBRUEsZ0JBQUFsRyxHQUNBLGFBQ0EsSUFBQXp3RCxFQUFBME0sRUFBQXBMLE1BQ0EvSixPQUFBakYsR0FBQW0rRCxPQUFBbitELEVBQUFtK0QsRUFBQXIvRCxHQUNBLFlBQUFrQixJQUFBaUYsSUFBQTNJLEtBQUE2aEUsRUFBQXp3RCxHQUFBLElBQUFpakIsT0FBQXd0QyxHQUFBci9ELEdBQUEySyxPQUFBaUUsS0FDRzIyRCxtQ0NQSHRvRSxFQUFBLEtBQ0EsSUFBQXVSLEVBQUF2UixFQUFBLEdBQ0F1b0UsRUFBQXZvRSxFQUFBLElBQ0FpekIsRUFBQWp6QixFQUFBLElBRUF5aUIsRUFBQSxhQUVBK2xELEVBQUEsU0FBQXQvRCxHQUNBbEosRUFBQSxHQUFBQSxDQUFBNDBCLE9BQUFuekIsVUFKQSxXQUlBeUgsR0FBQSxJQUlBbEosRUFBQSxFQUFBQSxDQUFBLFdBQXFDLE1BQWtELFFBQWxEeWlCLEVBQUFsaUIsTUFBd0I2QixPQUFBLElBQUEreEMsTUFBQSxRQUM3RHEwQixFQUFBLFdBQ0EsSUFBQXg4RCxFQUFBdUYsRUFBQTBCLE1BQ0EsVUFBQXBFLE9BQUE3QyxFQUFBNUosT0FBQSxJQUNBLFVBQUE0SixJQUFBbW9DLE9BQUFsaEIsR0FBQWpuQixhQUFBNG9CLE9BQUEyekMsRUFBQWhvRSxLQUFBeUwsUUFBQS9ILEtBWkEsWUFlQ3dlLEVBQUE5aEIsTUFDRDZuRSxFQUFBLFdBQ0EsT0FBQS9sRCxFQUFBbGlCLEtBQUEwUyx5QkN0QkEsSUFBQXhJLEVBQUF6SyxFQUFBLEdBQ0FvNUIsRUFBQXA1QixFQUFBLEtBQ0EwUixFQUFBMVIsRUFBQSxJQUFBbUUsRUFDQXFpQixFQUFBeG1CLEVBQUEsSUFBQW1FLEVBQ0E0MkIsRUFBQS82QixFQUFBLElBQ0F1b0UsRUFBQXZvRSxFQUFBLElBQ0F5b0UsRUFBQWgrRCxFQUFBbXFCLE9BQ0EvRyxFQUFBNDZDLEVBQ0FoOUMsRUFBQWc5QyxFQUFBaG5FLFVBQ0FpbkUsRUFBQSxLQUNBQyxFQUFBLEtBRUFDLEVBQUEsSUFBQUgsRUFBQUMsT0FFQSxHQUFBMW9FLEVBQUEsT0FBQTRvRSxHQUFBNW9FLEVBQUEsRUFBQUEsQ0FBQSxXQUdBLE9BRkEyb0UsRUFBQTNvRSxFQUFBLEVBQUFBLENBQUEsYUFFQXlvRSxFQUFBQyxPQUFBRCxFQUFBRSxPQUFBLFFBQUFGLEVBQUFDLEVBQUEsUUFDQyxDQUNERCxFQUFBLFNBQUE5bUUsRUFBQXdDLEdBQ0EsSUFBQTBrRSxFQUFBNTFELGdCQUFBdzFELEVBQ0FLLEVBQUEvdEMsRUFBQXA1QixHQUNBb25FLE9BQUE5a0UsSUFBQUUsRUFDQSxPQUFBMGtFLEdBQUFDLEdBQUFubkUsRUFBQWUsY0FBQStsRSxHQUFBTSxFQUFBcG5FLEVBQ0F5M0IsRUFBQXd2QyxFQUNBLElBQUEvNkMsRUFBQWk3QyxJQUFBQyxFQUFBcG5FLEVBQUFTLE9BQUFULEVBQUF3QyxHQUNBMHBCLEdBQUFpN0MsRUFBQW5uRSxhQUFBOG1FLEdBQUE5bUUsRUFBQVMsT0FBQVQsRUFBQW1uRSxHQUFBQyxFQUFBUixFQUFBaG9FLEtBQUFvQixHQUFBd0MsR0FDQTBrRSxFQUFBNTFELEtBQUF3WSxFQUFBZzlDLElBU0EsSUFQQSxJQUFBL3RELEVBQUEsU0FBQXJZLEdBQ0FBLEtBQUFvbUUsR0FBQS8yRCxFQUFBKzJELEVBQUFwbUUsR0FDQXJCLGNBQUEsRUFDQUUsSUFBQSxXQUF3QixPQUFBMnNCLEVBQUF4ckIsSUFDeEJtakIsSUFBQSxTQUFBN2dCLEdBQTBCa3BCLEVBQUF4ckIsR0FBQXNDLE1BRzFCMlIsRUFBQWtRLEVBQUFxSCxHQUFBenRCLEVBQUEsRUFBb0NrVyxFQUFBblUsT0FBQS9CLEdBQWlCc2EsRUFBQXBFLEVBQUFsVyxNQUNyRHFyQixFQUFBL29CLFlBQUErbEUsRUFDQUEsRUFBQWhuRSxVQUFBZ3FCLEVBQ0F6ckIsRUFBQSxHQUFBQSxDQUFBeUssRUFBQSxTQUFBZytELEdBR0F6b0UsRUFBQSxHQUFBQSxDQUFBLDJCQzFDQUEsRUFBQSxHQUFBQSxDQUFBLHVDQ0VBLElBQUE2SyxFQUFBN0ssRUFBQSxHQUNBZ3BFLEVBQUFocEUsRUFBQSxHQUFBQSxDQUFBLEdBQ0E4a0IsRUFBQSxZQUNBbWtELEdBQUEsRUFFQW5rRCxRQUFBdmdCLE1BQUEsR0FBQXVnQixHQUFBLFdBQTBDbWtELEdBQUEsSUFDMUNwK0QsSUFBQVksRUFBQVosRUFBQU0sRUFBQTg5RCxFQUFBLFNBQ0FqOUMsVUFBQSxTQUFBcEgsR0FDQSxPQUFBb2tELEVBQUEvMUQsS0FBQTJSLEVBQUExaUIsVUFBQUMsT0FBQSxFQUFBRCxVQUFBLFFBQUErQixNQUdBakUsRUFBQSxHQUFBQSxDQUFBOGtCLGlDQ1hBLElBQUFqYSxFQUFBN0ssRUFBQSxHQUNBZ3BFLEVBQUFocEUsRUFBQSxHQUFBQSxDQUFBLEdBRUFpcEUsR0FBQSxFQURBLFlBR0Exa0UsTUFBQSxtQkFBMEMwa0UsR0FBQSxJQUMxQ3ArRCxJQUFBWSxFQUFBWixFQUFBTSxFQUFBODlELEVBQUEsU0FDQWw5QyxLQUFBLFNBQUFuSCxHQUNBLE9BQUFva0QsRUFBQS8xRCxLQUFBMlIsRUFBQTFpQixVQUFBQyxPQUFBLEVBQUFELFVBQUEsUUFBQStCLE1BR0FqRSxFQUFBLEdBQUFBLENBVEEseUJDSEEsSUFBQTZLLEVBQUE3SyxFQUFBLEdBRUE2SyxJQUFBWSxFQUFBLFNBQTZCb2dCLEtBQUE3ckIsRUFBQSxNQUU3QkEsRUFBQSxHQUFBQSxDQUFBLHlCQ0pBLElBQUE2SyxFQUFBN0ssRUFBQSxHQUVBNkssSUFBQVksRUFBQSxTQUE2QmlnQixXQUFBMXJCLEVBQUEsT0FFN0JBLEVBQUEsR0FBQUEsQ0FBQSw0Q0NKQSxJQUFBNkssRUFBQTdLLEVBQUEsR0FDQW1qQixFQUFBbmpCLEVBQUEsSUFDQXFSLEVBQUFyUixFQUFBLElBQ0Fpa0IsRUFBQWprQixFQUFBLEdBQ0FzbkMsS0FBQTNlLFlBQ0F1Z0QsSUFBQTVoQyxHQUFBLE1BQUEzZSxZQUFBLFFBRUE5ZCxJQUFBWSxFQUFBWixFQUFBTSxHQUFBKzlELElBQUFscEUsRUFBQSxHQUFBQSxDQUFBc25DLElBQUEsU0FFQTNlLFlBQUEsU0FBQXNELEdBRUEsR0FBQWk5QyxFQUFBLE9BQUE1aEMsRUFBQWwrQixNQUFBNkosS0FBQS9RLFlBQUEsRUFDQSxJQUFBeVAsRUFBQXdSLEVBQUFsUSxNQUNBOVEsRUFBQThoQixFQUFBdFMsRUFBQXhQLFFBQ0ErRCxFQUFBL0QsRUFBQSxFQUdBLElBRkFELFVBQUFDLE9BQUEsSUFBQStELEVBQUE2SyxLQUFBTyxJQUFBcEwsRUFBQW1MLEVBQUFuUCxVQUFBLE1BQ0FnRSxFQUFBLElBQUFBLEVBQUEvRCxFQUFBK0QsR0FDVUEsR0FBQSxFQUFXQSxJQUFBLEdBQUFBLEtBQUF5TCxLQUFBekwsS0FBQStsQixFQUFBLE9BQUEvbEIsR0FBQSxFQUNyQiwwQ0NsQkEsSUFBQTJFLEVBQUE3SyxFQUFBLEdBQ0FtcEUsRUFBQW5wRSxFQUFBLEdBQUFBLEVBQUEsR0FDQXNuQyxLQUFBbmhDLFFBQ0EraUUsSUFBQTVoQyxHQUFBLE1BQUFuaEMsUUFBQSxRQUVBMEUsSUFBQVksRUFBQVosRUFBQU0sR0FBQSs5RCxJQUFBbHBFLEVBQUEsR0FBQUEsQ0FBQXNuQyxJQUFBLFNBRUFuaEMsUUFBQSxTQUFBOGxCLEdBQ0EsT0FBQWk5QyxFQUVBNWhDLEVBQUFsK0IsTUFBQTZKLEtBQUEvUSxZQUFBLEVBQ0FpbkUsRUFBQWwyRCxLQUFBZ1osRUFBQS9wQixVQUFBLHFDQ1hBLElBQUEySSxFQUFBN0ssRUFBQSxHQUNBb3BFLEVBQUFwcEUsRUFBQSxLQUVBNkssSUFBQVksRUFBQVosRUFBQU0sR0FBQW5MLEVBQUEsR0FBQUEsSUFBQStvQixhQUFBLFlBRUFBLFlBQUEsU0FBQW5FLEdBQ0EsT0FBQXdrRCxFQUFBbjJELEtBQUEyUixFQUFBMWlCLFVBQUFDLE9BQUFELFVBQUEsd0NDTkEsSUFBQTJJLEVBQUE3SyxFQUFBLEdBQ0FvcEUsRUFBQXBwRSxFQUFBLEtBRUE2SyxJQUFBWSxFQUFBWixFQUFBTSxHQUFBbkwsRUFBQSxHQUFBQSxJQUFBNm9CLFFBQUEsWUFFQUEsT0FBQSxTQUFBakUsR0FDQSxPQUFBd2tELEVBQUFuMkQsS0FBQTJSLEVBQUExaUIsVUFBQUMsT0FBQUQsVUFBQSx3Q0NOQSxJQUFBMkksRUFBQTdLLEVBQUEsR0FDQXFwRSxFQUFBcnBFLEVBQUEsR0FBQUEsQ0FBQSxHQUVBNkssSUFBQVksRUFBQVosRUFBQU0sR0FBQW5MLEVBQUEsR0FBQUEsSUFBQTRyQixPQUFBLFlBRUFBLE1BQUEsU0FBQWhILEdBQ0EsT0FBQXlrRCxFQUFBcDJELEtBQUEyUixFQUFBMWlCLFVBQUEscUNDTkEsSUFBQTJJLEVBQUE3SyxFQUFBLEdBQ0FzcEUsRUFBQXRwRSxFQUFBLEdBQUFBLENBQUEsR0FFQTZLLElBQUFZLEVBQUFaLEVBQUFNLEdBQUFuTCxFQUFBLEdBQUFBLElBQUFzc0IsTUFBQSxZQUVBQSxLQUFBLFNBQUExSCxHQUNBLE9BQUEwa0QsRUFBQXIyRCxLQUFBMlIsRUFBQTFpQixVQUFBLHFDQ05BLElBQUEySSxFQUFBN0ssRUFBQSxHQUNBdXBFLEVBQUF2cEUsRUFBQSxHQUFBQSxDQUFBLEdBRUE2SyxJQUFBWSxFQUFBWixFQUFBTSxHQUFBbkwsRUFBQSxHQUFBQSxJQUFBOHJCLFFBQUEsWUFFQUEsT0FBQSxTQUFBbEgsR0FDQSxPQUFBMmtELEVBQUF0MkQsS0FBQTJSLEVBQUExaUIsVUFBQSxxQ0NOQSxJQUFBMkksRUFBQTdLLEVBQUEsR0FDQWdxQixFQUFBaHFCLEVBQUEsR0FBQUEsQ0FBQSxHQUVBNkssSUFBQVksRUFBQVosRUFBQU0sR0FBQW5MLEVBQUEsR0FBQUEsSUFBQWtQLEtBQUEsWUFFQUEsSUFBQSxTQUFBMFYsR0FDQSxPQUFBb0YsRUFBQS9XLEtBQUEyUixFQUFBMWlCLFVBQUEsd0JDUEEsSUFBQTJPLEVBQUE3USxFQUFBLEdBQ0F3RSxFQUFBeEUsRUFBQSxJQUNBa3pCLEVBQUFsekIsRUFBQSxFQUFBQSxDQUFBLFdBRUFHLEVBQUFELFFBQUEsU0FBQXFtQyxHQUNBLElBQUE5YixFQVNHLE9BUkhqbUIsRUFBQStoQyxLQUdBLG1CQUZBOWIsRUFBQThiLEVBQUE3akMsY0FFQStuQixJQUFBbG1CLFFBQUFDLEVBQUFpbUIsRUFBQWhwQixhQUFBZ3BCLE9BQUF4bUIsR0FDQTRNLEVBQUE0WixJQUVBLFFBREFBLElBQUF5SSxNQUNBekksT0FBQXhtQixTQUVHQSxJQUFBd21CLEVBQUFsbUIsTUFBQWttQixpQ0NiSCxJQUFBNWYsRUFBQTdLLEVBQUEsR0FDQXdwRSxFQUFBeHBFLEVBQUEsR0FBQUEsQ0FBQSxHQUNBeXBFLEVBQUF6cEUsRUFBQSxHQUFBQSxJQUFBdUssU0FBQSxHQUVBTSxJQUFBWSxFQUFBWixFQUFBTSxHQUFBcytELEVBQUEsU0FFQWwvRCxRQUFBLFNBQUFxYSxHQUNBLE9BQUE0a0QsRUFBQXYyRCxLQUFBMlIsRUFBQTFpQixVQUFBLHFDQ1BBLElBQUEySSxFQUFBN0ssRUFBQSxHQUNBd2pCLEVBQUF4akIsRUFBQSxJQUNBK2lCLEVBQUEvaUIsRUFBQSxJQUNBNGhCLEVBQUE1aEIsRUFBQSxHQUNBMHBFLEtBQUF4Z0QsS0FDQTlHLEdBQUEsT0FFQXZYLElBQUFZLEVBQUFaLEVBQUFNLEdBQUF5VyxFQUFBLFdBRUFRLEVBQUE4RyxVQUFBamxCLE9BQ0MyZCxFQUFBLFdBRURRLEVBQUE4RyxLQUFBLFVBRUNscEIsRUFBQSxHQUFBQSxDQUFBMHBFLElBQUEsU0FFRHhnRCxLQUFBLFNBQUFxRCxHQUNBLFlBQUF0b0IsSUFBQXNvQixFQUNBbTlDLEVBQUFucEUsS0FBQXdpQixFQUFBOVAsT0FDQXkyRCxFQUFBbnBFLEtBQUF3aUIsRUFBQTlQLE1BQUF1USxFQUFBK0kscUNDbkJBLElBQUExaEIsRUFBQTdLLEVBQUEsR0FDQStrQyxFQUFBL2tDLEVBQUEsS0FDQWczQixFQUFBaDNCLEVBQUEsSUFDQXFtQixFQUFBcm1CLEVBQUEsSUFDQWlrQixFQUFBamtCLEVBQUEsR0FDQW1wQixLQUFBaFUsTUFHQXRLLElBQUFZLEVBQUFaLEVBQUFNLEVBQUFuTCxFQUFBLEVBQUFBLENBQUEsV0FDQStrQyxHQUFBNWIsRUFBQTVvQixLQUFBd2tDLEtBQ0MsU0FDRDV2QixNQUFBLFNBQUFzWCxFQUFBQyxHQUNBLElBQUE3TixFQUFBb0YsRUFBQWhSLEtBQUE5USxRQUNBc3NCLEVBQUF1SSxFQUFBL2pCLE1BRUEsR0FEQXlaLE9BQUF6b0IsSUFBQXlvQixFQUFBN04sRUFBQTZOLEVBQ0EsU0FBQStCLEVBQUEsT0FBQXRGLEVBQUE1b0IsS0FBQTBTLEtBQUF3WixFQUFBQyxHQU1BLElBTEEsSUFBQWYsRUFBQXRGLEVBQUFvRyxFQUFBNU4sR0FDQThxRCxFQUFBdGpELEVBQUFxRyxFQUFBN04sR0FDQThkLEVBQUExWSxFQUFBMGxELEVBQUFoK0MsR0FDQWkrQyxFQUFBLElBQUFybEUsTUFBQW80QixHQUNBdjhCLEVBQUEsRUFDVUEsRUFBQXU4QixFQUFVdjhCLElBQUF3cEUsRUFBQXhwRSxHQUFBLFVBQUFxdUIsRUFDcEJ4YixLQUFBNDBCLE9BQUFsYyxFQUFBdnJCLEdBQ0E2UyxLQUFBMFksRUFBQXZyQixHQUNBLE9BQUF3cEUsbUNDdkJBLElBQUEvK0QsRUFBQTdLLEVBQUEsR0FDQW1qQixFQUFBbmpCLEVBQUEsSUFDQWdwQixLQUFBbGEsS0FHQWpFLElBQUFZLEVBQUFaLEVBQUFNLEdBQUFuTCxFQUFBLEtBQUFjLFNBQUFkLEVBQUEsR0FBQUEsQ0FBQWdwQixJQUFBLFNBQ0FsYSxLQUFBLFNBQUFxZCxHQUNBLE9BQUFuRCxFQUFBem9CLEtBQUE0aUIsRUFBQWxRLFdBQUFoUCxJQUFBa29CLEVBQUEsSUFBQUEsb0NDUkEsSUFBQXRoQixFQUFBN0ssRUFBQSxHQUNBOGhFLEVBQUE5aEUsRUFBQSxJQUdBNkssSUFBQVUsRUFBQVYsRUFBQU0sRUFBQW5MLEVBQUEsRUFBQUEsQ0FBQSxXQUNBLFNBQUFtTCxLQUNBLFFBQUE1RyxNQUFBd3FCLEdBQUF4dUIsS0FBQTRLLGtCQUNDLFNBRUQ0akIsR0FBQSxXQUlBLElBSEEsSUFBQTdvQixFQUFBLEVBQ0FnbEIsRUFBQWhwQixVQUFBQyxPQUNBd0YsRUFBQSx1QkFBQXNMLFVBQUExTyxPQUFBMm1CLEdBQ0FBLEVBQUFobEIsR0FBQTQ3RCxFQUFBbjZELEVBQUF6QixFQUFBaEUsVUFBQWdFLE1BRUEsT0FEQXlCLEVBQUF4RixPQUFBK29CLEVBQ0F2akIsbUNDZkEsSUFBQStCLEVBQUExSixFQUFBLElBQ0E2SyxFQUFBN0ssRUFBQSxHQUNBK2lCLEVBQUEvaUIsRUFBQSxJQUNBTyxFQUFBUCxFQUFBLEtBQ0F1bUIsRUFBQXZtQixFQUFBLElBQ0Fpa0IsRUFBQWprQixFQUFBLEdBQ0E4aEUsRUFBQTloRSxFQUFBLElBQ0F5bUIsRUFBQXptQixFQUFBLElBRUE2SyxJQUFBVSxFQUFBVixFQUFBTSxHQUFBbkwsRUFBQSxHQUFBQSxDQUFBLFNBQUEydUIsR0FBNEVwcUIsTUFBQThCLEtBQUFzb0IsS0FBb0IsU0FFaEd0b0IsS0FBQSxTQUFBMm1CLEdBQ0EsSUFPQTdxQixFQUFBd0YsRUFBQXNqQixFQUFBem9CLEVBUEFtUCxFQUFBb1IsRUFBQWlLLEdBQ0F2QyxFQUFBLG1CQUFBeFgsVUFBQTFPLE1BQ0EybUIsRUFBQWhwQixVQUFBQyxPQUNBZ3BCLEVBQUFELEVBQUEsRUFBQWhwQixVQUFBLFFBQUErQixFQUNBbW5CLE9BQUFubkIsSUFBQWtuQixFQUNBamxCLEVBQUEsRUFDQW1sQixFQUFBNUUsRUFBQTlVLEdBSUEsR0FGQXlaLElBQUFELEVBQUF6aEIsRUFBQXloQixFQUFBRCxFQUFBLEVBQUFocEIsVUFBQSxRQUFBK0IsRUFBQSxTQUVBQSxHQUFBb25CLEdBQUFaLEdBQUFsbUIsT0FBQWdpQixFQUFBOEUsR0FNQSxJQUFBMWpCLEVBQUEsSUFBQThpQixFQURBdG9CLEVBQUE4aEIsRUFBQXRTLEVBQUF4UCxTQUNrQ0EsRUFBQStELEVBQWdCQSxJQUNsRDQ3RCxFQUFBbjZELEVBQUF6QixFQUFBa2xCLEVBQUFELEVBQUF4WixFQUFBekwsTUFBQXlMLEVBQUF6TCxTQU5BLElBQUExRCxFQUFBNm9CLEVBQUE5cUIsS0FBQW9SLEdBQUFoSyxFQUFBLElBQUE4aUIsSUFBdURRLEVBQUF6b0IsRUFBQW9DLFFBQUEyRCxLQUFnQ3JDLElBQ3ZGNDdELEVBQUFuNkQsRUFBQXpCLEVBQUFrbEIsRUFBQTdxQixFQUFBaUMsRUFBQTJvQixHQUFBRixFQUFBN3BCLE1BQUE4RSxJQUFBLEdBQUEra0IsRUFBQTdwQixPQVNBLE9BREF1RyxFQUFBeEYsT0FBQStELEVBQ0F5QixzQkNqQ0EsSUFBQWtELEVBQUE3SyxFQUFBLEdBRUE2SyxJQUFBVSxFQUFBLFNBQTZCL0csUUFBQXhFLEVBQUEsb0NDRjdCLElBQUF1UixFQUFBdlIsRUFBQSxHQUNBeVIsRUFBQXpSLEVBQUEsSUFHQUcsRUFBQUQsUUFBQSxTQUFBMnBFLEdBQ0EsY0FBQUEsR0FIQSxXQUdBQSxHQUFBLFlBQUFBLEVBQUEsTUFBQS80RCxVQUFBLGtCQUNBLE9BQUFXLEVBQUFGLEVBQUEwQixNQUpBLFVBSUE0MkQscUJDUEEsSUFBQUMsRUFBQTlwRSxFQUFBLEVBQUFBLENBQUEsZUFDQXlyQixFQUFBNG5DLEtBQUE1eEQsVUFFQXFvRSxLQUFBcitDLEdBQUF6ckIsRUFBQSxHQUFBQSxDQUFBeXJCLEVBQUFxK0MsRUFBQTlwRSxFQUFBLHVCQ0hBLElBQUErcEUsRUFBQTFXLEtBQUE1eEQsVUFHQWdoQixFQUFBc25ELEVBQUEsU0FDQUMsRUFBQUQsRUFBQUMsUUFDQSxJQUFBM1csS0FBQS94QixLQUFBLElBSkEsZ0JBS0F0aEMsRUFBQSxHQUFBQSxDQUFBK3BFLEVBSkEsV0FJQSxXQUNBLElBQUEzb0UsRUFBQTRvRSxFQUFBenBFLEtBQUEwUyxNQUVBLE9BQUE3UixLQUFBcWhCLEVBQUFsaUIsS0FBQTBTLE1BUkEsK0NDQ0EsSUFBQTJPLEVBQUE1aEIsRUFBQSxHQUNBZ3FFLEVBQUEzVyxLQUFBNXhELFVBQUF1b0UsUUFDQUMsRUFBQTVXLEtBQUE1eEQsVUFBQXlvRSxZQUVBQyxFQUFBLFNBQUEzeEMsR0FDQSxPQUFBQSxFQUFBLEVBQUFBLEVBQUEsSUFBQUEsR0FJQXI0QixFQUFBRCxRQUFBMGhCLEVBQUEsV0FDQSxrQ0FBQXFvRCxFQUFBMXBFLEtBQUEsSUFBQTh5RCxNQUFBLGFBQ0N6eEMsRUFBQSxXQUNEcW9ELEVBQUExcEUsS0FBQSxJQUFBOHlELEtBQUEveEIsUUFDQyxXQUNELElBQUEyVCxTQUFBKzBCLEVBQUF6cEUsS0FBQTBTLE9BQUEsTUFBQXFVLFdBQUEsc0JBQ0EsSUFBQTVtQixFQUFBdVMsS0FDQWdHLEVBQUF2WSxFQUFBMHBFLGlCQUNBNXBFLEVBQUFFLEVBQUEycEUscUJBQ0F6b0UsRUFBQXFYLEVBQUEsTUFBQUEsRUFBQSxZQUNBLE9BQUFyWCxHQUFBLFFBQUFtUCxLQUFBd3ZCLElBQUF0bkIsSUFBQTlELE1BQUF2VCxHQUFBLE1BQ0EsSUFBQXVvRSxFQUFBenBFLEVBQUE0cEUsY0FBQSxPQUFBSCxFQUFBenBFLEVBQUE2cEUsY0FDQSxJQUFBSixFQUFBenBFLEVBQUE4cEUsZUFBQSxJQUFBTCxFQUFBenBFLEVBQUErcEUsaUJBQ0EsSUFBQU4sRUFBQXpwRSxFQUFBZ3FFLGlCQUFBLEtBQUFscUUsRUFBQSxHQUFBQSxFQUFBLElBQUEycEUsRUFBQTNwRSxJQUFBLEtBQ0N5cEUsbUJDeEJELElBQUFwL0QsRUFBQTdLLEVBQUEsR0FDQWtxRSxFQUFBbHFFLEVBQUEsS0FHQTZLLElBQUFZLEVBQUFaLEVBQUFNLEdBQUFrb0QsS0FBQTV4RCxVQUFBeW9FLGlCQUFBLFFBQ0FBLDhDQ0xBLElBQUFyL0QsRUFBQTdLLEVBQUEsR0FDQStpQixFQUFBL2lCLEVBQUEsSUFDQXlSLEVBQUF6UixFQUFBLElBRUE2SyxJQUFBWSxFQUFBWixFQUFBTSxFQUFBbkwsRUFBQSxFQUFBQSxDQUFBLFdBQ0Esa0JBQUFxekQsS0FBQS94QixLQUFBbWdDLFVBQzRFLElBQTVFcE8sS0FBQTV4RCxVQUFBZ2dFLE9BQUFsaEUsTUFBbUMycEUsWUFBQSxXQUEyQixjQUM3RCxRQUVEekksT0FBQSxTQUFBcC9ELEdBQ0EsSUFBQXNQLEVBQUFvUixFQUFBOVAsTUFDQTAzRCxFQUFBbDVELEVBQUFFLEdBQ0EsdUJBQUFnNUQsR0FBQTExQixTQUFBMDFCLEdBQUFoNUQsRUFBQXU0RCxjQUFBLHlCQ1pBLElBQUFyL0QsRUFBQTdLLEVBQUEsR0FFQTZLLElBQUFVLEVBQUEsUUFBNEJpNkIsSUFBQSxXQUFtQixXQUFBNnRCLE1BQUEyVywyQ0NEL0NocUUsRUFBQSxHQUFBQSxDQUFBLGVBQUE4aEIsR0FDQSxrQkFDQSxPQUFBQSxFQUFBN08sS0FBQSw4Q0NGQWpULEVBQUEsR0FBQUEsQ0FBQSxlQUFBOGhCLEdBQ0Esa0JBQ0EsT0FBQUEsRUFBQTdPLEtBQUEsOENDRkFqVCxFQUFBLEdBQUFBLENBQUEsa0JBQUE4aEIsR0FDQSxrQkFDQSxPQUFBQSxFQUFBN08sS0FBQSxpRENGQWpULEVBQUEsR0FBQUEsQ0FBQSxpQkFBQThoQixHQUNBLGtCQUNBLE9BQUFBLEVBQUE3TyxLQUFBLGdEQ0ZBalQsRUFBQSxHQUFBQSxDQUFBLGdCQUFBOGhCLEdBQ0EsZ0JBQUE4b0QsR0FDQSxPQUFBOW9ELEVBQUE3TyxLQUFBLFdBQUEyM0Qsb0NDRkE1cUUsRUFBQSxHQUFBQSxDQUFBLG1CQUFBOGhCLEdBQ0Esa0JBQ0EsT0FBQUEsRUFBQTdPLEtBQUEsNENDRkFqVCxFQUFBLEdBQUFBLENBQUEsb0JBQUE4aEIsR0FDQSxnQkFBQTZhLEdBQ0EsT0FBQTdhLEVBQUE3TyxLQUFBLGNBQUEwcEIsb0NDRkEzOEIsRUFBQSxHQUFBQSxDQUFBLHFCQUFBOGhCLEdBQ0EsZ0JBQUEraUMsR0FDQSxPQUFBL2lDLEVBQUE3TyxLQUFBLGVBQUE0eEMsb0NDRkE3a0QsRUFBQSxHQUFBQSxDQUFBLGlCQUFBOGhCLEdBQ0Esa0JBQ0EsT0FBQUEsRUFBQTdPLEtBQUEsNkNDRkFqVCxFQUFBLEdBQUFBLENBQUEsZ0JBQUE4aEIsR0FDQSxrQkFDQSxPQUFBQSxFQUFBN08sS0FBQSw0Q0NGQWpULEVBQUEsR0FBQUEsQ0FBQSxpQkFBQThoQixHQUNBLGtCQUNBLE9BQUFBLEVBQUE3TyxLQUFBLGdEQ0ZBalQsRUFBQSxHQUFBQSxDQUFBLGVBQUE4aEIsR0FDQSxrQkFDQSxPQUFBQSxFQUFBN08sS0FBQSw4Q0NGQWpULEVBQUEsR0FBQUEsQ0FBQSxrQkFBQThoQixHQUNBLGdCQUFBbmhCLEdBQ0EsT0FBQW1oQixFQUFBN08sS0FBQSxXQUFBdFMsb0NDRkEsSUFBQWtLLEVBQUE3SyxFQUFBLEdBQ0Fpa0IsRUFBQWprQixFQUFBLEdBQ0FrTyxFQUFBbE8sRUFBQSxJQUVBNnFFLEVBQUEsY0FFQWhnRSxJQUFBWSxFQUFBWixFQUFBTSxFQUFBbkwsRUFBQSxHQUFBQSxDQUhBLGNBR0EsVUFDQThxRSxXQUFBLFNBQUFua0MsR0FDQSxJQUFBbGpCLEVBQUF2VixFQUFBK0UsS0FBQTB6QixFQUxBLGNBTUF6Z0MsRUFBQStkLEVBQUFsVCxLQUFBTyxJQUFBcFAsVUFBQUMsT0FBQSxFQUFBRCxVQUFBLFFBQUErQixFQUFBd2YsRUFBQXRoQixTQUNBNG9FLEVBQUFyOUQsT0FBQWk1QixHQUNBLE9BQUFra0MsRUFDQUEsRUFBQXRxRSxLQUFBa2pCLEVBQUFzbkQsRUFBQTdrRSxHQUNBdWQsRUFBQXRPLE1BQUFqUCxJQUFBNmtFLEVBQUE1b0UsVUFBQTRvRSxzQkNmQSxJQUFBbGdFLEVBQUE3SyxFQUFBLEdBRUE2SyxJQUFBWSxFQUFBLFVBRUE4bEMsT0FBQXZ4QyxFQUFBLHFDQ0ZBLElBQUE2SyxFQUFBN0ssRUFBQSxHQUNBa08sRUFBQWxPLEVBQUEsSUFHQTZLLElBQUFZLEVBQUFaLEVBQUFNLEVBQUFuTCxFQUFBLEdBQUFBLENBRkEsWUFFQSxVQUNBa3NCLFNBQUEsU0FBQXlhLEdBQ0EsU0FBQXo0QixFQUFBK0UsS0FBQTB6QixFQUpBLFlBS0F4Z0MsUUFBQXdnQyxFQUFBemtDLFVBQUFDLE9BQUEsRUFBQUQsVUFBQSxRQUFBK0Isb0NDUEEsSUFBQTRHLEVBQUE3SyxFQUFBLEdBQ0Fpa0IsRUFBQWprQixFQUFBLEdBQ0FrTyxFQUFBbE8sRUFBQSxJQUVBZ3JFLEVBQUEsWUFFQW5nRSxJQUFBWSxFQUFBWixFQUFBTSxFQUFBbkwsRUFBQSxHQUFBQSxDQUhBLFlBR0EsVUFDQWlyRSxTQUFBLFNBQUF0a0MsR0FDQSxJQUFBbGpCLEVBQUF2VixFQUFBK0UsS0FBQTB6QixFQUxBLFlBTUF1a0MsRUFBQWhwRSxVQUFBQyxPQUFBLEVBQUFELFVBQUEsUUFBQStCLEVBQ0E0YSxFQUFBb0YsRUFBQVIsRUFBQXRoQixRQUNBdXFCLE9BQUF6b0IsSUFBQWluRSxFQUFBcnNELEVBQUE5TixLQUFBTyxJQUFBMlMsRUFBQWluRCxHQUFBcnNELEdBQ0Frc0QsRUFBQXI5RCxPQUFBaTVCLEdBQ0EsT0FBQXFrQyxFQUNBQSxFQUFBenFFLEtBQUFrakIsRUFBQXNuRCxFQUFBcitDLEdBQ0FqSixFQUFBdE8sTUFBQXVYLEVBQUFxK0MsRUFBQTVvRSxPQUFBdXFCLEtBQUFxK0MsbUNDaEJBLElBQUFsZ0UsRUFBQTdLLEVBQUEsR0FDQTJpRSxFQUFBM2lFLEVBQUEsSUFBQUEsRUFBQSxHQUNBNkssSUFBQVksRUFBQSxVQUVBMC9ELFlBQUEsU0FBQXhqQyxHQUNBLE9BQUFnN0IsRUFBQTF2RCxLQUFBMDBCLG9DQ0xBLElBQUFnN0IsRUFBQTNpRSxFQUFBLElBQUFBLEVBQUEsR0FHQUEsRUFBQSxHQUFBQSxDQUFBME4sT0FBQSxrQkFBQXU0QixHQUNBaHpCLEtBQUF1aEIsR0FBQTltQixPQUFBdTRCLEdBQ0FoekIsS0FBQWt6QixHQUFBLEdBRUMsV0FDRCxJQUVBaWxDLEVBRkF6NUQsRUFBQXNCLEtBQUF1aEIsR0FDQXR1QixFQUFBK00sS0FBQWt6QixHQUVBLE9BQUFqZ0MsR0FBQXlMLEVBQUF4UCxRQUFpQ2YsV0FBQTZDLEVBQUFzRSxNQUFBLElBQ2pDNmlFLEVBQUF6SSxFQUFBaHhELEVBQUF6TCxHQUNBK00sS0FBQWt6QixJQUFBaWxDLEVBQUFqcEUsUUFDVWYsTUFBQWdxRSxFQUFBN2lFLE1BQUEsb0NDYlZ2SSxFQUFBLEdBQUFBLENBQUEsZ0JBQUFxMUMsR0FDQSxrQkFDQSxPQUFBQSxFQUFBcGlDLEtBQUEsdUJDSkEsSUFBQXBJLEVBQUE3SyxFQUFBLEdBQ0FtakIsRUFBQW5qQixFQUFBLElBQ0Fpa0IsRUFBQWprQixFQUFBLEdBRUE2SyxJQUFBVSxFQUFBLFVBRUE4L0QsSUFBQSxTQUFBQyxHQU1BLElBTEEsSUFBQUMsRUFBQXBvRCxFQUFBbW9ELEVBQUFELEtBQ0F4c0QsRUFBQW9GLEVBQUFzbkQsRUFBQXBwRSxRQUNBK29CLEVBQUFocEIsVUFBQUMsT0FDQTBpQixLQUNBemtCLEVBQUEsRUFDQXllLEVBQUF6ZSxHQUNBeWtCLEVBQUEvZCxLQUFBNEcsT0FBQTY5RCxFQUFBbnJFLE9BQ0FBLEVBQUE4cUIsR0FBQXJHLEVBQUEvZCxLQUFBNEcsT0FBQXhMLFVBQUE5QixLQUNLLE9BQUF5a0IsRUFBQS9WLEtBQUEsd0JDZkwsSUFBQWpFLEVBQUE3SyxFQUFBLEdBQ0FxbUIsRUFBQXJtQixFQUFBLElBQ0FzMkMsRUFBQTVvQyxPQUFBNG9DLGFBQ0FrMUIsRUFBQTk5RCxPQUFBKzlELGNBR0E1Z0UsSUFBQVUsRUFBQVYsRUFBQU0sS0FBQXFnRSxHQUFBLEdBQUFBLEVBQUFycEUsUUFBQSxVQUVBc3BFLGNBQUEsU0FBQXp5RCxHQUtBLElBSkEsSUFHQTB5RCxFQUhBN21ELEtBQ0FxRyxFQUFBaHBCLFVBQUFDLE9BQ0EvQixFQUFBLEVBRUE4cUIsRUFBQTlxQixHQUFBLENBRUEsR0FEQXNyRSxHQUFBeHBFLFVBQUE5QixLQUNBaW1CLEVBQUFxbEQsRUFBQSxXQUFBQSxFQUFBLE1BQUFwa0QsV0FBQW9rRCxFQUFBLDhCQUNBN21ELEVBQUEvZCxLQUFBNGtFLEVBQUEsTUFDQXAxQixFQUFBbzFCLEdBQ0FwMUIsRUFBQSxRQUFBbzFCLEdBQUEsWUFBQUEsRUFBQSxhQUVLLE9BQUE3bUQsRUFBQS9WLEtBQUEsd0JDbkJMLElBQUFqRSxFQUFBN0ssRUFBQSxHQUVBNkssSUFBQVUsRUFBQSxRQUNBb2dFLE1BQUEsU0FBQWhuRSxHQUNBLE9BQUFBLEVBQUEsRUFBQW9NLEtBQUFpVSxNQUFBalUsS0FBQWdVLE1BQUFwZ0IsdUJDSkEsSUFBQWtHLEVBQUE3SyxFQUFBLEdBQ0ErbkMsRUFBQS9uQyxFQUFBLEtBQ0FpTCxFQUFBOEYsS0FBQTlGLElBRUFKLElBQUFVLEVBQUEsUUFDQXFnRSxLQUFBLFNBQUE1eUQsR0FDQSxJQUFBbkgsRUFBQWsyQixFQUFBL3VCLE1BQ0FuUixFQUFBa2dDLEdBQUEvdUIsR0FDQSxPQUFBbkgsR0FBQXd1QixJQUFBLEVBQUF4NEIsR0FBQXc0QixLQUFBLEdBQUF4dUIsRUFBQWhLLElBQUFvRCxFQUFBK04sR0FBQS9OLEdBQUErTix3QkNSQSxJQUFBbk8sRUFBQTdLLEVBQUEsR0FDQStuQyxFQUFBL25DLEVBQUEsS0FDQWlMLEVBQUE4RixLQUFBOUYsSUFHQUosSUFBQVUsRUFBQVYsRUFBQU0sRUFBQW5MLEVBQUEsRUFBQUEsQ0FBQSxXQUNBLGVBQUErUSxLQUFBODZELE1BQUEsU0FDQyxRQUNEQSxLQUFBLFNBQUE3eUQsR0FDQSxPQUFBakksS0FBQXd2QixJQUFBdm5CLE1BQUEsR0FDQSt1QixFQUFBL3VCLEdBQUErdUIsR0FBQS91QixJQUFBLEdBQ0EvTixFQUFBK04sRUFBQSxHQUFBL04sR0FBQStOLEVBQUEsS0FBQWpJLEtBQUEraEQsRUFBQSx1QkNYQSxJQUFBam9ELEVBQUE3SyxFQUFBLEdBRUE2SyxJQUFBVSxFQUFBLFFBQTRCeThCLEtBQUFob0MsRUFBQSx3QkNGNUIsSUFBQTZLLEVBQUE3SyxFQUFBLEdBRUE2SyxJQUFBVSxFQUFBLFFBQ0F1Z0UsS0FBQSxTQUFBOXlELEdBQ0EsT0FBQWpJLEtBQUFwTixJQUFBcVYsR0FBQWpJLEtBQUEwdkIsd0JDSkEsSUFBQTUxQixFQUFBN0ssRUFBQSxHQUVBNkssSUFBQVUsRUFBQSxRQUE0QnlwQyxNQUFBaDFDLEVBQUEsd0JDRjVCLElBQUE2SyxFQUFBN0ssRUFBQSxHQUVBNkssSUFBQVUsRUFBQSxRQUNBd2dFLE1BQUEsU0FBQS95RCxHQUNBLE9BQUFqSSxLQUFBcE4sSUFBQXFWLEdBQUFqSSxLQUFBaTdELDJCQ0pBLElBQUFuaEUsRUFBQTdLLEVBQUEsR0FDQWlzRSxFQUFBbDdELEtBQUFtN0QsS0FHQXJoRSxJQUFBVSxFQUFBVixFQUFBTSxFQUFBbkwsRUFBQSxFQUFBQSxDQUFBLFdBQ0EsVUFBQWlzRSxFQUFBLGtCQUFBQSxFQUFBOXBFLFNBQ0MsUUFDRCtwRSxLQUFBLFNBQUFsekQsRUFBQUMsR0FDQSxJQUNBa3pELEdBQUFuekQsRUFDQW96RCxHQUFBbnpELEVBQ0FvekQsRUFIQSxNQUdBRixFQUNBRyxFQUpBLE1BSUFGLEVBQ0EsU0FBQUMsRUFBQUMsSUFMQSxNQUtBSCxJQUFBLElBQUFHLEVBQUFELEdBTEEsTUFLQUQsSUFBQSxpQ0NiQSxJQUFBdmhFLEVBQUE3SyxFQUFBLEdBQ0F1Z0MsRUFBQXh2QixLQUFBd3ZCLElBRUExMUIsSUFBQVUsRUFBQSxRQUNBZ2hFLE1BQUEsU0FBQUMsRUFBQUMsR0FNQSxJQUxBLElBSUFyaUUsRUFBQXNpRSxFQUpBQyxFQUFBLEVBQ0F2c0UsRUFBQSxFQUNBOHFCLEVBQUFocEIsVUFBQUMsT0FDQXlxRSxFQUFBLEVBRUF4c0UsRUFBQThxQixHQUVBMGhELEdBREF4aUUsRUFBQW0yQixFQUFBcitCLFVBQUE5QixRQUdBdXNFLEtBREFELEVBQUFFLEVBQUF4aUUsR0FDQXNpRSxFQUFBLEVBQ0FFLEVBQUF4aUUsR0FHQXVpRSxHQUZPdmlFLEVBQUEsR0FDUHNpRSxFQUFBdGlFLEVBQUF3aUUsR0FDQUYsRUFDT3RpRSxFQUVQLE9BQUF3aUUsSUFBQXZzQyxRQUFBdXNDLEVBQUE3N0QsS0FBQTg3RCxLQUFBRix1QkNyQkEsSUFBQTloRSxFQUFBN0ssRUFBQSxHQUVBNkssSUFBQVUsRUFBQSxRQUE0QnNwQyxPQUFBNzBDLEVBQUEsd0JDRjVCLElBQUE2SyxFQUFBN0ssRUFBQSxHQUNBOG5DLEVBQUE5bkMsRUFBQSxLQUVBNkssSUFBQVUsRUFBQVYsRUFBQU0sR0FBQTI4QixHQUFBLzJCLEtBQUFnM0IsT0FBQSxRQUFpRUEsTUFBQUQscUJDSGpFLElBQUFqOUIsRUFBQTdLLEVBQUEsR0FDQWlMLEVBQUE4RixLQUFBOUYsSUFFQUosSUFBQVUsRUFBQSxRQUNBdWhFLEtBQUEsU0FBQTl6RCxHQUNBLE9BQUEvTixFQUFBK04sTUFBQS9OLEdBQUErTixJQUFBLHNCQ0xBLElBQUFuTyxFQUFBN0ssRUFBQSxHQUVBNkssSUFBQVUsRUFBQSxRQUNBd2hFLE1BQUEsU0FBQS96RCxHQUNBLE9BQUFBLEtBQUEsTUFBQWpJLEtBQUFpVSxNQUFBalUsS0FBQXBOLElBQUFxVixFQUFBLElBQUFqSSxLQUFBaThELE9BQUEsdUJDSkEsSUFBQW5pRSxFQUFBN0ssRUFBQSxHQUNBZ29DLEVBQUFob0MsRUFBQSxLQUVBNkssSUFBQVUsRUFBQSxRQUNBMGhFLEtBQUEsU0FBQWowRCxHQUNBLE9BQUFndkIsRUFBQWh2QixNQUFBakksS0FBQXl2QixJQUFBenZCLEtBQUF3dkIsSUFBQXZuQixHQUFBLHlCQ0xBLElBQUFuTyxFQUFBN0ssRUFBQSxHQUNBa3RFLEVBQUFuOEQsS0FBQW84RCxNQUdBdGlFLElBQUFVLEVBQUFWLEVBQUFNLElBQUEraEUsR0FBQSxFQUFBQSxHQUFBLGNBQ0FDLE1BQUEsU0FBQW4wRCxHQUNBLFdBQUFBLFFBQUFqSSxLQUFBcE4sS0FBQSxFQUFBcVYsSUFBQSxFQUFBQSxJQUFBLHNCQ05BLElBQUFuTyxFQUFBN0ssRUFBQSxHQUNBb3RFLEVBQUFyOEQsS0FBQXM4RCxNQU9BeGlFLElBQUFVLEVBQUFWLEVBQUFNLElBQUFpaUUsR0FBQSxFQUFBQSxFQUFBLGNBQXlFQyxNQUx6RSxTQUFBQSxFQUFBcjBELEdBQ0EsT0FBQWk4QixTQUFBajhCLE9BQUEsR0FBQUEsSUFBQSxHQUFBcTBELEdBQUFyMEQsR0FBQWpJLEtBQUFwTixJQUFBcVYsRUFBQWpJLEtBQUE4N0QsS0FBQTd6RCxJQUFBLElBQUFBLHNCQ0pBLElBQUFuTyxFQUFBN0ssRUFBQSxHQUNBZzFDLEVBQUFoMUMsRUFBQSxLQUNBNnNFLEVBQUE5N0QsS0FBQTg3RCxLQUNBUyxFQUFBdjhELEtBQUF3OEQsTUFFQTFpRSxJQUFBVSxFQUFBVixFQUFBTSxJQUFBbWlFLEdBRUEsS0FBQXY4RCxLQUFBaVUsTUFBQXNvRCxFQUFBRSxPQUFBQyxhQUVBSCxFQUFBanRDLFdBQ0EsUUFDQWt0QyxNQUFBLFNBQUF2MEQsR0FDQSxPQUFBQSxNQUFBLEVBQUFzb0IsSUFBQXRvQixFQUFBLGtCQUNBakksS0FBQXBOLElBQUFxVixHQUFBakksS0FBQTB2QixJQUNBdVUsRUFBQWg4QixFQUFBLEVBQUE2ekQsRUFBQTd6RCxFQUFBLEdBQUE2ekQsRUFBQTd6RCxFQUFBLHdCQ2ZBLElBQUFuTyxFQUFBN0ssRUFBQSxHQUNBczFDLEVBQUF0MUMsRUFBQSxLQUVBNkssSUFBQVUsRUFBQVYsRUFBQU0sR0FBQXFpRSxPQUFBLzBDLFVBQUE2YyxHQUFBLFVBQTJFN2MsU0FBQTZjLHFCQ0gzRSxJQUFBenFDLEVBQUE3SyxFQUFBLEdBQ0FtMUMsRUFBQW4xQyxFQUFBLEtBRUE2SyxJQUFBVSxFQUFBVixFQUFBTSxHQUFBcWlFLE9BQUFwNEIsWUFBQUQsR0FBQSxVQUErRUMsV0FBQUQscUJDRi9FLElBQUF0cUMsRUFBQTdLLEVBQUEsR0FFQTZLLElBQUFVLEVBQUEsVUFBOEJtaUUsa0JBQUEsb0NDRjlCLElBQUE3aUUsRUFBQTdLLEVBQUEsR0FFQTZLLElBQUFVLEVBQUEsVUFBOEJvaUUsaUJBQUEsb0NDRjlCLElBQUE5aUUsRUFBQTdLLEVBQUEsR0FDQTR0RSxFQUFBNXRFLEVBQUEsS0FDQXVnQyxFQUFBeHZCLEtBQUF3dkIsSUFFQTExQixJQUFBVSxFQUFBLFVBQ0FzaUUsY0FBQSxTQUFBenBFLEdBQ0EsT0FBQXdwRSxFQUFBeHBFLElBQUFtOEIsRUFBQW44QixJQUFBLHFDQ05BLElBQUF5RyxFQUFBN0ssRUFBQSxHQUVBNkssSUFBQVUsRUFBQSxVQUNBMFosTUFBQSxTQUFBN2dCLEdBRUEsT0FBQUEseUJDTEEsSUFBQXlHLEVBQUE3SyxFQUFBLEdBRUE2SyxJQUFBVSxFQUFBLFVBQThCcWlFLFVBQUE1dEUsRUFBQSx3QkNGOUIsSUFBQTZLLEVBQUE3SyxFQUFBLEdBQ0E4dEUsRUFBQTl0RSxFQUFBLEdBQUFpMUMsU0FFQXBxQyxJQUFBVSxFQUFBLFVBQ0EwcEMsU0FBQSxTQUFBdHdDLEdBQ0EsdUJBQUFBLEdBQUFtcEUsRUFBQW5wRSx1QkNMQSxJQUFBa0csRUFBQTdLLEVBQUEsR0FFQTZLLElBQUFVLEVBQUEsVUFBOEJrcEMsUUFBQTFqQyxLQUFBeXZCLElBQUEsdUNDRjlCLElBQUEzMUIsRUFBQTdLLEVBQUEsR0FDQSt0RSxFQUFBL3RFLEVBQUEsR0FDQWd1RSxFQUFBaHVFLEVBQUEsS0FDQWl1RSxFQUFBLEdBQUFDLFlBRUFyakUsSUFBQVksRUFBQVosRUFBQU0sR0FBQTRpRSxFQUFBLFdBRUEsWUFBQUUsRUFBQTF0RSxLQUFBLE9BQUEwRCxPQUNDOHBFLEVBQUEsV0FFREUsRUFBQTF0RSxZQUNDLFVBQ0QydEUsWUFBQSxTQUFBQyxHQUNBLElBQUExcUQsRUFBQXVxRCxFQUFBLzZELEtBQUEsNkNBQ0EsWUFBQWhQLElBQUFrcUUsRUFBQUYsRUFBQTF0RSxLQUFBa2pCLEdBQUF3cUQsRUFBQTF0RSxLQUFBa2pCLEVBQUEwcUQsb0NDZEEsSUFBQXRqRSxFQUFBN0ssRUFBQSxHQUNBcVIsRUFBQXJSLEVBQUEsSUFDQWd1RSxFQUFBaHVFLEVBQUEsS0FDQXV4QyxFQUFBdnhDLEVBQUEsS0FDQW91RSxFQUFBLEdBQUE5YixRQUNBdHRDLEVBQUFqVSxLQUFBaVUsTUFDQW1KLEdBQUEsYUFDQWtnRCxFQUFBLHdDQUdBQyxFQUFBLFNBQUFqdEUsRUFBQVosR0FHQSxJQUZBLElBQUFMLEdBQUEsRUFDQW11RSxFQUFBOXRFLElBQ0FMLEVBQUEsR0FDQW11RSxHQUFBbHRFLEVBQUE4c0IsRUFBQS90QixHQUNBK3RCLEVBQUEvdEIsR0FBQW11RSxFQUFBLElBQ0FBLEVBQUF2cEQsRUFBQXVwRCxFQUFBLE1BR0FDLEVBQUEsU0FBQW50RSxHQUdBLElBRkEsSUFBQWpCLEVBQUEsRUFDQUssRUFBQSxJQUNBTCxHQUFBLEdBQ0FLLEdBQUEwdEIsRUFBQS90QixHQUNBK3RCLEVBQUEvdEIsR0FBQTRrQixFQUFBdmtCLEVBQUFZLEdBQ0FaLElBQUFZLEVBQUEsS0FHQW90RSxFQUFBLFdBR0EsSUFGQSxJQUFBcnVFLEVBQUEsRUFDQXdCLEVBQUEsS0FDQXhCLEdBQUEsR0FDQSxRQUFBd0IsR0FBQSxJQUFBeEIsR0FBQSxJQUFBK3RCLEVBQUEvdEIsR0FBQSxDQUNBLElBQUE0RSxFQUFBMEksT0FBQXlnQixFQUFBL3RCLElBQ0F3QixFQUFBLEtBQUFBLEVBQUFvRCxFQUFBcEQsRUFBQTJ2QyxFQUFBaHhDLEtBMUJBLElBMEJBLEVBQUF5RSxFQUFBN0MsUUFBQTZDLEVBRUcsT0FBQXBELEdBRUg0K0IsRUFBQSxTQUFBeG5CLEVBQUEzWCxFQUFBcXRFLEdBQ0EsV0FBQXJ0RSxFQUFBcXRFLEVBQUFydEUsRUFBQSxLQUFBbS9CLEVBQUF4bkIsRUFBQTNYLEVBQUEsRUFBQXF0RSxFQUFBMTFELEdBQUF3bkIsRUFBQXhuQixJQUFBM1gsRUFBQSxFQUFBcXRFLElBZUE3akUsSUFBQVksRUFBQVosRUFBQU0sS0FBQWlqRSxJQUNBLGVBQUE5YixRQUFBLElBQ0EsU0FBQUEsUUFBQSxJQUNBLGVBQUFBLFFBQUEsSUFDQSw0Q0FBQUEsUUFBQSxNQUNBdHlELEVBQUEsRUFBQUEsQ0FBQSxXQUVBb3VFLEVBQUE3dEUsWUFDQyxVQUNEK3hELFFBQUEsU0FBQXFjLEdBQ0EsSUFJQTNtRSxFQUFBOCtDLEVBQUFwb0IsRUFBQXNWLEVBSkFoN0IsRUFBQWcxRCxFQUFBLzZELEtBQUFvN0QsR0FDQWxxRSxFQUFBa04sRUFBQXM5RCxHQUNBL3NFLEVBQUEsR0FDQXBCLEVBM0RBLElBNkRBLEdBQUEyRCxFQUFBLEdBQUFBLEVBQUEsU0FBQW1qQixXQUFBK21ELEdBRUEsR0FBQXIxRCxLQUFBLFlBQ0EsR0FBQUEsSUFBQSxNQUFBQSxHQUFBLFlBQUF0TCxPQUFBc0wsR0FLQSxHQUpBQSxFQUFBLElBQ0FwWCxFQUFBLElBQ0FvWCxNQUVBQSxFQUFBLE1BS0EsR0FIQTh0QyxHQURBOStDLEVBckNBLFNBQUFnUixHQUdBLElBRkEsSUFBQTNYLEVBQUEsRUFDQTBmLEVBQUEvSCxFQUNBK0gsR0FBQSxNQUNBMWYsR0FBQSxHQUNBMGYsR0FBQSxLQUVBLEtBQUFBLEdBQUEsR0FDQTFmLEdBQUEsRUFDQTBmLEdBQUEsRUFDRyxPQUFBMWYsRUEyQkhzQyxDQUFBcVYsRUFBQXduQixFQUFBLGFBQ0EsRUFBQXhuQixFQUFBd25CLEVBQUEsR0FBQXg0QixFQUFBLEdBQUFnUixFQUFBd25CLEVBQUEsRUFBQXg0QixFQUFBLEdBQ0E4K0MsR0FBQSxrQkFDQTkrQyxFQUFBLEdBQUFBLEdBQ0EsR0FHQSxJQUZBc21FLEVBQUEsRUFBQXhuQixHQUNBcG9CLEVBQUF2NkIsRUFDQXU2QixHQUFBLEdBQ0E0dkMsRUFBQSxPQUNBNXZDLEdBQUEsRUFJQSxJQUZBNHZDLEVBQUE5dEMsRUFBQSxHQUFBOUIsRUFBQSxNQUNBQSxFQUFBMTJCLEVBQUEsRUFDQTAyQixHQUFBLElBQ0E4dkMsRUFBQSxPQUNBOXZDLEdBQUEsR0FFQTh2QyxFQUFBLEdBQUE5dkMsR0FDQTR2QyxFQUFBLEtBQ0FFLEVBQUEsR0FDQWh1RSxFQUFBaXVFLFNBRUFILEVBQUEsRUFBQXhuQixHQUNBd25CLEVBQUEsSUFBQXRtRSxFQUFBLEdBQ0F4SCxFQUFBaXVFLElBQUFsOUIsRUFBQWh4QyxLQTlGQSxJQThGQTRELEdBUUssT0FITDNELEVBRkEyRCxFQUFBLEVBRUF2QyxJQURBb3lDLEVBQUF4ekMsRUFBQTJCLFNBQ0FnQyxFQUFBLEtBQUFvdEMsRUFBQWh4QyxLQW5HQSxJQW1HQTRELEVBQUE2dkMsR0FBQXh6QyxJQUFBMlUsTUFBQSxFQUFBNitCLEVBQUE3dkMsR0FBQSxJQUFBM0QsRUFBQTJVLE1BQUE2K0IsRUFBQTd2QyxJQUVBdkMsRUFBQXBCLG1DQzdHQSxJQUFBaUssRUFBQXpLLEVBQUEsR0FDQXVpQixFQUFBdmlCLEVBQUEsSUFDQWczQixFQUFBaDNCLEVBQUEsSUFDQW81QixFQUFBcDVCLEVBQUEsS0FDQXlSLEVBQUF6UixFQUFBLElBQ0E0aEIsRUFBQTVoQixFQUFBLEdBQ0F3bUIsRUFBQXhtQixFQUFBLElBQUFtRSxFQUNBaWYsRUFBQXBqQixFQUFBLElBQUFtRSxFQUNBdU4sRUFBQTFSLEVBQUEsSUFBQW1FLEVBQ0FreEMsRUFBQXIxQyxFQUFBLElBQUFpMUIsS0FFQTI1QyxFQUFBbmtFLEVBQUEsT0FDQW9qQixFQUFBK2dELEVBQ0FuakQsRUFBQW1qRCxFQUFBbnRFLFVBRUFvdEUsRUFMQSxVQUtBNzNDLEVBQUFoM0IsRUFBQSxHQUFBQSxDQUFBeXJCLElBQ0FxakQsRUFBQSxTQUFBcGhFLE9BQUFqTSxVQUdBc3RFLEVBQUEsU0FBQUMsR0FDQSxJQUFBcnFFLEVBQUE4TSxFQUFBdTlELEdBQUEsR0FDQSxvQkFBQXJxRSxLQUFBeEMsT0FBQSxHQUVBLElBQ0E4c0UsRUFBQXg1QixFQUFBeTVCLEVBREF2SyxHQURBaGdFLEVBQUFtcUUsRUFBQW5xRSxFQUFBc3dCLE9BQUFvZ0IsRUFBQTF3QyxFQUFBLElBQ0FpakMsV0FBQSxHQUVBLFFBQUErOEIsR0FBQSxLQUFBQSxHQUVBLFNBREFzSyxFQUFBdHFFLEVBQUFpakMsV0FBQSxLQUNBLE1BQUFxbkMsRUFBQSxPQUFBM3RDLFNBQ0ssUUFBQXFqQyxFQUFBLENBQ0wsT0FBQWhnRSxFQUFBaWpDLFdBQUEsSUFDQSxnQkFBQTZOLEVBQUEsRUFBb0N5NUIsRUFBQSxHQUFjLE1BQ2xELGlCQUFBejVCLEVBQUEsRUFBcUN5NUIsRUFBQSxHQUFjLE1BQ25ELGVBQUF2cUUsRUFFQSxRQUFBK21FLEVBQUF5RCxFQUFBeHFFLEVBQUF3USxNQUFBLEdBQUEvVSxFQUFBLEVBQUFDLEVBQUE4dUUsRUFBQWh0RSxPQUFvRS9CLEVBQUFDLEVBQU9ELElBSTNFLElBSEFzckUsRUFBQXlELEVBQUF2bkMsV0FBQXhuQyxJQUdBLElBQUFzckUsRUFBQXdELEVBQUEsT0FBQTV0QyxJQUNPLE9BQUE3SSxTQUFBMDJDLEVBQUExNUIsSUFFSixPQUFBOXdDLEdBR0gsSUFBQWlxRSxFQUFBLFVBQUFBLEVBQUEsUUFBQUEsRUFBQSxTQUNBQSxFQUFBLFNBQUF4dEUsR0FDQSxJQUFBdUQsRUFBQXpDLFVBQUFDLE9BQUEsSUFBQWYsRUFDQXFpQixFQUFBeFEsS0FDQSxPQUFBd1EsYUFBQW1yRCxJQUVBQyxFQUFBanRELEVBQUEsV0FBMEM2SixFQUFBdkcsUUFBQTNrQixLQUFBa2pCLEtBeEMxQyxVQXdDc0V1VCxFQUFBdlQsSUFDdEUyVixFQUFBLElBQUF2TCxFQUFBa2hELEVBQUFwcUUsSUFBQThlLEVBQUFtckQsR0FBQUcsRUFBQXBxRSxJQUVBLFFBTUF0QyxFQU5BaVUsRUFBQXRXLEVBQUEsSUFBQXdtQixFQUFBcUgsR0FBQSw2S0FNQXZMLE1BQUEsS0FBQW9jLEVBQUEsRUFBMkJwb0IsRUFBQW5VLE9BQUF1OEIsRUFBaUJBLElBQzVDbmMsRUFBQXNMLEVBQUF4ckIsRUFBQWlVLEVBQUFvb0IsTUFBQW5jLEVBQUFxc0QsRUFBQXZzRSxJQUNBcVAsRUFBQWs5RCxFQUFBdnNFLEVBQUErZ0IsRUFBQXlLLEVBQUF4ckIsSUFHQXVzRSxFQUFBbnRFLFVBQUFncUIsRUFDQUEsRUFBQS9vQixZQUFBa3NFLEVBQ0E1dUUsRUFBQSxHQUFBQSxDQUFBeUssRUF4REEsU0F3REFta0UscUJDbkVBLElBQUEvakUsRUFBQTdLLEVBQUEsR0FDQW0xQyxFQUFBbjFDLEVBQUEsS0FFQTZLLElBQUFRLEVBQUFSLEVBQUFNLEdBQUFpcUMsWUFBQUQsSUFBOERDLFdBQUFELHFCQ0g5RCxJQUFBdHFDLEVBQUE3SyxFQUFBLEdBQ0FzMUMsRUFBQXQxQyxFQUFBLEtBRUE2SyxJQUFBUSxFQUFBUixFQUFBTSxHQUFBc3RCLFVBQUE2YyxJQUEwRDdjLFNBQUE2YyxrQ0NGMUQsSUFBQXprQyxFQUFBN1EsRUFBQSxHQUNBNlosRUFBQTdaLEVBQUEsSUFDQW92RSxFQUFBcHZFLEVBQUEsRUFBQUEsQ0FBQSxlQUNBcXZFLEVBQUF4akUsU0FBQXBLLFVBRUEydEUsS0FBQUMsR0FBQXJ2RSxFQUFBLElBQUFtRSxFQUFBa3JFLEVBQUFELEdBQThGaHVFLE1BQUEsU0FBQXVRLEdBQzlGLHNCQUFBc0IsT0FBQXBDLEVBQUFjLEdBQUEsU0FDQSxJQUFBZCxFQUFBb0MsS0FBQXhSLFdBQUEsT0FBQWtRLGFBQUFzQixLQUVBLEtBQUF0QixFQUFBa0ksRUFBQWxJLElBQUEsR0FBQXNCLEtBQUF4UixZQUFBa1EsRUFBQSxTQUNBLDZCQ1hBLElBQUFELEVBQUExUixFQUFBLElBQUFtRSxFQUNBbXJFLEVBQUF6akUsU0FBQXBLLFVBQ0E4dEUsRUFBQSx3QkFDQSxTQUdBRCxHQUFBdHZFLEVBQUEsS0FBQTBSLEVBQUE0OUQsRUFIQSxRQUlBdHVFLGNBQUEsRUFDQUUsSUFBQSxXQUNBLElBQ0EsVUFBQStSLE1BQUFnSyxNQUFBc3lELEdBQUEsR0FDSyxNQUFBdm5FLEdBQ0wsOEJDWEEsSUFBQTZDLEVBQUE3SyxFQUFBLEdBRUE2SyxJQUFBWSxFQUFBLFlBQWdDK0wsS0FBQXhYLEVBQUEscUNDRGhDLElBQUFzbUIsRUFBQXRtQixFQUFBLElBQ0FvaUIsS0FDQUEsRUFBQXBpQixFQUFBLEVBQUFBLENBQUEsb0JBQ0FvaUIsRUFBQSxrQkFDQXBpQixFQUFBLEdBQUFBLENBQUFjLE9BQUFXLFVBQUEsc0JBQ0EsaUJBQUE2a0IsRUFBQXJULE1BQUEsTUFDRyxvQkNQSCxJQUFBcEksRUFBQTdLLEVBQUEsR0FDQTZLLElBQUFVLEVBQUEsVUFBOEJrSSxlQUFBelQsRUFBQSxLQUFBd2xCLHFCQ0Q5QnJsQixFQUFBRCxRQUFBWSxPQUFBZ0QsSUFBQSxTQUFBa1YsRUFBQUMsR0FFQSxPQUFBRCxJQUFBQyxFQUFBLElBQUFELEdBQUEsRUFBQUEsR0FBQSxFQUFBQyxFQUFBRCxNQUFBQyx1QkNGQSxJQUFBcE8sRUFBQTdLLEVBQUEsR0FDQTZLLElBQUFVLEVBQUEsVUFBOEJ6SCxHQUFBOUQsRUFBQSx3QkNEOUIsSUFBQTZLLEVBQUE3SyxFQUFBLEdBRUE2SyxJQUFBVSxFQUFBVixFQUFBTSxFQUFBLFVBQTBDbkosT0FBQWhDLEVBQUEsd0JDRjFDLElBQUE2USxFQUFBN1EsRUFBQSxHQUVBQSxFQUFBLEdBQUFBLENBQUEsd0JBQUF5akUsR0FDQSxnQkFBQTkrRCxHQUNBLFFBQUFrTSxFQUFBbE0sTUFBQTgrRCxLQUFBOStELHdCQ0pBLElBQUFrTSxFQUFBN1EsRUFBQSxHQUVBQSxFQUFBLEdBQUFBLENBQUEsb0JBQUF3dkUsR0FDQSxnQkFBQTdxRSxHQUNBLE9BQUFrTSxFQUFBbE0sTUFBQTZxRSxLQUFBN3FFLHVCQ0pBLElBQUFrTSxFQUFBN1EsRUFBQSxHQUVBQSxFQUFBLEdBQUFBLENBQUEsb0JBQUF5dkUsR0FDQSxnQkFBQTlxRSxHQUNBLE9BQUFrTSxFQUFBbE0sTUFBQThxRSxLQUFBOXFFLHVCQ0pBLElBQUFrTSxFQUFBN1EsRUFBQSxHQUNBd3dCLEVBQUF4d0IsRUFBQSxJQUFBNHdCLFNBRUE1d0IsRUFBQSxHQUFBQSxDQUFBLDZCQUFBd2pFLEdBQ0EsZ0JBQUE3K0QsR0FDQSxPQUFBNitELEdBQUEzeUQsRUFBQWxNLEdBQUE2K0QsRUFBQWh6QyxFQUFBN3JCLDBCQ0xBLElBQUFrTSxFQUFBN1EsRUFBQSxHQUNBd3dCLEVBQUF4d0IsRUFBQSxJQUFBNHdCLFNBRUE1d0IsRUFBQSxHQUFBQSxDQUFBLGdCQUFBMHZFLEdBQ0EsZ0JBQUEvcUUsR0FDQSxPQUFBK3FFLEdBQUE3K0QsRUFBQWxNLEdBQUErcUUsRUFBQWwvQyxFQUFBN3JCLDBCQ0xBLElBQUFrTSxFQUFBN1EsRUFBQSxHQUNBd3dCLEVBQUF4d0IsRUFBQSxJQUFBNHdCLFNBRUE1d0IsRUFBQSxHQUFBQSxDQUFBLGtCQUFBMnZFLEdBQ0EsZ0JBQUFockUsR0FDQSxPQUFBZ3JFLEdBQUE5K0QsRUFBQWxNLEdBQUFnckUsRUFBQW4vQyxFQUFBN3JCLDBCQ0xBM0UsRUFBQSxHQUFBQSxDQUFBLGlDQUNBLE9BQUFBLEVBQUEsS0FBQW1FLHFCQ0RBLElBQUE0ZSxFQUFBL2lCLEVBQUEsSUFDQW16QixFQUFBbnpCLEVBQUEsSUFFQUEsRUFBQSxHQUFBQSxDQUFBLGtCQUNBLGdCQUFBMkUsR0FDQSxPQUFBd3VCLEVBQUFwUSxFQUFBcGUsd0JDTEEsSUFBQW9lLEVBQUEvaUIsRUFBQSxJQUNBNHZFLEVBQUE1dkUsRUFBQSxJQUVBQSxFQUFBLEdBQUFBLENBQUEsNEJBQ0EsZ0JBQUEyRSxHQUNBLE9BQUFpckUsRUFBQTdzRCxFQUFBcGUsd0JDTEEsSUFBQXdlLEVBQUFuakIsRUFBQSxJQUNBNnZFLEVBQUE3dkUsRUFBQSxJQUFBbUUsRUFFQW5FLEVBQUEsR0FBQUEsQ0FBQSxzQ0FDQSxnQkFBQTJFLEVBQUF0QyxHQUNBLE9BQUF3dEUsRUFBQTFzRCxFQUFBeGUsR0FBQXRDLHVCQ05BLElBQUF3SSxFQUFBN0ssRUFBQSxHQUVBNkssSUFBQVUsRUFBQVYsRUFBQU0sR0FBQW5MLEVBQUEsY0FBdUVpMkMsaUJBQUFqMkMsRUFBQSx3QkNGdkUsSUFBQTZLLEVBQUE3SyxFQUFBLEdBRUE2SyxJQUFBVSxFQUFBVixFQUFBTSxHQUFBbkwsRUFBQSxjQUF1RWUsZUFBQWYsRUFBQSxJQUFBbUUscUJDRnZFLElBQUEwRyxFQUFBN0ssRUFBQSxHQUVBNkssSUFBQVUsRUFBQSxVQUE4QmdJLE9BQUF2VCxFQUFBLHVCQ0Q5QixJQUFBb3hDLEVBQUFweEMsRUFBQSxJQUNBeXlDLEVBQUF6eUMsRUFBQSxJQUNBa2pCLEVBQUFsakIsRUFBQSxJQUNBRyxFQUFBRCxRQUFBLFNBQUF5RSxHQUNBLElBQUFnRCxFQUFBeXBDLEVBQUF6c0MsR0FDQWl1QyxFQUFBSCxFQUFBdHVDLEVBQ0EsR0FBQXl1QyxFQUtBLElBSkEsSUFHQXZ3QyxFQUhBcTBDLEVBQUE5RCxFQUFBanVDLEdBQ0Ewc0MsRUFBQW51QixFQUFBL2UsRUFDQS9ELEVBQUEsRUFFQXMyQyxFQUFBdjBDLE9BQUEvQixHQUFBaXhDLEVBQUE5d0MsS0FBQW9FLEVBQUF0QyxFQUFBcTBDLEVBQUF0MkMsT0FBQXVILEVBQUFiLEtBQUF6RSxHQUNHLE9BQUFzRixpQ0NYSCxJQUFBOEMsRUFBQXpLLEVBQUEsR0FDQXVpQixFQUFBdmlCLEVBQUEsSUFDQWl6QixFQUFBanpCLEVBQUEsSUFDQTZLLEVBQUE3SyxFQUFBLEdBQ0E0SyxFQUFBNUssRUFBQSxJQUNBa3dCLEVBQUFsd0IsRUFBQSxJQUFBOGtCLElBQ0FpcEQsRUFBQS90RSxFQUFBLEdBQ0FvbEIsRUFBQXBsQixFQUFBLElBQ0FtNUIsRUFBQW41QixFQUFBLElBQ0FpSSxFQUFBakksRUFBQSxJQUNBMG1CLEVBQUExbUIsRUFBQSxHQUNBbW9DLEVBQUFub0MsRUFBQSxLQUNBOHZFLEVBQUE5dkUsRUFBQSxLQUNBK3ZFLEVBQUEvdkUsRUFBQSxLQUNBd0UsRUFBQXhFLEVBQUEsSUFDQXVSLEVBQUF2UixFQUFBLEdBQ0E2USxFQUFBN1EsRUFBQSxHQUNBbWpCLEVBQUFuakIsRUFBQSxJQUNBeVIsRUFBQXpSLEVBQUEsSUFDQThpQixFQUFBOWlCLEVBQUEsSUFDQWd3RSxFQUFBaHdFLEVBQUEsSUFDQWl3RSxFQUFBandFLEVBQUEsS0FDQXFuQixFQUFBcm5CLEVBQUEsSUFDQW9uQixFQUFBcG5CLEVBQUEsSUFDQW16QixFQUFBbnpCLEVBQUEsSUFDQW9qQixFQUFBaUUsRUFBQWxqQixFQUNBdU4sRUFBQTBWLEVBQUFqakIsRUFDQXFpQixFQUFBeXBELEVBQUE5ckUsRUFDQWlrQyxFQUFBMzlCLEVBQUFsSSxPQUNBMnRFLEVBQUF6bEUsRUFBQW1NLEtBQ0F1NUQsRUFBQUQsS0FBQXI1RCxVQUVBdTVELEVBQUExcEQsRUFBQSxXQUNBb2pELEVBQUFwakQsRUFBQSxlQUNBMnFCLEtBQWVoYSxxQkFDZmc1QyxFQUFBanJELEVBQUEsbUJBQ0FrckQsRUFBQWxyRCxFQUFBLFdBQ0FtckQsRUFBQW5yRCxFQUFBLGNBQ0FuQyxFQUFBbmlCLE9BQUEsVUFDQTBrRSxFQUFBLG1CQUFBcDlCLEVBQ0Fvb0MsRUFBQS9sRSxFQUFBK2xFLFFBRUFuaUQsR0FBQW1pRCxNQUFBLFlBQUFBLEVBQUEsVUFBQUMsVUFHQUMsRUFBQXo5QyxHQUFBODZDLEVBQUEsV0FDQSxPQUVHLEdBRkhpQyxFQUFBdCtELEtBQXNCLEtBQ3RCeFEsSUFBQSxXQUFzQixPQUFBd1EsRUFBQXVCLEtBQUEsS0FBdUI3UixNQUFBLElBQVd5USxNQUNyREEsSUFDRixTQUFBbE4sRUFBQXRDLEVBQUE4M0IsR0FDRCxJQUFBdzJDLEVBQUF2dEQsRUFBQUgsRUFBQTVnQixHQUNBc3VFLFVBQUExdEQsRUFBQTVnQixHQUNBcVAsRUFBQS9NLEVBQUF0QyxFQUFBODNCLEdBQ0F3MkMsR0FBQWhzRSxJQUFBc2UsR0FBQXZSLEVBQUF1UixFQUFBNWdCLEVBQUFzdUUsSUFDQ2ovRCxFQUVENjdCLEVBQUEsU0FBQXhyQixHQUNBLElBQUFwZixFQUFBMnRFLEVBQUF2dUQsR0FBQWl1RCxFQUFBNW5DLEVBQUEsV0FFQSxPQURBemxDLEVBQUF5akMsR0FBQXJrQixFQUNBcGYsR0FHQWl1RSxFQUFBcEwsR0FBQSxpQkFBQXA5QixFQUFBNWxDLFNBQUEsU0FBQW1DLEdBQ0EsdUJBQUFBLEdBQ0MsU0FBQUEsR0FDRCxPQUFBQSxhQUFBeWpDLEdBR0EzQixFQUFBLFNBQUE5aEMsRUFBQXRDLEVBQUE4M0IsR0FLQSxPQUpBeDFCLElBQUFzZSxHQUFBd2pCLEVBQUE4cEMsRUFBQWx1RSxFQUFBODNCLEdBQ0E1b0IsRUFBQTVNLEdBQ0F0QyxFQUFBb1AsRUFBQXBQLEdBQUEsR0FDQWtQLEVBQUE0b0IsR0FDQTVYLEVBQUErdEQsRUFBQWp1RSxJQUNBODNCLEVBQUFsNUIsWUFJQXNoQixFQUFBNWQsRUFBQXlyRSxJQUFBenJFLEVBQUF5ckUsR0FBQS90RSxLQUFBc0MsRUFBQXlyRSxHQUFBL3RFLElBQUEsR0FDQTgzQixFQUFBNjFDLEVBQUE3MUMsR0FBc0JsNUIsV0FBQTZoQixFQUFBLFVBSnRCUCxFQUFBNWQsRUFBQXlyRSxJQUFBMStELEVBQUEvTSxFQUFBeXJFLEVBQUF0dEQsRUFBQSxPQUNBbmUsRUFBQXlyRSxHQUFBL3RFLElBQUEsR0FJS3F1RSxFQUFBL3JFLEVBQUF0QyxFQUFBODNCLElBQ0Z6b0IsRUFBQS9NLEVBQUF0QyxFQUFBODNCLElBRUgwMkMsRUFBQSxTQUFBbHNFLEVBQUE4RyxHQUNBOEYsRUFBQTVNLEdBS0EsSUFKQSxJQUdBdEMsRUFIQWlVLEVBQUF5NUQsRUFBQXRrRSxFQUFBMFgsRUFBQTFYLElBQ0FyTCxFQUFBLEVBQ0FDLEVBQUFpVyxFQUFBblUsT0FFQTlCLEVBQUFELEdBQUFxbUMsRUFBQTloQyxFQUFBdEMsRUFBQWlVLEVBQUFsVyxLQUFBcUwsRUFBQXBKLElBQ0EsT0FBQXNDLEdBS0Ftc0UsRUFBQSxTQUFBenVFLEdBQ0EsSUFBQXl3RCxFQUFBemhCLEVBQUE5d0MsS0FBQTBTLEtBQUE1USxFQUFBb1AsRUFBQXBQLEdBQUEsSUFDQSxRQUFBNFEsT0FBQWdRLEdBQUFWLEVBQUErdEQsRUFBQWp1RSxLQUFBa2dCLEVBQUFndUQsRUFBQWx1RSxRQUNBeXdELElBQUF2d0MsRUFBQXRQLEtBQUE1USxLQUFBa2dCLEVBQUErdEQsRUFBQWp1RSxJQUFBa2dCLEVBQUF0UCxLQUFBbTlELElBQUFuOUQsS0FBQW05RCxHQUFBL3RFLEtBQUF5d0QsSUFFQStjLEVBQUEsU0FBQWxyRSxFQUFBdEMsR0FHQSxHQUZBc0MsRUFBQXdlLEVBQUF4ZSxHQUNBdEMsRUFBQW9QLEVBQUFwUCxHQUFBLEdBQ0FzQyxJQUFBc2UsSUFBQVYsRUFBQSt0RCxFQUFBanVFLElBQUFrZ0IsRUFBQWd1RCxFQUFBbHVFLEdBQUEsQ0FDQSxJQUFBODNCLEVBQUEvVyxFQUFBemUsRUFBQXRDLEdBRUEsT0FEQTgzQixJQUFBNVgsRUFBQSt0RCxFQUFBanVFLElBQUFrZ0IsRUFBQTVkLEVBQUF5ckUsSUFBQXpyRSxFQUFBeXJFLEdBQUEvdEUsS0FBQTgzQixFQUFBbDVCLFlBQUEsR0FDQWs1QixJQUVBNDJDLEVBQUEsU0FBQXBzRSxHQUtBLElBSkEsSUFHQXRDLEVBSEE2ekMsRUFBQTF2QixFQUFBckQsRUFBQXhlLElBQ0FnRCxLQUNBdkgsRUFBQSxFQUVBODFDLEVBQUEvekMsT0FBQS9CLEdBQ0FtaUIsRUFBQSt0RCxFQUFBanVFLEVBQUE2ekMsRUFBQTkxQyxPQUFBaUMsR0FBQSt0RSxHQUFBL3RFLEdBQUE2dEIsR0FBQXZvQixFQUFBYixLQUFBekUsR0FDRyxPQUFBc0YsR0FFSHFwRSxFQUFBLFNBQUFyc0UsR0FNQSxJQUxBLElBSUF0QyxFQUpBNHVFLEVBQUF0c0UsSUFBQXNlLEVBQ0FpekIsRUFBQTF2QixFQUFBeXFELEVBQUFWLEVBQUFwdEQsRUFBQXhlLElBQ0FnRCxLQUNBdkgsRUFBQSxFQUVBODFDLEVBQUEvekMsT0FBQS9CLElBQ0FtaUIsRUFBQSt0RCxFQUFBanVFLEVBQUE2ekMsRUFBQTkxQyxPQUFBNndFLElBQUExdUQsRUFBQVUsRUFBQTVnQixJQUFBc0YsRUFBQWIsS0FBQXdwRSxFQUFBanVFLElBQ0csT0FBQXNGLEdBSUg2OUQsSUFZQTU2RCxHQVhBdzlCLEVBQUEsV0FDQSxHQUFBbjFCLGdCQUFBbTFCLEVBQUEsTUFBQXQzQixVQUFBLGdDQUNBLElBQUFpUixFQUFBOVosRUFBQS9GLFVBQUFDLE9BQUEsRUFBQUQsVUFBQSxRQUFBK0IsR0FDQThvQixFQUFBLFNBQUEzckIsR0FDQTZSLE9BQUFnUSxHQUFBOEosRUFBQXhzQixLQUFBZ3dFLEVBQUFudkUsR0FDQW1oQixFQUFBdFAsS0FBQW05RCxJQUFBN3RELEVBQUF0UCxLQUFBbTlELEdBQUFydUQsS0FBQTlPLEtBQUFtOUQsR0FBQXJ1RCxJQUFBLEdBQ0EydUQsRUFBQXo5RCxLQUFBOE8sRUFBQWUsRUFBQSxFQUFBMWhCLEtBR0EsT0FEQTZ4QixHQUFBNUUsR0FBQXFpRCxFQUFBenRELEVBQUFsQixHQUFnRS9nQixjQUFBLEVBQUF3a0IsSUFBQXVILElBQ2hFd2dCLEVBQUF4ckIsS0FFQSxnQ0FDQSxPQUFBOU8sS0FBQW16QixLQUdBL2UsRUFBQWxqQixFQUFBMHJFLEVBQ0F6b0QsRUFBQWpqQixFQUFBc2lDLEVBQ0F6bUMsRUFBQSxJQUFBbUUsRUFBQThyRSxFQUFBOXJFLEVBQUE0c0UsRUFDQS93RSxFQUFBLElBQUFtRSxFQUFBMnNFLEVBQ0E5d0UsRUFBQSxJQUFBbUUsRUFBQTZzRSxFQUVBLzlDLElBQUFqekIsRUFBQSxLQUNBNEssRUFBQXFZLEVBQUEsdUJBQUE2dEQsR0FBQSxHQUdBM29DLEVBQUFoa0MsRUFBQSxTQUFBeEQsR0FDQSxPQUFBNHNDLEVBQUE3bUIsRUFBQS9sQixNQUlBa0ssSUFBQVEsRUFBQVIsRUFBQWtCLEVBQUFsQixFQUFBTSxHQUFBcTZELEdBQTBEampFLE9BQUE2bEMsSUFFMUQsUUFBQThvQyxFQUFBLGlIQUdBNXVELE1BQUEsS0FBQW9jLEdBQUEsRUFBb0J3eUMsRUFBQS91RSxPQUFBdThCLElBQXVCaFksRUFBQXdxRCxFQUFBeHlDLE9BRTNDLFFBQUF5eUMsR0FBQWgrQyxFQUFBek0sRUFBQXZWLE9BQUE2aUMsR0FBQSxFQUFvRG05QixHQUFBaHZFLE9BQUE2eEMsSUFBNkI4N0IsRUFBQXFCLEdBQUFuOUIsT0FFakZucEMsSUFBQVUsRUFBQVYsRUFBQU0sR0FBQXE2RCxFQUFBLFVBRUE0TCxJQUFBLFNBQUEvdUUsR0FDQSxPQUFBa2dCLEVBQUE4dEQsRUFBQWh1RSxHQUFBLElBQ0FndUUsRUFBQWh1RSxHQUNBZ3VFLEVBQUFodUUsR0FBQStsQyxFQUFBL2xDLElBR0FndkUsT0FBQSxTQUFBMXVFLEdBQ0EsSUFBQWl1RSxFQUFBanVFLEdBQUEsTUFBQW1PLFVBQUFuTyxFQUFBLHFCQUNBLFFBQUFOLEtBQUFndUUsRUFBQSxHQUFBQSxFQUFBaHVFLEtBQUFNLEVBQUEsT0FBQU4sR0FFQWl2RSxVQUFBLFdBQTBCampELEdBQUEsR0FDMUJrakQsVUFBQSxXQUEwQmxqRCxHQUFBLEtBRzFCeGpCLElBQUFVLEVBQUFWLEVBQUFNLEdBQUFxNkQsRUFBQSxVQUVBanlELE9BL0ZBLFNBQUE1TyxFQUFBOEcsR0FDQSxZQUFBeEgsSUFBQXdILEVBQUF1a0UsRUFBQXJyRSxHQUFBa3NFLEVBQUFiLEVBQUFyckUsR0FBQThHLElBZ0dBMUssZUFBQTBsQyxFQUVBd1AsaUJBQUE0NkIsRUFFQXh0RCx5QkFBQXdzRCxFQUVBeDhDLG9CQUFBMDlDLEVBRUEvMUMsc0JBQUFnMkMsSUFJQWQsR0FBQXJsRSxJQUFBVSxFQUFBVixFQUFBTSxJQUFBcTZELEdBQUF1SSxFQUFBLFdBQ0EsSUFBQXhpRSxFQUFBNjhCLElBSUEsZ0JBQUErbkMsR0FBQTVrRSxLQUEyRCxNQUEzRDRrRSxHQUFvRHQrRCxFQUFBdEcsS0FBZSxNQUFBNGtFLEVBQUFydkUsT0FBQXlLLE9BQ2xFLFFBQ0RzTCxVQUFBLFNBQUFsUyxHQUlBLElBSEEsSUFFQXF4RCxFQUFBd2IsRUFGQXhuRSxHQUFBckYsR0FDQXZFLEVBQUEsRUFFQThCLFVBQUFDLE9BQUEvQixHQUFBNEosRUFBQWxELEtBQUE1RSxVQUFBOUIsTUFFQSxHQURBb3hFLEVBQUF4YixFQUFBaHNELEVBQUEsSUFDQTZHLEVBQUFtbEQsU0FBQS94RCxJQUFBVSxLQUFBaXNFLEVBQUFqc0UsR0FNQSxPQUxBSCxFQUFBd3hELE9BQUEsU0FBQTN6RCxFQUFBakIsR0FFQSxHQURBLG1CQUFBb3dFLElBQUFwd0UsRUFBQW93RSxFQUFBanhFLEtBQUEwUyxLQUFBNVEsRUFBQWpCLEtBQ0F3dkUsRUFBQXh2RSxHQUFBLE9BQUFBLElBRUE0SSxFQUFBLEdBQUFnc0QsRUFDQW1hLEVBQUEvbUUsTUFBQThtRSxFQUFBbG1FLE1BS0FvK0IsRUFBQSxVQUFBMGhDLElBQUE5cEUsRUFBQSxHQUFBQSxDQUFBb29DLEVBQUEsVUFBQTBoQyxFQUFBMWhDLEVBQUEsVUFBQWxqQixTQUVBaVUsRUFBQWlQLEVBQUEsVUFFQWpQLEVBQUFwb0IsS0FBQSxXQUVBb29CLEVBQUExdUIsRUFBQW1NLEtBQUEsNEJDek9BNVcsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxJQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtB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LE9BQUFyeEYsSUFBcUR1c0csY0FBQSxTQUFBNytGLEdBQTJCLElBQUFoSyxFQUFBa3JELEVBQUF2N0MsS0FBQSxLQUFBM0YsR0FBOEIsT0FBVGhLLEVBQUFpRCxLQUFBK0csRUFBU2hLLEdBQVM4b0csZUFBQTM5QyxFQUFBeDhDLFFBQUEsU0FBQTBvRSxvREFBdUZDLGtCQUFBc2EsRUFBQXozRixPQUFBeEIsSUFBOEIrcUcsRUFBQXpxRyxPQUFBMnlDLFFBQWtCdUUsUUFBQWpzQyxJQUM5ZW9xRixFQUFBb1YsR0FBQXgvRixHQUFBdy9GLEVBQVVwckcsRUFBQUQsUUFBQWkyRixFQUFBLFFBQUFBLEVBQUEsUUFBQUEsOFVDckJWbjJGLEVBQUEsUUFDQUEsRUFBQSxNQUVBQSxFQUFBLEtBRUEsUUFBQUEsRUFBQSw2REFNcUI0d0csZ3JCQUFZcHRELFVBQU1DLCtDQUUvQixPQUNJUyxFQUFBbE0sUUFBQTNQLGNBQUN3b0UsRUFBQTc0RCxRQUFELHlCQUhTNDRELEVBUXJCRSxVQUFTajlGLE9BQ0xxd0MsRUFBQWxNLFFBQUEzUCxjQUFDdW9FLEVBQUQsTUFDQTN3RixTQUFTbXFDLGVBQWUsdUNDckI1QixTQUFBMy9DLEdBQ0EsSUFBQXNtRyxFQUFBLGlCQUFBdG1HLFFBQUEzSixpQkFBQTJKLEVBRUE1SSxFQUFBIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGdldHRlclxuIFx0XHRcdH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gNDM1KTtcbiIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZXhwb3J0IHZhciBzeW0gPSBmdW5jdGlvbiBzeW0oaWQpIHtcbiAgcmV0dXJuICdAQHJlZHV4LXNhZ2EvJyArIGlkO1xufTtcblxuZXhwb3J0IHZhciBUQVNLID0gLyojX19QVVJFX18qL3N5bSgnVEFTSycpO1xuZXhwb3J0IHZhciBIRUxQRVIgPSAvKiNfX1BVUkVfXyovc3ltKCdIRUxQRVInKTtcbmV4cG9ydCB2YXIgTUFUQ0ggPSAvKiNfX1BVUkVfXyovc3ltKCdNQVRDSCcpO1xuZXhwb3J0IHZhciBDQU5DRUwgPSAvKiNfX1BVUkVfXyovc3ltKCdDQU5DRUxfUFJPTUlTRScpO1xuZXhwb3J0IHZhciBTQUdBX0FDVElPTiA9IC8qI19fUFVSRV9fKi9zeW0oJ1NBR0FfQUNUSU9OJyk7XG5leHBvcnQgdmFyIFNFTEZfQ0FOQ0VMTEFUSU9OID0gLyojX19QVVJFX18qL3N5bSgnU0VMRl9DQU5DRUxMQVRJT04nKTtcbmV4cG9ydCB2YXIga29uc3QgPSBmdW5jdGlvbiBrb25zdCh2KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHY7XG4gIH07XG59O1xuZXhwb3J0IHZhciBrVHJ1ZSA9IC8qI19fUFVSRV9fKi9rb25zdCh0cnVlKTtcbmV4cG9ydCB2YXIga0ZhbHNlID0gLyojX19QVVJFX18qL2tvbnN0KGZhbHNlKTtcbmV4cG9ydCB2YXIgbm9vcCA9IGZ1bmN0aW9uIG5vb3AoKSB7fTtcbmV4cG9ydCB2YXIgaWRlbnQgPSBmdW5jdGlvbiBpZGVudCh2KSB7XG4gIHJldHVybiB2O1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrKHZhbHVlLCBwcmVkaWNhdGUsIGVycm9yKSB7XG4gIGlmICghcHJlZGljYXRlKHZhbHVlKSkge1xuICAgIGxvZygnZXJyb3InLCAndW5jYXVnaHQgYXQgY2hlY2snLCBlcnJvcik7XG4gICAgdGhyb3cgbmV3IEVycm9yKGVycm9yKTtcbiAgfVxufVxuXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuZXhwb3J0IGZ1bmN0aW9uIGhhc093bihvYmplY3QsIHByb3BlcnR5KSB7XG4gIHJldHVybiBpcy5ub3RVbmRlZihvYmplY3QpICYmIGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7XG59XG5cbmV4cG9ydCB2YXIgaXMgPSB7XG4gIHVuZGVmOiBmdW5jdGlvbiB1bmRlZih2KSB7XG4gICAgcmV0dXJuIHYgPT09IG51bGwgfHwgdiA9PT0gdW5kZWZpbmVkO1xuICB9LFxuICBub3RVbmRlZjogZnVuY3Rpb24gbm90VW5kZWYodikge1xuICAgIHJldHVybiB2ICE9PSBudWxsICYmIHYgIT09IHVuZGVmaW5lZDtcbiAgfSxcbiAgZnVuYzogZnVuY3Rpb24gZnVuYyhmKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBmID09PSAnZnVuY3Rpb24nO1xuICB9LFxuICBudW1iZXI6IGZ1bmN0aW9uIG51bWJlcihuKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBuID09PSAnbnVtYmVyJztcbiAgfSxcbiAgc3RyaW5nOiBmdW5jdGlvbiBzdHJpbmcocykge1xuICAgIHJldHVybiB0eXBlb2YgcyA9PT0gJ3N0cmluZyc7XG4gIH0sXG4gIGFycmF5OiBBcnJheS5pc0FycmF5LFxuICBvYmplY3Q6IGZ1bmN0aW9uIG9iamVjdChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmICFpcy5hcnJheShvYmopICYmICh0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihvYmopKSA9PT0gJ29iamVjdCc7XG4gIH0sXG4gIHByb21pc2U6IGZ1bmN0aW9uIHByb21pc2UocCkge1xuICAgIHJldHVybiBwICYmIGlzLmZ1bmMocC50aGVuKTtcbiAgfSxcbiAgaXRlcmF0b3I6IGZ1bmN0aW9uIGl0ZXJhdG9yKGl0KSB7XG4gICAgcmV0dXJuIGl0ICYmIGlzLmZ1bmMoaXQubmV4dCkgJiYgaXMuZnVuYyhpdC50aHJvdyk7XG4gIH0sXG4gIGl0ZXJhYmxlOiBmdW5jdGlvbiBpdGVyYWJsZShpdCkge1xuICAgIHJldHVybiBpdCAmJiBpcy5mdW5jKFN5bWJvbCkgPyBpcy5mdW5jKGl0W1N5bWJvbC5pdGVyYXRvcl0pIDogaXMuYXJyYXkoaXQpO1xuICB9LFxuICB0YXNrOiBmdW5jdGlvbiB0YXNrKHQpIHtcbiAgICByZXR1cm4gdCAmJiB0W1RBU0tdO1xuICB9LFxuICBvYnNlcnZhYmxlOiBmdW5jdGlvbiBvYnNlcnZhYmxlKG9iKSB7XG4gICAgcmV0dXJuIG9iICYmIGlzLmZ1bmMob2Iuc3Vic2NyaWJlKTtcbiAgfSxcbiAgYnVmZmVyOiBmdW5jdGlvbiBidWZmZXIoYnVmKSB7XG4gICAgcmV0dXJuIGJ1ZiAmJiBpcy5mdW5jKGJ1Zi5pc0VtcHR5KSAmJiBpcy5mdW5jKGJ1Zi50YWtlKSAmJiBpcy5mdW5jKGJ1Zi5wdXQpO1xuICB9LFxuICBwYXR0ZXJuOiBmdW5jdGlvbiBwYXR0ZXJuKHBhdCkge1xuICAgIHJldHVybiBwYXQgJiYgKGlzLnN0cmluZyhwYXQpIHx8ICh0eXBlb2YgcGF0ID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXQpKSA9PT0gJ3N5bWJvbCcgfHwgaXMuZnVuYyhwYXQpIHx8IGlzLmFycmF5KHBhdCkpO1xuICB9LFxuICBjaGFubmVsOiBmdW5jdGlvbiBjaGFubmVsKGNoKSB7XG4gICAgcmV0dXJuIGNoICYmIGlzLmZ1bmMoY2gudGFrZSkgJiYgaXMuZnVuYyhjaC5jbG9zZSk7XG4gIH0sXG4gIGhlbHBlcjogZnVuY3Rpb24gaGVscGVyKGl0KSB7XG4gICAgcmV0dXJuIGl0ICYmIGl0W0hFTFBFUl07XG4gIH0sXG4gIHN0cmluZ2FibGVGdW5jOiBmdW5jdGlvbiBzdHJpbmdhYmxlRnVuYyhmKSB7XG4gICAgcmV0dXJuIGlzLmZ1bmMoZikgJiYgaGFzT3duKGYsICd0b1N0cmluZycpO1xuICB9XG59O1xuXG5leHBvcnQgdmFyIG9iamVjdCA9IHtcbiAgYXNzaWduOiBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBzb3VyY2UpIHtcbiAgICBmb3IgKHZhciBpIGluIHNvdXJjZSkge1xuICAgICAgaWYgKGhhc093bihzb3VyY2UsIGkpKSB7XG4gICAgICAgIHRhcmdldFtpXSA9IHNvdXJjZVtpXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmUoYXJyYXksIGl0ZW0pIHtcbiAgdmFyIGluZGV4ID0gYXJyYXkuaW5kZXhPZihpdGVtKTtcbiAgaWYgKGluZGV4ID49IDApIHtcbiAgICBhcnJheS5zcGxpY2UoaW5kZXgsIDEpO1xuICB9XG59XG5cbmV4cG9ydCB2YXIgYXJyYXkgPSB7XG4gIGZyb206IGZ1bmN0aW9uIGZyb20ob2JqKSB7XG4gICAgdmFyIGFyciA9IEFycmF5KG9iai5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgaW4gb2JqKSB7XG4gICAgICBpZiAoaGFzT3duKG9iaiwgaSkpIHtcbiAgICAgICAgYXJyW2ldID0gb2JqW2ldO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyO1xuICB9XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gZGVmZXJyZWQoKSB7XG4gIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgdmFyIGRlZiA9IF9leHRlbmRzKHt9LCBwcm9wcyk7XG4gIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIGRlZi5yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICBkZWYucmVqZWN0ID0gcmVqZWN0O1xuICB9KTtcbiAgZGVmLnByb21pc2UgPSBwcm9taXNlO1xuICByZXR1cm4gZGVmO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXJyYXlPZkRlZmZlcmVkKGxlbmd0aCkge1xuICB2YXIgYXJyID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBhcnIucHVzaChkZWZlcnJlZCgpKTtcbiAgfVxuICByZXR1cm4gYXJyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVsYXkobXMpIHtcbiAgdmFyIHZhbCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdHJ1ZTtcblxuICB2YXIgdGltZW91dElkID0gdm9pZCAwO1xuICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgdGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gcmVzb2x2ZSh2YWwpO1xuICAgIH0sIG1zKTtcbiAgfSk7XG5cbiAgcHJvbWlzZVtDQU5DRUxdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgfTtcblxuICByZXR1cm4gcHJvbWlzZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU1vY2tUYXNrKCkge1xuICB2YXIgX3JlZjtcblxuICB2YXIgcnVubmluZyA9IHRydWU7XG4gIHZhciBfcmVzdWx0ID0gdm9pZCAwLFxuICAgICAgX2Vycm9yID0gdm9pZCAwO1xuXG4gIHJldHVybiBfcmVmID0ge30sIF9yZWZbVEFTS10gPSB0cnVlLCBfcmVmLmlzUnVubmluZyA9IGZ1bmN0aW9uIGlzUnVubmluZygpIHtcbiAgICByZXR1cm4gcnVubmluZztcbiAgfSwgX3JlZi5yZXN1bHQgPSBmdW5jdGlvbiByZXN1bHQoKSB7XG4gICAgcmV0dXJuIF9yZXN1bHQ7XG4gIH0sIF9yZWYuZXJyb3IgPSBmdW5jdGlvbiBlcnJvcigpIHtcbiAgICByZXR1cm4gX2Vycm9yO1xuICB9LCBfcmVmLnNldFJ1bm5pbmcgPSBmdW5jdGlvbiBzZXRSdW5uaW5nKGIpIHtcbiAgICByZXR1cm4gcnVubmluZyA9IGI7XG4gIH0sIF9yZWYuc2V0UmVzdWx0ID0gZnVuY3Rpb24gc2V0UmVzdWx0KHIpIHtcbiAgICByZXR1cm4gX3Jlc3VsdCA9IHI7XG4gIH0sIF9yZWYuc2V0RXJyb3IgPSBmdW5jdGlvbiBzZXRFcnJvcihlKSB7XG4gICAgcmV0dXJuIF9lcnJvciA9IGU7XG4gIH0sIF9yZWY7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhdXRvSW5jKCkge1xuICB2YXIgc2VlZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMDtcblxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiArK3NlZWQ7XG4gIH07XG59XG5cbmV4cG9ydCB2YXIgdWlkID0gLyojX19QVVJFX18qL2F1dG9JbmMoKTtcblxudmFyIGtUaHJvdyA9IGZ1bmN0aW9uIGtUaHJvdyhlcnIpIHtcbiAgdGhyb3cgZXJyO1xufTtcbnZhciBrUmV0dXJuID0gZnVuY3Rpb24ga1JldHVybih2YWx1ZSkge1xuICByZXR1cm4geyB2YWx1ZTogdmFsdWUsIGRvbmU6IHRydWUgfTtcbn07XG5leHBvcnQgZnVuY3Rpb24gbWFrZUl0ZXJhdG9yKG5leHQpIHtcbiAgdmFyIHRocm8gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGtUaHJvdztcbiAgdmFyIG5hbWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6ICcnO1xuICB2YXIgaXNIZWxwZXIgPSBhcmd1bWVudHNbM107XG5cbiAgdmFyIGl0ZXJhdG9yID0geyBuYW1lOiBuYW1lLCBuZXh0OiBuZXh0LCB0aHJvdzogdGhybywgcmV0dXJuOiBrUmV0dXJuIH07XG5cbiAgaWYgKGlzSGVscGVyKSB7XG4gICAgaXRlcmF0b3JbSEVMUEVSXSA9IHRydWU7XG4gIH1cbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgaXRlcmF0b3JbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBpdGVyYXRvcjtcbiAgICB9O1xuICB9XG4gIHJldHVybiBpdGVyYXRvcjtcbn1cblxuLyoqXG4gIFByaW50IGVycm9yIGluIGEgdXNlZnVsIHdheSB3aGV0aGVyIGluIGEgYnJvd3NlciBlbnZpcm9ubWVudFxuICAod2l0aCBleHBhbmRhYmxlIGVycm9yIHN0YWNrIHRyYWNlcyksIG9yIGluIGEgbm9kZS5qcyBlbnZpcm9ubWVudFxuICAodGV4dC1vbmx5IGxvZyBvdXRwdXQpXG4gKiovXG5leHBvcnQgZnVuY3Rpb24gbG9nKGxldmVsLCBtZXNzYWdlKSB7XG4gIHZhciBlcnJvciA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogJyc7XG5cbiAgLyplc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlKi9cbiAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgY29uc29sZS5sb2coJ3JlZHV4LXNhZ2EgJyArIGxldmVsICsgJzogJyArIG1lc3NhZ2UgKyAnXFxuJyArIChlcnJvciAmJiBlcnJvci5zdGFjayB8fCBlcnJvcikpO1xuICB9IGVsc2Uge1xuICAgIGNvbnNvbGVbbGV2ZWxdKG1lc3NhZ2UsIGVycm9yKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVwcmVjYXRlKGZuLCBkZXByZWNhdGlvbldhcm5pbmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIGxvZygnd2FybicsIGRlcHJlY2F0aW9uV2FybmluZyk7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxuZXhwb3J0IHZhciB1cGRhdGVJbmNlbnRpdmUgPSBmdW5jdGlvbiB1cGRhdGVJbmNlbnRpdmUoZGVwcmVjYXRlZCwgcHJlZmVycmVkKSB7XG4gIHJldHVybiBkZXByZWNhdGVkICsgJyBoYXMgYmVlbiBkZXByZWNhdGVkIGluIGZhdm9yIG9mICcgKyBwcmVmZXJyZWQgKyAnLCBwbGVhc2UgdXBkYXRlIHlvdXIgY29kZSc7XG59O1xuXG5leHBvcnQgdmFyIGludGVybmFsRXJyID0gZnVuY3Rpb24gaW50ZXJuYWxFcnIoZXJyKSB7XG4gIHJldHVybiBuZXcgRXJyb3IoJ1xcbiAgcmVkdXgtc2FnYTogRXJyb3IgY2hlY2tpbmcgaG9va3MgZGV0ZWN0ZWQgYW4gaW5jb25zaXN0ZW50IHN0YXRlLiBUaGlzIGlzIGxpa2VseSBhIGJ1Z1xcbiAgaW4gcmVkdXgtc2FnYSBjb2RlIGFuZCBub3QgeW91cnMuIFRoYW5rcyBmb3IgcmVwb3J0aW5nIHRoaXMgaW4gdGhlIHByb2plY3RcXCdzIGdpdGh1YiByZXBvLlxcbiAgRXJyb3I6ICcgKyBlcnIgKyAnXFxuJyk7XG59O1xuXG5leHBvcnQgdmFyIGNyZWF0ZVNldENvbnRleHRXYXJuaW5nID0gZnVuY3Rpb24gY3JlYXRlU2V0Q29udGV4dFdhcm5pbmcoY3R4LCBwcm9wcykge1xuICByZXR1cm4gKGN0eCA/IGN0eCArICcuJyA6ICcnKSArICdzZXRDb250ZXh0KHByb3BzKTogYXJndW1lbnQgJyArIHByb3BzICsgJyBpcyBub3QgYSBwbGFpbiBvYmplY3QnO1xufTtcblxuZXhwb3J0IHZhciB3cmFwU2FnYURpc3BhdGNoID0gZnVuY3Rpb24gd3JhcFNhZ2FEaXNwYXRjaChkaXNwYXRjaCkge1xuICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgIHJldHVybiBkaXNwYXRjaChPYmplY3QuZGVmaW5lUHJvcGVydHkoYWN0aW9uLCBTQUdBX0FDVElPTiwgeyB2YWx1ZTogdHJ1ZSB9KSk7XG4gIH07XG59O1xuXG5leHBvcnQgdmFyIGNsb25lYWJsZUdlbmVyYXRvciA9IGZ1bmN0aW9uIGNsb25lYWJsZUdlbmVyYXRvcihnZW5lcmF0b3JGdW5jKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgdmFyIGhpc3RvcnkgPSBbXTtcbiAgICB2YXIgZ2VuID0gZ2VuZXJhdG9yRnVuYy5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgIHJldHVybiB7XG4gICAgICBuZXh0OiBmdW5jdGlvbiBuZXh0KGFyZykge1xuICAgICAgICBoaXN0b3J5LnB1c2goYXJnKTtcbiAgICAgICAgcmV0dXJuIGdlbi5uZXh0KGFyZyk7XG4gICAgICB9LFxuICAgICAgY2xvbmU6IGZ1bmN0aW9uIGNsb25lKCkge1xuICAgICAgICB2YXIgY2xvbmVkR2VuID0gY2xvbmVhYmxlR2VuZXJhdG9yKGdlbmVyYXRvckZ1bmMpLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gICAgICAgIGhpc3RvcnkuZm9yRWFjaChmdW5jdGlvbiAoYXJnKSB7XG4gICAgICAgICAgcmV0dXJuIGNsb25lZEdlbi5uZXh0KGFyZyk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY2xvbmVkR2VuO1xuICAgICAgfSxcbiAgICAgIHJldHVybjogZnVuY3Rpb24gX3JldHVybih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gZ2VuLnJldHVybih2YWx1ZSk7XG4gICAgICB9LFxuICAgICAgdGhyb3c6IGZ1bmN0aW9uIF90aHJvdyhleGNlcHRpb24pIHtcbiAgICAgICAgcmV0dXJuIGdlbi50aHJvdyhleGNlcHRpb24pO1xuICAgICAgfVxuICAgIH07XG4gIH07XG59OyIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG52YXIgJGV4cG9ydCA9IGZ1bmN0aW9uICh0eXBlLCBuYW1lLCBzb3VyY2UpIHtcbiAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkY7XG4gIHZhciBJU19HTE9CQUwgPSB0eXBlICYgJGV4cG9ydC5HO1xuICB2YXIgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuUztcbiAgdmFyIElTX1BST1RPID0gdHlwZSAmICRleHBvcnQuUDtcbiAgdmFyIElTX0JJTkQgPSB0eXBlICYgJGV4cG9ydC5CO1xuICB2YXIgdGFyZ2V0ID0gSVNfR0xPQkFMID8gZ2xvYmFsIDogSVNfU1RBVElDID8gZ2xvYmFsW25hbWVdIHx8IChnbG9iYWxbbmFtZV0gPSB7fSkgOiAoZ2xvYmFsW25hbWVdIHx8IHt9KVtQUk9UT1RZUEVdO1xuICB2YXIgZXhwb3J0cyA9IElTX0dMT0JBTCA/IGNvcmUgOiBjb3JlW25hbWVdIHx8IChjb3JlW25hbWVdID0ge30pO1xuICB2YXIgZXhwUHJvdG8gPSBleHBvcnRzW1BST1RPVFlQRV0gfHwgKGV4cG9ydHNbUFJPVE9UWVBFXSA9IHt9KTtcbiAgdmFyIGtleSwgb3duLCBvdXQsIGV4cDtcbiAgaWYgKElTX0dMT0JBTCkgc291cmNlID0gbmFtZTtcbiAgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgLy8gY29udGFpbnMgaW4gbmF0aXZlXG4gICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYgdGFyZ2V0W2tleV0gIT09IHVuZGVmaW5lZDtcbiAgICAvLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZFxuICAgIG91dCA9IChvd24gPyB0YXJnZXQgOiBzb3VyY2UpW2tleV07XG4gICAgLy8gYmluZCB0aW1lcnMgdG8gZ2xvYmFsIGZvciBjYWxsIGZyb20gZXhwb3J0IGNvbnRleHRcbiAgICBleHAgPSBJU19CSU5EICYmIG93biA/IGN0eChvdXQsIGdsb2JhbCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcbiAgICAvLyBleHRlbmQgZ2xvYmFsXG4gICAgaWYgKHRhcmdldCkgcmVkZWZpbmUodGFyZ2V0LCBrZXksIG91dCwgdHlwZSAmICRleHBvcnQuVSk7XG4gICAgLy8gZXhwb3J0XG4gICAgaWYgKGV4cG9ydHNba2V5XSAhPSBvdXQpIGhpZGUoZXhwb3J0cywga2V5LCBleHApO1xuICAgIGlmIChJU19QUk9UTyAmJiBleHBQcm90b1trZXldICE9IG91dCkgZXhwUHJvdG9ba2V5XSA9IG91dDtcbiAgfVxufTtcbmdsb2JhbC5jb3JlID0gY29yZTtcbi8vIHR5cGUgYml0bWFwXG4kZXhwb3J0LkYgPSAxOyAgIC8vIGZvcmNlZFxuJGV4cG9ydC5HID0gMjsgICAvLyBnbG9iYWxcbiRleHBvcnQuUyA9IDQ7ICAgLy8gc3RhdGljXG4kZXhwb3J0LlAgPSA4OyAgIC8vIHByb3RvXG4kZXhwb3J0LkIgPSAxNjsgIC8vIGJpbmRcbiRleHBvcnQuVyA9IDMyOyAgLy8gd3JhcFxuJGV4cG9ydC5VID0gNjQ7ICAvLyBzYWZlXG4kZXhwb3J0LlIgPSAxMjg7IC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWBcbm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDtcbiIsImltcG9ydCB7IHN5bSwgaXMsIGlkZW50LCBjaGVjaywgZGVwcmVjYXRlLCB1cGRhdGVJbmNlbnRpdmUsIGNyZWF0ZVNldENvbnRleHRXYXJuaW5nLCBTRUxGX0NBTkNFTExBVElPTiB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHsgdGFrZUV2ZXJ5SGVscGVyLCB0YWtlTGF0ZXN0SGVscGVyLCB0aHJvdHRsZUhlbHBlciB9IGZyb20gJy4vc2FnYUhlbHBlcnMnO1xuXG52YXIgSU8gPSAvKiNfX1BVUkVfXyovc3ltKCdJTycpO1xudmFyIFRBS0UgPSAnVEFLRSc7XG52YXIgUFVUID0gJ1BVVCc7XG52YXIgQUxMID0gJ0FMTCc7XG52YXIgUkFDRSA9ICdSQUNFJztcbnZhciBDQUxMID0gJ0NBTEwnO1xudmFyIENQUyA9ICdDUFMnO1xudmFyIEZPUksgPSAnRk9SSyc7XG52YXIgSk9JTiA9ICdKT0lOJztcbnZhciBDQU5DRUwgPSAnQ0FOQ0VMJztcbnZhciBTRUxFQ1QgPSAnU0VMRUNUJztcbnZhciBBQ1RJT05fQ0hBTk5FTCA9ICdBQ1RJT05fQ0hBTk5FTCc7XG52YXIgQ0FOQ0VMTEVEID0gJ0NBTkNFTExFRCc7XG52YXIgRkxVU0ggPSAnRkxVU0gnO1xudmFyIEdFVF9DT05URVhUID0gJ0dFVF9DT05URVhUJztcbnZhciBTRVRfQ09OVEVYVCA9ICdTRVRfQ09OVEVYVCc7XG5cbnZhciBURVNUX0hJTlQgPSAnXFxuKEhJTlQ6IGlmIHlvdSBhcmUgZ2V0dGluZyB0aGlzIGVycm9ycyBpbiB0ZXN0cywgY29uc2lkZXIgdXNpbmcgY3JlYXRlTW9ja1Rhc2sgZnJvbSByZWR1eC1zYWdhL3V0aWxzKSc7XG5cbnZhciBlZmZlY3QgPSBmdW5jdGlvbiBlZmZlY3QodHlwZSwgcGF5bG9hZCkge1xuICB2YXIgX3JlZjtcblxuICByZXR1cm4gX3JlZiA9IHt9LCBfcmVmW0lPXSA9IHRydWUsIF9yZWZbdHlwZV0gPSBwYXlsb2FkLCBfcmVmO1xufTtcblxuZXhwb3J0IHZhciBkZXRhY2ggPSBmdW5jdGlvbiBkZXRhY2goZWZmKSB7XG4gIGNoZWNrKGFzRWZmZWN0LmZvcmsoZWZmKSwgaXMub2JqZWN0LCAnZGV0YWNoKGVmZik6IGFyZ3VtZW50IG11c3QgYmUgYSBmb3JrIGVmZmVjdCcpO1xuICBlZmZbRk9SS10uZGV0YWNoZWQgPSB0cnVlO1xuICByZXR1cm4gZWZmO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHRha2UoKSB7XG4gIHZhciBwYXR0ZXJuT3JDaGFubmVsID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAnKic7XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICBjaGVjayhhcmd1bWVudHNbMF0sIGlzLm5vdFVuZGVmLCAndGFrZShwYXR0ZXJuT3JDaGFubmVsKTogcGF0dGVybk9yQ2hhbm5lbCBpcyB1bmRlZmluZWQnKTtcbiAgfVxuICBpZiAoaXMucGF0dGVybihwYXR0ZXJuT3JDaGFubmVsKSkge1xuICAgIHJldHVybiBlZmZlY3QoVEFLRSwgeyBwYXR0ZXJuOiBwYXR0ZXJuT3JDaGFubmVsIH0pO1xuICB9XG4gIGlmIChpcy5jaGFubmVsKHBhdHRlcm5PckNoYW5uZWwpKSB7XG4gICAgcmV0dXJuIGVmZmVjdChUQUtFLCB7IGNoYW5uZWw6IHBhdHRlcm5PckNoYW5uZWwgfSk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKCd0YWtlKHBhdHRlcm5PckNoYW5uZWwpOiBhcmd1bWVudCAnICsgU3RyaW5nKHBhdHRlcm5PckNoYW5uZWwpICsgJyBpcyBub3QgdmFsaWQgY2hhbm5lbCBvciBhIHZhbGlkIHBhdHRlcm4nKTtcbn1cblxudGFrZS5tYXliZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGVmZiA9IHRha2UuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICBlZmZbVEFLRV0ubWF5YmUgPSB0cnVlO1xuICByZXR1cm4gZWZmO1xufTtcblxuZXhwb3J0IHZhciB0YWtlbSA9IC8qI19fUFVSRV9fKi9kZXByZWNhdGUodGFrZS5tYXliZSwgLyojX19QVVJFX18qL3VwZGF0ZUluY2VudGl2ZSgndGFrZW0nLCAndGFrZS5tYXliZScpKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHB1dChjaGFubmVsLCBhY3Rpb24pIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgY2hlY2soY2hhbm5lbCwgaXMubm90VW5kZWYsICdwdXQoY2hhbm5lbCwgYWN0aW9uKTogYXJndW1lbnQgY2hhbm5lbCBpcyB1bmRlZmluZWQnKTtcbiAgICBjaGVjayhjaGFubmVsLCBpcy5jaGFubmVsLCAncHV0KGNoYW5uZWwsIGFjdGlvbik6IGFyZ3VtZW50ICcgKyBjaGFubmVsICsgJyBpcyBub3QgYSB2YWxpZCBjaGFubmVsJyk7XG4gICAgY2hlY2soYWN0aW9uLCBpcy5ub3RVbmRlZiwgJ3B1dChjaGFubmVsLCBhY3Rpb24pOiBhcmd1bWVudCBhY3Rpb24gaXMgdW5kZWZpbmVkJyk7XG4gIH0gZWxzZSB7XG4gICAgY2hlY2soY2hhbm5lbCwgaXMubm90VW5kZWYsICdwdXQoYWN0aW9uKTogYXJndW1lbnQgYWN0aW9uIGlzIHVuZGVmaW5lZCcpO1xuICAgIGFjdGlvbiA9IGNoYW5uZWw7XG4gICAgY2hhbm5lbCA9IG51bGw7XG4gIH1cbiAgcmV0dXJuIGVmZmVjdChQVVQsIHsgY2hhbm5lbDogY2hhbm5lbCwgYWN0aW9uOiBhY3Rpb24gfSk7XG59XG5cbnB1dC5yZXNvbHZlID0gZnVuY3Rpb24gKCkge1xuICB2YXIgZWZmID0gcHV0LmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgZWZmW1BVVF0ucmVzb2x2ZSA9IHRydWU7XG4gIHJldHVybiBlZmY7XG59O1xuXG5wdXQuc3luYyA9IC8qI19fUFVSRV9fKi9kZXByZWNhdGUocHV0LnJlc29sdmUsIC8qI19fUFVSRV9fKi91cGRhdGVJbmNlbnRpdmUoJ3B1dC5zeW5jJywgJ3B1dC5yZXNvbHZlJykpO1xuXG5leHBvcnQgZnVuY3Rpb24gYWxsKGVmZmVjdHMpIHtcbiAgcmV0dXJuIGVmZmVjdChBTEwsIGVmZmVjdHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmFjZShlZmZlY3RzKSB7XG4gIHJldHVybiBlZmZlY3QoUkFDRSwgZWZmZWN0cyk7XG59XG5cbmZ1bmN0aW9uIGdldEZuQ2FsbERlc2MobWV0aCwgZm4sIGFyZ3MpIHtcbiAgY2hlY2soZm4sIGlzLm5vdFVuZGVmLCBtZXRoICsgJzogYXJndW1lbnQgZm4gaXMgdW5kZWZpbmVkJyk7XG5cbiAgdmFyIGNvbnRleHQgPSBudWxsO1xuICBpZiAoaXMuYXJyYXkoZm4pKSB7XG4gICAgdmFyIF9mbiA9IGZuO1xuICAgIGNvbnRleHQgPSBfZm5bMF07XG4gICAgZm4gPSBfZm5bMV07XG4gIH0gZWxzZSBpZiAoZm4uZm4pIHtcbiAgICB2YXIgX2ZuMiA9IGZuO1xuICAgIGNvbnRleHQgPSBfZm4yLmNvbnRleHQ7XG4gICAgZm4gPSBfZm4yLmZuO1xuICB9XG4gIGlmIChjb250ZXh0ICYmIGlzLnN0cmluZyhmbikgJiYgaXMuZnVuYyhjb250ZXh0W2ZuXSkpIHtcbiAgICBmbiA9IGNvbnRleHRbZm5dO1xuICB9XG4gIGNoZWNrKGZuLCBpcy5mdW5jLCBtZXRoICsgJzogYXJndW1lbnQgJyArIGZuICsgJyBpcyBub3QgYSBmdW5jdGlvbicpO1xuXG4gIHJldHVybiB7IGNvbnRleHQ6IGNvbnRleHQsIGZuOiBmbiwgYXJnczogYXJncyB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2FsbChmbikge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBlZmZlY3QoQ0FMTCwgZ2V0Rm5DYWxsRGVzYygnY2FsbCcsIGZuLCBhcmdzKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBseShjb250ZXh0LCBmbikge1xuICB2YXIgYXJncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogW107XG5cbiAgcmV0dXJuIGVmZmVjdChDQUxMLCBnZXRGbkNhbGxEZXNjKCdhcHBseScsIHsgY29udGV4dDogY29udGV4dCwgZm46IGZuIH0sIGFyZ3MpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNwcyhmbikge1xuICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuMiA+IDEgPyBfbGVuMiAtIDEgOiAwKSwgX2tleTIgPSAxOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgYXJnc1tfa2V5MiAtIDFdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgfVxuXG4gIHJldHVybiBlZmZlY3QoQ1BTLCBnZXRGbkNhbGxEZXNjKCdjcHMnLCBmbiwgYXJncykpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZm9yayhmbikge1xuICBmb3IgKHZhciBfbGVuMyA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuMyA+IDEgPyBfbGVuMyAtIDEgOiAwKSwgX2tleTMgPSAxOyBfa2V5MyA8IF9sZW4zOyBfa2V5MysrKSB7XG4gICAgYXJnc1tfa2V5MyAtIDFdID0gYXJndW1lbnRzW19rZXkzXTtcbiAgfVxuXG4gIHJldHVybiBlZmZlY3QoRk9SSywgZ2V0Rm5DYWxsRGVzYygnZm9yaycsIGZuLCBhcmdzKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzcGF3bihmbikge1xuICBmb3IgKHZhciBfbGVuNCA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuNCA+IDEgPyBfbGVuNCAtIDEgOiAwKSwgX2tleTQgPSAxOyBfa2V5NCA8IF9sZW40OyBfa2V5NCsrKSB7XG4gICAgYXJnc1tfa2V5NCAtIDFdID0gYXJndW1lbnRzW19rZXk0XTtcbiAgfVxuXG4gIHJldHVybiBkZXRhY2goZm9yay5hcHBseSh1bmRlZmluZWQsIFtmbl0uY29uY2F0KGFyZ3MpKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBqb2luKCkge1xuICBmb3IgKHZhciBfbGVuNSA9IGFyZ3VtZW50cy5sZW5ndGgsIHRhc2tzID0gQXJyYXkoX2xlbjUpLCBfa2V5NSA9IDA7IF9rZXk1IDwgX2xlbjU7IF9rZXk1KyspIHtcbiAgICB0YXNrc1tfa2V5NV0gPSBhcmd1bWVudHNbX2tleTVdO1xuICB9XG5cbiAgaWYgKHRhc2tzLmxlbmd0aCA+IDEpIHtcbiAgICByZXR1cm4gYWxsKHRhc2tzLm1hcChmdW5jdGlvbiAodCkge1xuICAgICAgcmV0dXJuIGpvaW4odCk7XG4gICAgfSkpO1xuICB9XG4gIHZhciB0YXNrID0gdGFza3NbMF07XG4gIGNoZWNrKHRhc2ssIGlzLm5vdFVuZGVmLCAnam9pbih0YXNrKTogYXJndW1lbnQgdGFzayBpcyB1bmRlZmluZWQnKTtcbiAgY2hlY2sodGFzaywgaXMudGFzaywgJ2pvaW4odGFzayk6IGFyZ3VtZW50ICcgKyB0YXNrICsgJyBpcyBub3QgYSB2YWxpZCBUYXNrIG9iamVjdCAnICsgVEVTVF9ISU5UKTtcbiAgcmV0dXJuIGVmZmVjdChKT0lOLCB0YXNrKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgZm9yICh2YXIgX2xlbjYgPSBhcmd1bWVudHMubGVuZ3RoLCB0YXNrcyA9IEFycmF5KF9sZW42KSwgX2tleTYgPSAwOyBfa2V5NiA8IF9sZW42OyBfa2V5NisrKSB7XG4gICAgdGFza3NbX2tleTZdID0gYXJndW1lbnRzW19rZXk2XTtcbiAgfVxuXG4gIGlmICh0YXNrcy5sZW5ndGggPiAxKSB7XG4gICAgcmV0dXJuIGFsbCh0YXNrcy5tYXAoZnVuY3Rpb24gKHQpIHtcbiAgICAgIHJldHVybiBjYW5jZWwodCk7XG4gICAgfSkpO1xuICB9XG4gIHZhciB0YXNrID0gdGFza3NbMF07XG4gIGlmICh0YXNrcy5sZW5ndGggPT09IDEpIHtcbiAgICBjaGVjayh0YXNrLCBpcy5ub3RVbmRlZiwgJ2NhbmNlbCh0YXNrKTogYXJndW1lbnQgdGFzayBpcyB1bmRlZmluZWQnKTtcbiAgICBjaGVjayh0YXNrLCBpcy50YXNrLCAnY2FuY2VsKHRhc2spOiBhcmd1bWVudCAnICsgdGFzayArICcgaXMgbm90IGEgdmFsaWQgVGFzayBvYmplY3QgJyArIFRFU1RfSElOVCk7XG4gIH1cbiAgcmV0dXJuIGVmZmVjdChDQU5DRUwsIHRhc2sgfHwgU0VMRl9DQU5DRUxMQVRJT04pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2VsZWN0KHNlbGVjdG9yKSB7XG4gIGZvciAodmFyIF9sZW43ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW43ID4gMSA/IF9sZW43IC0gMSA6IDApLCBfa2V5NyA9IDE7IF9rZXk3IDwgX2xlbjc7IF9rZXk3KyspIHtcbiAgICBhcmdzW19rZXk3IC0gMV0gPSBhcmd1bWVudHNbX2tleTddO1xuICB9XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICBzZWxlY3RvciA9IGlkZW50O1xuICB9IGVsc2Uge1xuICAgIGNoZWNrKHNlbGVjdG9yLCBpcy5ub3RVbmRlZiwgJ3NlbGVjdChzZWxlY3RvcixbLi4uXSk6IGFyZ3VtZW50IHNlbGVjdG9yIGlzIHVuZGVmaW5lZCcpO1xuICAgIGNoZWNrKHNlbGVjdG9yLCBpcy5mdW5jLCAnc2VsZWN0KHNlbGVjdG9yLFsuLi5dKTogYXJndW1lbnQgJyArIHNlbGVjdG9yICsgJyBpcyBub3QgYSBmdW5jdGlvbicpO1xuICB9XG4gIHJldHVybiBlZmZlY3QoU0VMRUNULCB7IHNlbGVjdG9yOiBzZWxlY3RvciwgYXJnczogYXJncyB9KTtcbn1cblxuLyoqXG4gIGNoYW5uZWwocGF0dGVybiwgW2J1ZmZlcl0pICAgID0+IGNyZWF0ZXMgYW4gZXZlbnQgY2hhbm5lbCBmb3Igc3RvcmUgYWN0aW9uc1xuKiovXG5leHBvcnQgZnVuY3Rpb24gYWN0aW9uQ2hhbm5lbChwYXR0ZXJuLCBidWZmZXIpIHtcbiAgY2hlY2socGF0dGVybiwgaXMubm90VW5kZWYsICdhY3Rpb25DaGFubmVsKHBhdHRlcm4sLi4uKTogYXJndW1lbnQgcGF0dGVybiBpcyB1bmRlZmluZWQnKTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgY2hlY2soYnVmZmVyLCBpcy5ub3RVbmRlZiwgJ2FjdGlvbkNoYW5uZWwocGF0dGVybiwgYnVmZmVyKTogYXJndW1lbnQgYnVmZmVyIGlzIHVuZGVmaW5lZCcpO1xuICAgIGNoZWNrKGJ1ZmZlciwgaXMuYnVmZmVyLCAnYWN0aW9uQ2hhbm5lbChwYXR0ZXJuLCBidWZmZXIpOiBhcmd1bWVudCAnICsgYnVmZmVyICsgJyBpcyBub3QgYSB2YWxpZCBidWZmZXInKTtcbiAgfVxuICByZXR1cm4gZWZmZWN0KEFDVElPTl9DSEFOTkVMLCB7IHBhdHRlcm46IHBhdHRlcm4sIGJ1ZmZlcjogYnVmZmVyIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2FuY2VsbGVkKCkge1xuICByZXR1cm4gZWZmZWN0KENBTkNFTExFRCwge30pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmx1c2goY2hhbm5lbCkge1xuICBjaGVjayhjaGFubmVsLCBpcy5jaGFubmVsLCAnZmx1c2goY2hhbm5lbCk6IGFyZ3VtZW50ICcgKyBjaGFubmVsICsgJyBpcyBub3QgdmFsaWQgY2hhbm5lbCcpO1xuICByZXR1cm4gZWZmZWN0KEZMVVNILCBjaGFubmVsKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENvbnRleHQocHJvcCkge1xuICBjaGVjayhwcm9wLCBpcy5zdHJpbmcsICdnZXRDb250ZXh0KHByb3ApOiBhcmd1bWVudCAnICsgcHJvcCArICcgaXMgbm90IGEgc3RyaW5nJyk7XG4gIHJldHVybiBlZmZlY3QoR0VUX0NPTlRFWFQsIHByb3ApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0Q29udGV4dChwcm9wcykge1xuICBjaGVjayhwcm9wcywgaXMub2JqZWN0LCBjcmVhdGVTZXRDb250ZXh0V2FybmluZyhudWxsLCBwcm9wcykpO1xuICByZXR1cm4gZWZmZWN0KFNFVF9DT05URVhULCBwcm9wcyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0YWtlRXZlcnkocGF0dGVybk9yQ2hhbm5lbCwgd29ya2VyKSB7XG4gIGZvciAodmFyIF9sZW44ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW44ID4gMiA/IF9sZW44IC0gMiA6IDApLCBfa2V5OCA9IDI7IF9rZXk4IDwgX2xlbjg7IF9rZXk4KyspIHtcbiAgICBhcmdzW19rZXk4IC0gMl0gPSBhcmd1bWVudHNbX2tleThdO1xuICB9XG5cbiAgcmV0dXJuIGZvcmsuYXBwbHkodW5kZWZpbmVkLCBbdGFrZUV2ZXJ5SGVscGVyLCBwYXR0ZXJuT3JDaGFubmVsLCB3b3JrZXJdLmNvbmNhdChhcmdzKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0YWtlTGF0ZXN0KHBhdHRlcm5PckNoYW5uZWwsIHdvcmtlcikge1xuICBmb3IgKHZhciBfbGVuOSA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuOSA+IDIgPyBfbGVuOSAtIDIgOiAwKSwgX2tleTkgPSAyOyBfa2V5OSA8IF9sZW45OyBfa2V5OSsrKSB7XG4gICAgYXJnc1tfa2V5OSAtIDJdID0gYXJndW1lbnRzW19rZXk5XTtcbiAgfVxuXG4gIHJldHVybiBmb3JrLmFwcGx5KHVuZGVmaW5lZCwgW3Rha2VMYXRlc3RIZWxwZXIsIHBhdHRlcm5PckNoYW5uZWwsIHdvcmtlcl0uY29uY2F0KGFyZ3MpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRocm90dGxlKG1zLCBwYXR0ZXJuLCB3b3JrZXIpIHtcbiAgZm9yICh2YXIgX2xlbjEwID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4xMCA+IDMgPyBfbGVuMTAgLSAzIDogMCksIF9rZXkxMCA9IDM7IF9rZXkxMCA8IF9sZW4xMDsgX2tleTEwKyspIHtcbiAgICBhcmdzW19rZXkxMCAtIDNdID0gYXJndW1lbnRzW19rZXkxMF07XG4gIH1cblxuICByZXR1cm4gZm9yay5hcHBseSh1bmRlZmluZWQsIFt0aHJvdHRsZUhlbHBlciwgbXMsIHBhdHRlcm4sIHdvcmtlcl0uY29uY2F0KGFyZ3MpKTtcbn1cblxudmFyIGNyZWF0ZUFzRWZmZWN0VHlwZSA9IGZ1bmN0aW9uIGNyZWF0ZUFzRWZmZWN0VHlwZSh0eXBlKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZWZmZWN0KSB7XG4gICAgcmV0dXJuIGVmZmVjdCAmJiBlZmZlY3RbSU9dICYmIGVmZmVjdFt0eXBlXTtcbiAgfTtcbn07XG5cbmV4cG9ydCB2YXIgYXNFZmZlY3QgPSB7XG4gIHRha2U6IC8qI19fUFVSRV9fKi9jcmVhdGVBc0VmZmVjdFR5cGUoVEFLRSksXG4gIHB1dDogLyojX19QVVJFX18qL2NyZWF0ZUFzRWZmZWN0VHlwZShQVVQpLFxuICBhbGw6IC8qI19fUFVSRV9fKi9jcmVhdGVBc0VmZmVjdFR5cGUoQUxMKSxcbiAgcmFjZTogLyojX19QVVJFX18qL2NyZWF0ZUFzRWZmZWN0VHlwZShSQUNFKSxcbiAgY2FsbDogLyojX19QVVJFX18qL2NyZWF0ZUFzRWZmZWN0VHlwZShDQUxMKSxcbiAgY3BzOiAvKiNfX1BVUkVfXyovY3JlYXRlQXNFZmZlY3RUeXBlKENQUyksXG4gIGZvcms6IC8qI19fUFVSRV9fKi9jcmVhdGVBc0VmZmVjdFR5cGUoRk9SSyksXG4gIGpvaW46IC8qI19fUFVSRV9fKi9jcmVhdGVBc0VmZmVjdFR5cGUoSk9JTiksXG4gIGNhbmNlbDogLyojX19QVVJFX18qL2NyZWF0ZUFzRWZmZWN0VHlwZShDQU5DRUwpLFxuICBzZWxlY3Q6IC8qI19fUFVSRV9fKi9jcmVhdGVBc0VmZmVjdFR5cGUoU0VMRUNUKSxcbiAgYWN0aW9uQ2hhbm5lbDogLyojX19QVVJFX18qL2NyZWF0ZUFzRWZmZWN0VHlwZShBQ1RJT05fQ0hBTk5FTCksXG4gIGNhbmNlbGxlZDogLyojX19QVVJFX18qL2NyZWF0ZUFzRWZmZWN0VHlwZShDQU5DRUxMRUQpLFxuICBmbHVzaDogLyojX19QVVJFX18qL2NyZWF0ZUFzRWZmZWN0VHlwZShGTFVTSCksXG4gIGdldENvbnRleHQ6IC8qI19fUFVSRV9fKi9jcmVhdGVBc0VmZmVjdFR5cGUoR0VUX0NPTlRFWFQpLFxuICBzZXRDb250ZXh0OiAvKiNfX1BVUkVfXyovY3JlYXRlQXNFZmZlY3RUeXBlKFNFVF9DT05URVhUKVxufTsiLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG4gID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5pZiAodHlwZW9mIF9fZyA9PSAnbnVtYmVyJykgX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwidmFyIHN0b3JlID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ3drcycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLlN5bWJvbDtcbnZhciBVU0VfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PSAnZnVuY3Rpb24nO1xuXG52YXIgJGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBzdG9yZVtuYW1lXSB8fCAoc3RvcmVbbmFtZV0gPVxuICAgIFVTRV9TWU1CT0wgJiYgU3ltYm9sW25hbWVdIHx8IChVU0VfU1lNQk9MID8gU3ltYm9sIDogdWlkKSgnU3ltYm9sLicgKyBuYW1lKSk7XG59O1xuXG4kZXhwb3J0cy5zdG9yZSA9IHN0b3JlO1xuIiwiLy8gNy4xLjE1IFRvTGVuZ3RoXG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID4gMCA/IG1pbih0b0ludGVnZXIoaXQpLCAweDFmZmZmZmZmZmZmZmZmKSA6IDA7IC8vIHBvdygyLCA1MykgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBkUCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZFAoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkIScpO1xuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwiLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5leHBvcnQgdmFyIHN1YnNjcmlwdGlvblNoYXBlID0gUHJvcFR5cGVzLnNoYXBlKHtcbiAgdHJ5U3Vic2NyaWJlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB0cnlVbnN1YnNjcmliZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgbm90aWZ5TmVzdGVkU3ViczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgaXNTdWJzY3JpYmVkOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG59KTtcblxuZXhwb3J0IHZhciBzdG9yZVNoYXBlID0gUHJvcFR5cGVzLnNoYXBlKHtcbiAgc3Vic2NyaWJlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBkaXNwYXRjaDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgZ2V0U3RhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbn0pOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBDaGlsZHJlbiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBzdG9yZVNoYXBlLCBzdWJzY3JpcHRpb25TaGFwZSB9IGZyb20gJy4uL3V0aWxzL1Byb3BUeXBlcyc7XG5pbXBvcnQgd2FybmluZyBmcm9tICcuLi91dGlscy93YXJuaW5nJztcblxudmFyIGRpZFdhcm5BYm91dFJlY2VpdmluZ1N0b3JlID0gZmFsc2U7XG5mdW5jdGlvbiB3YXJuQWJvdXRSZWNlaXZpbmdTdG9yZSgpIHtcbiAgaWYgKGRpZFdhcm5BYm91dFJlY2VpdmluZ1N0b3JlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGRpZFdhcm5BYm91dFJlY2VpdmluZ1N0b3JlID0gdHJ1ZTtcblxuICB3YXJuaW5nKCc8UHJvdmlkZXI+IGRvZXMgbm90IHN1cHBvcnQgY2hhbmdpbmcgYHN0b3JlYCBvbiB0aGUgZmx5LiAnICsgJ0l0IGlzIG1vc3QgbGlrZWx5IHRoYXQgeW91IHNlZSB0aGlzIGVycm9yIGJlY2F1c2UgeW91IHVwZGF0ZWQgdG8gJyArICdSZWR1eCAyLnggYW5kIFJlYWN0IFJlZHV4IDIueCB3aGljaCBubyBsb25nZXIgaG90IHJlbG9hZCByZWR1Y2VycyAnICsgJ2F1dG9tYXRpY2FsbHkuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC1yZWR1eC9yZWxlYXNlcy8nICsgJ3RhZy92Mi4wLjAgZm9yIHRoZSBtaWdyYXRpb24gaW5zdHJ1Y3Rpb25zLicpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUHJvdmlkZXIoKSB7XG4gIHZhciBfUHJvdmlkZXIkY2hpbGRDb250ZXg7XG5cbiAgdmFyIHN0b3JlS2V5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAnc3RvcmUnO1xuICB2YXIgc3ViS2V5ID0gYXJndW1lbnRzWzFdO1xuXG4gIHZhciBzdWJzY3JpcHRpb25LZXkgPSBzdWJLZXkgfHwgc3RvcmVLZXkgKyAnU3Vic2NyaXB0aW9uJztcblxuICB2YXIgUHJvdmlkZXIgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhQcm92aWRlciwgX0NvbXBvbmVudCk7XG5cbiAgICBQcm92aWRlci5wcm90b3R5cGUuZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIHJldHVybiBfcmVmID0ge30sIF9yZWZbc3RvcmVLZXldID0gdGhpc1tzdG9yZUtleV0sIF9yZWZbc3Vic2NyaXB0aW9uS2V5XSA9IG51bGwsIF9yZWY7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIFByb3ZpZGVyKHByb3BzLCBjb250ZXh0KSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUHJvdmlkZXIpO1xuXG4gICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpKTtcblxuICAgICAgX3RoaXNbc3RvcmVLZXldID0gcHJvcHMuc3RvcmU7XG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgUHJvdmlkZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBDaGlsZHJlbi5vbmx5KHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICAgIH07XG5cbiAgICByZXR1cm4gUHJvdmlkZXI7XG4gIH0oQ29tcG9uZW50KTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIFByb3ZpZGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gKG5leHRQcm9wcykge1xuICAgICAgaWYgKHRoaXNbc3RvcmVLZXldICE9PSBuZXh0UHJvcHMuc3RvcmUpIHtcbiAgICAgICAgd2FybkFib3V0UmVjZWl2aW5nU3RvcmUoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgUHJvdmlkZXIucHJvcFR5cGVzID0ge1xuICAgIHN0b3JlOiBzdG9yZVNoYXBlLmlzUmVxdWlyZWQsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5lbGVtZW50LmlzUmVxdWlyZWRcbiAgfTtcbiAgUHJvdmlkZXIuY2hpbGRDb250ZXh0VHlwZXMgPSAoX1Byb3ZpZGVyJGNoaWxkQ29udGV4ID0ge30sIF9Qcm92aWRlciRjaGlsZENvbnRleFtzdG9yZUtleV0gPSBzdG9yZVNoYXBlLmlzUmVxdWlyZWQsIF9Qcm92aWRlciRjaGlsZENvbnRleFtzdWJzY3JpcHRpb25LZXldID0gc3Vic2NyaXB0aW9uU2hhcGUsIF9Qcm92aWRlciRjaGlsZENvbnRleCk7XG5cbiAgcmV0dXJuIFByb3ZpZGVyO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVQcm92aWRlcigpOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbi8vIGVuY2Fwc3VsYXRlcyB0aGUgc3Vic2NyaXB0aW9uIGxvZ2ljIGZvciBjb25uZWN0aW5nIGEgY29tcG9uZW50IHRvIHRoZSByZWR1eCBzdG9yZSwgYXNcbi8vIHdlbGwgYXMgbmVzdGluZyBzdWJzY3JpcHRpb25zIG9mIGRlc2NlbmRhbnQgY29tcG9uZW50cywgc28gdGhhdCB3ZSBjYW4gZW5zdXJlIHRoZVxuLy8gYW5jZXN0b3IgY29tcG9uZW50cyByZS1yZW5kZXIgYmVmb3JlIGRlc2NlbmRhbnRzXG5cbnZhciBDTEVBUkVEID0gbnVsbDtcbnZhciBudWxsTGlzdGVuZXJzID0ge1xuICBub3RpZnk6IGZ1bmN0aW9uIG5vdGlmeSgpIHt9XG59O1xuXG5mdW5jdGlvbiBjcmVhdGVMaXN0ZW5lckNvbGxlY3Rpb24oKSB7XG4gIC8vIHRoZSBjdXJyZW50L25leHQgcGF0dGVybiBpcyBjb3BpZWQgZnJvbSByZWR1eCdzIGNyZWF0ZVN0b3JlIGNvZGUuXG4gIC8vIFRPRE86IHJlZmFjdG9yK2V4cG9zZSB0aGF0IGNvZGUgdG8gYmUgcmV1c2FibGUgaGVyZT9cbiAgdmFyIGN1cnJlbnQgPSBbXTtcbiAgdmFyIG5leHQgPSBbXTtcblxuICByZXR1cm4ge1xuICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgIG5leHQgPSBDTEVBUkVEO1xuICAgICAgY3VycmVudCA9IENMRUFSRUQ7XG4gICAgfSxcbiAgICBub3RpZnk6IGZ1bmN0aW9uIG5vdGlmeSgpIHtcbiAgICAgIHZhciBsaXN0ZW5lcnMgPSBjdXJyZW50ID0gbmV4dDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxpc3RlbmVyc1tpXSgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9LFxuICAgIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgICB2YXIgaXNTdWJzY3JpYmVkID0gdHJ1ZTtcbiAgICAgIGlmIChuZXh0ID09PSBjdXJyZW50KSBuZXh0ID0gY3VycmVudC5zbGljZSgpO1xuICAgICAgbmV4dC5wdXNoKGxpc3RlbmVyKTtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgICBpZiAoIWlzU3Vic2NyaWJlZCB8fCBjdXJyZW50ID09PSBDTEVBUkVEKSByZXR1cm47XG4gICAgICAgIGlzU3Vic2NyaWJlZCA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChuZXh0ID09PSBjdXJyZW50KSBuZXh0ID0gY3VycmVudC5zbGljZSgpO1xuICAgICAgICBuZXh0LnNwbGljZShuZXh0LmluZGV4T2YobGlzdGVuZXIpLCAxKTtcbiAgICAgIH07XG4gICAgfVxuICB9O1xufVxuXG52YXIgU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTdWJzY3JpcHRpb24oc3RvcmUsIHBhcmVudFN1Yiwgb25TdGF0ZUNoYW5nZSkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTdWJzY3JpcHRpb24pO1xuXG4gICAgdGhpcy5zdG9yZSA9IHN0b3JlO1xuICAgIHRoaXMucGFyZW50U3ViID0gcGFyZW50U3ViO1xuICAgIHRoaXMub25TdGF0ZUNoYW5nZSA9IG9uU3RhdGVDaGFuZ2U7XG4gICAgdGhpcy51bnN1YnNjcmliZSA9IG51bGw7XG4gICAgdGhpcy5saXN0ZW5lcnMgPSBudWxsTGlzdGVuZXJzO1xuICB9XG5cbiAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5hZGROZXN0ZWRTdWIgPSBmdW5jdGlvbiBhZGROZXN0ZWRTdWIobGlzdGVuZXIpIHtcbiAgICB0aGlzLnRyeVN1YnNjcmliZSgpO1xuICAgIHJldHVybiB0aGlzLmxpc3RlbmVycy5zdWJzY3JpYmUobGlzdGVuZXIpO1xuICB9O1xuXG4gIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUubm90aWZ5TmVzdGVkU3VicyA9IGZ1bmN0aW9uIG5vdGlmeU5lc3RlZFN1YnMoKSB7XG4gICAgdGhpcy5saXN0ZW5lcnMubm90aWZ5KCk7XG4gIH07XG5cbiAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5pc1N1YnNjcmliZWQgPSBmdW5jdGlvbiBpc1N1YnNjcmliZWQoKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4odGhpcy51bnN1YnNjcmliZSk7XG4gIH07XG5cbiAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS50cnlTdWJzY3JpYmUgPSBmdW5jdGlvbiB0cnlTdWJzY3JpYmUoKSB7XG4gICAgaWYgKCF0aGlzLnVuc3Vic2NyaWJlKSB7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlID0gdGhpcy5wYXJlbnRTdWIgPyB0aGlzLnBhcmVudFN1Yi5hZGROZXN0ZWRTdWIodGhpcy5vblN0YXRlQ2hhbmdlKSA6IHRoaXMuc3RvcmUuc3Vic2NyaWJlKHRoaXMub25TdGF0ZUNoYW5nZSk7XG5cbiAgICAgIHRoaXMubGlzdGVuZXJzID0gY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uKCk7XG4gICAgfVxuICB9O1xuXG4gIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUudHJ5VW5zdWJzY3JpYmUgPSBmdW5jdGlvbiB0cnlVbnN1YnNjcmliZSgpIHtcbiAgICBpZiAodGhpcy51bnN1YnNjcmliZSkge1xuICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgdGhpcy51bnN1YnNjcmliZSA9IG51bGw7XG4gICAgICB0aGlzLmxpc3RlbmVycy5jbGVhcigpO1xuICAgICAgdGhpcy5saXN0ZW5lcnMgPSBudWxsTGlzdGVuZXJzO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gU3Vic2NyaXB0aW9uO1xufSgpO1xuXG5leHBvcnQgeyBTdWJzY3JpcHRpb24gYXMgZGVmYXVsdCB9OyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5pbXBvcnQgaG9pc3RTdGF0aWNzIGZyb20gJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCB7IENvbXBvbmVudCwgY3JlYXRlRWxlbWVudCB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IFN1YnNjcmlwdGlvbiBmcm9tICcuLi91dGlscy9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgc3RvcmVTaGFwZSwgc3Vic2NyaXB0aW9uU2hhcGUgfSBmcm9tICcuLi91dGlscy9Qcm9wVHlwZXMnO1xuXG52YXIgaG90UmVsb2FkaW5nVmVyc2lvbiA9IDA7XG52YXIgZHVtbXlTdGF0ZSA9IHt9O1xuZnVuY3Rpb24gbm9vcCgpIHt9XG5mdW5jdGlvbiBtYWtlU2VsZWN0b3JTdGF0ZWZ1bChzb3VyY2VTZWxlY3Rvciwgc3RvcmUpIHtcbiAgLy8gd3JhcCB0aGUgc2VsZWN0b3IgaW4gYW4gb2JqZWN0IHRoYXQgdHJhY2tzIGl0cyByZXN1bHRzIGJldHdlZW4gcnVucy5cbiAgdmFyIHNlbGVjdG9yID0ge1xuICAgIHJ1bjogZnVuY3Rpb24gcnVuQ29tcG9uZW50U2VsZWN0b3IocHJvcHMpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBuZXh0UHJvcHMgPSBzb3VyY2VTZWxlY3RvcihzdG9yZS5nZXRTdGF0ZSgpLCBwcm9wcyk7XG4gICAgICAgIGlmIChuZXh0UHJvcHMgIT09IHNlbGVjdG9yLnByb3BzIHx8IHNlbGVjdG9yLmVycm9yKSB7XG4gICAgICAgICAgc2VsZWN0b3Iuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgICBzZWxlY3Rvci5wcm9wcyA9IG5leHRQcm9wcztcbiAgICAgICAgICBzZWxlY3Rvci5lcnJvciA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IHRydWU7XG4gICAgICAgIHNlbGVjdG9yLmVycm9yID0gZXJyb3I7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBzZWxlY3Rvcjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29ubmVjdEFkdmFuY2VkKFxuLypcbiAgc2VsZWN0b3JGYWN0b3J5IGlzIGEgZnVuYyB0aGF0IGlzIHJlc3BvbnNpYmxlIGZvciByZXR1cm5pbmcgdGhlIHNlbGVjdG9yIGZ1bmN0aW9uIHVzZWQgdG9cbiAgY29tcHV0ZSBuZXcgcHJvcHMgZnJvbSBzdGF0ZSwgcHJvcHMsIGFuZCBkaXNwYXRjaC4gRm9yIGV4YW1wbGU6XG4gICAgIGV4cG9ydCBkZWZhdWx0IGNvbm5lY3RBZHZhbmNlZCgoZGlzcGF0Y2gsIG9wdGlvbnMpID0+IChzdGF0ZSwgcHJvcHMpID0+ICh7XG4gICAgICB0aGluZzogc3RhdGUudGhpbmdzW3Byb3BzLnRoaW5nSWRdLFxuICAgICAgc2F2ZVRoaW5nOiBmaWVsZHMgPT4gZGlzcGF0Y2goYWN0aW9uQ3JlYXRvcnMuc2F2ZVRoaW5nKHByb3BzLnRoaW5nSWQsIGZpZWxkcykpLFxuICAgIH0pKShZb3VyQ29tcG9uZW50KVxuICAgQWNjZXNzIHRvIGRpc3BhdGNoIGlzIHByb3ZpZGVkIHRvIHRoZSBmYWN0b3J5IHNvIHNlbGVjdG9yRmFjdG9yaWVzIGNhbiBiaW5kIGFjdGlvbkNyZWF0b3JzXG4gIG91dHNpZGUgb2YgdGhlaXIgc2VsZWN0b3IgYXMgYW4gb3B0aW1pemF0aW9uLiBPcHRpb25zIHBhc3NlZCB0byBjb25uZWN0QWR2YW5jZWQgYXJlIHBhc3NlZCB0b1xuICB0aGUgc2VsZWN0b3JGYWN0b3J5LCBhbG9uZyB3aXRoIGRpc3BsYXlOYW1lIGFuZCBXcmFwcGVkQ29tcG9uZW50LCBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50LlxuICAgTm90ZSB0aGF0IHNlbGVjdG9yRmFjdG9yeSBpcyByZXNwb25zaWJsZSBmb3IgYWxsIGNhY2hpbmcvbWVtb2l6YXRpb24gb2YgaW5ib3VuZCBhbmQgb3V0Ym91bmRcbiAgcHJvcHMuIERvIG5vdCB1c2UgY29ubmVjdEFkdmFuY2VkIGRpcmVjdGx5IHdpdGhvdXQgbWVtb2l6aW5nIHJlc3VsdHMgYmV0d2VlbiBjYWxscyB0byB5b3VyXG4gIHNlbGVjdG9yLCBvdGhlcndpc2UgdGhlIENvbm5lY3QgY29tcG9uZW50IHdpbGwgcmUtcmVuZGVyIG9uIGV2ZXJ5IHN0YXRlIG9yIHByb3BzIGNoYW5nZS5cbiovXG5zZWxlY3RvckZhY3RvcnkpIHtcbiAgdmFyIF9jb250ZXh0VHlwZXMsIF9jaGlsZENvbnRleHRUeXBlcztcblxuICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge30sXG4gICAgICBfcmVmJGdldERpc3BsYXlOYW1lID0gX3JlZi5nZXREaXNwbGF5TmFtZSxcbiAgICAgIGdldERpc3BsYXlOYW1lID0gX3JlZiRnZXREaXNwbGF5TmFtZSA9PT0gdW5kZWZpbmVkID8gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gJ0Nvbm5lY3RBZHZhbmNlZCgnICsgbmFtZSArICcpJztcbiAgfSA6IF9yZWYkZ2V0RGlzcGxheU5hbWUsXG4gICAgICBfcmVmJG1ldGhvZE5hbWUgPSBfcmVmLm1ldGhvZE5hbWUsXG4gICAgICBtZXRob2ROYW1lID0gX3JlZiRtZXRob2ROYW1lID09PSB1bmRlZmluZWQgPyAnY29ubmVjdEFkdmFuY2VkJyA6IF9yZWYkbWV0aG9kTmFtZSxcbiAgICAgIF9yZWYkcmVuZGVyQ291bnRQcm9wID0gX3JlZi5yZW5kZXJDb3VudFByb3AsXG4gICAgICByZW5kZXJDb3VudFByb3AgPSBfcmVmJHJlbmRlckNvdW50UHJvcCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogX3JlZiRyZW5kZXJDb3VudFByb3AsXG4gICAgICBfcmVmJHNob3VsZEhhbmRsZVN0YXQgPSBfcmVmLnNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyxcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyA9IF9yZWYkc2hvdWxkSGFuZGxlU3RhdCA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IF9yZWYkc2hvdWxkSGFuZGxlU3RhdCxcbiAgICAgIF9yZWYkc3RvcmVLZXkgPSBfcmVmLnN0b3JlS2V5LFxuICAgICAgc3RvcmVLZXkgPSBfcmVmJHN0b3JlS2V5ID09PSB1bmRlZmluZWQgPyAnc3RvcmUnIDogX3JlZiRzdG9yZUtleSxcbiAgICAgIF9yZWYkd2l0aFJlZiA9IF9yZWYud2l0aFJlZixcbiAgICAgIHdpdGhSZWYgPSBfcmVmJHdpdGhSZWYgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX3JlZiR3aXRoUmVmLFxuICAgICAgY29ubmVjdE9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgWydnZXREaXNwbGF5TmFtZScsICdtZXRob2ROYW1lJywgJ3JlbmRlckNvdW50UHJvcCcsICdzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMnLCAnc3RvcmVLZXknLCAnd2l0aFJlZiddKTtcblxuICB2YXIgc3Vic2NyaXB0aW9uS2V5ID0gc3RvcmVLZXkgKyAnU3Vic2NyaXB0aW9uJztcbiAgdmFyIHZlcnNpb24gPSBob3RSZWxvYWRpbmdWZXJzaW9uKys7XG5cbiAgdmFyIGNvbnRleHRUeXBlcyA9IChfY29udGV4dFR5cGVzID0ge30sIF9jb250ZXh0VHlwZXNbc3RvcmVLZXldID0gc3RvcmVTaGFwZSwgX2NvbnRleHRUeXBlc1tzdWJzY3JpcHRpb25LZXldID0gc3Vic2NyaXB0aW9uU2hhcGUsIF9jb250ZXh0VHlwZXMpO1xuICB2YXIgY2hpbGRDb250ZXh0VHlwZXMgPSAoX2NoaWxkQ29udGV4dFR5cGVzID0ge30sIF9jaGlsZENvbnRleHRUeXBlc1tzdWJzY3JpcHRpb25LZXldID0gc3Vic2NyaXB0aW9uU2hhcGUsIF9jaGlsZENvbnRleHRUeXBlcyk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXBXaXRoQ29ubmVjdChXcmFwcGVkQ29tcG9uZW50KSB7XG4gICAgaW52YXJpYW50KHR5cGVvZiBXcmFwcGVkQ29tcG9uZW50ID09ICdmdW5jdGlvbicsICdZb3UgbXVzdCBwYXNzIGEgY29tcG9uZW50IHRvIHRoZSBmdW5jdGlvbiByZXR1cm5lZCBieSAnICsgKG1ldGhvZE5hbWUgKyAnLiBJbnN0ZWFkIHJlY2VpdmVkICcgKyBKU09OLnN0cmluZ2lmeShXcmFwcGVkQ29tcG9uZW50KSkpO1xuXG4gICAgdmFyIHdyYXBwZWRDb21wb25lbnROYW1lID0gV3JhcHBlZENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBXcmFwcGVkQ29tcG9uZW50Lm5hbWUgfHwgJ0NvbXBvbmVudCc7XG5cbiAgICB2YXIgZGlzcGxheU5hbWUgPSBnZXREaXNwbGF5TmFtZSh3cmFwcGVkQ29tcG9uZW50TmFtZSk7XG5cbiAgICB2YXIgc2VsZWN0b3JGYWN0b3J5T3B0aW9ucyA9IF9leHRlbmRzKHt9LCBjb25uZWN0T3B0aW9ucywge1xuICAgICAgZ2V0RGlzcGxheU5hbWU6IGdldERpc3BsYXlOYW1lLFxuICAgICAgbWV0aG9kTmFtZTogbWV0aG9kTmFtZSxcbiAgICAgIHJlbmRlckNvdW50UHJvcDogcmVuZGVyQ291bnRQcm9wLFxuICAgICAgc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzOiBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsXG4gICAgICBzdG9yZUtleTogc3RvcmVLZXksXG4gICAgICB3aXRoUmVmOiB3aXRoUmVmLFxuICAgICAgZGlzcGxheU5hbWU6IGRpc3BsYXlOYW1lLFxuICAgICAgd3JhcHBlZENvbXBvbmVudE5hbWU6IHdyYXBwZWRDb21wb25lbnROYW1lLFxuICAgICAgV3JhcHBlZENvbXBvbmVudDogV3JhcHBlZENvbXBvbmVudFxuICAgIH0pO1xuXG4gICAgdmFyIENvbm5lY3QgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgICAgX2luaGVyaXRzKENvbm5lY3QsIF9Db21wb25lbnQpO1xuXG4gICAgICBmdW5jdGlvbiBDb25uZWN0KHByb3BzLCBjb250ZXh0KSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb25uZWN0KTtcblxuICAgICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpKTtcblxuICAgICAgICBfdGhpcy52ZXJzaW9uID0gdmVyc2lvbjtcbiAgICAgICAgX3RoaXMuc3RhdGUgPSB7fTtcbiAgICAgICAgX3RoaXMucmVuZGVyQ291bnQgPSAwO1xuICAgICAgICBfdGhpcy5zdG9yZSA9IHByb3BzW3N0b3JlS2V5XSB8fCBjb250ZXh0W3N0b3JlS2V5XTtcbiAgICAgICAgX3RoaXMucHJvcHNNb2RlID0gQm9vbGVhbihwcm9wc1tzdG9yZUtleV0pO1xuICAgICAgICBfdGhpcy5zZXRXcmFwcGVkSW5zdGFuY2UgPSBfdGhpcy5zZXRXcmFwcGVkSW5zdGFuY2UuYmluZChfdGhpcyk7XG5cbiAgICAgICAgaW52YXJpYW50KF90aGlzLnN0b3JlLCAnQ291bGQgbm90IGZpbmQgXCInICsgc3RvcmVLZXkgKyAnXCIgaW4gZWl0aGVyIHRoZSBjb250ZXh0IG9yIHByb3BzIG9mICcgKyAoJ1wiJyArIGRpc3BsYXlOYW1lICsgJ1wiLiBFaXRoZXIgd3JhcCB0aGUgcm9vdCBjb21wb25lbnQgaW4gYSA8UHJvdmlkZXI+LCAnKSArICgnb3IgZXhwbGljaXRseSBwYXNzIFwiJyArIHN0b3JlS2V5ICsgJ1wiIGFzIGEgcHJvcCB0byBcIicgKyBkaXNwbGF5TmFtZSArICdcIi4nKSk7XG5cbiAgICAgICAgX3RoaXMuaW5pdFNlbGVjdG9yKCk7XG4gICAgICAgIF90aGlzLmluaXRTdWJzY3JpcHRpb24oKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgICAgfVxuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgICAgIHZhciBfcmVmMjtcblxuICAgICAgICAvLyBJZiB0aGlzIGNvbXBvbmVudCByZWNlaXZlZCBzdG9yZSBmcm9tIHByb3BzLCBpdHMgc3Vic2NyaXB0aW9uIHNob3VsZCBiZSB0cmFuc3BhcmVudFxuICAgICAgICAvLyB0byBhbnkgZGVzY2VuZGFudHMgcmVjZWl2aW5nIHN0b3JlK3N1YnNjcmlwdGlvbiBmcm9tIGNvbnRleHQ7IGl0IHBhc3NlcyBhbG9uZ1xuICAgICAgICAvLyBzdWJzY3JpcHRpb24gcGFzc2VkIHRvIGl0LiBPdGhlcndpc2UsIGl0IHNoYWRvd3MgdGhlIHBhcmVudCBzdWJzY3JpcHRpb24sIHdoaWNoIGFsbG93c1xuICAgICAgICAvLyBDb25uZWN0IHRvIGNvbnRyb2wgb3JkZXJpbmcgb2Ygbm90aWZpY2F0aW9ucyB0byBmbG93IHRvcC1kb3duLlxuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5wcm9wc01vZGUgPyBudWxsIDogdGhpcy5zdWJzY3JpcHRpb247XG4gICAgICAgIHJldHVybiBfcmVmMiA9IHt9LCBfcmVmMltzdWJzY3JpcHRpb25LZXldID0gc3Vic2NyaXB0aW9uIHx8IHRoaXMuY29udGV4dFtzdWJzY3JpcHRpb25LZXldLCBfcmVmMjtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgIGlmICghc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSByZXR1cm47XG5cbiAgICAgICAgLy8gY29tcG9uZW50V2lsbE1vdW50IGZpcmVzIGR1cmluZyBzZXJ2ZXIgc2lkZSByZW5kZXJpbmcsIGJ1dCBjb21wb25lbnREaWRNb3VudCBhbmRcbiAgICAgICAgLy8gY29tcG9uZW50V2lsbFVubW91bnQgZG8gbm90LiBCZWNhdXNlIG9mIHRoaXMsIHRyeVN1YnNjcmliZSBoYXBwZW5zIGR1cmluZyAuLi5kaWRNb3VudC5cbiAgICAgICAgLy8gT3RoZXJ3aXNlLCB1bnN1YnNjcmlwdGlvbiB3b3VsZCBuZXZlciB0YWtlIHBsYWNlIGR1cmluZyBTU1IsIGNhdXNpbmcgYSBtZW1vcnkgbGVhay5cbiAgICAgICAgLy8gVG8gaGFuZGxlIHRoZSBjYXNlIHdoZXJlIGEgY2hpbGQgY29tcG9uZW50IG1heSBoYXZlIHRyaWdnZXJlZCBhIHN0YXRlIGNoYW5nZSBieVxuICAgICAgICAvLyBkaXNwYXRjaGluZyBhbiBhY3Rpb24gaW4gaXRzIGNvbXBvbmVudFdpbGxNb3VudCwgd2UgaGF2ZSB0byByZS1ydW4gdGhlIHNlbGVjdCBhbmQgbWF5YmVcbiAgICAgICAgLy8gcmUtcmVuZGVyLlxuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbi50cnlTdWJzY3JpYmUoKTtcbiAgICAgICAgdGhpcy5zZWxlY3Rvci5ydW4odGhpcy5wcm9wcyk7XG4gICAgICAgIGlmICh0aGlzLnNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZSkgdGhpcy5mb3JjZVVwZGF0ZSgpO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0b3IucnVuKG5leHRQcm9wcyk7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5zaG91bGRDb21wb25lbnRVcGRhdGUgPSBmdW5jdGlvbiBzaG91bGRDb21wb25lbnRVcGRhdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZTtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAgIGlmICh0aGlzLnN1YnNjcmlwdGlvbikgdGhpcy5zdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb24gPSBudWxsO1xuICAgICAgICB0aGlzLm5vdGlmeU5lc3RlZFN1YnMgPSBub29wO1xuICAgICAgICB0aGlzLnN0b3JlID0gbnVsbDtcbiAgICAgICAgdGhpcy5zZWxlY3Rvci5ydW4gPSBub29wO1xuICAgICAgICB0aGlzLnNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IGZhbHNlO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuZ2V0V3JhcHBlZEluc3RhbmNlID0gZnVuY3Rpb24gZ2V0V3JhcHBlZEluc3RhbmNlKCkge1xuICAgICAgICBpbnZhcmlhbnQod2l0aFJlZiwgJ1RvIGFjY2VzcyB0aGUgd3JhcHBlZCBpbnN0YW5jZSwgeW91IG5lZWQgdG8gc3BlY2lmeSAnICsgKCd7IHdpdGhSZWY6IHRydWUgfSBpbiB0aGUgb3B0aW9ucyBhcmd1bWVudCBvZiB0aGUgJyArIG1ldGhvZE5hbWUgKyAnKCkgY2FsbC4nKSk7XG4gICAgICAgIHJldHVybiB0aGlzLndyYXBwZWRJbnN0YW5jZTtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLnNldFdyYXBwZWRJbnN0YW5jZSA9IGZ1bmN0aW9uIHNldFdyYXBwZWRJbnN0YW5jZShyZWYpIHtcbiAgICAgICAgdGhpcy53cmFwcGVkSW5zdGFuY2UgPSByZWY7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5pbml0U2VsZWN0b3IgPSBmdW5jdGlvbiBpbml0U2VsZWN0b3IoKSB7XG4gICAgICAgIHZhciBzb3VyY2VTZWxlY3RvciA9IHNlbGVjdG9yRmFjdG9yeSh0aGlzLnN0b3JlLmRpc3BhdGNoLCBzZWxlY3RvckZhY3RvcnlPcHRpb25zKTtcbiAgICAgICAgdGhpcy5zZWxlY3RvciA9IG1ha2VTZWxlY3RvclN0YXRlZnVsKHNvdXJjZVNlbGVjdG9yLCB0aGlzLnN0b3JlKTtcbiAgICAgICAgdGhpcy5zZWxlY3Rvci5ydW4odGhpcy5wcm9wcyk7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5pbml0U3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gaW5pdFN1YnNjcmlwdGlvbigpIHtcbiAgICAgICAgaWYgKCFzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHJldHVybjtcblxuICAgICAgICAvLyBwYXJlbnRTdWIncyBzb3VyY2Ugc2hvdWxkIG1hdGNoIHdoZXJlIHN0b3JlIGNhbWUgZnJvbTogcHJvcHMgdnMuIGNvbnRleHQuIEEgY29tcG9uZW50XG4gICAgICAgIC8vIGNvbm5lY3RlZCB0byB0aGUgc3RvcmUgdmlhIHByb3BzIHNob3VsZG4ndCB1c2Ugc3Vic2NyaXB0aW9uIGZyb20gY29udGV4dCwgb3IgdmljZSB2ZXJzYS5cbiAgICAgICAgdmFyIHBhcmVudFN1YiA9ICh0aGlzLnByb3BzTW9kZSA/IHRoaXMucHJvcHMgOiB0aGlzLmNvbnRleHQpW3N1YnNjcmlwdGlvbktleV07XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbih0aGlzLnN0b3JlLCBwYXJlbnRTdWIsIHRoaXMub25TdGF0ZUNoYW5nZS5iaW5kKHRoaXMpKTtcblxuICAgICAgICAvLyBgbm90aWZ5TmVzdGVkU3Vic2AgaXMgZHVwbGljYXRlZCB0byBoYW5kbGUgdGhlIGNhc2Ugd2hlcmUgdGhlIGNvbXBvbmVudCBpcyAgdW5tb3VudGVkIGluXG4gICAgICAgIC8vIHRoZSBtaWRkbGUgb2YgdGhlIG5vdGlmaWNhdGlvbiBsb29wLCB3aGVyZSBgdGhpcy5zdWJzY3JpcHRpb25gIHdpbGwgdGhlbiBiZSBudWxsLiBBblxuICAgICAgICAvLyBleHRyYSBudWxsIGNoZWNrIGV2ZXJ5IGNoYW5nZSBjYW4gYmUgYXZvaWRlZCBieSBjb3B5aW5nIHRoZSBtZXRob2Qgb250byBgdGhpc2AgYW5kIHRoZW5cbiAgICAgICAgLy8gcmVwbGFjaW5nIGl0IHdpdGggYSBuby1vcCBvbiB1bm1vdW50LiBUaGlzIGNhbiBwcm9iYWJseSBiZSBhdm9pZGVkIGlmIFN1YnNjcmlwdGlvbidzXG4gICAgICAgIC8vIGxpc3RlbmVycyBsb2dpYyBpcyBjaGFuZ2VkIHRvIG5vdCBjYWxsIGxpc3RlbmVycyB0aGF0IGhhdmUgYmVlbiB1bnN1YnNjcmliZWQgaW4gdGhlXG4gICAgICAgIC8vIG1pZGRsZSBvZiB0aGUgbm90aWZpY2F0aW9uIGxvb3AuXG4gICAgICAgIHRoaXMubm90aWZ5TmVzdGVkU3VicyA9IHRoaXMuc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnMuYmluZCh0aGlzLnN1YnNjcmlwdGlvbik7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5vblN0YXRlQ2hhbmdlID0gZnVuY3Rpb24gb25TdGF0ZUNoYW5nZSgpIHtcbiAgICAgICAgdGhpcy5zZWxlY3Rvci5ydW4odGhpcy5wcm9wcyk7XG5cbiAgICAgICAgaWYgKCF0aGlzLnNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZSkge1xuICAgICAgICAgIHRoaXMubm90aWZ5TmVzdGVkU3VicygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuY29tcG9uZW50RGlkVXBkYXRlID0gdGhpcy5ub3RpZnlOZXN0ZWRTdWJzT25Db21wb25lbnREaWRVcGRhdGU7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZShkdW1teVN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUubm90aWZ5TmVzdGVkU3Vic09uQ29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gbm90aWZ5TmVzdGVkU3Vic09uQ29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgICAgICAvLyBgY29tcG9uZW50RGlkVXBkYXRlYCBpcyBjb25kaXRpb25hbGx5IGltcGxlbWVudGVkIHdoZW4gYG9uU3RhdGVDaGFuZ2VgIGRldGVybWluZXMgaXRcbiAgICAgICAgLy8gbmVlZHMgdG8gbm90aWZ5IG5lc3RlZCBzdWJzLiBPbmNlIGNhbGxlZCwgaXQgdW5pbXBsZW1lbnRzIGl0c2VsZiB1bnRpbCBmdXJ0aGVyIHN0YXRlXG4gICAgICAgIC8vIGNoYW5nZXMgb2NjdXIuIERvaW5nIGl0IHRoaXMgd2F5IHZzIGhhdmluZyBhIHBlcm1hbmVudCBgY29tcG9uZW50RGlkVXBkYXRlYCB0aGF0IGRvZXNcbiAgICAgICAgLy8gYSBib29sZWFuIGNoZWNrIGV2ZXJ5IHRpbWUgYXZvaWRzIGFuIGV4dHJhIG1ldGhvZCBjYWxsIG1vc3Qgb2YgdGhlIHRpbWUsIHJlc3VsdGluZ1xuICAgICAgICAvLyBpbiBzb21lIHBlcmYgYm9vc3QuXG4gICAgICAgIHRoaXMuY29tcG9uZW50RGlkVXBkYXRlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLm5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmlzU3Vic2NyaWJlZCA9IGZ1bmN0aW9uIGlzU3Vic2NyaWJlZCgpIHtcbiAgICAgICAgcmV0dXJuIEJvb2xlYW4odGhpcy5zdWJzY3JpcHRpb24pICYmIHRoaXMuc3Vic2NyaXB0aW9uLmlzU3Vic2NyaWJlZCgpO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuYWRkRXh0cmFQcm9wcyA9IGZ1bmN0aW9uIGFkZEV4dHJhUHJvcHMocHJvcHMpIHtcbiAgICAgICAgaWYgKCF3aXRoUmVmICYmICFyZW5kZXJDb3VudFByb3AgJiYgISh0aGlzLnByb3BzTW9kZSAmJiB0aGlzLnN1YnNjcmlwdGlvbikpIHJldHVybiBwcm9wcztcbiAgICAgICAgLy8gbWFrZSBhIHNoYWxsb3cgY29weSBzbyB0aGF0IGZpZWxkcyBhZGRlZCBkb24ndCBsZWFrIHRvIHRoZSBvcmlnaW5hbCBzZWxlY3Rvci5cbiAgICAgICAgLy8gdGhpcyBpcyBlc3BlY2lhbGx5IGltcG9ydGFudCBmb3IgJ3JlZicgc2luY2UgdGhhdCdzIGEgcmVmZXJlbmNlIGJhY2sgdG8gdGhlIGNvbXBvbmVudFxuICAgICAgICAvLyBpbnN0YW5jZS4gYSBzaW5nbGV0b24gbWVtb2l6ZWQgc2VsZWN0b3Igd291bGQgdGhlbiBiZSBob2xkaW5nIGEgcmVmZXJlbmNlIHRvIHRoZVxuICAgICAgICAvLyBpbnN0YW5jZSwgcHJldmVudGluZyB0aGUgaW5zdGFuY2UgZnJvbSBiZWluZyBnYXJiYWdlIGNvbGxlY3RlZCwgYW5kIHRoYXQgd291bGQgYmUgYmFkXG4gICAgICAgIHZhciB3aXRoRXh0cmFzID0gX2V4dGVuZHMoe30sIHByb3BzKTtcbiAgICAgICAgaWYgKHdpdGhSZWYpIHdpdGhFeHRyYXMucmVmID0gdGhpcy5zZXRXcmFwcGVkSW5zdGFuY2U7XG4gICAgICAgIGlmIChyZW5kZXJDb3VudFByb3ApIHdpdGhFeHRyYXNbcmVuZGVyQ291bnRQcm9wXSA9IHRoaXMucmVuZGVyQ291bnQrKztcbiAgICAgICAgaWYgKHRoaXMucHJvcHNNb2RlICYmIHRoaXMuc3Vic2NyaXB0aW9uKSB3aXRoRXh0cmFzW3N1YnNjcmlwdGlvbktleV0gPSB0aGlzLnN1YnNjcmlwdGlvbjtcbiAgICAgICAgcmV0dXJuIHdpdGhFeHRyYXM7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHZhciBzZWxlY3RvciA9IHRoaXMuc2VsZWN0b3I7XG4gICAgICAgIHNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChzZWxlY3Rvci5lcnJvcikge1xuICAgICAgICAgIHRocm93IHNlbGVjdG9yLmVycm9yO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBjcmVhdGVFbGVtZW50KFdyYXBwZWRDb21wb25lbnQsIHRoaXMuYWRkRXh0cmFQcm9wcyhzZWxlY3Rvci5wcm9wcykpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gQ29ubmVjdDtcbiAgICB9KENvbXBvbmVudCk7XG5cbiAgICBDb25uZWN0LldyYXBwZWRDb21wb25lbnQgPSBXcmFwcGVkQ29tcG9uZW50O1xuICAgIENvbm5lY3QuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcbiAgICBDb25uZWN0LmNoaWxkQ29udGV4dFR5cGVzID0gY2hpbGRDb250ZXh0VHlwZXM7XG4gICAgQ29ubmVjdC5jb250ZXh0VHlwZXMgPSBjb250ZXh0VHlwZXM7XG4gICAgQ29ubmVjdC5wcm9wVHlwZXMgPSBjb250ZXh0VHlwZXM7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVcGRhdGUoKSB7XG4gICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgIC8vIFdlIGFyZSBob3QgcmVsb2FkaW5nIVxuICAgICAgICBpZiAodGhpcy52ZXJzaW9uICE9PSB2ZXJzaW9uKSB7XG4gICAgICAgICAgdGhpcy52ZXJzaW9uID0gdmVyc2lvbjtcbiAgICAgICAgICB0aGlzLmluaXRTZWxlY3RvcigpO1xuXG4gICAgICAgICAgLy8gSWYgYW55IGNvbm5lY3RlZCBkZXNjZW5kYW50cyBkb24ndCBob3QgcmVsb2FkIChhbmQgcmVzdWJzY3JpYmUgaW4gdGhlIHByb2Nlc3MpLCB0aGVpclxuICAgICAgICAgIC8vIGxpc3RlbmVycyB3aWxsIGJlIGxvc3Qgd2hlbiB3ZSB1bnN1YnNjcmliZS4gVW5mb3J0dW5hdGVseSwgYnkgY29weWluZyBvdmVyIGFsbFxuICAgICAgICAgIC8vIGxpc3RlbmVycywgdGhpcyBkb2VzIG1lYW4gdGhhdCB0aGUgb2xkIHZlcnNpb25zIG9mIGNvbm5lY3RlZCBkZXNjZW5kYW50cyB3aWxsIHN0aWxsIGJlXG4gICAgICAgICAgLy8gbm90aWZpZWQgb2Ygc3RhdGUgY2hhbmdlczsgaG93ZXZlciwgdGhlaXIgb25TdGF0ZUNoYW5nZSBmdW5jdGlvbiBpcyBhIG5vLW9wIHNvIHRoaXNcbiAgICAgICAgICAvLyBpc24ndCBhIGh1Z2UgZGVhbC5cbiAgICAgICAgICB2YXIgb2xkTGlzdGVuZXJzID0gW107XG5cbiAgICAgICAgICBpZiAodGhpcy5zdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIG9sZExpc3RlbmVycyA9IHRoaXMuc3Vic2NyaXB0aW9uLmxpc3RlbmVycy5nZXQoKTtcbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLnRyeVVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuaW5pdFN1YnNjcmlwdGlvbigpO1xuICAgICAgICAgIGlmIChzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHtcbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLnRyeVN1YnNjcmliZSgpO1xuICAgICAgICAgICAgb2xkTGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICAgICAgICAgIHJldHVybiBfdGhpczIuc3Vic2NyaXB0aW9uLmxpc3RlbmVycy5zdWJzY3JpYmUobGlzdGVuZXIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBob2lzdFN0YXRpY3MoQ29ubmVjdCwgV3JhcHBlZENvbXBvbmVudCk7XG4gIH07XG59IiwidmFyIGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbmZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgaWYgKHggPT09IHkpIHtcbiAgICByZXR1cm4geCAhPT0gMCB8fCB5ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCKSB7XG4gIGlmIChpcyhvYmpBLCBvYmpCKSkgcmV0dXJuIHRydWU7XG5cbiAgaWYgKHR5cGVvZiBvYmpBICE9PSAnb2JqZWN0JyB8fCBvYmpBID09PSBudWxsIHx8IHR5cGVvZiBvYmpCICE9PSAnb2JqZWN0JyB8fCBvYmpCID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKG9iakIpO1xuXG4gIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXNCLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5c0EubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIWhhc093bi5jYWxsKG9iakIsIGtleXNBW2ldKSB8fCAhaXMob2JqQVtrZXlzQVtpXV0sIG9iakJba2V5c0FbaV1dKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufSIsImltcG9ydCBmcmVlR2xvYmFsIGZyb20gJy4vX2ZyZWVHbG9iYWwuanMnO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xudmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG5cbi8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xudmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbmV4cG9ydCBkZWZhdWx0IHJvb3Q7XG4iLCJpbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cbmV4cG9ydCBkZWZhdWx0IFN5bWJvbDtcbiIsImltcG9ydCBTeW1ib2wgZnJvbSAnLi9fU3ltYm9sLmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUdldFRhZ2Agd2hpY2ggaWdub3JlcyBgU3ltYm9sLnRvU3RyaW5nVGFnYCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmF3IGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGdldFJhd1RhZyh2YWx1ZSkge1xuICB2YXIgaXNPd24gPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBzeW1Ub1N0cmluZ1RhZyksXG4gICAgICB0YWcgPSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG5cbiAgdHJ5IHtcbiAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB1bmRlZmluZWQ7XG4gICAgdmFyIHVubWFza2VkID0gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge31cblxuICB2YXIgcmVzdWx0ID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIGlmICh1bm1hc2tlZCkge1xuICAgIGlmIChpc093bikge1xuICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdGFnO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGUgdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXRSYXdUYWc7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgb2JqZWN0VG9TdHJpbmc7XG4iLCJpbXBvcnQgU3ltYm9sIGZyb20gJy4vX1N5bWJvbC5qcyc7XG5pbXBvcnQgZ2V0UmF3VGFnIGZyb20gJy4vX2dldFJhd1RhZy5qcyc7XG5pbXBvcnQgb2JqZWN0VG9TdHJpbmcgZnJvbSAnLi9fb2JqZWN0VG9TdHJpbmcuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbnVsbFRhZyA9ICdbb2JqZWN0IE51bGxdJyxcbiAgICB1bmRlZmluZWRUYWcgPSAnW29iamVjdCBVbmRlZmluZWRdJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldFRhZ2Agd2l0aG91dCBmYWxsYmFja3MgZm9yIGJ1Z2d5IGVudmlyb25tZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0VGFnKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWRUYWcgOiBudWxsVGFnO1xuICB9XG4gIHJldHVybiAoc3ltVG9TdHJpbmdUYWcgJiYgc3ltVG9TdHJpbmdUYWcgaW4gT2JqZWN0KHZhbHVlKSlcbiAgICA/IGdldFJhd1RhZyh2YWx1ZSlcbiAgICA6IG9iamVjdFRvU3RyaW5nKHZhbHVlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUdldFRhZztcbiIsImltcG9ydCBvdmVyQXJnIGZyb20gJy4vX292ZXJBcmcuanMnO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBnZXRQcm90b3R5cGUgPSBvdmVyQXJnKE9iamVjdC5nZXRQcm90b3R5cGVPZiwgT2JqZWN0KTtcblxuZXhwb3J0IGRlZmF1bHQgZ2V0UHJvdG90eXBlO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzT2JqZWN0TGlrZTtcbiIsImltcG9ydCBiYXNlR2V0VGFnIGZyb20gJy4vX2Jhc2VHZXRUYWcuanMnO1xuaW1wb3J0IGdldFByb3RvdHlwZSBmcm9tICcuL19nZXRQcm90b3R5cGUuanMnO1xuaW1wb3J0IGlzT2JqZWN0TGlrZSBmcm9tICcuL2lzT2JqZWN0TGlrZS5qcyc7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZSxcbiAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKiBVc2VkIHRvIGluZmVyIHRoZSBgT2JqZWN0YCBjb25zdHJ1Y3Rvci4gKi9cbnZhciBvYmplY3RDdG9yU3RyaW5nID0gZnVuY1RvU3RyaW5nLmNhbGwoT2JqZWN0KTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgdGhhdCBpcywgYW4gb2JqZWN0IGNyZWF0ZWQgYnkgdGhlXG4gKiBgT2JqZWN0YCBjb25zdHJ1Y3RvciBvciBvbmUgd2l0aCBhIGBbW1Byb3RvdHlwZV1dYCBvZiBgbnVsbGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjguMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogfVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChuZXcgRm9vKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc1BsYWluT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdCh7ICd4JzogMCwgJ3knOiAwIH0pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkgfHwgYmFzZUdldFRhZyh2YWx1ZSkgIT0gb2JqZWN0VGFnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBwcm90byA9IGdldFByb3RvdHlwZSh2YWx1ZSk7XG4gIGlmIChwcm90byA9PT0gbnVsbCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHZhciBDdG9yID0gaGFzT3duUHJvcGVydHkuY2FsbChwcm90bywgJ2NvbnN0cnVjdG9yJykgJiYgcHJvdG8uY29uc3RydWN0b3I7XG4gIHJldHVybiB0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IgaW5zdGFuY2VvZiBDdG9yICYmXG4gICAgZnVuY1RvU3RyaW5nLmNhbGwoQ3RvcikgPT0gb2JqZWN0Q3RvclN0cmluZztcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNQbGFpbk9iamVjdDtcbiIsImltcG9ydCB2ZXJpZnlQbGFpbk9iamVjdCBmcm9tICcuLi91dGlscy92ZXJpZnlQbGFpbk9iamVjdCc7XG5cbmV4cG9ydCBmdW5jdGlvbiB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGdldENvbnN0YW50KSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0Q29uc3RhbnRTZWxlY3RvcihkaXNwYXRjaCwgb3B0aW9ucykge1xuICAgIHZhciBjb25zdGFudCA9IGdldENvbnN0YW50KGRpc3BhdGNoLCBvcHRpb25zKTtcblxuICAgIGZ1bmN0aW9uIGNvbnN0YW50U2VsZWN0b3IoKSB7XG4gICAgICByZXR1cm4gY29uc3RhbnQ7XG4gICAgfVxuICAgIGNvbnN0YW50U2VsZWN0b3IuZGVwZW5kc09uT3duUHJvcHMgPSBmYWxzZTtcbiAgICByZXR1cm4gY29uc3RhbnRTZWxlY3RvcjtcbiAgfTtcbn1cblxuLy8gZGVwZW5kc09uT3duUHJvcHMgaXMgdXNlZCBieSBjcmVhdGVNYXBUb1Byb3BzUHJveHkgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgdG8gcGFzcyBwcm9wcyBhcyBhcmdzXG4vLyB0byB0aGUgbWFwVG9Qcm9wcyBmdW5jdGlvbiBiZWluZyB3cmFwcGVkLiBJdCBpcyBhbHNvIHVzZWQgYnkgbWFrZVB1cmVQcm9wc1NlbGVjdG9yIHRvIGRldGVybWluZVxuLy8gd2hldGhlciBtYXBUb1Byb3BzIG5lZWRzIHRvIGJlIGludm9rZWQgd2hlbiBwcm9wcyBoYXZlIGNoYW5nZWQuXG4vLyBcbi8vIEEgbGVuZ3RoIG9mIG9uZSBzaWduYWxzIHRoYXQgbWFwVG9Qcm9wcyBkb2VzIG5vdCBkZXBlbmQgb24gcHJvcHMgZnJvbSB0aGUgcGFyZW50IGNvbXBvbmVudC5cbi8vIEEgbGVuZ3RoIG9mIHplcm8gaXMgYXNzdW1lZCB0byBtZWFuIG1hcFRvUHJvcHMgaXMgZ2V0dGluZyBhcmdzIHZpYSBhcmd1bWVudHMgb3IgLi4uYXJncyBhbmRcbi8vIHRoZXJlZm9yZSBub3QgcmVwb3J0aW5nIGl0cyBsZW5ndGggYWNjdXJhdGVseS4uXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVwZW5kc09uT3duUHJvcHMobWFwVG9Qcm9wcykge1xuICByZXR1cm4gbWFwVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcyAhPT0gbnVsbCAmJiBtYXBUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzICE9PSB1bmRlZmluZWQgPyBCb29sZWFuKG1hcFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIDogbWFwVG9Qcm9wcy5sZW5ndGggIT09IDE7XG59XG5cbi8vIFVzZWQgYnkgd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24gYW5kIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uLFxuLy8gdGhpcyBmdW5jdGlvbiB3cmFwcyBtYXBUb1Byb3BzIGluIGEgcHJveHkgZnVuY3Rpb24gd2hpY2ggZG9lcyBzZXZlcmFsIHRoaW5nczpcbi8vIFxuLy8gICogRGV0ZWN0cyB3aGV0aGVyIHRoZSBtYXBUb1Byb3BzIGZ1bmN0aW9uIGJlaW5nIGNhbGxlZCBkZXBlbmRzIG9uIHByb3BzLCB3aGljaFxuLy8gICAgaXMgdXNlZCBieSBzZWxlY3RvckZhY3RvcnkgdG8gZGVjaWRlIGlmIGl0IHNob3VsZCByZWludm9rZSBvbiBwcm9wcyBjaGFuZ2VzLlxuLy8gICAgXG4vLyAgKiBPbiBmaXJzdCBjYWxsLCBoYW5kbGVzIG1hcFRvUHJvcHMgaWYgcmV0dXJucyBhbm90aGVyIGZ1bmN0aW9uLCBhbmQgdHJlYXRzIHRoYXRcbi8vICAgIG5ldyBmdW5jdGlvbiBhcyB0aGUgdHJ1ZSBtYXBUb1Byb3BzIGZvciBzdWJzZXF1ZW50IGNhbGxzLlxuLy8gICAgXG4vLyAgKiBPbiBmaXJzdCBjYWxsLCB2ZXJpZmllcyB0aGUgZmlyc3QgcmVzdWx0IGlzIGEgcGxhaW4gb2JqZWN0LCBpbiBvcmRlciB0byB3YXJuXG4vLyAgICB0aGUgZGV2ZWxvcGVyIHRoYXQgdGhlaXIgbWFwVG9Qcm9wcyBmdW5jdGlvbiBpcyBub3QgcmV0dXJuaW5nIGEgdmFsaWQgcmVzdWx0LlxuLy8gICAgXG5leHBvcnQgZnVuY3Rpb24gd3JhcE1hcFRvUHJvcHNGdW5jKG1hcFRvUHJvcHMsIG1ldGhvZE5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGluaXRQcm94eVNlbGVjdG9yKGRpc3BhdGNoLCBfcmVmKSB7XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gX3JlZi5kaXNwbGF5TmFtZTtcblxuICAgIHZhciBwcm94eSA9IGZ1bmN0aW9uIG1hcFRvUHJvcHNQcm94eShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSB7XG4gICAgICByZXR1cm4gcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPyBwcm94eS5tYXBUb1Byb3BzKHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpIDogcHJveHkubWFwVG9Qcm9wcyhzdGF0ZU9yRGlzcGF0Y2gpO1xuICAgIH07XG5cbiAgICAvLyBhbGxvdyBkZXRlY3RGYWN0b3J5QW5kVmVyaWZ5IHRvIGdldCBvd25Qcm9wc1xuICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gdHJ1ZTtcblxuICAgIHByb3h5Lm1hcFRvUHJvcHMgPSBmdW5jdGlvbiBkZXRlY3RGYWN0b3J5QW5kVmVyaWZ5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpIHtcbiAgICAgIHByb3h5Lm1hcFRvUHJvcHMgPSBtYXBUb1Byb3BzO1xuICAgICAgcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPSBnZXREZXBlbmRzT25Pd25Qcm9wcyhtYXBUb1Byb3BzKTtcbiAgICAgIHZhciBwcm9wcyA9IHByb3h5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpO1xuXG4gICAgICBpZiAodHlwZW9mIHByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHByb3h5Lm1hcFRvUHJvcHMgPSBwcm9wcztcbiAgICAgICAgcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPSBnZXREZXBlbmRzT25Pd25Qcm9wcyhwcm9wcyk7XG4gICAgICAgIHByb3BzID0gcHJveHkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB2ZXJpZnlQbGFpbk9iamVjdChwcm9wcywgZGlzcGxheU5hbWUsIG1ldGhvZE5hbWUpO1xuXG4gICAgICByZXR1cm4gcHJvcHM7XG4gICAgfTtcblxuICAgIHJldHVybiBwcm94eTtcbiAgfTtcbn0iLCJpbXBvcnQgeyBiaW5kQWN0aW9uQ3JlYXRvcnMgfSBmcm9tICdyZWR1eCc7XG5pbXBvcnQgeyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50LCB3cmFwTWFwVG9Qcm9wc0Z1bmMgfSBmcm9tICcuL3dyYXBNYXBUb1Byb3BzJztcblxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uKG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gdHlwZW9mIG1hcERpc3BhdGNoVG9Qcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/IHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBEaXNwYXRjaFRvUHJvcHMsICdtYXBEaXNwYXRjaFRvUHJvcHMnKSA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc01pc3NpbmcobWFwRGlzcGF0Y2hUb1Byb3BzKSB7XG4gIHJldHVybiAhbWFwRGlzcGF0Y2hUb1Byb3BzID8gd3JhcE1hcFRvUHJvcHNDb25zdGFudChmdW5jdGlvbiAoZGlzcGF0Y2gpIHtcbiAgICByZXR1cm4geyBkaXNwYXRjaDogZGlzcGF0Y2ggfTtcbiAgfSkgOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNPYmplY3QobWFwRGlzcGF0Y2hUb1Byb3BzKSB7XG4gIHJldHVybiBtYXBEaXNwYXRjaFRvUHJvcHMgJiYgdHlwZW9mIG1hcERpc3BhdGNoVG9Qcm9wcyA9PT0gJ29iamVjdCcgPyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGZ1bmN0aW9uIChkaXNwYXRjaCkge1xuICAgIHJldHVybiBiaW5kQWN0aW9uQ3JlYXRvcnMobWFwRGlzcGF0Y2hUb1Byb3BzLCBkaXNwYXRjaCk7XG4gIH0pIDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBbd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzRnVuY3Rpb24sIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc01pc3NpbmcsIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc09iamVjdF07IiwiaW1wb3J0IHsgd3JhcE1hcFRvUHJvcHNDb25zdGFudCwgd3JhcE1hcFRvUHJvcHNGdW5jIH0gZnJvbSAnLi93cmFwTWFwVG9Qcm9wcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwU3RhdGVUb1Byb3BzSXNGdW5jdGlvbihtYXBTdGF0ZVRvUHJvcHMpIHtcbiAgcmV0dXJuIHR5cGVvZiBtYXBTdGF0ZVRvUHJvcHMgPT09ICdmdW5jdGlvbicgPyB3cmFwTWFwVG9Qcm9wc0Z1bmMobWFwU3RhdGVUb1Byb3BzLCAnbWFwU3RhdGVUb1Byb3BzJykgOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwU3RhdGVUb1Byb3BzSXNNaXNzaW5nKG1hcFN0YXRlVG9Qcm9wcykge1xuICByZXR1cm4gIW1hcFN0YXRlVG9Qcm9wcyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7fTtcbiAgfSkgOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFt3aGVuTWFwU3RhdGVUb1Byb3BzSXNGdW5jdGlvbiwgd2hlbk1hcFN0YXRlVG9Qcm9wc0lzTWlzc2luZ107IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuaW1wb3J0IHZlcmlmeVBsYWluT2JqZWN0IGZyb20gJy4uL3V0aWxzL3ZlcmlmeVBsYWluT2JqZWN0JztcblxuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRNZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKSB7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgb3duUHJvcHMsIHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd3JhcE1lcmdlUHJvcHNGdW5jKG1lcmdlUHJvcHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGluaXRNZXJnZVByb3BzUHJveHkoZGlzcGF0Y2gsIF9yZWYpIHtcbiAgICB2YXIgZGlzcGxheU5hbWUgPSBfcmVmLmRpc3BsYXlOYW1lLFxuICAgICAgICBwdXJlID0gX3JlZi5wdXJlLFxuICAgICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsID0gX3JlZi5hcmVNZXJnZWRQcm9wc0VxdWFsO1xuXG4gICAgdmFyIGhhc1J1bk9uY2UgPSBmYWxzZTtcbiAgICB2YXIgbWVyZ2VkUHJvcHMgPSB2b2lkIDA7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VQcm9wc1Byb3h5KHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKSB7XG4gICAgICB2YXIgbmV4dE1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG5cbiAgICAgIGlmIChoYXNSdW5PbmNlKSB7XG4gICAgICAgIGlmICghcHVyZSB8fCAhYXJlTWVyZ2VkUHJvcHNFcXVhbChuZXh0TWVyZ2VkUHJvcHMsIG1lcmdlZFByb3BzKSkgbWVyZ2VkUHJvcHMgPSBuZXh0TWVyZ2VkUHJvcHM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBoYXNSdW5PbmNlID0gdHJ1ZTtcbiAgICAgICAgbWVyZ2VkUHJvcHMgPSBuZXh0TWVyZ2VkUHJvcHM7XG5cbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHZlcmlmeVBsYWluT2JqZWN0KG1lcmdlZFByb3BzLCBkaXNwbGF5TmFtZSwgJ21lcmdlUHJvcHMnKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICAgIH07XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWVyZ2VQcm9wc0lzRnVuY3Rpb24obWVyZ2VQcm9wcykge1xuICByZXR1cm4gdHlwZW9mIG1lcmdlUHJvcHMgPT09ICdmdW5jdGlvbicgPyB3cmFwTWVyZ2VQcm9wc0Z1bmMobWVyZ2VQcm9wcykgOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWVyZ2VQcm9wc0lzT21pdHRlZChtZXJnZVByb3BzKSB7XG4gIHJldHVybiAhbWVyZ2VQcm9wcyA/IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZGVmYXVsdE1lcmdlUHJvcHM7XG4gIH0gOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFt3aGVuTWVyZ2VQcm9wc0lzRnVuY3Rpb24sIHdoZW5NZXJnZVByb3BzSXNPbWl0dGVkXTsiLCJmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmltcG9ydCB2ZXJpZnlTdWJzZWxlY3RvcnMgZnJvbSAnLi92ZXJpZnlTdWJzZWxlY3RvcnMnO1xuXG5leHBvcnQgZnVuY3Rpb24gaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeShtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgZGlzcGF0Y2gpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGltcHVyZUZpbmFsUHJvcHNTZWxlY3RvcihzdGF0ZSwgb3duUHJvcHMpIHtcbiAgICByZXR1cm4gbWVyZ2VQcm9wcyhtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKSwgbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyksIG93blByb3BzKTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBkaXNwYXRjaCwgX3JlZikge1xuICB2YXIgYXJlU3RhdGVzRXF1YWwgPSBfcmVmLmFyZVN0YXRlc0VxdWFsLFxuICAgICAgYXJlT3duUHJvcHNFcXVhbCA9IF9yZWYuYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbCA9IF9yZWYuYXJlU3RhdGVQcm9wc0VxdWFsO1xuXG4gIHZhciBoYXNSdW5BdExlYXN0T25jZSA9IGZhbHNlO1xuICB2YXIgc3RhdGUgPSB2b2lkIDA7XG4gIHZhciBvd25Qcm9wcyA9IHZvaWQgMDtcbiAgdmFyIHN0YXRlUHJvcHMgPSB2b2lkIDA7XG4gIHZhciBkaXNwYXRjaFByb3BzID0gdm9pZCAwO1xuICB2YXIgbWVyZ2VkUHJvcHMgPSB2b2lkIDA7XG5cbiAgZnVuY3Rpb24gaGFuZGxlRmlyc3RDYWxsKGZpcnN0U3RhdGUsIGZpcnN0T3duUHJvcHMpIHtcbiAgICBzdGF0ZSA9IGZpcnN0U3RhdGU7XG4gICAgb3duUHJvcHMgPSBmaXJzdE93blByb3BzO1xuICAgIHN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICBkaXNwYXRjaFByb3BzID0gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICBoYXNSdW5BdExlYXN0T25jZSA9IHRydWU7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlTmV3UHJvcHNBbmROZXdTdGF0ZSgpIHtcbiAgICBzdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG5cbiAgICBpZiAobWFwRGlzcGF0Y2hUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSBkaXNwYXRjaFByb3BzID0gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyk7XG5cbiAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1Byb3BzKCkge1xuICAgIGlmIChtYXBTdGF0ZVRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIHN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcblxuICAgIGlmIChtYXBEaXNwYXRjaFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIGRpc3BhdGNoUHJvcHMgPSBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKTtcblxuICAgIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlTmV3U3RhdGUoKSB7XG4gICAgdmFyIG5leHRTdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG4gICAgdmFyIHN0YXRlUHJvcHNDaGFuZ2VkID0gIWFyZVN0YXRlUHJvcHNFcXVhbChuZXh0U3RhdGVQcm9wcywgc3RhdGVQcm9wcyk7XG4gICAgc3RhdGVQcm9wcyA9IG5leHRTdGF0ZVByb3BzO1xuXG4gICAgaWYgKHN0YXRlUHJvcHNDaGFuZ2VkKSBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuXG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlU3Vic2VxdWVudENhbGxzKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSB7XG4gICAgdmFyIHByb3BzQ2hhbmdlZCA9ICFhcmVPd25Qcm9wc0VxdWFsKG5leHRPd25Qcm9wcywgb3duUHJvcHMpO1xuICAgIHZhciBzdGF0ZUNoYW5nZWQgPSAhYXJlU3RhdGVzRXF1YWwobmV4dFN0YXRlLCBzdGF0ZSk7XG4gICAgc3RhdGUgPSBuZXh0U3RhdGU7XG4gICAgb3duUHJvcHMgPSBuZXh0T3duUHJvcHM7XG5cbiAgICBpZiAocHJvcHNDaGFuZ2VkICYmIHN0YXRlQ2hhbmdlZCkgcmV0dXJuIGhhbmRsZU5ld1Byb3BzQW5kTmV3U3RhdGUoKTtcbiAgICBpZiAocHJvcHNDaGFuZ2VkKSByZXR1cm4gaGFuZGxlTmV3UHJvcHMoKTtcbiAgICBpZiAoc3RhdGVDaGFuZ2VkKSByZXR1cm4gaGFuZGxlTmV3U3RhdGUoKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gcHVyZUZpbmFsUHJvcHNTZWxlY3RvcihuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykge1xuICAgIHJldHVybiBoYXNSdW5BdExlYXN0T25jZSA/IGhhbmRsZVN1YnNlcXVlbnRDYWxscyhuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykgOiBoYW5kbGVGaXJzdENhbGwobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpO1xuICB9O1xufVxuXG4vLyBUT0RPOiBBZGQgbW9yZSBjb21tZW50c1xuXG4vLyBJZiBwdXJlIGlzIHRydWUsIHRoZSBzZWxlY3RvciByZXR1cm5lZCBieSBzZWxlY3RvckZhY3Rvcnkgd2lsbCBtZW1vaXplIGl0cyByZXN1bHRzLFxuLy8gYWxsb3dpbmcgY29ubmVjdEFkdmFuY2VkJ3Mgc2hvdWxkQ29tcG9uZW50VXBkYXRlIHRvIHJldHVybiBmYWxzZSBpZiBmaW5hbFxuLy8gcHJvcHMgaGF2ZSBub3QgY2hhbmdlZC4gSWYgZmFsc2UsIHRoZSBzZWxlY3RvciB3aWxsIGFsd2F5cyByZXR1cm4gYSBuZXdcbi8vIG9iamVjdCBhbmQgc2hvdWxkQ29tcG9uZW50VXBkYXRlIHdpbGwgYWx3YXlzIHJldHVybiB0cnVlLlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KGRpc3BhdGNoLCBfcmVmMikge1xuICB2YXIgaW5pdE1hcFN0YXRlVG9Qcm9wcyA9IF9yZWYyLmluaXRNYXBTdGF0ZVRvUHJvcHMsXG4gICAgICBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzID0gX3JlZjIuaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyxcbiAgICAgIGluaXRNZXJnZVByb3BzID0gX3JlZjIuaW5pdE1lcmdlUHJvcHMsXG4gICAgICBvcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYyLCBbJ2luaXRNYXBTdGF0ZVRvUHJvcHMnLCAnaW5pdE1hcERpc3BhdGNoVG9Qcm9wcycsICdpbml0TWVyZ2VQcm9wcyddKTtcblxuICB2YXIgbWFwU3RhdGVUb1Byb3BzID0gaW5pdE1hcFN0YXRlVG9Qcm9wcyhkaXNwYXRjaCwgb3B0aW9ucyk7XG4gIHZhciBtYXBEaXNwYXRjaFRvUHJvcHMgPSBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvcHRpb25zKTtcbiAgdmFyIG1lcmdlUHJvcHMgPSBpbml0TWVyZ2VQcm9wcyhkaXNwYXRjaCwgb3B0aW9ucyk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB2ZXJpZnlTdWJzZWxlY3RvcnMobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIG9wdGlvbnMuZGlzcGxheU5hbWUpO1xuICB9XG5cbiAgdmFyIHNlbGVjdG9yRmFjdG9yeSA9IG9wdGlvbnMucHVyZSA/IHB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IDogaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeTtcblxuICByZXR1cm4gc2VsZWN0b3JGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBkaXNwYXRjaCwgb3B0aW9ucyk7XG59IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5pbXBvcnQgY29ubmVjdEFkdmFuY2VkIGZyb20gJy4uL2NvbXBvbmVudHMvY29ubmVjdEFkdmFuY2VkJztcbmltcG9ydCBzaGFsbG93RXF1YWwgZnJvbSAnLi4vdXRpbHMvc2hhbGxvd0VxdWFsJztcbmltcG9ydCBkZWZhdWx0TWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzIGZyb20gJy4vbWFwRGlzcGF0Y2hUb1Byb3BzJztcbmltcG9ydCBkZWZhdWx0TWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzIGZyb20gJy4vbWFwU3RhdGVUb1Byb3BzJztcbmltcG9ydCBkZWZhdWx0TWVyZ2VQcm9wc0ZhY3RvcmllcyBmcm9tICcuL21lcmdlUHJvcHMnO1xuaW1wb3J0IGRlZmF1bHRTZWxlY3RvckZhY3RvcnkgZnJvbSAnLi9zZWxlY3RvckZhY3RvcnknO1xuXG4vKlxuICBjb25uZWN0IGlzIGEgZmFjYWRlIG92ZXIgY29ubmVjdEFkdmFuY2VkLiBJdCB0dXJucyBpdHMgYXJncyBpbnRvIGEgY29tcGF0aWJsZVxuICBzZWxlY3RvckZhY3RvcnksIHdoaWNoIGhhcyB0aGUgc2lnbmF0dXJlOlxuXG4gICAgKGRpc3BhdGNoLCBvcHRpb25zKSA9PiAobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpID0+IG5leHRGaW5hbFByb3BzXG4gIFxuICBjb25uZWN0IHBhc3NlcyBpdHMgYXJncyB0byBjb25uZWN0QWR2YW5jZWQgYXMgb3B0aW9ucywgd2hpY2ggd2lsbCBpbiB0dXJuIHBhc3MgdGhlbSB0b1xuICBzZWxlY3RvckZhY3RvcnkgZWFjaCB0aW1lIGEgQ29ubmVjdCBjb21wb25lbnQgaW5zdGFuY2UgaXMgaW5zdGFudGlhdGVkIG9yIGhvdCByZWxvYWRlZC5cblxuICBzZWxlY3RvckZhY3RvcnkgcmV0dXJucyBhIGZpbmFsIHByb3BzIHNlbGVjdG9yIGZyb20gaXRzIG1hcFN0YXRlVG9Qcm9wcyxcbiAgbWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcywgbWVyZ2VQcm9wcyxcbiAgbWVyZ2VQcm9wc0ZhY3RvcmllcywgYW5kIHB1cmUgYXJncy5cblxuICBUaGUgcmVzdWx0aW5nIGZpbmFsIHByb3BzIHNlbGVjdG9yIGlzIGNhbGxlZCBieSB0aGUgQ29ubmVjdCBjb21wb25lbnQgaW5zdGFuY2Ugd2hlbmV2ZXJcbiAgaXQgcmVjZWl2ZXMgbmV3IHByb3BzIG9yIHN0b3JlIHN0YXRlLlxuICovXG5cbmZ1bmN0aW9uIG1hdGNoKGFyZywgZmFjdG9yaWVzLCBuYW1lKSB7XG4gIGZvciAodmFyIGkgPSBmYWN0b3JpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgcmVzdWx0ID0gZmFjdG9yaWVzW2ldKGFyZyk7XG4gICAgaWYgKHJlc3VsdCkgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoZGlzcGF0Y2gsIG9wdGlvbnMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdmFsdWUgb2YgdHlwZSAnICsgdHlwZW9mIGFyZyArICcgZm9yICcgKyBuYW1lICsgJyBhcmd1bWVudCB3aGVuIGNvbm5lY3RpbmcgY29tcG9uZW50ICcgKyBvcHRpb25zLndyYXBwZWRDb21wb25lbnROYW1lICsgJy4nKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3RyaWN0RXF1YWwoYSwgYikge1xuICByZXR1cm4gYSA9PT0gYjtcbn1cblxuLy8gY3JlYXRlQ29ubmVjdCB3aXRoIGRlZmF1bHQgYXJncyBidWlsZHMgdGhlICdvZmZpY2lhbCcgY29ubmVjdCBiZWhhdmlvci4gQ2FsbGluZyBpdCB3aXRoXG4vLyBkaWZmZXJlbnQgb3B0aW9ucyBvcGVucyB1cCBzb21lIHRlc3RpbmcgYW5kIGV4dGVuc2liaWxpdHkgc2NlbmFyaW9zXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29ubmVjdCgpIHtcbiAgdmFyIF9yZWYgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9LFxuICAgICAgX3JlZiRjb25uZWN0SE9DID0gX3JlZi5jb25uZWN0SE9DLFxuICAgICAgY29ubmVjdEhPQyA9IF9yZWYkY29ubmVjdEhPQyA9PT0gdW5kZWZpbmVkID8gY29ubmVjdEFkdmFuY2VkIDogX3JlZiRjb25uZWN0SE9DLFxuICAgICAgX3JlZiRtYXBTdGF0ZVRvUHJvcHNGID0gX3JlZi5tYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMsXG4gICAgICBtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMgPSBfcmVmJG1hcFN0YXRlVG9Qcm9wc0YgPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRNYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMgOiBfcmVmJG1hcFN0YXRlVG9Qcm9wc0YsXG4gICAgICBfcmVmJG1hcERpc3BhdGNoVG9Qcm8gPSBfcmVmLm1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyxcbiAgICAgIG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyA9IF9yZWYkbWFwRGlzcGF0Y2hUb1BybyA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdE1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyA6IF9yZWYkbWFwRGlzcGF0Y2hUb1BybyxcbiAgICAgIF9yZWYkbWVyZ2VQcm9wc0ZhY3RvciA9IF9yZWYubWVyZ2VQcm9wc0ZhY3RvcmllcyxcbiAgICAgIG1lcmdlUHJvcHNGYWN0b3JpZXMgPSBfcmVmJG1lcmdlUHJvcHNGYWN0b3IgPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRNZXJnZVByb3BzRmFjdG9yaWVzIDogX3JlZiRtZXJnZVByb3BzRmFjdG9yLFxuICAgICAgX3JlZiRzZWxlY3RvckZhY3RvcnkgPSBfcmVmLnNlbGVjdG9yRmFjdG9yeSxcbiAgICAgIHNlbGVjdG9yRmFjdG9yeSA9IF9yZWYkc2VsZWN0b3JGYWN0b3J5ID09PSB1bmRlZmluZWQgPyBkZWZhdWx0U2VsZWN0b3JGYWN0b3J5IDogX3JlZiRzZWxlY3RvckZhY3Rvcnk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMpIHtcbiAgICB2YXIgX3JlZjIgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IHt9LFxuICAgICAgICBfcmVmMiRwdXJlID0gX3JlZjIucHVyZSxcbiAgICAgICAgcHVyZSA9IF9yZWYyJHB1cmUgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBfcmVmMiRwdXJlLFxuICAgICAgICBfcmVmMiRhcmVTdGF0ZXNFcXVhbCA9IF9yZWYyLmFyZVN0YXRlc0VxdWFsLFxuICAgICAgICBhcmVTdGF0ZXNFcXVhbCA9IF9yZWYyJGFyZVN0YXRlc0VxdWFsID09PSB1bmRlZmluZWQgPyBzdHJpY3RFcXVhbCA6IF9yZWYyJGFyZVN0YXRlc0VxdWFsLFxuICAgICAgICBfcmVmMiRhcmVPd25Qcm9wc0VxdWEgPSBfcmVmMi5hcmVPd25Qcm9wc0VxdWFsLFxuICAgICAgICBhcmVPd25Qcm9wc0VxdWFsID0gX3JlZjIkYXJlT3duUHJvcHNFcXVhID09PSB1bmRlZmluZWQgPyBzaGFsbG93RXF1YWwgOiBfcmVmMiRhcmVPd25Qcm9wc0VxdWEsXG4gICAgICAgIF9yZWYyJGFyZVN0YXRlUHJvcHNFcSA9IF9yZWYyLmFyZVN0YXRlUHJvcHNFcXVhbCxcbiAgICAgICAgYXJlU3RhdGVQcm9wc0VxdWFsID0gX3JlZjIkYXJlU3RhdGVQcm9wc0VxID09PSB1bmRlZmluZWQgPyBzaGFsbG93RXF1YWwgOiBfcmVmMiRhcmVTdGF0ZVByb3BzRXEsXG4gICAgICAgIF9yZWYyJGFyZU1lcmdlZFByb3BzRSA9IF9yZWYyLmFyZU1lcmdlZFByb3BzRXF1YWwsXG4gICAgICAgIGFyZU1lcmdlZFByb3BzRXF1YWwgPSBfcmVmMiRhcmVNZXJnZWRQcm9wc0UgPT09IHVuZGVmaW5lZCA/IHNoYWxsb3dFcXVhbCA6IF9yZWYyJGFyZU1lcmdlZFByb3BzRSxcbiAgICAgICAgZXh0cmFPcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYyLCBbJ3B1cmUnLCAnYXJlU3RhdGVzRXF1YWwnLCAnYXJlT3duUHJvcHNFcXVhbCcsICdhcmVTdGF0ZVByb3BzRXF1YWwnLCAnYXJlTWVyZ2VkUHJvcHNFcXVhbCddKTtcblxuICAgIHZhciBpbml0TWFwU3RhdGVUb1Byb3BzID0gbWF0Y2gobWFwU3RhdGVUb1Byb3BzLCBtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMsICdtYXBTdGF0ZVRvUHJvcHMnKTtcbiAgICB2YXIgaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyA9IG1hdGNoKG1hcERpc3BhdGNoVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzLCAnbWFwRGlzcGF0Y2hUb1Byb3BzJyk7XG4gICAgdmFyIGluaXRNZXJnZVByb3BzID0gbWF0Y2gobWVyZ2VQcm9wcywgbWVyZ2VQcm9wc0ZhY3RvcmllcywgJ21lcmdlUHJvcHMnKTtcblxuICAgIHJldHVybiBjb25uZWN0SE9DKHNlbGVjdG9yRmFjdG9yeSwgX2V4dGVuZHMoe1xuICAgICAgLy8gdXNlZCBpbiBlcnJvciBtZXNzYWdlc1xuICAgICAgbWV0aG9kTmFtZTogJ2Nvbm5lY3QnLFxuXG4gICAgICAvLyB1c2VkIHRvIGNvbXB1dGUgQ29ubmVjdCdzIGRpc3BsYXlOYW1lIGZyb20gdGhlIHdyYXBwZWQgY29tcG9uZW50J3MgZGlzcGxheU5hbWUuXG4gICAgICBnZXREaXNwbGF5TmFtZTogZnVuY3Rpb24gZ2V0RGlzcGxheU5hbWUobmFtZSkge1xuICAgICAgICByZXR1cm4gJ0Nvbm5lY3QoJyArIG5hbWUgKyAnKSc7XG4gICAgICB9LFxuXG4gICAgICAvLyBpZiBtYXBTdGF0ZVRvUHJvcHMgaXMgZmFsc3ksIHRoZSBDb25uZWN0IGNvbXBvbmVudCBkb2Vzbid0IHN1YnNjcmliZSB0byBzdG9yZSBzdGF0ZSBjaGFuZ2VzXG4gICAgICBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXM6IEJvb2xlYW4obWFwU3RhdGVUb1Byb3BzKSxcblxuICAgICAgLy8gcGFzc2VkIHRocm91Z2ggdG8gc2VsZWN0b3JGYWN0b3J5XG4gICAgICBpbml0TWFwU3RhdGVUb1Byb3BzOiBpbml0TWFwU3RhdGVUb1Byb3BzLFxuICAgICAgaW5pdE1hcERpc3BhdGNoVG9Qcm9wczogaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyxcbiAgICAgIGluaXRNZXJnZVByb3BzOiBpbml0TWVyZ2VQcm9wcyxcbiAgICAgIHB1cmU6IHB1cmUsXG4gICAgICBhcmVTdGF0ZXNFcXVhbDogYXJlU3RhdGVzRXF1YWwsXG4gICAgICBhcmVPd25Qcm9wc0VxdWFsOiBhcmVPd25Qcm9wc0VxdWFsLFxuICAgICAgYXJlU3RhdGVQcm9wc0VxdWFsOiBhcmVTdGF0ZVByb3BzRXF1YWwsXG4gICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsOiBhcmVNZXJnZWRQcm9wc0VxdWFsXG5cbiAgICB9LCBleHRyYU9wdGlvbnMpKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQ29ubmVjdCgpOyIsIi8vIDcuMS4xMyBUb09iamVjdChhcmd1bWVudClcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIE9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuaW1wb3J0IHsgaXMsIGNoZWNrLCByZW1vdmUsIE1BVENILCBpbnRlcm5hbEVyciwgU0FHQV9BQ1RJT04gfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IGJ1ZmZlcnMgfSBmcm9tICcuL2J1ZmZlcnMnO1xuaW1wb3J0IHsgYXNhcCB9IGZyb20gJy4vc2NoZWR1bGVyJztcblxudmFyIENIQU5ORUxfRU5EX1RZUEUgPSAnQEByZWR1eC1zYWdhL0NIQU5ORUxfRU5EJztcbmV4cG9ydCB2YXIgRU5EID0geyB0eXBlOiBDSEFOTkVMX0VORF9UWVBFIH07XG5leHBvcnQgdmFyIGlzRW5kID0gZnVuY3Rpb24gaXNFbmQoYSkge1xuICByZXR1cm4gYSAmJiBhLnR5cGUgPT09IENIQU5ORUxfRU5EX1RZUEU7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gZW1pdHRlcigpIHtcbiAgdmFyIHN1YnNjcmliZXJzID0gW107XG5cbiAgZnVuY3Rpb24gc3Vic2NyaWJlKHN1Yikge1xuICAgIHN1YnNjcmliZXJzLnB1c2goc3ViKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHJlbW92ZShzdWJzY3JpYmVycywgc3ViKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZW1pdChpdGVtKSB7XG4gICAgdmFyIGFyciA9IHN1YnNjcmliZXJzLnNsaWNlKCk7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGFyci5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgYXJyW2ldKGl0ZW0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgc3Vic2NyaWJlOiBzdWJzY3JpYmUsXG4gICAgZW1pdDogZW1pdFxuICB9O1xufVxuXG5leHBvcnQgdmFyIElOVkFMSURfQlVGRkVSID0gJ2ludmFsaWQgYnVmZmVyIHBhc3NlZCB0byBjaGFubmVsIGZhY3RvcnkgZnVuY3Rpb24nO1xuZXhwb3J0IHZhciBVTkRFRklORURfSU5QVVRfRVJST1IgPSAnU2FnYSB3YXMgcHJvdmlkZWQgd2l0aCBhbiB1bmRlZmluZWQgYWN0aW9uJztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgVU5ERUZJTkVEX0lOUFVUX0VSUk9SICs9ICdcXG5IaW50czpcXG4gICAgLSBjaGVjayB0aGF0IHlvdXIgQWN0aW9uIENyZWF0b3IgcmV0dXJucyBhIG5vbi11bmRlZmluZWQgdmFsdWVcXG4gICAgLSBpZiB0aGUgU2FnYSB3YXMgc3RhcnRlZCB1c2luZyBydW5TYWdhLCBjaGVjayB0aGF0IHlvdXIgc3Vic2NyaWJlIHNvdXJjZSBwcm92aWRlcyB0aGUgYWN0aW9uIHRvIGl0cyBsaXN0ZW5lcnNcXG4gICc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGFubmVsKCkge1xuICB2YXIgYnVmZmVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBidWZmZXJzLmZpeGVkKCk7XG5cbiAgdmFyIGNsb3NlZCA9IGZhbHNlO1xuICB2YXIgdGFrZXJzID0gW107XG5cbiAgY2hlY2soYnVmZmVyLCBpcy5idWZmZXIsIElOVkFMSURfQlVGRkVSKTtcblxuICBmdW5jdGlvbiBjaGVja0ZvcmJpZGRlblN0YXRlcygpIHtcbiAgICBpZiAoY2xvc2VkICYmIHRha2Vycy5sZW5ndGgpIHtcbiAgICAgIHRocm93IGludGVybmFsRXJyKCdDYW5ub3QgaGF2ZSBhIGNsb3NlZCBjaGFubmVsIHdpdGggcGVuZGluZyB0YWtlcnMnKTtcbiAgICB9XG4gICAgaWYgKHRha2Vycy5sZW5ndGggJiYgIWJ1ZmZlci5pc0VtcHR5KCkpIHtcbiAgICAgIHRocm93IGludGVybmFsRXJyKCdDYW5ub3QgaGF2ZSBwZW5kaW5nIHRha2VycyB3aXRoIG5vbiBlbXB0eSBidWZmZXInKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwdXQoaW5wdXQpIHtcbiAgICBjaGVja0ZvcmJpZGRlblN0YXRlcygpO1xuICAgIGNoZWNrKGlucHV0LCBpcy5ub3RVbmRlZiwgVU5ERUZJTkVEX0lOUFVUX0VSUk9SKTtcbiAgICBpZiAoY2xvc2VkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghdGFrZXJzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGJ1ZmZlci5wdXQoaW5wdXQpO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRha2Vycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGNiID0gdGFrZXJzW2ldO1xuICAgICAgaWYgKCFjYltNQVRDSF0gfHwgY2JbTUFUQ0hdKGlucHV0KSkge1xuICAgICAgICB0YWtlcnMuc3BsaWNlKGksIDEpO1xuICAgICAgICByZXR1cm4gY2IoaW5wdXQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRha2UoY2IpIHtcbiAgICBjaGVja0ZvcmJpZGRlblN0YXRlcygpO1xuICAgIGNoZWNrKGNiLCBpcy5mdW5jLCBcImNoYW5uZWwudGFrZSdzIGNhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvblwiKTtcblxuICAgIGlmIChjbG9zZWQgJiYgYnVmZmVyLmlzRW1wdHkoKSkge1xuICAgICAgY2IoRU5EKTtcbiAgICB9IGVsc2UgaWYgKCFidWZmZXIuaXNFbXB0eSgpKSB7XG4gICAgICBjYihidWZmZXIudGFrZSgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGFrZXJzLnB1c2goY2IpO1xuICAgICAgY2IuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gcmVtb3ZlKHRha2VycywgY2IpO1xuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBmbHVzaChjYikge1xuICAgIGNoZWNrRm9yYmlkZGVuU3RhdGVzKCk7IC8vIFRPRE86IGNoZWNrIGlmIHNvbWUgbmV3IHN0YXRlIHNob3VsZCBiZSBmb3JiaWRkZW4gbm93XG4gICAgY2hlY2soY2IsIGlzLmZ1bmMsIFwiY2hhbm5lbC5mbHVzaCcgY2FsbGJhY2sgbXVzdCBiZSBhIGZ1bmN0aW9uXCIpO1xuICAgIGlmIChjbG9zZWQgJiYgYnVmZmVyLmlzRW1wdHkoKSkge1xuICAgICAgY2IoRU5EKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY2IoYnVmZmVyLmZsdXNoKCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2xvc2UoKSB7XG4gICAgY2hlY2tGb3JiaWRkZW5TdGF0ZXMoKTtcbiAgICBpZiAoIWNsb3NlZCkge1xuICAgICAgY2xvc2VkID0gdHJ1ZTtcbiAgICAgIGlmICh0YWtlcnMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBhcnIgPSB0YWtlcnM7XG4gICAgICAgIHRha2VycyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gYXJyLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgYXJyW2ldKEVORCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHRha2U6IHRha2UsXG4gICAgcHV0OiBwdXQsXG4gICAgZmx1c2g6IGZsdXNoLFxuICAgIGNsb3NlOiBjbG9zZSxcbiAgICBnZXQgX190YWtlcnNfXygpIHtcbiAgICAgIHJldHVybiB0YWtlcnM7XG4gICAgfSxcbiAgICBnZXQgX19jbG9zZWRfXygpIHtcbiAgICAgIHJldHVybiBjbG9zZWQ7XG4gICAgfVxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXZlbnRDaGFubmVsKHN1YnNjcmliZSkge1xuICB2YXIgYnVmZmVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBidWZmZXJzLm5vbmUoKTtcbiAgdmFyIG1hdGNoZXIgPSBhcmd1bWVudHNbMl07XG5cbiAgLyoqXG4gICAgc2hvdWxkIGJlIGlmKHR5cGVvZiBtYXRjaGVyICE9PSB1bmRlZmluZWQpIGluc3RlYWQ/XG4gICAgc2VlIFBSICMyNzMgZm9yIGEgYmFja2dyb3VuZCBkaXNjdXNzaW9uXG4gICoqL1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDIpIHtcbiAgICBjaGVjayhtYXRjaGVyLCBpcy5mdW5jLCAnSW52YWxpZCBtYXRjaCBmdW5jdGlvbiBwYXNzZWQgdG8gZXZlbnRDaGFubmVsJyk7XG4gIH1cblxuICB2YXIgY2hhbiA9IGNoYW5uZWwoYnVmZmVyKTtcbiAgdmFyIGNsb3NlID0gZnVuY3Rpb24gY2xvc2UoKSB7XG4gICAgaWYgKCFjaGFuLl9fY2xvc2VkX18pIHtcbiAgICAgIGlmICh1bnN1YnNjcmliZSkge1xuICAgICAgICB1bnN1YnNjcmliZSgpO1xuICAgICAgfVxuICAgICAgY2hhbi5jbG9zZSgpO1xuICAgIH1cbiAgfTtcbiAgdmFyIHVuc3Vic2NyaWJlID0gc3Vic2NyaWJlKGZ1bmN0aW9uIChpbnB1dCkge1xuICAgIGlmIChpc0VuZChpbnB1dCkpIHtcbiAgICAgIGNsb3NlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChtYXRjaGVyICYmICFtYXRjaGVyKGlucHV0KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjaGFuLnB1dChpbnB1dCk7XG4gIH0pO1xuICBpZiAoY2hhbi5fX2Nsb3NlZF9fKSB7XG4gICAgdW5zdWJzY3JpYmUoKTtcbiAgfVxuXG4gIGlmICghaXMuZnVuYyh1bnN1YnNjcmliZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2luIGV2ZW50Q2hhbm5lbDogc3Vic2NyaWJlIHNob3VsZCByZXR1cm4gYSBmdW5jdGlvbiB0byB1bnN1YnNjcmliZScpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0YWtlOiBjaGFuLnRha2UsXG4gICAgZmx1c2g6IGNoYW4uZmx1c2gsXG4gICAgY2xvc2U6IGNsb3NlXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdGRDaGFubmVsKHN1YnNjcmliZSkge1xuICB2YXIgY2hhbiA9IGV2ZW50Q2hhbm5lbChmdW5jdGlvbiAoY2IpIHtcbiAgICByZXR1cm4gc3Vic2NyaWJlKGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgaWYgKGlucHV0W1NBR0FfQUNUSU9OXSkge1xuICAgICAgICBjYihpbnB1dCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGFzYXAoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gY2IoaW5wdXQpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgY2hhbiwge1xuICAgIHRha2U6IGZ1bmN0aW9uIHRha2UoY2IsIG1hdGNoZXIpIHtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBjaGVjayhtYXRjaGVyLCBpcy5mdW5jLCBcImNoYW5uZWwudGFrZSdzIG1hdGNoZXIgYXJndW1lbnQgbXVzdCBiZSBhIGZ1bmN0aW9uXCIpO1xuICAgICAgICBjYltNQVRDSF0gPSBtYXRjaGVyO1xuICAgICAgfVxuICAgICAgY2hhbi50YWtlKGNiKTtcbiAgICB9XG4gIH0pO1xufSIsIi8vIOW6p+aomeezu+OBruODqeOCpOODluODqeODqlxyXG5cclxuZXhwb3J0IGNvbnN0IFphaHlvID0ge1xyXG4gICAgLy8g44Km44Kj44Oz44OJ44Km44K144Kk44K677yI5bmF44CB6auY44GV77yJ44KS6L+U44GZXHJcbiAgICB3aW5kb3dBcmVhOiAoKSA9PiB7XHJcbiAgICAgICAgbGV0IHJldDtcclxuXHJcbiAgICAgICAgcmV0ID0ge1xyXG4gICAgICAgICAgICB3OiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGgsXHJcbiAgICAgICAgICAgIGg6IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQsXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHJldDtcclxuICAgIH0sXHJcblxyXG4gICAgLy8g5bem5LiK44KS5Z+654K544Go44GZ44KL5bqn5qiZWOOBjOOAgeWPs+S4iuOCkuWfuueCueOBqOOBl+OBn+WgtOWQiOOBhOOBj+OBpOOBq+OBquOCi+OBi+OCkui/lOOBmVxyXG4gICAgbHVUb3J1WDogKHgsIGt3KSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGt3IC0geDtcclxuICAgIH0sXHJcblxyXG4gICAgLy8g5bem5LiK44KS5Z+654K544Go44GZ44KL5bqn5qiZWeOBjOOAgeWPs+S4iuOCkuWfuueCueOBqOOBl+OBn+WgtOWQiOOBhOOBj+OBpOOBq+OBquOCi+OBi+OCkui/lOOBmVxyXG4gICAgbHVUb3J1WTogKHksIGtoKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIOWPs+S4iuOCkuWfuueCueOBqOOBmeOCi+W6p+aomVjjgYzjgIHlt6bkuIrjgpLln7rngrnjgajjgZfjgZ/loLTlkIjjgYTjgY/jgaTjgavjgarjgovjgYvjgpLov5TjgZlcclxuICAgIHJ1VG9sdVg6ICh4LCBrdykgPT4ge1xyXG4gICAgICAgIHJldHVybiBrdyAtIHg7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIOWPs+S4iuOCkuWfuueCueOBqOOBmeOCi+W6p+aomVnjgYzjgIHlt6bkuIrjgpLln7rngrnjgajjgZfjgZ/loLTlkIjjgYTjgY/jgaTjgavjgarjgovjgYvjgpLov5TjgZlcclxuICAgIHJ1VG9sdVk6ICh5LCBraCkgPT4ge1xyXG4gICAgICAgIHJldHVybiB5O1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyDlt6bkuIrluqfmqJnjgajlj7PkuIvluqfmqJnvvIjlt6bkuIrln7rngrnjga7loLTlkIjvvInjgb7jgZ/jga/lj7PkuIrluqfmqJnjgajlt6bkuIvluqfmqJnvvIjlj7PkuIrln7rngrnjga7loLTlkIjvvIlcclxuICAgIC8vIOOCkuOAgeWfuueCuVhZ44Go5bmF44O76auY44GV44Gr5aSJ5o+b44GX44Gm6L+U44GZXHJcbiAgICBjaGFuZ2VSZWN0VG9BcmVhOiAoeDEsIHkxLCB4MiwgeTIpID0+IHtcclxuICAgICAgICBsZXQgcmVjdCA9IHt9O1xyXG5cclxuICAgICAgICByZWN0LnggPSB4MTtcclxuICAgICAgICByZWN0LnkgPSB5MTtcclxuICAgICAgICByZWN0LncgPSB4MiAtIHgxO1xyXG4gICAgICAgIHJlY3QuaCA9IHkyIC0geTE7XHJcblxyXG4gICAgICAgIHJldHVybiByZWN0O1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyDlt6bkuIrluqfmqJnvvIjlt6bkuIrln7rngrnjga7loLTlkIjvvInjgb7jgZ/jga/lj7PkuIrluqfmqJnvvIjlj7PkuIrln7rngrnjga7loLTlkIjvvInjgajluYXjg7vpq5jjgZVcclxuICAgIC8vIOOCkuOAgeW3puS4iuW6p+aomeOBqOWPs+S4i+W6p+aome+8iOW3puS4iuWfuueCueOBruWgtOWQiO+8ieOBvuOBn+OBr+WPs+S4iuW6p+aomeOBqOW3puS4i+W6p+aome+8iOWPs+S4iuWfuueCueOBruWgtOWQiO+8ieOBq1xyXG4gICAgLy8g5aSJ5o+b44GX44Gm6L+U44GZXHJcbiAgICBjaGFuZ2VBcmVhVG9SZWN0OiAoeCwgeSwgdywgaCkgPT4ge1xyXG4gICAgICAgIGxldCByZWN0ID0ge307XHJcblxyXG4gICAgICAgIHJlY3QueDEgPSB4O1xyXG4gICAgICAgIHJlY3QueTEgPSB5O1xyXG4gICAgICAgIHJlY3QueDIgPSB4ICsgdztcclxuICAgICAgICByZWN0LnkyID0geSArIGg7XHJcblxyXG4gICAgICAgIHJldHVybiByZWN0O1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyDlt6bkuIrjgpLln7rngrnjgajjgZnjgovlt6bkuIrluqfmqJnjgajlj7PkuIvluqfmqJnjgpLjgIHlj7PkuIrjgpLln7rngrnjgajjgZnjgovlj7PkuIrluqfmqJnjgajlt6bkuIvluqfmqJnjgavlpInmj5vjgZnjgotcclxuICAgIGx1VG9ydVJlY3Q6ICh4MSwgeTEsIHgyLCB5Miwga3csIGtoKSA9PiB7XHJcbiAgICAgICAgbGV0IHJlY3QgPSB7fVxyXG5cclxuICAgICAgICByZWN0LngxID0gWmFoeW8ubHVUb3J1WCh4Miwga3cpO1xyXG4gICAgICAgIHJlY3QueTEgPSBaYWh5by5sdVRvcnVZKHkxLCBraCk7XHJcbiAgICAgICAgcmVjdC54MiA9IFphaHlvLmx1VG9ydVgoeDEsIGt3KTtcclxuICAgICAgICByZWN0LnkyID0gWmFoeW8ubHVUb3J1WCh5Miwga2gpO1xyXG5cclxuICAgICAgICByZXR1cm4gcmVjdDtcclxuICAgIH0sXHJcblxyXG4gICAgLy8g5Y+z5LiK44KS5Z+654K544Go44GZ44KL5Y+z5LiK5bqn5qiZ44Go5bem5LiL5bqn5qiZ44KS44CB5bem5LiK5Z+654K544Go44GZ44KL5bem5LiK5bqn5qiZ44Go5Y+z5LiL5bqn5qiZ44Gr5aSJ5o+b44GZ44KLXHJcbiAgICBydVRvbHVSZWN0OiAoeDEsIHkxLCB4MiwgeTIsIGt3LCBraCkgPT4ge1xyXG4gICAgICAgIGxldCByZWN0ID0ge307XHJcblxyXG4gICAgICAgIHJlY3QueDEgPSBaYWh5by5ydVRvbHVYKHgyLCBrdyk7XHJcbiAgICAgICAgcmVjdC55MSA9IFphaHlvLnJ1VG9sdVkoeTEsIGtoKTtcclxuICAgICAgICByZWN0LngyID0gWmFoeW8ucnVUb2x1WCh4MSwga3cpO1xyXG4gICAgICAgIHJlY3QueTIgPSBaYWh5by5ydVRvbHVZKHkyLCBraCk7XHJcblxyXG4gICAgICAgIHJldHVybiByZWN0O1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyDlt6bkuIrjgpLln7rngrnjgajjgZnjgovlt6bkuIrluqfmqJnjgajluYXjg7vpq5jjgZXjgpLjgIHlj7PkuIrjgpLln7rngrnjgajjgZnjgovlj7PkuIrluqfmqJnjgajluYXjg7vpq5jjgZXjgavlpInmj5vjgZnjgotcclxuICAgIGx1VG9ydUFyZWE6ICh4LCB5LCB3LCBoLCBrdywga2gpID0+IHtcclxuICAgICAgICBsZXQgYXJlYSA9IHt9O1xyXG5cclxuICAgICAgICBhcmVhLnggPSBaYWh5by5sdVRvcnVYKHggKyB3LCBrdyk7XHJcbiAgICAgICAgYXJlYS55ID0gWmFoeW8ubHVUb3J1WSh5LCBraCk7XHJcbiAgICAgICAgYXJlYS53ID0gdztcclxuICAgICAgICBhcmVhLmggPSBoO1xyXG5cclxuICAgICAgICByZXR1cm4gYXJlYTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8g5Y+z5LiK44KS5Z+654K544Go44GZ44KL5Y+z5LiK5bqn5qiZ44Go5bmF44O76auY44GV44KS44CB5bem5LiK44KS5Z+654K544Go44GZ44KL5bem5LiK5bqn5qiZ44Go5bmF44O76auY44GV44Gr5aSJ5o+b44GZ44KLXHJcbiAgICBydVRvbHVBcmVhOiAoeCwgeSwgdywgaCwga3csIGtoKSA9PiB7XHJcbiAgICAgICAgbGV0IGFyZWEgPSB7fTtcclxuXHJcbiAgICAgICAgYXJlYS54ID0gWmFoeW8ucnVUb2x1WCh4ICsgdywga3cpO1xyXG4gICAgICAgIGFyZWEueSA9IFphaHlvLnJ1VG9sdVkoeSwga2gpO1xyXG4gICAgICAgIGFyZWEudyA9IHc7XHJcbiAgICAgICAgYXJlYS5oID0gaDtcclxuXHJcbiAgICAgICAgcmV0dXJuIGFyZWE7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIOW3puS4iuOCkuWfuueCueOBqOOBmeOCi+W3puS4iuW6p+aomeOBqOWPs+S4i+W6p+aomeOCkuOAgeWPs+S4iuOCkuWfuueCueOBqOOBmeOCi+WPs+S4iuW6p+aomeOBqOW5heODu+mrmOOBleOBq+WkieaPm+OBmeOCi1xyXG4gICAgbHVUb3J1UmVjdFRvQXJlYTogKHgxLCB5MSwgeDIsIHkyLCBrdywga2gpID0+IHtcclxuICAgICAgICBsZXQgYXJlYSA9IHt9O1xyXG5cclxuICAgICAgICBhcmVhLnggPSBaYWh5by5sdVRvcnVYKHgyLCBrdyk7XHJcbiAgICAgICAgYXJlYS55ID0gWmFoeW8ubHVUb3J1WSh5MSwga2gpO1xyXG4gICAgICAgIGFyZWEudyA9IHgyIC0geDE7XHJcbiAgICAgICAgYXJlYS5oID0geTIgLSB5MTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGFyZWE7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIOWPs+S4iuOCkuWfuueCueOBqOOBmeOCi+WPs+S4iuW6p+aomeOBqOW3puS4i+W6p+aomeOCkuOAgeW3puS4iuOCkuWfuueCueOBqOOBmeOCi+W3puS4iuW6p+aomeOBqOW5heODu+mrmOOBleOBq+WkieaPm+OBmeOCi1xyXG4gICAgcnVUb2x1UmVjdFRvQXJlYTogKHgxLCB5MSwgeDIsIHkyLCBrdywga2gpID0+IHtcclxuICAgICAgICBsZXQgYXJlYSA9IHt9O1xyXG5cclxuICAgICAgICBhcmVhLnggPSBaYWh5by5ydVRvbHVYKHgyLCBrdyk7XHJcbiAgICAgICAgYXJlYS55ID0gWmFoeW8ucnVUb2x1WSh5MSwga2gpO1xyXG4gICAgICAgIGFyZWEudyA9IHgyIC0geDE7XHJcbiAgICAgICAgYXJlYS5oID0geTIgLSB5MTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGFyZWE7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIOW3puS4iuOCkuWfuueCueOBqOOBmeOCi+W3puS4iuW6p+aomeOBqOW5heODu+mrmOOBleOCkuOAgeWPs+S4iuOCkuWfuueCueOBqOOBmeOCi+WPs+S4iuW6p+aomeOBqOW3puS4i+W6p+aomeOBq+WkieaPm+OBmeOCi1xyXG4gICAgbHVUb3J1QXJlYVRvUmVjdDogKHgsIHksIHcsIGgsIGt3LCBraCkgPT4ge1xyXG4gICAgICAgIGxldCByZWN0ID0ge307XHJcblxyXG4gICAgICAgIHJlY3QueDEgPSBaYWh5by5sdVRvcnVYKHggKyB3LCBrdyk7XHJcbiAgICAgICAgcmVjdC55MSA9IFphaHlvLmx1VG9ydVkoeSwga2gpO1xyXG4gICAgICAgIHJlY3QueDIgPSBaYWh5by5sdVRvcnVYKHgsIGt3KTtcclxuICAgICAgICByZWN0LnkyID0gWmFoeW8ubHVUb3J1WSh5ICsgaCwga2gpO1xyXG5cclxuICAgICAgICByZXR1cm4gcmVjdDtcclxuICAgIH0sXHJcblxyXG4gICAgLy8g5Y+z5LiK44KS5Z+654K544Go44GZ44KL5Y+z5LiK5bqn5qiZ44Go5bmF44O76auY44GV44KS44CB5bem5LiK44KS5Z+654K544Go44GZ44KL5bem5LiK5bqn5qiZ44Go5Y+z5LiL5bqn5qiZ44Gr5aSJ5o+b44GZ44KLXHJcbiAgICBydVRvbHVBcmVhVG9SZWN0OiAoeCwgeSwgdywgaCwga3csIGtoKSA9PiB7XHJcbiAgICAgICAgbGV0IHJlY3QgPSB7fTtcclxuXHJcbiAgICAgICAgcmVjdC54MSA9IFphaHlvLnJ1VG9sdVgoeCArIHcsIGt3KTtcclxuICAgICAgICByZWN0LnkxID0gWmFoeW8ucnVUb2x1WSh5LCBraCk7XHJcbiAgICAgICAgcmVjdC54MiA9IFphaHlvLnJ1VG9sdVgoeCwga3cpO1xyXG4gICAgICAgIHJlY3QueTIgPSBaYWh5by5ydVRvbHVZKHkgKyBoLCBraCk7XHJcblxyXG4gICAgICAgIHJldHVybiByZWN0O1xyXG4gICAgfSxcclxufTtcclxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uIScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbnZhciBxdW90ID0gL1wiL2c7XG4vLyBCLjIuMy4yLjEgQ3JlYXRlSFRNTChzdHJpbmcsIHRhZywgYXR0cmlidXRlLCB2YWx1ZSlcbnZhciBjcmVhdGVIVE1MID0gZnVuY3Rpb24gKHN0cmluZywgdGFnLCBhdHRyaWJ1dGUsIHZhbHVlKSB7XG4gIHZhciBTID0gU3RyaW5nKGRlZmluZWQoc3RyaW5nKSk7XG4gIHZhciBwMSA9ICc8JyArIHRhZztcbiAgaWYgKGF0dHJpYnV0ZSAhPT0gJycpIHAxICs9ICcgJyArIGF0dHJpYnV0ZSArICc9XCInICsgU3RyaW5nKHZhbHVlKS5yZXBsYWNlKHF1b3QsICcmcXVvdDsnKSArICdcIic7XG4gIHJldHVybiBwMSArICc+JyArIFMgKyAnPC8nICsgdGFnICsgJz4nO1xufTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUsIGV4ZWMpIHtcbiAgdmFyIE8gPSB7fTtcbiAgT1tOQU1FXSA9IGV4ZWMoY3JlYXRlSFRNTCk7XG4gICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHZhciB0ZXN0ID0gJydbTkFNRV0oJ1wiJyk7XG4gICAgcmV0dXJuIHRlc3QgIT09IHRlc3QudG9Mb3dlckNhc2UoKSB8fCB0ZXN0LnNwbGl0KCdcIicpLmxlbmd0aCA+IDM7XG4gIH0pLCAnU3RyaW5nJywgTyk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgU1JDID0gcmVxdWlyZSgnLi9fdWlkJykoJ3NyYycpO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgJHRvU3RyaW5nID0gRnVuY3Rpb25bVE9fU1RSSU5HXTtcbnZhciBUUEwgPSAoJycgKyAkdG9TdHJpbmcpLnNwbGl0KFRPX1NUUklORyk7XG5cbnJlcXVpcmUoJy4vX2NvcmUnKS5pbnNwZWN0U291cmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiAkdG9TdHJpbmcuY2FsbChpdCk7XG59O1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywga2V5LCB2YWwsIHNhZmUpIHtcbiAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2YgdmFsID09ICdmdW5jdGlvbic7XG4gIGlmIChpc0Z1bmN0aW9uKSBoYXModmFsLCAnbmFtZScpIHx8IGhpZGUodmFsLCAnbmFtZScsIGtleSk7XG4gIGlmIChPW2tleV0gPT09IHZhbCkgcmV0dXJuO1xuICBpZiAoaXNGdW5jdGlvbikgaGFzKHZhbCwgU1JDKSB8fCBoaWRlKHZhbCwgU1JDLCBPW2tleV0gPyAnJyArIE9ba2V5XSA6IFRQTC5qb2luKFN0cmluZyhrZXkpKSk7XG4gIGlmIChPID09PSBnbG9iYWwpIHtcbiAgICBPW2tleV0gPSB2YWw7XG4gIH0gZWxzZSBpZiAoIXNhZmUpIHtcbiAgICBkZWxldGUgT1trZXldO1xuICAgIGhpZGUoTywga2V5LCB2YWwpO1xuICB9IGVsc2UgaWYgKE9ba2V5XSkge1xuICAgIE9ba2V5XSA9IHZhbDtcbiAgfSBlbHNlIHtcbiAgICBoaWRlKE8sIGtleSwgdmFsKTtcbiAgfVxuLy8gYWRkIGZha2UgRnVuY3Rpb24jdG9TdHJpbmcgZm9yIGNvcnJlY3Qgd29yayB3cmFwcGVkIG1ldGhvZHMgLyBjb25zdHJ1Y3RvcnMgd2l0aCBtZXRob2RzIGxpa2UgTG9EYXNoIGlzTmF0aXZlXG59KShGdW5jdGlvbi5wcm90b3R5cGUsIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nICYmIHRoaXNbU1JDXSB8fCAkdG9TdHJpbmcuY2FsbCh0aGlzKTtcbn0pO1xuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRQLmYob2JqZWN0LCBrZXksIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuIiwiLy8gMTkuMS4yLjkgLyAxNS4yLjMuMiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gKE8pIHtcbiAgTyA9IHRvT2JqZWN0KE8pO1xuICBpZiAoaGFzKE8sIElFX1BST1RPKSkgcmV0dXJuIE9bSUVfUFJPVE9dO1xuICBpZiAodHlwZW9mIE8uY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBPLmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgfSByZXR1cm4gTyBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvIDogbnVsbDtcbn07XG4iLCJ2YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xudmFyIGdPUEQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZ09QRCA6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKSB7XG4gIE8gPSB0b0lPYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBnT1BEKE8sIFApO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKGhhcyhPLCBQKSkgcmV0dXJuIGNyZWF0ZURlc2MoIXBJRS5mLmNhbGwoTywgUCksIE9bUF0pO1xufTtcbiIsIi8vIHRvIGluZGV4ZWQgb2JqZWN0LCB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCJ2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUkVBQ1RfRUxFTUVOVF9UWVBFID0gKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiZcbiAgICBTeW1ib2wuZm9yICYmXG4gICAgU3ltYm9sLmZvcigncmVhY3QuZWxlbWVudCcpKSB8fFxuICAgIDB4ZWFjNztcblxuICB2YXIgaXNWYWxpZEVsZW1lbnQgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICByZXR1cm4gdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiZcbiAgICAgIG9iamVjdCAhPT0gbnVsbCAmJlxuICAgICAgb2JqZWN0LiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEU7XG4gIH07XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShpc1ZhbGlkRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobWV0aG9kLCBhcmcpIHtcbiAgcmV0dXJuICEhbWV0aG9kICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1jYWxsXG4gICAgYXJnID8gbWV0aG9kLmNhbGwobnVsbCwgZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCAxKSA6IG1ldGhvZC5jYWxsKG51bGwpO1xuICB9KTtcbn07XG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoaXQpLnNsaWNlKDgsIC0xKTtcbn07XG4iLCIvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iLCJ2YXIgY29yZSA9IG1vZHVsZS5leHBvcnRzID0geyB2ZXJzaW9uOiAnMi41LjYnIH07XG5pZiAodHlwZW9mIF9fZSA9PSAnbnVtYmVyJykgX19lID0gY29yZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwiLy9cclxuLy8g44OH44OV44Kh44Kk44Oz5a6a576pXHJcbi8vXHJcblxyXG5leHBvcnQgY29uc3QgRGVmaW5lID0ge1xyXG4gICAgLy8g44OZ44O844K5U1ZH44Kk44Oh44O844K444K144Kk44K6XHJcbiAgICBzdmdpbWFnZXNpemU6IHtcclxuICAgICAgICB3aWR0aDogIDg0MixcclxuICAgICAgICBoZWlnaHQ6IDExOTIsXHJcbiAgICB9LFxyXG5cclxuICAgIC8vIOOCsOODquODg+ODieOCteOCpOOCulxyXG4gICAgZ3JpZDoge1xyXG4gICAgICAgIHdpZHRoOiAxMCxcclxuICAgICAgICBoZWlnaHQ6IDEwLFxyXG4gICAgfSxcclxuXHJcbiAgICAvLyDjg4/jg7Pjg4njg6vjgrXjgqTjgrpcclxuICAgIGhhbmRsZToge1xyXG4gICAgICAgIHdpZHRoOiAxMCxcclxuICAgICAgICBoZWlnaHQ6IDEwLFxyXG4gICAgfSxcclxufTtcclxuIiwiLy8gMCAtPiBBcnJheSNmb3JFYWNoXG4vLyAxIC0+IEFycmF5I21hcFxuLy8gMiAtPiBBcnJheSNmaWx0ZXJcbi8vIDMgLT4gQXJyYXkjc29tZVxuLy8gNCAtPiBBcnJheSNldmVyeVxuLy8gNSAtPiBBcnJheSNmaW5kXG4vLyA2IC0+IEFycmF5I2ZpbmRJbmRleFxudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGFzYyA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChUWVBFLCAkY3JlYXRlKSB7XG4gIHZhciBJU19NQVAgPSBUWVBFID09IDE7XG4gIHZhciBJU19GSUxURVIgPSBUWVBFID09IDI7XG4gIHZhciBJU19TT01FID0gVFlQRSA9PSAzO1xuICB2YXIgSVNfRVZFUlkgPSBUWVBFID09IDQ7XG4gIHZhciBJU19GSU5EX0lOREVYID0gVFlQRSA9PSA2O1xuICB2YXIgTk9fSE9MRVMgPSBUWVBFID09IDUgfHwgSVNfRklORF9JTkRFWDtcbiAgdmFyIGNyZWF0ZSA9ICRjcmVhdGUgfHwgYXNjO1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBjYWxsYmFja2ZuLCB0aGF0KSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCgkdGhpcyk7XG4gICAgdmFyIHNlbGYgPSBJT2JqZWN0KE8pO1xuICAgIHZhciBmID0gY3R4KGNhbGxiYWNrZm4sIHRoYXQsIDMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChzZWxmLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgcmVzdWx0ID0gSVNfTUFQID8gY3JlYXRlKCR0aGlzLCBsZW5ndGgpIDogSVNfRklMVEVSID8gY3JlYXRlKCR0aGlzLCAwKSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgdmFsLCByZXM7XG4gICAgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChOT19IT0xFUyB8fCBpbmRleCBpbiBzZWxmKSB7XG4gICAgICB2YWwgPSBzZWxmW2luZGV4XTtcbiAgICAgIHJlcyA9IGYodmFsLCBpbmRleCwgTyk7XG4gICAgICBpZiAoVFlQRSkge1xuICAgICAgICBpZiAoSVNfTUFQKSByZXN1bHRbaW5kZXhdID0gcmVzOyAgIC8vIG1hcFxuICAgICAgICBlbHNlIGlmIChyZXMpIHN3aXRjaCAoVFlQRSkge1xuICAgICAgICAgIGNhc2UgMzogcmV0dXJuIHRydWU7ICAgICAgICAgICAgIC8vIHNvbWVcbiAgICAgICAgICBjYXNlIDU6IHJldHVybiB2YWw7ICAgICAgICAgICAgICAvLyBmaW5kXG4gICAgICAgICAgY2FzZSA2OiByZXR1cm4gaW5kZXg7ICAgICAgICAgICAgLy8gZmluZEluZGV4XG4gICAgICAgICAgY2FzZSAyOiByZXN1bHQucHVzaCh2YWwpOyAgICAgICAgLy8gZmlsdGVyXG4gICAgICAgIH0gZWxzZSBpZiAoSVNfRVZFUlkpIHJldHVybiBmYWxzZTsgLy8gZXZlcnlcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIElTX0ZJTkRfSU5ERVggPyAtMSA6IElTX1NPTUUgfHwgSVNfRVZFUlkgPyBJU19FVkVSWSA6IHJlc3VsdDtcbiAgfTtcbn07XG4iLCIvLyBtb3N0IE9iamVjdCBtZXRob2RzIGJ5IEVTNiBzaG91bGQgYWNjZXB0IHByaW1pdGl2ZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVksIGV4ZWMpIHtcbiAgdmFyIGZuID0gKGNvcmUuT2JqZWN0IHx8IHt9KVtLRVldIHx8IE9iamVjdFtLRVldO1xuICB2YXIgZXhwID0ge307XG4gIGV4cFtLRVldID0gZXhlYyhmbik7XG4gICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkgeyBmbigxKTsgfSksICdPYmplY3QnLCBleHApO1xufTtcbiIsIi8vIDcuMS40IFRvSW50ZWdlclxudmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG59O1xuIiwiLy8gNy4yLjEgUmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudClcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uICBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIi8vIDcuMS4xIFRvUHJpbWl0aXZlKGlucHV0IFssIFByZWZlcnJlZFR5cGVdKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG4vLyBpbnN0ZWFkIG9mIHRoZSBFUzYgc3BlYyB2ZXJzaW9uLCB3ZSBkaWRuJ3QgaW1wbGVtZW50IEBAdG9QcmltaXRpdmUgY2FzZVxuLy8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBTKSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gaXQ7XG4gIHZhciBmbiwgdmFsO1xuICBpZiAoUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKHR5cGVvZiAoZm4gPSBpdC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICghUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xufTtcbiIsInZhciBNYXAgPSByZXF1aXJlKCcuL2VzNi5tYXAnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ21ldGFkYXRhJyk7XG52YXIgc3RvcmUgPSBzaGFyZWQuc3RvcmUgfHwgKHNoYXJlZC5zdG9yZSA9IG5ldyAocmVxdWlyZSgnLi9lczYud2Vhay1tYXAnKSkoKSk7XG5cbnZhciBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwID0gZnVuY3Rpb24gKHRhcmdldCwgdGFyZ2V0S2V5LCBjcmVhdGUpIHtcbiAgdmFyIHRhcmdldE1ldGFkYXRhID0gc3RvcmUuZ2V0KHRhcmdldCk7XG4gIGlmICghdGFyZ2V0TWV0YWRhdGEpIHtcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICBzdG9yZS5zZXQodGFyZ2V0LCB0YXJnZXRNZXRhZGF0YSA9IG5ldyBNYXAoKSk7XG4gIH1cbiAgdmFyIGtleU1ldGFkYXRhID0gdGFyZ2V0TWV0YWRhdGEuZ2V0KHRhcmdldEtleSk7XG4gIGlmICgha2V5TWV0YWRhdGEpIHtcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB0YXJnZXRNZXRhZGF0YS5zZXQodGFyZ2V0S2V5LCBrZXlNZXRhZGF0YSA9IG5ldyBNYXAoKSk7XG4gIH0gcmV0dXJuIGtleU1ldGFkYXRhO1xufTtcbnZhciBvcmRpbmFyeUhhc093bk1ldGFkYXRhID0gZnVuY3Rpb24gKE1ldGFkYXRhS2V5LCBPLCBQKSB7XG4gIHZhciBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoTywgUCwgZmFsc2UpO1xuICByZXR1cm4gbWV0YWRhdGFNYXAgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogbWV0YWRhdGFNYXAuaGFzKE1ldGFkYXRhS2V5KTtcbn07XG52YXIgb3JkaW5hcnlHZXRPd25NZXRhZGF0YSA9IGZ1bmN0aW9uIChNZXRhZGF0YUtleSwgTywgUCkge1xuICB2YXIgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIGZhbHNlKTtcbiAgcmV0dXJuIG1ldGFkYXRhTWFwID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBtZXRhZGF0YU1hcC5nZXQoTWV0YWRhdGFLZXkpO1xufTtcbnZhciBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhID0gZnVuY3Rpb24gKE1ldGFkYXRhS2V5LCBNZXRhZGF0YVZhbHVlLCBPLCBQKSB7XG4gIGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoTywgUCwgdHJ1ZSkuc2V0KE1ldGFkYXRhS2V5LCBNZXRhZGF0YVZhbHVlKTtcbn07XG52YXIgb3JkaW5hcnlPd25NZXRhZGF0YUtleXMgPSBmdW5jdGlvbiAodGFyZ2V0LCB0YXJnZXRLZXkpIHtcbiAgdmFyIG1ldGFkYXRhTWFwID0gZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCh0YXJnZXQsIHRhcmdldEtleSwgZmFsc2UpO1xuICB2YXIga2V5cyA9IFtdO1xuICBpZiAobWV0YWRhdGFNYXApIG1ldGFkYXRhTWFwLmZvckVhY2goZnVuY3Rpb24gKF8sIGtleSkgeyBrZXlzLnB1c2goa2V5KTsgfSk7XG4gIHJldHVybiBrZXlzO1xufTtcbnZhciB0b01ldGFLZXkgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIGl0ID09ICdzeW1ib2wnID8gaXQgOiBTdHJpbmcoaXQpO1xufTtcbnZhciBleHAgPSBmdW5jdGlvbiAoTykge1xuICAkZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCBPKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzdG9yZTogc3RvcmUsXG4gIG1hcDogZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCxcbiAgaGFzOiBvcmRpbmFyeUhhc093bk1ldGFkYXRhLFxuICBnZXQ6IG9yZGluYXJ5R2V0T3duTWV0YWRhdGEsXG4gIHNldDogb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSxcbiAga2V5czogb3JkaW5hcnlPd25NZXRhZGF0YUtleXMsXG4gIGtleTogdG9NZXRhS2V5LFxuICBleHA6IGV4cFxufTtcbiIsIid1c2Ugc3RyaWN0JztcbmlmIChyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpKSB7XG4gIHZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xuICB2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG4gIHZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG4gIHZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4gIHZhciAkdHlwZWQgPSByZXF1aXJlKCcuL190eXBlZCcpO1xuICB2YXIgJGJ1ZmZlciA9IHJlcXVpcmUoJy4vX3R5cGVkLWJ1ZmZlcicpO1xuICB2YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG4gIHZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbiAgdmFyIHByb3BlcnR5RGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbiAgdmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG4gIHZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xuICB2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xuICB2YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbiAgdmFyIHRvSW5kZXggPSByZXF1aXJlKCcuL190by1pbmRleCcpO1xuICB2YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbiAgdmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG4gIHZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbiAgdmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG4gIHZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuICB2YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbiAgdmFyIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpO1xuICB2YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xuICB2YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG4gIHZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xuICB2YXIgZ2V0SXRlckZuID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTtcbiAgdmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xuICB2YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG4gIHZhciBjcmVhdGVBcnJheU1ldGhvZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKTtcbiAgdmFyIGNyZWF0ZUFycmF5SW5jbHVkZXMgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpO1xuICB2YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuICB2YXIgQXJyYXlJdGVyYXRvcnMgPSByZXF1aXJlKCcuL2VzNi5hcnJheS5pdGVyYXRvcicpO1xuICB2YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG4gIHZhciAkaXRlckRldGVjdCA9IHJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0Jyk7XG4gIHZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKTtcbiAgdmFyIGFycmF5RmlsbCA9IHJlcXVpcmUoJy4vX2FycmF5LWZpbGwnKTtcbiAgdmFyIGFycmF5Q29weVdpdGhpbiA9IHJlcXVpcmUoJy4vX2FycmF5LWNvcHktd2l0aGluJyk7XG4gIHZhciAkRFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbiAgdmFyICRHT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbiAgdmFyIGRQID0gJERQLmY7XG4gIHZhciBnT1BEID0gJEdPUEQuZjtcbiAgdmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjtcbiAgdmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG4gIHZhciBVaW50OEFycmF5ID0gZ2xvYmFsLlVpbnQ4QXJyYXk7XG4gIHZhciBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xuICB2YXIgU0hBUkVEX0JVRkZFUiA9ICdTaGFyZWQnICsgQVJSQVlfQlVGRkVSO1xuICB2YXIgQllURVNfUEVSX0VMRU1FTlQgPSAnQllURVNfUEVSX0VMRU1FTlQnO1xuICB2YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG4gIHZhciBBcnJheVByb3RvID0gQXJyYXlbUFJPVE9UWVBFXTtcbiAgdmFyICRBcnJheUJ1ZmZlciA9ICRidWZmZXIuQXJyYXlCdWZmZXI7XG4gIHZhciAkRGF0YVZpZXcgPSAkYnVmZmVyLkRhdGFWaWV3O1xuICB2YXIgYXJyYXlGb3JFYWNoID0gY3JlYXRlQXJyYXlNZXRob2QoMCk7XG4gIHZhciBhcnJheUZpbHRlciA9IGNyZWF0ZUFycmF5TWV0aG9kKDIpO1xuICB2YXIgYXJyYXlTb21lID0gY3JlYXRlQXJyYXlNZXRob2QoMyk7XG4gIHZhciBhcnJheUV2ZXJ5ID0gY3JlYXRlQXJyYXlNZXRob2QoNCk7XG4gIHZhciBhcnJheUZpbmQgPSBjcmVhdGVBcnJheU1ldGhvZCg1KTtcbiAgdmFyIGFycmF5RmluZEluZGV4ID0gY3JlYXRlQXJyYXlNZXRob2QoNik7XG4gIHZhciBhcnJheUluY2x1ZGVzID0gY3JlYXRlQXJyYXlJbmNsdWRlcyh0cnVlKTtcbiAgdmFyIGFycmF5SW5kZXhPZiA9IGNyZWF0ZUFycmF5SW5jbHVkZXMoZmFsc2UpO1xuICB2YXIgYXJyYXlWYWx1ZXMgPSBBcnJheUl0ZXJhdG9ycy52YWx1ZXM7XG4gIHZhciBhcnJheUtleXMgPSBBcnJheUl0ZXJhdG9ycy5rZXlzO1xuICB2YXIgYXJyYXlFbnRyaWVzID0gQXJyYXlJdGVyYXRvcnMuZW50cmllcztcbiAgdmFyIGFycmF5TGFzdEluZGV4T2YgPSBBcnJheVByb3RvLmxhc3RJbmRleE9mO1xuICB2YXIgYXJyYXlSZWR1Y2UgPSBBcnJheVByb3RvLnJlZHVjZTtcbiAgdmFyIGFycmF5UmVkdWNlUmlnaHQgPSBBcnJheVByb3RvLnJlZHVjZVJpZ2h0O1xuICB2YXIgYXJyYXlKb2luID0gQXJyYXlQcm90by5qb2luO1xuICB2YXIgYXJyYXlTb3J0ID0gQXJyYXlQcm90by5zb3J0O1xuICB2YXIgYXJyYXlTbGljZSA9IEFycmF5UHJvdG8uc2xpY2U7XG4gIHZhciBhcnJheVRvU3RyaW5nID0gQXJyYXlQcm90by50b1N0cmluZztcbiAgdmFyIGFycmF5VG9Mb2NhbGVTdHJpbmcgPSBBcnJheVByb3RvLnRvTG9jYWxlU3RyaW5nO1xuICB2YXIgSVRFUkFUT1IgPSB3a3MoJ2l0ZXJhdG9yJyk7XG4gIHZhciBUQUcgPSB3a3MoJ3RvU3RyaW5nVGFnJyk7XG4gIHZhciBUWVBFRF9DT05TVFJVQ1RPUiA9IHVpZCgndHlwZWRfY29uc3RydWN0b3InKTtcbiAgdmFyIERFRl9DT05TVFJVQ1RPUiA9IHVpZCgnZGVmX2NvbnN0cnVjdG9yJyk7XG4gIHZhciBBTExfQ09OU1RSVUNUT1JTID0gJHR5cGVkLkNPTlNUUjtcbiAgdmFyIFRZUEVEX0FSUkFZID0gJHR5cGVkLlRZUEVEO1xuICB2YXIgVklFVyA9ICR0eXBlZC5WSUVXO1xuICB2YXIgV1JPTkdfTEVOR1RIID0gJ1dyb25nIGxlbmd0aCEnO1xuXG4gIHZhciAkbWFwID0gY3JlYXRlQXJyYXlNZXRob2QoMSwgZnVuY3Rpb24gKE8sIGxlbmd0aCkge1xuICAgIHJldHVybiBhbGxvY2F0ZShzcGVjaWVzQ29uc3RydWN0b3IoTywgT1tERUZfQ09OU1RSVUNUT1JdKSwgbGVuZ3RoKTtcbiAgfSk7XG5cbiAgdmFyIExJVFRMRV9FTkRJQU4gPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KG5ldyBVaW50MTZBcnJheShbMV0pLmJ1ZmZlcilbMF0gPT09IDE7XG4gIH0pO1xuXG4gIHZhciBGT1JDRURfU0VUID0gISFVaW50OEFycmF5ICYmICEhVWludDhBcnJheVtQUk9UT1RZUEVdLnNldCAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3IFVpbnQ4QXJyYXkoMSkuc2V0KHt9KTtcbiAgfSk7XG5cbiAgdmFyIHRvT2Zmc2V0ID0gZnVuY3Rpb24gKGl0LCBCWVRFUykge1xuICAgIHZhciBvZmZzZXQgPSB0b0ludGVnZXIoaXQpO1xuICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCAlIEJZVEVTKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQhJyk7XG4gICAgcmV0dXJuIG9mZnNldDtcbiAgfTtcblxuICB2YXIgdmFsaWRhdGUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICBpZiAoaXNPYmplY3QoaXQpICYmIFRZUEVEX0FSUkFZIGluIGl0KSByZXR1cm4gaXQ7XG4gICAgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSB0eXBlZCBhcnJheSEnKTtcbiAgfTtcblxuICB2YXIgYWxsb2NhdGUgPSBmdW5jdGlvbiAoQywgbGVuZ3RoKSB7XG4gICAgaWYgKCEoaXNPYmplY3QoQykgJiYgVFlQRURfQ09OU1RSVUNUT1IgaW4gQykpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignSXQgaXMgbm90IGEgdHlwZWQgYXJyYXkgY29uc3RydWN0b3IhJyk7XG4gICAgfSByZXR1cm4gbmV3IEMobGVuZ3RoKTtcbiAgfTtcblxuICB2YXIgc3BlY2llc0Zyb21MaXN0ID0gZnVuY3Rpb24gKE8sIGxpc3QpIHtcbiAgICByZXR1cm4gZnJvbUxpc3Qoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSksIGxpc3QpO1xuICB9O1xuXG4gIHZhciBmcm9tTGlzdCA9IGZ1bmN0aW9uIChDLCBsaXN0KSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgbGVuZ3RoID0gbGlzdC5sZW5ndGg7XG4gICAgdmFyIHJlc3VsdCA9IGFsbG9jYXRlKEMsIGxlbmd0aCk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSByZXN1bHRbaW5kZXhdID0gbGlzdFtpbmRleCsrXTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIHZhciBhZGRHZXR0ZXIgPSBmdW5jdGlvbiAoaXQsIGtleSwgaW50ZXJuYWwpIHtcbiAgICBkUChpdCwga2V5LCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZFtpbnRlcm5hbF07IH0gfSk7XG4gIH07XG5cbiAgdmFyICRmcm9tID0gZnVuY3Rpb24gZnJvbShzb3VyY2UgLyogLCBtYXBmbiwgdGhpc0FyZyAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3Qoc291cmNlKTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIG1hcGZuID0gYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkO1xuICAgIHZhciBpdGVyRm4gPSBnZXRJdGVyRm4oTyk7XG4gICAgdmFyIGksIGxlbmd0aCwgdmFsdWVzLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yO1xuICAgIGlmIChpdGVyRm4gIT0gdW5kZWZpbmVkICYmICFpc0FycmF5SXRlcihpdGVyRm4pKSB7XG4gICAgICBmb3IgKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoTyksIHZhbHVlcyA9IFtdLCBpID0gMDsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyBpKyspIHtcbiAgICAgICAgdmFsdWVzLnB1c2goc3RlcC52YWx1ZSk7XG4gICAgICB9IE8gPSB2YWx1ZXM7XG4gICAgfVxuICAgIGlmIChtYXBwaW5nICYmIGFMZW4gPiAyKSBtYXBmbiA9IGN0eChtYXBmbiwgYXJndW1lbnRzWzJdLCAyKTtcbiAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCksIHJlc3VsdCA9IGFsbG9jYXRlKHRoaXMsIGxlbmd0aCk7IGxlbmd0aCA+IGk7IGkrKykge1xuICAgICAgcmVzdWx0W2ldID0gbWFwcGluZyA/IG1hcGZuKE9baV0sIGkpIDogT1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICB2YXIgJG9mID0gZnVuY3Rpb24gb2YoLyogLi4uaXRlbXMgKi8pIHtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBhbGxvY2F0ZSh0aGlzLCBsZW5ndGgpO1xuICAgIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleCsrXTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIGlPUyBTYWZhcmkgNi54IGZhaWxzIGhlcmVcbiAgdmFyIFRPX0xPQ0FMRV9CVUcgPSAhIVVpbnQ4QXJyYXkgJiYgZmFpbHMoZnVuY3Rpb24gKCkgeyBhcnJheVRvTG9jYWxlU3RyaW5nLmNhbGwobmV3IFVpbnQ4QXJyYXkoMSkpOyB9KTtcblxuICB2YXIgJHRvTG9jYWxlU3RyaW5nID0gZnVuY3Rpb24gdG9Mb2NhbGVTdHJpbmcoKSB7XG4gICAgcmV0dXJuIGFycmF5VG9Mb2NhbGVTdHJpbmcuYXBwbHkoVE9fTE9DQUxFX0JVRyA/IGFycmF5U2xpY2UuY2FsbCh2YWxpZGF0ZSh0aGlzKSkgOiB2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgfTtcblxuICB2YXIgcHJvdG8gPSB7XG4gICAgY29weVdpdGhpbjogZnVuY3Rpb24gY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0IC8qICwgZW5kICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlDb3B5V2l0aGluLmNhbGwodmFsaWRhdGUodGhpcyksIHRhcmdldCwgc3RhcnQsIGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGV2ZXJ5OiBmdW5jdGlvbiBldmVyeShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5RXZlcnkodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZpbGw6IGZ1bmN0aW9uIGZpbGwodmFsdWUgLyogLCBzdGFydCwgZW5kICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUZpbGwuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIHNwZWNpZXNGcm9tTGlzdCh0aGlzLCBhcnJheUZpbHRlcih2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbixcbiAgICAgICAgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpKTtcbiAgICB9LFxuICAgIGZpbmQ6IGZ1bmN0aW9uIGZpbmQocHJlZGljYXRlIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5RmluZCh2YWxpZGF0ZSh0aGlzKSwgcHJlZGljYXRlLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBmaW5kSW5kZXg6IGZ1bmN0aW9uIGZpbmRJbmRleChwcmVkaWNhdGUgLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlGaW5kSW5kZXgodmFsaWRhdGUodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgYXJyYXlGb3JFYWNoKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBpbmRleE9mOiBmdW5jdGlvbiBpbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUluZGV4T2YodmFsaWRhdGUodGhpcyksIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlJbmNsdWRlcyh2YWxpZGF0ZSh0aGlzKSwgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgam9pbjogZnVuY3Rpb24gam9pbihzZXBhcmF0b3IpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5Sm9pbi5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIGxhc3RJbmRleE9mOiBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUxhc3RJbmRleE9mLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgbWFwOiBmdW5jdGlvbiBtYXAobWFwZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gJG1hcCh2YWxpZGF0ZSh0aGlzKSwgbWFwZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHJlZHVjZTogZnVuY3Rpb24gcmVkdWNlKGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5UmVkdWNlLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgcmVkdWNlUmlnaHQ6IGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5UmVkdWNlUmlnaHQuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICByZXZlcnNlOiBmdW5jdGlvbiByZXZlcnNlKCkge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgdmFyIGxlbmd0aCA9IHZhbGlkYXRlKHRoYXQpLmxlbmd0aDtcbiAgICAgIHZhciBtaWRkbGUgPSBNYXRoLmZsb29yKGxlbmd0aCAvIDIpO1xuICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgIHZhciB2YWx1ZTtcbiAgICAgIHdoaWxlIChpbmRleCA8IG1pZGRsZSkge1xuICAgICAgICB2YWx1ZSA9IHRoYXRbaW5kZXhdO1xuICAgICAgICB0aGF0W2luZGV4KytdID0gdGhhdFstLWxlbmd0aF07XG4gICAgICAgIHRoYXRbbGVuZ3RoXSA9IHZhbHVlO1xuICAgICAgfSByZXR1cm4gdGhhdDtcbiAgICB9LFxuICAgIHNvbWU6IGZ1bmN0aW9uIHNvbWUoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheVNvbWUodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKSB7XG4gICAgICByZXR1cm4gYXJyYXlTb3J0LmNhbGwodmFsaWRhdGUodGhpcyksIGNvbXBhcmVmbik7XG4gICAgfSxcbiAgICBzdWJhcnJheTogZnVuY3Rpb24gc3ViYXJyYXkoYmVnaW4sIGVuZCkge1xuICAgICAgdmFyIE8gPSB2YWxpZGF0ZSh0aGlzKTtcbiAgICAgIHZhciBsZW5ndGggPSBPLmxlbmd0aDtcbiAgICAgIHZhciAkYmVnaW4gPSB0b0Fic29sdXRlSW5kZXgoYmVnaW4sIGxlbmd0aCk7XG4gICAgICByZXR1cm4gbmV3IChzcGVjaWVzQ29uc3RydWN0b3IoTywgT1tERUZfQ09OU1RSVUNUT1JdKSkoXG4gICAgICAgIE8uYnVmZmVyLFxuICAgICAgICBPLmJ5dGVPZmZzZXQgKyAkYmVnaW4gKiBPLkJZVEVTX1BFUl9FTEVNRU5ULFxuICAgICAgICB0b0xlbmd0aCgoZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW5ndGgpKSAtICRiZWdpbilcbiAgICAgICk7XG4gICAgfVxuICB9O1xuXG4gIHZhciAkc2xpY2UgPSBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIHNwZWNpZXNGcm9tTGlzdCh0aGlzLCBhcnJheVNsaWNlLmNhbGwodmFsaWRhdGUodGhpcyksIHN0YXJ0LCBlbmQpKTtcbiAgfTtcblxuICB2YXIgJHNldCA9IGZ1bmN0aW9uIHNldChhcnJheUxpa2UgLyogLCBvZmZzZXQgKi8pIHtcbiAgICB2YWxpZGF0ZSh0aGlzKTtcbiAgICB2YXIgb2Zmc2V0ID0gdG9PZmZzZXQoYXJndW1lbnRzWzFdLCAxKTtcbiAgICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gICAgdmFyIHNyYyA9IHRvT2JqZWN0KGFycmF5TGlrZSk7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHNyYy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgaWYgKGxlbiArIG9mZnNldCA+IGxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgIHdoaWxlIChpbmRleCA8IGxlbikgdGhpc1tvZmZzZXQgKyBpbmRleF0gPSBzcmNbaW5kZXgrK107XG4gIH07XG5cbiAgdmFyICRpdGVyYXRvcnMgPSB7XG4gICAgZW50cmllczogZnVuY3Rpb24gZW50cmllcygpIHtcbiAgICAgIHJldHVybiBhcnJheUVudHJpZXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7XG4gICAgfSxcbiAgICBrZXlzOiBmdW5jdGlvbiBrZXlzKCkge1xuICAgICAgcmV0dXJuIGFycmF5S2V5cy5jYWxsKHZhbGlkYXRlKHRoaXMpKTtcbiAgICB9LFxuICAgIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKCkge1xuICAgICAgcmV0dXJuIGFycmF5VmFsdWVzLmNhbGwodmFsaWRhdGUodGhpcykpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaXNUQUluZGV4ID0gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHRhcmdldClcbiAgICAgICYmIHRhcmdldFtUWVBFRF9BUlJBWV1cbiAgICAgICYmIHR5cGVvZiBrZXkgIT0gJ3N5bWJvbCdcbiAgICAgICYmIGtleSBpbiB0YXJnZXRcbiAgICAgICYmIFN0cmluZygra2V5KSA9PSBTdHJpbmcoa2V5KTtcbiAgfTtcbiAgdmFyICRnZXREZXNjID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSB7XG4gICAgcmV0dXJuIGlzVEFJbmRleCh0YXJnZXQsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpXG4gICAgICA/IHByb3BlcnR5RGVzYygyLCB0YXJnZXRba2V5XSlcbiAgICAgIDogZ09QRCh0YXJnZXQsIGtleSk7XG4gIH07XG4gIHZhciAkc2V0RGVzYyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgaWYgKGlzVEFJbmRleCh0YXJnZXQsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpXG4gICAgICAmJiBpc09iamVjdChkZXNjKVxuICAgICAgJiYgaGFzKGRlc2MsICd2YWx1ZScpXG4gICAgICAmJiAhaGFzKGRlc2MsICdnZXQnKVxuICAgICAgJiYgIWhhcyhkZXNjLCAnc2V0JylcbiAgICAgIC8vIFRPRE86IGFkZCB2YWxpZGF0aW9uIGRlc2NyaXB0b3Igdy9vIGNhbGxpbmcgYWNjZXNzb3JzXG4gICAgICAmJiAhZGVzYy5jb25maWd1cmFibGVcbiAgICAgICYmICghaGFzKGRlc2MsICd3cml0YWJsZScpIHx8IGRlc2Mud3JpdGFibGUpXG4gICAgICAmJiAoIWhhcyhkZXNjLCAnZW51bWVyYWJsZScpIHx8IGRlc2MuZW51bWVyYWJsZSlcbiAgICApIHtcbiAgICAgIHRhcmdldFtrZXldID0gZGVzYy52YWx1ZTtcbiAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfSByZXR1cm4gZFAodGFyZ2V0LCBrZXksIGRlc2MpO1xuICB9O1xuXG4gIGlmICghQUxMX0NPTlNUUlVDVE9SUykge1xuICAgICRHT1BELmYgPSAkZ2V0RGVzYztcbiAgICAkRFAuZiA9ICRzZXREZXNjO1xuICB9XG5cbiAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhQUxMX0NPTlNUUlVDVE9SUywgJ09iamVjdCcsIHtcbiAgICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXREZXNjLFxuICAgIGRlZmluZVByb3BlcnR5OiAkc2V0RGVzY1xuICB9KTtcblxuICBpZiAoZmFpbHMoZnVuY3Rpb24gKCkgeyBhcnJheVRvU3RyaW5nLmNhbGwoe30pOyB9KSkge1xuICAgIGFycmF5VG9TdHJpbmcgPSBhcnJheVRvTG9jYWxlU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICByZXR1cm4gYXJyYXlKb2luLmNhbGwodGhpcyk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciAkVHlwZWRBcnJheVByb3RvdHlwZSQgPSByZWRlZmluZUFsbCh7fSwgcHJvdG8pO1xuICByZWRlZmluZUFsbCgkVHlwZWRBcnJheVByb3RvdHlwZSQsICRpdGVyYXRvcnMpO1xuICBoaWRlKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgSVRFUkFUT1IsICRpdGVyYXRvcnMudmFsdWVzKTtcbiAgcmVkZWZpbmVBbGwoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCB7XG4gICAgc2xpY2U6ICRzbGljZSxcbiAgICBzZXQ6ICRzZXQsXG4gICAgY29uc3RydWN0b3I6IGZ1bmN0aW9uICgpIHsgLyogbm9vcCAqLyB9LFxuICAgIHRvU3RyaW5nOiBhcnJheVRvU3RyaW5nLFxuICAgIHRvTG9jYWxlU3RyaW5nOiAkdG9Mb2NhbGVTdHJpbmdcbiAgfSk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdidWZmZXInLCAnYicpO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnl0ZU9mZnNldCcsICdvJyk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdieXRlTGVuZ3RoJywgJ2wnKTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2xlbmd0aCcsICdlJyk7XG4gIGRQKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgVEFHLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzW1RZUEVEX0FSUkFZXTsgfVxuICB9KTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LXN0YXRlbWVudHNcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBCWVRFUywgd3JhcHBlciwgQ0xBTVBFRCkge1xuICAgIENMQU1QRUQgPSAhIUNMQU1QRUQ7XG4gICAgdmFyIE5BTUUgPSBLRVkgKyAoQ0xBTVBFRCA/ICdDbGFtcGVkJyA6ICcnKSArICdBcnJheSc7XG4gICAgdmFyIEdFVFRFUiA9ICdnZXQnICsgS0VZO1xuICAgIHZhciBTRVRURVIgPSAnc2V0JyArIEtFWTtcbiAgICB2YXIgVHlwZWRBcnJheSA9IGdsb2JhbFtOQU1FXTtcbiAgICB2YXIgQmFzZSA9IFR5cGVkQXJyYXkgfHwge307XG4gICAgdmFyIFRBQyA9IFR5cGVkQXJyYXkgJiYgZ2V0UHJvdG90eXBlT2YoVHlwZWRBcnJheSk7XG4gICAgdmFyIEZPUkNFRCA9ICFUeXBlZEFycmF5IHx8ICEkdHlwZWQuQUJWO1xuICAgIHZhciBPID0ge307XG4gICAgdmFyIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBUeXBlZEFycmF5ICYmIFR5cGVkQXJyYXlbUFJPVE9UWVBFXTtcbiAgICB2YXIgZ2V0dGVyID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoYXQuX2Q7XG4gICAgICByZXR1cm4gZGF0YS52W0dFVFRFUl0oaW5kZXggKiBCWVRFUyArIGRhdGEubywgTElUVExFX0VORElBTik7XG4gICAgfTtcbiAgICB2YXIgc2V0dGVyID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGF0Ll9kO1xuICAgICAgaWYgKENMQU1QRUQpIHZhbHVlID0gKHZhbHVlID0gTWF0aC5yb3VuZCh2YWx1ZSkpIDwgMCA/IDAgOiB2YWx1ZSA+IDB4ZmYgPyAweGZmIDogdmFsdWUgJiAweGZmO1xuICAgICAgZGF0YS52W1NFVFRFUl0oaW5kZXggKiBCWVRFUyArIGRhdGEubywgdmFsdWUsIExJVFRMRV9FTkRJQU4pO1xuICAgIH07XG4gICAgdmFyIGFkZEVsZW1lbnQgPSBmdW5jdGlvbiAodGhhdCwgaW5kZXgpIHtcbiAgICAgIGRQKHRoYXQsIGluZGV4LCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBnZXR0ZXIodGhpcywgaW5kZXgpO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBzZXR0ZXIodGhpcywgaW5kZXgsIHZhbHVlKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSB7XG4gICAgICBUeXBlZEFycmF5ID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgZGF0YSwgJG9mZnNldCwgJGxlbmd0aCkge1xuICAgICAgICBhbkluc3RhbmNlKHRoYXQsIFR5cGVkQXJyYXksIE5BTUUsICdfZCcpO1xuICAgICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgICB2YXIgb2Zmc2V0ID0gMDtcbiAgICAgICAgdmFyIGJ1ZmZlciwgYnl0ZUxlbmd0aCwgbGVuZ3RoLCBrbGFzcztcbiAgICAgICAgaWYgKCFpc09iamVjdChkYXRhKSkge1xuICAgICAgICAgIGxlbmd0aCA9IHRvSW5kZXgoZGF0YSk7XG4gICAgICAgICAgYnl0ZUxlbmd0aCA9IGxlbmd0aCAqIEJZVEVTO1xuICAgICAgICAgIGJ1ZmZlciA9IG5ldyAkQXJyYXlCdWZmZXIoYnl0ZUxlbmd0aCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZGF0YSBpbnN0YW5jZW9mICRBcnJheUJ1ZmZlciB8fCAoa2xhc3MgPSBjbGFzc29mKGRhdGEpKSA9PSBBUlJBWV9CVUZGRVIgfHwga2xhc3MgPT0gU0hBUkVEX0JVRkZFUikge1xuICAgICAgICAgIGJ1ZmZlciA9IGRhdGE7XG4gICAgICAgICAgb2Zmc2V0ID0gdG9PZmZzZXQoJG9mZnNldCwgQllURVMpO1xuICAgICAgICAgIHZhciAkbGVuID0gZGF0YS5ieXRlTGVuZ3RoO1xuICAgICAgICAgIGlmICgkbGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmICgkbGVuICUgQllURVMpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICAgICAgICAgIGJ5dGVMZW5ndGggPSAkbGVuIC0gb2Zmc2V0O1xuICAgICAgICAgICAgaWYgKGJ5dGVMZW5ndGggPCAwKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJ5dGVMZW5ndGggPSB0b0xlbmd0aCgkbGVuZ3RoKSAqIEJZVEVTO1xuICAgICAgICAgICAgaWYgKGJ5dGVMZW5ndGggKyBvZmZzZXQgPiAkbGVuKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxlbmd0aCA9IGJ5dGVMZW5ndGggLyBCWVRFUztcbiAgICAgICAgfSBlbHNlIGlmIChUWVBFRF9BUlJBWSBpbiBkYXRhKSB7XG4gICAgICAgICAgcmV0dXJuIGZyb21MaXN0KFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiAkZnJvbS5jYWxsKFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGhpZGUodGhhdCwgJ19kJywge1xuICAgICAgICAgIGI6IGJ1ZmZlcixcbiAgICAgICAgICBvOiBvZmZzZXQsXG4gICAgICAgICAgbDogYnl0ZUxlbmd0aCxcbiAgICAgICAgICBlOiBsZW5ndGgsXG4gICAgICAgICAgdjogbmV3ICREYXRhVmlldyhidWZmZXIpXG4gICAgICAgIH0pO1xuICAgICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIGFkZEVsZW1lbnQodGhhdCwgaW5kZXgrKyk7XG4gICAgICB9KTtcbiAgICAgIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBUeXBlZEFycmF5W1BST1RPVFlQRV0gPSBjcmVhdGUoJFR5cGVkQXJyYXlQcm90b3R5cGUkKTtcbiAgICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgJ2NvbnN0cnVjdG9yJywgVHlwZWRBcnJheSk7XG4gICAgfSBlbHNlIGlmICghZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgVHlwZWRBcnJheSgxKTtcbiAgICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgbmV3IFR5cGVkQXJyYXkoLTEpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIH0pIHx8ICEkaXRlckRldGVjdChmdW5jdGlvbiAoaXRlcikge1xuICAgICAgbmV3IFR5cGVkQXJyYXkoKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIG5ldyBUeXBlZEFycmF5KG51bGwpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgICAgbmV3IFR5cGVkQXJyYXkoMS41KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIG5ldyBUeXBlZEFycmF5KGl0ZXIpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIH0sIHRydWUpKSB7XG4gICAgICBUeXBlZEFycmF5ID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgZGF0YSwgJG9mZnNldCwgJGxlbmd0aCkge1xuICAgICAgICBhbkluc3RhbmNlKHRoYXQsIFR5cGVkQXJyYXksIE5BTUUpO1xuICAgICAgICB2YXIga2xhc3M7XG4gICAgICAgIC8vIGB3c2AgbW9kdWxlIGJ1ZywgdGVtcG9yYXJpbHkgcmVtb3ZlIHZhbGlkYXRpb24gbGVuZ3RoIGZvciBVaW50OEFycmF5XG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJzb2NrZXRzL3dzL3B1bGwvNjQ1XG4gICAgICAgIGlmICghaXNPYmplY3QoZGF0YSkpIHJldHVybiBuZXcgQmFzZSh0b0luZGV4KGRhdGEpKTtcbiAgICAgICAgaWYgKGRhdGEgaW5zdGFuY2VvZiAkQXJyYXlCdWZmZXIgfHwgKGtsYXNzID0gY2xhc3NvZihkYXRhKSkgPT0gQVJSQVlfQlVGRkVSIHx8IGtsYXNzID09IFNIQVJFRF9CVUZGRVIpIHtcbiAgICAgICAgICByZXR1cm4gJGxlbmd0aCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IG5ldyBCYXNlKGRhdGEsIHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKSwgJGxlbmd0aClcbiAgICAgICAgICAgIDogJG9mZnNldCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgID8gbmV3IEJhc2UoZGF0YSwgdG9PZmZzZXQoJG9mZnNldCwgQllURVMpKVxuICAgICAgICAgICAgICA6IG5ldyBCYXNlKGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChUWVBFRF9BUlJBWSBpbiBkYXRhKSByZXR1cm4gZnJvbUxpc3QoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICAgIHJldHVybiAkZnJvbS5jYWxsKFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgfSk7XG4gICAgICBhcnJheUZvckVhY2goVEFDICE9PSBGdW5jdGlvbi5wcm90b3R5cGUgPyBnT1BOKEJhc2UpLmNvbmNhdChnT1BOKFRBQykpIDogZ09QTihCYXNlKSwgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoIShrZXkgaW4gVHlwZWRBcnJheSkpIGhpZGUoVHlwZWRBcnJheSwga2V5LCBCYXNlW2tleV0pO1xuICAgICAgfSk7XG4gICAgICBUeXBlZEFycmF5W1BST1RPVFlQRV0gPSBUeXBlZEFycmF5UHJvdG90eXBlO1xuICAgICAgaWYgKCFMSUJSQVJZKSBUeXBlZEFycmF5UHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVHlwZWRBcnJheTtcbiAgICB9XG4gICAgdmFyICRuYXRpdmVJdGVyYXRvciA9IFR5cGVkQXJyYXlQcm90b3R5cGVbSVRFUkFUT1JdO1xuICAgIHZhciBDT1JSRUNUX0lURVJfTkFNRSA9ICEhJG5hdGl2ZUl0ZXJhdG9yXG4gICAgICAmJiAoJG5hdGl2ZUl0ZXJhdG9yLm5hbWUgPT0gJ3ZhbHVlcycgfHwgJG5hdGl2ZUl0ZXJhdG9yLm5hbWUgPT0gdW5kZWZpbmVkKTtcbiAgICB2YXIgJGl0ZXJhdG9yID0gJGl0ZXJhdG9ycy52YWx1ZXM7XG4gICAgaGlkZShUeXBlZEFycmF5LCBUWVBFRF9DT05TVFJVQ1RPUiwgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBUWVBFRF9BUlJBWSwgTkFNRSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBWSUVXLCB0cnVlKTtcbiAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIERFRl9DT05TVFJVQ1RPUiwgVHlwZWRBcnJheSk7XG5cbiAgICBpZiAoQ0xBTVBFRCA/IG5ldyBUeXBlZEFycmF5KDEpW1RBR10gIT0gTkFNRSA6ICEoVEFHIGluIFR5cGVkQXJyYXlQcm90b3R5cGUpKSB7XG4gICAgICBkUChUeXBlZEFycmF5UHJvdG90eXBlLCBUQUcsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBOQU1FOyB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBPW05BTUVdID0gVHlwZWRBcnJheTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKFR5cGVkQXJyYXkgIT0gQmFzZSksIE8pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlMsIE5BTUUsIHtcbiAgICAgIEJZVEVTX1BFUl9FTEVNRU5UOiBCWVRFU1xuICAgIH0pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7IEJhc2Uub2YuY2FsbChUeXBlZEFycmF5LCAxKTsgfSksIE5BTUUsIHtcbiAgICAgIGZyb206ICRmcm9tLFxuICAgICAgb2Y6ICRvZlxuICAgIH0pO1xuXG4gICAgaWYgKCEoQllURVNfUEVSX0VMRU1FTlQgaW4gVHlwZWRBcnJheVByb3RvdHlwZSkpIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgQllURVNfUEVSX0VMRU1FTlQsIEJZVEVTKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QLCBOQU1FLCBwcm90byk7XG5cbiAgICBzZXRTcGVjaWVzKE5BTUUpO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBGT1JDRURfU0VULCBOQU1FLCB7IHNldDogJHNldCB9KTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIUNPUlJFQ1RfSVRFUl9OQU1FLCBOQU1FLCAkaXRlcmF0b3JzKTtcblxuICAgIGlmICghTElCUkFSWSAmJiBUeXBlZEFycmF5UHJvdG90eXBlLnRvU3RyaW5nICE9IGFycmF5VG9TdHJpbmcpIFR5cGVkQXJyYXlQcm90b3R5cGUudG9TdHJpbmcgPSBhcnJheVRvU3RyaW5nO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICBuZXcgVHlwZWRBcnJheSgxKS5zbGljZSgpO1xuICAgIH0pLCBOQU1FLCB7IHNsaWNlOiAkc2xpY2UgfSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gWzEsIDJdLnRvTG9jYWxlU3RyaW5nKCkgIT0gbmV3IFR5cGVkQXJyYXkoWzEsIDJdKS50b0xvY2FsZVN0cmluZygpO1xuICAgIH0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICBUeXBlZEFycmF5UHJvdG90eXBlLnRvTG9jYWxlU3RyaW5nLmNhbGwoWzEsIDJdKTtcbiAgICB9KSksIE5BTUUsIHsgdG9Mb2NhbGVTdHJpbmc6ICR0b0xvY2FsZVN0cmluZyB9KTtcblxuICAgIEl0ZXJhdG9yc1tOQU1FXSA9IENPUlJFQ1RfSVRFUl9OQU1FID8gJG5hdGl2ZUl0ZXJhdG9yIDogJGl0ZXJhdG9yO1xuICAgIGlmICghTElCUkFSWSAmJiAhQ09SUkVDVF9JVEVSX05BTUUpIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgSVRFUkFUT1IsICRpdGVyYXRvcik7XG4gIH07XG59IGVsc2UgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG4iLCJpbXBvcnQgeyBrVHJ1ZSwgbm9vcCB9IGZyb20gJy4vdXRpbHMnO1xuXG5leHBvcnQgdmFyIEJVRkZFUl9PVkVSRkxPVyA9IFwiQ2hhbm5lbCdzIEJ1ZmZlciBvdmVyZmxvdyFcIjtcblxudmFyIE9OX09WRVJGTE9XX1RIUk9XID0gMTtcbnZhciBPTl9PVkVSRkxPV19EUk9QID0gMjtcbnZhciBPTl9PVkVSRkxPV19TTElERSA9IDM7XG52YXIgT05fT1ZFUkZMT1dfRVhQQU5EID0gNDtcblxudmFyIHplcm9CdWZmZXIgPSB7IGlzRW1wdHk6IGtUcnVlLCBwdXQ6IG5vb3AsIHRha2U6IG5vb3AgfTtcblxuZnVuY3Rpb24gcmluZ0J1ZmZlcigpIHtcbiAgdmFyIGxpbWl0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAxMDtcbiAgdmFyIG92ZXJmbG93QWN0aW9uID0gYXJndW1lbnRzWzFdO1xuXG4gIHZhciBhcnIgPSBuZXcgQXJyYXkobGltaXQpO1xuICB2YXIgbGVuZ3RoID0gMDtcbiAgdmFyIHB1c2hJbmRleCA9IDA7XG4gIHZhciBwb3BJbmRleCA9IDA7XG5cbiAgdmFyIHB1c2ggPSBmdW5jdGlvbiBwdXNoKGl0KSB7XG4gICAgYXJyW3B1c2hJbmRleF0gPSBpdDtcbiAgICBwdXNoSW5kZXggPSAocHVzaEluZGV4ICsgMSkgJSBsaW1pdDtcbiAgICBsZW5ndGgrKztcbiAgfTtcblxuICB2YXIgdGFrZSA9IGZ1bmN0aW9uIHRha2UoKSB7XG4gICAgaWYgKGxlbmd0aCAhPSAwKSB7XG4gICAgICB2YXIgaXQgPSBhcnJbcG9wSW5kZXhdO1xuICAgICAgYXJyW3BvcEluZGV4XSA9IG51bGw7XG4gICAgICBsZW5ndGgtLTtcbiAgICAgIHBvcEluZGV4ID0gKHBvcEluZGV4ICsgMSkgJSBsaW1pdDtcbiAgICAgIHJldHVybiBpdDtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGZsdXNoID0gZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgdmFyIGl0ZW1zID0gW107XG4gICAgd2hpbGUgKGxlbmd0aCkge1xuICAgICAgaXRlbXMucHVzaCh0YWtlKCkpO1xuICAgIH1cbiAgICByZXR1cm4gaXRlbXM7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBpc0VtcHR5OiBmdW5jdGlvbiBpc0VtcHR5KCkge1xuICAgICAgcmV0dXJuIGxlbmd0aCA9PSAwO1xuICAgIH0sXG4gICAgcHV0OiBmdW5jdGlvbiBwdXQoaXQpIHtcbiAgICAgIGlmIChsZW5ndGggPCBsaW1pdCkge1xuICAgICAgICBwdXNoKGl0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBkb3VibGVkTGltaXQgPSB2b2lkIDA7XG4gICAgICAgIHN3aXRjaCAob3ZlcmZsb3dBY3Rpb24pIHtcbiAgICAgICAgICBjYXNlIE9OX09WRVJGTE9XX1RIUk9XOlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKEJVRkZFUl9PVkVSRkxPVyk7XG4gICAgICAgICAgY2FzZSBPTl9PVkVSRkxPV19TTElERTpcbiAgICAgICAgICAgIGFycltwdXNoSW5kZXhdID0gaXQ7XG4gICAgICAgICAgICBwdXNoSW5kZXggPSAocHVzaEluZGV4ICsgMSkgJSBsaW1pdDtcbiAgICAgICAgICAgIHBvcEluZGV4ID0gcHVzaEluZGV4O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBPTl9PVkVSRkxPV19FWFBBTkQ6XG4gICAgICAgICAgICBkb3VibGVkTGltaXQgPSAyICogbGltaXQ7XG5cbiAgICAgICAgICAgIGFyciA9IGZsdXNoKCk7XG5cbiAgICAgICAgICAgIGxlbmd0aCA9IGFyci5sZW5ndGg7XG4gICAgICAgICAgICBwdXNoSW5kZXggPSBhcnIubGVuZ3RoO1xuICAgICAgICAgICAgcG9wSW5kZXggPSAwO1xuXG4gICAgICAgICAgICBhcnIubGVuZ3RoID0gZG91YmxlZExpbWl0O1xuICAgICAgICAgICAgbGltaXQgPSBkb3VibGVkTGltaXQ7XG5cbiAgICAgICAgICAgIHB1c2goaXQpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAvLyBEUk9QXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHRha2U6IHRha2UsXG4gICAgZmx1c2g6IGZsdXNoXG4gIH07XG59XG5cbmV4cG9ydCB2YXIgYnVmZmVycyA9IHtcbiAgbm9uZTogZnVuY3Rpb24gbm9uZSgpIHtcbiAgICByZXR1cm4gemVyb0J1ZmZlcjtcbiAgfSxcbiAgZml4ZWQ6IGZ1bmN0aW9uIGZpeGVkKGxpbWl0KSB7XG4gICAgcmV0dXJuIHJpbmdCdWZmZXIobGltaXQsIE9OX09WRVJGTE9XX1RIUk9XKTtcbiAgfSxcbiAgZHJvcHBpbmc6IGZ1bmN0aW9uIGRyb3BwaW5nKGxpbWl0KSB7XG4gICAgcmV0dXJuIHJpbmdCdWZmZXIobGltaXQsIE9OX09WRVJGTE9XX0RST1ApO1xuICB9LFxuICBzbGlkaW5nOiBmdW5jdGlvbiBzbGlkaW5nKGxpbWl0KSB7XG4gICAgcmV0dXJuIHJpbmdCdWZmZXIobGltaXQsIE9OX09WRVJGTE9XX1NMSURFKTtcbiAgfSxcbiAgZXhwYW5kaW5nOiBmdW5jdGlvbiBleHBhbmRpbmcoaW5pdGlhbFNpemUpIHtcbiAgICByZXR1cm4gcmluZ0J1ZmZlcihpbml0aWFsU2l6ZSwgT05fT1ZFUkZMT1dfRVhQQU5EKTtcbiAgfVxufTsiLCIvLyAyMi4xLjMuMzEgQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG52YXIgVU5TQ09QQUJMRVMgPSByZXF1aXJlKCcuL193a3MnKSgndW5zY29wYWJsZXMnKTtcbnZhciBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuaWYgKEFycmF5UHJvdG9bVU5TQ09QQUJMRVNdID09IHVuZGVmaW5lZCkgcmVxdWlyZSgnLi9faGlkZScpKEFycmF5UHJvdG8sIFVOU0NPUEFCTEVTLCB7fSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgQXJyYXlQcm90b1tVTlNDT1BBQkxFU11ba2V5XSA9IHRydWU7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcbiIsInZhciBNRVRBID0gcmVxdWlyZSgnLi9fdWlkJykoJ21ldGEnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHNldERlc2MgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGlkID0gMDtcbnZhciBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlIHx8IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRydWU7XG59O1xudmFyIEZSRUVaRSA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGlzRXh0ZW5zaWJsZShPYmplY3QucHJldmVudEV4dGVuc2lvbnMoe30pKTtcbn0pO1xudmFyIHNldE1ldGEgPSBmdW5jdGlvbiAoaXQpIHtcbiAgc2V0RGVzYyhpdCwgTUVUQSwgeyB2YWx1ZToge1xuICAgIGk6ICdPJyArICsraWQsIC8vIG9iamVjdCBJRFxuICAgIHc6IHt9ICAgICAgICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gfSk7XG59O1xudmFyIGZhc3RLZXkgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICAvLyByZXR1cm4gcHJpbWl0aXZlIHdpdGggcHJlZml4XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnID8gaXQgOiAodHlwZW9mIGl0ID09ICdzdHJpbmcnID8gJ1MnIDogJ1AnKSArIGl0O1xuICBpZiAoIWhhcyhpdCwgTUVUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuICdGJztcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmICghY3JlYXRlKSByZXR1cm4gJ0UnO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YShpdCk7XG4gIC8vIHJldHVybiBvYmplY3QgSURcbiAgfSByZXR1cm4gaXRbTUVUQV0uaTtcbn07XG52YXIgZ2V0V2VhayA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIGlmICghaGFzKGl0LCBNRVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmICghY3JlYXRlKSByZXR1cm4gZmFsc2U7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIGhhc2ggd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSByZXR1cm4gaXRbTUVUQV0udztcbn07XG4vLyBhZGQgbWV0YWRhdGEgb24gZnJlZXplLWZhbWlseSBtZXRob2RzIGNhbGxpbmdcbnZhciBvbkZyZWV6ZSA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoRlJFRVpFICYmIG1ldGEuTkVFRCAmJiBpc0V4dGVuc2libGUoaXQpICYmICFoYXMoaXQsIE1FVEEpKSBzZXRNZXRhKGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbnZhciBtZXRhID0gbW9kdWxlLmV4cG9ydHMgPSB7XG4gIEtFWTogTUVUQSxcbiAgTkVFRDogZmFsc2UsXG4gIGZhc3RLZXk6IGZhc3RLZXksXG4gIGdldFdlYWs6IGdldFdlYWssXG4gIG9uRnJlZXplOiBvbkZyZWV6ZVxufTtcbiIsImltcG9ydCB7IGlzLCBtYWtlSXRlcmF0b3IgfSBmcm9tICcuLi91dGlscyc7XG5cbnZhciBkb25lID0geyBkb25lOiB0cnVlLCB2YWx1ZTogdW5kZWZpbmVkIH07XG5leHBvcnQgdmFyIHFFbmQgPSB7fTtcblxuZXhwb3J0IGZ1bmN0aW9uIHNhZmVOYW1lKHBhdHRlcm5PckNoYW5uZWwpIHtcbiAgaWYgKGlzLmNoYW5uZWwocGF0dGVybk9yQ2hhbm5lbCkpIHtcbiAgICByZXR1cm4gJ2NoYW5uZWwnO1xuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocGF0dGVybk9yQ2hhbm5lbCkpIHtcbiAgICByZXR1cm4gU3RyaW5nKHBhdHRlcm5PckNoYW5uZWwubWFwKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgcmV0dXJuIFN0cmluZyhlbnRyeSk7XG4gICAgfSkpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBTdHJpbmcocGF0dGVybk9yQ2hhbm5lbCk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZnNtSXRlcmF0b3IoZnNtLCBxMCkge1xuICB2YXIgbmFtZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogJ2l0ZXJhdG9yJztcblxuICB2YXIgdXBkYXRlU3RhdGUgPSB2b2lkIDAsXG4gICAgICBxTmV4dCA9IHEwO1xuXG4gIGZ1bmN0aW9uIG5leHQoYXJnLCBlcnJvcikge1xuICAgIGlmIChxTmV4dCA9PT0gcUVuZCkge1xuICAgICAgcmV0dXJuIGRvbmU7XG4gICAgfVxuXG4gICAgaWYgKGVycm9yKSB7XG4gICAgICBxTmV4dCA9IHFFbmQ7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9IGVsc2Uge1xuICAgICAgdXBkYXRlU3RhdGUgJiYgdXBkYXRlU3RhdGUoYXJnKTtcblxuICAgICAgdmFyIF9mc20kcU5leHQgPSBmc21bcU5leHRdKCksXG4gICAgICAgICAgcSA9IF9mc20kcU5leHRbMF0sXG4gICAgICAgICAgb3V0cHV0ID0gX2ZzbSRxTmV4dFsxXSxcbiAgICAgICAgICBfdXBkYXRlU3RhdGUgPSBfZnNtJHFOZXh0WzJdO1xuXG4gICAgICBxTmV4dCA9IHE7XG4gICAgICB1cGRhdGVTdGF0ZSA9IF91cGRhdGVTdGF0ZTtcbiAgICAgIHJldHVybiBxTmV4dCA9PT0gcUVuZCA/IGRvbmUgOiBvdXRwdXQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1ha2VJdGVyYXRvcihuZXh0LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICByZXR1cm4gbmV4dChudWxsLCBlcnJvcik7XG4gIH0sIG5hbWUsIHRydWUpO1xufSIsImltcG9ydCBmc21JdGVyYXRvciwgeyBxRW5kLCBzYWZlTmFtZSB9IGZyb20gJy4vZnNtSXRlcmF0b3InO1xuaW1wb3J0IHsgdGFrZSwgZm9yayB9IGZyb20gJy4uL2lvJztcbmltcG9ydCB7IEVORCB9IGZyb20gJy4uL2NoYW5uZWwnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0YWtlRXZlcnkocGF0dGVybk9yQ2hhbm5lbCwgd29ya2VyKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiA+IDIgPyBfbGVuIC0gMiA6IDApLCBfa2V5ID0gMjsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleSAtIDJdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgdmFyIHlUYWtlID0geyBkb25lOiBmYWxzZSwgdmFsdWU6IHRha2UocGF0dGVybk9yQ2hhbm5lbCkgfTtcbiAgdmFyIHlGb3JrID0gZnVuY3Rpb24geUZvcmsoYWMpIHtcbiAgICByZXR1cm4geyBkb25lOiBmYWxzZSwgdmFsdWU6IGZvcmsuYXBwbHkodW5kZWZpbmVkLCBbd29ya2VyXS5jb25jYXQoYXJncywgW2FjXSkpIH07XG4gIH07XG5cbiAgdmFyIGFjdGlvbiA9IHZvaWQgMCxcbiAgICAgIHNldEFjdGlvbiA9IGZ1bmN0aW9uIHNldEFjdGlvbihhYykge1xuICAgIHJldHVybiBhY3Rpb24gPSBhYztcbiAgfTtcblxuICByZXR1cm4gZnNtSXRlcmF0b3Ioe1xuICAgIHExOiBmdW5jdGlvbiBxMSgpIHtcbiAgICAgIHJldHVybiBbJ3EyJywgeVRha2UsIHNldEFjdGlvbl07XG4gICAgfSxcbiAgICBxMjogZnVuY3Rpb24gcTIoKSB7XG4gICAgICByZXR1cm4gYWN0aW9uID09PSBFTkQgPyBbcUVuZF0gOiBbJ3ExJywgeUZvcmsoYWN0aW9uKV07XG4gICAgfVxuICB9LCAncTEnLCAndGFrZUV2ZXJ5KCcgKyBzYWZlTmFtZShwYXR0ZXJuT3JDaGFubmVsKSArICcsICcgKyB3b3JrZXIubmFtZSArICcpJyk7XG59IiwiaW1wb3J0IGZzbUl0ZXJhdG9yLCB7IHFFbmQsIHNhZmVOYW1lIH0gZnJvbSAnLi9mc21JdGVyYXRvcic7XG5pbXBvcnQgeyBjYW5jZWwsIHRha2UsIGZvcmsgfSBmcm9tICcuLi9pbyc7XG5pbXBvcnQgeyBFTkQgfSBmcm9tICcuLi9jaGFubmVsJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdGFrZUxhdGVzdChwYXR0ZXJuT3JDaGFubmVsLCB3b3JrZXIpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuID4gMiA/IF9sZW4gLSAyIDogMCksIF9rZXkgPSAyOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5IC0gMl0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICB2YXIgeVRha2UgPSB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogdGFrZShwYXR0ZXJuT3JDaGFubmVsKSB9O1xuICB2YXIgeUZvcmsgPSBmdW5jdGlvbiB5Rm9yayhhYykge1xuICAgIHJldHVybiB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogZm9yay5hcHBseSh1bmRlZmluZWQsIFt3b3JrZXJdLmNvbmNhdChhcmdzLCBbYWNdKSkgfTtcbiAgfTtcbiAgdmFyIHlDYW5jZWwgPSBmdW5jdGlvbiB5Q2FuY2VsKHRhc2spIHtcbiAgICByZXR1cm4geyBkb25lOiBmYWxzZSwgdmFsdWU6IGNhbmNlbCh0YXNrKSB9O1xuICB9O1xuXG4gIHZhciB0YXNrID0gdm9pZCAwLFxuICAgICAgYWN0aW9uID0gdm9pZCAwO1xuICB2YXIgc2V0VGFzayA9IGZ1bmN0aW9uIHNldFRhc2sodCkge1xuICAgIHJldHVybiB0YXNrID0gdDtcbiAgfTtcbiAgdmFyIHNldEFjdGlvbiA9IGZ1bmN0aW9uIHNldEFjdGlvbihhYykge1xuICAgIHJldHVybiBhY3Rpb24gPSBhYztcbiAgfTtcblxuICByZXR1cm4gZnNtSXRlcmF0b3Ioe1xuICAgIHExOiBmdW5jdGlvbiBxMSgpIHtcbiAgICAgIHJldHVybiBbJ3EyJywgeVRha2UsIHNldEFjdGlvbl07XG4gICAgfSxcbiAgICBxMjogZnVuY3Rpb24gcTIoKSB7XG4gICAgICByZXR1cm4gYWN0aW9uID09PSBFTkQgPyBbcUVuZF0gOiB0YXNrID8gWydxMycsIHlDYW5jZWwodGFzayldIDogWydxMScsIHlGb3JrKGFjdGlvbiksIHNldFRhc2tdO1xuICAgIH0sXG4gICAgcTM6IGZ1bmN0aW9uIHEzKCkge1xuICAgICAgcmV0dXJuIFsncTEnLCB5Rm9yayhhY3Rpb24pLCBzZXRUYXNrXTtcbiAgICB9XG4gIH0sICdxMScsICd0YWtlTGF0ZXN0KCcgKyBzYWZlTmFtZShwYXR0ZXJuT3JDaGFubmVsKSArICcsICcgKyB3b3JrZXIubmFtZSArICcpJyk7XG59IiwiaW1wb3J0IGZzbUl0ZXJhdG9yLCB7IHFFbmQsIHNhZmVOYW1lIH0gZnJvbSAnLi9mc21JdGVyYXRvcic7XG5pbXBvcnQgeyB0YWtlLCBmb3JrLCBhY3Rpb25DaGFubmVsLCBjYWxsIH0gZnJvbSAnLi4vaW8nO1xuaW1wb3J0IHsgRU5EIH0gZnJvbSAnLi4vY2hhbm5lbCc7XG5pbXBvcnQgeyBidWZmZXJzIH0gZnJvbSAnLi4vYnVmZmVycyc7XG5pbXBvcnQgeyBkZWxheSB9IGZyb20gJy4uL3V0aWxzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdGhyb3R0bGUoZGVsYXlMZW5ndGgsIHBhdHRlcm4sIHdvcmtlcikge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4gPiAzID8gX2xlbiAtIDMgOiAwKSwgX2tleSA9IDM7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXkgLSAzXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHZhciBhY3Rpb24gPSB2b2lkIDAsXG4gICAgICBjaGFubmVsID0gdm9pZCAwO1xuXG4gIHZhciB5QWN0aW9uQ2hhbm5lbCA9IHsgZG9uZTogZmFsc2UsIHZhbHVlOiBhY3Rpb25DaGFubmVsKHBhdHRlcm4sIGJ1ZmZlcnMuc2xpZGluZygxKSkgfTtcbiAgdmFyIHlUYWtlID0gZnVuY3Rpb24geVRha2UoKSB7XG4gICAgcmV0dXJuIHsgZG9uZTogZmFsc2UsIHZhbHVlOiB0YWtlKGNoYW5uZWwpIH07XG4gIH07XG4gIHZhciB5Rm9yayA9IGZ1bmN0aW9uIHlGb3JrKGFjKSB7XG4gICAgcmV0dXJuIHsgZG9uZTogZmFsc2UsIHZhbHVlOiBmb3JrLmFwcGx5KHVuZGVmaW5lZCwgW3dvcmtlcl0uY29uY2F0KGFyZ3MsIFthY10pKSB9O1xuICB9O1xuICB2YXIgeURlbGF5ID0geyBkb25lOiBmYWxzZSwgdmFsdWU6IGNhbGwoZGVsYXksIGRlbGF5TGVuZ3RoKSB9O1xuXG4gIHZhciBzZXRBY3Rpb24gPSBmdW5jdGlvbiBzZXRBY3Rpb24oYWMpIHtcbiAgICByZXR1cm4gYWN0aW9uID0gYWM7XG4gIH07XG4gIHZhciBzZXRDaGFubmVsID0gZnVuY3Rpb24gc2V0Q2hhbm5lbChjaCkge1xuICAgIHJldHVybiBjaGFubmVsID0gY2g7XG4gIH07XG5cbiAgcmV0dXJuIGZzbUl0ZXJhdG9yKHtcbiAgICBxMTogZnVuY3Rpb24gcTEoKSB7XG4gICAgICByZXR1cm4gWydxMicsIHlBY3Rpb25DaGFubmVsLCBzZXRDaGFubmVsXTtcbiAgICB9LFxuICAgIHEyOiBmdW5jdGlvbiBxMigpIHtcbiAgICAgIHJldHVybiBbJ3EzJywgeVRha2UoKSwgc2V0QWN0aW9uXTtcbiAgICB9LFxuICAgIHEzOiBmdW5jdGlvbiBxMygpIHtcbiAgICAgIHJldHVybiBhY3Rpb24gPT09IEVORCA/IFtxRW5kXSA6IFsncTQnLCB5Rm9yayhhY3Rpb24pXTtcbiAgICB9LFxuICAgIHE0OiBmdW5jdGlvbiBxNCgpIHtcbiAgICAgIHJldHVybiBbJ3EyJywgeURlbGF5XTtcbiAgICB9XG4gIH0sICdxMScsICd0aHJvdHRsZSgnICsgc2FmZU5hbWUocGF0dGVybikgKyAnLCAnICsgd29ya2VyLm5hbWUgKyAnKScpO1xufSIsImltcG9ydCB0YWtlRXZlcnlIZWxwZXIgZnJvbSAnLi90YWtlRXZlcnknO1xuaW1wb3J0IHRha2VMYXRlc3RIZWxwZXIgZnJvbSAnLi90YWtlTGF0ZXN0JztcbmltcG9ydCB0aHJvdHRsZUhlbHBlciBmcm9tICcuL3Rocm90dGxlJztcblxuaW1wb3J0IHsgZGVwcmVjYXRlIH0gZnJvbSAnLi4vdXRpbHMnO1xuXG52YXIgZGVwcmVjYXRpb25XYXJuaW5nID0gZnVuY3Rpb24gZGVwcmVjYXRpb25XYXJuaW5nKGhlbHBlck5hbWUpIHtcbiAgcmV0dXJuICdpbXBvcnQgeyAnICsgaGVscGVyTmFtZSArICcgfSBmcm9tIFxcJ3JlZHV4LXNhZ2FcXCcgaGFzIGJlZW4gZGVwcmVjYXRlZCBpbiBmYXZvciBvZiBpbXBvcnQgeyAnICsgaGVscGVyTmFtZSArICcgfSBmcm9tIFxcJ3JlZHV4LXNhZ2EvZWZmZWN0c1xcJy5cXG5UaGUgbGF0dGVyIHdpbGwgbm90IHdvcmsgd2l0aCB5aWVsZCosIGFzIGhlbHBlciBlZmZlY3RzIGFyZSB3cmFwcGVkIGF1dG9tYXRpY2FsbHkgZm9yIHlvdSBpbiBmb3JrIGVmZmVjdC5cXG5UaGVyZWZvcmUgeWllbGQgJyArIGhlbHBlck5hbWUgKyAnIHdpbGwgcmV0dXJuIHRhc2sgZGVzY3JpcHRvciB0byB5b3VyIHNhZ2EgYW5kIGV4ZWN1dGUgbmV4dCBsaW5lcyBvZiBjb2RlLic7XG59O1xuXG52YXIgdGFrZUV2ZXJ5ID0gLyojX19QVVJFX18qL2RlcHJlY2F0ZSh0YWtlRXZlcnlIZWxwZXIsIC8qI19fUFVSRV9fKi9kZXByZWNhdGlvbldhcm5pbmcoJ3Rha2VFdmVyeScpKTtcbnZhciB0YWtlTGF0ZXN0ID0gLyojX19QVVJFX18qL2RlcHJlY2F0ZSh0YWtlTGF0ZXN0SGVscGVyLCAvKiNfX1BVUkVfXyovZGVwcmVjYXRpb25XYXJuaW5nKCd0YWtlTGF0ZXN0JykpO1xudmFyIHRocm90dGxlID0gLyojX19QVVJFX18qL2RlcHJlY2F0ZSh0aHJvdHRsZUhlbHBlciwgLyojX19QVVJFX18qL2RlcHJlY2F0aW9uV2FybmluZygndGhyb3R0bGUnKSk7XG5cbmV4cG9ydCB7IHRha2VFdmVyeSwgdGFrZUxhdGVzdCwgdGhyb3R0bGUsIHRha2VFdmVyeUhlbHBlciwgdGFrZUxhdGVzdEhlbHBlciwgdGhyb3R0bGVIZWxwZXIgfTsiLCJ2YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzcmMsIHNhZmUpIHtcbiAgZm9yICh2YXIga2V5IGluIHNyYykgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNyY1trZXldLCBzYWZlKTtcbiAgcmV0dXJuIHRhcmdldDtcbn07XG4iLCJ2YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4vX2l0ZXItY2FsbCcpO1xudmFyIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBnZXRJdGVyRm4gPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIEJSRUFLID0ge307XG52YXIgUkVUVVJOID0ge307XG52YXIgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhYmxlLCBlbnRyaWVzLCBmbiwgdGhhdCwgSVRFUkFUT1IpIHtcbiAgdmFyIGl0ZXJGbiA9IElURVJBVE9SID8gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcmFibGU7IH0gOiBnZXRJdGVyRm4oaXRlcmFibGUpO1xuICB2YXIgZiA9IGN0eChmbiwgdGhhdCwgZW50cmllcyA/IDIgOiAxKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxlbmd0aCwgc3RlcCwgaXRlcmF0b3IsIHJlc3VsdDtcbiAgaWYgKHR5cGVvZiBpdGVyRm4gIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ZXJhYmxlICsgJyBpcyBub3QgaXRlcmFibGUhJyk7XG4gIC8vIGZhc3QgY2FzZSBmb3IgYXJyYXlzIHdpdGggZGVmYXVsdCBpdGVyYXRvclxuICBpZiAoaXNBcnJheUl0ZXIoaXRlckZuKSkgZm9yIChsZW5ndGggPSB0b0xlbmd0aChpdGVyYWJsZS5sZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgIHJlc3VsdCA9IGVudHJpZXMgPyBmKGFuT2JqZWN0KHN0ZXAgPSBpdGVyYWJsZVtpbmRleF0pWzBdLCBzdGVwWzFdKSA6IGYoaXRlcmFibGVbaW5kZXhdKTtcbiAgICBpZiAocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTikgcmV0dXJuIHJlc3VsdDtcbiAgfSBlbHNlIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChpdGVyYWJsZSk7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTspIHtcbiAgICByZXN1bHQgPSBjYWxsKGl0ZXJhdG9yLCBmLCBzdGVwLnZhbHVlLCBlbnRyaWVzKTtcbiAgICBpZiAocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTikgcmV0dXJuIHJlc3VsdDtcbiAgfVxufTtcbmV4cG9ydHMuQlJFQUsgPSBCUkVBSztcbmV4cG9ydHMuUkVUVVJOID0gUkVUVVJOO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIENvbnN0cnVjdG9yLCBuYW1lLCBmb3JiaWRkZW5GaWVsZCkge1xuICBpZiAoIShpdCBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSB8fCAoZm9yYmlkZGVuRmllbGQgIT09IHVuZGVmaW5lZCAmJiBmb3JiaWRkZW5GaWVsZCBpbiBpdCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IobmFtZSArICc6IGluY29ycmVjdCBpbnZvY2F0aW9uIScpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSkge1xuICB2YXIgQyA9IGdsb2JhbFtLRVldO1xuICBpZiAoREVTQ1JJUFRPUlMgJiYgQyAmJiAhQ1tTUEVDSUVTXSkgZFAuZihDLCBTUEVDSUVTLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfVxuICB9KTtcbn07XG4iLCIvLyAxOS4xLjIuNyAvIDE1LjIuMy40IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJykuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gJGtleXMoTywgaGlkZGVuS2V5cyk7XG59O1xuIiwiLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBkUHMgPSByZXF1aXJlKCcuL19vYmplY3QtZHBzJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG52YXIgRW1wdHkgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBjcmVhdGVEaWN0ID0gZnVuY3Rpb24gKCkge1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gcmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdpZnJhbWUnKTtcbiAgdmFyIGkgPSBlbnVtQnVnS2V5cy5sZW5ndGg7XG4gIHZhciBsdCA9ICc8JztcbiAgdmFyIGd0ID0gJz4nO1xuICB2YXIgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICByZXF1aXJlKCcuL19odG1sJykuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lLnNyYyA9ICdqYXZhc2NyaXB0Oic7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2NyaXB0LXVybFxuICAvLyBjcmVhdGVEaWN0ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuT2JqZWN0O1xuICAvLyBodG1sLnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUobHQgKyAnc2NyaXB0JyArIGd0ICsgJ2RvY3VtZW50LkY9T2JqZWN0JyArIGx0ICsgJy9zY3JpcHQnICsgZ3QpO1xuICBpZnJhbWVEb2N1bWVudC5jbG9zZSgpO1xuICBjcmVhdGVEaWN0ID0gaWZyYW1lRG9jdW1lbnQuRjtcbiAgd2hpbGUgKGktLSkgZGVsZXRlIGNyZWF0ZURpY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tpXV07XG4gIHJldHVybiBjcmVhdGVEaWN0KCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKE8gIT09IG51bGwpIHtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5KCk7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IG51bGw7XG4gICAgLy8gYWRkIFwiX19wcm90b19fXCIgZm9yIE9iamVjdC5nZXRQcm90b3R5cGVPZiBwb2x5ZmlsbFxuICAgIHJlc3VsdFtJRV9QUk9UT10gPSBPO1xuICB9IGVsc2UgcmVzdWx0ID0gY3JlYXRlRGljdCgpO1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZFBzKHJlc3VsdCwgUHJvcGVydGllcyk7XG59O1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcbiAgaW5kZXggPSB0b0ludGVnZXIoaW5kZXgpO1xuICByZXR1cm4gaW5kZXggPCAwID8gbWF4KGluZGV4ICsgbGVuZ3RoLCAwKSA6IG1pbihpbmRleCwgbGVuZ3RoKTtcbn07XG4iLCIvLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuIiwidmFyIGlkID0gMDtcbnZhciBweCA9IE1hdGgucmFuZG9tKCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuICdTeW1ib2woJy5jb25jYXQoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSwgJylfJywgKCsraWQgKyBweCkudG9TdHJpbmcoMzYpKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgVFlQRSkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSB8fCBpdC5fdCAhPT0gVFlQRSkgdGhyb3cgVHlwZUVycm9yKCdJbmNvbXBhdGlibGUgcmVjZWl2ZXIsICcgKyBUWVBFICsgJyByZXF1aXJlZCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIHNwYWNlcyA9IHJlcXVpcmUoJy4vX3N0cmluZy13cycpO1xudmFyIHNwYWNlID0gJ1snICsgc3BhY2VzICsgJ10nO1xudmFyIG5vbiA9ICdcXHUyMDBiXFx1MDA4NSc7XG52YXIgbHRyaW0gPSBSZWdFeHAoJ14nICsgc3BhY2UgKyBzcGFjZSArICcqJyk7XG52YXIgcnRyaW0gPSBSZWdFeHAoc3BhY2UgKyBzcGFjZSArICcqJCcpO1xuXG52YXIgZXhwb3J0ZXIgPSBmdW5jdGlvbiAoS0VZLCBleGVjLCBBTElBUykge1xuICB2YXIgZXhwID0ge307XG4gIHZhciBGT1JDRSA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gISFzcGFjZXNbS0VZXSgpIHx8IG5vbltLRVldKCkgIT0gbm9uO1xuICB9KTtcbiAgdmFyIGZuID0gZXhwW0tFWV0gPSBGT1JDRSA/IGV4ZWModHJpbSkgOiBzcGFjZXNbS0VZXTtcbiAgaWYgKEFMSUFTKSBleHBbQUxJQVNdID0gZm47XG4gICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogRk9SQ0UsICdTdHJpbmcnLCBleHApO1xufTtcblxuLy8gMSAtPiBTdHJpbmcjdHJpbUxlZnRcbi8vIDIgLT4gU3RyaW5nI3RyaW1SaWdodFxuLy8gMyAtPiBTdHJpbmcjdHJpbVxudmFyIHRyaW0gPSBleHBvcnRlci50cmltID0gZnVuY3Rpb24gKHN0cmluZywgVFlQRSkge1xuICBzdHJpbmcgPSBTdHJpbmcoZGVmaW5lZChzdHJpbmcpKTtcbiAgaWYgKFRZUEUgJiAxKSBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShsdHJpbSwgJycpO1xuICBpZiAoVFlQRSAmIDIpIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKHJ0cmltLCAnJyk7XG4gIHJldHVybiBzdHJpbmc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydGVyO1xuIiwidmFyIGRlZiA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCB0YWcsIHN0YXQpIHtcbiAgaWYgKGl0ICYmICFoYXMoaXQgPSBzdGF0ID8gaXQgOiBpdC5wcm90b3R5cGUsIFRBRykpIGRlZihpdCwgVEFHLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IHRhZyB9KTtcbn07XG4iLCJ2YXIgcXVldWUgPSBbXTtcbi8qKlxuICBWYXJpYWJsZSB0byBob2xkIGEgY291bnRpbmcgc2VtYXBob3JlXG4gIC0gSW5jcmVtZW50aW5nIGFkZHMgYSBsb2NrIGFuZCBwdXRzIHRoZSBzY2hlZHVsZXIgaW4gYSBgc3VzcGVuZGVkYCBzdGF0ZSAoaWYgaXQncyBub3RcbiAgICBhbHJlYWR5IHN1c3BlbmRlZClcbiAgLSBEZWNyZW1lbnRpbmcgcmVsZWFzZXMgYSBsb2NrLiBaZXJvIGxvY2tzIHB1dHMgdGhlIHNjaGVkdWxlciBpbiBhIGByZWxlYXNlZGAgc3RhdGUuIFRoaXNcbiAgICB0cmlnZ2VycyBmbHVzaGluZyB0aGUgcXVldWVkIHRhc2tzLlxuKiovXG52YXIgc2VtYXBob3JlID0gMDtcblxuLyoqXG4gIEV4ZWN1dGVzIGEgdGFzayAnYXRvbWljYWxseScuIFRhc2tzIHNjaGVkdWxlZCBkdXJpbmcgdGhpcyBleGVjdXRpb24gd2lsbCBiZSBxdWV1ZWRcbiAgYW5kIGZsdXNoZWQgYWZ0ZXIgdGhpcyB0YXNrIGhhcyBmaW5pc2hlZCAoYXNzdW1pbmcgdGhlIHNjaGVkdWxlciBlbmR1cCBpbiBhIHJlbGVhc2VkXG4gIHN0YXRlKS5cbioqL1xuZnVuY3Rpb24gZXhlYyh0YXNrKSB7XG4gIHRyeSB7XG4gICAgc3VzcGVuZCgpO1xuICAgIHRhc2soKTtcbiAgfSBmaW5hbGx5IHtcbiAgICByZWxlYXNlKCk7XG4gIH1cbn1cblxuLyoqXG4gIEV4ZWN1dGVzIG9yIHF1ZXVlcyBhIHRhc2sgZGVwZW5kaW5nIG9uIHRoZSBzdGF0ZSBvZiB0aGUgc2NoZWR1bGVyIChgc3VzcGVuZGVkYCBvciBgcmVsZWFzZWRgKVxuKiovXG5leHBvcnQgZnVuY3Rpb24gYXNhcCh0YXNrKSB7XG4gIHF1ZXVlLnB1c2godGFzayk7XG5cbiAgaWYgKCFzZW1hcGhvcmUpIHtcbiAgICBzdXNwZW5kKCk7XG4gICAgZmx1c2goKTtcbiAgfVxufVxuXG4vKipcbiAgUHV0cyB0aGUgc2NoZWR1bGVyIGluIGEgYHN1c3BlbmRlZGAgc3RhdGUuIFNjaGVkdWxlZCB0YXNrcyB3aWxsIGJlIHF1ZXVlZCB1bnRpbCB0aGVcbiAgc2NoZWR1bGVyIGlzIHJlbGVhc2VkLlxuKiovXG5leHBvcnQgZnVuY3Rpb24gc3VzcGVuZCgpIHtcbiAgc2VtYXBob3JlKys7XG59XG5cbi8qKlxuICBQdXRzIHRoZSBzY2hlZHVsZXIgaW4gYSBgcmVsZWFzZWRgIHN0YXRlLlxuKiovXG5mdW5jdGlvbiByZWxlYXNlKCkge1xuICBzZW1hcGhvcmUtLTtcbn1cblxuLyoqXG4gIFJlbGVhc2VzIHRoZSBjdXJyZW50IGxvY2suIEV4ZWN1dGVzIGFsbCBxdWV1ZWQgdGFza3MgaWYgdGhlIHNjaGVkdWxlciBpcyBpbiB0aGUgcmVsZWFzZWQgc3RhdGUuXG4qKi9cbmV4cG9ydCBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgcmVsZWFzZSgpO1xuXG4gIHZhciB0YXNrID0gdm9pZCAwO1xuICB3aGlsZSAoIXNlbWFwaG9yZSAmJiAodGFzayA9IHF1ZXVlLnNoaWZ0KCkpICE9PSB1bmRlZmluZWQpIHtcbiAgICBleGVjKHRhc2spO1xuICB9XG59IiwiZXhwb3J0IGNvbnN0IFNBR0FfVE9PTEJPWFNPWkFJX1NPWkFJX1VQREFURSA9ICdTQUdBX1RPT0xCT1hTT1pBSV9TT1pBSV9VUERBVEUnO1xyXG5leHBvcnQgY29uc3QgU0FHQV9UT09MQk9YU09aQUlfU09aQUlfREVMRVRFID0gJ1NBR0FfVE9PTEJPWFNPWkFJX1NPWkFJX0RFTEVURSc7XHJcbmV4cG9ydCBjb25zdCBTQUdBX1RPT0xCT1hTT1pBSV9TT1pBSV9DUkVBVEUgPSAnU0FHQV9UT09MQk9YU09aQUlfU09aQUlfQ1JFQVRFJztcclxuZXhwb3J0IGNvbnN0IFNBR0FfVE9PTEJPWFNPWkFJX1NPWkFJX1NFTEVDVCA9ICdTQUdBX1RPT0xCT1hTT1pBSV9TT1pBSV9TRUxFQ1QnO1xyXG5leHBvcnQgY29uc3QgU0FHQV9UT09MQk9YU09aQUlfU09aQUlfVE9HR0xFID0gJ1NBR0FfVE9PTEJPWFNPWkFJX1NPWkFJX1RPR0dMRSc7XHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IFNhZ2FfVG9vbEJveFNvemFpX1NvemFpX1VwZGF0ZSA9IChwYXlsb2FkID0ge30pID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdHlwZTogU0FHQV9UT09MQk9YU09aQUlfU09aQUlfVVBEQVRFLFxyXG4gICAgICAgIHBheWxvYWQ6IHtcclxuICAgICAgICAgICAgc296YWk6IHBheWxvYWQuc296YWksXHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBTYWdhX1Rvb2xCb3hTb3phaV9Tb3phaV9EZWxldGUgPSAocGF5bG9hZCA9IHt9KSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHR5cGU6IFNBR0FfVE9PTEJPWFNPWkFJX1NPWkFJX0RFTEVURSxcclxuICAgICAgICBwYXlsb2FkOiB7XHJcbiAgICAgICAgICAgIGlkOiBwYXlsb2FkLmlkLFxyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgU2FnYV9Ub29sQm94U296YWlfU296YWlfQ3JlYXRlID0gKHBheWxvYWQgPSB7fSkgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiBTQUdBX1RPT0xCT1hTT1pBSV9TT1pBSV9DUkVBVEUsXHJcbiAgICAgICAgcGF5bG9hZDoge1xyXG4gICAgICAgICAgICBpZDogcGF5bG9hZC5pZCxcclxuICAgICAgICAgICAgdHlwZTogcGF5bG9hZC50eXBlLFxyXG4gICAgICAgICAgICB0ZXh0OiBwYXlsb2FkLnRleHQsXHJcbiAgICAgICAgICAgIGltYWdlOiBwYXlsb2FkLmltYWdlLFxyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgU2FnYV9Ub29sQm94U296YWlfU296YWlfU2VsZWN0ID0gKHBheWxvYWQgPSB7fSkgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiBTQUdBX1RPT0xCT1hTT1pBSV9TT1pBSV9TRUxFQ1QsXHJcbiAgICAgICAgcGF5bG9hZDoge1xyXG4gICAgICAgICAgICBpZDogcGF5bG9hZC5pZCxcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgU2FnYV9Ub29sQm94U296YWlfU296YWlfVG9nZ2xlID0gKHBheWxvYWQgPSB7fSkgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiBTQUdBX1RPT0xCT1hTT1pBSV9TT1pBSV9UT0dHTEUsXHJcbiAgICAgICAgcGF5bG9hZDoge1xyXG4gICAgICAgICAgICBpZDogcGF5bG9hZC5pZCxcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XHJcblxyXG4iLCJleHBvcnQgY29uc3QgU1VfU0VMRUNUQk9YX0JPWF9OT05TRUxFQ1QgICA9ICdTVV9TRUxFQ1RCT1hfQk9YX05PTlNFTEVDVCc7XHJcbmV4cG9ydCBjb25zdCBTVV9TRUxFQ1RCT1hfQk9YX1NFTEVDVCAgICAgID0gJ1NVX1NFTEVDVEJPWF9CT1hfU0VMRUNUJztcclxuXHJcbmV4cG9ydCBjb25zdCBTVV9TRUxFQ1RCT1hfRURJVEJPWF9NT1ZFRU5EID0gJ1NVX1NFTEVDVEJPWF9FRElUQk9YX01PVkVFTkQnO1xyXG5leHBvcnQgY29uc3QgU1VfU0VMRUNUQk9YX0VESVRCT1hfQ0hBTkdFU0laRSA9ICdTVV9TRUxFQ1RCT1hfRURJVEJPWF9DSEFOR0VTSVpFJztcclxuXHJcblxyXG5leHBvcnQgY29uc3QgU1VfU2VsZWN0Qm94X0JveF9Ob25TZWxlY3QgPSAocGF5bG9hZCA9IHt9KSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHR5cGU6IFNVX1NFTEVDVEJPWF9CT1hfTk9OU0VMRUNULFxyXG4gICAgICAgIHBheWxvYWQ6IHtcclxuICAgICAgICAgICAgaWQ6ICAgIG51bGwsXHJcbiAgICAgICAgICAgIHR5cGU6ICAnJyxcclxuICAgICAgICAgICAgZ3JvdXA6ICcnLFxyXG4gICAgICAgICAgICBubzogICAgMCxcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFNVX1NlbGVjdEJveF9Cb3hfU2VsZWN0ID0gKHBheWxvYWQgPSB7fSkgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiBTVV9TRUxFQ1RCT1hfQk9YX1NFTEVDVCxcclxuICAgICAgICBwYXlsb2FkOiB7XHJcbiAgICAgICAgICAgIGlkOiAgICBwYXlsb2FkLmlkLFxyXG4gICAgICAgICAgICB0eXBlOiAgcGF5bG9hZC50eXBlLFxyXG4gICAgICAgICAgICBncm91cDogcGF5bG9hZC5ncm91cCxcclxuICAgICAgICAgICAgbm86ICAgIHBheWxvYWQubm8sXHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBTVV9TZWxlY3RCb3hfRWRpdEJveF9Nb3ZlRW5kID0gKHBheWxvYWQgPSB7fSkgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiBTVV9TRUxFQ1RCT1hfRURJVEJPWF9NT1ZFRU5ELFxyXG4gICAgICAgIHBheWxvYWQ6IHtcclxuICAgICAgICAgICAgaWQ6IHBheWxvYWQuaWQsXHJcbiAgICAgICAgICAgIHgxOiBwYXlsb2FkLngxLFxyXG4gICAgICAgICAgICB5MTogcGF5bG9hZC55MSxcclxuICAgICAgICAgICAgeDI6IHBheWxvYWQueDIsXHJcbiAgICAgICAgICAgIHkyOiBwYXlsb2FkLnkyLFxyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgU1VfU2VsZWN0Qm94X0VkaXRCb3hfQ2hhbmdlU2l6ZSA9IChwYXlsb2FkID0ge30pID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdHlwZTogU1VfU0VMRUNUQk9YX0VESVRCT1hfQ0hBTkdFU0laRSxcclxuICAgICAgICBwYXlsb2FkOiB7XHJcbiAgICAgICAgICAgIGlkOiBwYXlsb2FkLmlkLFxyXG4gICAgICAgICAgICB4MTogcGF5bG9hZC54MSxcclxuICAgICAgICAgICAgeTE6IHBheWxvYWQueTEsXHJcbiAgICAgICAgICAgIHgyOiBwYXlsb2FkLngyLFxyXG4gICAgICAgICAgICB5MjogcGF5bG9hZC55MixcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxyXG4iLCIvLyBnZXR0aW5nIHRhZyBmcm9tIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuLy8gRVMzIHdyb25nIGhlcmVcbnZhciBBUkcgPSBjb2YoZnVuY3Rpb24gKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID09ICdBcmd1bWVudHMnO1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBTY3JpcHQgQWNjZXNzIERlbmllZCBlcnJvclxudmFyIHRyeUdldCA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGl0W2tleV07XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIE8sIFQsIEI7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gJ1VuZGVmaW5lZCcgOiBpdCA9PT0gbnVsbCA/ICdOdWxsJ1xuICAgIC8vIEBAdG9TdHJpbmdUYWcgY2FzZVxuICAgIDogdHlwZW9mIChUID0gdHJ5R2V0KE8gPSBPYmplY3QoaXQpLCBUQUcpKSA9PSAnc3RyaW5nJyA/IFRcbiAgICAvLyBidWlsdGluVGFnIGNhc2VcbiAgICA6IEFSRyA/IGNvZihPKVxuICAgIC8vIEVTMyBhcmd1bWVudHMgZmFsbGJhY2tcbiAgICA6IChCID0gY29mKE8pKSA9PSAnT2JqZWN0JyAmJiB0eXBlb2YgTy5jYWxsZWUgPT0gJ2Z1bmN0aW9uJyA/ICdBcmd1bWVudHMnIDogQjtcbn07XG4iLCJleHBvcnRzLmYgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiIsIi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApID8gT2JqZWN0IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBjb2YoaXQpID09ICdTdHJpbmcnID8gaXQuc3BsaXQoJycpIDogT2JqZWN0KGl0KTtcbn07XG4iLCJ2YXIgZztcclxuXHJcbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXHJcbmcgPSAoZnVuY3Rpb24oKSB7XHJcblx0cmV0dXJuIHRoaXM7XHJcbn0pKCk7XHJcblxyXG50cnkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxyXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSwgZXZhbCkoXCJ0aGlzXCIpO1xyXG59IGNhdGNoIChlKSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcclxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcclxufVxyXG5cclxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxyXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xyXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGc7XHJcbiIsImV4cG9ydCBjb25zdCBTQUdBX1RPT0xCT1hCT1hEQVRBX0JPWERBVEFfVVBEQVRFID0gJ1NBR0FfVE9PTEJPWEJPWERBVEFfQk9YREFUQV9VUERBVEUnO1xyXG5leHBvcnQgY29uc3QgU0FHQV9UT09MQk9YQk9YREFUQV9CT1hEQVRBX0RFTEVURSA9ICdTQUdBX1RPT0xCT1hCT1hEQVRBX0JPWERBVEFfREVMRVRFJztcclxuZXhwb3J0IGNvbnN0IFNBR0FfVE9PTEJPWEJPWERBVEFfQk9YREFUQV9DUkVBVEUgPSAnU0FHQV9UT09MQk9YQk9YREFUQV9CT1hEQVRBX0NSRUFURSc7XHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IFNhZ2FfVG9vbEJveEJveERhdGFfQm94RGF0YV9VcGRhdGUgPSAocGF5bG9hZCA9IHt9KSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHR5cGU6IFNBR0FfVE9PTEJPWEJPWERBVEFfQk9YREFUQV9VUERBVEUsXHJcbiAgICAgICAgcGF5bG9hZDoge1xyXG4gICAgICAgICAgICBib3g6IHBheWxvYWQuYm94LFxyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgU2FnYV9Ub29sQm94Qm94RGF0YV9Cb3hEYXRhX0RlbGV0ZSA9IChwYXlsb2FkID0ge30pID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdHlwZTogU0FHQV9UT09MQk9YQk9YREFUQV9CT1hEQVRBX0RFTEVURSxcclxuICAgICAgICBwYXlsb2FkOiB7XHJcbiAgICAgICAgICAgIGlkOiBwYXlsb2FkLmlkLFxyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgU2FnYV9Ub29sQm94Qm94RGF0YV9Cb3hEYXRhX0NyZWF0ZSA9IChwYXlsb2FkID0ge30pID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdHlwZTogU0FHQV9UT09MQk9YQk9YREFUQV9CT1hEQVRBX0NSRUFURSxcclxuICAgICAgICBwYXlsb2FkOiB7XHJcbiAgICAgICAgICAgIGJveDogcGF5bG9hZC5ib3gsXHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuXHJcbiIsImV4cG9ydCBjb25zdCBTQUdBX1NFTEVDVEJPWF9CT1hfTk9OU0VMRUNUICAgPSAnU0FHQV9TRUxFQ1RCT1hfQk9YX05PTlNFTEVDVCc7XHJcbmV4cG9ydCBjb25zdCBTQUdBX1NFTEVDVEJPWF9CT1hfU0VMRUNUICAgICAgPSAnU0FHQV9TRUxFQ1RCT1hfQk9YX1NFTEVDVCc7XHJcblxyXG5leHBvcnQgY29uc3QgU0FHQV9TRUxFQ1RCT1hfRURJVEJPWF9NT1ZFRU5EID0gJ1NBR0FfU0VMRUNUQk9YX0VESVRCT1hfTU9WRUVORCc7XHJcbmV4cG9ydCBjb25zdCBTQUdBX1NFTEVDVEJPWF9FRElUQk9YX0NIQU5HRVNJWkUgPSAnU0FHQV9TRUxFQ1RCT1hfRURJVEJPWF9DSEFOR0VTSVpFJztcclxuXHJcblxyXG5leHBvcnQgY29uc3QgU2FnYV9TZWxlY3RCb3hfQm94X05vblNlbGVjdCA9IChwYXlsb2FkID0ge30pID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdHlwZTogU0FHQV9TRUxFQ1RCT1hfQk9YX05PTlNFTEVDVCxcclxuICAgICAgICBwYXlsb2FkOiB7XHJcbiAgICAgICAgICAgIGlkOiAgICBudWxsLFxyXG4gICAgICAgICAgICB0eXBlOiAgJycsXHJcbiAgICAgICAgICAgIGdyb3VwOiAnJyxcclxuICAgICAgICAgICAgbm86ICAgIDAsXHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBTYWdhX1NlbGVjdEJveF9Cb3hfU2VsZWN0ID0gKHBheWxvYWQgPSB7fSkgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiBTQUdBX1NFTEVDVEJPWF9CT1hfU0VMRUNULFxyXG4gICAgICAgIHBheWxvYWQ6IHtcclxuICAgICAgICAgICAgaWQ6ICAgIHBheWxvYWQuaWQsXHJcbiAgICAgICAgICAgIHR5cGU6ICBwYXlsb2FkLnR5cGUsXHJcbiAgICAgICAgICAgIGdyb3VwOiBwYXlsb2FkLmdyb3VwLFxyXG4gICAgICAgICAgICBubzogICAgcGF5bG9hZC5ubyxcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFNhZ2FfU2VsZWN0Qm94X0VkaXRCb3hfTW92ZUVuZCA9IChwYXlsb2FkID0ge30pID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdHlwZTogU0FHQV9TRUxFQ1RCT1hfRURJVEJPWF9NT1ZFRU5ELFxyXG4gICAgICAgIHBheWxvYWQ6IHtcclxuICAgICAgICAgICAgaWQ6IHBheWxvYWQuaWQsXHJcbiAgICAgICAgICAgIHgxOiBwYXlsb2FkLngxLFxyXG4gICAgICAgICAgICB5MTogcGF5bG9hZC55MSxcclxuICAgICAgICAgICAgeDI6IHBheWxvYWQueDIsXHJcbiAgICAgICAgICAgIHkyOiBwYXlsb2FkLnkyLFxyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgU2FnYV9TZWxlY3RCb3hfRWRpdEJveF9DaGFuZ2VTaXplID0gKHBheWxvYWQgPSB7fSkgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiBTQUdBX1NFTEVDVEJPWF9FRElUQk9YX0NIQU5HRVNJWkUsXHJcbiAgICAgICAgcGF5bG9hZDoge1xyXG4gICAgICAgICAgICBpZDogcGF5bG9hZC5pZCxcclxuICAgICAgICAgICAgeDE6IHBheWxvYWQueDEsXHJcbiAgICAgICAgICAgIHkxOiBwYXlsb2FkLnkxLFxyXG4gICAgICAgICAgICB4MjogcGF5bG9hZC54MixcclxuICAgICAgICAgICAgeTI6IHBheWxvYWQueTIsXHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuIiwiLy9cclxuLy8g5paH5a2X5YiX57O7XHJcbi8vXHJcblxyXG5leHBvcnQgY29uc3QgU3RyaW5nID0ge1xyXG4gICAgdG9OdW1lcmljOiAodmFsdWUpID0+IHtcclxuICAgICAgICBpZiAodmFsdWUgPT0gJycpIHtcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IG51bSA9IHBhcnNlSW50KHZhbHVlLCAxMCk7XHJcbiAgICAgICAgaWYgKGlzTmFOKG51bSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG51bTtcclxuICAgIH0sXHJcbn0iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDT0xMRUNUSU9OKSB7XG4gICRleHBvcnQoJGV4cG9ydC5TLCBDT0xMRUNUSU9OLCB7IGZyb206IGZ1bmN0aW9uIGZyb20oc291cmNlIC8qICwgbWFwRm4sIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgbWFwRm4gPSBhcmd1bWVudHNbMV07XG4gICAgdmFyIG1hcHBpbmcsIEEsIG4sIGNiO1xuICAgIGFGdW5jdGlvbih0aGlzKTtcbiAgICBtYXBwaW5nID0gbWFwRm4gIT09IHVuZGVmaW5lZDtcbiAgICBpZiAobWFwcGluZykgYUZ1bmN0aW9uKG1hcEZuKTtcbiAgICBpZiAoc291cmNlID09IHVuZGVmaW5lZCkgcmV0dXJuIG5ldyB0aGlzKCk7XG4gICAgQSA9IFtdO1xuICAgIGlmIChtYXBwaW5nKSB7XG4gICAgICBuID0gMDtcbiAgICAgIGNiID0gY3R4KG1hcEZuLCBhcmd1bWVudHNbMl0sIDIpO1xuICAgICAgZm9yT2Yoc291cmNlLCBmYWxzZSwgZnVuY3Rpb24gKG5leHRJdGVtKSB7XG4gICAgICAgIEEucHVzaChjYihuZXh0SXRlbSwgbisrKSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yT2Yoc291cmNlLCBmYWxzZSwgQS5wdXNoLCBBKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyB0aGlzKEEpO1xuICB9IH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENPTExFQ1RJT04pIHtcbiAgJGV4cG9ydCgkZXhwb3J0LlMsIENPTExFQ1RJT04sIHsgb2Y6IGZ1bmN0aW9uIG9mKCkge1xuICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBBID0gbmV3IEFycmF5KGxlbmd0aCk7XG4gICAgd2hpbGUgKGxlbmd0aC0tKSBBW2xlbmd0aF0gPSBhcmd1bWVudHNbbGVuZ3RoXTtcbiAgICByZXR1cm4gbmV3IHRoaXMoQSk7XG4gIH0gfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gRm9yY2VkIHJlcGxhY2VtZW50IHByb3RvdHlwZSBhY2Nlc3NvcnMgbWV0aG9kc1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19saWJyYXJ5JykgfHwgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICB2YXIgSyA9IE1hdGgucmFuZG9tKCk7XG4gIC8vIEluIEZGIHRocm93cyBvbmx5IGRlZmluZSBtZXRob2RzXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZiwgbm8tdXNlbGVzcy1jYWxsXG4gIF9fZGVmaW5lU2V0dGVyX18uY2FsbChudWxsLCBLLCBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xuICBkZWxldGUgcmVxdWlyZSgnLi9fZ2xvYmFsJylbS107XG59KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIFRZUEVEID0gdWlkKCd0eXBlZF9hcnJheScpO1xudmFyIFZJRVcgPSB1aWQoJ3ZpZXcnKTtcbnZhciBBQlYgPSAhIShnbG9iYWwuQXJyYXlCdWZmZXIgJiYgZ2xvYmFsLkRhdGFWaWV3KTtcbnZhciBDT05TVFIgPSBBQlY7XG52YXIgaSA9IDA7XG52YXIgbCA9IDk7XG52YXIgVHlwZWQ7XG5cbnZhciBUeXBlZEFycmF5Q29uc3RydWN0b3JzID0gKFxuICAnSW50OEFycmF5LFVpbnQ4QXJyYXksVWludDhDbGFtcGVkQXJyYXksSW50MTZBcnJheSxVaW50MTZBcnJheSxJbnQzMkFycmF5LFVpbnQzMkFycmF5LEZsb2F0MzJBcnJheSxGbG9hdDY0QXJyYXknXG4pLnNwbGl0KCcsJyk7XG5cbndoaWxlIChpIDwgbCkge1xuICBpZiAoVHlwZWQgPSBnbG9iYWxbVHlwZWRBcnJheUNvbnN0cnVjdG9yc1tpKytdXSkge1xuICAgIGhpZGUoVHlwZWQucHJvdG90eXBlLCBUWVBFRCwgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZC5wcm90b3R5cGUsIFZJRVcsIHRydWUpO1xuICB9IGVsc2UgQ09OU1RSID0gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBBQlY6IEFCVixcbiAgQ09OU1RSOiBDT05TVFIsXG4gIFRZUEVEOiBUWVBFRCxcbiAgVklFVzogVklFV1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyICRpdGVyRGV0ZWN0ID0gcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUsIHdyYXBwZXIsIG1ldGhvZHMsIGNvbW1vbiwgSVNfTUFQLCBJU19XRUFLKSB7XG4gIHZhciBCYXNlID0gZ2xvYmFsW05BTUVdO1xuICB2YXIgQyA9IEJhc2U7XG4gIHZhciBBRERFUiA9IElTX01BUCA/ICdzZXQnIDogJ2FkZCc7XG4gIHZhciBwcm90byA9IEMgJiYgQy5wcm90b3R5cGU7XG4gIHZhciBPID0ge307XG4gIHZhciBmaXhNZXRob2QgPSBmdW5jdGlvbiAoS0VZKSB7XG4gICAgdmFyIGZuID0gcHJvdG9bS0VZXTtcbiAgICByZWRlZmluZShwcm90bywgS0VZLFxuICAgICAgS0VZID09ICdkZWxldGUnID8gZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gZmFsc2UgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdoYXMnID8gZnVuY3Rpb24gaGFzKGEpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gZmFsc2UgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdnZXQnID8gZnVuY3Rpb24gZ2V0KGEpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gdW5kZWZpbmVkIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnYWRkJyA/IGZ1bmN0aW9uIGFkZChhKSB7IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTsgcmV0dXJuIHRoaXM7IH1cbiAgICAgICAgOiBmdW5jdGlvbiBzZXQoYSwgYikgeyBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSwgYik7IHJldHVybiB0aGlzOyB9XG4gICAgKTtcbiAgfTtcbiAgaWYgKHR5cGVvZiBDICE9ICdmdW5jdGlvbicgfHwgIShJU19XRUFLIHx8IHByb3RvLmZvckVhY2ggJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBuZXcgQygpLmVudHJpZXMoKS5uZXh0KCk7XG4gIH0pKSkge1xuICAgIC8vIGNyZWF0ZSBjb2xsZWN0aW9uIGNvbnN0cnVjdG9yXG4gICAgQyA9IGNvbW1vbi5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwgbWV0aG9kcyk7XG4gICAgbWV0YS5ORUVEID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBuZXcgQygpO1xuICAgIC8vIGVhcmx5IGltcGxlbWVudGF0aW9ucyBub3Qgc3VwcG9ydHMgY2hhaW5pbmdcbiAgICB2YXIgSEFTTlRfQ0hBSU5JTkcgPSBpbnN0YW5jZVtBRERFUl0oSVNfV0VBSyA/IHt9IDogLTAsIDEpICE9IGluc3RhbmNlO1xuICAgIC8vIFY4IH4gIENocm9taXVtIDQwLSB3ZWFrLWNvbGxlY3Rpb25zIHRocm93cyBvbiBwcmltaXRpdmVzLCBidXQgc2hvdWxkIHJldHVybiBmYWxzZVxuICAgIHZhciBUSFJPV1NfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgaW5zdGFuY2UuaGFzKDEpOyB9KTtcbiAgICAvLyBtb3N0IGVhcmx5IGltcGxlbWVudGF0aW9ucyBkb2Vzbid0IHN1cHBvcnRzIGl0ZXJhYmxlcywgbW9zdCBtb2Rlcm4gLSBub3QgY2xvc2UgaXQgY29ycmVjdGx5XG4gICAgdmFyIEFDQ0VQVF9JVEVSQUJMRVMgPSAkaXRlckRldGVjdChmdW5jdGlvbiAoaXRlcikgeyBuZXcgQyhpdGVyKTsgfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgLy8gZm9yIGVhcmx5IGltcGxlbWVudGF0aW9ucyAtMCBhbmQgKzAgbm90IHRoZSBzYW1lXG4gICAgdmFyIEJVR0dZX1pFUk8gPSAhSVNfV0VBSyAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBWOCB+IENocm9taXVtIDQyLSBmYWlscyBvbmx5IHdpdGggNSsgZWxlbWVudHNcbiAgICAgIHZhciAkaW5zdGFuY2UgPSBuZXcgQygpO1xuICAgICAgdmFyIGluZGV4ID0gNTtcbiAgICAgIHdoaWxlIChpbmRleC0tKSAkaW5zdGFuY2VbQURERVJdKGluZGV4LCBpbmRleCk7XG4gICAgICByZXR1cm4gISRpbnN0YW5jZS5oYXMoLTApO1xuICAgIH0pO1xuICAgIGlmICghQUNDRVBUX0lURVJBQkxFUykge1xuICAgICAgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRhcmdldCwgaXRlcmFibGUpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0YXJnZXQsIEMsIE5BTUUpO1xuICAgICAgICB2YXIgdGhhdCA9IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBCYXNlKCksIHRhcmdldCwgQyk7XG4gICAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICAgICAgcmV0dXJuIHRoYXQ7XG4gICAgICB9KTtcbiAgICAgIEMucHJvdG90eXBlID0gcHJvdG87XG4gICAgICBwcm90by5jb25zdHJ1Y3RvciA9IEM7XG4gICAgfVxuICAgIGlmIChUSFJPV1NfT05fUFJJTUlUSVZFUyB8fCBCVUdHWV9aRVJPKSB7XG4gICAgICBmaXhNZXRob2QoJ2RlbGV0ZScpO1xuICAgICAgZml4TWV0aG9kKCdoYXMnKTtcbiAgICAgIElTX01BUCAmJiBmaXhNZXRob2QoJ2dldCcpO1xuICAgIH1cbiAgICBpZiAoQlVHR1lfWkVSTyB8fCBIQVNOVF9DSEFJTklORykgZml4TWV0aG9kKEFEREVSKTtcbiAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIHNob3VsZCBub3QgY29udGFpbnMgLmNsZWFyIG1ldGhvZFxuICAgIGlmIChJU19XRUFLICYmIHByb3RvLmNsZWFyKSBkZWxldGUgcHJvdG8uY2xlYXI7XG4gIH1cblxuICBzZXRUb1N0cmluZ1RhZyhDLCBOQU1FKTtcblxuICBPW05BTUVdID0gQztcbiAgJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoQyAhPSBCYXNlKSwgTyk7XG5cbiAgaWYgKCFJU19XRUFLKSBjb21tb24uc2V0U3Ryb25nKEMsIE5BTUUsIElTX01BUCk7XG5cbiAgcmV0dXJuIEM7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIG5hdmlnYXRvciA9IGdsb2JhbC5uYXZpZ2F0b3I7XG5cbm1vZHVsZS5leHBvcnRzID0gbmF2aWdhdG9yICYmIG5hdmlnYXRvci51c2VyQWdlbnQgfHwgJyc7XG4iLCIvLyA3LjMuMjAgU3BlY2llc0NvbnN0cnVjdG9yKE8sIGRlZmF1bHRDb25zdHJ1Y3RvcilcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIEQpIHtcbiAgdmFyIEMgPSBhbk9iamVjdChPKS5jb25zdHJ1Y3RvcjtcbiAgdmFyIFM7XG4gIHJldHVybiBDID09PSB1bmRlZmluZWQgfHwgKFMgPSBhbk9iamVjdChDKVtTUEVDSUVTXSkgPT0gdW5kZWZpbmVkID8gRCA6IGFGdW5jdGlvbihTKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgbGVuZ3RoLCBleGVjKSB7XG4gIHZhciBTWU1CT0wgPSB3a3MoS0VZKTtcbiAgdmFyIGZucyA9IGV4ZWMoZGVmaW5lZCwgU1lNQk9MLCAnJ1tLRVldKTtcbiAgdmFyIHN0cmZuID0gZm5zWzBdO1xuICB2YXIgcnhmbiA9IGZuc1sxXTtcbiAgaWYgKGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgTyA9IHt9O1xuICAgIE9bU1lNQk9MXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH07XG4gICAgcmV0dXJuICcnW0tFWV0oTykgIT0gNztcbiAgfSkpIHtcbiAgICByZWRlZmluZShTdHJpbmcucHJvdG90eXBlLCBLRVksIHN0cmZuKTtcbiAgICBoaWRlKFJlZ0V4cC5wcm90b3R5cGUsIFNZTUJPTCwgbGVuZ3RoID09IDJcbiAgICAgIC8vIDIxLjIuNS44IFJlZ0V4cC5wcm90b3R5cGVbQEByZXBsYWNlXShzdHJpbmcsIHJlcGxhY2VWYWx1ZSlcbiAgICAgIC8vIDIxLjIuNS4xMSBSZWdFeHAucHJvdG90eXBlW0BAc3BsaXRdKHN0cmluZywgbGltaXQpXG4gICAgICA/IGZ1bmN0aW9uIChzdHJpbmcsIGFyZykgeyByZXR1cm4gcnhmbi5jYWxsKHN0cmluZywgdGhpcywgYXJnKTsgfVxuICAgICAgLy8gMjEuMi41LjYgUmVnRXhwLnByb3RvdHlwZVtAQG1hdGNoXShzdHJpbmcpXG4gICAgICAvLyAyMS4yLjUuOSBSZWdFeHAucHJvdG90eXBlW0BAc2VhcmNoXShzdHJpbmcpXG4gICAgICA6IGZ1bmN0aW9uIChzdHJpbmcpIHsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMpOyB9XG4gICAgKTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIxLjIuNS4zIGdldCBSZWdFeHAucHJvdG90eXBlLmZsYWdzXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdGhhdCA9IGFuT2JqZWN0KHRoaXMpO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIGlmICh0aGF0Lmdsb2JhbCkgcmVzdWx0ICs9ICdnJztcbiAgaWYgKHRoYXQuaWdub3JlQ2FzZSkgcmVzdWx0ICs9ICdpJztcbiAgaWYgKHRoYXQubXVsdGlsaW5lKSByZXN1bHQgKz0gJ20nO1xuICBpZiAodGhhdC51bmljb2RlKSByZXN1bHQgKz0gJ3UnO1xuICBpZiAodGhhdC5zdGlja3kpIHJlc3VsdCArPSAneSc7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgU0FGRV9DTE9TSU5HID0gZmFsc2U7XG5cbnRyeSB7XG4gIHZhciByaXRlciA9IFs3XVtJVEVSQVRPUl0oKTtcbiAgcml0ZXJbJ3JldHVybiddID0gZnVuY3Rpb24gKCkgeyBTQUZFX0NMT1NJTkcgPSB0cnVlOyB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdGhyb3ctbGl0ZXJhbFxuICBBcnJheS5mcm9tKHJpdGVyLCBmdW5jdGlvbiAoKSB7IHRocm93IDI7IH0pO1xufSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMsIHNraXBDbG9zaW5nKSB7XG4gIGlmICghc2tpcENsb3NpbmcgJiYgIVNBRkVfQ0xPU0lORykgcmV0dXJuIGZhbHNlO1xuICB2YXIgc2FmZSA9IGZhbHNlO1xuICB0cnkge1xuICAgIHZhciBhcnIgPSBbN107XG4gICAgdmFyIGl0ZXIgPSBhcnJbSVRFUkFUT1JdKCk7XG4gICAgaXRlci5uZXh0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4geyBkb25lOiBzYWZlID0gdHJ1ZSB9OyB9O1xuICAgIGFycltJVEVSQVRPUl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBpdGVyOyB9O1xuICAgIGV4ZWMoYXJyKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBzYWZlO1xufTtcbiIsIi8vIDcuMi44IElzUmVnRXhwKGFyZ3VtZW50KVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgTUFUQ0ggPSByZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBpc1JlZ0V4cDtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiAoKGlzUmVnRXhwID0gaXRbTUFUQ0hdKSAhPT0gdW5kZWZpbmVkID8gISFpc1JlZ0V4cCA6IGNvZihpdCkgPT0gJ1JlZ0V4cCcpO1xufTtcbiIsIi8vIDcuMi4yIElzQXJyYXkoYXJndW1lbnQpXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcbiAgcmV0dXJuIGNvZihhcmcpID09ICdBcnJheSc7XG59O1xuIiwiZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbiIsIi8vIGZhbHNlIC0+IEFycmF5I2luZGV4T2Zcbi8vIHRydWUgIC0+IEFycmF5I2luY2x1ZGVzXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKElTX0lOQ0xVREVTKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGVsLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdCgkdGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpO1xuICAgIHZhciB2YWx1ZTtcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmIChJU19JTkNMVURFUyAmJiBlbCAhPSBlbCkgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSB7XG4gICAgICBpZiAoT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuIiwidmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7XG52YXIgc3RvcmUgPSBnbG9iYWxbU0hBUkVEXSB8fCAoZ2xvYmFsW1NIQVJFRF0gPSB7fSk7XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoge30pO1xufSkoJ3ZlcnNpb25zJywgW10pLnB1c2goe1xuICB2ZXJzaW9uOiBjb3JlLnZlcnNpb24sXG4gIG1vZGU6IHJlcXVpcmUoJy4vX2xpYnJhcnknKSA/ICdwdXJlJyA6ICdnbG9iYWwnLFxuICBjb3B5cmlnaHQ6ICfCqSAyMDE4IERlbmlzIFB1c2hrYXJldiAoemxvaXJvY2sucnUpJ1xufSk7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVc2UgaW52YXJpYW50KCkgdG8gYXNzZXJ0IHN0YXRlIHdoaWNoIHlvdXIgcHJvZ3JhbSBhc3N1bWVzIHRvIGJlIHRydWUuXG4gKlxuICogUHJvdmlkZSBzcHJpbnRmLXN0eWxlIGZvcm1hdCAob25seSAlcyBpcyBzdXBwb3J0ZWQpIGFuZCBhcmd1bWVudHNcbiAqIHRvIHByb3ZpZGUgaW5mb3JtYXRpb24gYWJvdXQgd2hhdCBicm9rZSBhbmQgd2hhdCB5b3Ugd2VyZVxuICogZXhwZWN0aW5nLlxuICpcbiAqIFRoZSBpbnZhcmlhbnQgbWVzc2FnZSB3aWxsIGJlIHN0cmlwcGVkIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgaW52YXJpYW50XG4gKiB3aWxsIHJlbWFpbiB0byBlbnN1cmUgbG9naWMgZG9lcyBub3QgZGlmZmVyIGluIHByb2R1Y3Rpb24uXG4gKi9cblxudmFyIGludmFyaWFudCA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgZm9ybWF0LCBhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB2YXIgZXJyb3I7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgJ01pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50ICcgK1xuICAgICAgICAnZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYXJncyA9IFthLCBiLCBjLCBkLCBlLCBmXTtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJnc1thcmdJbmRleCsrXTsgfSlcbiAgICAgICk7XG4gICAgICBlcnJvci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIH1cblxuICAgIGVycm9yLmZyYW1lc1RvUG9wID0gMTsgLy8gd2UgZG9uJ3QgY2FyZSBhYm91dCBpbnZhcmlhbnQncyBvd24gZnJhbWVcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBpbnZhcmlhbnQ7XG4iLCIvL1xyXG4vLyDjg4bjgq3jgrnjg4jns7tcclxuLy9cclxuXHJcbmV4cG9ydCBjb25zdCBUZXh0ID0ge1xyXG4gICAgLy9cclxuICAgIC8vIOaMh+WumuOBruaWh+Wtl+WIl+OBi+OCieOAgee3qOmbhuOBq+S9v+eUqOOBmeOCi+aWh+Wtl+OCquODluOCuOOCp+OCr+ODiOmFjeWIl+OCkuS9nOaIkOOBl+OBpui/lOOBmVxyXG4gICAgLy9cclxuICAgIC8vIFtJTl1cclxuICAgIC8vICAgc3RyOiDmloflrZfliJfvvIjntKDmnZDvvIlcclxuICAgIC8vIFtPVVRdXHJcbiAgICAvLyAgIOaWh+Wtl+OCquODluOCuOOCp+OCr+ODiOmFjeWIl1xyXG4gICAgLy8gICBbXHJcbiAgICAvLyAgICAgIHtcclxuICAgIC8vICAgICAgICAgIG1vamk6ICfjgYInICAgIOODhuOCreOCueODiDHmloflrZdcclxuICAgIC8vICAgICAgICAgIHNpemVfajog5a2X6Kmw5pa55ZCR44Gu44K144Kk44K677yIMCDjga/jg4fjg5Xjgqnjg6vjg4jmloflrZfjgrXjgqTjgrrjgpLkvb/nlKjjgZnjgovjgajjgYTjgYbmhI/lkbPvvIlcclxuICAgIC8vICAgICAgICAgIHNpemVfZzog6KGM6YCB5pa55ZCR44Gu44K144Kk44K677yIMCDjga/jg4fjg5Xjgqnjg6vjg4jmloflrZfjgrXjgqTjgrrjgpLkvb/nlKjjgZnjgovjgajjgYTjgYbmhI/lkbPvvIlcclxuICAgIC8vICAgICAgICAgIGZvbnQ6IOODleOCqeODs+ODiOeVquWPt++8iDAg44Gv44OH44OV44Kp44Or44OI44OV44Kp44Oz44OI44KS5L2/55So44GZ44KL44Go44GE44GG5oSP5ZGz77yJXHJcbiAgICAvLyAgICAgIH0sXHJcbiAgICAvLyAgICAgIC4uLi4uXHJcbiAgICAvLyAgIF1cclxuICAgIC8vXHJcbiAgICBjcmVhdGVNb2ppT2JqQXJ5OiAoc3RyKSA9PiB7XHJcbiAgICAgICAgbGV0IG1vamlvYmphcnkgPSBbXTtcclxuICAgICAgICBsZXQgbW9qaW9iajtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbW9qaW9iaiA9IHtcclxuICAgICAgICAgICAgICAgIG1vamk6IHN0ci5zdWJzdHIoaSwgMSksXHJcbiAgICAgICAgICAgICAgICBzaXplX2o6IDAsXHJcbiAgICAgICAgICAgICAgICBzaXplX2c6IDAsXHJcbiAgICAgICAgICAgICAgICBmb250OiAwLFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgbW9qaW9iamFyeS5wdXNoKG1vamlvYmopO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG1vamlvYmphcnk7IFxyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLy9cclxuICAgIC8vIOaMh+WumuOCqOODquOCou+8iOWtl+ipsOaWueWQke+8ieOBruevhOWbsuOBq+OAgeaMh+WumuOBruaWh+Wtl+OCquODluOCuOOCp+OCr+ODiOmFjeWIl+OBruODh+ODvOOCv+OCkua1geOBl+OBn+WgtOWQiOOAgVxyXG4gICAgLy8g5L2V5paH5a2X55uu44G+44Gn5YWl44KL44GL44Gu44Kk44Oz44OH44OD44Kv44K544KS6L+U44GZXHJcbiAgICAvL1xyXG4gICAgLy8gW0lOXVxyXG4gICAgLy8gICBtb2ppT2JqQXJ5OiDmloflrZfjgqrjg5bjgrjjgqfjgq/jg4jphY3liJfvvIjvvJHjgaTjga7ntKDmnZDlhajkvZPjga7jgoLjga7vvIlcclxuICAgIC8vICAgc3RhcnQ6IOaWh+Wtl+OCquODluOCuOOCp+OCr+ODiOmFjeWIl+OBruS9leeVquebruOBruaWh+Wtl+OBi+OCiea1geOBmeOBk+OBqOOBq+OBmeOCi+OBruOBi1xyXG4gICAgLy8gICBhcmVhc2l6ZV9qOiDjgqjjg6rjgqLjga7lrZfoqbDmlrnlkJHjga7plbfjgZVcclxuICAgIC8vICAgcGFkZGluZ19zOiDlrZfoqbDmlrnlkJHjgqjjg6rjgqLjga7plovlp4vjg5Hjg4fjgqPjg7PjgrDlgKRcclxuICAgIC8vICAgcGFkZGluZ19lOiDlrZfoqbDmlrnlkJHjgqjjg6rjgqLjga7ntYLkuobjg5Hjg4fjgqPjg7PjgrDlgKRcclxuICAgIC8vICAgZGVmYXVsdFNpemU6IOODhuOCreOCueODiOODh+ODleOCqeODq+ODiOOCteOCpOOCuu+8iOWtl+ipsOaWueWQke+8iVxyXG4gICAgLy9cclxuICAgIC8vIFtPVVRdXHJcbiAgICAvLyAgIFsgaW5kZXgsIG5vcm1hbGd5byBdXHJcbiAgICAvLyAgIGluZGV4OiDkvZXmloflrZfnm67jgb7jgaflhaXjgovjgYvjga7jgqTjg7Pjg4fjg4Pjgq/jgrkgIC0xOjHmloflrZfjgoLlhaXjgonjgarjgYRcclxuICAgIC8vICAgbm9ybWFsZ3lvOiAwOumAmuW4uOOBruihjO+8iOihjOacq+aPg+OBiOOBleOBm+OCi+ihjO+8iVxyXG4gICAgLy8gICAgICAgICAgICAgIDE65paH44Gu6YCU5Lit44Gn5pS56KGM44GV44KM44Gf6KGM44G+44Gf44Gv5pyA57WC6KGM77yI6KGM5pyr5o+D44GI44GV44Gb44Gq44GP44Gm44GE44GE6KGM77yJXHJcbiAgICAvL1xyXG4gICAgZ2V0SmlkdW1lTW9qaU5hZ2FzaGlJbmRleDogKFxyXG4gICAgICAgIG1vamlPYmpBcnksXHJcbiAgICAgICAgc3RhcnQsXHJcbiAgICAgICAgYXJlYXNpemVfaixcclxuICAgICAgICBwYWRkaW5nX3MsXHJcbiAgICAgICAgcGFkZGluZ19lLFxyXG4gICAgICAgIGRlZmF1bHRTaXplLFxyXG4gICAgKSA9PiB7XHJcbiAgICAgICAgbGV0IHBvaW50ZXIgPSAwO1xyXG4gICAgICAgIGxldCBzaXplO1xyXG5cclxuICAgICAgICBwb2ludGVyICs9IHBhZGRpbmdfcztcclxuXHJcbiAgICAgICAgbGV0IGk7XHJcbiAgICAgICAgbGV0IGluZGV4O1xyXG4gICAgICAgIGxldCBub3JtYWxneW8gPSAwO1xyXG5cclxuICAgICAgICBmb3IgKGkgPSBzdGFydDsgaSA8IG1vamlPYmpBcnkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgLy8g5a2X6Kmw44KB5pa55ZCR44Gu5paH5a2X44K144Kk44K644GMIDAg44Gu5aC05ZCI44Gv44CB44OH44OV44Kp44Or44OI44K144Kk44K6XHJcbiAgICAgICAgICAgIGlmIChtb2ppT2JqQXJ5W2ldLnNpemVfaiA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBzaXplID0gZGVmYXVsdFNpemU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzaXplID0gbW9qaU9iakFyeVtpXS5zaXplX2o7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICgocG9pbnRlciArIHNpemUpID4gKGFyZWFzaXplX2ogLSBwYWRkaW5nX2UpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyDjga/jgb/lh7rjgZfjgZ/mloflrZfjgYzmlLnooYzjga7loLTlkIjjga/jgIHmlLnooYzjgoLlkKvjgoHjgotcclxuICAgICAgICAgICAgICAgIC8vIOS9huOBl+OAgeaUueihjOaWh+Wtl+OBjOWFiOmgreOBoOOBo+OBn+WgtOWQiO+8iDHmloflrZfjgoLlhaXjgonjgarjgYTjgqjjg6rjgqLjgaDjgaPjgZ/loLTlkIjvvIlcclxuICAgICAgICAgICAgICAgIC8vIOOBr+OAgeaUueihjOaWh+Wtl+OCkuWQq+OCgeOBquOBhFxyXG4gICAgICAgICAgICAgICAgaWYgKG1vamlPYmpBcnlbaV0ubW9qaSA9PSBcIlxcblwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT0gc3RhcnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8g5pS56KGM44GM5YWI6aCt44Gu5aC05ZCIXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8g5pS56KGM44GM5YWI6aCt44Gn44Gq44GE5aC05ZCIXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkrKztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBub3JtYWxneW8gPSAwOyAgICAvLyDpgJrluLjjga7ooYzvvIjooYzmnKvmj4PjgYjjgZXjgZvjgovooYzvvIlcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyDmlLnooYzmloflrZfjga7loLTlkIjjga/jgIHmlLnooYzmloflrZfjgb7jgafjgafntYLjgo/jgopcclxuICAgICAgICAgICAgaWYgKG1vamlPYmpBcnlbaV0ubW9qaSA9PSBcIlxcblwiKSB7XHJcbiAgICAgICAgICAgICAgICBpKys7XHJcbiAgICAgICAgICAgICAgICBub3JtYWxneW8gPSAxOyAgIC8vIOaWh+OBrumAlOS4reOBp+aUueihjOOBleOCjOOBn+ihjO+8iOihjOacq+aPg+OBiOOBleOBm+OBquOBj+OBpuOBhOOBhOihjO+8iVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHBvaW50ZXIgKz0gc2l6ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChpID09IHN0YXJ0KSB7XHJcbiAgICAgICAgICAgIGluZGV4ID0gLTE7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKGkgPj0gbW9qaU9iakFyeS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIG5vcm1hbGd5byA9IDE7ICAgLy8g5pyA57WC6KGM77yI6KGM5pyr5o+D44GI44GV44Gb44Gq44GP44Gm44GE44GE6KGM77yJXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaW5kZXggPSBpIC0gMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBbaW5kZXgsIG5vcm1hbGd5b107XHJcbiAgICB9LFxyXG5cclxuICAgIC8vXHJcbiAgICAvLyDmjIflrprjgqjjg6rjgqLvvIjlrZfoqbDmlrnlkJHvvInjga7nr4Tlm7LjgavjgIHmjIflrprjga7mloflrZfjgqrjg5bjgrjjgqfjgq/jg4jphY3liJfjga7jg4fjg7zjgr/jgpLmtYHjgZfjgZ/loLTlkIjjgIFcclxuICAgIC8vIOaWh+Wtl+OBruS4reW/g+OBruW6p+aome+8iOWtl+ipsOaWueWQke+8ieOBrumFjeWIl+OCkui/lOOBmVxyXG4gICAgLy8g4oC7IOmAmuW4uOihjO+8iOihjOOBrumAlOS4reOBp+aUueihjOOBl+OBpuOBhOOBquOBhOihjOOAgeOBvuOBn+OBr+acgOe1guihjOOBp+OBquOBhOihjO+8ieOBruWgtOWQiOOBq+S9v+eUqOOBmeOCi1xyXG4gICAgLy9cclxuICAgIC8vIFtJTl1cclxuICAgIC8vICAgbW9qaU9iakFyeTog5paH5a2X44Kq44OW44K444Kn44Kv44OI6YWN5YiX77yI77yR44Gk44Gu57Sg5p2Q5YWo5L2T44Gu44KC44Gu77yJXHJcbiAgICAvLyAgIGluZGV4X3M6IOmWi+Wni+OCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAgLy8gICBpbmRleF9lOiDntYLkuobjgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgIC8vICAgYXJlYXNpemVfajog44Ko44Oq44Ki44Gu5a2X6Kmw5pa55ZCR44Gu6ZW344GVXHJcbiAgICAvLyAgIHBhZGRpbmdfczog5a2X6Kmw5pa55ZCR44Ko44Oq44Ki44Gu6ZaL5aeL44OR44OH44Kj44Oz44Kw5YCkXHJcbiAgICAvLyAgIHBhZGRpbmdfZTog5a2X6Kmw5pa55ZCR44Ko44Oq44Ki44Gu57WC5LqG44OR44OH44Kj44Oz44Kw5YCkXHJcbiAgICAvLyAgIGRlZmF1bHRTaXplOiDjg4bjgq3jgrnjg4jjg4fjg5Xjgqnjg6vjg4jjgrXjgqTjgrrvvIjlrZfoqbDmlrnlkJHvvIlcclxuICAgIC8vXHJcbiAgICAvLyBbT1VUXVxyXG4gICAgLy8gICDmloflrZfjga7kuK3lv4PluqfmqJnvvIjlrZfoqbDjgoHmlrnlkJHjga7jgb/vvInjga7phY3liJdcclxuICAgIC8vXHJcbiAgICBnZXRKaWR1bWVBcnk6IChcclxuICAgICAgICBtb2ppT2JqQXJ5LFxyXG4gICAgICAgIGluZGV4X3MsXHJcbiAgICAgICAgaW5kZXhfZSxcclxuICAgICAgICBhcmVhc2l6ZV9qLFxyXG4gICAgICAgIHBhZGRpbmdfcyxcclxuICAgICAgICBwYWRkaW5nX2UsXHJcbiAgICAgICAgZGVmYXVsdFNpemVcclxuICAgICkgPT4ge1xyXG4gICAgICAgIC8vIOOCqOODquOCouOBrumVt+OBle+8iOODkeODh+OCo+ODs+OCsOOCkumZpOOBhOOBn+OCguOBru+8ieOCkuaxguOCgeOCi1xyXG4gICAgICAgIGNvbnN0IGFyZWFzaXplID0gYXJlYXNpemVfaiAtIChwYWRkaW5nX3MgKyBwYWRkaW5nX2UpO1xyXG5cclxuICAgICAgICAvLyDmloflrZfmlbDjgpLmsYLjgoHjgotcclxuICAgICAgICBsZXQgbW9qaXN1ID0gMDtcclxuICAgICAgICBmb3IgKGxldCBpID0gaW5kZXhfczsgaSA8PSBpbmRleF9lOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKG1vamlPYmpBcnlbaV0ubW9qaSAhPSBcIlxcblwiKSB7XHJcbiAgICAgICAgICAgICAgICBtb2ppc3UrKztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8g5paH5a2X5YiX5YWo5L2T44KS6Laz44GX44Gf6ZW344GV44KS5rGC44KB44KLXHJcbiAgICAgICAgbGV0IG1vamlsZW4gPSAwO1xyXG4gICAgICAgIGxldCBzaXplO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSBpbmRleF9zOyBpIDw9IGluZGV4X2U7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAobW9qaU9iakFyeVtpXS5zaXplX2ogPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgc2l6ZSA9IGRlZmF1bHRTaXplO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc2l6ZSA9IG1vamlPYmpBcnlbaV0uc2l6ZV9qO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAobW9qaU9iakFyeVtpXS5tb2ppICE9IFwiXFxuXCIpIHtcclxuICAgICAgICAgICAgICAgIG1vamlsZW4gKz0gc2l6ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8g5paH5a2X6ZaT44K544Oa44O844K544KS5rGC44KB44KLXHJcbiAgICAgICAgY29uc3QgYW1hcmkgPSBhcmVhc2l6ZSAtIG1vamlsZW47XHJcbiAgICAgICAgY29uc3QgbWFyZ2luID0gYW1hcmkgLyAobW9qaXN1IC0gMSk7XHJcblxyXG4gICAgICAgIC8vIOS4reW/g+W6p+aome+8iOWtl+ipsOaWueWQkeOBruOBv++8iemFjeWIl+OCkuS9nOaIkOOBmeOCi1xyXG4gICAgICAgIGxldCBjZW50ZXJBcnkgPSBbXTtcclxuICAgICAgICBsZXQgcG9pbnRlciA9IDA7XHJcbiAgICAgICAgcG9pbnRlciArPSBwYWRkaW5nX3M7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IGluZGV4X3M7IGkgPD0gaW5kZXhfZTsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChtb2ppT2JqQXJ5W2ldLm1vamkgPT0gXCJcXG5cIikge1xyXG4gICAgICAgICAgICAgICAgY2VudGVyQXJ5LnB1c2goMCk7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKG1vamlPYmpBcnlbaV0uc2l6ZV9qID09IDApIHtcclxuICAgICAgICAgICAgICAgIHNpemUgPSBkZWZhdWx0U2l6ZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHNpemUgPSBtb2ppT2JqQXJ5W2ldLnNpemVfajtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY2VudGVyQXJ5LnB1c2gocG9pbnRlciArIChzaXplIC8gMikpO1xyXG5cclxuICAgICAgICAgICAgcG9pbnRlciArPSBzaXplO1xyXG4gICAgICAgICAgICBwb2ludGVyICs9IG1hcmdpbjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBjZW50ZXJBcnk7ICAgICAgICBcclxuICAgIH0sXHJcblxyXG4gICAgLy9cclxuICAgIC8vIOaMh+WumuOCqOODquOCou+8iOWtl+ipsOaWueWQke+8ieOBruevhOWbsuOBq+OAgeaMh+WumuOBruaWh+Wtl+OCquODluOCuOOCp+OCr+ODiOmFjeWIl+OBruODh+ODvOOCv+OCkua1geOBl+OBn+WgtOWQiOOAgVxyXG4gICAgLy8g5paH5a2X44Gu5Lit5b+D44Gu5bqn5qiZ77yI5a2X6Kmw5pa55ZCR77yJ44Gu6YWN5YiX44KS6L+U44GZXHJcbiAgICAvLyDigLsg5paH44Gu6YCU5Lit44Gn5pS56KGM44GX44Gm44GE44KL6KGM44CB44G+44Gf44Gv5pyA57WC6KGM44Gu5aC05ZCI44Gr5L2/55So44GZ44KLXHJcbiAgICAvL1xyXG4gICAgLy8gW0lOXVxyXG4gICAgLy8gICBtb2ppT2JqQXJ5OiDmloflrZfjgqrjg5bjgrjjgqfjgq/jg4jphY3liJfvvIjmtYHjgZnjgoLjga7jga7jgb/jga7phY3liJfvvIlcclxuICAgIC8vICAgaW5kZXhfczog6ZaL5aeL44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICAvLyAgIGluZGV4X2U6IOe1guS6huOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAgLy8gICBwYWRkaW5nX3M6IOWtl+ipsOaWueWQkeOCqOODquOCouOBrumWi+Wni+ODkeODh+OCo+ODs+OCsOWApFxyXG4gICAgLy8gICBkZWZhdWx0U2l6ZTog44OG44Kt44K544OI44OH44OV44Kp44Or44OI44K144Kk44K677yI5a2X6Kmw5pa55ZCR77yJXHJcbiAgICAvL1xyXG4gICAgLy8gW09VVF1cclxuICAgIC8vICAg5paH5a2X44Gu5Lit5b+D5bqn5qiZ77yI5a2X6Kmw5pa55ZCR44Gu44G/77yJ44Gu6YWN5YiXXHJcbiAgICAvL1xyXG4gICAgZ2V0SmlkdW1lQXJ5U29yb2VOYXNoaTogKFxyXG4gICAgICAgIG1vamlPYmpBcnksXHJcbiAgICAgICAgaW5kZXhfcyxcclxuICAgICAgICBpbmRleF9lLFxyXG4gICAgICAgIHBhZGRpbmdfcyxcclxuICAgICAgICBkZWZhdWx0U2l6ZVxyXG4gICAgKSA9PiB7XHJcbiAgICAgICAgLy8g5paH5a2X5pWw44KS5rGC44KB44KLXHJcbiAgICAgICAgbGV0IG1vamlzdSA9IDA7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IGluZGV4X3M7IGkgPD0gaW5kZXhfZTsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChtb2ppT2JqQXJ5W2ldLm1vamkgIT0gXCJcXG5cIikge1xyXG4gICAgICAgICAgICAgICBtb2ppc3UrKztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8g5Lit5b+D5bqn5qiZ77yI5a2X6Kmw5pa55ZCR44Gu44G/77yJ6YWN5YiX44KS5L2c5oiQ44GZ44KLXHJcbiAgICAgICAgbGV0IGNlbnRlckFyeSA9IFtdO1xyXG4gICAgICAgIGxldCBwb2ludGVyID0gMDtcclxuICAgICAgICBwb2ludGVyICs9IHBhZGRpbmdfcztcclxuICAgICAgICBmb3IgKGxldCBpID0gaW5kZXhfczsgaSA8PSBpbmRleF9lOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKG1vamlPYmpBcnlbaV0ubW9qaSA9PSBcIlxcblwiKSB7XHJcbiAgICAgICAgICAgICAgICBjZW50ZXJBcnkucHVzaCgwKTtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGxldCBzaXplO1xyXG4gICAgICAgICAgICBpZiAobW9qaU9iakFyeVtpXS5zaXplX2ogPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgc2l6ZSA9IGRlZmF1bHRTaXplO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc2l6ZSA9IG1vamlPYmpBcnlbaV0uc2l6ZV9qO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjZW50ZXJBcnkucHVzaChwb2ludGVyICsgKHNpemUgLyAyKSk7XHJcblxyXG4gICAgICAgICAgICBwb2ludGVyICs9IHNpemU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gY2VudGVyQXJ5OyAgICAgICAgXHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICAvL1xyXG4gICAgLy8g5paH5a2X44Kq44OW44K444Kn44Kv44OI6YWN5YiX44Gr44GK44GE44Gm44CB5q6L44KK5YWo6KGM44Gu6ZaL5aeL44Kk44Oz44OH44OD44Kv44K544O757WC5LqG44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICAvLyDjga7jgqrjg5bjgrjjgqfjgq/jg4jphY3liJfjgpLov5TjgZlcclxuICAgIC8vXHJcbiAgICAvLyBbSU5dXHJcbiAgICAvLyAgIG1vamlPYmpBcnk6IOaWh+Wtl+OCquODluOCuOOCp+OCr+ODiOmFjeWIl++8iO+8keOBpOOBrue0oOadkOWFqOS9k+OBruOCguOBru+8iVxyXG4gICAgLy8gICBzdGFydDog6ZaL5aeL44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICAvLyAgIGFyZWFzaXplX2o6IOOCqOODquOCouOBruWtl+ipsOaWueWQkeOBrumVt+OBlVxyXG4gICAgLy8gICBwYWRkaW5nX3M6IOWtl+ipsOaWueWQkeOCqOODquOCouOBrumWi+Wni+ODkeODh+OCo+ODs+OCsOWApFxyXG4gICAgLy8gICBwYWRkaW5nX2U6IOWtl+ipsOaWueWQkeOCqOODquOCouOBrue1guS6huODkeODh+OCo+ODs+OCsOWApFxyXG4gICAgLy8gICBkZWZhdWx0U2l6ZTog44OG44Kt44K544OI44OH44OV44Kp44Or44OI44K144Kk44K677yI5a2X6Kmw5pa55ZCR77yJXHJcbiAgICAvL1xyXG4gICAgLy8gW09VVF1cclxuICAgIC8vICAg5YWo6KGM44Gu6ZaL5aeL44Kk44Oz44OH44OD44Kv44K544O757WC5LqG44Kk44Oz44OH44OD44Kv44K544Gu44Kq44OW44K444Kn44Kv44OI6YWN5YiXXHJcbiAgICAvLyAgIFtcclxuICAgIC8vICAgICAgIHtcclxuICAgIC8vICAgICAgICAgICBzOiDplovlp4vjgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgIC8vICAgICAgICAgICBlOiDntYLkuobjgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgIC8vICAgICAgICAgICBub3JtYWxneW86IDA66YCa5bi46KGM77yI6KGM5pyr5o+D44GI44GZ44KL6KGM77yJIDE66KGM5pyr5o+D44GI44GV44Gb44Gq44GP44Gm44GE44GE6KGMXHJcbiAgICAvLyAgICAgICB9LFxyXG4gICAgLy8gICAgICAgLi4uLlxyXG4gICAgLy8gICBdXHJcbiAgICAvL1xyXG4gICAgZ2V0WmVuR3lvSW5kZXhBcnk6IChcclxuICAgICAgICBtb2ppT2JqQXJ5LFxyXG4gICAgICAgIHN0YXJ0LFxyXG4gICAgICAgIGFyZWFzaXplX2osXHJcbiAgICAgICAgcGFkZGluZ19zLFxyXG4gICAgICAgIHBhZGRpbmdfZSxcclxuICAgICAgICBkZWZhdWx0U2l6ZVxyXG4gICAgKSA9PiB7XHJcbiAgICAgICAgbGV0IGluZGV4QXJ5ID0gW107XHJcbiAgICAgICAgbGV0IGluZGV4T2JqID0ge307XHJcblxyXG4gICAgICAgIGlmIChtb2ppT2JqQXJ5Lmxlbmd0aCA8PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpbmRleEFyeTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHdoaWxlICgxKSB7XHJcbiAgICAgICAgICAgIC8vIOS4gOihjOaWh+OBruOCpOODs+ODh+ODg+OCr+OCueWApOOCkuW+l+OCi1xyXG4gICAgICAgICAgICBsZXQgW2VuZCwgbm9ybWFsZ3lvXSA9IFRleHQuZ2V0SmlkdW1lTW9qaU5hZ2FzaGlJbmRleChcclxuICAgICAgICAgICAgICAgIG1vamlPYmpBcnksXHJcbiAgICAgICAgICAgICAgICBzdGFydCxcclxuICAgICAgICAgICAgICAgIGFyZWFzaXplX2osXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX3MsXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX2UsXHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0U2l6ZVxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgLy8gMeaWh+Wtl+OCguWFpeOCieOBquOBi+OBo+OBn+WgtOWQiOOBr+aKnOOBkeOCi1xyXG4gICAgICAgICAgICBpZiAoZW5kID09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaW5kZXhPYmogPSB7XHJcbiAgICAgICAgICAgICAgICBzOiBzdGFydCxcclxuICAgICAgICAgICAgICAgIGU6IGVuZCxcclxuICAgICAgICAgICAgICAgIG5vcm1hbGd5bzogbm9ybWFsZ3lvLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBpbmRleEFyeS5wdXNoKGluZGV4T2JqKTtcclxuXHJcbiAgICAgICAgICAgIC8vIOe1guS6huOCpOODs+ODh+ODg+OCr+OCueOBjOacgOW+jOOBruaWh+Wtl+OBquOCieaKnOOBkeOCi1xyXG4gICAgICAgICAgICBpZiAoZW5kID49IG1vamlPYmpBcnkubGVuZ3RoIC0gMSkge1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0YXJ0ID0gZW5kICsgMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBpbmRleEFyeTtcclxuICAgIH0sXHJcblxyXG4gICAgLy9cclxuICAgIC8vIOaMh+WumuOBrumWi+Wni+OCpOODs+ODh+ODg+OCr+OCueOBi+OCiee1guS6huOCpOODs+ODh+ODg+OCr+OCueOBvuOBp+OBruaWh+Wtl+WIl+OBruihjOmAgeaWueWQkeOBruacgOWkp+W5heOCkui/lOOBmVxyXG4gICAgLy9cclxuICAgIC8vIFtJTl1cclxuICAgIC8vICAgbW9qaU9iakFyeTog5paH5a2X44Kq44OW44K444Kn44Kv44OI6YWN5YiX77yI77yR44Gk44Gu57Sg5p2Q5YWo5L2T44Gu44KC44Gu77yJXHJcbiAgICAvLyAgIGluZGV4X3M6IOmWi+Wni+OCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAgLy8gICBpbmRleF9lOiDntYLkuobjgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgIC8vICAgZGVmYXVsdFNpemU6IOODh+ODleOCqeODq+ODiOOBruihjOmAgeaWueWQkeOCteOCpOOCulxyXG4gICAgLy9cclxuICAgIC8vIFtPVVRdXHJcbiAgICAvLyAgIOacgOWkp+W5hVxyXG4gICAgLy9cclxuICAgIG1heFNpemVHeW9Pa3VyaTogKFxyXG4gICAgICAgIG1vamlPYmpBcnksXHJcbiAgICAgICAgaW5kZXhfcyxcclxuICAgICAgICBpbmRleF9lLFxyXG4gICAgICAgIGRlZmF1bHRTaXplXHJcbiAgICApID0+IHtcclxuICAgICAgICBsZXQgbWF4ID0gMDtcclxuICAgICAgICBsZXQgc2l6ZTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IGluZGV4X3M7IGkgPD0gaW5kZXhfZTsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChtb2ppT2JqQXJ5W2ldLnNpemVfZyA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBzaXplID0gZGVmYXVsdFNpemU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzaXplID0gbW9qaU9iakFyeVtpXS5zaXplX2c7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChtYXggPCBzaXplKSB7XHJcbiAgICAgICAgICAgICAgICBtYXggPSBzaXplO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbWF4O1xyXG4gICAgfSxcclxuXHJcbiAgICAvL1xyXG4gICAgLy8g5oyH5a6a44Ko44Oq44Ki77yI6KGM6YCB5pa55ZCR77yJ44Gu56+E5Zuy44Gr44CB5oyH5a6a44Gu5paH5a2X44Kq44OW44K444Kn44Kv44OI6YWN5YiX44Gu44OH44O844K/44KS5rWB44GX44Gf5aC05ZCI44CBXHJcbiAgICAvLyDmloflrZfjga7kuK3lv4Pjga7luqfmqJnvvIjooYzpgIHmlrnlkJHvvInjga7phY3liJfjgpLov5TjgZlcclxuICAgIC8vXHJcbiAgICAvLyBbSU5dXHJcbiAgICAvLyAgIG1vamlPYmpBcnk6IOaWh+Wtl+OCquODluOCuOOCp+OCr+ODiOmFjeWIl++8iO+8keOBpOOBrue0oOadkOWFqOS9k+OBruOCguOBru+8iVxyXG4gICAgLy8gICBzdGFydDog6ZaL5aeL44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICAvLyAgIGFyZWFzaXplX2o6IOOCqOODquOCouOBruWtl+ipsOaWueWQkeOBrumVt+OBlVxyXG4gICAgLy8gICBhcmVhc2l6ZV9nOiDjgqjjg6rjgqLjga7ooYzpgIHmlrnlkJHjga7plbfjgZVcclxuICAgIC8vICAgcGFkZGluZ19qczog5a2X6Kmw5pa55ZCR44Ko44Oq44Ki44Gu6ZaL5aeL44OR44OH44Kj44Oz44Kw5YCkXHJcbiAgICAvLyAgIHBhZGRpbmdfamU6IOWtl+ipsOaWueWQkeOCqOODquOCouOBrue1guS6huODkeODh+OCo+ODs+OCsOWApFxyXG4gICAgLy8gICBwYWRkaW5nX2dzOiDooYzpgIHmlrnlkJHjgqjjg6rjgqLjga7plovlp4vjg5Hjg4fjgqPjg7PjgrDlgKRcclxuICAgIC8vICAgcGFkZGluZ19nZTog6KGM6YCB5pa55ZCR44Ko44Oq44Ki44Gu57WC5LqG44OR44OH44Kj44Oz44Kw5YCkXHJcbiAgICAvLyAgIGRlZmF1bHRTaXplOiDjg4fjg5Xjgqnjg6vjg4jmloflrZfjgrXjgqTjgrrvvIjooYzpgIHmlrnlkJHvvIlcclxuICAgIC8vICAgZ3lva2FuOiDooYzplpPjgrXjgqTjgrpcclxuICAgIC8vXHJcbiAgICAvLyBbT1VUXVxyXG4gICAgLy8gICDmloflrZfjga7kuK3lv4PluqfmqJnvvIjooYzpgIHmlrnlkJHjga7jgb/vvInjga7phY3liJdcclxuICAgIC8vXHJcbiAgICBnZXRHeW9va3VyaUFyeTogKFxyXG4gICAgICAgIG1vamlPYmpBcnksXHJcbiAgICAgICAgc3RhcnQsXHJcbiAgICAgICAgYXJlYXNpemVfaixcclxuICAgICAgICBhcmVhc2l6ZV9nLFxyXG4gICAgICAgIHBhZGRpbmdfanMsXHJcbiAgICAgICAgcGFkZGluZ19qZSxcclxuICAgICAgICBwYWRkaW5nX2dzLFxyXG4gICAgICAgIHBhZGRpbmdfZ2UsXHJcbiAgICAgICAgZGVmYXVsdFNpemUsXHJcbiAgICAgICAgZ3lva2FuXHJcbiAgICApID0+IHtcclxuICAgICAgICBsZXQgY2VudGVyQXJ5ID0gW107XHJcbiAgICAgICAgbGV0IG1heF93aWR0aCA9IDA7XHJcblxyXG4gICAgICAgIC8vIOa1geOBl+OBn+WgtOWQiOOBruihjOWNmOS9jeOCpOODs+ODh+ODg+OCr+OCuemFjeWIl+OCkuWPluW+l+OBmeOCi1xyXG4gICAgICAgIGNvbnN0IGd5b0luZGV4QXJ5ID0gVGV4dC5nZXRaZW5HeW9JbmRleEFyeShcclxuICAgICAgICAgICAgbW9qaU9iakFyeSxcclxuICAgICAgICAgICAgc3RhcnQsXHJcbiAgICAgICAgICAgIGFyZWFzaXplX2osXHJcbiAgICAgICAgICAgIHBhZGRpbmdfanMsXHJcbiAgICAgICAgICAgIHBhZGRpbmdfamUsXHJcbiAgICAgICAgICAgIGRlZmF1bHRTaXplXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgbGV0IHBvaW50ZXIgPSAwO1xyXG4gICAgICAgIHBvaW50ZXIgKz0gcGFkZGluZ19ncztcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGd5b0luZGV4QXJ5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIC8vIOihjOOBruacgOWkp+W5heOCkuW+l+OCi1xyXG4gICAgICAgICAgICBtYXhfd2lkdGggPSBUZXh0Lm1heFNpemVHeW9Pa3VyaShcclxuICAgICAgICAgICAgICAgIG1vamlPYmpBcnksXHJcbiAgICAgICAgICAgICAgICBneW9JbmRleEFyeVtpXS5zLFxyXG4gICAgICAgICAgICAgICAgZ3lvSW5kZXhBcnlbaV0uZSxcclxuICAgICAgICAgICAgICAgIGRlZmF1bHRTaXplXHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICBpZiAoKHBvaW50ZXIgKyBtYXhfd2lkdGgpID4gKGFyZWFzaXplX2cgLSBwYWRkaW5nX2dlKSkge1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNlbnRlckFyeS5wdXNoKHBvaW50ZXIgKyAobWF4X3dpZHRoIC8gMikpO1xyXG5cclxuICAgICAgICAgICAgcG9pbnRlciArPSBtYXhfd2lkdGg7XHJcbiAgICAgICAgICAgIHBvaW50ZXIgKz0gZ3lva2FuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGNlbnRlckFyeTtcclxuICAgIH0sXHJcblxyXG4gICAgLy9cclxuICAgIC8vIOaMh+WumuOCqOODquOCouOBq+aWh+Wtl+WIl+OCkua1geOBl+OBn+mam+OBruS4reW/g+W6p+aomSBb5a2X6Kmw44KB5pa55ZCR5bqn5qiZLCDooYzpgIHjgormlrnlkJHluqfmqJldIOOBrumFjeWIl+OCkui/lOOBmVxyXG4gICAgLy9cclxuICAgIC8vIFtJTl1cclxuICAgIC8vICAgbW9qaU9iakFyeTog5paH5a2X44Kq44OW44K444Kn44Kv44OI6YWN5YiX77yI77yR44Gk44Gu57Sg5p2Q5YWo5L2T44Gu44KC44Gu77yJXHJcbiAgICAvLyAgIHN0YXJ0OiDplovlp4vjgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgIC8vICAgYXJlYXNpemVfajog5a2X6Kmw5pa55ZCR44Gu44Ko44Oq44Ki44K144Kk44K6XHJcbiAgICAvLyAgIGFyZWFzaXplX2c6IOihjOmAgeaWueWQkeOBruOCqOODquOCouOCteOCpOOCulxyXG4gICAgLy8gICBwYWRkaW5nX2pzOiDlrZfoqbDmlrnlkJHjga7plovlp4vjg5Hjg4fjgqPjg7PjgrDlgKRcclxuICAgIC8vICAgcGFkZGluZ19qZTog5a2X6Kmw5pa55ZCR44Gu57WC5LqG44OR44OH44Kj44Oz44Kw5YCkXHJcbiAgICAvLyAgIHBhZGRpbmdfZ3M6IOihjOmAgeaWueWQkeOBrumWi+Wni+ODkeODh+OCo+ODs+OCsOWApFxyXG4gICAgLy8gICBwYWRkaW5nX2dlOiDooYzpgIHmlrnlkJHjga7ntYLkuobjg5Hjg4fjgqPjg7PjgrDlgKRcclxuICAgIC8vICAgc2l6ZV9qOiDjg4fjg5Xjgqnjg6vjg4jmloflrZfjgrXjgqTjgrrvvIjlrZfoqbDjgoHmlrnlkJHvvIlcclxuICAgIC8vICAgc2l6ZV9nOiDjg4fjg5Xjgqnjg6vjg4jmloflrZfjgrXjgqTjgrrvvIjooYzpgIHjgormlrnlkJHvvIlcclxuICAgIC8vICAgZ3lva2FuOiDooYzplpPjgrXjgqTjgrogXHJcbiAgICAvL1xyXG4gICAgLy8gW09VVF1cclxuICAgIC8vICAgWyDkuK3lv4PluqfmqJnphY3liJcsIOe1guS6huOCpOODs+ODh+ODg+OCr+OCuSBdXHJcbiAgICAvLyAgIFxyXG4gICAgLy8gICAgICAg5Lit5b+D5bqn5qiZ6YWN5YiX77yaXHJcbiAgICAvLyAgICAgICAgIFtcclxuICAgIC8vICAgICAgICAgICAgIFvlrZfoqbDjgoHmlrnlkJHluqfmqJksIOihjOmAgeOCiuaWueWQkeW6p+aomV0sICAgPC0tLS0g5paH5a2X44Gu5Lit5b+D5bqn5qiZXHJcbiAgICAvLyAgICAgICAgICAgICBb5a2X6Kmw44KB5pa55ZCR5bqn5qiZLCDooYzpgIHjgormlrnlkJHluqfmqJldLFxyXG4gICAgLy8gICAgICAgICAgICAgLi4uLlxyXG4gICAgLy8gICAgICAgICBdIFxyXG4gICAgLy8gICAgICAg57WC5LqG44Kk44Oz44OH44OD44Kv44K577yaXHJcbiAgICAvLyAgICAgICAgIC0xOiAx5paH5a2X44KC5rWB44Gb44Gq44GL44Gj44GfICBcclxuICAgIC8vXHJcbiAgICBnZXROYWdhc2hpQ2VudGVyQXJ5OiAoXHJcbiAgICAgICAgbW9qaU9iakFyeSxcclxuICAgICAgICBzdGFydCxcclxuICAgICAgICBhcmVhc2l6ZV9qLFxyXG4gICAgICAgIGFyZWFzaXplX2csXHJcbiAgICAgICAgcGFkZGluZ19qcyxcclxuICAgICAgICBwYWRkaW5nX2plLFxyXG4gICAgICAgIHBhZGRpbmdfZ3MsXHJcbiAgICAgICAgcGFkZGluZ19nZSxcclxuICAgICAgICBzaXplX2osXHJcbiAgICAgICAgc2l6ZV9nLFxyXG4gICAgICAgIGd5b2thblxyXG4gICAgKSA9PiB7XHJcbiAgICAgICAgbGV0IGNlbnRlckFyeSA9IFtdO1xyXG5cclxuICAgICAgICAvLyDlvZPjgqjjg6rjgqLjgavmloflrZfliJfjgpLmtYHjgZfjgZ/loLTlkIjjga7ooYzljZjkvY3jgqTjg7Pjg4fjg4Pjgq/jgrnmg4XloLHjgpLlvpfjgotcclxuICAgICAgICBjb25zdCB6ZW5HeW9JbmRleEFyeSA9IFRleHQuZ2V0WmVuR3lvSW5kZXhBcnkoXHJcbiAgICAgICAgICAgIG1vamlPYmpBcnksXHJcbiAgICAgICAgICAgIHN0YXJ0LFxyXG4gICAgICAgICAgICBhcmVhc2l6ZV9qLFxyXG4gICAgICAgICAgICBwYWRkaW5nX2pzLFxyXG4gICAgICAgICAgICBwYWRkaW5nX2plLFxyXG4gICAgICAgICAgICBzaXplX2osXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgLy8g5paH5a2X44Gu5Lit5b+D44Gu5bqn5qiZ77yI6KGM6YCB5pa55ZCR77yJ44Gu6YWN5YiX44KS5b6X44KLXHJcbiAgICAgICAgY29uc3QgZ3lvb2t1cmlBcnkgPSBUZXh0LmdldEd5b29rdXJpQXJ5KFxyXG4gICAgICAgICAgICBtb2ppT2JqQXJ5LFxyXG4gICAgICAgICAgICBzdGFydCxcclxuICAgICAgICAgICAgYXJlYXNpemVfaixcclxuICAgICAgICAgICAgYXJlYXNpemVfZyxcclxuICAgICAgICAgICAgcGFkZGluZ19qcyxcclxuICAgICAgICAgICAgcGFkZGluZ19qZSxcclxuICAgICAgICAgICAgcGFkZGluZ19ncyxcclxuICAgICAgICAgICAgcGFkZGluZ19nZSxcclxuICAgICAgICAgICAgc2l6ZV9nLFxyXG4gICAgICAgICAgICBneW9rYW5cclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBsZXQgamlkdW1lQXJ5O1xyXG5cclxuICAgICAgICBsZXQgZywgajtcclxuICAgICAgICBmb3IgKGcgPSAwOyBnIDwgZ3lvb2t1cmlBcnkubGVuZ3RoOyBnKyspIHtcclxuICAgICAgICAgICAgaWYgKHplbkd5b0luZGV4QXJ5W2ddLm5vcm1hbGd5byA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBqaWR1bWVBcnkgPSBUZXh0LmdldEppZHVtZUFyeShcclxuICAgICAgICAgICAgICAgICAgICBtb2ppT2JqQXJ5LFxyXG4gICAgICAgICAgICAgICAgICAgIHplbkd5b0luZGV4QXJ5W2ddLnMsXHJcbiAgICAgICAgICAgICAgICAgICAgemVuR3lvSW5kZXhBcnlbZ10uZSxcclxuICAgICAgICAgICAgICAgICAgICBhcmVhc2l6ZV9qLFxyXG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmdfanMsXHJcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZ19qZSxcclxuICAgICAgICAgICAgICAgICAgICBzaXplX2pcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBqaWR1bWVBcnkgPSBUZXh0LmdldEppZHVtZUFyeVNvcm9lTmFzaGkoXHJcbiAgICAgICAgICAgICAgICAgICAgbW9qaU9iakFyeSxcclxuICAgICAgICAgICAgICAgICAgICB6ZW5HeW9JbmRleEFyeVtnXS5zLFxyXG4gICAgICAgICAgICAgICAgICAgIHplbkd5b0luZGV4QXJ5W2ddLmUsXHJcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZ19qcyxcclxuICAgICAgICAgICAgICAgICAgICBzaXplX2pcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBqaWR1bWVBcnkubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgIGNlbnRlckFyeS5wdXNoKFtqaWR1bWVBcnlbal0sIGd5b29rdXJpQXJ5W2ddXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIOe1guS6huOCpOODs+ODh+ODg+OCr+OCueOCkuW+l+OCi1xyXG4gICAgICAgIGxldCBlbmRfaW5kZXg7XHJcbiAgICAgICAgaWYgKGcgPD0gMCkge1xyXG4gICAgICAgICAgICBlbmRfaW5kZXggPSAtMTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBlbmRfaW5kZXggPSB6ZW5HeW9JbmRleEFyeVtnIC0gMV0uZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBbY2VudGVyQXJ5LCBlbmRfaW5kZXhdO1xyXG4gICAgfSxcclxuXHJcbiAgICAvL1xyXG4gICAgLy8g5paH5a2X5rWB44GX57WQ5p6c5oOF5aCx77yI44Kq44OW44K444Kn44Kv44OI44Gu6YWN5YiX77yJ44KS6L+U44GZXHJcbiAgICAvL1xyXG4gICAgLy8gW0lOXVxyXG4gICAgLy8gICBjZW50ZXJBcnk6IOaWh+Wtl+S4reW/g+W6p+aomemFjeWIl1xyXG4gICAgLy8gICBtb2ppT2JqQXJ5OiDmloflrZfjgqrjg5bjgrjjgqfjgq/jg4jphY3liJfvvIjvvJHjgaTjga7ntKDmnZDlhajkvZPjga7jgoLjga7vvIlcclxuICAgIC8vICAgc3RhcnQ6IOmWi+Wni+OCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAgLy9cclxuICAgIC8vIFtPVVRdXHJcbiAgICAvLyAgIOa1geOBl+e1kOaenOmFjeWIl1xyXG4gICAgLy8gICAgICBbXHJcbiAgICAvLyAgICAgICAgICB7XHJcbiAgICAvLyAgICAgICAgICAgICAgIG1vamk6ICfjgYInICAg5paH5a2XXHJcbiAgICAvLyAgICAgICAgICAgICAgIHNpemVfajog5paH5a2X44K144Kk44K677yIMDrjg4fjg5Xjgqnjg6vjg4jjgrXjgqTjgrrvvIlcclxuICAgIC8vICAgICAgICAgICAgICAgc2l6ZV9nOiDmloflrZfjgrXjgqTjgrrvvIgwOuODh+ODleOCqeODq+ODiOOCteOCpOOCuu+8iVxyXG4gICAgLy8gICAgICAgICAgICAgICBqOiDkuK3lv4PluqfmqJnvvIjlrZfoqbDmlrnlkJHvvIlcclxuICAgIC8vICAgICAgICAgICAgICAgZzog5Lit5b+D5bqn5qiZ77yI6KGM6YCB5pa55ZCR77yJXHJcbiAgICAvLyAgICAgICAgICB9LFxyXG4gICAgLy8gICAgICAgICAgLi4uLi4uXHJcbiAgICAvLyAgICAgIF1cclxuICAgIC8vXHJcbiAgICBuYWdhc2hpUmVzdWx0OiAoXHJcbiAgICAgICAgY2VudGVyQXJ5LFxyXG4gICAgICAgIG1vamlPYmpBcnksXHJcbiAgICAgICAgc3RhcnRcclxuICAgICkgPT4ge1xyXG4gICAgICAgIGxldCBuYWdhc2hpQXJ5ID0gW107XHJcbiAgICAgICAgbGV0IG9iaiA9IHt9O1xyXG5cclxuICAgICAgICBsZXQgbW9qaV9pID0gc3RhcnQ7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2VudGVyQXJ5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIG9iaiA9IHtcclxuICAgICAgICAgICAgICAgIG1vamk6IG1vamlPYmpBcnlbbW9qaV9pXS5tb2ppLFxyXG4gICAgICAgICAgICAgICAgc2l6ZV9qOiBtb2ppT2JqQXJ5W21vamlfaV0uc2l6ZV9qLFxyXG4gICAgICAgICAgICAgICAgc2l6ZV9nOiBtb2ppT2JqQXJ5W21vamlfaV0uc2l6ZV9nLFxyXG4gICAgICAgICAgICAgICAgajogY2VudGVyQXJ5W2ldWzBdLFxyXG4gICAgICAgICAgICAgICAgZzogY2VudGVyQXJ5W2ldWzFdLFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgbmFnYXNoaUFyeS5wdXNoKG9iaik7XHJcblxyXG4gICAgICAgICAgICBtb2ppX2krKztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBuYWdhc2hpQXJ5O1xyXG4gICAgfVxyXG59XHJcbiIsImV4cG9ydCBjb25zdCBTQUdBX05BR0FTSElSRVNVTFRfQ1JFQVRFID0gJ1NBR0FfTkFHQVNISVJFU1VMVF9DUkVBVEUnO1xyXG5leHBvcnQgY29uc3QgU0FHQV9OQUdBU0hJX1JFTU9WRSA9ICdTQUdBX05BR0FTSElfUkVNT1ZFJztcclxuXHJcblxyXG5leHBvcnQgY29uc3QgU2FnYV9OYWdhc2hpUmVzdWx0X0NyZWF0ZSA9IChwYXlsb2FkID0ge30pID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdHlwZTogU0FHQV9OQUdBU0hJUkVTVUxUX0NSRUFURSxcclxuICAgICAgICBwYXlsb2FkOiB7XHJcbiAgICAgICAgICAgIGJveF9pZDogcGF5bG9hZC5ib3hfaWQsXHJcbiAgICAgICAgICAgIG5hZ2FzaGlSZXN1bHQ6ICBwYXlsb2FkLm5hZ2FzaGlSZXN1bHQsXHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBTYWdhX05hZ2FzaGlfUmVtb3ZlID0gKHBheWxvYWQgPSB7fSkgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiBTQUdBX05BR0FTSElfUkVNT1ZFLFxyXG4gICAgICAgIHBheWxvYWQ6IHtcclxuICAgICAgICAgICAgZ3JvdXA6IHBheWxvYWQuZ3JvdXAsXHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuIiwiaW1wb3J0IHsgTGliQXJyYXkgfSBmcm9tIFwiLi9hcnJheVwiO1xyXG5cclxuLy9cclxuLy8g44Oc44OD44Kv44K56Zai6YCjXHJcbi8vXHJcblxyXG5leHBvcnQgY29uc3QgQm94ID0ge1xyXG4gICAgLy9cclxuICAgIC8vIOODnOODg+OCr+OCuUlE44GL44KJ44CB44Oc44OD44Kv44K544Os44Kz44O844OJ44KS6L+U44GZXHJcbiAgICAvL1xyXG4gICAgLy8gW0lOXVxyXG4gICAgLy8gICBib3hzOiDjg5zjg4Pjgq/jgrnmg4XloLFcclxuICAgIC8vICAgaWQ6IOODnOODg+OCr+OCuUlEXHJcbiAgICAvL1xyXG4gICAgLy8gW09VVF1cclxuICAgIC8vICAgcmVjOiDjg5zjg4Pjgq/jgrnjg6zjgrPjg7zjg4lcclxuICAgIC8vXHJcbiAgICBnZXRCb3g6IChib3hzLCBpZCkgPT4ge1xyXG4gICAgICAgIGxldCBib3ggPSAnJztcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBib3hzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChib3hzW2ldLmlkID09IGlkKSB7XHJcbiAgICAgICAgICAgICAgICBib3ggPSBib3hzW2ldO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBib3g7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vXHJcbiAgICAvLyDjg5zjg4Pjgq/jgrlJROOBi+OCieOAgeOCsOODq+ODvOODl+WQjeOBqE5v44KS6L+U44GZXHJcbiAgICAvL1xyXG4gICAgLy8gW0lOXVxyXG4gICAgLy8gICBib3hzOiDjg5zjg4Pjgq/jgrnmg4XloLFcclxuICAgIC8vICAgaWQ6IOODnOODg+OCr+OCuUlEXHJcbiAgICAvL1xyXG4gICAgLy8gW09VVF1cclxuICAgIC8vICAgW2dyb3VwLCBub11cclxuICAgIC8vXHJcbiAgICBnZXRHcm91cEFuZE5vOiAoYm94cywgaWQpID0+IHtcclxuICAgICAgICBsZXQgZ3JvdXAgPSAnJztcclxuICAgICAgICBsZXQgbm8gPSAtMTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBib3hzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChib3hzW2ldLmlkID09IGlkKSB7XHJcbiAgICAgICAgICAgICAgICBncm91cCA9IGJveHNbaV0uZ3JvdXA7XHJcbiAgICAgICAgICAgICAgICBubyA9IGJveHNbaV0ubm87XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIFtncm91cCwgbm9dXHJcbiAgICB9LFxyXG5cclxuICAgIC8vXHJcbiAgICAvLyDjg5zjg4Pjgq/jgrnjg6rjgrnjg4jjga7lhajjgrDjg6vjg7zjg5fjga7jgrDjg6vjg7zjg5flkI3phY3liJfjgpLov5TjgZlcclxuICAgIC8vXHJcbiAgICAvLyBbSU5dXHJcbiAgICAvLyAgIGJveHM6IOODnOODg+OCr+OCueaDheWgsVxyXG4gICAgLy9cclxuICAgIC8vIFtPVVRdXHJcbiAgICAvLyAgIFtncm91cCwgZ3JvdXAsIGdyb3VwLCAuLi5dICA8LS0tIOOCsOODq+ODvOODl+WQjeOBrumFjeWIl1xyXG4gICAgLy9cclxuICAgIGdldEdyb3VwQXJ5OiAoYm94cykgPT4ge1xyXG4gICAgICAgIGxldCBhcnkgPSBbXTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBib3hzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGFyeSA9IExpYkFycmF5LnNldEFycmF5VW5pcXVlKGFyeSwgYm94c1tpXS5ncm91cCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gYXJ5O1xyXG4gICAgfSxcclxuXHJcbiAgICAvL1xyXG4gICAgLy8g44Kw44Or44O844OX5ZCN44GL44KJ44CB44Kw44Or44O844OXTm/jga7kuIDopqfvvIjphY3liJfvvInjgpLov5TjgZlcclxuICAgIC8vXHJcbiAgICAvLyBbSU5dXHJcbiAgICAvLyAgIGJveHM6IOODnOODg+OCr+OCueaDheWgsVxyXG4gICAgLy8gICBncm91cDog44Kw44Or44O844OX5ZCNXHJcbiAgICAvL1xyXG4gICAgLy8gW09VVF1cclxuICAgIC8vICAgWyBubywgbm8sIG5vLCAuLi4gXSAgPC0tLSDjgrDjg6vjg7zjg5dOb+OBrumFjeWIl1xyXG4gICAgLy9cclxuICAgIGdldEdyb3VwTm9Bcnk6IChib3hzLCBncm91cCkgPT4ge1xyXG4gICAgICAgIGxldCBhcnkgPSBbXTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBib3hzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChib3hzW2ldLmdyb3VwID09IGdyb3VwKSB7XHJcbiAgICAgICAgICAgICAgICBhcnkucHVzaChib3hzW2ldLm5vKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYXJ5LnNvcnQoKGEsIGIpID0+IGEgLSBiKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGFyeTtcclxuICAgIH0sXHJcblxyXG4gICAgLy9cclxuICAgIC8vIOOCsOODq+ODvOODl+WQjeOBqOOCsOODq+ODvOODl05v44GL44KJ44CB44Oc44OD44Kv44K5SUTjgpLov5TjgZlcclxuICAgIC8vXHJcbiAgICAvLyBbSU5dXHJcbiAgICAvLyAgIGJveHM6IOODnOODg+OCr+OCueaDheWgsVxyXG4gICAgLy8gICBncm91cDog44Kw44Or44O844OX5ZCNXHJcbiAgICAvLyAgIG5vOiDjgrDjg6vjg7zjg5dOb1xyXG4gICAgLy9cclxuICAgIC8vIFtPVVRdXHJcbiAgICAvLyAgIGlkOiDjg5zjg4Pjgq/jgrlJRFxyXG4gICAgLy9cclxuICAgIGdldEJveElkOiAoYm94cywgZ3JvdXAsIG5vKSA9PiB7XHJcbiAgICAgICAgbGV0IGlkID0gJyc7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYm94cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoYm94c1tpXS5ncm91cCA9PSBncm91cCAmJiBib3hzW2ldLm5vID09IG5vKSB7XHJcbiAgICAgICAgICAgICAgICBpZCA9IGJveHNbaV0uaWQ7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGlkO1xyXG4gICAgfSxcclxuXHJcbiAgICBnZXRMaW5rR3JvdXA6IChib3hzLCBsaW5rcywgc296YWlfaWQpID0+IHtcclxuICAgICAgICBsZXQgZ3JvdXAgPSAnJztcclxuICAgICAgICBsZXQgbm87XHJcblxyXG4gICAgICAgIGxldCBib3hfaWQgPSAnJztcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbmtzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChsaW5rc1tpXS5zb3phaV9pZCA9PSBzb3phaV9pZCkge1xyXG4gICAgICAgICAgICAgICAgYm94X2lkID0gbGlua3NbaV0uYm94X2lkO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChib3hfaWQgIT0gJycpIHtcclxuICAgICAgICAgICAgW2dyb3VwLCBub10gPSBCb3guZ2V0R3JvdXBBbmRObyhib3hzLCBib3hfaWQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGdyb3VwO1xyXG4gICAgfVxyXG59IiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyICR0eXBlZCA9IHJlcXVpcmUoJy4vX3R5cGVkJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0luZGV4ID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBhcnJheUZpbGwgPSByZXF1aXJlKCcuL19hcnJheS1maWxsJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7XG52YXIgREFUQV9WSUVXID0gJ0RhdGFWaWV3JztcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBXUk9OR19MRU5HVEggPSAnV3JvbmcgbGVuZ3RoISc7XG52YXIgV1JPTkdfSU5ERVggPSAnV3JvbmcgaW5kZXghJztcbnZhciAkQXJyYXlCdWZmZXIgPSBnbG9iYWxbQVJSQVlfQlVGRkVSXTtcbnZhciAkRGF0YVZpZXcgPSBnbG9iYWxbREFUQV9WSUVXXTtcbnZhciBNYXRoID0gZ2xvYmFsLk1hdGg7XG52YXIgUmFuZ2VFcnJvciA9IGdsb2JhbC5SYW5nZUVycm9yO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNoYWRvdy1yZXN0cmljdGVkLW5hbWVzXG52YXIgSW5maW5pdHkgPSBnbG9iYWwuSW5maW5pdHk7XG52YXIgQmFzZUJ1ZmZlciA9ICRBcnJheUJ1ZmZlcjtcbnZhciBhYnMgPSBNYXRoLmFicztcbnZhciBwb3cgPSBNYXRoLnBvdztcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgbG9nID0gTWF0aC5sb2c7XG52YXIgTE4yID0gTWF0aC5MTjI7XG52YXIgQlVGRkVSID0gJ2J1ZmZlcic7XG52YXIgQllURV9MRU5HVEggPSAnYnl0ZUxlbmd0aCc7XG52YXIgQllURV9PRkZTRVQgPSAnYnl0ZU9mZnNldCc7XG52YXIgJEJVRkZFUiA9IERFU0NSSVBUT1JTID8gJ19iJyA6IEJVRkZFUjtcbnZhciAkTEVOR1RIID0gREVTQ1JJUFRPUlMgPyAnX2wnIDogQllURV9MRU5HVEg7XG52YXIgJE9GRlNFVCA9IERFU0NSSVBUT1JTID8gJ19vJyA6IEJZVEVfT0ZGU0VUO1xuXG4vLyBJRUVFNzU0IGNvbnZlcnNpb25zIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvaWVlZTc1NFxuZnVuY3Rpb24gcGFja0lFRUU3NTQodmFsdWUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgYnVmZmVyID0gbmV3IEFycmF5KG5CeXRlcyk7XG4gIHZhciBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxO1xuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMTtcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxO1xuICB2YXIgcnQgPSBtTGVuID09PSAyMyA/IHBvdygyLCAtMjQpIC0gcG93KDIsIC03NykgOiAwO1xuICB2YXIgaSA9IDA7XG4gIHZhciBzID0gdmFsdWUgPCAwIHx8IHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDAgPyAxIDogMDtcbiAgdmFyIGUsIG0sIGM7XG4gIHZhbHVlID0gYWJzKHZhbHVlKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICBpZiAodmFsdWUgIT0gdmFsdWUgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIG0gPSB2YWx1ZSAhPSB2YWx1ZSA/IDEgOiAwO1xuICAgIGUgPSBlTWF4O1xuICB9IGVsc2Uge1xuICAgIGUgPSBmbG9vcihsb2codmFsdWUpIC8gTE4yKTtcbiAgICBpZiAodmFsdWUgKiAoYyA9IHBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tO1xuICAgICAgYyAqPSAyO1xuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gYztcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBwb3coMiwgMSAtIGVCaWFzKTtcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKys7XG4gICAgICBjIC89IDI7XG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDA7XG4gICAgICBlID0gZU1heDtcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKHZhbHVlICogYyAtIDEpICogcG93KDIsIG1MZW4pO1xuICAgICAgZSA9IGUgKyBlQmlhcztcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogcG93KDIsIGVCaWFzIC0gMSkgKiBwb3coMiwgbUxlbik7XG4gICAgICBlID0gMDtcbiAgICB9XG4gIH1cbiAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW2krK10gPSBtICYgMjU1LCBtIC89IDI1NiwgbUxlbiAtPSA4KTtcbiAgZSA9IGUgPDwgbUxlbiB8IG07XG4gIGVMZW4gKz0gbUxlbjtcbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbaSsrXSA9IGUgJiAyNTUsIGUgLz0gMjU2LCBlTGVuIC09IDgpO1xuICBidWZmZXJbLS1pXSB8PSBzICogMTI4O1xuICByZXR1cm4gYnVmZmVyO1xufVxuZnVuY3Rpb24gdW5wYWNrSUVFRTc1NChidWZmZXIsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMTtcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDE7XG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcbiAgdmFyIG5CaXRzID0gZUxlbiAtIDc7XG4gIHZhciBpID0gbkJ5dGVzIC0gMTtcbiAgdmFyIHMgPSBidWZmZXJbaS0tXTtcbiAgdmFyIGUgPSBzICYgMTI3O1xuICB2YXIgbTtcbiAgcyA+Pj0gNztcbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IGUgKiAyNTYgKyBidWZmZXJbaV0sIGktLSwgbkJpdHMgLT0gOCk7XG4gIG0gPSBlICYgKDEgPDwgLW5CaXRzKSAtIDE7XG4gIGUgPj49IC1uQml0cztcbiAgbkJpdHMgKz0gbUxlbjtcbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IG0gKiAyNTYgKyBidWZmZXJbaV0sIGktLSwgbkJpdHMgLT0gOCk7XG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhcztcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiBzID8gLUluZmluaXR5IDogSW5maW5pdHk7XG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBwb3coMiwgbUxlbik7XG4gICAgZSA9IGUgLSBlQmlhcztcbiAgfSByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIHBvdygyLCBlIC0gbUxlbik7XG59XG5cbmZ1bmN0aW9uIHVucGFja0kzMihieXRlcykge1xuICByZXR1cm4gYnl0ZXNbM10gPDwgMjQgfCBieXRlc1syXSA8PCAxNiB8IGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXTtcbn1cbmZ1bmN0aW9uIHBhY2tJOChpdCkge1xuICByZXR1cm4gW2l0ICYgMHhmZl07XG59XG5mdW5jdGlvbiBwYWNrSTE2KGl0KSB7XG4gIHJldHVybiBbaXQgJiAweGZmLCBpdCA+PiA4ICYgMHhmZl07XG59XG5mdW5jdGlvbiBwYWNrSTMyKGl0KSB7XG4gIHJldHVybiBbaXQgJiAweGZmLCBpdCA+PiA4ICYgMHhmZiwgaXQgPj4gMTYgJiAweGZmLCBpdCA+PiAyNCAmIDB4ZmZdO1xufVxuZnVuY3Rpb24gcGFja0Y2NChpdCkge1xuICByZXR1cm4gcGFja0lFRUU3NTQoaXQsIDUyLCA4KTtcbn1cbmZ1bmN0aW9uIHBhY2tGMzIoaXQpIHtcbiAgcmV0dXJuIHBhY2tJRUVFNzU0KGl0LCAyMywgNCk7XG59XG5cbmZ1bmN0aW9uIGFkZEdldHRlcihDLCBrZXksIGludGVybmFsKSB7XG4gIGRQKENbUFJPVE9UWVBFXSwga2V5LCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpc1tpbnRlcm5hbF07IH0gfSk7XG59XG5cbmZ1bmN0aW9uIGdldCh2aWV3LCBieXRlcywgaW5kZXgsIGlzTGl0dGxlRW5kaWFuKSB7XG4gIHZhciBudW1JbmRleCA9ICtpbmRleDtcbiAgdmFyIGludEluZGV4ID0gdG9JbmRleChudW1JbmRleCk7XG4gIGlmIChpbnRJbmRleCArIGJ5dGVzID4gdmlld1skTEVOR1RIXSkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19JTkRFWCk7XG4gIHZhciBzdG9yZSA9IHZpZXdbJEJVRkZFUl0uX2I7XG4gIHZhciBzdGFydCA9IGludEluZGV4ICsgdmlld1skT0ZGU0VUXTtcbiAgdmFyIHBhY2sgPSBzdG9yZS5zbGljZShzdGFydCwgc3RhcnQgKyBieXRlcyk7XG4gIHJldHVybiBpc0xpdHRsZUVuZGlhbiA/IHBhY2sgOiBwYWNrLnJldmVyc2UoKTtcbn1cbmZ1bmN0aW9uIHNldCh2aWV3LCBieXRlcywgaW5kZXgsIGNvbnZlcnNpb24sIHZhbHVlLCBpc0xpdHRsZUVuZGlhbikge1xuICB2YXIgbnVtSW5kZXggPSAraW5kZXg7XG4gIHZhciBpbnRJbmRleCA9IHRvSW5kZXgobnVtSW5kZXgpO1xuICBpZiAoaW50SW5kZXggKyBieXRlcyA+IHZpZXdbJExFTkdUSF0pIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfSU5ERVgpO1xuICB2YXIgc3RvcmUgPSB2aWV3WyRCVUZGRVJdLl9iO1xuICB2YXIgc3RhcnQgPSBpbnRJbmRleCArIHZpZXdbJE9GRlNFVF07XG4gIHZhciBwYWNrID0gY29udmVyc2lvbigrdmFsdWUpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzOyBpKyspIHN0b3JlW3N0YXJ0ICsgaV0gPSBwYWNrW2lzTGl0dGxlRW5kaWFuID8gaSA6IGJ5dGVzIC0gaSAtIDFdO1xufVxuXG5pZiAoISR0eXBlZC5BQlYpIHtcbiAgJEFycmF5QnVmZmVyID0gZnVuY3Rpb24gQXJyYXlCdWZmZXIobGVuZ3RoKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG4gICAgdmFyIGJ5dGVMZW5ndGggPSB0b0luZGV4KGxlbmd0aCk7XG4gICAgdGhpcy5fYiA9IGFycmF5RmlsbC5jYWxsKG5ldyBBcnJheShieXRlTGVuZ3RoKSwgMCk7XG4gICAgdGhpc1skTEVOR1RIXSA9IGJ5dGVMZW5ndGg7XG4gIH07XG5cbiAgJERhdGFWaWV3ID0gZnVuY3Rpb24gRGF0YVZpZXcoYnVmZmVyLCBieXRlT2Zmc2V0LCBieXRlTGVuZ3RoKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkRGF0YVZpZXcsIERBVEFfVklFVyk7XG4gICAgYW5JbnN0YW5jZShidWZmZXIsICRBcnJheUJ1ZmZlciwgREFUQV9WSUVXKTtcbiAgICB2YXIgYnVmZmVyTGVuZ3RoID0gYnVmZmVyWyRMRU5HVEhdO1xuICAgIHZhciBvZmZzZXQgPSB0b0ludGVnZXIoYnl0ZU9mZnNldCk7XG4gICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ID4gYnVmZmVyTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQhJyk7XG4gICAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPT09IHVuZGVmaW5lZCA/IGJ1ZmZlckxlbmd0aCAtIG9mZnNldCA6IHRvTGVuZ3RoKGJ5dGVMZW5ndGgpO1xuICAgIGlmIChvZmZzZXQgKyBieXRlTGVuZ3RoID4gYnVmZmVyTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgdGhpc1skQlVGRkVSXSA9IGJ1ZmZlcjtcbiAgICB0aGlzWyRPRkZTRVRdID0gb2Zmc2V0O1xuICAgIHRoaXNbJExFTkdUSF0gPSBieXRlTGVuZ3RoO1xuICB9O1xuXG4gIGlmIChERVNDUklQVE9SUykge1xuICAgIGFkZEdldHRlcigkQXJyYXlCdWZmZXIsIEJZVEVfTEVOR1RILCAnX2wnKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCVUZGRVIsICdfYicpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJZVEVfTEVOR1RILCAnX2wnKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCWVRFX09GRlNFVCwgJ19vJyk7XG4gIH1cblxuICByZWRlZmluZUFsbCgkRGF0YVZpZXdbUFJPVE9UWVBFXSwge1xuICAgIGdldEludDg6IGZ1bmN0aW9uIGdldEludDgoYnl0ZU9mZnNldCkge1xuICAgICAgcmV0dXJuIGdldCh0aGlzLCAxLCBieXRlT2Zmc2V0KVswXSA8PCAyNCA+PiAyNDtcbiAgICB9LFxuICAgIGdldFVpbnQ4OiBmdW5jdGlvbiBnZXRVaW50OChieXRlT2Zmc2V0KSB7XG4gICAgICByZXR1cm4gZ2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQpWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MTY6IGZ1bmN0aW9uIGdldEludDE2KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pO1xuICAgICAgcmV0dXJuIChieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF0pIDw8IDE2ID4+IDE2O1xuICAgIH0sXG4gICAgZ2V0VWludDE2OiBmdW5jdGlvbiBnZXRVaW50MTYoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgdmFyIGJ5dGVzID0gZ2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSk7XG4gICAgICByZXR1cm4gYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MzI6IGZ1bmN0aW9uIGdldEludDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJMzIoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSkpO1xuICAgIH0sXG4gICAgZ2V0VWludDMyOiBmdW5jdGlvbiBnZXRVaW50MzIoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0kzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSkgPj4+IDA7XG4gICAgfSxcbiAgICBnZXRGbG9hdDMyOiBmdW5jdGlvbiBnZXRGbG9hdDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCAyMywgNCk7XG4gICAgfSxcbiAgICBnZXRGbG9hdDY0OiBmdW5jdGlvbiBnZXRGbG9hdDY0KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCA1MiwgOCk7XG4gICAgfSxcbiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICBzZXQodGhpcywgMSwgYnl0ZU9mZnNldCwgcGFja0k4LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgIHNldCh0aGlzLCAxLCBieXRlT2Zmc2V0LCBwYWNrSTgsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNldEludDE2OiBmdW5jdGlvbiBzZXRJbnQxNihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIHBhY2tJMTYsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0VWludDE2OiBmdW5jdGlvbiBzZXRVaW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSTE2LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEludDMyOiBmdW5jdGlvbiBzZXRJbnQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0VWludDMyOiBmdW5jdGlvbiBzZXRVaW50MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrSTMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEZsb2F0MzI6IGZ1bmN0aW9uIHNldEZsb2F0MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrRjMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEZsb2F0NjQ6IGZ1bmN0aW9uIHNldEZsb2F0NjQoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBwYWNrRjY0LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9XG4gIH0pO1xufSBlbHNlIHtcbiAgaWYgKCFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgJEFycmF5QnVmZmVyKDEpO1xuICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoLTEpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICB9KSB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3ICRBcnJheUJ1ZmZlcigpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoMS41KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBuZXcgJEFycmF5QnVmZmVyKE5hTik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgcmV0dXJuICRBcnJheUJ1ZmZlci5uYW1lICE9IEFSUkFZX0JVRkZFUjtcbiAgfSkpIHtcbiAgICAkQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiBBcnJheUJ1ZmZlcihsZW5ndGgpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhpcywgJEFycmF5QnVmZmVyKTtcbiAgICAgIHJldHVybiBuZXcgQmFzZUJ1ZmZlcih0b0luZGV4KGxlbmd0aCkpO1xuICAgIH07XG4gICAgdmFyIEFycmF5QnVmZmVyUHJvdG8gPSAkQXJyYXlCdWZmZXJbUFJPVE9UWVBFXSA9IEJhc2VCdWZmZXJbUFJPVE9UWVBFXTtcbiAgICBmb3IgKHZhciBrZXlzID0gZ09QTihCYXNlQnVmZmVyKSwgaiA9IDAsIGtleTsga2V5cy5sZW5ndGggPiBqOykge1xuICAgICAgaWYgKCEoKGtleSA9IGtleXNbaisrXSkgaW4gJEFycmF5QnVmZmVyKSkgaGlkZSgkQXJyYXlCdWZmZXIsIGtleSwgQmFzZUJ1ZmZlcltrZXldKTtcbiAgICB9XG4gICAgaWYgKCFMSUJSQVJZKSBBcnJheUJ1ZmZlclByb3RvLmNvbnN0cnVjdG9yID0gJEFycmF5QnVmZmVyO1xuICB9XG4gIC8vIGlPUyBTYWZhcmkgNy54IGJ1Z1xuICB2YXIgdmlldyA9IG5ldyAkRGF0YVZpZXcobmV3ICRBcnJheUJ1ZmZlcigyKSk7XG4gIHZhciAkc2V0SW50OCA9ICREYXRhVmlld1tQUk9UT1RZUEVdLnNldEludDg7XG4gIHZpZXcuc2V0SW50OCgwLCAyMTQ3NDgzNjQ4KTtcbiAgdmlldy5zZXRJbnQ4KDEsIDIxNDc0ODM2NDkpO1xuICBpZiAodmlldy5nZXRJbnQ4KDApIHx8ICF2aWV3LmdldEludDgoMSkpIHJlZGVmaW5lQWxsKCREYXRhVmlld1tQUk9UT1RZUEVdLCB7XG4gICAgc2V0SW50ODogZnVuY3Rpb24gc2V0SW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgJHNldEludDguY2FsbCh0aGlzLCBieXRlT2Zmc2V0LCB2YWx1ZSA8PCAyNCA+PiAyNCk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgICRzZXRJbnQ4LmNhbGwodGhpcywgYnl0ZU9mZnNldCwgdmFsdWUgPDwgMjQgPj4gMjQpO1xuICAgIH1cbiAgfSwgdHJ1ZSk7XG59XG5zZXRUb1N0cmluZ1RhZygkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG5zZXRUb1N0cmluZ1RhZygkRGF0YVZpZXcsIERBVEFfVklFVyk7XG5oaWRlKCREYXRhVmlld1tQUk9UT1RZUEVdLCAkdHlwZWQuVklFVywgdHJ1ZSk7XG5leHBvcnRzW0FSUkFZX0JVRkZFUl0gPSAkQXJyYXlCdWZmZXI7XG5leHBvcnRzW0RBVEFfVklFV10gPSAkRGF0YVZpZXc7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyNS40LjEuNSBOZXdQcm9taXNlQ2FwYWJpbGl0eShDKVxudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcblxuZnVuY3Rpb24gUHJvbWlzZUNhcGFiaWxpdHkoQykge1xuICB2YXIgcmVzb2x2ZSwgcmVqZWN0O1xuICB0aGlzLnByb21pc2UgPSBuZXcgQyhmdW5jdGlvbiAoJCRyZXNvbHZlLCAkJHJlamVjdCkge1xuICAgIGlmIChyZXNvbHZlICE9PSB1bmRlZmluZWQgfHwgcmVqZWN0ICE9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcignQmFkIFByb21pc2UgY29uc3RydWN0b3InKTtcbiAgICByZXNvbHZlID0gJCRyZXNvbHZlO1xuICAgIHJlamVjdCA9ICQkcmVqZWN0O1xuICB9KTtcbiAgdGhpcy5yZXNvbHZlID0gYUZ1bmN0aW9uKHJlc29sdmUpO1xuICB0aGlzLnJlamVjdCA9IGFGdW5jdGlvbihyZWplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gKEMpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlQ2FwYWJpbGl0eShDKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgbWFjcm90YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpLnNldDtcbnZhciBPYnNlcnZlciA9IGdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBQcm9taXNlID0gZ2xvYmFsLlByb21pc2U7XG52YXIgaXNOb2RlID0gcmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhlYWQsIGxhc3QsIG5vdGlmeTtcblxuICB2YXIgZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBhcmVudCwgZm47XG4gICAgaWYgKGlzTm9kZSAmJiAocGFyZW50ID0gcHJvY2Vzcy5kb21haW4pKSBwYXJlbnQuZXhpdCgpO1xuICAgIHdoaWxlIChoZWFkKSB7XG4gICAgICBmbiA9IGhlYWQuZm47XG4gICAgICBoZWFkID0gaGVhZC5uZXh0O1xuICAgICAgdHJ5IHtcbiAgICAgICAgZm4oKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKGhlYWQpIG5vdGlmeSgpO1xuICAgICAgICBlbHNlIGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgIGlmIChwYXJlbnQpIHBhcmVudC5lbnRlcigpO1xuICB9O1xuXG4gIC8vIE5vZGUuanNcbiAgaWYgKGlzTm9kZSkge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZmx1c2gpO1xuICAgIH07XG4gIC8vIGJyb3dzZXJzIHdpdGggTXV0YXRpb25PYnNlcnZlciwgZXhjZXB0IGlPUyBTYWZhcmkgLSBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMzM5XG4gIH0gZWxzZSBpZiAoT2JzZXJ2ZXIgJiYgIShnbG9iYWwubmF2aWdhdG9yICYmIGdsb2JhbC5uYXZpZ2F0b3Iuc3RhbmRhbG9uZSkpIHtcbiAgICB2YXIgdG9nZ2xlID0gdHJ1ZTtcbiAgICB2YXIgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICBuZXcgT2JzZXJ2ZXIoZmx1c2gpLm9ic2VydmUobm9kZSwgeyBjaGFyYWN0ZXJEYXRhOiB0cnVlIH0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIG5vZGUuZGF0YSA9IHRvZ2dsZSA9ICF0b2dnbGU7XG4gICAgfTtcbiAgLy8gZW52aXJvbm1lbnRzIHdpdGggbWF5YmUgbm9uLWNvbXBsZXRlbHkgY29ycmVjdCwgYnV0IGV4aXN0ZW50IFByb21pc2VcbiAgfSBlbHNlIGlmIChQcm9taXNlICYmIFByb21pc2UucmVzb2x2ZSkge1xuICAgIC8vIFByb21pc2UucmVzb2x2ZSB3aXRob3V0IGFuIGFyZ3VtZW50IHRocm93cyBhbiBlcnJvciBpbiBMRyBXZWJPUyAyXG4gICAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUodW5kZWZpbmVkKTtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBwcm9taXNlLnRoZW4oZmx1c2gpO1xuICAgIH07XG4gIC8vIGZvciBvdGhlciBlbnZpcm9ubWVudHMgLSBtYWNyb3Rhc2sgYmFzZWQgb246XG4gIC8vIC0gc2V0SW1tZWRpYXRlXG4gIC8vIC0gTWVzc2FnZUNoYW5uZWxcbiAgLy8gLSB3aW5kb3cucG9zdE1lc3NhZ1xuICAvLyAtIG9ucmVhZHlzdGF0ZWNoYW5nZVxuICAvLyAtIHNldFRpbWVvdXRcbiAgfSBlbHNlIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBzdHJhbmdlIElFICsgd2VicGFjayBkZXYgc2VydmVyIGJ1ZyAtIHVzZSAuY2FsbChnbG9iYWwpXG4gICAgICBtYWNyb3Rhc2suY2FsbChnbG9iYWwsIGZsdXNoKTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChmbikge1xuICAgIHZhciB0YXNrID0geyBmbjogZm4sIG5leHQ6IHVuZGVmaW5lZCB9O1xuICAgIGlmIChsYXN0KSBsYXN0Lm5leHQgPSB0YXNrO1xuICAgIGlmICghaGVhZCkge1xuICAgICAgaGVhZCA9IHRhc2s7XG4gICAgICBub3RpZnkoKTtcbiAgICB9IGxhc3QgPSB0YXNrO1xuICB9O1xufTtcbiIsInZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBpbnZva2UgPSByZXF1aXJlKCcuL19pbnZva2UnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi9faHRtbCcpO1xudmFyIGNlbCA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgc2V0VGFzayA9IGdsb2JhbC5zZXRJbW1lZGlhdGU7XG52YXIgY2xlYXJUYXNrID0gZ2xvYmFsLmNsZWFySW1tZWRpYXRlO1xudmFyIE1lc3NhZ2VDaGFubmVsID0gZ2xvYmFsLk1lc3NhZ2VDaGFubmVsO1xudmFyIERpc3BhdGNoID0gZ2xvYmFsLkRpc3BhdGNoO1xudmFyIGNvdW50ZXIgPSAwO1xudmFyIHF1ZXVlID0ge307XG52YXIgT05SRUFEWVNUQVRFQ0hBTkdFID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSc7XG52YXIgZGVmZXIsIGNoYW5uZWwsIHBvcnQ7XG52YXIgcnVuID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaWQgPSArdGhpcztcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICBpZiAocXVldWUuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgdmFyIGZuID0gcXVldWVbaWRdO1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gICAgZm4oKTtcbiAgfVxufTtcbnZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIChldmVudCkge1xuICBydW4uY2FsbChldmVudC5kYXRhKTtcbn07XG4vLyBOb2RlLmpzIDAuOSsgJiBJRTEwKyBoYXMgc2V0SW1tZWRpYXRlLCBvdGhlcndpc2U6XG5pZiAoIXNldFRhc2sgfHwgIWNsZWFyVGFzaykge1xuICBzZXRUYXNrID0gZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGZuKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICB2YXIgaSA9IDE7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgIHF1ZXVlWysrY291bnRlcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICAgIGludm9rZSh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pLCBhcmdzKTtcbiAgICB9O1xuICAgIGRlZmVyKGNvdW50ZXIpO1xuICAgIHJldHVybiBjb3VudGVyO1xuICB9O1xuICBjbGVhclRhc2sgPSBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShpZCkge1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gIH07XG4gIC8vIE5vZGUuanMgMC44LVxuICBpZiAocmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soY3R4KHJ1biwgaWQsIDEpKTtcbiAgICB9O1xuICAvLyBTcGhlcmUgKEpTIGdhbWUgZW5naW5lKSBEaXNwYXRjaCBBUElcbiAgfSBlbHNlIGlmIChEaXNwYXRjaCAmJiBEaXNwYXRjaC5ub3cpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgRGlzcGF0Y2gubm93KGN0eChydW4sIGlkLCAxKSk7XG4gICAgfTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBNZXNzYWdlQ2hhbm5lbCwgaW5jbHVkZXMgV2ViV29ya2Vyc1xuICB9IGVsc2UgaWYgKE1lc3NhZ2VDaGFubmVsKSB7XG4gICAgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgIHBvcnQgPSBjaGFubmVsLnBvcnQyO1xuICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gbGlzdGVuZXI7XG4gICAgZGVmZXIgPSBjdHgocG9ydC5wb3N0TWVzc2FnZSwgcG9ydCwgMSk7XG4gIC8vIEJyb3dzZXJzIHdpdGggcG9zdE1lc3NhZ2UsIHNraXAgV2ViV29ya2Vyc1xuICAvLyBJRTggaGFzIHBvc3RNZXNzYWdlLCBidXQgaXQncyBzeW5jICYgdHlwZW9mIGl0cyBwb3N0TWVzc2FnZSBpcyAnb2JqZWN0J1xuICB9IGVsc2UgaWYgKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyICYmIHR5cGVvZiBwb3N0TWVzc2FnZSA9PSAnZnVuY3Rpb24nICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBnbG9iYWwucG9zdE1lc3NhZ2UoaWQgKyAnJywgJyonKTtcbiAgICB9O1xuICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgbGlzdGVuZXIsIGZhbHNlKTtcbiAgLy8gSUU4LVxuICB9IGVsc2UgaWYgKE9OUkVBRFlTVEFURUNIQU5HRSBpbiBjZWwoJ3NjcmlwdCcpKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoY2VsKCdzY3JpcHQnKSlbT05SRUFEWVNUQVRFQ0hBTkdFXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaHRtbC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgcnVuLmNhbGwoaWQpO1xuICAgICAgfTtcbiAgICB9O1xuICAvLyBSZXN0IG9sZCBicm93c2Vyc1xuICB9IGVsc2Uge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBzZXRUaW1lb3V0KGN0eChydW4sIGlkLCAxKSwgMCk7XG4gICAgfTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0VGFzayxcbiAgY2xlYXI6IGNsZWFyVGFza1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgc3RlcCA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcblxuLy8gMjIuMS4zLjQgQXJyYXkucHJvdG90eXBlLmVudHJpZXMoKVxuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5rZXlzKClcbi8vIDIyLjEuMy4yOSBBcnJheS5wcm90b3R5cGUudmFsdWVzKClcbi8vIDIyLjEuMy4zMCBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgdGhpcy5fdCA9IHRvSU9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgLy8ga2luZFxuLy8gMjIuMS41LjIuMSAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBPID0gdGhpcy5fdDtcbiAgdmFyIGtpbmQgPSB0aGlzLl9rO1xuICB2YXIgaW5kZXggPSB0aGlzLl9pKys7XG4gIGlmICghTyB8fCBpbmRleCA+PSBPLmxlbmd0aCkge1xuICAgIHRoaXMuX3QgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHN0ZXAoMSk7XG4gIH1cbiAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4gc3RlcCgwLCBpbmRleCk7XG4gIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4gc3RlcCgwLCBPW2luZGV4XSk7XG4gIHJldHVybiBzdGVwKDAsIFtpbmRleCwgT1tpbmRleF1dKTtcbn0sICd2YWx1ZXMnKTtcblxuLy8gYXJndW1lbnRzTGlzdFtAQGl0ZXJhdG9yXSBpcyAlQXJyYXlQcm90b192YWx1ZXMlICg5LjQuNC42LCA5LjQuNC43KVxuSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTtcblxuYWRkVG9VbnNjb3BhYmxlcygna2V5cycpO1xuYWRkVG9VbnNjb3BhYmxlcygndmFsdWVzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCdlbnRyaWVzJyk7XG4iLCIvLyAyMi4xLjMuNiBBcnJheS5wcm90b3R5cGUuZmlsbCh2YWx1ZSwgc3RhcnQgPSAwLCBlbmQgPSB0aGlzLmxlbmd0aClcbid1c2Ugc3RyaWN0JztcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZmlsbCh2YWx1ZSAvKiAsIHN0YXJ0ID0gMCwgZW5kID0gQGxlbmd0aCAqLykge1xuICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgbGVuZ3RoKTtcbiAgdmFyIGVuZCA9IGFMZW4gPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuICB2YXIgZW5kUG9zID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW5ndGgpO1xuICB3aGlsZSAoZW5kUG9zID4gaW5kZXgpIE9baW5kZXgrK10gPSB2YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwiLy8gOS40LjIuMyBBcnJheVNwZWNpZXNDcmVhdGUob3JpZ2luYWxBcnJheSwgbGVuZ3RoKVxudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY29uc3RydWN0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWwsIGxlbmd0aCkge1xuICByZXR1cm4gbmV3IChzcGVjaWVzQ29uc3RydWN0b3Iob3JpZ2luYWwpKShsZW5ndGgpO1xufTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvcmUnKS5nZXRJdGVyYXRvck1ldGhvZCA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgIT0gdW5kZWZpbmVkKSByZXR1cm4gaXRbSVRFUkFUT1JdXG4gICAgfHwgaXRbJ0BAaXRlcmF0b3InXVxuICAgIHx8IEl0ZXJhdG9yc1tjbGFzc29mKGl0KV07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgaW5kZXgsIHZhbHVlKSB7XG4gIGlmIChpbmRleCBpbiBvYmplY3QpICRkZWZpbmVQcm9wZXJ0eS5mKG9iamVjdCwgaW5kZXgsIGNyZWF0ZURlc2MoMCwgdmFsdWUpKTtcbiAgZWxzZSBvYmplY3RbaW5kZXhdID0gdmFsdWU7XG59O1xuIiwiLy8gY2hlY2sgb24gZGVmYXVsdCBBcnJheSBpdGVyYXRvclxudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b1tJVEVSQVRPUl0gPT09IGl0KTtcbn07XG4iLCJ2YXIgTUFUQ0ggPSByZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSkge1xuICB2YXIgcmUgPSAvLi87XG4gIHRyeSB7XG4gICAgJy8uLydbS0VZXShyZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0cnkge1xuICAgICAgcmVbTUFUQ0hdID0gZmFsc2U7XG4gICAgICByZXR1cm4gIScvLi8nW0tFWV0ocmUpO1xuICAgIH0gY2F0Y2ggKGYpIHsgLyogZW1wdHkgKi8gfVxuICB9IHJldHVybiB0cnVlO1xufTtcbiIsIi8vIGhlbHBlciBmb3IgU3RyaW5nI3tzdGFydHNXaXRoLCBlbmRzV2l0aCwgaW5jbHVkZXN9XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCBzZWFyY2hTdHJpbmcsIE5BTUUpIHtcbiAgaWYgKGlzUmVnRXhwKHNlYXJjaFN0cmluZykpIHRocm93IFR5cGVFcnJvcignU3RyaW5nIycgKyBOQU1FICsgXCIgZG9lc24ndCBhY2NlcHQgcmVnZXghXCIpO1xuICByZXR1cm4gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgZGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcblxuLy8gMjUuMS4yLjEuMSAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2hpZGUnKShJdGVyYXRvclByb3RvdHlwZSwgcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyksIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCkge1xuICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHsgbmV4dDogZGVzY3JpcHRvcigxLCBuZXh0KSB9KTtcbiAgc2V0VG9TdHJpbmdUYWcoQ29uc3RydWN0b3IsIE5BTUUgKyAnIEl0ZXJhdG9yJyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyICRpdGVyQ3JlYXRlID0gcmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBCVUdHWSA9ICEoW10ua2V5cyAmJiAnbmV4dCcgaW4gW10ua2V5cygpKTsgLy8gU2FmYXJpIGhhcyBidWdneSBpdGVyYXRvcnMgdy9vIGBuZXh0YFxudmFyIEZGX0lURVJBVE9SID0gJ0BAaXRlcmF0b3InO1xudmFyIEtFWVMgPSAna2V5cyc7XG52YXIgVkFMVUVTID0gJ3ZhbHVlcyc7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQmFzZSwgTkFNRSwgQ29uc3RydWN0b3IsIG5leHQsIERFRkFVTFQsIElTX1NFVCwgRk9SQ0VEKSB7XG4gICRpdGVyQ3JlYXRlKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcbiAgdmFyIGdldE1ldGhvZCA9IGZ1bmN0aW9uIChraW5kKSB7XG4gICAgaWYgKCFCVUdHWSAmJiBraW5kIGluIHByb3RvKSByZXR1cm4gcHJvdG9ba2luZF07XG4gICAgc3dpdGNoIChraW5kKSB7XG4gICAgICBjYXNlIEtFWVM6IHJldHVybiBmdW5jdGlvbiBrZXlzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgICAgY2FzZSBWQUxVRVM6IHJldHVybiBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgfTtcbiAgdmFyIFRBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJztcbiAgdmFyIERFRl9WQUxVRVMgPSBERUZBVUxUID09IFZBTFVFUztcbiAgdmFyIFZBTFVFU19CVUcgPSBmYWxzZTtcbiAgdmFyIHByb3RvID0gQmFzZS5wcm90b3R5cGU7XG4gIHZhciAkbmF0aXZlID0gcHJvdG9bSVRFUkFUT1JdIHx8IHByb3RvW0ZGX0lURVJBVE9SXSB8fCBERUZBVUxUICYmIHByb3RvW0RFRkFVTFRdO1xuICB2YXIgJGRlZmF1bHQgPSAkbmF0aXZlIHx8IGdldE1ldGhvZChERUZBVUxUKTtcbiAgdmFyICRlbnRyaWVzID0gREVGQVVMVCA/ICFERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoJ2VudHJpZXMnKSA6IHVuZGVmaW5lZDtcbiAgdmFyICRhbnlOYXRpdmUgPSBOQU1FID09ICdBcnJheScgPyBwcm90by5lbnRyaWVzIHx8ICRuYXRpdmUgOiAkbmF0aXZlO1xuICB2YXIgbWV0aG9kcywga2V5LCBJdGVyYXRvclByb3RvdHlwZTtcbiAgLy8gRml4IG5hdGl2ZVxuICBpZiAoJGFueU5hdGl2ZSkge1xuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoJGFueU5hdGl2ZS5jYWxsKG5ldyBCYXNlKCkpKTtcbiAgICBpZiAoSXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUgJiYgSXRlcmF0b3JQcm90b3R5cGUubmV4dCkge1xuICAgICAgLy8gU2V0IEBAdG9TdHJpbmdUYWcgdG8gbmF0aXZlIGl0ZXJhdG9yc1xuICAgICAgc2V0VG9TdHJpbmdUYWcoSXRlcmF0b3JQcm90b3R5cGUsIFRBRywgdHJ1ZSk7XG4gICAgICAvLyBmaXggZm9yIHNvbWUgb2xkIGVuZ2luZXNcbiAgICAgIGlmICghTElCUkFSWSAmJiB0eXBlb2YgSXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdICE9ICdmdW5jdGlvbicpIGhpZGUoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbiAgICB9XG4gIH1cbiAgLy8gZml4IEFycmF5I3t2YWx1ZXMsIEBAaXRlcmF0b3J9Lm5hbWUgaW4gVjggLyBGRlxuICBpZiAoREVGX1ZBTFVFUyAmJiAkbmF0aXZlICYmICRuYXRpdmUubmFtZSAhPT0gVkFMVUVTKSB7XG4gICAgVkFMVUVTX0JVRyA9IHRydWU7XG4gICAgJGRlZmF1bHQgPSBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiAkbmF0aXZlLmNhbGwodGhpcyk7IH07XG4gIH1cbiAgLy8gRGVmaW5lIGl0ZXJhdG9yXG4gIGlmICgoIUxJQlJBUlkgfHwgRk9SQ0VEKSAmJiAoQlVHR1kgfHwgVkFMVUVTX0JVRyB8fCAhcHJvdG9bSVRFUkFUT1JdKSkge1xuICAgIGhpZGUocHJvdG8sIElURVJBVE9SLCAkZGVmYXVsdCk7XG4gIH1cbiAgLy8gUGx1ZyBmb3IgbGlicmFyeVxuICBJdGVyYXRvcnNbTkFNRV0gPSAkZGVmYXVsdDtcbiAgSXRlcmF0b3JzW1RBR10gPSByZXR1cm5UaGlzO1xuICBpZiAoREVGQVVMVCkge1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICB2YWx1ZXM6IERFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChWQUxVRVMpLFxuICAgICAga2V5czogSVNfU0VUID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoS0VZUyksXG4gICAgICBlbnRyaWVzOiAkZW50cmllc1xuICAgIH07XG4gICAgaWYgKEZPUkNFRCkgZm9yIChrZXkgaW4gbWV0aG9kcykge1xuICAgICAgaWYgKCEoa2V5IGluIHByb3RvKSkgcmVkZWZpbmUocHJvdG8sIGtleSwgbWV0aG9kc1trZXldKTtcbiAgICB9IGVsc2UgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoQlVHR1kgfHwgVkFMVUVTX0JVRyksIE5BTUUsIG1ldGhvZHMpO1xuICB9XG4gIHJldHVybiBtZXRob2RzO1xufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbi8vIHRydWUgIC0+IFN0cmluZyNhdFxuLy8gZmFsc2UgLT4gU3RyaW5nI2NvZGVQb2ludEF0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChUT19TVFJJTkcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0aGF0LCBwb3MpIHtcbiAgICB2YXIgcyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbiAgICB2YXIgaSA9IHRvSW50ZWdlcihwb3MpO1xuICAgIHZhciBsID0gcy5sZW5ndGg7XG4gICAgdmFyIGEsIGI7XG4gICAgaWYgKGkgPCAwIHx8IGkgPj0gbCkgcmV0dXJuIFRPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgIGEgPSBzLmNoYXJDb2RlQXQoaSk7XG4gICAgcmV0dXJuIGEgPCAweGQ4MDAgfHwgYSA+IDB4ZGJmZiB8fCBpICsgMSA9PT0gbCB8fCAoYiA9IHMuY2hhckNvZGVBdChpICsgMSkpIDwgMHhkYzAwIHx8IGIgPiAweGRmZmZcbiAgICAgID8gVE9fU1RSSU5HID8gcy5jaGFyQXQoaSkgOiBhXG4gICAgICA6IFRPX1NUUklORyA/IHMuc2xpY2UoaSwgaSArIDIpIDogKGEgLSAweGQ4MDAgPDwgMTApICsgKGIgLSAweGRjMDApICsgMHgxMDAwMDtcbiAgfTtcbn07XG4iLCIvLyAyMC4yLjIuMTQgTWF0aC5leHBtMSh4KVxudmFyICRleHBtMSA9IE1hdGguZXhwbTE7XG5tb2R1bGUuZXhwb3J0cyA9ICghJGV4cG0xXG4gIC8vIE9sZCBGRiBidWdcbiAgfHwgJGV4cG0xKDEwKSA+IDIyMDI1LjQ2NTc5NDgwNjcxOSB8fCAkZXhwbTEoMTApIDwgMjIwMjUuNDY1Nzk0ODA2NzE2NTE2OFxuICAvLyBUb3IgQnJvd3NlciBidWdcbiAgfHwgJGV4cG0xKC0yZS0xNykgIT0gLTJlLTE3XG4pID8gZnVuY3Rpb24gZXhwbTEoeCkge1xuICByZXR1cm4gKHggPSAreCkgPT0gMCA/IHggOiB4ID4gLTFlLTYgJiYgeCA8IDFlLTYgPyB4ICsgeCAqIHggLyAyIDogTWF0aC5leHAoeCkgLSAxO1xufSA6ICRleHBtMTtcbiIsIi8vIDIwLjIuMi4yOCBNYXRoLnNpZ24oeClcbm1vZHVsZS5leHBvcnRzID0gTWF0aC5zaWduIHx8IGZ1bmN0aW9uIHNpZ24oeCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIHJldHVybiAoeCA9ICt4KSA9PSAwIHx8IHggIT0geCA/IHggOiB4IDwgMCA/IC0xIDogMTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcmVwZWF0KGNvdW50KSB7XG4gIHZhciBzdHIgPSBTdHJpbmcoZGVmaW5lZCh0aGlzKSk7XG4gIHZhciByZXMgPSAnJztcbiAgdmFyIG4gPSB0b0ludGVnZXIoY291bnQpO1xuICBpZiAobiA8IDAgfHwgbiA9PSBJbmZpbml0eSkgdGhyb3cgUmFuZ2VFcnJvcihcIkNvdW50IGNhbid0IGJlIG5lZ2F0aXZlXCIpO1xuICBmb3IgKDtuID4gMDsgKG4gPj4+PSAxKSAmJiAoc3RyICs9IHN0cikpIGlmIChuICYgMSkgcmVzICs9IHN0cjtcbiAgcmV0dXJuIHJlcztcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX3NldC1wcm90bycpLnNldDtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIHRhcmdldCwgQykge1xuICB2YXIgUyA9IHRhcmdldC5jb25zdHJ1Y3RvcjtcbiAgdmFyIFA7XG4gIGlmIChTICE9PSBDICYmIHR5cGVvZiBTID09ICdmdW5jdGlvbicgJiYgKFAgPSBTLnByb3RvdHlwZSkgIT09IEMucHJvdG90eXBlICYmIGlzT2JqZWN0KFApICYmIHNldFByb3RvdHlwZU9mKSB7XG4gICAgc2V0UHJvdG90eXBlT2YodGhhdCwgUCk7XG4gIH0gcmV0dXJuIHRoYXQ7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSAnXFx4MDlcXHgwQVxceDBCXFx4MENcXHgwRFxceDIwXFx4QTBcXHUxNjgwXFx1MTgwRVxcdTIwMDBcXHUyMDAxXFx1MjAwMlxcdTIwMDMnICtcbiAgJ1xcdTIwMDRcXHUyMDA1XFx1MjAwNlxcdTIwMDdcXHUyMDA4XFx1MjAwOVxcdTIwMEFcXHUyMDJGXFx1MjA1RlxcdTMwMDBcXHUyMDI4XFx1MjAyOVxcdUZFRkYnO1xuIiwiLy8gV29ya3Mgd2l0aCBfX3Byb3RvX18gb25seS4gT2xkIHY4IGNhbid0IHdvcmsgd2l0aCBudWxsIHByb3RvIG9iamVjdHMuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBjaGVjayA9IGZ1bmN0aW9uIChPLCBwcm90bykge1xuICBhbk9iamVjdChPKTtcbiAgaWYgKCFpc09iamVjdChwcm90bykgJiYgcHJvdG8gIT09IG51bGwpIHRocm93IFR5cGVFcnJvcihwcm90byArIFwiOiBjYW4ndCBzZXQgYXMgcHJvdG90eXBlIVwiKTtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgKCdfX3Byb3RvX18nIGluIHt9ID8gLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGZ1bmN0aW9uICh0ZXN0LCBidWdneSwgc2V0KSB7XG4gICAgICB0cnkge1xuICAgICAgICBzZXQgPSByZXF1aXJlKCcuL19jdHgnKShGdW5jdGlvbi5jYWxsLCByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmYoT2JqZWN0LnByb3RvdHlwZSwgJ19fcHJvdG9fXycpLnNldCwgMik7XG4gICAgICAgIHNldCh0ZXN0LCBbXSk7XG4gICAgICAgIGJ1Z2d5ID0gISh0ZXN0IGluc3RhbmNlb2YgQXJyYXkpO1xuICAgICAgfSBjYXRjaCAoZSkgeyBidWdneSA9IHRydWU7IH1cbiAgICAgIHJldHVybiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihPLCBwcm90bykge1xuICAgICAgICBjaGVjayhPLCBwcm90byk7XG4gICAgICAgIGlmIChidWdneSkgTy5fX3Byb3RvX18gPSBwcm90bztcbiAgICAgICAgZWxzZSBzZXQoTywgcHJvdG8pO1xuICAgICAgICByZXR1cm4gTztcbiAgICAgIH07XG4gICAgfSh7fSwgZmFsc2UpIDogdW5kZWZpbmVkKSxcbiAgY2hlY2s6IGNoZWNrXG59O1xuIiwidmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG5tb2R1bGUuZXhwb3J0cyA9IGRvY3VtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiIsIi8vIElFIDgtIGRvbid0IGVudW0gYnVnIGtleXNcbm1vZHVsZS5leHBvcnRzID0gKFxuICAnY29uc3RydWN0b3IsaGFzT3duUHJvcGVydHksaXNQcm90b3R5cGVPZixwcm9wZXJ0eUlzRW51bWVyYWJsZSx0b0xvY2FsZVN0cmluZyx0b1N0cmluZyx2YWx1ZU9mJ1xuKS5zcGxpdCgnLCcpO1xuIiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdrZXlzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIHNoYXJlZFtrZXldIHx8IChzaGFyZWRba2V5XSA9IHVpZChrZXkpKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyIHdrc0V4dCA9IHJlcXVpcmUoJy4vX3drcy1leHQnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHZhciAkU3ltYm9sID0gY29yZS5TeW1ib2wgfHwgKGNvcmUuU3ltYm9sID0gTElCUkFSWSA/IHt9IDogZ2xvYmFsLlN5bWJvbCB8fCB7fSk7XG4gIGlmIChuYW1lLmNoYXJBdCgwKSAhPSAnXycgJiYgIShuYW1lIGluICRTeW1ib2wpKSBkZWZpbmVQcm9wZXJ0eSgkU3ltYm9sLCBuYW1lLCB7IHZhbHVlOiB3a3NFeHQuZihuYW1lKSB9KTtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICovXG5cbmZ1bmN0aW9uIG1ha2VFbXB0eUZ1bmN0aW9uKGFyZykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBhcmc7XG4gIH07XG59XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBhY2NlcHRzIGFuZCBkaXNjYXJkcyBpbnB1dHM7IGl0IGhhcyBubyBzaWRlIGVmZmVjdHMuIFRoaXMgaXNcbiAqIHByaW1hcmlseSB1c2VmdWwgaWRpb21hdGljYWxseSBmb3Igb3ZlcnJpZGFibGUgZnVuY3Rpb24gZW5kcG9pbnRzIHdoaWNoXG4gKiBhbHdheXMgbmVlZCB0byBiZSBjYWxsYWJsZSwgc2luY2UgSlMgbGFja3MgYSBudWxsLWNhbGwgaWRpb20gYWxhIENvY29hLlxuICovXG52YXIgZW1wdHlGdW5jdGlvbiA9IGZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fTtcblxuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJucyA9IG1ha2VFbXB0eUZ1bmN0aW9uO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0ZhbHNlID0gbWFrZUVtcHR5RnVuY3Rpb24oZmFsc2UpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RydWUgPSBtYWtlRW1wdHlGdW5jdGlvbih0cnVlKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNOdWxsID0gbWFrZUVtcHR5RnVuY3Rpb24obnVsbCk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVGhpcyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXM7XG59O1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0FyZ3VtZW50ID0gZnVuY3Rpb24gKGFyZykge1xuICByZXR1cm4gYXJnO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBlbXB0eUZ1bmN0aW9uOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVc2UgaW52YXJpYW50KCkgdG8gYXNzZXJ0IHN0YXRlIHdoaWNoIHlvdXIgcHJvZ3JhbSBhc3N1bWVzIHRvIGJlIHRydWUuXG4gKlxuICogUHJvdmlkZSBzcHJpbnRmLXN0eWxlIGZvcm1hdCAob25seSAlcyBpcyBzdXBwb3J0ZWQpIGFuZCBhcmd1bWVudHNcbiAqIHRvIHByb3ZpZGUgaW5mb3JtYXRpb24gYWJvdXQgd2hhdCBicm9rZSBhbmQgd2hhdCB5b3Ugd2VyZVxuICogZXhwZWN0aW5nLlxuICpcbiAqIFRoZSBpbnZhcmlhbnQgbWVzc2FnZSB3aWxsIGJlIHN0cmlwcGVkIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgaW52YXJpYW50XG4gKiB3aWxsIHJlbWFpbiB0byBlbnN1cmUgbG9naWMgZG9lcyBub3QgZGlmZmVyIGluIHByb2R1Y3Rpb24uXG4gKi9cblxudmFyIHZhbGlkYXRlRm9ybWF0ID0gZnVuY3Rpb24gdmFsaWRhdGVGb3JtYXQoZm9ybWF0KSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFsaWRhdGVGb3JtYXQgPSBmdW5jdGlvbiB2YWxpZGF0ZUZvcm1hdChmb3JtYXQpIHtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YXJpYW50IHJlcXVpcmVzIGFuIGVycm9yIG1lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGludmFyaWFudChjb25kaXRpb24sIGZvcm1hdCwgYSwgYiwgYywgZCwgZSwgZikge1xuICB2YWxpZGF0ZUZvcm1hdChmb3JtYXQpO1xuXG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgdmFyIGVycm9yO1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoJ01pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50ICcgKyAnZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFyZ3MgPSBbYSwgYiwgYywgZCwgZSwgZl07XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgICB9KSk7XG4gICAgICBlcnJvci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIH1cblxuICAgIGVycm9yLmZyYW1lc1RvUG9wID0gMTsgLy8gd2UgZG9uJ3QgY2FyZSBhYm91dCBpbnZhcmlhbnQncyBvd24gZnJhbWVcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGludmFyaWFudDsiLCJpbXBvcnQgJCRvYnNlcnZhYmxlIGZyb20gJ3N5bWJvbC1vYnNlcnZhYmxlJztcblxuLyoqXG4gKiBUaGVzZSBhcmUgcHJpdmF0ZSBhY3Rpb24gdHlwZXMgcmVzZXJ2ZWQgYnkgUmVkdXguXG4gKiBGb3IgYW55IHVua25vd24gYWN0aW9ucywgeW91IG11c3QgcmV0dXJuIHRoZSBjdXJyZW50IHN0YXRlLlxuICogSWYgdGhlIGN1cnJlbnQgc3RhdGUgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUuXG4gKiBEbyBub3QgcmVmZXJlbmNlIHRoZXNlIGFjdGlvbiB0eXBlcyBkaXJlY3RseSBpbiB5b3VyIGNvZGUuXG4gKi9cbnZhciBBY3Rpb25UeXBlcyA9IHtcbiAgSU5JVDogJ0BAcmVkdXgvSU5JVCcgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoNykuc3BsaXQoJycpLmpvaW4oJy4nKSxcbiAgUkVQTEFDRTogJ0BAcmVkdXgvUkVQTEFDRScgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoNykuc3BsaXQoJycpLmpvaW4oJy4nKVxufTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmo7XG59IDogZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbn07XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7YW55fSBvYmogVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIGFyZ3VtZW50IGFwcGVhcnMgdG8gYmUgYSBwbGFpbiBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qob2JqKSB7XG4gIGlmICgodHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2Yob2JqKSkgIT09ICdvYmplY3QnIHx8IG9iaiA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXG4gIHZhciBwcm90byA9IG9iajtcbiAgd2hpbGUgKE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90bykgIT09IG51bGwpIHtcbiAgICBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90byk7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikgPT09IHByb3RvO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBSZWR1eCBzdG9yZSB0aGF0IGhvbGRzIHRoZSBzdGF0ZSB0cmVlLlxuICogVGhlIG9ubHkgd2F5IHRvIGNoYW5nZSB0aGUgZGF0YSBpbiB0aGUgc3RvcmUgaXMgdG8gY2FsbCBgZGlzcGF0Y2goKWAgb24gaXQuXG4gKlxuICogVGhlcmUgc2hvdWxkIG9ubHkgYmUgYSBzaW5nbGUgc3RvcmUgaW4geW91ciBhcHAuIFRvIHNwZWNpZnkgaG93IGRpZmZlcmVudFxuICogcGFydHMgb2YgdGhlIHN0YXRlIHRyZWUgcmVzcG9uZCB0byBhY3Rpb25zLCB5b3UgbWF5IGNvbWJpbmUgc2V2ZXJhbCByZWR1Y2Vyc1xuICogaW50byBhIHNpbmdsZSByZWR1Y2VyIGZ1bmN0aW9uIGJ5IHVzaW5nIGBjb21iaW5lUmVkdWNlcnNgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlZHVjZXIgQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIG5leHQgc3RhdGUgdHJlZSwgZ2l2ZW5cbiAqIHRoZSBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBhY3Rpb24gdG8gaGFuZGxlLlxuICpcbiAqIEBwYXJhbSB7YW55fSBbcHJlbG9hZGVkU3RhdGVdIFRoZSBpbml0aWFsIHN0YXRlLiBZb3UgbWF5IG9wdGlvbmFsbHkgc3BlY2lmeSBpdFxuICogdG8gaHlkcmF0ZSB0aGUgc3RhdGUgZnJvbSB0aGUgc2VydmVyIGluIHVuaXZlcnNhbCBhcHBzLCBvciB0byByZXN0b3JlIGFcbiAqIHByZXZpb3VzbHkgc2VyaWFsaXplZCB1c2VyIHNlc3Npb24uXG4gKiBJZiB5b3UgdXNlIGBjb21iaW5lUmVkdWNlcnNgIHRvIHByb2R1Y2UgdGhlIHJvb3QgcmVkdWNlciBmdW5jdGlvbiwgdGhpcyBtdXN0IGJlXG4gKiBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBzaGFwZSBhcyBgY29tYmluZVJlZHVjZXJzYCBrZXlzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtlbmhhbmNlcl0gVGhlIHN0b3JlIGVuaGFuY2VyLiBZb3UgbWF5IG9wdGlvbmFsbHkgc3BlY2lmeSBpdFxuICogdG8gZW5oYW5jZSB0aGUgc3RvcmUgd2l0aCB0aGlyZC1wYXJ0eSBjYXBhYmlsaXRpZXMgc3VjaCBhcyBtaWRkbGV3YXJlLFxuICogdGltZSB0cmF2ZWwsIHBlcnNpc3RlbmNlLCBldGMuIFRoZSBvbmx5IHN0b3JlIGVuaGFuY2VyIHRoYXQgc2hpcHMgd2l0aCBSZWR1eFxuICogaXMgYGFwcGx5TWlkZGxld2FyZSgpYC5cbiAqXG4gKiBAcmV0dXJucyB7U3RvcmV9IEEgUmVkdXggc3RvcmUgdGhhdCBsZXRzIHlvdSByZWFkIHRoZSBzdGF0ZSwgZGlzcGF0Y2ggYWN0aW9uc1xuICogYW5kIHN1YnNjcmliZSB0byBjaGFuZ2VzLlxuICovXG5mdW5jdGlvbiBjcmVhdGVTdG9yZShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSwgZW5oYW5jZXIpIHtcbiAgdmFyIF9yZWYyO1xuXG4gIGlmICh0eXBlb2YgcHJlbG9hZGVkU3RhdGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVuaGFuY2VyID09PSAndW5kZWZpbmVkJykge1xuICAgIGVuaGFuY2VyID0gcHJlbG9hZGVkU3RhdGU7XG4gICAgcHJlbG9hZGVkU3RhdGUgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGVuaGFuY2VyICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIGVuaGFuY2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVuaGFuY2VyKGNyZWF0ZVN0b3JlKShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSk7XG4gIH1cblxuICBpZiAodHlwZW9mIHJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSByZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgY3VycmVudFJlZHVjZXIgPSByZWR1Y2VyO1xuICB2YXIgY3VycmVudFN0YXRlID0gcHJlbG9hZGVkU3RhdGU7XG4gIHZhciBjdXJyZW50TGlzdGVuZXJzID0gW107XG4gIHZhciBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycztcbiAgdmFyIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCkge1xuICAgIGlmIChuZXh0TGlzdGVuZXJzID09PSBjdXJyZW50TGlzdGVuZXJzKSB7XG4gICAgICBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycy5zbGljZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZWFkcyB0aGUgc3RhdGUgdHJlZSBtYW5hZ2VkIGJ5IHRoZSBzdG9yZS5cbiAgICpcbiAgICogQHJldHVybnMge2FueX0gVGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBvZiB5b3VyIGFwcGxpY2F0aW9uLlxuICAgKi9cbiAgZnVuY3Rpb24gZ2V0U3RhdGUoKSB7XG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgY2FsbCBzdG9yZS5nZXRTdGF0ZSgpIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdUaGUgcmVkdWNlciBoYXMgYWxyZWFkeSByZWNlaXZlZCB0aGUgc3RhdGUgYXMgYW4gYXJndW1lbnQuICcgKyAnUGFzcyBpdCBkb3duIGZyb20gdGhlIHRvcCByZWR1Y2VyIGluc3RlYWQgb2YgcmVhZGluZyBpdCBmcm9tIHRoZSBzdG9yZS4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3VycmVudFN0YXRlO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgYSBjaGFuZ2UgbGlzdGVuZXIuIEl0IHdpbGwgYmUgY2FsbGVkIGFueSB0aW1lIGFuIGFjdGlvbiBpcyBkaXNwYXRjaGVkLFxuICAgKiBhbmQgc29tZSBwYXJ0IG9mIHRoZSBzdGF0ZSB0cmVlIG1heSBwb3RlbnRpYWxseSBoYXZlIGNoYW5nZWQuIFlvdSBtYXkgdGhlblxuICAgKiBjYWxsIGBnZXRTdGF0ZSgpYCB0byByZWFkIHRoZSBjdXJyZW50IHN0YXRlIHRyZWUgaW5zaWRlIHRoZSBjYWxsYmFjay5cbiAgICpcbiAgICogWW91IG1heSBjYWxsIGBkaXNwYXRjaCgpYCBmcm9tIGEgY2hhbmdlIGxpc3RlbmVyLCB3aXRoIHRoZSBmb2xsb3dpbmdcbiAgICogY2F2ZWF0czpcbiAgICpcbiAgICogMS4gVGhlIHN1YnNjcmlwdGlvbnMgYXJlIHNuYXBzaG90dGVkIGp1c3QgYmVmb3JlIGV2ZXJ5IGBkaXNwYXRjaCgpYCBjYWxsLlxuICAgKiBJZiB5b3Ugc3Vic2NyaWJlIG9yIHVuc3Vic2NyaWJlIHdoaWxlIHRoZSBsaXN0ZW5lcnMgYXJlIGJlaW5nIGludm9rZWQsIHRoaXNcbiAgICogd2lsbCBub3QgaGF2ZSBhbnkgZWZmZWN0IG9uIHRoZSBgZGlzcGF0Y2goKWAgdGhhdCBpcyBjdXJyZW50bHkgaW4gcHJvZ3Jlc3MuXG4gICAqIEhvd2V2ZXIsIHRoZSBuZXh0IGBkaXNwYXRjaCgpYCBjYWxsLCB3aGV0aGVyIG5lc3RlZCBvciBub3QsIHdpbGwgdXNlIGEgbW9yZVxuICAgKiByZWNlbnQgc25hcHNob3Qgb2YgdGhlIHN1YnNjcmlwdGlvbiBsaXN0LlxuICAgKlxuICAgKiAyLiBUaGUgbGlzdGVuZXIgc2hvdWxkIG5vdCBleHBlY3QgdG8gc2VlIGFsbCBzdGF0ZSBjaGFuZ2VzLCBhcyB0aGUgc3RhdGVcbiAgICogbWlnaHQgaGF2ZSBiZWVuIHVwZGF0ZWQgbXVsdGlwbGUgdGltZXMgZHVyaW5nIGEgbmVzdGVkIGBkaXNwYXRjaCgpYCBiZWZvcmVcbiAgICogdGhlIGxpc3RlbmVyIGlzIGNhbGxlZC4gSXQgaXMsIGhvd2V2ZXIsIGd1YXJhbnRlZWQgdGhhdCBhbGwgc3Vic2NyaWJlcnNcbiAgICogcmVnaXN0ZXJlZCBiZWZvcmUgdGhlIGBkaXNwYXRjaCgpYCBzdGFydGVkIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlIGxhdGVzdFxuICAgKiBzdGF0ZSBieSB0aGUgdGltZSBpdCBleGl0cy5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgQSBjYWxsYmFjayB0byBiZSBpbnZva2VkIG9uIGV2ZXJ5IGRpc3BhdGNoLlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgZnVuY3Rpb24gdG8gcmVtb3ZlIHRoaXMgY2hhbmdlIGxpc3RlbmVyLlxuICAgKi9cbiAgZnVuY3Rpb24gc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgbGlzdGVuZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbWF5IG5vdCBjYWxsIHN0b3JlLnN1YnNjcmliZSgpIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdJZiB5b3Ugd291bGQgbGlrZSB0byBiZSBub3RpZmllZCBhZnRlciB0aGUgc3RvcmUgaGFzIGJlZW4gdXBkYXRlZCwgc3Vic2NyaWJlIGZyb20gYSAnICsgJ2NvbXBvbmVudCBhbmQgaW52b2tlIHN0b3JlLmdldFN0YXRlKCkgaW4gdGhlIGNhbGxiYWNrIHRvIGFjY2VzcyB0aGUgbGF0ZXN0IHN0YXRlLiAnICsgJ1NlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGktcmVmZXJlbmNlL3N0b3JlI3N1YnNjcmliZShsaXN0ZW5lcikgZm9yIG1vcmUgZGV0YWlscy4nKTtcbiAgICB9XG5cbiAgICB2YXIgaXNTdWJzY3JpYmVkID0gdHJ1ZTtcblxuICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICBuZXh0TGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgaWYgKCFpc1N1YnNjcmliZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtYXkgbm90IHVuc3Vic2NyaWJlIGZyb20gYSBzdG9yZSBsaXN0ZW5lciB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2FwaS1yZWZlcmVuY2Uvc3RvcmUjc3Vic2NyaWJlKGxpc3RlbmVyKSBmb3IgbW9yZSBkZXRhaWxzLicpO1xuICAgICAgfVxuXG4gICAgICBpc1N1YnNjcmliZWQgPSBmYWxzZTtcblxuICAgICAgZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpO1xuICAgICAgdmFyIGluZGV4ID0gbmV4dExpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgICAgIG5leHRMaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIERpc3BhdGNoZXMgYW4gYWN0aW9uLiBJdCBpcyB0aGUgb25seSB3YXkgdG8gdHJpZ2dlciBhIHN0YXRlIGNoYW5nZS5cbiAgICpcbiAgICogVGhlIGByZWR1Y2VyYCBmdW5jdGlvbiwgdXNlZCB0byBjcmVhdGUgdGhlIHN0b3JlLCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZVxuICAgKiBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBnaXZlbiBgYWN0aW9uYC4gSXRzIHJldHVybiB2YWx1ZSB3aWxsXG4gICAqIGJlIGNvbnNpZGVyZWQgdGhlICoqbmV4dCoqIHN0YXRlIG9mIHRoZSB0cmVlLCBhbmQgdGhlIGNoYW5nZSBsaXN0ZW5lcnNcbiAgICogd2lsbCBiZSBub3RpZmllZC5cbiAgICpcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb25seSBzdXBwb3J0cyBwbGFpbiBvYmplY3QgYWN0aW9ucy4gSWYgeW91IHdhbnQgdG9cbiAgICogZGlzcGF0Y2ggYSBQcm9taXNlLCBhbiBPYnNlcnZhYmxlLCBhIHRodW5rLCBvciBzb21ldGhpbmcgZWxzZSwgeW91IG5lZWQgdG9cbiAgICogd3JhcCB5b3VyIHN0b3JlIGNyZWF0aW5nIGZ1bmN0aW9uIGludG8gdGhlIGNvcnJlc3BvbmRpbmcgbWlkZGxld2FyZS4gRm9yXG4gICAqIGV4YW1wbGUsIHNlZSB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgdGhlIGByZWR1eC10aHVua2AgcGFja2FnZS4gRXZlbiB0aGVcbiAgICogbWlkZGxld2FyZSB3aWxsIGV2ZW50dWFsbHkgZGlzcGF0Y2ggcGxhaW4gb2JqZWN0IGFjdGlvbnMgdXNpbmcgdGhpcyBtZXRob2QuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBhY3Rpb24gQSBwbGFpbiBvYmplY3QgcmVwcmVzZW50aW5nIOKAnHdoYXQgY2hhbmdlZOKAnS4gSXQgaXNcbiAgICogYSBnb29kIGlkZWEgdG8ga2VlcCBhY3Rpb25zIHNlcmlhbGl6YWJsZSBzbyB5b3UgY2FuIHJlY29yZCBhbmQgcmVwbGF5IHVzZXJcbiAgICogc2Vzc2lvbnMsIG9yIHVzZSB0aGUgdGltZSB0cmF2ZWxsaW5nIGByZWR1eC1kZXZ0b29sc2AuIEFuIGFjdGlvbiBtdXN0IGhhdmVcbiAgICogYSBgdHlwZWAgcHJvcGVydHkgd2hpY2ggbWF5IG5vdCBiZSBgdW5kZWZpbmVkYC4gSXQgaXMgYSBnb29kIGlkZWEgdG8gdXNlXG4gICAqIHN0cmluZyBjb25zdGFudHMgZm9yIGFjdGlvbiB0eXBlcy5cbiAgICpcbiAgICogQHJldHVybnMge09iamVjdH0gRm9yIGNvbnZlbmllbmNlLCB0aGUgc2FtZSBhY3Rpb24gb2JqZWN0IHlvdSBkaXNwYXRjaGVkLlxuICAgKlxuICAgKiBOb3RlIHRoYXQsIGlmIHlvdSB1c2UgYSBjdXN0b20gbWlkZGxld2FyZSwgaXQgbWF5IHdyYXAgYGRpc3BhdGNoKClgIHRvXG4gICAqIHJldHVybiBzb21ldGhpbmcgZWxzZSAoZm9yIGV4YW1wbGUsIGEgUHJvbWlzZSB5b3UgY2FuIGF3YWl0KS5cbiAgICovXG4gIGZ1bmN0aW9uIGRpc3BhdGNoKGFjdGlvbikge1xuICAgIGlmICghaXNQbGFpbk9iamVjdChhY3Rpb24pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FjdGlvbnMgbXVzdCBiZSBwbGFpbiBvYmplY3RzLiAnICsgJ1VzZSBjdXN0b20gbWlkZGxld2FyZSBmb3IgYXN5bmMgYWN0aW9ucy4nKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGFjdGlvbi50eXBlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBY3Rpb25zIG1heSBub3QgaGF2ZSBhbiB1bmRlZmluZWQgXCJ0eXBlXCIgcHJvcGVydHkuICcgKyAnSGF2ZSB5b3UgbWlzc3BlbGxlZCBhIGNvbnN0YW50PycpO1xuICAgIH1cblxuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlZHVjZXJzIG1heSBub3QgZGlzcGF0Y2ggYWN0aW9ucy4nKTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgaXNEaXNwYXRjaGluZyA9IHRydWU7XG4gICAgICBjdXJyZW50U3RhdGUgPSBjdXJyZW50UmVkdWNlcihjdXJyZW50U3RhdGUsIGFjdGlvbik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgbGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycyA9IG5leHRMaXN0ZW5lcnM7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBsaXN0ZW5lciA9IGxpc3RlbmVyc1tpXTtcbiAgICAgIGxpc3RlbmVyKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXBsYWNlcyB0aGUgcmVkdWNlciBjdXJyZW50bHkgdXNlZCBieSB0aGUgc3RvcmUgdG8gY2FsY3VsYXRlIHRoZSBzdGF0ZS5cbiAgICpcbiAgICogWW91IG1pZ2h0IG5lZWQgdGhpcyBpZiB5b3VyIGFwcCBpbXBsZW1lbnRzIGNvZGUgc3BsaXR0aW5nIGFuZCB5b3Ugd2FudCB0b1xuICAgKiBsb2FkIHNvbWUgb2YgdGhlIHJlZHVjZXJzIGR5bmFtaWNhbGx5LiBZb3UgbWlnaHQgYWxzbyBuZWVkIHRoaXMgaWYgeW91XG4gICAqIGltcGxlbWVudCBhIGhvdCByZWxvYWRpbmcgbWVjaGFuaXNtIGZvciBSZWR1eC5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbmV4dFJlZHVjZXIgVGhlIHJlZHVjZXIgZm9yIHRoZSBzdG9yZSB0byB1c2UgaW5zdGVhZC5cbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBmdW5jdGlvbiByZXBsYWNlUmVkdWNlcihuZXh0UmVkdWNlcikge1xuICAgIGlmICh0eXBlb2YgbmV4dFJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIG5leHRSZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgY3VycmVudFJlZHVjZXIgPSBuZXh0UmVkdWNlcjtcbiAgICBkaXNwYXRjaCh7IHR5cGU6IEFjdGlvblR5cGVzLlJFUExBQ0UgfSk7XG4gIH1cblxuICAvKipcbiAgICogSW50ZXJvcGVyYWJpbGl0eSBwb2ludCBmb3Igb2JzZXJ2YWJsZS9yZWFjdGl2ZSBsaWJyYXJpZXMuXG4gICAqIEByZXR1cm5zIHtvYnNlcnZhYmxlfSBBIG1pbmltYWwgb2JzZXJ2YWJsZSBvZiBzdGF0ZSBjaGFuZ2VzLlxuICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBvYnNlcnZhYmxlIHByb3Bvc2FsOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYnNlcnZhYmxlXG4gICAqL1xuICBmdW5jdGlvbiBvYnNlcnZhYmxlKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIG91dGVyU3Vic2NyaWJlID0gc3Vic2NyaWJlO1xuICAgIHJldHVybiBfcmVmID0ge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgbWluaW1hbCBvYnNlcnZhYmxlIHN1YnNjcmlwdGlvbiBtZXRob2QuXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JzZXJ2ZXIgQW55IG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIGFzIGFuIG9ic2VydmVyLlxuICAgICAgICogVGhlIG9ic2VydmVyIG9iamVjdCBzaG91bGQgaGF2ZSBhIGBuZXh0YCBtZXRob2QuXG4gICAgICAgKiBAcmV0dXJucyB7c3Vic2NyaXB0aW9ufSBBbiBvYmplY3Qgd2l0aCBhbiBgdW5zdWJzY3JpYmVgIG1ldGhvZCB0aGF0IGNhblxuICAgICAgICogYmUgdXNlZCB0byB1bnN1YnNjcmliZSB0aGUgb2JzZXJ2YWJsZSBmcm9tIHRoZSBzdG9yZSwgYW5kIHByZXZlbnQgZnVydGhlclxuICAgICAgICogZW1pc3Npb24gb2YgdmFsdWVzIGZyb20gdGhlIG9ic2VydmFibGUuXG4gICAgICAgKi9cbiAgICAgIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKG9ic2VydmVyKSB7XG4gICAgICAgIGlmICgodHlwZW9mIG9ic2VydmVyID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihvYnNlcnZlcikpICE9PSAnb2JqZWN0JyB8fCBvYnNlcnZlciA9PT0gbnVsbCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHRoZSBvYnNlcnZlciB0byBiZSBhbiBvYmplY3QuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBvYnNlcnZlU3RhdGUoKSB7XG4gICAgICAgICAgaWYgKG9ic2VydmVyLm5leHQpIHtcbiAgICAgICAgICAgIG9ic2VydmVyLm5leHQoZ2V0U3RhdGUoKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgb2JzZXJ2ZVN0YXRlKCk7XG4gICAgICAgIHZhciB1bnN1YnNjcmliZSA9IG91dGVyU3Vic2NyaWJlKG9ic2VydmVTdGF0ZSk7XG4gICAgICAgIHJldHVybiB7IHVuc3Vic2NyaWJlOiB1bnN1YnNjcmliZSB9O1xuICAgICAgfVxuICAgIH0sIF9yZWZbJCRvYnNlcnZhYmxlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sIF9yZWY7XG4gIH1cblxuICAvLyBXaGVuIGEgc3RvcmUgaXMgY3JlYXRlZCwgYW4gXCJJTklUXCIgYWN0aW9uIGlzIGRpc3BhdGNoZWQgc28gdGhhdCBldmVyeVxuICAvLyByZWR1Y2VyIHJldHVybnMgdGhlaXIgaW5pdGlhbCBzdGF0ZS4gVGhpcyBlZmZlY3RpdmVseSBwb3B1bGF0ZXNcbiAgLy8gdGhlIGluaXRpYWwgc3RhdGUgdHJlZS5cbiAgZGlzcGF0Y2goeyB0eXBlOiBBY3Rpb25UeXBlcy5JTklUIH0pO1xuXG4gIHJldHVybiBfcmVmMiA9IHtcbiAgICBkaXNwYXRjaDogZGlzcGF0Y2gsXG4gICAgc3Vic2NyaWJlOiBzdWJzY3JpYmUsXG4gICAgZ2V0U3RhdGU6IGdldFN0YXRlLFxuICAgIHJlcGxhY2VSZWR1Y2VyOiByZXBsYWNlUmVkdWNlclxuICB9LCBfcmVmMlskJG9ic2VydmFibGVdID0gb2JzZXJ2YWJsZSwgX3JlZjI7XG59XG5cbi8qKlxuICogUHJpbnRzIGEgd2FybmluZyBpbiB0aGUgY29uc29sZSBpZiBpdCBleGlzdHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgVGhlIHdhcm5pbmcgbWVzc2FnZS5cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiB3YXJuaW5nKG1lc3NhZ2UpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBjb25zb2xlLmVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgfVxuICAvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9cbiAgdHJ5IHtcbiAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IGlmIHlvdSBlbmFibGVcbiAgICAvLyBcImJyZWFrIG9uIGFsbCBleGNlcHRpb25zXCIgaW4geW91ciBjb25zb2xlLFxuICAgIC8vIGl0IHdvdWxkIHBhdXNlIHRoZSBleGVjdXRpb24gYXQgdGhpcyBsaW5lLlxuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgfSBjYXRjaCAoZSkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eVxufVxuXG5mdW5jdGlvbiBnZXRVbmRlZmluZWRTdGF0ZUVycm9yTWVzc2FnZShrZXksIGFjdGlvbikge1xuICB2YXIgYWN0aW9uVHlwZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZTtcbiAgdmFyIGFjdGlvbkRlc2NyaXB0aW9uID0gYWN0aW9uVHlwZSAmJiAnYWN0aW9uIFwiJyArIFN0cmluZyhhY3Rpb25UeXBlKSArICdcIicgfHwgJ2FuIGFjdGlvbic7XG5cbiAgcmV0dXJuICdHaXZlbiAnICsgYWN0aW9uRGVzY3JpcHRpb24gKyAnLCByZWR1Y2VyIFwiJyArIGtleSArICdcIiByZXR1cm5lZCB1bmRlZmluZWQuICcgKyAnVG8gaWdub3JlIGFuIGFjdGlvbiwgeW91IG11c3QgZXhwbGljaXRseSByZXR1cm4gdGhlIHByZXZpb3VzIHN0YXRlLiAnICsgJ0lmIHlvdSB3YW50IHRoaXMgcmVkdWNlciB0byBob2xkIG5vIHZhbHVlLCB5b3UgY2FuIHJldHVybiBudWxsIGluc3RlYWQgb2YgdW5kZWZpbmVkLic7XG59XG5cbmZ1bmN0aW9uIGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2UoaW5wdXRTdGF0ZSwgcmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKSB7XG4gIHZhciByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgdmFyIGFyZ3VtZW50TmFtZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuSU5JVCA/ICdwcmVsb2FkZWRTdGF0ZSBhcmd1bWVudCBwYXNzZWQgdG8gY3JlYXRlU3RvcmUnIDogJ3ByZXZpb3VzIHN0YXRlIHJlY2VpdmVkIGJ5IHRoZSByZWR1Y2VyJztcblxuICBpZiAocmVkdWNlcktleXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuICdTdG9yZSBkb2VzIG5vdCBoYXZlIGEgdmFsaWQgcmVkdWNlci4gTWFrZSBzdXJlIHRoZSBhcmd1bWVudCBwYXNzZWQgJyArICd0byBjb21iaW5lUmVkdWNlcnMgaXMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgcmVkdWNlcnMuJztcbiAgfVxuXG4gIGlmICghaXNQbGFpbk9iamVjdChpbnB1dFN0YXRlKSkge1xuICAgIHJldHVybiAnVGhlICcgKyBhcmd1bWVudE5hbWUgKyAnIGhhcyB1bmV4cGVjdGVkIHR5cGUgb2YgXCInICsge30udG9TdHJpbmcuY2FsbChpbnB1dFN0YXRlKS5tYXRjaCgvXFxzKFthLXp8QS1aXSspLylbMV0gKyAnXCIuIEV4cGVjdGVkIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgJyArICgna2V5czogXCInICsgcmVkdWNlcktleXMuam9pbignXCIsIFwiJykgKyAnXCInKTtcbiAgfVxuXG4gIHZhciB1bmV4cGVjdGVkS2V5cyA9IE9iamVjdC5rZXlzKGlucHV0U3RhdGUpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuICFyZWR1Y2Vycy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmICF1bmV4cGVjdGVkS2V5Q2FjaGVba2V5XTtcbiAgfSk7XG5cbiAgdW5leHBlY3RlZEtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdW5leHBlY3RlZEtleUNhY2hlW2tleV0gPSB0cnVlO1xuICB9KTtcblxuICBpZiAoYWN0aW9uICYmIGFjdGlvbi50eXBlID09PSBBY3Rpb25UeXBlcy5SRVBMQUNFKSByZXR1cm47XG5cbiAgaWYgKHVuZXhwZWN0ZWRLZXlzLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gJ1VuZXhwZWN0ZWQgJyArICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAxID8gJ2tleXMnIDogJ2tleScpICsgJyAnICsgKCdcIicgKyB1bmV4cGVjdGVkS2V5cy5qb2luKCdcIiwgXCInKSArICdcIiBmb3VuZCBpbiAnICsgYXJndW1lbnROYW1lICsgJy4gJykgKyAnRXhwZWN0ZWQgdG8gZmluZCBvbmUgb2YgdGhlIGtub3duIHJlZHVjZXIga2V5cyBpbnN0ZWFkOiAnICsgKCdcIicgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArICdcIi4gVW5leHBlY3RlZCBrZXlzIHdpbGwgYmUgaWdub3JlZC4nKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRSZWR1Y2VyU2hhcGUocmVkdWNlcnMpIHtcbiAgT2JqZWN0LmtleXMocmVkdWNlcnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciByZWR1Y2VyID0gcmVkdWNlcnNba2V5XTtcbiAgICB2YXIgaW5pdGlhbFN0YXRlID0gcmVkdWNlcih1bmRlZmluZWQsIHsgdHlwZTogQWN0aW9uVHlwZXMuSU5JVCB9KTtcblxuICAgIGlmICh0eXBlb2YgaW5pdGlhbFN0YXRlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWR1Y2VyIFwiJyArIGtleSArICdcIiByZXR1cm5lZCB1bmRlZmluZWQgZHVyaW5nIGluaXRpYWxpemF0aW9uLiAnICsgJ0lmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlIHJlZHVjZXIgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCAnICsgJ2V4cGxpY2l0bHkgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLiBUaGUgaW5pdGlhbCBzdGF0ZSBtYXkgJyArICdub3QgYmUgdW5kZWZpbmVkLiBJZiB5b3UgZG9uXFwndCB3YW50IHRvIHNldCBhIHZhbHVlIGZvciB0aGlzIHJlZHVjZXIsICcgKyAneW91IGNhbiB1c2UgbnVsbCBpbnN0ZWFkIG9mIHVuZGVmaW5lZC4nKTtcbiAgICB9XG5cbiAgICB2YXIgdHlwZSA9ICdAQHJlZHV4L1BST0JFX1VOS05PV05fQUNUSU9OXycgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoNykuc3BsaXQoJycpLmpvaW4oJy4nKTtcbiAgICBpZiAodHlwZW9mIHJlZHVjZXIodW5kZWZpbmVkLCB7IHR5cGU6IHR5cGUgfSkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlZHVjZXIgXCInICsga2V5ICsgJ1wiIHJldHVybmVkIHVuZGVmaW5lZCB3aGVuIHByb2JlZCB3aXRoIGEgcmFuZG9tIHR5cGUuICcgKyAoJ0RvblxcJ3QgdHJ5IHRvIGhhbmRsZSAnICsgQWN0aW9uVHlwZXMuSU5JVCArICcgb3Igb3RoZXIgYWN0aW9ucyBpbiBcInJlZHV4LypcIiAnKSArICduYW1lc3BhY2UuIFRoZXkgYXJlIGNvbnNpZGVyZWQgcHJpdmF0ZS4gSW5zdGVhZCwgeW91IG11c3QgcmV0dXJuIHRoZSAnICsgJ2N1cnJlbnQgc3RhdGUgZm9yIGFueSB1bmtub3duIGFjdGlvbnMsIHVubGVzcyBpdCBpcyB1bmRlZmluZWQsICcgKyAnaW4gd2hpY2ggY2FzZSB5b3UgbXVzdCByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUsIHJlZ2FyZGxlc3Mgb2YgdGhlICcgKyAnYWN0aW9uIHR5cGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBub3QgYmUgdW5kZWZpbmVkLCBidXQgY2FuIGJlIG51bGwuJyk7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBUdXJucyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBkaWZmZXJlbnQgcmVkdWNlciBmdW5jdGlvbnMsIGludG8gYSBzaW5nbGVcbiAqIHJlZHVjZXIgZnVuY3Rpb24uIEl0IHdpbGwgY2FsbCBldmVyeSBjaGlsZCByZWR1Y2VyLCBhbmQgZ2F0aGVyIHRoZWlyIHJlc3VsdHNcbiAqIGludG8gYSBzaW5nbGUgc3RhdGUgb2JqZWN0LCB3aG9zZSBrZXlzIGNvcnJlc3BvbmQgdG8gdGhlIGtleXMgb2YgdGhlIHBhc3NlZFxuICogcmVkdWNlciBmdW5jdGlvbnMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHJlZHVjZXJzIEFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgY29ycmVzcG9uZCB0byBkaWZmZXJlbnRcbiAqIHJlZHVjZXIgZnVuY3Rpb25zIHRoYXQgbmVlZCB0byBiZSBjb21iaW5lZCBpbnRvIG9uZS4gT25lIGhhbmR5IHdheSB0byBvYnRhaW5cbiAqIGl0IGlzIHRvIHVzZSBFUzYgYGltcG9ydCAqIGFzIHJlZHVjZXJzYCBzeW50YXguIFRoZSByZWR1Y2VycyBtYXkgbmV2ZXIgcmV0dXJuXG4gKiB1bmRlZmluZWQgZm9yIGFueSBhY3Rpb24uIEluc3RlYWQsIHRoZXkgc2hvdWxkIHJldHVybiB0aGVpciBpbml0aWFsIHN0YXRlXG4gKiBpZiB0aGUgc3RhdGUgcGFzc2VkIHRvIHRoZW0gd2FzIHVuZGVmaW5lZCwgYW5kIHRoZSBjdXJyZW50IHN0YXRlIGZvciBhbnlcbiAqIHVucmVjb2duaXplZCBhY3Rpb24uXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIHJlZHVjZXIgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGV2ZXJ5IHJlZHVjZXIgaW5zaWRlIHRoZVxuICogcGFzc2VkIG9iamVjdCwgYW5kIGJ1aWxkcyBhIHN0YXRlIG9iamVjdCB3aXRoIHRoZSBzYW1lIHNoYXBlLlxuICovXG5mdW5jdGlvbiBjb21iaW5lUmVkdWNlcnMocmVkdWNlcnMpIHtcbiAgdmFyIHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICB2YXIgZmluYWxSZWR1Y2VycyA9IHt9O1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHJlZHVjZXJLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IHJlZHVjZXJLZXlzW2ldO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICh0eXBlb2YgcmVkdWNlcnNba2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgd2FybmluZygnTm8gcmVkdWNlciBwcm92aWRlZCBmb3Iga2V5IFwiJyArIGtleSArICdcIicpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcmVkdWNlcnNba2V5XSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgZmluYWxSZWR1Y2Vyc1trZXldID0gcmVkdWNlcnNba2V5XTtcbiAgICB9XG4gIH1cbiAgdmFyIGZpbmFsUmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhmaW5hbFJlZHVjZXJzKTtcblxuICB2YXIgdW5leHBlY3RlZEtleUNhY2hlID0gdm9pZCAwO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZSA9IHt9O1xuICB9XG5cbiAgdmFyIHNoYXBlQXNzZXJ0aW9uRXJyb3IgPSB2b2lkIDA7XG4gIHRyeSB7XG4gICAgYXNzZXJ0UmVkdWNlclNoYXBlKGZpbmFsUmVkdWNlcnMpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgc2hhcGVBc3NlcnRpb25FcnJvciA9IGU7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gY29tYmluYXRpb24oKSB7XG4gICAgdmFyIHN0YXRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICB2YXIgYWN0aW9uID0gYXJndW1lbnRzWzFdO1xuXG4gICAgaWYgKHNoYXBlQXNzZXJ0aW9uRXJyb3IpIHtcbiAgICAgIHRocm93IHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciB3YXJuaW5nTWVzc2FnZSA9IGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2Uoc3RhdGUsIGZpbmFsUmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKTtcbiAgICAgIGlmICh3YXJuaW5nTWVzc2FnZSkge1xuICAgICAgICB3YXJuaW5nKHdhcm5pbmdNZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgaGFzQ2hhbmdlZCA9IGZhbHNlO1xuICAgIHZhciBuZXh0U3RhdGUgPSB7fTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgZmluYWxSZWR1Y2VyS2V5cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfa2V5ID0gZmluYWxSZWR1Y2VyS2V5c1tfaV07XG4gICAgICB2YXIgcmVkdWNlciA9IGZpbmFsUmVkdWNlcnNbX2tleV07XG4gICAgICB2YXIgcHJldmlvdXNTdGF0ZUZvcktleSA9IHN0YXRlW19rZXldO1xuICAgICAgdmFyIG5leHRTdGF0ZUZvcktleSA9IHJlZHVjZXIocHJldmlvdXNTdGF0ZUZvcktleSwgYWN0aW9uKTtcbiAgICAgIGlmICh0eXBlb2YgbmV4dFN0YXRlRm9yS2V5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB2YXIgZXJyb3JNZXNzYWdlID0gZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2UoX2tleSwgYWN0aW9uKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yTWVzc2FnZSk7XG4gICAgICB9XG4gICAgICBuZXh0U3RhdGVbX2tleV0gPSBuZXh0U3RhdGVGb3JLZXk7XG4gICAgICBoYXNDaGFuZ2VkID0gaGFzQ2hhbmdlZCB8fCBuZXh0U3RhdGVGb3JLZXkgIT09IHByZXZpb3VzU3RhdGVGb3JLZXk7XG4gICAgfVxuICAgIHJldHVybiBoYXNDaGFuZ2VkID8gbmV4dFN0YXRlIDogc3RhdGU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoKGFjdGlvbkNyZWF0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH07XG59XG5cbi8qKlxuICogVHVybnMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uIGNyZWF0b3JzLCBpbnRvIGFuIG9iamVjdCB3aXRoIHRoZVxuICogc2FtZSBrZXlzLCBidXQgd2l0aCBldmVyeSBmdW5jdGlvbiB3cmFwcGVkIGludG8gYSBgZGlzcGF0Y2hgIGNhbGwgc28gdGhleVxuICogbWF5IGJlIGludm9rZWQgZGlyZWN0bHkuIFRoaXMgaXMganVzdCBhIGNvbnZlbmllbmNlIG1ldGhvZCwgYXMgeW91IGNhbiBjYWxsXG4gKiBgc3RvcmUuZGlzcGF0Y2goTXlBY3Rpb25DcmVhdG9ycy5kb1NvbWV0aGluZygpKWAgeW91cnNlbGYganVzdCBmaW5lLlxuICpcbiAqIEZvciBjb252ZW5pZW5jZSwgeW91IGNhbiBhbHNvIHBhc3MgYSBzaW5nbGUgZnVuY3Rpb24gYXMgdGhlIGZpcnN0IGFyZ3VtZW50LFxuICogYW5kIGdldCBhIGZ1bmN0aW9uIGluIHJldHVybi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdH0gYWN0aW9uQ3JlYXRvcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uXG4gKiBjcmVhdG9yIGZ1bmN0aW9ucy4gT25lIGhhbmR5IHdheSB0byBvYnRhaW4gaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXNgXG4gKiBzeW50YXguIFlvdSBtYXkgYWxzbyBwYXNzIGEgc2luZ2xlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGRpc3BhdGNoIFRoZSBgZGlzcGF0Y2hgIGZ1bmN0aW9uIGF2YWlsYWJsZSBvbiB5b3VyIFJlZHV4XG4gKiBzdG9yZS5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb258T2JqZWN0fSBUaGUgb2JqZWN0IG1pbWlja2luZyB0aGUgb3JpZ2luYWwgb2JqZWN0LCBidXQgd2l0aFxuICogZXZlcnkgYWN0aW9uIGNyZWF0b3Igd3JhcHBlZCBpbnRvIHRoZSBgZGlzcGF0Y2hgIGNhbGwuIElmIHlvdSBwYXNzZWQgYVxuICogZnVuY3Rpb24gYXMgYGFjdGlvbkNyZWF0b3JzYCwgdGhlIHJldHVybiB2YWx1ZSB3aWxsIGFsc28gYmUgYSBzaW5nbGVcbiAqIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiaW5kQWN0aW9uQ3JlYXRvcnMoYWN0aW9uQ3JlYXRvcnMsIGRpc3BhdGNoKSB7XG4gIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvcnMsIGRpc3BhdGNoKTtcbiAgfVxuXG4gIGlmICgodHlwZW9mIGFjdGlvbkNyZWF0b3JzID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihhY3Rpb25DcmVhdG9ycykpICE9PSAnb2JqZWN0JyB8fCBhY3Rpb25DcmVhdG9ycyA9PT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcignYmluZEFjdGlvbkNyZWF0b3JzIGV4cGVjdGVkIGFuIG9iamVjdCBvciBhIGZ1bmN0aW9uLCBpbnN0ZWFkIHJlY2VpdmVkICcgKyAoYWN0aW9uQ3JlYXRvcnMgPT09IG51bGwgPyAnbnVsbCcgOiB0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGFjdGlvbkNyZWF0b3JzKSkgKyAnLiAnICsgJ0RpZCB5b3Ugd3JpdGUgXCJpbXBvcnQgQWN0aW9uQ3JlYXRvcnMgZnJvbVwiIGluc3RlYWQgb2YgXCJpbXBvcnQgKiBhcyBBY3Rpb25DcmVhdG9ycyBmcm9tXCI/Jyk7XG4gIH1cblxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGFjdGlvbkNyZWF0b3JzKTtcbiAgdmFyIGJvdW5kQWN0aW9uQ3JlYXRvcnMgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgdmFyIGFjdGlvbkNyZWF0b3IgPSBhY3Rpb25DcmVhdG9yc1trZXldO1xuICAgIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYm91bmRBY3Rpb25DcmVhdG9yc1trZXldID0gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvciwgZGlzcGF0Y2gpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYm91bmRBY3Rpb25DcmVhdG9ycztcbn1cblxuLyoqXG4gKiBDb21wb3NlcyBzaW5nbGUtYXJndW1lbnQgZnVuY3Rpb25zIGZyb20gcmlnaHQgdG8gbGVmdC4gVGhlIHJpZ2h0bW9zdFxuICogZnVuY3Rpb24gY2FuIHRha2UgbXVsdGlwbGUgYXJndW1lbnRzIGFzIGl0IHByb3ZpZGVzIHRoZSBzaWduYXR1cmUgZm9yXG4gKiB0aGUgcmVzdWx0aW5nIGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0gey4uLkZ1bmN0aW9ufSBmdW5jcyBUaGUgZnVuY3Rpb25zIHRvIGNvbXBvc2UuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgZnVuY3Rpb24gb2J0YWluZWQgYnkgY29tcG9zaW5nIHRoZSBhcmd1bWVudCBmdW5jdGlvbnNcbiAqIGZyb20gcmlnaHQgdG8gbGVmdC4gRm9yIGV4YW1wbGUsIGNvbXBvc2UoZiwgZywgaCkgaXMgaWRlbnRpY2FsIHRvIGRvaW5nXG4gKiAoLi4uYXJncykgPT4gZihnKGgoLi4uYXJncykpKS5cbiAqL1xuXG5mdW5jdGlvbiBjb21wb3NlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBmdW5jc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgICAgcmV0dXJuIGFyZztcbiAgICB9O1xuICB9XG5cbiAgaWYgKGZ1bmNzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBmdW5jc1swXTtcbiAgfVxuXG4gIHJldHVybiBmdW5jcy5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGEoYi5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cykpO1xuICAgIH07XG4gIH0pO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBzdG9yZSBlbmhhbmNlciB0aGF0IGFwcGxpZXMgbWlkZGxld2FyZSB0byB0aGUgZGlzcGF0Y2ggbWV0aG9kXG4gKiBvZiB0aGUgUmVkdXggc3RvcmUuIFRoaXMgaXMgaGFuZHkgZm9yIGEgdmFyaWV0eSBvZiB0YXNrcywgc3VjaCBhcyBleHByZXNzaW5nXG4gKiBhc3luY2hyb25vdXMgYWN0aW9ucyBpbiBhIGNvbmNpc2UgbWFubmVyLCBvciBsb2dnaW5nIGV2ZXJ5IGFjdGlvbiBwYXlsb2FkLlxuICpcbiAqIFNlZSBgcmVkdXgtdGh1bmtgIHBhY2thZ2UgYXMgYW4gZXhhbXBsZSBvZiB0aGUgUmVkdXggbWlkZGxld2FyZS5cbiAqXG4gKiBCZWNhdXNlIG1pZGRsZXdhcmUgaXMgcG90ZW50aWFsbHkgYXN5bmNocm9ub3VzLCB0aGlzIHNob3VsZCBiZSB0aGUgZmlyc3RcbiAqIHN0b3JlIGVuaGFuY2VyIGluIHRoZSBjb21wb3NpdGlvbiBjaGFpbi5cbiAqXG4gKiBOb3RlIHRoYXQgZWFjaCBtaWRkbGV3YXJlIHdpbGwgYmUgZ2l2ZW4gdGhlIGBkaXNwYXRjaGAgYW5kIGBnZXRTdGF0ZWAgZnVuY3Rpb25zXG4gKiBhcyBuYW1lZCBhcmd1bWVudHMuXG4gKlxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gbWlkZGxld2FyZXMgVGhlIG1pZGRsZXdhcmUgY2hhaW4gdG8gYmUgYXBwbGllZC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBzdG9yZSBlbmhhbmNlciBhcHBseWluZyB0aGUgbWlkZGxld2FyZS5cbiAqL1xuZnVuY3Rpb24gYXBwbHlNaWRkbGV3YXJlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbWlkZGxld2FyZXMgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBtaWRkbGV3YXJlc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoY3JlYXRlU3RvcmUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgfVxuXG4gICAgICB2YXIgc3RvcmUgPSBjcmVhdGVTdG9yZS5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgICAgdmFyIF9kaXNwYXRjaCA9IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Rpc3BhdGNoaW5nIHdoaWxlIGNvbnN0cnVjdGluZyB5b3VyIG1pZGRsZXdhcmUgaXMgbm90IGFsbG93ZWQuICcgKyAnT3RoZXIgbWlkZGxld2FyZSB3b3VsZCBub3QgYmUgYXBwbGllZCB0byB0aGlzIGRpc3BhdGNoLicpO1xuICAgICAgfTtcblxuICAgICAgdmFyIG1pZGRsZXdhcmVBUEkgPSB7XG4gICAgICAgIGdldFN0YXRlOiBzdG9yZS5nZXRTdGF0ZSxcbiAgICAgICAgZGlzcGF0Y2g6IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICAgIHJldHVybiBfZGlzcGF0Y2guYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgdmFyIGNoYWluID0gbWlkZGxld2FyZXMubWFwKGZ1bmN0aW9uIChtaWRkbGV3YXJlKSB7XG4gICAgICAgIHJldHVybiBtaWRkbGV3YXJlKG1pZGRsZXdhcmVBUEkpO1xuICAgICAgfSk7XG4gICAgICBfZGlzcGF0Y2ggPSBjb21wb3NlLmFwcGx5KHVuZGVmaW5lZCwgY2hhaW4pKHN0b3JlLmRpc3BhdGNoKTtcblxuICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBzdG9yZSwge1xuICAgICAgICBkaXNwYXRjaDogX2Rpc3BhdGNoXG4gICAgICB9KTtcbiAgICB9O1xuICB9O1xufVxuXG4vKlxuICogVGhpcyBpcyBhIGR1bW15IGZ1bmN0aW9uIHRvIGNoZWNrIGlmIHRoZSBmdW5jdGlvbiBuYW1lIGhhcyBiZWVuIGFsdGVyZWQgYnkgbWluaWZpY2F0aW9uLlxuICogSWYgdGhlIGZ1bmN0aW9uIGhhcyBiZWVuIG1pbmlmaWVkIGFuZCBOT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nLCB3YXJuIHRoZSB1c2VyLlxuICovXG5mdW5jdGlvbiBpc0NydXNoZWQoKSB7fVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlb2YgaXNDcnVzaGVkLm5hbWUgPT09ICdzdHJpbmcnICYmIGlzQ3J1c2hlZC5uYW1lICE9PSAnaXNDcnVzaGVkJykge1xuICB3YXJuaW5nKFwiWW91IGFyZSBjdXJyZW50bHkgdXNpbmcgbWluaWZpZWQgY29kZSBvdXRzaWRlIG9mIE5PREVfRU5WID09PSAncHJvZHVjdGlvbicuIFwiICsgJ1RoaXMgbWVhbnMgdGhhdCB5b3UgYXJlIHJ1bm5pbmcgYSBzbG93ZXIgZGV2ZWxvcG1lbnQgYnVpbGQgb2YgUmVkdXguICcgKyAnWW91IGNhbiB1c2UgbG9vc2UtZW52aWZ5IChodHRwczovL2dpdGh1Yi5jb20vemVydG9zaC9sb29zZS1lbnZpZnkpIGZvciBicm93c2VyaWZ5ICcgKyAnb3IgRGVmaW5lUGx1Z2luIGZvciB3ZWJwYWNrIChodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzMwMDMwMDMxKSAnICsgJ3RvIGVuc3VyZSB5b3UgaGF2ZSB0aGUgY29ycmVjdCBjb2RlIGZvciB5b3VyIHByb2R1Y3Rpb24gYnVpbGQuJyk7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZVN0b3JlLCBjb21iaW5lUmVkdWNlcnMsIGJpbmRBY3Rpb25DcmVhdG9ycywgYXBwbHlNaWRkbGV3YXJlLCBjb21wb3NlLCBBY3Rpb25UeXBlcyBhcyBfX0RPX05PVF9VU0VfX0FjdGlvblR5cGVzIH07XG4iLCIvKiBnbG9iYWwgd2luZG93ICovXG5pbXBvcnQgcG9ueWZpbGwgZnJvbSAnLi9wb255ZmlsbC5qcyc7XG5cbnZhciByb290O1xuXG5pZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBzZWxmO1xufSBlbHNlIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gd2luZG93O1xufSBlbHNlIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gZ2xvYmFsO1xufSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gbW9kdWxlO1xufSBlbHNlIHtcbiAgcm9vdCA9IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG59XG5cbnZhciByZXN1bHQgPSBwb255ZmlsbChyb290KTtcbmV4cG9ydCBkZWZhdWx0IHJlc3VsdDtcbiIsIi8vXHJcbi8vIOe0oOadkOmWoumAo1xyXG4vL1xyXG5cclxuZXhwb3J0IGNvbnN0IFNvemFpID0ge1xyXG4gICAgLy9cclxuICAgIC8vIOe0oOadkElE44GL44KJ44CB57Sg5p2Q44Os44Kz44O844OJ44KS6L+U44GZXHJcbiAgICAvL1xyXG4gICAgLy8gW0lOXVxyXG4gICAgLy8gICBzb3phaTog57Sg5p2Q5oOF5aCxXHJcbiAgICAvLyAgIGlkOiDntKDmnZBJRFxyXG4gICAgLy9cclxuICAgIC8vIFtPVVRdXHJcbiAgICAvLyAgIHJlYzog57Sg5p2Q44Os44Kz44O844OJXHJcbiAgICAvL1xyXG4gICAgZ2V0U296YWk6IChzb3phaSwgaWQpID0+IHtcclxuICAgICAgICBsZXQgc296YWlfcmVjID0gJyc7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc296YWkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKHNvemFpW2ldLmlkID09IGlkKSB7XHJcbiAgICAgICAgICAgICAgICBzb3phaV9yZWMgPSBzb3phaVtpXTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gc296YWlfcmVjO1xyXG4gICAgfSxcclxufSIsImltcG9ydCB7IHB1dCwgc2VsZWN0LCBmb3JrIH0gZnJvbSAncmVkdXgtc2FnYS9lZmZlY3RzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBTYWdhX05hZ2FzaGlSZXN1bHRfQ3JlYXRlLFxyXG59IGZyb20gJy4uL2FjdGlvbnNfc2FnYS9uYWdhc2hpLmpzJztcclxuXHJcbmltcG9ydCB7IFRleHQgfSBmcm9tICcuLi9saWJzL3RleHQuanMnO1xyXG5pbXBvcnQgeyBCb3ggfSBmcm9tICcuLi9saWJzL2JveC5qcyc7XHJcbmltcG9ydCB7IFNvemFpIH0gZnJvbSAnLi4vbGlicy9zb3phaS5qcyc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24qIG5hZ2FzaGlFeGVjKGdyb3VwLCBzb3phaV9pZCkge1xyXG4gICAgLy8g44Oc44OD44Kv44K55oOF5aCx44KS5b6X44KLXHJcbiAgICBjb25zdCBib3hzID0geWllbGQgc2VsZWN0KChzdGF0ZSkgPT4gc3RhdGUuYm94cyk7XHJcblxyXG4gICAgLy8g5oyH5a6a44Gu44Oc44OD44Kv44K544Gu44Kw44Or44O844OX44Gu5pyA5Yid44Gu44Oc44OD44Kv44K544Os44Kz44O844OJ44KS5b6X44KLXHJcbiAgICBjb25zdCBub19hcnkgPSBCb3guZ2V0R3JvdXBOb0FyeShib3hzLCBncm91cCk7XHJcbiAgICBjb25zdCBmaXJzdF9ib3hfaWQgPSBCb3guZ2V0Qm94SWQoYm94cywgZ3JvdXAsIG5vX2FyeVswXSk7XHJcbiAgICBjb25zdCBib3ggPSBCb3guZ2V0Qm94KGJveHMsIGZpcnN0X2JveF9pZCk7XHJcblxyXG4gICAgaWYgKGJveC50eXBlID09ICd0ZXh0Jykge1xyXG4gICAgICAgIC8vIOe0oOadkOODrOOCs+ODvOODieOCkuW+l+OCi1xyXG4gICAgICAgIGNvbnN0IHNvemFpID0geWllbGQgc2VsZWN0KChzdGF0ZSkgPT4gc3RhdGUuc296YWkpO1xyXG4gICAgICAgIGNvbnN0IHNvemFpX3JlYyA9IFNvemFpLmdldFNvemFpKHNvemFpLCBzb3phaV9pZCk7XHJcblxyXG4gICAgICAgIGxldCBtb2ppX2luZGV4ID0gMDtcclxuXHJcbiAgICAgICAgLy8g44Kw44Or44O844OXTm/phY3liJfjgafnubDjgorov5TjgZlcclxuICAgICAgICBsZXQgY2VudGVyQXJ5LCBlbmRfaW5kZXg7XHJcbiAgICAgICAgZm9yIChsZXQgbiA9IDA7IG4gPCBub19hcnkubGVuZ3RoOyBuKyspIHtcclxuICAgICAgICAgICAgLy8g44Oc44OD44Kv44K544Os44Kz44O844OJ44KS5b6X44KLXHJcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldF9ib3hfaWQgPSBCb3guZ2V0Qm94SWQoYm94cywgZ3JvdXAsIG5vX2FyeVtuXSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGJveF9yZWMgPSBCb3guZ2V0Qm94KGJveHMsIHRhcmdldF9ib3hfaWQpO1xyXG5cclxuICAgICAgICAgICAgLy8g44Ko44Oq44Ki5oOF5aCx44KS5rGC44KB44KLXHJcbiAgICAgICAgICAgIGxldCBhcmVhc2l6ZV9qLCBhcmVhc2l6ZV9nO1xyXG4gICAgICAgICAgICBpZiAoYm94X3JlYy50ZXh0Lmt1bWlob2tvID09ICd0YXRlJykge1xyXG4gICAgICAgICAgICAgICAgYXJlYXNpemVfaiA9IGJveF9yZWMueTIgLSBib3hfcmVjLnkxO1xyXG4gICAgICAgICAgICAgICAgYXJlYXNpemVfZyA9IGJveF9yZWMueDIgLSBib3hfcmVjLngxO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYXJlYXNpemVfaiA9IGJveF9yZWMueDIgLSBib3hfcmVjLngxO1xyXG4gICAgICAgICAgICAgICAgYXJlYXNpemVfZyA9IGJveF9yZWMueTIgLSBib3hfcmVjLnkxO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyDjg5zjg4Pjgq/jgrnjgqjjg6rjgqLjgavjg4bjgq3jgrnjg4jjgpLmtYHjgZfjgZ/jgajjgY3jga7mloflrZfjga7kuK3lv4PluqfmqJnphY3liJfjgpLlvpfjgotcclxuICAgICAgICAgICAgW2NlbnRlckFyeSwgZW5kX2luZGV4XSA9IFRleHQuZ2V0TmFnYXNoaUNlbnRlckFyeSAoXHJcbiAgICAgICAgICAgICAgICBzb3phaV9yZWMubW9qaU9iakFyeSxcclxuICAgICAgICAgICAgICAgIG1vamlfaW5kZXgsXHJcbiAgICAgICAgICAgICAgICBhcmVhc2l6ZV9qLFxyXG4gICAgICAgICAgICAgICAgYXJlYXNpemVfZyxcclxuICAgICAgICAgICAgICAgIGJveF9yZWMudGV4dC5wYWRkaW5nX2pzLFxyXG4gICAgICAgICAgICAgICAgYm94X3JlYy50ZXh0LnBhZGRpbmdfamUsXHJcbiAgICAgICAgICAgICAgICBib3hfcmVjLnRleHQucGFkZGluZ19ncyxcclxuICAgICAgICAgICAgICAgIGJveF9yZWMudGV4dC5wYWRkaW5nX2dlLFxyXG4gICAgICAgICAgICAgICAgYm94X3JlYy50ZXh0LnNpemVfaixcclxuICAgICAgICAgICAgICAgIGJveF9yZWMudGV4dC5zaXplX2csXHJcbiAgICAgICAgICAgICAgICBib3hfcmVjLnRleHQuZ3lva2FuXHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICBpZiAoZW5kX2luZGV4ID09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAvLyAx5paH5a2X44KC5rWB44Gb44Gq44GL44Gj44Gf5aC05ZCIXHJcbiAgICAgICAgICAgICAgICBjb25zdCBwYXlsb2FkID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGJveF9pZDogdGFyZ2V0X2JveF9pZCxcclxuICAgICAgICAgICAgICAgICAgICBuYWdhc2hpUmVzdWx0OiBbXSxcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgeWllbGQgcHV0KFNhZ2FfTmFnYXNoaVJlc3VsdF9DcmVhdGUocGF5bG9hZCkpO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIOa1geOBl+OBn+e1kOaenOaDheWgsemFjeWIl+OCkuW+l+OCi1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbmFnYXNoaVJlc3VsdCA9IFRleHQubmFnYXNoaVJlc3VsdChcclxuICAgICAgICAgICAgICAgICAgICBjZW50ZXJBcnksXHJcbiAgICAgICAgICAgICAgICAgICAgc296YWlfcmVjLm1vamlPYmpBcnksXHJcbiAgICAgICAgICAgICAgICAgICAgbW9qaV9pbmRleFxyXG4gICAgICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBwYXlsb2FkID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGJveF9pZDogdGFyZ2V0X2JveF9pZCxcclxuICAgICAgICAgICAgICAgICAgICBuYWdhc2hpUmVzdWx0OiBuYWdhc2hpUmVzdWx0LFxyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICB5aWVsZCBwdXQoU2FnYV9OYWdhc2hpUmVzdWx0X0NyZWF0ZShwYXlsb2FkKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgbW9qaV9pbmRleCA9IGVuZF9pbmRleCArIDE7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG1vamlfaW5kZXggPj0gc296YWlfcmVjLm1vamlPYmpBcnkubGVuZ3RoIC0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIOaWh+Wtl+WIl+OBruacgOW+jOOBvuOBp+a1geOBl+OBn1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDntKDmnZDvvIjmloflrZfliJfvvInjgYzkvZnjgaPjgZ/loLTlkIhcclxuICAgICAgICBpZiAoZW5kX2luZGV4ID09IC0xXHJcbiAgICAgICAgIHx8IGVuZF9pbmRleCArIDEgPCBzb3phaV9yZWMubW9qaU9iakFyeS5sZW5ndGgpIHtcclxuY29uc29sZS5sb2coZW5kX2luZGV4KTtcclxuY29uc29sZS5sb2coJ+aWh+Wtl+OBjOS9meOBo+OBnycpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uKiBuYWdhc2hpRXhlY0dyb3VwKGdyb3VwKSB7XHJcbiAgICAvLyDmjIflrprjga7jgrDjg6vjg7zjg5flkI3jgYzjg6rjg7Pjgq/jg6rjgrnjg4jjgavlkKvjgb7jgozjgabjgYTjgozjgbDjgIHlr77lv5zjgZnjgovntKDmnZBJROOCkuW+l+OCi1xyXG4gICAgY29uc3QgbGlua3MgPSB5aWVsZCBzZWxlY3QoKHN0YXRlKSA9PiBzdGF0ZS5saW5rcyk7XHJcblxyXG4gICAgbGV0IHNvemFpX2lkID0gJyc7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbmtzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKGxpbmtzW2ldLmdyb3VwID09IGdyb3VwKSB7XHJcbiAgICAgICAgICAgIHNvemFpX2lkID0gbGlua3NbaV0uc296YWlfaWQ7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAoc296YWlfaWQgPT0gJycpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgeWllbGQgZm9yayhuYWdhc2hpRXhlYywgZ3JvdXAsIHNvemFpX2lkKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uKiBuYWdhc2hpRXhlY0JveChib3hfaWQpIHtcclxuICAgIC8vIOaMh+WumuOBruODnOODg+OCr+OCueOBruOCsOODq+ODvOODl+WQjeOBjOODquODs+OCr+ODquOCueODiOOBq+WQq+OBvuOCjOOBpuOBhOOCjOOBsOOAgeWvvuW/nOOBmeOCi+e0oOadkElE44KS5b6X44KLXHJcbiAgICBjb25zdCBib3hzICA9IHlpZWxkIHNlbGVjdCgoc3RhdGUpID0+IHN0YXRlLmJveHMpO1xyXG5cclxuICAgIGNvbnN0IFtncm91cCwgbm9dID0gQm94LmdldEdyb3VwQW5kTm8oYm94cywgYm94X2lkKTtcclxuXHJcbiAgICB5aWVsZCBmb3JrKG5hZ2FzaGlFeGVjR3JvdXAsIGdyb3VwKTtcclxufSBcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiogbmFnYXNoaUV4ZWNTb3phaShzb3phaV9pZCkge1xyXG4gICAgLy8g5oyH5a6a44Gu57Sg5p2QSUTjgYzjg6rjg7Pjgq/jg6rjgrnjg4jjgavlkKvjgb7jgozjgabjgYTjgozjgbDjgIHlr77lv5zjgZnjgovjgrDjg6vjg7zjg5flkI3jgpLlvpfjgotcclxuICAgIGNvbnN0IGxpbmtzID0geWllbGQgc2VsZWN0KChzdGF0ZSkgPT4gc3RhdGUubGlua3MpO1xyXG4gICAgXHJcbiAgICBsZXQgZ3JvdXAgPSAnJztcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlua3MubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBpZiAobGlua3NbaV0uc296YWlfaWQgPT0gc296YWlfaWQpIHtcclxuICAgICAgICAgICAgZ3JvdXAgPSBsaW5rc1tpXS5ncm91cDtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChncm91cCA9PSAnJykge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB5aWVsZCBmb3JrKG5hZ2FzaGlFeGVjLCBncm91cCwgc296YWlfaWQpO1xyXG59IFxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uKiBuYWdhc2hpRXhlY0FsbCgpIHtcclxuICAgIC8vIOODquODs+OCr+ODquOCueODiOOCkuW+l+OCi1xyXG4gICAgY29uc3QgbGlua3MgPSB5aWVsZCBzZWxlY3QoKHN0YXRlKSA9PiBzdGF0ZS5saW5rcyk7XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5rcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIHlpZWxkIGZvcmsobmFnYXNoaUV4ZWMsIGxpbmtzW2ldLmdyb3VwLCBsaW5rc1tpXS5zb3phaV9pZCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbiIsImV4cG9ydCBjb25zdCBTQUdBX1RPT0xCT1hMSU5LX0xJTktfQ1JFQVRFID0gJ1NBR0FfVE9PTEJPWExJTktfTElOS19DUkVBVEUnO1xyXG5leHBvcnQgY29uc3QgU0FHQV9UT09MQk9YTElOS19MSU5LX0RFTEVURSA9ICdTQUdBX1RPT0xCT1hMSU5LX0xJTktfREVMRVRFJztcclxuXHJcblxyXG5leHBvcnQgY29uc3QgU2FnYV9Ub29sQm94TGlua19MaW5rX0NyZWF0ZSA9IChwYXlsb2FkID0ge30pID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdHlwZTogU0FHQV9UT09MQk9YTElOS19MSU5LX0NSRUFURSxcclxuICAgICAgICBwYXlsb2FkOiB7XHJcbiAgICAgICAgICAgIGdyb3VwOiBwYXlsb2FkLmdyb3VwLFxyXG4gICAgICAgICAgICBzb3phaV9pZDogcGF5bG9hZC5zb3phaV9pZCxcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFNhZ2FfVG9vbEJveExpbmtfTGlua19EZWxldGUgPSAocGF5bG9hZCA9IHt9KSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHR5cGU6IFNBR0FfVE9PTEJPWExJTktfTElOS19ERUxFVEUsXHJcbiAgICAgICAgcGF5bG9hZDoge1xyXG4gICAgICAgICAgICBncm91cDogcGF5bG9hZC5ncm91cCxcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxyXG4iLCJleHBvcnQgY29uc3QgU0FHQV9UT09MQk9YX01PVkVFTkQgPSAnU0FHQV9UT09MQk9YX01PVkVFTkQnO1xyXG5cclxuXHJcbmV4cG9ydCBjb25zdCBTYWdhX1Rvb2xCb3hfTW92ZUVuZCA9IChwYXlsb2FkID0ge30pID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdHlwZTogU0FHQV9UT09MQk9YX01PVkVFTkQsXHJcbiAgICAgICAgcGF5bG9hZDoge1xyXG4gICAgICAgICAgICBpZDogcGF5bG9hZC5pZCxcclxuICAgICAgICAgICAgeDogIHBheWxvYWQueCxcclxuICAgICAgICAgICAgeTogIHBheWxvYWQueSxcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxyXG4iLCJleHBvcnQgY29uc3QgU0FHQV9UT09MQk9YVEVYVERBVEFfVEVYVERBVEFfVVBEQVRFID0gJ1NBR0FfVE9PTEJPWFRFWFREQVRBX1RFWFREQVRBX1VQREFURSc7XHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IFNhZ2FfVG9vbEJveFRleHREYXRhX1RleHREYXRhX1VwZGF0ZSA9IChwYXlsb2FkID0ge30pID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdHlwZTogU0FHQV9UT09MQk9YVEVYVERBVEFfVEVYVERBVEFfVVBEQVRFLFxyXG4gICAgICAgIHBheWxvYWQ6IHtcclxuICAgICAgICAgICAgYm94OiBwYXlsb2FkLmJveCxcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxyXG5cclxuIiwiZXhwb3J0IGNvbnN0IFNBR0FfU0NBTEVfQ0hBTkdFID0gJ1NBR0FfU0NBTEVfQ0hBTkdFJztcclxuXHJcblxyXG5leHBvcnQgY29uc3QgU2FnYV9TY2FsZV9DaGFuZ2UgPSAocGF5bG9hZCA9IHt9KSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHR5cGU6IFNBR0FfU0NBTEVfQ0hBTkdFLFxyXG4gICAgICAgIHBheWxvYWQ6IHtcclxuICAgICAgICAgICAgc2NhbGU6IHBheWxvYWQuc2NhbGUsXHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuXHJcbiIsImV4cG9ydCBjb25zdCBTVV9UT09MQk9YTElOS19DUkVBVEVCVVRUT05fQ0xJQ0sgPSAnU1VfVE9PTEJPWExJTktfQ1JFQVRFQlVUVE9OX0NMSUNLJztcclxuZXhwb3J0IGNvbnN0IFNVX1RPT0xCT1hMSU5LX0RFTEVURUJVVFRPTl9DTElDSyA9ICdTVV9UT09MQk9YTElOS19ERUxFVEVCVVRUT05fQ0xJQ0snO1xyXG5cclxuXHJcbmV4cG9ydCBjb25zdCBTVV9Ub29sQm94TGlua19DcmVhdGVCdXR0b25fQ2xpY2sgPSAocGF5bG9hZCA9IHt9KSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHR5cGU6IFNVX1RPT0xCT1hMSU5LX0NSRUFURUJVVFRPTl9DTElDSyxcclxuICAgICAgICBwYXlsb2FkOiB7XHJcbiAgICAgICAgICAgIGdyb3VwOiBwYXlsb2FkLmdyb3VwLFxyXG4gICAgICAgICAgICBzb3phaV9pZDogcGF5bG9hZC5zb3phaV9pZCxcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFNVX1Rvb2xCb3hMaW5rX0RlbGV0ZUJ1dHRvbl9DbGljayA9IChwYXlsb2FkID0ge30pID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdHlwZTogU1VfVE9PTEJPWExJTktfREVMRVRFQlVUVE9OX0NMSUNLLFxyXG4gICAgICAgIHBheWxvYWQ6IHtcclxuICAgICAgICAgICAgZ3JvdXA6IHBheWxvYWQuZ3JvdXAsXHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuIiwiZXhwb3J0IGNvbnN0IFNVX1RPT0xCT1hTT1pBSV9VUERBVEVCVVRUT05fQ0xJQ0sgPSAnU1VfVE9PTEJPWFNPWkFJX1VQREFURUJVVFRPTl9DTElDSyc7XHJcbmV4cG9ydCBjb25zdCBTVV9UT09MQk9YU09aQUlfREVMRVRFQlVUVE9OX0NMSUNLID0gJ1NVX1RPT0xCT1hTT1pBSV9ERUxFVEVCVVRUT05fQ0xJQ0snO1xyXG5leHBvcnQgY29uc3QgU1VfVE9PTEJPWFNPWkFJX0NSRUFURUJVVFRPTl9DTElDSyA9ICdTVV9UT09MQk9YU09aQUlfQ1JFQVRFQlVUVE9OX0NMSUNLJztcclxuZXhwb3J0IGNvbnN0IFNVX1RPT0xCT1hTT1pBSV9TT1pBSV9TRUxFQ1QgICAgICAgPSAnU1VfVE9PTEJPWFNPWkFJX1NPWkFJX1NFTEVDVCc7XHJcbmV4cG9ydCBjb25zdCBTVV9UT09MQk9YU09aQUlfU09aQUlfVE9HR0xFICAgICAgID0gJ1NVX1RPT0xCT1hTT1pBSV9TT1pBSV9UT0dHTEUnO1xyXG5cclxuXHJcbmV4cG9ydCBjb25zdCBTVV9Ub29sQm94U296YWlfVXBkYXRlQnV0dG9uX0NsaWNrID0gKHBheWxvYWQgPSB7fSkgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiBTVV9UT09MQk9YU09aQUlfVVBEQVRFQlVUVE9OX0NMSUNLLFxyXG4gICAgICAgIHBheWxvYWQ6IHtcclxuICAgICAgICAgICAgc296YWk6IHBheWxvYWQuc296YWksXHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBTVV9Ub29sQm94U296YWlfRGVsZXRlQnV0dG9uX0NsaWNrID0gKHBheWxvYWQgPSB7fSkgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiBTVV9UT09MQk9YU09aQUlfREVMRVRFQlVUVE9OX0NMSUNLLFxyXG4gICAgICAgIHBheWxvYWQ6IHtcclxuICAgICAgICAgICAgaWQ6IHBheWxvYWQuaWQsXHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBTVV9Ub29sQm94U296YWlfQ3JlYXRlQnV0dG9uX0NsaWNrID0gKHBheWxvYWQgPSB7fSkgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiBTVV9UT09MQk9YU09aQUlfQ1JFQVRFQlVUVE9OX0NMSUNLLFxyXG4gICAgICAgIHBheWxvYWQ6IHtcclxuICAgICAgICAgICAgaWQ6IHBheWxvYWQuaWQsXHJcbiAgICAgICAgICAgIHR5cGU6IHBheWxvYWQudHlwZSxcclxuICAgICAgICAgICAgdGV4dDogcGF5bG9hZC50ZXh0LFxyXG4gICAgICAgICAgICBpbWFnZTogcGF5bG9hZC5pbWFnZSxcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFNVX1Rvb2xCb3hTb3phaV9Tb3phaV9TZWxlY3QgPSAocGF5bG9hZCA9IHt9KSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHR5cGU6IFNVX1RPT0xCT1hTT1pBSV9TT1pBSV9TRUxFQ1QsXHJcbiAgICAgICAgcGF5bG9hZDoge1xyXG4gICAgICAgICAgICBpZDogcGF5bG9hZC5pZCxcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBTVV9Ub29sQm94U296YWlfU296YWlfVG9nZ2xlID0gKHBheWxvYWQgPSB7fSkgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiBTVV9UT09MQk9YU09aQUlfU09aQUlfVE9HR0xFLFxyXG4gICAgICAgIHBheWxvYWQ6IHtcclxuICAgICAgICAgICAgaWQ6IHBheWxvYWQuaWQsXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsImV4cG9ydCBjb25zdCBTVV9UT09MQk9YVEVYVERBVEFfVVBEQVRFQlVUVE9OX0NMSUNLID0gJ1NVX1RPT0xCT1hURVhUREFUQV9VUERBVEVCVVRUT05fQ0xJQ0snO1xyXG5cclxuXHJcbmV4cG9ydCBjb25zdCBTVV9Ub29sQm94VGV4dERhdGFfVXBkYXRlQnV0dG9uX0NsaWNrID0gKHBheWxvYWQgPSB7fSkgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiBTVV9UT09MQk9YVEVYVERBVEFfVVBEQVRFQlVUVE9OX0NMSUNLLFxyXG4gICAgICAgIHBheWxvYWQ6IHtcclxuICAgICAgICAgICAgYm94OiBwYXlsb2FkLmJveCxcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxyXG4iLCJleHBvcnQgY29uc3QgU1VfVE9PTEJPWEJPWERBVEFfVVBEQVRFQlVUVE9OX0NMSUNLID0gJ1NVX1RPT0xCT1hCT1hEQVRBX1VQREFURUJVVFRPTl9DTElDSyc7XHJcbmV4cG9ydCBjb25zdCBTVV9UT09MQk9YQk9YREFUQV9ERUxFVEVCVVRUT05fQ0xJQ0sgPSAnU1VfVE9PTEJPWEJPWERBVEFfREVMRVRFQlVUVE9OX0NMSUNLJztcclxuZXhwb3J0IGNvbnN0IFNVX1RPT0xCT1hCT1hEQVRBX0NSRUFURUJVVFRPTl9DTElDSyA9ICdTVV9UT09MQk9YQk9YREFUQV9DUkVBVEVCVVRUT05fQ0xJQ0snO1xyXG5cclxuXHJcbmV4cG9ydCBjb25zdCBTVV9Ub29sQm94Qm94RGF0YV9VcGRhdGVCdXR0b25fQ2xpY2sgPSAocGF5bG9hZCA9IHt9KSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHR5cGU6IFNVX1RPT0xCT1hCT1hEQVRBX1VQREFURUJVVFRPTl9DTElDSyxcclxuICAgICAgICBwYXlsb2FkOiB7XHJcbiAgICAgICAgICAgIGJveDogcGF5bG9hZC5ib3gsXHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBTVV9Ub29sQm94Qm94RGF0YV9EZWxldGVCdXR0b25fQ2xpY2sgPSAocGF5bG9hZCA9IHt9KSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHR5cGU6IFNVX1RPT0xCT1hCT1hEQVRBX0RFTEVURUJVVFRPTl9DTElDSyxcclxuICAgICAgICBwYXlsb2FkOiB7XHJcbiAgICAgICAgICAgIGlkOiBwYXlsb2FkLmlkLFxyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgU1VfVG9vbEJveEJveERhdGFfQ3JlYXRlQnV0dG9uX0NsaWNrID0gKHBheWxvYWQgPSB7fSkgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiBTVV9UT09MQk9YQk9YREFUQV9DUkVBVEVCVVRUT05fQ0xJQ0ssXHJcbiAgICAgICAgcGF5bG9hZDoge1xyXG4gICAgICAgICAgICBib3g6IHBheWxvYWQuYm94LFxyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XHJcbiIsImV4cG9ydCBjb25zdCBTVV9UT09MQk9YU0NBTEVfTUlOQlVUVE9OX0NMSUNLID0gJ1NVX1RPT0xCT1hTQ0FMRV9NSU5CVVRUT05fQ0xJQ0snO1xyXG5leHBvcnQgY29uc3QgU1VfVE9PTEJPWFNDQUxFX01BWEJVVFRPTl9DTElDSyA9ICdTVV9UT09MQk9YU0NBTEVfTUFYQlVUVE9OX0NMSUNLJztcclxuZXhwb3J0IGNvbnN0IFNVX1RPT0xCT1hTQ0FMRV8xMDBQRVJCVVRUT05fQ0xJQ0sgPSAnU1VfVE9PTEJPWFNDQUxFXzEwMFBFUkJVVFRPTl9DTElDSyc7XHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IFNVX1Rvb2xCb3hTY2FsZV9NaW5CdXR0b25fQ2xpY2sgPSAocGF5bG9hZCA9IHt9KSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHR5cGU6IFNVX1RPT0xCT1hTQ0FMRV9NSU5CVVRUT05fQ0xJQ0ssXHJcbiAgICAgICAgcGF5bG9hZDoge1xyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgU1VfVG9vbEJveFNjYWxlX01heEJ1dHRvbl9DbGljayA9IChwYXlsb2FkID0ge30pID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdHlwZTogU1VfVE9PTEJPWFNDQUxFX01BWEJVVFRPTl9DTElDSyxcclxuICAgICAgICBwYXlsb2FkOiB7XHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBTVV9Ub29sQm94U2NhbGVfMTAwUGVyQnV0dG9uX0NsaWNrID0gKHBheWxvYWQgPSB7fSkgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiBTVV9UT09MQk9YU0NBTEVfMTAwUEVSQlVUVE9OX0NMSUNLLFxyXG4gICAgICAgIHBheWxvYWQ6IHtcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxyXG4iLCJleHBvcnQgY29uc3QgU1VfVE9PTEJPWF9NT1ZFRU5EID0gJ1NVX1RPT0xCT1hfTU9WRUVORCc7XHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IFNVX1Rvb2xCb3hfTW92ZUVuZCA9IChwYXlsb2FkID0ge30pID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdHlwZTogU1VfVE9PTEJPWF9NT1ZFRU5ELFxyXG4gICAgICAgIHBheWxvYWQ6IHtcclxuICAgICAgICAgICAgaWQ6IHBheWxvYWQuaWQsXHJcbiAgICAgICAgICAgIHg6ICBwYXlsb2FkLngsXHJcbiAgICAgICAgICAgIHk6ICBwYXlsb2FkLnksXHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xubW9kdWxlLmV4cG9ydHMgPSBNYXRoLnNjYWxlIHx8IGZ1bmN0aW9uIHNjYWxlKHgsIGluTG93LCBpbkhpZ2gsIG91dExvdywgb3V0SGlnaCkge1xuICBpZiAoXG4gICAgYXJndW1lbnRzLmxlbmd0aCA9PT0gMFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgfHwgeCAhPSB4XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICB8fCBpbkxvdyAhPSBpbkxvd1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgfHwgaW5IaWdoICE9IGluSGlnaFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgfHwgb3V0TG93ICE9IG91dExvd1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgfHwgb3V0SGlnaCAhPSBvdXRIaWdoXG4gICkgcmV0dXJuIE5hTjtcbiAgaWYgKHggPT09IEluZmluaXR5IHx8IHggPT09IC1JbmZpbml0eSkgcmV0dXJuIHg7XG4gIHJldHVybiAoeCAtIGluTG93KSAqIChvdXRIaWdoIC0gb3V0TG93KSAvIChpbkhpZ2ggLSBpbkxvdykgKyBvdXRMb3c7XG59O1xuIiwidmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXIsIElURVJBVE9SKSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgZm9yT2YoaXRlciwgZmFsc2UsIHJlc3VsdC5wdXNoLCByZXN1bHQsIElURVJBVE9SKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vRGF2aWRCcnVhbnQvTWFwLVNldC5wcm90b3R5cGUudG9KU09OXG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciBmcm9tID0gcmVxdWlyZSgnLi9fYXJyYXktZnJvbS1pdGVyYWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSkge1xuICByZXR1cm4gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIGlmIChjbGFzc29mKHRoaXMpICE9IE5BTUUpIHRocm93IFR5cGVFcnJvcihOQU1FICsgXCIjdG9KU09OIGlzbid0IGdlbmVyaWNcIik7XG4gICAgcmV0dXJuIGZyb20odGhpcyk7XG4gIH07XG59O1xuIiwidmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBpc0VudW0gPSByZXF1aXJlKCcuL19vYmplY3QtcGllJykuZjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGlzRW50cmllcykge1xuICByZXR1cm4gZnVuY3Rpb24gKGl0KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QoaXQpO1xuICAgIHZhciBrZXlzID0gZ2V0S2V5cyhPKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChsZW5ndGggPiBpKSBpZiAoaXNFbnVtLmNhbGwoTywga2V5ID0ga2V5c1tpKytdKSkge1xuICAgICAgcmVzdWx0LnB1c2goaXNFbnRyaWVzID8gW2tleSwgT1trZXldXSA6IE9ba2V5XSk7XG4gICAgfSByZXR1cm4gcmVzdWx0O1xuICB9O1xufTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciByZXBlYXQgPSByZXF1aXJlKCcuL19zdHJpbmctcmVwZWF0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgbWF4TGVuZ3RoLCBmaWxsU3RyaW5nLCBsZWZ0KSB7XG4gIHZhciBTID0gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xuICB2YXIgc3RyaW5nTGVuZ3RoID0gUy5sZW5ndGg7XG4gIHZhciBmaWxsU3RyID0gZmlsbFN0cmluZyA9PT0gdW5kZWZpbmVkID8gJyAnIDogU3RyaW5nKGZpbGxTdHJpbmcpO1xuICB2YXIgaW50TWF4TGVuZ3RoID0gdG9MZW5ndGgobWF4TGVuZ3RoKTtcbiAgaWYgKGludE1heExlbmd0aCA8PSBzdHJpbmdMZW5ndGggfHwgZmlsbFN0ciA9PSAnJykgcmV0dXJuIFM7XG4gIHZhciBmaWxsTGVuID0gaW50TWF4TGVuZ3RoIC0gc3RyaW5nTGVuZ3RoO1xuICB2YXIgc3RyaW5nRmlsbGVyID0gcmVwZWF0LmNhbGwoZmlsbFN0ciwgTWF0aC5jZWlsKGZpbGxMZW4gLyBmaWxsU3RyLmxlbmd0aCkpO1xuICBpZiAoc3RyaW5nRmlsbGVyLmxlbmd0aCA+IGZpbGxMZW4pIHN0cmluZ0ZpbGxlciA9IHN0cmluZ0ZpbGxlci5zbGljZSgwLCBmaWxsTGVuKTtcbiAgcmV0dXJuIGxlZnQgPyBzdHJpbmdGaWxsZXIgKyBTIDogUyArIHN0cmluZ0ZpbGxlcjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLWZsYXRNYXAvI3NlYy1GbGF0dGVuSW50b0FycmF5XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIElTX0NPTkNBVF9TUFJFQURBQkxFID0gcmVxdWlyZSgnLi9fd2tzJykoJ2lzQ29uY2F0U3ByZWFkYWJsZScpO1xuXG5mdW5jdGlvbiBmbGF0dGVuSW50b0FycmF5KHRhcmdldCwgb3JpZ2luYWwsIHNvdXJjZSwgc291cmNlTGVuLCBzdGFydCwgZGVwdGgsIG1hcHBlciwgdGhpc0FyZykge1xuICB2YXIgdGFyZ2V0SW5kZXggPSBzdGFydDtcbiAgdmFyIHNvdXJjZUluZGV4ID0gMDtcbiAgdmFyIG1hcEZuID0gbWFwcGVyID8gY3R4KG1hcHBlciwgdGhpc0FyZywgMykgOiBmYWxzZTtcbiAgdmFyIGVsZW1lbnQsIHNwcmVhZGFibGU7XG5cbiAgd2hpbGUgKHNvdXJjZUluZGV4IDwgc291cmNlTGVuKSB7XG4gICAgaWYgKHNvdXJjZUluZGV4IGluIHNvdXJjZSkge1xuICAgICAgZWxlbWVudCA9IG1hcEZuID8gbWFwRm4oc291cmNlW3NvdXJjZUluZGV4XSwgc291cmNlSW5kZXgsIG9yaWdpbmFsKSA6IHNvdXJjZVtzb3VyY2VJbmRleF07XG5cbiAgICAgIHNwcmVhZGFibGUgPSBmYWxzZTtcbiAgICAgIGlmIChpc09iamVjdChlbGVtZW50KSkge1xuICAgICAgICBzcHJlYWRhYmxlID0gZWxlbWVudFtJU19DT05DQVRfU1BSRUFEQUJMRV07XG4gICAgICAgIHNwcmVhZGFibGUgPSBzcHJlYWRhYmxlICE9PSB1bmRlZmluZWQgPyAhIXNwcmVhZGFibGUgOiBpc0FycmF5KGVsZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3ByZWFkYWJsZSAmJiBkZXB0aCA+IDApIHtcbiAgICAgICAgdGFyZ2V0SW5kZXggPSBmbGF0dGVuSW50b0FycmF5KHRhcmdldCwgb3JpZ2luYWwsIGVsZW1lbnQsIHRvTGVuZ3RoKGVsZW1lbnQubGVuZ3RoKSwgdGFyZ2V0SW5kZXgsIGRlcHRoIC0gMSkgLSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRhcmdldEluZGV4ID49IDB4MWZmZmZmZmZmZmZmZmYpIHRocm93IFR5cGVFcnJvcigpO1xuICAgICAgICB0YXJnZXRbdGFyZ2V0SW5kZXhdID0gZWxlbWVudDtcbiAgICAgIH1cblxuICAgICAgdGFyZ2V0SW5kZXgrKztcbiAgICB9XG4gICAgc291cmNlSW5kZXgrKztcbiAgfVxuICByZXR1cm4gdGFyZ2V0SW5kZXg7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZmxhdHRlbkludG9BcnJheTtcbiIsIi8vIGFsbCBvYmplY3Qga2V5cywgaW5jbHVkZXMgbm9uLWVudW1lcmFibGUgYW5kIHN5bWJvbHNcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIFJlZmxlY3QgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5SZWZsZWN0O1xubW9kdWxlLmV4cG9ydHMgPSBSZWZsZWN0ICYmIFJlZmxlY3Qub3duS2V5cyB8fCBmdW5jdGlvbiBvd25LZXlzKGl0KSB7XG4gIHZhciBrZXlzID0gZ09QTi5mKGFuT2JqZWN0KGl0KSk7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICByZXR1cm4gZ2V0U3ltYm9scyA/IGtleXMuY29uY2F0KGdldFN5bWJvbHMoaXQpKSA6IGtleXM7XG59O1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9pbmRleFxudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09PSB1bmRlZmluZWQpIHJldHVybiAwO1xuICB2YXIgbnVtYmVyID0gdG9JbnRlZ2VyKGl0KTtcbiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKG51bWJlcik7XG4gIGlmIChudW1iZXIgIT09IGxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcignV3JvbmcgbGVuZ3RoIScpO1xuICByZXR1cm4gbGVuZ3RoO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGdldFdlYWsgPSByZXF1aXJlKCcuL19tZXRhJykuZ2V0V2VhaztcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciBjcmVhdGVBcnJheU1ldGhvZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKTtcbnZhciAkaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgYXJyYXlGaW5kID0gY3JlYXRlQXJyYXlNZXRob2QoNSk7XG52YXIgYXJyYXlGaW5kSW5kZXggPSBjcmVhdGVBcnJheU1ldGhvZCg2KTtcbnZhciBpZCA9IDA7XG5cbi8vIGZhbGxiYWNrIGZvciB1bmNhdWdodCBmcm96ZW4ga2V5c1xudmFyIHVuY2F1Z2h0RnJvemVuU3RvcmUgPSBmdW5jdGlvbiAodGhhdCkge1xuICByZXR1cm4gdGhhdC5fbCB8fCAodGhhdC5fbCA9IG5ldyBVbmNhdWdodEZyb3plblN0b3JlKCkpO1xufTtcbnZhciBVbmNhdWdodEZyb3plblN0b3JlID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmEgPSBbXTtcbn07XG52YXIgZmluZFVuY2F1Z2h0RnJvemVuID0gZnVuY3Rpb24gKHN0b3JlLCBrZXkpIHtcbiAgcmV0dXJuIGFycmF5RmluZChzdG9yZS5hLCBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gaXRbMF0gPT09IGtleTtcbiAgfSk7XG59O1xuVW5jYXVnaHRGcm96ZW5TdG9yZS5wcm90b3R5cGUgPSB7XG4gIGdldDogZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBlbnRyeSA9IGZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICAgIGlmIChlbnRyeSkgcmV0dXJuIGVudHJ5WzFdO1xuICB9LFxuICBoYXM6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gISFmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgIHZhciBlbnRyeSA9IGZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICAgIGlmIChlbnRyeSkgZW50cnlbMV0gPSB2YWx1ZTtcbiAgICBlbHNlIHRoaXMuYS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gIH0sXG4gICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIGluZGV4ID0gYXJyYXlGaW5kSW5kZXgodGhpcy5hLCBmdW5jdGlvbiAoaXQpIHtcbiAgICAgIHJldHVybiBpdFswXSA9PT0ga2V5O1xuICAgIH0pO1xuICAgIGlmICh+aW5kZXgpIHRoaXMuYS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIHJldHVybiAhIX5pbmRleDtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbiAod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUikge1xuICAgIHZhciBDID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgaXRlcmFibGUpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhhdCwgQywgTkFNRSwgJ19pJyk7XG4gICAgICB0aGF0Ll90ID0gTkFNRTsgICAgICAvLyBjb2xsZWN0aW9uIHR5cGVcbiAgICAgIHRoYXQuX2kgPSBpZCsrOyAgICAgIC8vIGNvbGxlY3Rpb24gaWRcbiAgICAgIHRoYXQuX2wgPSB1bmRlZmluZWQ7IC8vIGxlYWsgc3RvcmUgZm9yIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RzXG4gICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG4gICAgfSk7XG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIHtcbiAgICAgIC8vIDIzLjMuMy4yIFdlYWtNYXAucHJvdG90eXBlLmRlbGV0ZShrZXkpXG4gICAgICAvLyAyMy40LjMuMyBXZWFrU2V0LnByb3RvdHlwZS5kZWxldGUodmFsdWUpXG4gICAgICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoIWlzT2JqZWN0KGtleSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7XG4gICAgICAgIGlmIChkYXRhID09PSB0cnVlKSByZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZSh2YWxpZGF0ZSh0aGlzLCBOQU1FKSlbJ2RlbGV0ZSddKGtleSk7XG4gICAgICAgIHJldHVybiBkYXRhICYmICRoYXMoZGF0YSwgdGhpcy5faSkgJiYgZGVsZXRlIGRhdGFbdGhpcy5faV07XG4gICAgICB9LFxuICAgICAgLy8gMjMuMy4zLjQgV2Vha01hcC5wcm90b3R5cGUuaGFzKGtleSlcbiAgICAgIC8vIDIzLjQuMy40IFdlYWtTZXQucHJvdG90eXBlLmhhcyh2YWx1ZSlcbiAgICAgIGhhczogZnVuY3Rpb24gaGFzKGtleSkge1xuICAgICAgICBpZiAoIWlzT2JqZWN0KGtleSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7XG4gICAgICAgIGlmIChkYXRhID09PSB0cnVlKSByZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZSh2YWxpZGF0ZSh0aGlzLCBOQU1FKSkuaGFzKGtleSk7XG4gICAgICAgIHJldHVybiBkYXRhICYmICRoYXMoZGF0YSwgdGhpcy5faSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIEM7XG4gIH0sXG4gIGRlZjogZnVuY3Rpb24gKHRoYXQsIGtleSwgdmFsdWUpIHtcbiAgICB2YXIgZGF0YSA9IGdldFdlYWsoYW5PYmplY3Qoa2V5KSwgdHJ1ZSk7XG4gICAgaWYgKGRhdGEgPT09IHRydWUpIHVuY2F1Z2h0RnJvemVuU3RvcmUodGhhdCkuc2V0KGtleSwgdmFsdWUpO1xuICAgIGVsc2UgZGF0YVt0aGF0Ll9pXSA9IHZhbHVlO1xuICAgIHJldHVybiB0aGF0O1xuICB9LFxuICB1ZnN0b3JlOiB1bmNhdWdodEZyb3plblN0b3JlXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGVhY2ggPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMCk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJyk7XG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi9fb2JqZWN0LWFzc2lnbicpO1xudmFyIHdlYWsgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXdlYWsnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBXRUFLX01BUCA9ICdXZWFrTWFwJztcbnZhciBnZXRXZWFrID0gbWV0YS5nZXRXZWFrO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGU7XG52YXIgdW5jYXVnaHRGcm96ZW5TdG9yZSA9IHdlYWsudWZzdG9yZTtcbnZhciB0bXAgPSB7fTtcbnZhciBJbnRlcm5hbE1hcDtcblxudmFyIHdyYXBwZXIgPSBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBXZWFrTWFwKCkge1xuICAgIHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpO1xuICB9O1xufTtcblxudmFyIG1ldGhvZHMgPSB7XG4gIC8vIDIzLjMuMy4zIFdlYWtNYXAucHJvdG90eXBlLmdldChrZXkpXG4gIGdldDogZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgIGlmIChpc09iamVjdChrZXkpKSB7XG4gICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgIGlmIChkYXRhID09PSB0cnVlKSByZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZSh2YWxpZGF0ZSh0aGlzLCBXRUFLX01BUCkpLmdldChrZXkpO1xuICAgICAgcmV0dXJuIGRhdGEgPyBkYXRhW3RoaXMuX2ldIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgfSxcbiAgLy8gMjMuMy4zLjUgV2Vha01hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpXG4gIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICByZXR1cm4gd2Vhay5kZWYodmFsaWRhdGUodGhpcywgV0VBS19NQVApLCBrZXksIHZhbHVlKTtcbiAgfVxufTtcblxuLy8gMjMuMyBXZWFrTWFwIE9iamVjdHNcbnZhciAkV2Vha01hcCA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKFdFQUtfTUFQLCB3cmFwcGVyLCBtZXRob2RzLCB3ZWFrLCB0cnVlLCB0cnVlKTtcblxuLy8gSUUxMSBXZWFrTWFwIGZyb3plbiBrZXlzIGZpeFxuaWYgKGZhaWxzKGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyAkV2Vha01hcCgpLnNldCgoT2JqZWN0LmZyZWV6ZSB8fCBPYmplY3QpKHRtcCksIDcpLmdldCh0bXApICE9IDc7IH0pKSB7XG4gIEludGVybmFsTWFwID0gd2Vhay5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLCBXRUFLX01BUCk7XG4gIGFzc2lnbihJbnRlcm5hbE1hcC5wcm90b3R5cGUsIG1ldGhvZHMpO1xuICBtZXRhLk5FRUQgPSB0cnVlO1xuICBlYWNoKFsnZGVsZXRlJywgJ2hhcycsICdnZXQnLCAnc2V0J10sIGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcHJvdG8gPSAkV2Vha01hcC5wcm90b3R5cGU7XG4gICAgdmFyIG1ldGhvZCA9IHByb3RvW2tleV07XG4gICAgcmVkZWZpbmUocHJvdG8sIGtleSwgZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIC8vIHN0b3JlIGZyb3plbiBvYmplY3RzIG9uIGludGVybmFsIHdlYWttYXAgc2hpbVxuICAgICAgaWYgKGlzT2JqZWN0KGEpICYmICFpc0V4dGVuc2libGUoYSkpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9mKSB0aGlzLl9mID0gbmV3IEludGVybmFsTWFwKCk7XG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9mW2tleV0oYSwgYik7XG4gICAgICAgIHJldHVybiBrZXkgPT0gJ3NldCcgPyB0aGlzIDogcmVzdWx0O1xuICAgICAgLy8gc3RvcmUgYWxsIHRoZSByZXN0IG9uIG5hdGl2ZSB3ZWFrbWFwXG4gICAgICB9IHJldHVybiBtZXRob2QuY2FsbCh0aGlzLCBhLCBiKTtcbiAgICB9KTtcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgc3Ryb25nID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi1zdHJvbmcnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBTRVQgPSAnU2V0JztcblxuLy8gMjMuMiBTZXQgT2JqZWN0c1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoU0VULCBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBTZXQoKSB7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy4yLjMuMSBTZXQucHJvdG90eXBlLmFkZCh2YWx1ZSlcbiAgYWRkOiBmdW5jdGlvbiBhZGQodmFsdWUpIHtcbiAgICByZXR1cm4gc3Ryb25nLmRlZih2YWxpZGF0ZSh0aGlzLCBTRVQpLCB2YWx1ZSA9IHZhbHVlID09PSAwID8gMCA6IHZhbHVlLCB2YWx1ZSk7XG4gIH1cbn0sIHN0cm9uZyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgJGl0ZXJEZWZpbmUgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpO1xudmFyIHN0ZXAgPSByZXF1aXJlKCcuL19pdGVyLXN0ZXAnKTtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFzdEtleSA9IHJlcXVpcmUoJy4vX21ldGEnKS5mYXN0S2V5O1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIFNJWkUgPSBERVNDUklQVE9SUyA/ICdfcycgOiAnc2l6ZSc7XG5cbnZhciBnZXRFbnRyeSA9IGZ1bmN0aW9uICh0aGF0LCBrZXkpIHtcbiAgLy8gZmFzdCBjYXNlXG4gIHZhciBpbmRleCA9IGZhc3RLZXkoa2V5KTtcbiAgdmFyIGVudHJ5O1xuICBpZiAoaW5kZXggIT09ICdGJykgcmV0dXJuIHRoYXQuX2lbaW5kZXhdO1xuICAvLyBmcm96ZW4gb2JqZWN0IGNhc2VcbiAgZm9yIChlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pIHtcbiAgICBpZiAoZW50cnkuayA9PSBrZXkpIHJldHVybiBlbnRyeTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbiAod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUikge1xuICAgIHZhciBDID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgaXRlcmFibGUpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhhdCwgQywgTkFNRSwgJ19pJyk7XG4gICAgICB0aGF0Ll90ID0gTkFNRTsgICAgICAgICAvLyBjb2xsZWN0aW9uIHR5cGVcbiAgICAgIHRoYXQuX2kgPSBjcmVhdGUobnVsbCk7IC8vIGluZGV4XG4gICAgICB0aGF0Ll9mID0gdW5kZWZpbmVkOyAgICAvLyBmaXJzdCBlbnRyeVxuICAgICAgdGhhdC5fbCA9IHVuZGVmaW5lZDsgICAgLy8gbGFzdCBlbnRyeVxuICAgICAgdGhhdFtTSVpFXSA9IDA7ICAgICAgICAgLy8gc2l6ZVxuICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgIH0pO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7XG4gICAgICAvLyAyMy4xLjMuMSBNYXAucHJvdG90eXBlLmNsZWFyKClcbiAgICAgIC8vIDIzLjIuMy4yIFNldC5wcm90b3R5cGUuY2xlYXIoKVxuICAgICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgICBmb3IgKHZhciB0aGF0ID0gdmFsaWRhdGUodGhpcywgTkFNRSksIGRhdGEgPSB0aGF0Ll9pLCBlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pIHtcbiAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTtcbiAgICAgICAgICBpZiAoZW50cnkucCkgZW50cnkucCA9IGVudHJ5LnAubiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBkZWxldGUgZGF0YVtlbnRyeS5pXTtcbiAgICAgICAgfVxuICAgICAgICB0aGF0Ll9mID0gdGhhdC5fbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhhdFtTSVpFXSA9IDA7XG4gICAgICB9LFxuICAgICAgLy8gMjMuMS4zLjMgTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KVxuICAgICAgLy8gMjMuMi4zLjQgU2V0LnByb3RvdHlwZS5kZWxldGUodmFsdWUpXG4gICAgICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgdGhhdCA9IHZhbGlkYXRlKHRoaXMsIE5BTUUpO1xuICAgICAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xuICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICB2YXIgbmV4dCA9IGVudHJ5Lm47XG4gICAgICAgICAgdmFyIHByZXYgPSBlbnRyeS5wO1xuICAgICAgICAgIGRlbGV0ZSB0aGF0Ll9pW2VudHJ5LmldO1xuICAgICAgICAgIGVudHJ5LnIgPSB0cnVlO1xuICAgICAgICAgIGlmIChwcmV2KSBwcmV2Lm4gPSBuZXh0O1xuICAgICAgICAgIGlmIChuZXh0KSBuZXh0LnAgPSBwcmV2O1xuICAgICAgICAgIGlmICh0aGF0Ll9mID09IGVudHJ5KSB0aGF0Ll9mID0gbmV4dDtcbiAgICAgICAgICBpZiAodGhhdC5fbCA9PSBlbnRyeSkgdGhhdC5fbCA9IHByZXY7XG4gICAgICAgICAgdGhhdFtTSVpFXS0tO1xuICAgICAgICB9IHJldHVybiAhIWVudHJ5O1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjIuMy42IFNldC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICAgICAgLy8gMjMuMS4zLjUgTWFwLnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gICAgICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgICAgIHZhbGlkYXRlKHRoaXMsIE5BTUUpO1xuICAgICAgICB2YXIgZiA9IGN0eChjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgMyk7XG4gICAgICAgIHZhciBlbnRyeTtcbiAgICAgICAgd2hpbGUgKGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhpcy5fZikge1xuICAgICAgICAgIGYoZW50cnkudiwgZW50cnkuaywgdGhpcyk7XG4gICAgICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5XG4gICAgICAgICAgd2hpbGUgKGVudHJ5ICYmIGVudHJ5LnIpIGVudHJ5ID0gZW50cnkucDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy43IE1hcC5wcm90b3R5cGUuaGFzKGtleSlcbiAgICAgIC8vIDIzLjIuMy43IFNldC5wcm90b3R5cGUuaGFzKHZhbHVlKVxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgIHJldHVybiAhIWdldEVudHJ5KHZhbGlkYXRlKHRoaXMsIE5BTUUpLCBrZXkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChERVNDUklQVE9SUykgZFAoQy5wcm90b3R5cGUsICdzaXplJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB2YWxpZGF0ZSh0aGlzLCBOQU1FKVtTSVpFXTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gQztcbiAgfSxcbiAgZGVmOiBmdW5jdGlvbiAodGhhdCwga2V5LCB2YWx1ZSkge1xuICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSk7XG4gICAgdmFyIHByZXYsIGluZGV4O1xuICAgIC8vIGNoYW5nZSBleGlzdGluZyBlbnRyeVxuICAgIGlmIChlbnRyeSkge1xuICAgICAgZW50cnkudiA9IHZhbHVlO1xuICAgIC8vIGNyZWF0ZSBuZXcgZW50cnlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhhdC5fbCA9IGVudHJ5ID0ge1xuICAgICAgICBpOiBpbmRleCA9IGZhc3RLZXkoa2V5LCB0cnVlKSwgLy8gPC0gaW5kZXhcbiAgICAgICAgazoga2V5LCAgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIGtleVxuICAgICAgICB2OiB2YWx1ZSwgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gdmFsdWVcbiAgICAgICAgcDogcHJldiA9IHRoYXQuX2wsICAgICAgICAgICAgIC8vIDwtIHByZXZpb3VzIGVudHJ5XG4gICAgICAgIG46IHVuZGVmaW5lZCwgICAgICAgICAgICAgICAgICAvLyA8LSBuZXh0IGVudHJ5XG4gICAgICAgIHI6IGZhbHNlICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSByZW1vdmVkXG4gICAgICB9O1xuICAgICAgaWYgKCF0aGF0Ll9mKSB0aGF0Ll9mID0gZW50cnk7XG4gICAgICBpZiAocHJldikgcHJldi5uID0gZW50cnk7XG4gICAgICB0aGF0W1NJWkVdKys7XG4gICAgICAvLyBhZGQgdG8gaW5kZXhcbiAgICAgIGlmIChpbmRleCAhPT0gJ0YnKSB0aGF0Ll9pW2luZGV4XSA9IGVudHJ5O1xuICAgIH0gcmV0dXJuIHRoYXQ7XG4gIH0sXG4gIGdldEVudHJ5OiBnZXRFbnRyeSxcbiAgc2V0U3Ryb25nOiBmdW5jdGlvbiAoQywgTkFNRSwgSVNfTUFQKSB7XG4gICAgLy8gYWRkIC5rZXlzLCAudmFsdWVzLCAuZW50cmllcywgW0BAaXRlcmF0b3JdXG4gICAgLy8gMjMuMS4zLjQsIDIzLjEuMy44LCAyMy4xLjMuMTEsIDIzLjEuMy4xMiwgMjMuMi4zLjUsIDIzLjIuMy44LCAyMy4yLjMuMTAsIDIzLjIuMy4xMVxuICAgICRpdGVyRGVmaW5lKEMsIE5BTUUsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICAgICAgdGhpcy5fdCA9IHZhbGlkYXRlKGl0ZXJhdGVkLCBOQU1FKTsgLy8gdGFyZ2V0XG4gICAgICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgICAgICAvLyBraW5kXG4gICAgICB0aGlzLl9sID0gdW5kZWZpbmVkOyAgICAgICAgICAgICAgICAvLyBwcmV2aW91c1xuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHZhciBraW5kID0gdGhhdC5faztcbiAgICAgIHZhciBlbnRyeSA9IHRoYXQuX2w7XG4gICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgIHdoaWxlIChlbnRyeSAmJiBlbnRyeS5yKSBlbnRyeSA9IGVudHJ5LnA7XG4gICAgICAvLyBnZXQgbmV4dCBlbnRyeVxuICAgICAgaWYgKCF0aGF0Ll90IHx8ICEodGhhdC5fbCA9IGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhhdC5fdC5fZikpIHtcbiAgICAgICAgLy8gb3IgZmluaXNoIHRoZSBpdGVyYXRpb25cbiAgICAgICAgdGhhdC5fdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHN0ZXAoMSk7XG4gICAgICB9XG4gICAgICAvLyByZXR1cm4gc3RlcCBieSBraW5kXG4gICAgICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBzdGVwKDAsIGVudHJ5LmspO1xuICAgICAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBzdGVwKDAsIGVudHJ5LnYpO1xuICAgICAgcmV0dXJuIHN0ZXAoMCwgW2VudHJ5LmssIGVudHJ5LnZdKTtcbiAgICB9LCBJU19NQVAgPyAnZW50cmllcycgOiAndmFsdWVzJywgIUlTX01BUCwgdHJ1ZSk7XG5cbiAgICAvLyBhZGQgW0BAc3BlY2llc10sIDIzLjEuMi4yLCAyMy4yLjIuMlxuICAgIHNldFNwZWNpZXMoTkFNRSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgc3Ryb25nID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi1zdHJvbmcnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBNQVAgPSAnTWFwJztcblxuLy8gMjMuMSBNYXAgT2JqZWN0c1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoTUFQLCBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBNYXAoKSB7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy4xLjMuNiBNYXAucHJvdG90eXBlLmdldChrZXkpXG4gIGdldDogZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgIHZhciBlbnRyeSA9IHN0cm9uZy5nZXRFbnRyeSh2YWxpZGF0ZSh0aGlzLCBNQVApLCBrZXkpO1xuICAgIHJldHVybiBlbnRyeSAmJiBlbnRyeS52O1xuICB9LFxuICAvLyAyMy4xLjMuOSBNYXAucHJvdG90eXBlLnNldChrZXksIHZhbHVlKVxuICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgcmV0dXJuIHN0cm9uZy5kZWYodmFsaWRhdGUodGhpcywgTUFQKSwga2V5ID09PSAwID8gMCA6IGtleSwgdmFsdWUpO1xuICB9XG59LCBzdHJvbmcsIHRydWUpO1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IHJlcXVpcmUoJy4vX25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQywgeCkge1xuICBhbk9iamVjdChDKTtcbiAgaWYgKGlzT2JqZWN0KHgpICYmIHguY29uc3RydWN0b3IgPT09IEMpIHJldHVybiB4O1xuICB2YXIgcHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eS5mKEMpO1xuICB2YXIgcmVzb2x2ZSA9IHByb21pc2VDYXBhYmlsaXR5LnJlc29sdmU7XG4gIHJlc29sdmUoeCk7XG4gIHJldHVybiBwcm9taXNlQ2FwYWJpbGl0eS5wcm9taXNlO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4geyBlOiBmYWxzZSwgdjogZXhlYygpIH07XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4geyBlOiB0cnVlLCB2OiBlIH07XG4gIH1cbn07XG4iLCIvLyAyMS4yLjUuMyBnZXQgUmVnRXhwLnByb3RvdHlwZS5mbGFncygpXG5pZiAocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAvLi9nLmZsYWdzICE9ICdnJykgcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZihSZWdFeHAucHJvdG90eXBlLCAnZmxhZ3MnLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiByZXF1aXJlKCcuL19mbGFncycpXG59KTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGRvbmUsIHZhbHVlKSB7XG4gIHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgZG9uZTogISFkb25lIH07XG59O1xuIiwiLy8gMjIuMS4zLjMgQXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCwgZW5kID0gdGhpcy5sZW5ndGgpXG4ndXNlIHN0cmljdCc7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gW10uY29weVdpdGhpbiB8fCBmdW5jdGlvbiBjb3B5V2l0aGluKHRhcmdldCAvKiA9IDAgKi8sIHN0YXJ0IC8qID0gMCwgZW5kID0gQGxlbmd0aCAqLykge1xuICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICB2YXIgbGVuID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICB2YXIgdG8gPSB0b0Fic29sdXRlSW5kZXgodGFyZ2V0LCBsZW4pO1xuICB2YXIgZnJvbSA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuKTtcbiAgdmFyIGVuZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuICB2YXIgY291bnQgPSBNYXRoLm1pbigoZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW4pKSAtIGZyb20sIGxlbiAtIHRvKTtcbiAgdmFyIGluYyA9IDE7XG4gIGlmIChmcm9tIDwgdG8gJiYgdG8gPCBmcm9tICsgY291bnQpIHtcbiAgICBpbmMgPSAtMTtcbiAgICBmcm9tICs9IGNvdW50IC0gMTtcbiAgICB0byArPSBjb3VudCAtIDE7XG4gIH1cbiAgd2hpbGUgKGNvdW50LS0gPiAwKSB7XG4gICAgaWYgKGZyb20gaW4gTykgT1t0b10gPSBPW2Zyb21dO1xuICAgIGVsc2UgZGVsZXRlIE9bdG9dO1xuICAgIHRvICs9IGluYztcbiAgICBmcm9tICs9IGluYztcbiAgfSByZXR1cm4gTztcbn07XG4iLCJ2YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCBjYWxsYmFja2ZuLCBhTGVuLCBtZW1vLCBpc1JpZ2h0KSB7XG4gIGFGdW5jdGlvbihjYWxsYmFja2ZuKTtcbiAgdmFyIE8gPSB0b09iamVjdCh0aGF0KTtcbiAgdmFyIHNlbGYgPSBJT2JqZWN0KE8pO1xuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICB2YXIgaW5kZXggPSBpc1JpZ2h0ID8gbGVuZ3RoIC0gMSA6IDA7XG4gIHZhciBpID0gaXNSaWdodCA/IC0xIDogMTtcbiAgaWYgKGFMZW4gPCAyKSBmb3IgKDs7KSB7XG4gICAgaWYgKGluZGV4IGluIHNlbGYpIHtcbiAgICAgIG1lbW8gPSBzZWxmW2luZGV4XTtcbiAgICAgIGluZGV4ICs9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgaW5kZXggKz0gaTtcbiAgICBpZiAoaXNSaWdodCA/IGluZGV4IDwgMCA6IGxlbmd0aCA8PSBpbmRleCkge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdSZWR1Y2Ugb2YgZW1wdHkgYXJyYXkgd2l0aCBubyBpbml0aWFsIHZhbHVlJyk7XG4gICAgfVxuICB9XG4gIGZvciAoO2lzUmlnaHQgPyBpbmRleCA+PSAwIDogbGVuZ3RoID4gaW5kZXg7IGluZGV4ICs9IGkpIGlmIChpbmRleCBpbiBzZWxmKSB7XG4gICAgbWVtbyA9IGNhbGxiYWNrZm4obWVtbywgc2VsZltpbmRleF0sIGluZGV4LCBPKTtcbiAgfVxuICByZXR1cm4gbWVtbztcbn07XG4iLCIvLyBjYWxsIHNvbWV0aGluZyBvbiBpdGVyYXRvciBzdGVwIHdpdGggc2FmZSBjbG9zaW5nIG9uIGVycm9yXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIGVudHJpZXMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZW50cmllcyA/IGZuKGFuT2JqZWN0KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpO1xuICAvLyA3LjQuNiBJdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCBjb21wbGV0aW9uKVxuICB9IGNhdGNoIChlKSB7XG4gICAgdmFyIHJldCA9IGl0ZXJhdG9yWydyZXR1cm4nXTtcbiAgICBpZiAocmV0ICE9PSB1bmRlZmluZWQpIGFuT2JqZWN0KHJldC5jYWxsKGl0ZXJhdG9yKSk7XG4gICAgdGhyb3cgZTtcbiAgfVxufTtcbiIsIi8vIDIwLjIuMi4xNiBNYXRoLmZyb3VuZCh4KVxudmFyIHNpZ24gPSByZXF1aXJlKCcuL19tYXRoLXNpZ24nKTtcbnZhciBwb3cgPSBNYXRoLnBvdztcbnZhciBFUFNJTE9OID0gcG93KDIsIC01Mik7XG52YXIgRVBTSUxPTjMyID0gcG93KDIsIC0yMyk7XG52YXIgTUFYMzIgPSBwb3coMiwgMTI3KSAqICgyIC0gRVBTSUxPTjMyKTtcbnZhciBNSU4zMiA9IHBvdygyLCAtMTI2KTtcblxudmFyIHJvdW5kVGllc1RvRXZlbiA9IGZ1bmN0aW9uIChuKSB7XG4gIHJldHVybiBuICsgMSAvIEVQU0lMT04gLSAxIC8gRVBTSUxPTjtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTWF0aC5mcm91bmQgfHwgZnVuY3Rpb24gZnJvdW5kKHgpIHtcbiAgdmFyICRhYnMgPSBNYXRoLmFicyh4KTtcbiAgdmFyICRzaWduID0gc2lnbih4KTtcbiAgdmFyIGEsIHJlc3VsdDtcbiAgaWYgKCRhYnMgPCBNSU4zMikgcmV0dXJuICRzaWduICogcm91bmRUaWVzVG9FdmVuKCRhYnMgLyBNSU4zMiAvIEVQU0lMT04zMikgKiBNSU4zMiAqIEVQU0lMT04zMjtcbiAgYSA9ICgxICsgRVBTSUxPTjMyIC8gRVBTSUxPTikgKiAkYWJzO1xuICByZXN1bHQgPSBhIC0gKGEgLSAkYWJzKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICBpZiAocmVzdWx0ID4gTUFYMzIgfHwgcmVzdWx0ICE9IHJlc3VsdCkgcmV0dXJuICRzaWduICogSW5maW5pdHk7XG4gIHJldHVybiAkc2lnbiAqIHJlc3VsdDtcbn07XG4iLCIvLyAyMC4yLjIuMjAgTWF0aC5sb2cxcCh4KVxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLmxvZzFwIHx8IGZ1bmN0aW9uIGxvZzFwKHgpIHtcbiAgcmV0dXJuICh4ID0gK3gpID4gLTFlLTggJiYgeCA8IDFlLTggPyB4IC0geCAqIHggLyAyIDogTWF0aC5sb2coMSArIHgpO1xufTtcbiIsIi8vIDIwLjEuMi4zIE51bWJlci5pc0ludGVnZXIobnVtYmVyKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0ludGVnZXIoaXQpIHtcbiAgcmV0dXJuICFpc09iamVjdChpdCkgJiYgaXNGaW5pdGUoaXQpICYmIGZsb29yKGl0KSA9PT0gaXQ7XG59O1xuIiwidmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIG1zZykge1xuICBpZiAodHlwZW9mIGl0ICE9ICdudW1iZXInICYmIGNvZihpdCkgIT0gJ051bWJlcicpIHRocm93IFR5cGVFcnJvcihtc2cpO1xuICByZXR1cm4gK2l0O1xufTtcbiIsInZhciAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLnBhcnNlRmxvYXQ7XG52YXIgJHRyaW0gPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW07XG5cbm1vZHVsZS5leHBvcnRzID0gMSAvICRwYXJzZUZsb2F0KHJlcXVpcmUoJy4vX3N0cmluZy13cycpICsgJy0wJykgIT09IC1JbmZpbml0eSA/IGZ1bmN0aW9uIHBhcnNlRmxvYXQoc3RyKSB7XG4gIHZhciBzdHJpbmcgPSAkdHJpbShTdHJpbmcoc3RyKSwgMyk7XG4gIHZhciByZXN1bHQgPSAkcGFyc2VGbG9hdChzdHJpbmcpO1xuICByZXR1cm4gcmVzdWx0ID09PSAwICYmIHN0cmluZy5jaGFyQXQoMCkgPT0gJy0nID8gLTAgOiByZXN1bHQ7XG59IDogJHBhcnNlRmxvYXQ7XG4iLCJ2YXIgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykucGFyc2VJbnQ7XG52YXIgJHRyaW0gPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW07XG52YXIgd3MgPSByZXF1aXJlKCcuL19zdHJpbmctd3MnKTtcbnZhciBoZXggPSAvXlstK10/MFt4WF0vO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICRwYXJzZUludCh3cyArICcwOCcpICE9PSA4IHx8ICRwYXJzZUludCh3cyArICcweDE2JykgIT09IDIyID8gZnVuY3Rpb24gcGFyc2VJbnQoc3RyLCByYWRpeCkge1xuICB2YXIgc3RyaW5nID0gJHRyaW0oU3RyaW5nKHN0ciksIDMpO1xuICByZXR1cm4gJHBhcnNlSW50KHN0cmluZywgKHJhZGl4ID4+PiAwKSB8fCAoaGV4LnRlc3Qoc3RyaW5nKSA/IDE2IDogMTApKTtcbn0gOiAkcGFyc2VJbnQ7XG4iLCIvLyBmYXN0IGFwcGx5LCBodHRwOi8vanNwZXJmLmxua2l0LmNvbS9mYXN0LWFwcGx5LzVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCBhcmdzLCB0aGF0KSB7XG4gIHZhciB1biA9IHRoYXQgPT09IHVuZGVmaW5lZDtcbiAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgIGNhc2UgMDogcmV0dXJuIHVuID8gZm4oKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0KTtcbiAgICBjYXNlIDE6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0pO1xuICAgIGNhc2UgMjogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgY2FzZSAzOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICBjYXNlIDQ6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICB9IHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmdzKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaW52b2tlID0gcmVxdWlyZSgnLi9faW52b2tlJyk7XG52YXIgYXJyYXlTbGljZSA9IFtdLnNsaWNlO1xudmFyIGZhY3RvcmllcyA9IHt9O1xuXG52YXIgY29uc3RydWN0ID0gZnVuY3Rpb24gKEYsIGxlbiwgYXJncykge1xuICBpZiAoIShsZW4gaW4gZmFjdG9yaWVzKSkge1xuICAgIGZvciAodmFyIG4gPSBbXSwgaSA9IDA7IGkgPCBsZW47IGkrKykgbltpXSA9ICdhWycgKyBpICsgJ10nO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgIGZhY3Rvcmllc1tsZW5dID0gRnVuY3Rpb24oJ0YsYScsICdyZXR1cm4gbmV3IEYoJyArIG4uam9pbignLCcpICsgJyknKTtcbiAgfSByZXR1cm4gZmFjdG9yaWVzW2xlbl0oRiwgYXJncyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZ1bmN0aW9uLmJpbmQgfHwgZnVuY3Rpb24gYmluZCh0aGF0IC8qICwgLi4uYXJncyAqLykge1xuICB2YXIgZm4gPSBhRnVuY3Rpb24odGhpcyk7XG4gIHZhciBwYXJ0QXJncyA9IGFycmF5U2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICB2YXIgYm91bmQgPSBmdW5jdGlvbiAoLyogYXJncy4uLiAqLykge1xuICAgIHZhciBhcmdzID0gcGFydEFyZ3MuY29uY2F0KGFycmF5U2xpY2UuY2FsbChhcmd1bWVudHMpKTtcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIGJvdW5kID8gY29uc3RydWN0KGZuLCBhcmdzLmxlbmd0aCwgYXJncykgOiBpbnZva2UoZm4sIGFyZ3MsIHRoYXQpO1xuICB9O1xuICBpZiAoaXNPYmplY3QoZm4ucHJvdG90eXBlKSkgYm91bmQucHJvdG90eXBlID0gZm4ucHJvdG90eXBlO1xuICByZXR1cm4gYm91bmQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMTkuMS4yLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSwgLi4uKVxudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgJGFzc2lnbiA9IE9iamVjdC5hc3NpZ247XG5cbi8vIHNob3VsZCB3b3JrIHdpdGggc3ltYm9scyBhbmQgc2hvdWxkIGhhdmUgZGV0ZXJtaW5pc3RpYyBwcm9wZXJ0eSBvcmRlciAoVjggYnVnKVxubW9kdWxlLmV4cG9ydHMgPSAhJGFzc2lnbiB8fCByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgdmFyIEEgPSB7fTtcbiAgdmFyIEIgPSB7fTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHZhciBTID0gU3ltYm9sKCk7XG4gIHZhciBLID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0JztcbiAgQVtTXSA9IDc7XG4gIEsuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGspIHsgQltrXSA9IGs7IH0pO1xuICByZXR1cm4gJGFzc2lnbih7fSwgQSlbU10gIT0gNyB8fCBPYmplY3Qua2V5cygkYXNzaWduKHt9LCBCKSkuam9pbignJykgIT0gSztcbn0pID8gZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgdmFyIFQgPSB0b09iamVjdCh0YXJnZXQpO1xuICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IDE7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICB2YXIgaXNFbnVtID0gcElFLmY7XG4gIHdoaWxlIChhTGVuID4gaW5kZXgpIHtcbiAgICB2YXIgUyA9IElPYmplY3QoYXJndW1lbnRzW2luZGV4KytdKTtcbiAgICB2YXIga2V5cyA9IGdldFN5bWJvbHMgPyBnZXRLZXlzKFMpLmNvbmNhdChnZXRTeW1ib2xzKFMpKSA6IGdldEtleXMoUyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBqID0gMDtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChsZW5ndGggPiBqKSBpZiAoaXNFbnVtLmNhbGwoUywga2V5ID0ga2V5c1tqKytdKSkgVFtrZXldID0gU1trZXldO1xuICB9IHJldHVybiBUO1xufSA6ICRhc3NpZ247XG4iLCIvLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxudmFyIHdpbmRvd05hbWVzID0gdHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNcbiAgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpIDogW107XG5cbnZhciBnZXRXaW5kb3dOYW1lcyA9IGZ1bmN0aW9uIChpdCkge1xuICB0cnkge1xuICAgIHJldHVybiBnT1BOKGl0KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB3aW5kb3dOYW1lcy5zbGljZSgpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICByZXR1cm4gd2luZG93TmFtZXMgJiYgdG9TdHJpbmcuY2FsbChpdCkgPT0gJ1tvYmplY3QgV2luZG93XScgPyBnZXRXaW5kb3dOYW1lcyhpdCkgOiBnT1BOKHRvSU9iamVjdChpdCkpO1xufTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5cyA9IGdldEtleXMoUHJvcGVydGllcyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgUDtcbiAgd2hpbGUgKGxlbmd0aCA+IGkpIGRQLmYoTywgUCA9IGtleXNbaSsrXSwgUHJvcGVydGllc1tQXSk7XG4gIHJldHVybiBPO1xufTtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgYXJyYXlJbmRleE9mID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKShmYWxzZSk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZXMpIHtcbiAgdmFyIE8gPSB0b0lPYmplY3Qob2JqZWN0KTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIE8pIGlmIChrZXkgIT0gSUVfUFJPVE8pIGhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIGlmIChoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpIHtcbiAgICB+YXJyYXlJbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fd2tzJyk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2RpdicpLCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW1wdHlPYmplY3QgPSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgT2JqZWN0LmZyZWV6ZShlbXB0eU9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZW1wdHlPYmplY3Q7IiwiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTUsIFlhaG9vISBJbmMuXG4gKiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuIFNlZSB0aGUgYWNjb21wYW55aW5nIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMuXG4gKi9cbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuICAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShmYWN0b3J5KSA6XG4gICAgKGdsb2JhbC5ob2lzdE5vblJlYWN0U3RhdGljcyA9IGZhY3RvcnkoKSk7XG59KHRoaXMsIChmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIFxuICAgIHZhciBSRUFDVF9TVEFUSUNTID0ge1xuICAgICAgICBjaGlsZENvbnRleHRUeXBlczogdHJ1ZSxcbiAgICAgICAgY29udGV4dFR5cGVzOiB0cnVlLFxuICAgICAgICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgICAgIGRpc3BsYXlOYW1lOiB0cnVlLFxuICAgICAgICBnZXREZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgICAgIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczogdHJ1ZSxcbiAgICAgICAgbWl4aW5zOiB0cnVlLFxuICAgICAgICBwcm9wVHlwZXM6IHRydWUsXG4gICAgICAgIHR5cGU6IHRydWVcbiAgICB9O1xuICAgIFxuICAgIHZhciBLTk9XTl9TVEFUSUNTID0ge1xuICAgICAgICBuYW1lOiB0cnVlLFxuICAgICAgICBsZW5ndGg6IHRydWUsXG4gICAgICAgIHByb3RvdHlwZTogdHJ1ZSxcbiAgICAgICAgY2FsbGVyOiB0cnVlLFxuICAgICAgICBjYWxsZWU6IHRydWUsXG4gICAgICAgIGFyZ3VtZW50czogdHJ1ZSxcbiAgICAgICAgYXJpdHk6IHRydWVcbiAgICB9O1xuICAgIFxuICAgIHZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbiAgICB2YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xuICAgIHZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuICAgIHZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICAgIHZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgICB2YXIgb2JqZWN0UHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YgJiYgZ2V0UHJvdG90eXBlT2YoT2JqZWN0KTtcbiAgICBcbiAgICByZXR1cm4gZnVuY3Rpb24gaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQsIGJsYWNrbGlzdCkge1xuICAgICAgICBpZiAodHlwZW9mIHNvdXJjZUNvbXBvbmVudCAhPT0gJ3N0cmluZycpIHsgLy8gZG9uJ3QgaG9pc3Qgb3ZlciBzdHJpbmcgKGh0bWwpIGNvbXBvbmVudHNcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICAgICAgICAgIHZhciBpbmhlcml0ZWRDb21wb25lbnQgPSBnZXRQcm90b3R5cGVPZihzb3VyY2VDb21wb25lbnQpO1xuICAgICAgICAgICAgICAgIGlmIChpbmhlcml0ZWRDb21wb25lbnQgJiYgaW5oZXJpdGVkQ29tcG9uZW50ICE9PSBvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBpbmhlcml0ZWRDb21wb25lbnQsIGJsYWNrbGlzdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoc291cmNlQ29tcG9uZW50KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAgICAgICAgICAgIGtleXMgPSBrZXlzLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlQ29tcG9uZW50KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgICAgICAgIGlmICghUkVBQ1RfU1RBVElDU1trZXldICYmICFLTk9XTl9TVEFUSUNTW2tleV0gJiYgKCFibGFja2xpc3QgfHwgIWJsYWNrbGlzdFtrZXldKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2VDb21wb25lbnQsIGtleSk7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7IC8vIEF2b2lkIGZhaWx1cmVzIGZyb20gcmVhZC1vbmx5IHByb3BlcnRpZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldENvbXBvbmVudCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG4gICAgfTtcbn0pKSk7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwocm9vdCkge1xuXHR2YXIgcmVzdWx0O1xuXHR2YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cblx0aWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicpIHtcblx0XHRpZiAoU3ltYm9sLm9ic2VydmFibGUpIHtcblx0XHRcdHJlc3VsdCA9IFN5bWJvbC5vYnNlcnZhYmxlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXN1bHQgPSBTeW1ib2woJ29ic2VydmFibGUnKTtcblx0XHRcdFN5bWJvbC5vYnNlcnZhYmxlID0gcmVzdWx0O1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRyZXN1bHQgPSAnQEBvYnNlcnZhYmxlJztcblx0fVxuXG5cdHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5mdW5jdGlvbiBfZGVmaW5lRW51bWVyYWJsZVByb3BlcnRpZXMob2JqLCBkZXNjcykgeyBmb3IgKHZhciBrZXkgaW4gZGVzY3MpIHsgdmFyIGRlc2MgPSBkZXNjc1trZXldOyBkZXNjLmNvbmZpZ3VyYWJsZSA9IGRlc2MuZW51bWVyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzYykgZGVzYy53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgZGVzYyk7IH0gcmV0dXJuIG9iajsgfVxuXG5pbXBvcnQgeyBub29wLCBrVHJ1ZSwgaXMsIGxvZyBhcyBfbG9nLCBjaGVjaywgZGVmZXJyZWQsIHVpZCBhcyBuZXh0RWZmZWN0SWQsIGFycmF5LCByZW1vdmUsIG9iamVjdCwgVEFTSywgQ0FOQ0VMLCBTRUxGX0NBTkNFTExBVElPTiwgbWFrZUl0ZXJhdG9yLCBjcmVhdGVTZXRDb250ZXh0V2FybmluZywgZGVwcmVjYXRlLCB1cGRhdGVJbmNlbnRpdmUgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IGFzYXAsIHN1c3BlbmQsIGZsdXNoIH0gZnJvbSAnLi9zY2hlZHVsZXInO1xuaW1wb3J0IHsgYXNFZmZlY3QgfSBmcm9tICcuL2lvJztcbmltcG9ydCB7IHN0ZENoYW5uZWwgYXMgX3N0ZENoYW5uZWwsIGV2ZW50Q2hhbm5lbCwgaXNFbmQgfSBmcm9tICcuL2NoYW5uZWwnO1xuaW1wb3J0IHsgYnVmZmVycyB9IGZyb20gJy4vYnVmZmVycyc7XG5cbmV4cG9ydCB2YXIgTk9UX0lURVJBVE9SX0VSUk9SID0gJ3Byb2MgZmlyc3QgYXJndW1lbnQgKFNhZ2EgZnVuY3Rpb24gcmVzdWx0KSBtdXN0IGJlIGFuIGl0ZXJhdG9yJztcblxuZXhwb3J0IHZhciBDSEFOTkVMX0VORCA9IHtcbiAgdG9TdHJpbmc6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiAnQEByZWR1eC1zYWdhL0NIQU5ORUxfRU5EJztcbiAgfVxufTtcbmV4cG9ydCB2YXIgVEFTS19DQU5DRUwgPSB7XG4gIHRvU3RyaW5nOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gJ0BAcmVkdXgtc2FnYS9UQVNLX0NBTkNFTCc7XG4gIH1cbn07XG5cbnZhciBtYXRjaGVycyA9IHtcbiAgd2lsZGNhcmQ6IGZ1bmN0aW9uIHdpbGRjYXJkKCkge1xuICAgIHJldHVybiBrVHJ1ZTtcbiAgfSxcbiAgZGVmYXVsdDogZnVuY3Rpb24gX2RlZmF1bHQocGF0dGVybikge1xuICAgIHJldHVybiAodHlwZW9mIHBhdHRlcm4gPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHBhdHRlcm4pKSA9PT0gJ3N5bWJvbCcgPyBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgIHJldHVybiBpbnB1dC50eXBlID09PSBwYXR0ZXJuO1xuICAgIH0gOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgIHJldHVybiBpbnB1dC50eXBlID09PSBTdHJpbmcocGF0dGVybik7XG4gICAgfTtcbiAgfSxcbiAgYXJyYXk6IGZ1bmN0aW9uIGFycmF5KHBhdHRlcm5zKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgcmV0dXJuIHBhdHRlcm5zLnNvbWUoZnVuY3Rpb24gKHApIHtcbiAgICAgICAgcmV0dXJuIG1hdGNoZXIocCkoaW5wdXQpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfSxcbiAgcHJlZGljYXRlOiBmdW5jdGlvbiBwcmVkaWNhdGUoX3ByZWRpY2F0ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgIHJldHVybiBfcHJlZGljYXRlKGlucHV0KTtcbiAgICB9O1xuICB9XG59O1xuXG5mdW5jdGlvbiBtYXRjaGVyKHBhdHRlcm4pIHtcbiAgLy8gcHJldHRpZXItaWdub3JlXG4gIHJldHVybiAocGF0dGVybiA9PT0gJyonID8gbWF0Y2hlcnMud2lsZGNhcmQgOiBpcy5hcnJheShwYXR0ZXJuKSA/IG1hdGNoZXJzLmFycmF5IDogaXMuc3RyaW5nYWJsZUZ1bmMocGF0dGVybikgPyBtYXRjaGVycy5kZWZhdWx0IDogaXMuZnVuYyhwYXR0ZXJuKSA/IG1hdGNoZXJzLnByZWRpY2F0ZSA6IG1hdGNoZXJzLmRlZmF1bHQpKHBhdHRlcm4pO1xufVxuXG4vKipcbiAgVXNlZCB0byB0cmFjayBhIHBhcmVudCB0YXNrIGFuZCBpdHMgZm9ya3NcbiAgSW4gdGhlIG5ldyBmb3JrIG1vZGVsLCBmb3JrZWQgdGFza3MgYXJlIGF0dGFjaGVkIGJ5IGRlZmF1bHQgdG8gdGhlaXIgcGFyZW50XG4gIFdlIG1vZGVsIHRoaXMgdXNpbmcgdGhlIGNvbmNlcHQgb2YgUGFyZW50IHRhc2sgJiYgbWFpbiBUYXNrXG4gIG1haW4gdGFzayBpcyB0aGUgbWFpbiBmbG93IG9mIHRoZSBjdXJyZW50IEdlbmVyYXRvciwgdGhlIHBhcmVudCB0YXNrcyBpcyB0aGVcbiAgYWdncmVnYXRpb24gb2YgdGhlIG1haW4gdGFza3MgKyBhbGwgaXRzIGZvcmtlZCB0YXNrcy5cbiAgVGh1cyB0aGUgd2hvbGUgbW9kZWwgcmVwcmVzZW50cyBhbiBleGVjdXRpb24gdHJlZSB3aXRoIG11bHRpcGxlIGJyYW5jaGVzICh2cyB0aGVcbiAgbGluZWFyIGV4ZWN1dGlvbiB0cmVlIGluIHNlcXVlbnRpYWwgKG5vbiBwYXJhbGxlbCkgcHJvZ3JhbW1pbmcpXG5cbiAgQSBwYXJlbnQgdGFza3MgaGFzIHRoZSBmb2xsb3dpbmcgc2VtYW50aWNzXG4gIC0gSXQgY29tcGxldGVzIGlmIGFsbCBpdHMgZm9ya3MgZWl0aGVyIGNvbXBsZXRlIG9yIGFsbCBjYW5jZWxsZWRcbiAgLSBJZiBpdCdzIGNhbmNlbGxlZCwgYWxsIGZvcmtzIGFyZSBjYW5jZWxsZWQgYXMgd2VsbFxuICAtIEl0IGFib3J0cyBpZiBhbnkgdW5jYXVnaHQgZXJyb3IgYnViYmxlcyB1cCBmcm9tIGZvcmtzXG4gIC0gSWYgaXQgY29tcGxldGVzLCB0aGUgcmV0dXJuIHZhbHVlIGlzIHRoZSBvbmUgcmV0dXJuZWQgYnkgdGhlIG1haW4gdGFza1xuKiovXG5mdW5jdGlvbiBmb3JrUXVldWUobmFtZSwgbWFpblRhc2ssIGNiKSB7XG4gIHZhciB0YXNrcyA9IFtdLFxuICAgICAgcmVzdWx0ID0gdm9pZCAwLFxuICAgICAgY29tcGxldGVkID0gZmFsc2U7XG4gIGFkZFRhc2sobWFpblRhc2spO1xuXG4gIGZ1bmN0aW9uIGFib3J0KGVycikge1xuICAgIGNhbmNlbEFsbCgpO1xuICAgIGNiKGVyciwgdHJ1ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBhZGRUYXNrKHRhc2spIHtcbiAgICB0YXNrcy5wdXNoKHRhc2spO1xuICAgIHRhc2suY29udCA9IGZ1bmN0aW9uIChyZXMsIGlzRXJyKSB7XG4gICAgICBpZiAoY29tcGxldGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmVtb3ZlKHRhc2tzLCB0YXNrKTtcbiAgICAgIHRhc2suY29udCA9IG5vb3A7XG4gICAgICBpZiAoaXNFcnIpIHtcbiAgICAgICAgYWJvcnQocmVzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0YXNrID09PSBtYWluVGFzaykge1xuICAgICAgICAgIHJlc3VsdCA9IHJlcztcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRhc2tzLmxlbmd0aCkge1xuICAgICAgICAgIGNvbXBsZXRlZCA9IHRydWU7XG4gICAgICAgICAgY2IocmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgLy8gdGFzay5jb250LmNhbmNlbCA9IHRhc2suY2FuY2VsXG4gIH1cblxuICBmdW5jdGlvbiBjYW5jZWxBbGwoKSB7XG4gICAgaWYgKGNvbXBsZXRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb21wbGV0ZWQgPSB0cnVlO1xuICAgIHRhc2tzLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICAgIHQuY29udCA9IG5vb3A7XG4gICAgICB0LmNhbmNlbCgpO1xuICAgIH0pO1xuICAgIHRhc2tzID0gW107XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGFkZFRhc2s6IGFkZFRhc2ssXG4gICAgY2FuY2VsQWxsOiBjYW5jZWxBbGwsXG4gICAgYWJvcnQ6IGFib3J0LFxuICAgIGdldFRhc2tzOiBmdW5jdGlvbiBnZXRUYXNrcygpIHtcbiAgICAgIHJldHVybiB0YXNrcztcbiAgICB9LFxuICAgIHRhc2tOYW1lczogZnVuY3Rpb24gdGFza05hbWVzKCkge1xuICAgICAgcmV0dXJuIHRhc2tzLm1hcChmdW5jdGlvbiAodCkge1xuICAgICAgICByZXR1cm4gdC5uYW1lO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUYXNrSXRlcmF0b3IoX3JlZikge1xuICB2YXIgY29udGV4dCA9IF9yZWYuY29udGV4dCxcbiAgICAgIGZuID0gX3JlZi5mbixcbiAgICAgIGFyZ3MgPSBfcmVmLmFyZ3M7XG5cbiAgaWYgKGlzLml0ZXJhdG9yKGZuKSkge1xuICAgIHJldHVybiBmbjtcbiAgfVxuXG4gIC8vIGNhdGNoIHN5bmNocm9ub3VzIGZhaWx1cmVzOyBzZWUgIzE1MiBhbmQgIzQ0MVxuICB2YXIgcmVzdWx0ID0gdm9pZCAwLFxuICAgICAgZXJyb3IgPSB2b2lkIDA7XG4gIHRyeSB7XG4gICAgcmVzdWx0ID0gZm4uYXBwbHkoY29udGV4dCwgYXJncyk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGVycm9yID0gZXJyO1xuICB9XG5cbiAgLy8gaS5lLiBhIGdlbmVyYXRvciBmdW5jdGlvbiByZXR1cm5zIGFuIGl0ZXJhdG9yXG4gIGlmIChpcy5pdGVyYXRvcihyZXN1bHQpKSB7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8vIGRvIG5vdCBidWJibGUgdXAgc3luY2hyb25vdXMgZmFpbHVyZXMgZm9yIGRldGFjaGVkIGZvcmtzXG4gIC8vIGluc3RlYWQgY3JlYXRlIGEgZmFpbGVkIHRhc2suIFNlZSAjMTUyIGFuZCAjNDQxXG4gIHJldHVybiBlcnJvciA/IG1ha2VJdGVyYXRvcihmdW5jdGlvbiAoKSB7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH0pIDogbWFrZUl0ZXJhdG9yKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGMgPSB2b2lkIDA7XG4gICAgdmFyIGVmZiA9IHsgZG9uZTogZmFsc2UsIHZhbHVlOiByZXN1bHQgfTtcbiAgICB2YXIgcmV0ID0gZnVuY3Rpb24gcmV0KHZhbHVlKSB7XG4gICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogdmFsdWUgfTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICBpZiAoIXBjKSB7XG4gICAgICAgIHBjID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGVmZjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiByZXQoYXJnKTtcbiAgICAgIH1cbiAgICB9O1xuICB9KCkpO1xufVxuXG52YXIgd3JhcEhlbHBlciA9IGZ1bmN0aW9uIHdyYXBIZWxwZXIoaGVscGVyKSB7XG4gIHJldHVybiB7IGZuOiBoZWxwZXIgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHByb2MoaXRlcmF0b3IpIHtcbiAgdmFyIHN1YnNjcmliZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBub29wO1xuICB9O1xuICB2YXIgZGlzcGF0Y2ggPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IG5vb3A7XG4gIHZhciBnZXRTdGF0ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogbm9vcDtcbiAgdmFyIHBhcmVudENvbnRleHQgPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IHt9O1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiA1ICYmIGFyZ3VtZW50c1s1XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzVdIDoge307XG4gIHZhciBwYXJlbnRFZmZlY3RJZCA9IGFyZ3VtZW50cy5sZW5ndGggPiA2ICYmIGFyZ3VtZW50c1s2XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzZdIDogMDtcbiAgdmFyIG5hbWUgPSBhcmd1bWVudHMubGVuZ3RoID4gNyAmJiBhcmd1bWVudHNbN10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s3XSA6ICdhbm9ueW1vdXMnO1xuICB2YXIgY29udCA9IGFyZ3VtZW50c1s4XTtcblxuICBjaGVjayhpdGVyYXRvciwgaXMuaXRlcmF0b3IsIE5PVF9JVEVSQVRPUl9FUlJPUik7XG5cbiAgdmFyIGVmZmVjdHNTdHJpbmcgPSAnWy4uLmVmZmVjdHNdJztcbiAgdmFyIHJ1blBhcmFsbGVsRWZmZWN0ID0gZGVwcmVjYXRlKHJ1bkFsbEVmZmVjdCwgdXBkYXRlSW5jZW50aXZlKGVmZmVjdHNTdHJpbmcsICdhbGwoJyArIGVmZmVjdHNTdHJpbmcgKyAnKScpKTtcblxuICB2YXIgc2FnYU1vbml0b3IgPSBvcHRpb25zLnNhZ2FNb25pdG9yLFxuICAgICAgbG9nZ2VyID0gb3B0aW9ucy5sb2dnZXIsXG4gICAgICBvbkVycm9yID0gb3B0aW9ucy5vbkVycm9yO1xuXG4gIHZhciBsb2cgPSBsb2dnZXIgfHwgX2xvZztcbiAgdmFyIGxvZ0Vycm9yID0gZnVuY3Rpb24gbG9nRXJyb3IoZXJyKSB7XG4gICAgdmFyIG1lc3NhZ2UgPSBlcnIuc2FnYVN0YWNrO1xuXG4gICAgaWYgKCFtZXNzYWdlICYmIGVyci5zdGFjaykge1xuICAgICAgbWVzc2FnZSA9IGVyci5zdGFjay5zcGxpdCgnXFxuJylbMF0uaW5kZXhPZihlcnIubWVzc2FnZSkgIT09IC0xID8gZXJyLnN0YWNrIDogJ0Vycm9yOiAnICsgZXJyLm1lc3NhZ2UgKyAnXFxuJyArIGVyci5zdGFjaztcbiAgICB9XG5cbiAgICBsb2coJ2Vycm9yJywgJ3VuY2F1Z2h0IGF0ICcgKyBuYW1lLCBtZXNzYWdlIHx8IGVyci5tZXNzYWdlIHx8IGVycik7XG4gIH07XG4gIHZhciBzdGRDaGFubmVsID0gX3N0ZENoYW5uZWwoc3Vic2NyaWJlKTtcbiAgdmFyIHRhc2tDb250ZXh0ID0gT2JqZWN0LmNyZWF0ZShwYXJlbnRDb250ZXh0KTtcbiAgLyoqXG4gICAgVHJhY2tzIHRoZSBjdXJyZW50IGVmZmVjdCBjYW5jZWxsYXRpb25cbiAgICBFYWNoIHRpbWUgdGhlIGdlbmVyYXRvciBwcm9ncmVzc2VzLiBjYWxsaW5nIHJ1bkVmZmVjdCB3aWxsIHNldCBhIG5ldyB2YWx1ZVxuICAgIG9uIGl0LiBJdCBhbGxvd3MgcHJvcGFnYXRpbmcgY2FuY2VsbGF0aW9uIHRvIGNoaWxkIGVmZmVjdHNcbiAgKiovXG4gIG5leHQuY2FuY2VsID0gbm9vcDtcblxuICAvKipcbiAgICBDcmVhdGVzIGEgbmV3IHRhc2sgZGVzY3JpcHRvciBmb3IgdGhpcyBnZW5lcmF0b3IsIFdlJ2xsIGFsc28gY3JlYXRlIGEgbWFpbiB0YXNrXG4gICAgdG8gdHJhY2sgdGhlIG1haW4gZmxvdyAoYmVzaWRlcyBvdGhlciBmb3JrZWQgdGFza3MpXG4gICoqL1xuICB2YXIgdGFzayA9IG5ld1Rhc2socGFyZW50RWZmZWN0SWQsIG5hbWUsIGl0ZXJhdG9yLCBjb250KTtcbiAgdmFyIG1haW5UYXNrID0geyBuYW1lOiBuYW1lLCBjYW5jZWw6IGNhbmNlbE1haW4sIGlzUnVubmluZzogdHJ1ZSB9O1xuICB2YXIgdGFza1F1ZXVlID0gZm9ya1F1ZXVlKG5hbWUsIG1haW5UYXNrLCBlbmQpO1xuXG4gIC8qKlxuICAgIGNhbmNlbGxhdGlvbiBvZiB0aGUgbWFpbiB0YXNrLiBXZSdsbCBzaW1wbHkgcmVzdW1lIHRoZSBHZW5lcmF0b3Igd2l0aCBhIENhbmNlbFxuICAqKi9cbiAgZnVuY3Rpb24gY2FuY2VsTWFpbigpIHtcbiAgICBpZiAobWFpblRhc2suaXNSdW5uaW5nICYmICFtYWluVGFzay5pc0NhbmNlbGxlZCkge1xuICAgICAgbWFpblRhc2suaXNDYW5jZWxsZWQgPSB0cnVlO1xuICAgICAgbmV4dChUQVNLX0NBTkNFTCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAgVGhpcyBtYXkgYmUgY2FsbGVkIGJ5IGEgcGFyZW50IGdlbmVyYXRvciB0byB0cmlnZ2VyL3Byb3BhZ2F0ZSBjYW5jZWxsYXRpb25cbiAgICBjYW5jZWwgYWxsIHBlbmRpbmcgdGFza3MgKGluY2x1ZGluZyB0aGUgbWFpbiB0YXNrKSwgdGhlbiBlbmQgdGhlIGN1cnJlbnQgdGFzay5cbiAgICAgQ2FuY2VsbGF0aW9uIHByb3BhZ2F0ZXMgZG93biB0byB0aGUgd2hvbGUgZXhlY3V0aW9uIHRyZWUgaG9sZGVkIGJ5IHRoaXMgUGFyZW50IHRhc2tcbiAgICBJdCdzIGFsc28gcHJvcGFnYXRlZCB0byBhbGwgam9pbmVycyBvZiB0aGlzIHRhc2sgYW5kIHRoZWlyIGV4ZWN1dGlvbiB0cmVlL2pvaW5lcnNcbiAgICAgQ2FuY2VsbGF0aW9uIGlzIG5vb3AgZm9yIHRlcm1pbmF0ZWQvQ2FuY2VsbGVkIHRhc2tzIHRhc2tzXG4gICoqL1xuICBmdW5jdGlvbiBjYW5jZWwoKSB7XG4gICAgLyoqXG4gICAgICBXZSBuZWVkIHRvIGNoZWNrIGJvdGggUnVubmluZyBhbmQgQ2FuY2VsbGVkIHN0YXR1c1xuICAgICAgVGFza3MgY2FuIGJlIENhbmNlbGxlZCBidXQgc3RpbGwgUnVubmluZ1xuICAgICoqL1xuICAgIGlmIChpdGVyYXRvci5faXNSdW5uaW5nICYmICFpdGVyYXRvci5faXNDYW5jZWxsZWQpIHtcbiAgICAgIGl0ZXJhdG9yLl9pc0NhbmNlbGxlZCA9IHRydWU7XG4gICAgICB0YXNrUXVldWUuY2FuY2VsQWxsKCk7XG4gICAgICAvKipcbiAgICAgICAgRW5kaW5nIHdpdGggYSBOZXZlciByZXN1bHQgd2lsbCBwcm9wYWdhdGUgdGhlIENhbmNlbGxhdGlvbiB0byBhbGwgam9pbmVyc1xuICAgICAgKiovXG4gICAgICBlbmQoVEFTS19DQU5DRUwpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICBhdHRhY2hlcyBjYW5jZWxsYXRpb24gbG9naWMgdG8gdGhpcyB0YXNrJ3MgY29udGludWF0aW9uXG4gICAgdGhpcyB3aWxsIHBlcm1pdCBjYW5jZWxsYXRpb24gdG8gcHJvcGFnYXRlIGRvd24gdGhlIGNhbGwgY2hhaW5cbiAgKiovXG4gIGNvbnQgJiYgKGNvbnQuY2FuY2VsID0gY2FuY2VsKTtcblxuICAvLyB0cmFja3MgdGhlIHJ1bm5pbmcgc3RhdHVzXG4gIGl0ZXJhdG9yLl9pc1J1bm5pbmcgPSB0cnVlO1xuXG4gIC8vIGtpY2tzIHVwIHRoZSBnZW5lcmF0b3JcbiAgbmV4dCgpO1xuXG4gIC8vIHRoZW4gcmV0dXJuIHRoZSB0YXNrIGRlc2NyaXB0b3IgdG8gdGhlIGNhbGxlclxuICByZXR1cm4gdGFzaztcblxuICAvKipcbiAgICBUaGlzIGlzIHRoZSBnZW5lcmF0b3IgZHJpdmVyXG4gICAgSXQncyBhIHJlY3Vyc2l2ZSBhc3luYy9jb250aW51YXRpb24gZnVuY3Rpb24gd2hpY2ggY2FsbHMgaXRzZWxmXG4gICAgdW50aWwgdGhlIGdlbmVyYXRvciB0ZXJtaW5hdGVzIG9yIHRocm93c1xuICAqKi9cbiAgZnVuY3Rpb24gbmV4dChhcmcsIGlzRXJyKSB7XG4gICAgLy8gUHJldmVudGl2ZSBtZWFzdXJlLiBJZiB3ZSBlbmQgdXAgaGVyZSwgdGhlbiB0aGVyZSBpcyByZWFsbHkgc29tZXRoaW5nIHdyb25nXG4gICAgaWYgKCFtYWluVGFzay5pc1J1bm5pbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVHJ5aW5nIHRvIHJlc3VtZSBhbiBhbHJlYWR5IGZpbmlzaGVkIGdlbmVyYXRvcicpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdm9pZCAwO1xuICAgICAgaWYgKGlzRXJyKSB7XG4gICAgICAgIHJlc3VsdCA9IGl0ZXJhdG9yLnRocm93KGFyZyk7XG4gICAgICB9IGVsc2UgaWYgKGFyZyA9PT0gVEFTS19DQU5DRUwpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAgZ2V0dGluZyBUQVNLX0NBTkNFTCBhdXRvbWF0aWNhbGx5IGNhbmNlbHMgdGhlIG1haW4gdGFza1xuICAgICAgICAgIFdlIGNhbiBnZXQgdGhpcyB2YWx1ZSBoZXJlXG4gICAgICAgICAgIC0gQnkgY2FuY2VsbGluZyB0aGUgcGFyZW50IHRhc2sgbWFudWFsbHlcbiAgICAgICAgICAtIEJ5IGpvaW5pbmcgYSBDYW5jZWxsZWQgdGFza1xuICAgICAgICAqKi9cbiAgICAgICAgbWFpblRhc2suaXNDYW5jZWxsZWQgPSB0cnVlO1xuICAgICAgICAvKipcbiAgICAgICAgICBDYW5jZWxzIHRoZSBjdXJyZW50IGVmZmVjdDsgdGhpcyB3aWxsIHByb3BhZ2F0ZSB0aGUgY2FuY2VsbGF0aW9uIGRvd24gdG8gYW55IGNhbGxlZCB0YXNrc1xuICAgICAgICAqKi9cbiAgICAgICAgbmV4dC5jYW5jZWwoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAgSWYgdGhpcyBHZW5lcmF0b3IgaGFzIGEgYHJldHVybmAgbWV0aG9kIHRoZW4gaW52b2tlcyBpdFxuICAgICAgICAgIFRoaXMgd2lsbCBqdW1wIHRvIHRoZSBmaW5hbGx5IGJsb2NrXG4gICAgICAgICoqL1xuICAgICAgICByZXN1bHQgPSBpcy5mdW5jKGl0ZXJhdG9yLnJldHVybikgPyBpdGVyYXRvci5yZXR1cm4oVEFTS19DQU5DRUwpIDogeyBkb25lOiB0cnVlLCB2YWx1ZTogVEFTS19DQU5DRUwgfTtcbiAgICAgIH0gZWxzZSBpZiAoYXJnID09PSBDSEFOTkVMX0VORCkge1xuICAgICAgICAvLyBXZSBnZXQgQ0hBTk5FTF9FTkQgYnkgdGFraW5nIGZyb20gYSBjaGFubmVsIHRoYXQgZW5kZWQgdXNpbmcgYHRha2VgIChhbmQgbm90IGB0YWtlbWAgdXNlZCB0byB0cmFwIEVuZCBvZiBjaGFubmVscylcbiAgICAgICAgcmVzdWx0ID0gaXMuZnVuYyhpdGVyYXRvci5yZXR1cm4pID8gaXRlcmF0b3IucmV0dXJuKCkgOiB7IGRvbmU6IHRydWUgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoYXJnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFyZXN1bHQuZG9uZSkge1xuICAgICAgICBydW5FZmZlY3QocmVzdWx0LnZhbHVlLCBwYXJlbnRFZmZlY3RJZCwgJycsIG5leHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAgVGhpcyBHZW5lcmF0b3IgaGFzIGVuZGVkLCB0ZXJtaW5hdGUgdGhlIG1haW4gdGFzayBhbmQgbm90aWZ5IHRoZSBmb3JrIHF1ZXVlXG4gICAgICAgICoqL1xuICAgICAgICBtYWluVGFzay5pc01haW5SdW5uaW5nID0gZmFsc2U7XG4gICAgICAgIG1haW5UYXNrLmNvbnQgJiYgbWFpblRhc2suY29udChyZXN1bHQudmFsdWUpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBpZiAobWFpblRhc2suaXNDYW5jZWxsZWQpIHtcbiAgICAgICAgbG9nRXJyb3IoZXJyb3IpO1xuICAgICAgfVxuICAgICAgbWFpblRhc2suaXNNYWluUnVubmluZyA9IGZhbHNlO1xuICAgICAgbWFpblRhc2suY29udChlcnJvciwgdHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZW5kKHJlc3VsdCwgaXNFcnIpIHtcbiAgICBpdGVyYXRvci5faXNSdW5uaW5nID0gZmFsc2U7XG4gICAgc3RkQ2hhbm5lbC5jbG9zZSgpO1xuICAgIGlmICghaXNFcnIpIHtcbiAgICAgIGl0ZXJhdG9yLl9yZXN1bHQgPSByZXN1bHQ7XG4gICAgICBpdGVyYXRvci5fZGVmZXJyZWRFbmQgJiYgaXRlcmF0b3IuX2RlZmVycmVkRW5kLnJlc29sdmUocmVzdWx0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXN1bHQsICdzYWdhU3RhY2snLCB7XG4gICAgICAgICAgdmFsdWU6ICdhdCAnICsgbmFtZSArICcgXFxuICcgKyAocmVzdWx0LnNhZ2FTdGFjayB8fCByZXN1bHQuc3RhY2spLFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmICghdGFzay5jb250KSB7XG4gICAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBFcnJvciAmJiBvbkVycm9yKSB7XG4gICAgICAgICAgb25FcnJvcihyZXN1bHQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxvZ0Vycm9yKHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGl0ZXJhdG9yLl9lcnJvciA9IHJlc3VsdDtcbiAgICAgIGl0ZXJhdG9yLl9pc0Fib3J0ZWQgPSB0cnVlO1xuICAgICAgaXRlcmF0b3IuX2RlZmVycmVkRW5kICYmIGl0ZXJhdG9yLl9kZWZlcnJlZEVuZC5yZWplY3QocmVzdWx0KTtcbiAgICB9XG4gICAgdGFzay5jb250ICYmIHRhc2suY29udChyZXN1bHQsIGlzRXJyKTtcbiAgICB0YXNrLmpvaW5lcnMuZm9yRWFjaChmdW5jdGlvbiAoaikge1xuICAgICAgcmV0dXJuIGouY2IocmVzdWx0LCBpc0Vycik7XG4gICAgfSk7XG4gICAgdGFzay5qb2luZXJzID0gbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJ1bkVmZmVjdChlZmZlY3QsIHBhcmVudEVmZmVjdElkKSB7XG4gICAgdmFyIGxhYmVsID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAnJztcbiAgICB2YXIgY2IgPSBhcmd1bWVudHNbM107XG5cbiAgICB2YXIgZWZmZWN0SWQgPSBuZXh0RWZmZWN0SWQoKTtcbiAgICBzYWdhTW9uaXRvciAmJiBzYWdhTW9uaXRvci5lZmZlY3RUcmlnZ2VyZWQoeyBlZmZlY3RJZDogZWZmZWN0SWQsIHBhcmVudEVmZmVjdElkOiBwYXJlbnRFZmZlY3RJZCwgbGFiZWw6IGxhYmVsLCBlZmZlY3Q6IGVmZmVjdCB9KTtcblxuICAgIC8qKlxuICAgICAgY29tcGxldGlvbiBjYWxsYmFjayBhbmQgY2FuY2VsIGNhbGxiYWNrIGFyZSBtdXR1YWxseSBleGNsdXNpdmVcbiAgICAgIFdlIGNhbid0IGNhbmNlbCBhbiBhbHJlYWR5IGNvbXBsZXRlZCBlZmZlY3RcbiAgICAgIEFuZCBXZSBjYW4ndCBjb21wbGV0ZSBhbiBhbHJlYWR5IGNhbmNlbGxlZCBlZmZlY3RJZFxuICAgICoqL1xuICAgIHZhciBlZmZlY3RTZXR0bGVkID0gdm9pZCAwO1xuXG4gICAgLy8gQ29tcGxldGlvbiBjYWxsYmFjayBwYXNzZWQgdG8gdGhlIGFwcHJvcHJpYXRlIGVmZmVjdCBydW5uZXJcbiAgICBmdW5jdGlvbiBjdXJyQ2IocmVzLCBpc0Vycikge1xuICAgICAgaWYgKGVmZmVjdFNldHRsZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBlZmZlY3RTZXR0bGVkID0gdHJ1ZTtcbiAgICAgIGNiLmNhbmNlbCA9IG5vb3A7IC8vIGRlZmVuc2l2ZSBtZWFzdXJlXG4gICAgICBpZiAoc2FnYU1vbml0b3IpIHtcbiAgICAgICAgaXNFcnIgPyBzYWdhTW9uaXRvci5lZmZlY3RSZWplY3RlZChlZmZlY3RJZCwgcmVzKSA6IHNhZ2FNb25pdG9yLmVmZmVjdFJlc29sdmVkKGVmZmVjdElkLCByZXMpO1xuICAgICAgfVxuICAgICAgY2IocmVzLCBpc0Vycik7XG4gICAgfVxuICAgIC8vIHRyYWNrcyBkb3duIHRoZSBjdXJyZW50IGNhbmNlbFxuICAgIGN1cnJDYi5jYW5jZWwgPSBub29wO1xuXG4gICAgLy8gc2V0dXAgY2FuY2VsbGF0aW9uIGxvZ2ljIG9uIHRoZSBwYXJlbnQgY2JcbiAgICBjYi5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBwcmV2ZW50cyBjYW5jZWxsaW5nIGFuIGFscmVhZHkgY29tcGxldGVkIGVmZmVjdFxuICAgICAgaWYgKGVmZmVjdFNldHRsZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBlZmZlY3RTZXR0bGVkID0gdHJ1ZTtcbiAgICAgIC8qKlxuICAgICAgICBwcm9wYWdhdGVzIGNhbmNlbCBkb3dud2FyZFxuICAgICAgICBjYXRjaCB1bmNhdWdodCBjYW5jZWxsYXRpb25zIGVycm9yczsgc2luY2Ugd2UgY2FuIG5vIGxvbmdlciBjYWxsIHRoZSBjb21wbGV0aW9uXG4gICAgICAgIGNhbGxiYWNrLCBsb2cgZXJyb3JzIHJhaXNlZCBkdXJpbmcgY2FuY2VsbGF0aW9ucyBpbnRvIHRoZSBjb25zb2xlXG4gICAgICAqKi9cbiAgICAgIHRyeSB7XG4gICAgICAgIGN1cnJDYi5jYW5jZWwoKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBsb2dFcnJvcihlcnIpO1xuICAgICAgfVxuICAgICAgY3VyckNiLmNhbmNlbCA9IG5vb3A7IC8vIGRlZmVuc2l2ZSBtZWFzdXJlXG5cbiAgICAgIHNhZ2FNb25pdG9yICYmIHNhZ2FNb25pdG9yLmVmZmVjdENhbmNlbGxlZChlZmZlY3RJZCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAgZWFjaCBlZmZlY3QgcnVubmVyIG11c3QgYXR0YWNoIGl0cyBvd24gbG9naWMgb2YgY2FuY2VsbGF0aW9uIHRvIHRoZSBwcm92aWRlZCBjYWxsYmFja1xuICAgICAgaXQgYWxsb3dzIHRoaXMgZ2VuZXJhdG9yIHRvIHByb3BhZ2F0ZSBjYW5jZWxsYXRpb24gZG93bndhcmQuXG4gICAgICAgQVRURU5USU9OISBlZmZlY3QgcnVubmVycyBtdXN0IHNldHVwIHRoZSBjYW5jZWwgbG9naWMgYnkgc2V0dGluZyBjYi5jYW5jZWwgPSBbY2FuY2VsTWV0aG9kXVxuICAgICAgQW5kIHRoZSBzZXR1cCBtdXN0IG9jY3VyIGJlZm9yZSBjYWxsaW5nIHRoZSBjYWxsYmFja1xuICAgICAgIFRoaXMgaXMgYSBzb3J0IG9mIGludmVyc2lvbiBvZiBjb250cm9sOiBjYWxsZWQgYXN5bmMgZnVuY3Rpb25zIGFyZSByZXNwb25zaWJsZVxuICAgICAgZm9yIGNvbXBsZXRpbmcgdGhlIGZsb3cgYnkgY2FsbGluZyB0aGUgcHJvdmlkZWQgY29udGludWF0aW9uOyB3aGlsZSBjYWxsZXIgZnVuY3Rpb25zXG4gICAgICBhcmUgcmVzcG9uc2libGUgZm9yIGFib3J0aW5nIHRoZSBjdXJyZW50IGZsb3cgYnkgY2FsbGluZyB0aGUgYXR0YWNoZWQgY2FuY2VsIGZ1bmN0aW9uXG4gICAgICAgTGlicmFyeSB1c2VycyBjYW4gYXR0YWNoIHRoZWlyIG93biBjYW5jZWxsYXRpb24gbG9naWMgdG8gcHJvbWlzZXMgYnkgZGVmaW5pbmcgYVxuICAgICAgcHJvbWlzZVtDQU5DRUxdIG1ldGhvZCBpbiB0aGVpciByZXR1cm5lZCBwcm9taXNlc1xuICAgICAgQVRURU5USU9OISBjYWxsaW5nIGNhbmNlbCBtdXN0IGhhdmUgbm8gZWZmZWN0IG9uIGFuIGFscmVhZHkgY29tcGxldGVkIG9yIGNhbmNlbGxlZCBlZmZlY3RcbiAgICAqKi9cbiAgICB2YXIgZGF0YSA9IHZvaWQgMDtcbiAgICAvLyBwcmV0dGllci1pZ25vcmVcbiAgICByZXR1cm4gKFxuICAgICAgLy8gTm9uIGRlY2xhcmF0aXZlIGVmZmVjdFxuICAgICAgaXMucHJvbWlzZShlZmZlY3QpID8gcmVzb2x2ZVByb21pc2UoZWZmZWN0LCBjdXJyQ2IpIDogaXMuaGVscGVyKGVmZmVjdCkgPyBydW5Gb3JrRWZmZWN0KHdyYXBIZWxwZXIoZWZmZWN0KSwgZWZmZWN0SWQsIGN1cnJDYikgOiBpcy5pdGVyYXRvcihlZmZlY3QpID8gcmVzb2x2ZUl0ZXJhdG9yKGVmZmVjdCwgZWZmZWN0SWQsIG5hbWUsIGN1cnJDYilcblxuICAgICAgLy8gZGVjbGFyYXRpdmUgZWZmZWN0c1xuICAgICAgOiBpcy5hcnJheShlZmZlY3QpID8gcnVuUGFyYWxsZWxFZmZlY3QoZWZmZWN0LCBlZmZlY3RJZCwgY3VyckNiKSA6IChkYXRhID0gYXNFZmZlY3QudGFrZShlZmZlY3QpKSA/IHJ1blRha2VFZmZlY3QoZGF0YSwgY3VyckNiKSA6IChkYXRhID0gYXNFZmZlY3QucHV0KGVmZmVjdCkpID8gcnVuUHV0RWZmZWN0KGRhdGEsIGN1cnJDYikgOiAoZGF0YSA9IGFzRWZmZWN0LmFsbChlZmZlY3QpKSA/IHJ1bkFsbEVmZmVjdChkYXRhLCBlZmZlY3RJZCwgY3VyckNiKSA6IChkYXRhID0gYXNFZmZlY3QucmFjZShlZmZlY3QpKSA/IHJ1blJhY2VFZmZlY3QoZGF0YSwgZWZmZWN0SWQsIGN1cnJDYikgOiAoZGF0YSA9IGFzRWZmZWN0LmNhbGwoZWZmZWN0KSkgPyBydW5DYWxsRWZmZWN0KGRhdGEsIGVmZmVjdElkLCBjdXJyQ2IpIDogKGRhdGEgPSBhc0VmZmVjdC5jcHMoZWZmZWN0KSkgPyBydW5DUFNFZmZlY3QoZGF0YSwgY3VyckNiKSA6IChkYXRhID0gYXNFZmZlY3QuZm9yayhlZmZlY3QpKSA/IHJ1bkZvcmtFZmZlY3QoZGF0YSwgZWZmZWN0SWQsIGN1cnJDYikgOiAoZGF0YSA9IGFzRWZmZWN0LmpvaW4oZWZmZWN0KSkgPyBydW5Kb2luRWZmZWN0KGRhdGEsIGN1cnJDYikgOiAoZGF0YSA9IGFzRWZmZWN0LmNhbmNlbChlZmZlY3QpKSA/IHJ1bkNhbmNlbEVmZmVjdChkYXRhLCBjdXJyQ2IpIDogKGRhdGEgPSBhc0VmZmVjdC5zZWxlY3QoZWZmZWN0KSkgPyBydW5TZWxlY3RFZmZlY3QoZGF0YSwgY3VyckNiKSA6IChkYXRhID0gYXNFZmZlY3QuYWN0aW9uQ2hhbm5lbChlZmZlY3QpKSA/IHJ1bkNoYW5uZWxFZmZlY3QoZGF0YSwgY3VyckNiKSA6IChkYXRhID0gYXNFZmZlY3QuZmx1c2goZWZmZWN0KSkgPyBydW5GbHVzaEVmZmVjdChkYXRhLCBjdXJyQ2IpIDogKGRhdGEgPSBhc0VmZmVjdC5jYW5jZWxsZWQoZWZmZWN0KSkgPyBydW5DYW5jZWxsZWRFZmZlY3QoZGF0YSwgY3VyckNiKSA6IChkYXRhID0gYXNFZmZlY3QuZ2V0Q29udGV4dChlZmZlY3QpKSA/IHJ1bkdldENvbnRleHRFZmZlY3QoZGF0YSwgY3VyckNiKSA6IChkYXRhID0gYXNFZmZlY3Quc2V0Q29udGV4dChlZmZlY3QpKSA/IHJ1blNldENvbnRleHRFZmZlY3QoZGF0YSwgY3VyckNiKSA6IC8qIGFueXRoaW5nIGVsc2UgcmV0dXJuZWQgYXMgaXMgKi9jdXJyQ2IoZWZmZWN0KVxuICAgICk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNvbHZlUHJvbWlzZShwcm9taXNlLCBjYikge1xuICAgIHZhciBjYW5jZWxQcm9taXNlID0gcHJvbWlzZVtDQU5DRUxdO1xuICAgIGlmIChpcy5mdW5jKGNhbmNlbFByb21pc2UpKSB7XG4gICAgICBjYi5jYW5jZWwgPSBjYW5jZWxQcm9taXNlO1xuICAgIH0gZWxzZSBpZiAoaXMuZnVuYyhwcm9taXNlLmFib3J0KSkge1xuICAgICAgY2IuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gcHJvbWlzZS5hYm9ydCgpO1xuICAgICAgfTtcbiAgICAgIC8vIFRPRE86IGFkZCBzdXBwb3J0IGZvciB0aGUgZmV0Y2ggQVBJLCB3aGVuZXZlciB0aGV5IGdldCBhcm91bmQgdG9cbiAgICAgIC8vIGFkZGluZyBjYW5jZWwgc3VwcG9ydFxuICAgIH1cbiAgICBwcm9taXNlLnRoZW4oY2IsIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgcmV0dXJuIGNiKGVycm9yLCB0cnVlKTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc29sdmVJdGVyYXRvcihpdGVyYXRvciwgZWZmZWN0SWQsIG5hbWUsIGNiKSB7XG4gICAgcHJvYyhpdGVyYXRvciwgc3Vic2NyaWJlLCBkaXNwYXRjaCwgZ2V0U3RhdGUsIHRhc2tDb250ZXh0LCBvcHRpb25zLCBlZmZlY3RJZCwgbmFtZSwgY2IpO1xuICB9XG5cbiAgZnVuY3Rpb24gcnVuVGFrZUVmZmVjdChfcmVmMiwgY2IpIHtcbiAgICB2YXIgY2hhbm5lbCA9IF9yZWYyLmNoYW5uZWwsXG4gICAgICAgIHBhdHRlcm4gPSBfcmVmMi5wYXR0ZXJuLFxuICAgICAgICBtYXliZSA9IF9yZWYyLm1heWJlO1xuXG4gICAgY2hhbm5lbCA9IGNoYW5uZWwgfHwgc3RkQ2hhbm5lbDtcbiAgICB2YXIgdGFrZUNiID0gZnVuY3Rpb24gdGFrZUNiKGlucCkge1xuICAgICAgcmV0dXJuIGlucCBpbnN0YW5jZW9mIEVycm9yID8gY2IoaW5wLCB0cnVlKSA6IGlzRW5kKGlucCkgJiYgIW1heWJlID8gY2IoQ0hBTk5FTF9FTkQpIDogY2IoaW5wKTtcbiAgICB9O1xuICAgIHRyeSB7XG4gICAgICBjaGFubmVsLnRha2UodGFrZUNiLCBtYXRjaGVyKHBhdHRlcm4pKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiBjYihlcnIsIHRydWUpO1xuICAgIH1cbiAgICBjYi5jYW5jZWwgPSB0YWtlQ2IuY2FuY2VsO1xuICB9XG5cbiAgZnVuY3Rpb24gcnVuUHV0RWZmZWN0KF9yZWYzLCBjYikge1xuICAgIHZhciBjaGFubmVsID0gX3JlZjMuY2hhbm5lbCxcbiAgICAgICAgYWN0aW9uID0gX3JlZjMuYWN0aW9uLFxuICAgICAgICByZXNvbHZlID0gX3JlZjMucmVzb2x2ZTtcblxuICAgIC8qKlxuICAgICAgU2NoZWR1bGUgdGhlIHB1dCBpbiBjYXNlIGFub3RoZXIgc2FnYSBpcyBob2xkaW5nIGEgbG9jay5cbiAgICAgIFRoZSBwdXQgd2lsbCBiZSBleGVjdXRlZCBhdG9taWNhbGx5LiBpZSBuZXN0ZWQgcHV0cyB3aWxsIGV4ZWN1dGUgYWZ0ZXJcbiAgICAgIHRoaXMgcHV0IGhhcyB0ZXJtaW5hdGVkLlxuICAgICoqL1xuICAgIGFzYXAoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHJlc3VsdCA9IHZvaWQgMDtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlc3VsdCA9IChjaGFubmVsID8gY2hhbm5lbC5wdXQgOiBkaXNwYXRjaCkoYWN0aW9uKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIC8vIElmIHdlIGhhdmUgYSBjaGFubmVsIG9yIGBwdXQucmVzb2x2ZWAgd2FzIHVzZWQgdGhlbiBidWJibGUgdXAgdGhlIGVycm9yLlxuICAgICAgICBpZiAoY2hhbm5lbCB8fCByZXNvbHZlKSByZXR1cm4gY2IoZXJyb3IsIHRydWUpO1xuICAgICAgICBsb2dFcnJvcihlcnJvcik7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZXNvbHZlICYmIGlzLnByb21pc2UocmVzdWx0KSkge1xuICAgICAgICByZXNvbHZlUHJvbWlzZShyZXN1bHQsIGNiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBjYihyZXN1bHQpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIC8vIFB1dCBlZmZlY3RzIGFyZSBub24gY2FuY2VsbGFibGVzXG4gIH1cblxuICBmdW5jdGlvbiBydW5DYWxsRWZmZWN0KF9yZWY0LCBlZmZlY3RJZCwgY2IpIHtcbiAgICB2YXIgY29udGV4dCA9IF9yZWY0LmNvbnRleHQsXG4gICAgICAgIGZuID0gX3JlZjQuZm4sXG4gICAgICAgIGFyZ3MgPSBfcmVmNC5hcmdzO1xuXG4gICAgdmFyIHJlc3VsdCA9IHZvaWQgMDtcbiAgICAvLyBjYXRjaCBzeW5jaHJvbm91cyBmYWlsdXJlczsgc2VlICMxNTJcbiAgICB0cnkge1xuICAgICAgcmVzdWx0ID0gZm4uYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBjYihlcnJvciwgdHJ1ZSk7XG4gICAgfVxuICAgIHJldHVybiBpcy5wcm9taXNlKHJlc3VsdCkgPyByZXNvbHZlUHJvbWlzZShyZXN1bHQsIGNiKSA6IGlzLml0ZXJhdG9yKHJlc3VsdCkgPyByZXNvbHZlSXRlcmF0b3IocmVzdWx0LCBlZmZlY3RJZCwgZm4ubmFtZSwgY2IpIDogY2IocmVzdWx0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJ1bkNQU0VmZmVjdChfcmVmNSwgY2IpIHtcbiAgICB2YXIgY29udGV4dCA9IF9yZWY1LmNvbnRleHQsXG4gICAgICAgIGZuID0gX3JlZjUuZm4sXG4gICAgICAgIGFyZ3MgPSBfcmVmNS5hcmdzO1xuXG4gICAgLy8gQ1BTIChpZSBub2RlIHN0eWxlIGZ1bmN0aW9ucykgY2FuIGRlZmluZSB0aGVpciBvd24gY2FuY2VsbGF0aW9uIGxvZ2ljXG4gICAgLy8gYnkgc2V0dGluZyBjYW5jZWwgZmllbGQgb24gdGhlIGNiXG5cbiAgICAvLyBjYXRjaCBzeW5jaHJvbm91cyBmYWlsdXJlczsgc2VlICMxNTJcbiAgICB0cnkge1xuICAgICAgdmFyIGNwc0NiID0gZnVuY3Rpb24gY3BzQ2IoZXJyLCByZXMpIHtcbiAgICAgICAgcmV0dXJuIGlzLnVuZGVmKGVycikgPyBjYihyZXMpIDogY2IoZXJyLCB0cnVlKTtcbiAgICAgIH07XG4gICAgICBmbi5hcHBseShjb250ZXh0LCBhcmdzLmNvbmNhdChjcHNDYikpO1xuICAgICAgaWYgKGNwc0NiLmNhbmNlbCkge1xuICAgICAgICBjYi5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIGNwc0NiLmNhbmNlbCgpO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gY2IoZXJyb3IsIHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJ1bkZvcmtFZmZlY3QoX3JlZjYsIGVmZmVjdElkLCBjYikge1xuICAgIHZhciBjb250ZXh0ID0gX3JlZjYuY29udGV4dCxcbiAgICAgICAgZm4gPSBfcmVmNi5mbixcbiAgICAgICAgYXJncyA9IF9yZWY2LmFyZ3MsXG4gICAgICAgIGRldGFjaGVkID0gX3JlZjYuZGV0YWNoZWQ7XG5cbiAgICB2YXIgdGFza0l0ZXJhdG9yID0gY3JlYXRlVGFza0l0ZXJhdG9yKHsgY29udGV4dDogY29udGV4dCwgZm46IGZuLCBhcmdzOiBhcmdzIH0pO1xuXG4gICAgdHJ5IHtcbiAgICAgIHN1c3BlbmQoKTtcbiAgICAgIHZhciBfdGFzayA9IHByb2ModGFza0l0ZXJhdG9yLCBzdWJzY3JpYmUsIGRpc3BhdGNoLCBnZXRTdGF0ZSwgdGFza0NvbnRleHQsIG9wdGlvbnMsIGVmZmVjdElkLCBmbi5uYW1lLCBkZXRhY2hlZCA/IG51bGwgOiBub29wKTtcblxuICAgICAgaWYgKGRldGFjaGVkKSB7XG4gICAgICAgIGNiKF90YXNrKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0YXNrSXRlcmF0b3IuX2lzUnVubmluZykge1xuICAgICAgICAgIHRhc2tRdWV1ZS5hZGRUYXNrKF90YXNrKTtcbiAgICAgICAgICBjYihfdGFzayk7XG4gICAgICAgIH0gZWxzZSBpZiAodGFza0l0ZXJhdG9yLl9lcnJvcikge1xuICAgICAgICAgIHRhc2tRdWV1ZS5hYm9ydCh0YXNrSXRlcmF0b3IuX2Vycm9yKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYihfdGFzayk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgZmx1c2goKTtcbiAgICB9XG4gICAgLy8gRm9yayBlZmZlY3RzIGFyZSBub24gY2FuY2VsbGFibGVzXG4gIH1cblxuICBmdW5jdGlvbiBydW5Kb2luRWZmZWN0KHQsIGNiKSB7XG4gICAgaWYgKHQuaXNSdW5uaW5nKCkpIHtcbiAgICAgIHZhciBqb2luZXIgPSB7IHRhc2s6IHRhc2ssIGNiOiBjYiB9O1xuICAgICAgY2IuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gcmVtb3ZlKHQuam9pbmVycywgam9pbmVyKTtcbiAgICAgIH07XG4gICAgICB0LmpvaW5lcnMucHVzaChqb2luZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0LmlzQWJvcnRlZCgpID8gY2IodC5lcnJvcigpLCB0cnVlKSA6IGNiKHQucmVzdWx0KCkpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJ1bkNhbmNlbEVmZmVjdCh0YXNrVG9DYW5jZWwsIGNiKSB7XG4gICAgaWYgKHRhc2tUb0NhbmNlbCA9PT0gU0VMRl9DQU5DRUxMQVRJT04pIHtcbiAgICAgIHRhc2tUb0NhbmNlbCA9IHRhc2s7XG4gICAgfVxuICAgIGlmICh0YXNrVG9DYW5jZWwuaXNSdW5uaW5nKCkpIHtcbiAgICAgIHRhc2tUb0NhbmNlbC5jYW5jZWwoKTtcbiAgICB9XG4gICAgY2IoKTtcbiAgICAvLyBjYW5jZWwgZWZmZWN0cyBhcmUgbm9uIGNhbmNlbGxhYmxlc1xuICB9XG5cbiAgZnVuY3Rpb24gcnVuQWxsRWZmZWN0KGVmZmVjdHMsIGVmZmVjdElkLCBjYikge1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZWZmZWN0cyk7XG5cbiAgICBpZiAoIWtleXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gY2IoaXMuYXJyYXkoZWZmZWN0cykgPyBbXSA6IHt9KTtcbiAgICB9XG5cbiAgICB2YXIgY29tcGxldGVkQ291bnQgPSAwO1xuICAgIHZhciBjb21wbGV0ZWQgPSB2b2lkIDA7XG4gICAgdmFyIHJlc3VsdHMgPSB7fTtcbiAgICB2YXIgY2hpbGRDYnMgPSB7fTtcblxuICAgIGZ1bmN0aW9uIGNoZWNrRWZmZWN0RW5kKCkge1xuICAgICAgaWYgKGNvbXBsZXRlZENvdW50ID09PSBrZXlzLmxlbmd0aCkge1xuICAgICAgICBjb21wbGV0ZWQgPSB0cnVlO1xuICAgICAgICBjYihpcy5hcnJheShlZmZlY3RzKSA/IGFycmF5LmZyb20oX2V4dGVuZHMoe30sIHJlc3VsdHMsIHsgbGVuZ3RoOiBrZXlzLmxlbmd0aCB9KSkgOiByZXN1bHRzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgdmFyIGNoQ2JBdEtleSA9IGZ1bmN0aW9uIGNoQ2JBdEtleShyZXMsIGlzRXJyKSB7XG4gICAgICAgIGlmIChjb21wbGV0ZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzRXJyIHx8IGlzRW5kKHJlcykgfHwgcmVzID09PSBDSEFOTkVMX0VORCB8fCByZXMgPT09IFRBU0tfQ0FOQ0VMKSB7XG4gICAgICAgICAgY2IuY2FuY2VsKCk7XG4gICAgICAgICAgY2IocmVzLCBpc0Vycik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0c1trZXldID0gcmVzO1xuICAgICAgICAgIGNvbXBsZXRlZENvdW50Kys7XG4gICAgICAgICAgY2hlY2tFZmZlY3RFbmQoKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGNoQ2JBdEtleS5jYW5jZWwgPSBub29wO1xuICAgICAgY2hpbGRDYnNba2V5XSA9IGNoQ2JBdEtleTtcbiAgICB9KTtcblxuICAgIGNiLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghY29tcGxldGVkKSB7XG4gICAgICAgIGNvbXBsZXRlZCA9IHRydWU7XG4gICAgICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgcmV0dXJuIGNoaWxkQ2JzW2tleV0uY2FuY2VsKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgcmV0dXJuIHJ1bkVmZmVjdChlZmZlY3RzW2tleV0sIGVmZmVjdElkLCBrZXksIGNoaWxkQ2JzW2tleV0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcnVuUmFjZUVmZmVjdChlZmZlY3RzLCBlZmZlY3RJZCwgY2IpIHtcbiAgICB2YXIgY29tcGxldGVkID0gdm9pZCAwO1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZWZmZWN0cyk7XG4gICAgdmFyIGNoaWxkQ2JzID0ge307XG5cbiAgICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgdmFyIGNoQ2JBdEtleSA9IGZ1bmN0aW9uIGNoQ2JBdEtleShyZXMsIGlzRXJyKSB7XG4gICAgICAgIGlmIChjb21wbGV0ZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNFcnIpIHtcbiAgICAgICAgICAvLyBSYWNlIEF1dG8gY2FuY2VsbGF0aW9uXG4gICAgICAgICAgY2IuY2FuY2VsKCk7XG4gICAgICAgICAgY2IocmVzLCB0cnVlKTtcbiAgICAgICAgfSBlbHNlIGlmICghaXNFbmQocmVzKSAmJiByZXMgIT09IENIQU5ORUxfRU5EICYmIHJlcyAhPT0gVEFTS19DQU5DRUwpIHtcbiAgICAgICAgICB2YXIgX3Jlc3BvbnNlO1xuXG4gICAgICAgICAgY2IuY2FuY2VsKCk7XG4gICAgICAgICAgY29tcGxldGVkID0gdHJ1ZTtcbiAgICAgICAgICB2YXIgcmVzcG9uc2UgPSAoX3Jlc3BvbnNlID0ge30sIF9yZXNwb25zZVtrZXldID0gcmVzLCBfcmVzcG9uc2UpO1xuICAgICAgICAgIGNiKGlzLmFycmF5KGVmZmVjdHMpID8gW10uc2xpY2UuY2FsbChfZXh0ZW5kcyh7fSwgcmVzcG9uc2UsIHsgbGVuZ3RoOiBrZXlzLmxlbmd0aCB9KSkgOiByZXNwb25zZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBjaENiQXRLZXkuY2FuY2VsID0gbm9vcDtcbiAgICAgIGNoaWxkQ2JzW2tleV0gPSBjaENiQXRLZXk7XG4gICAgfSk7XG5cbiAgICBjYi5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBwcmV2ZW50cyB1bm5lY2Vzc2FyeSBjYW5jZWxsYXRpb25cbiAgICAgIGlmICghY29tcGxldGVkKSB7XG4gICAgICAgIGNvbXBsZXRlZCA9IHRydWU7XG4gICAgICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgcmV0dXJuIGNoaWxkQ2JzW2tleV0uY2FuY2VsKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIGlmIChjb21wbGV0ZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcnVuRWZmZWN0KGVmZmVjdHNba2V5XSwgZWZmZWN0SWQsIGtleSwgY2hpbGRDYnNba2V5XSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBydW5TZWxlY3RFZmZlY3QoX3JlZjcsIGNiKSB7XG4gICAgdmFyIHNlbGVjdG9yID0gX3JlZjcuc2VsZWN0b3IsXG4gICAgICAgIGFyZ3MgPSBfcmVmNy5hcmdzO1xuXG4gICAgdHJ5IHtcbiAgICAgIHZhciBzdGF0ZSA9IHNlbGVjdG9yLmFwcGx5KHVuZGVmaW5lZCwgW2dldFN0YXRlKCldLmNvbmNhdChhcmdzKSk7XG4gICAgICBjYihzdGF0ZSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNiKGVycm9yLCB0cnVlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBydW5DaGFubmVsRWZmZWN0KF9yZWY4LCBjYikge1xuICAgIHZhciBwYXR0ZXJuID0gX3JlZjgucGF0dGVybixcbiAgICAgICAgYnVmZmVyID0gX3JlZjguYnVmZmVyO1xuXG4gICAgdmFyIG1hdGNoID0gbWF0Y2hlcihwYXR0ZXJuKTtcbiAgICBtYXRjaC5wYXR0ZXJuID0gcGF0dGVybjtcbiAgICBjYihldmVudENoYW5uZWwoc3Vic2NyaWJlLCBidWZmZXIgfHwgYnVmZmVycy5maXhlZCgpLCBtYXRjaCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcnVuQ2FuY2VsbGVkRWZmZWN0KGRhdGEsIGNiKSB7XG4gICAgY2IoISFtYWluVGFzay5pc0NhbmNlbGxlZCk7XG4gIH1cblxuICBmdW5jdGlvbiBydW5GbHVzaEVmZmVjdChjaGFubmVsLCBjYikge1xuICAgIGNoYW5uZWwuZmx1c2goY2IpO1xuICB9XG5cbiAgZnVuY3Rpb24gcnVuR2V0Q29udGV4dEVmZmVjdChwcm9wLCBjYikge1xuICAgIGNiKHRhc2tDb250ZXh0W3Byb3BdKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJ1blNldENvbnRleHRFZmZlY3QocHJvcHMsIGNiKSB7XG4gICAgb2JqZWN0LmFzc2lnbih0YXNrQ29udGV4dCwgcHJvcHMpO1xuICAgIGNiKCk7XG4gIH1cblxuICBmdW5jdGlvbiBuZXdUYXNrKGlkLCBuYW1lLCBpdGVyYXRvciwgY29udCkge1xuICAgIHZhciBfZG9uZSwgX3JlZjksIF9tdXRhdG9yTWFwO1xuXG4gICAgaXRlcmF0b3IuX2RlZmVycmVkRW5kID0gbnVsbDtcbiAgICByZXR1cm4gX3JlZjkgPSB7fSwgX3JlZjlbVEFTS10gPSB0cnVlLCBfcmVmOS5pZCA9IGlkLCBfcmVmOS5uYW1lID0gbmFtZSwgX2RvbmUgPSAnZG9uZScsIF9tdXRhdG9yTWFwID0ge30sIF9tdXRhdG9yTWFwW19kb25lXSA9IF9tdXRhdG9yTWFwW19kb25lXSB8fCB7fSwgX211dGF0b3JNYXBbX2RvbmVdLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpdGVyYXRvci5fZGVmZXJyZWRFbmQpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yLl9kZWZlcnJlZEVuZC5wcm9taXNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGRlZiA9IGRlZmVycmVkKCk7XG4gICAgICAgIGl0ZXJhdG9yLl9kZWZlcnJlZEVuZCA9IGRlZjtcbiAgICAgICAgaWYgKCFpdGVyYXRvci5faXNSdW5uaW5nKSB7XG4gICAgICAgICAgaXRlcmF0b3IuX2Vycm9yID8gZGVmLnJlamVjdChpdGVyYXRvci5fZXJyb3IpIDogZGVmLnJlc29sdmUoaXRlcmF0b3IuX3Jlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRlZi5wcm9taXNlO1xuICAgICAgfVxuICAgIH0sIF9yZWY5LmNvbnQgPSBjb250LCBfcmVmOS5qb2luZXJzID0gW10sIF9yZWY5LmNhbmNlbCA9IGNhbmNlbCwgX3JlZjkuaXNSdW5uaW5nID0gZnVuY3Rpb24gaXNSdW5uaW5nKCkge1xuICAgICAgcmV0dXJuIGl0ZXJhdG9yLl9pc1J1bm5pbmc7XG4gICAgfSwgX3JlZjkuaXNDYW5jZWxsZWQgPSBmdW5jdGlvbiBpc0NhbmNlbGxlZCgpIHtcbiAgICAgIHJldHVybiBpdGVyYXRvci5faXNDYW5jZWxsZWQ7XG4gICAgfSwgX3JlZjkuaXNBYm9ydGVkID0gZnVuY3Rpb24gaXNBYm9ydGVkKCkge1xuICAgICAgcmV0dXJuIGl0ZXJhdG9yLl9pc0Fib3J0ZWQ7XG4gICAgfSwgX3JlZjkucmVzdWx0ID0gZnVuY3Rpb24gcmVzdWx0KCkge1xuICAgICAgcmV0dXJuIGl0ZXJhdG9yLl9yZXN1bHQ7XG4gICAgfSwgX3JlZjkuZXJyb3IgPSBmdW5jdGlvbiBlcnJvcigpIHtcbiAgICAgIHJldHVybiBpdGVyYXRvci5fZXJyb3I7XG4gICAgfSwgX3JlZjkuc2V0Q29udGV4dCA9IGZ1bmN0aW9uIHNldENvbnRleHQocHJvcHMpIHtcbiAgICAgIGNoZWNrKHByb3BzLCBpcy5vYmplY3QsIGNyZWF0ZVNldENvbnRleHRXYXJuaW5nKCd0YXNrJywgcHJvcHMpKTtcbiAgICAgIG9iamVjdC5hc3NpZ24odGFza0NvbnRleHQsIHByb3BzKTtcbiAgICB9LCBfZGVmaW5lRW51bWVyYWJsZVByb3BlcnRpZXMoX3JlZjksIF9tdXRhdG9yTWFwKSwgX3JlZjk7XG4gIH1cbn0iLCJpbXBvcnQgeyBpcywgY2hlY2ssIHVpZCBhcyBuZXh0U2FnYUlkLCB3cmFwU2FnYURpc3BhdGNoLCBub29wLCBsb2cgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCBwcm9jIGZyb20gJy4vcHJvYyc7XG5cbnZhciBSVU5fU0FHQV9TSUdOQVRVUkUgPSAncnVuU2FnYShzdG9yZUludGVyZmFjZSwgc2FnYSwgLi4uYXJncyknO1xudmFyIE5PTl9HRU5FUkFUT1JfRVJSID0gUlVOX1NBR0FfU0lHTkFUVVJFICsgJzogc2FnYSBhcmd1bWVudCBtdXN0IGJlIGEgR2VuZXJhdG9yIGZ1bmN0aW9uISc7XG5cbmV4cG9ydCBmdW5jdGlvbiBydW5TYWdhKHN0b3JlSW50ZXJmYWNlLCBzYWdhKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiA+IDIgPyBfbGVuIC0gMiA6IDApLCBfa2V5ID0gMjsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleSAtIDJdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgdmFyIGl0ZXJhdG9yID0gdm9pZCAwO1xuXG4gIGlmIChpcy5pdGVyYXRvcihzdG9yZUludGVyZmFjZSkpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIHtcbiAgICAgIGxvZygnd2FybicsICdydW5TYWdhKGl0ZXJhdG9yLCBzdG9yZUludGVyZmFjZSkgaGFzIGJlZW4gZGVwcmVjYXRlZCBpbiBmYXZvciBvZiAnICsgUlVOX1NBR0FfU0lHTkFUVVJFKTtcbiAgICB9XG4gICAgaXRlcmF0b3IgPSBzdG9yZUludGVyZmFjZTtcbiAgICBzdG9yZUludGVyZmFjZSA9IHNhZ2E7XG4gIH0gZWxzZSB7XG4gICAgY2hlY2soc2FnYSwgaXMuZnVuYywgTk9OX0dFTkVSQVRPUl9FUlIpO1xuICAgIGl0ZXJhdG9yID0gc2FnYS5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgIGNoZWNrKGl0ZXJhdG9yLCBpcy5pdGVyYXRvciwgTk9OX0dFTkVSQVRPUl9FUlIpO1xuICB9XG5cbiAgdmFyIF9zdG9yZUludGVyZmFjZSA9IHN0b3JlSW50ZXJmYWNlLFxuICAgICAgc3Vic2NyaWJlID0gX3N0b3JlSW50ZXJmYWNlLnN1YnNjcmliZSxcbiAgICAgIGRpc3BhdGNoID0gX3N0b3JlSW50ZXJmYWNlLmRpc3BhdGNoLFxuICAgICAgZ2V0U3RhdGUgPSBfc3RvcmVJbnRlcmZhY2UuZ2V0U3RhdGUsXG4gICAgICBjb250ZXh0ID0gX3N0b3JlSW50ZXJmYWNlLmNvbnRleHQsXG4gICAgICBzYWdhTW9uaXRvciA9IF9zdG9yZUludGVyZmFjZS5zYWdhTW9uaXRvcixcbiAgICAgIGxvZ2dlciA9IF9zdG9yZUludGVyZmFjZS5sb2dnZXIsXG4gICAgICBvbkVycm9yID0gX3N0b3JlSW50ZXJmYWNlLm9uRXJyb3I7XG5cblxuICB2YXIgZWZmZWN0SWQgPSBuZXh0U2FnYUlkKCk7XG5cbiAgaWYgKHNhZ2FNb25pdG9yKSB7XG4gICAgLy8gbW9uaXRvcnMgYXJlIGV4cGVjdGVkIHRvIGhhdmUgYSBjZXJ0YWluIGludGVyZmFjZSwgbGV0J3MgZmlsbC1pbiBhbnkgbWlzc2luZyBvbmVzXG4gICAgc2FnYU1vbml0b3IuZWZmZWN0VHJpZ2dlcmVkID0gc2FnYU1vbml0b3IuZWZmZWN0VHJpZ2dlcmVkIHx8IG5vb3A7XG4gICAgc2FnYU1vbml0b3IuZWZmZWN0UmVzb2x2ZWQgPSBzYWdhTW9uaXRvci5lZmZlY3RSZXNvbHZlZCB8fCBub29wO1xuICAgIHNhZ2FNb25pdG9yLmVmZmVjdFJlamVjdGVkID0gc2FnYU1vbml0b3IuZWZmZWN0UmVqZWN0ZWQgfHwgbm9vcDtcbiAgICBzYWdhTW9uaXRvci5lZmZlY3RDYW5jZWxsZWQgPSBzYWdhTW9uaXRvci5lZmZlY3RDYW5jZWxsZWQgfHwgbm9vcDtcbiAgICBzYWdhTW9uaXRvci5hY3Rpb25EaXNwYXRjaGVkID0gc2FnYU1vbml0b3IuYWN0aW9uRGlzcGF0Y2hlZCB8fCBub29wO1xuXG4gICAgc2FnYU1vbml0b3IuZWZmZWN0VHJpZ2dlcmVkKHsgZWZmZWN0SWQ6IGVmZmVjdElkLCByb290OiB0cnVlLCBwYXJlbnRFZmZlY3RJZDogMCwgZWZmZWN0OiB7IHJvb3Q6IHRydWUsIHNhZ2E6IHNhZ2EsIGFyZ3M6IGFyZ3MgfSB9KTtcbiAgfVxuXG4gIHZhciB0YXNrID0gcHJvYyhpdGVyYXRvciwgc3Vic2NyaWJlLCB3cmFwU2FnYURpc3BhdGNoKGRpc3BhdGNoKSwgZ2V0U3RhdGUsIGNvbnRleHQsIHsgc2FnYU1vbml0b3I6IHNhZ2FNb25pdG9yLCBsb2dnZXI6IGxvZ2dlciwgb25FcnJvcjogb25FcnJvciB9LCBlZmZlY3RJZCwgc2FnYS5uYW1lKTtcblxuICBpZiAoc2FnYU1vbml0b3IpIHtcbiAgICBzYWdhTW9uaXRvci5lZmZlY3RSZXNvbHZlZChlZmZlY3RJZCwgdGFzayk7XG4gIH1cblxuICByZXR1cm4gdGFzaztcbn0iLCJpbXBvcnQgbWlkZGxld2FyZSBmcm9tICcuL2ludGVybmFsL21pZGRsZXdhcmUnO1xuZXhwb3J0IGRlZmF1bHQgbWlkZGxld2FyZTtcblxuZXhwb3J0IHsgcnVuU2FnYSB9IGZyb20gJy4vaW50ZXJuYWwvcnVuU2FnYSc7XG5leHBvcnQgeyBFTkQsIGV2ZW50Q2hhbm5lbCwgY2hhbm5lbCB9IGZyb20gJy4vaW50ZXJuYWwvY2hhbm5lbCc7XG5leHBvcnQgeyBidWZmZXJzIH0gZnJvbSAnLi9pbnRlcm5hbC9idWZmZXJzJztcbmV4cG9ydCB7IHRha2VFdmVyeSwgdGFrZUxhdGVzdCwgdGhyb3R0bGUgfSBmcm9tICcuL2ludGVybmFsL3NhZ2FIZWxwZXJzJztcbmV4cG9ydCB7IGRlbGF5LCBDQU5DRUwgfSBmcm9tICcuL2ludGVybmFsL3V0aWxzJztcbmV4cG9ydCB7IGRldGFjaCB9IGZyb20gJy4vaW50ZXJuYWwvaW8nO1xuXG5pbXBvcnQgKiBhcyBlZmZlY3RzIGZyb20gJy4vZWZmZWN0cyc7XG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuL3V0aWxzJztcblxuZXhwb3J0IHsgZWZmZWN0cywgdXRpbHMgfTsiLCJmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmltcG9ydCB7IGlzLCBjaGVjaywgb2JqZWN0LCBjcmVhdGVTZXRDb250ZXh0V2FybmluZyB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHsgZW1pdHRlciB9IGZyb20gJy4vY2hhbm5lbCc7XG5pbXBvcnQgeyBpZGVudCB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHsgcnVuU2FnYSB9IGZyb20gJy4vcnVuU2FnYSc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNhZ2FNaWRkbGV3YXJlRmFjdG9yeSgpIHtcbiAgdmFyIF9yZWYgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gIHZhciBfcmVmJGNvbnRleHQgPSBfcmVmLmNvbnRleHQsXG4gICAgICBjb250ZXh0ID0gX3JlZiRjb250ZXh0ID09PSB1bmRlZmluZWQgPyB7fSA6IF9yZWYkY29udGV4dCxcbiAgICAgIG9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgWydjb250ZXh0J10pO1xuXG4gIHZhciBzYWdhTW9uaXRvciA9IG9wdGlvbnMuc2FnYU1vbml0b3IsXG4gICAgICBsb2dnZXIgPSBvcHRpb25zLmxvZ2dlcixcbiAgICAgIG9uRXJyb3IgPSBvcHRpb25zLm9uRXJyb3I7XG5cblxuICBpZiAoaXMuZnVuYyhvcHRpb25zKSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NhZ2EgbWlkZGxld2FyZSBubyBsb25nZXIgYWNjZXB0IEdlbmVyYXRvciBmdW5jdGlvbnMuIFVzZSBzYWdhTWlkZGxld2FyZS5ydW4gaW5zdGVhZCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBwYXNzZWQgYSBmdW5jdGlvbiB0byB0aGUgU2FnYSBtaWRkbGV3YXJlLiBZb3UgYXJlIGxpa2VseSB0cnlpbmcgdG8gc3RhcnQgYSAgICAgICAgU2FnYSBieSBkaXJlY3RseSBwYXNzaW5nIGl0IHRvIHRoZSBtaWRkbGV3YXJlLiBUaGlzIGlzIG5vIGxvbmdlciBwb3NzaWJsZSBzdGFydGluZyBmcm9tIDAuMTAuMC4gICAgICAgIFRvIHJ1biBhIFNhZ2EsIHlvdSBtdXN0IGRvIGl0IGR5bmFtaWNhbGx5IEFGVEVSIG1vdW50aW5nIHRoZSBtaWRkbGV3YXJlIGludG8gdGhlIHN0b3JlLlxcbiAgICAgICAgRXhhbXBsZTpcXG4gICAgICAgICAgaW1wb3J0IGNyZWF0ZVNhZ2FNaWRkbGV3YXJlIGZyb20gXFwncmVkdXgtc2FnYVxcJ1xcbiAgICAgICAgICAuLi4gb3RoZXIgaW1wb3J0c1xcblxcbiAgICAgICAgICBjb25zdCBzYWdhTWlkZGxld2FyZSA9IGNyZWF0ZVNhZ2FNaWRkbGV3YXJlKClcXG4gICAgICAgICAgY29uc3Qgc3RvcmUgPSBjcmVhdGVTdG9yZShyZWR1Y2VyLCBhcHBseU1pZGRsZXdhcmUoc2FnYU1pZGRsZXdhcmUpKVxcbiAgICAgICAgICBzYWdhTWlkZGxld2FyZS5ydW4oc2FnYSwgLi4uYXJncylcXG4gICAgICAnKTtcbiAgICB9XG4gIH1cblxuICBpZiAobG9nZ2VyICYmICFpcy5mdW5jKGxvZ2dlcikpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2BvcHRpb25zLmxvZ2dlcmAgcGFzc2VkIHRvIHRoZSBTYWdhIG1pZGRsZXdhcmUgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcgJiYgb3B0aW9ucy5vbmVycm9yKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdgb3B0aW9ucy5vbmVycm9yYCB3YXMgcmVtb3ZlZC4gVXNlIGBvcHRpb25zLm9uRXJyb3JgIGluc3RlYWQuJyk7XG4gIH1cblxuICBpZiAob25FcnJvciAmJiAhaXMuZnVuYyhvbkVycm9yKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignYG9wdGlvbnMub25FcnJvcmAgcGFzc2VkIHRvIHRoZSBTYWdhIG1pZGRsZXdhcmUgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5lbWl0dGVyICYmICFpcy5mdW5jKG9wdGlvbnMuZW1pdHRlcikpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2BvcHRpb25zLmVtaXR0ZXJgIHBhc3NlZCB0byB0aGUgU2FnYSBtaWRkbGV3YXJlIGlzIG5vdCBhIGZ1bmN0aW9uIScpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2FnYU1pZGRsZXdhcmUoX3JlZjIpIHtcbiAgICB2YXIgZ2V0U3RhdGUgPSBfcmVmMi5nZXRTdGF0ZSxcbiAgICAgICAgZGlzcGF0Y2ggPSBfcmVmMi5kaXNwYXRjaDtcblxuICAgIHZhciBzYWdhRW1pdHRlciA9IGVtaXR0ZXIoKTtcbiAgICBzYWdhRW1pdHRlci5lbWl0ID0gKG9wdGlvbnMuZW1pdHRlciB8fCBpZGVudCkoc2FnYUVtaXR0ZXIuZW1pdCk7XG5cbiAgICBzYWdhTWlkZGxld2FyZS5ydW4gPSBydW5TYWdhLmJpbmQobnVsbCwge1xuICAgICAgY29udGV4dDogY29udGV4dCxcbiAgICAgIHN1YnNjcmliZTogc2FnYUVtaXR0ZXIuc3Vic2NyaWJlLFxuICAgICAgZGlzcGF0Y2g6IGRpc3BhdGNoLFxuICAgICAgZ2V0U3RhdGU6IGdldFN0YXRlLFxuICAgICAgc2FnYU1vbml0b3I6IHNhZ2FNb25pdG9yLFxuICAgICAgbG9nZ2VyOiBsb2dnZXIsXG4gICAgICBvbkVycm9yOiBvbkVycm9yXG4gICAgfSk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgIGlmIChzYWdhTW9uaXRvciAmJiBzYWdhTW9uaXRvci5hY3Rpb25EaXNwYXRjaGVkKSB7XG4gICAgICAgICAgc2FnYU1vbml0b3IuYWN0aW9uRGlzcGF0Y2hlZChhY3Rpb24pO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZXN1bHQgPSBuZXh0KGFjdGlvbik7IC8vIGhpdCByZWR1Y2Vyc1xuICAgICAgICBzYWdhRW1pdHRlci5lbWl0KGFjdGlvbik7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH07XG4gIH1cblxuICBzYWdhTWlkZGxld2FyZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdCZWZvcmUgcnVubmluZyBhIFNhZ2EsIHlvdSBtdXN0IG1vdW50IHRoZSBTYWdhIG1pZGRsZXdhcmUgb24gdGhlIFN0b3JlIHVzaW5nIGFwcGx5TWlkZGxld2FyZScpO1xuICB9O1xuXG4gIHNhZ2FNaWRkbGV3YXJlLnNldENvbnRleHQgPSBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICBjaGVjayhwcm9wcywgaXMub2JqZWN0LCBjcmVhdGVTZXRDb250ZXh0V2FybmluZygnc2FnYU1pZGRsZXdhcmUnLCBwcm9wcykpO1xuICAgIG9iamVjdC5hc3NpZ24oY29udGV4dCwgcHJvcHMpO1xuICB9O1xuXG4gIHJldHVybiBzYWdhTWlkZGxld2FyZTtcbn0iLCJpbXBvcnQgeyB0YWtlRXZlcnksIHB1dCwgc2VsZWN0IH0gZnJvbSAncmVkdXgtc2FnYS9lZmZlY3RzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBTVV9UT09MQk9YU0NBTEVfTUlOQlVUVE9OX0NMSUNLLFxyXG4gICAgU1VfVE9PTEJPWFNDQUxFX01BWEJVVFRPTl9DTElDSyxcclxuICAgIFNVX1RPT0xCT1hTQ0FMRV8xMDBQRVJCVVRUT05fQ0xJQ0ssXHJcbn0gZnJvbSAnLi4vYWN0aW9uc19zdS90b29sYm94c2NhbGUuanMnO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIFNhZ2FfU2NhbGVfQ2hhbmdlLFxyXG59IGZyb20gJy4uL2FjdGlvbnNfc2FnYS90b29sYm94c2NhbGUuanMnO1xyXG5cclxuY29uc3QgZ2V0U2NhbGUgPSAoc3RhdGUpID0+IHN0YXRlLnNjYWxlO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24qIHNjYWxlKCkge1xyXG4gICAgeWllbGQgdGFrZUV2ZXJ5KFNVX1RPT0xCT1hTQ0FMRV9NSU5CVVRUT05fQ0xJQ0ssIGZ1bmN0aW9uKiAoYWN0aW9uKSB7XHJcbiAgICAgICAgbGV0IHNjYWxlID0geWllbGQgc2VsZWN0KGdldFNjYWxlKTtcclxuICAgICAgICBzY2FsZSAtPSA1MDtcclxuICAgICAgICBpZiAoc2NhbGUgPD0gNTApIHtcclxuICAgICAgICAgICAgc2NhbGUgPSA1MFxyXG4gICAgICAgIH1cclxuICAgICAgICB5aWVsZCBwdXQoU2FnYV9TY2FsZV9DaGFuZ2Uoe3NjYWxlOiBzY2FsZX0pKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHlpZWxkIHRha2VFdmVyeShTVV9UT09MQk9YU0NBTEVfTUFYQlVUVE9OX0NMSUNLLCBmdW5jdGlvbiogKGFjdGlvbikge1xyXG4gICAgICAgIC8vIGxldCBzY2FsZSA9IHNlbGVjdCgpLnNjYWxlO1xyXG4gICAgICAgIGxldCBzY2FsZSA9IHlpZWxkIHNlbGVjdChnZXRTY2FsZSk7XHJcbiAgICAgICAgc2NhbGUgKz0gNTA7XHJcbiAgICAgICAgaWYgKHNjYWxlID49IDEwMDApIHtcclxuICAgICAgICAgICAgc2NhbGUgPSAxMDAwXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHlpZWxkIHB1dChTYWdhX1NjYWxlX0NoYW5nZSh7c2NhbGU6IHNjYWxlfSkpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgeWllbGQgdGFrZUV2ZXJ5KFNVX1RPT0xCT1hTQ0FMRV8xMDBQRVJCVVRUT05fQ0xJQ0ssIGZ1bmN0aW9uKiAoYWN0aW9uKSB7XHJcbiAgICAgICAgeWllbGQgcHV0KFNhZ2FfU2NhbGVfQ2hhbmdlKHtzY2FsZTogMTAwfSkpO1xyXG4gICAgfSlcclxufVxyXG4iLCJpbXBvcnQgeyB0YWtlRXZlcnksIHB1dCwgc2VsZWN0LCBmb3JrIH0gZnJvbSAncmVkdXgtc2FnYS9lZmZlY3RzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBTVV9UT09MQk9YX01PVkVFTkQsXHJcbn0gZnJvbSAnLi4vYWN0aW9uc19zdS90b29sYm94LmpzJztcclxuaW1wb3J0IHtcclxuICAgIFNhZ2FfVG9vbEJveF9Nb3ZlRW5kLFxyXG59IGZyb20gJy4uL2FjdGlvbnNfc2FnYS90b29sYm94LmpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBTVV9UT09MQk9YQk9YREFUQV9VUERBVEVCVVRUT05fQ0xJQ0ssXHJcbiAgICBTVV9UT09MQk9YQk9YREFUQV9ERUxFVEVCVVRUT05fQ0xJQ0ssXHJcbiAgICBTVV9UT09MQk9YQk9YREFUQV9DUkVBVEVCVVRUT05fQ0xJQ0ssXHJcbn0gZnJvbSAnLi4vYWN0aW9uc19zdS90b29sYm94Ym94ZGF0YS5qcyc7XHJcbmltcG9ydCB7XHJcbiAgICBTYWdhX1Rvb2xCb3hCb3hEYXRhX0JveERhdGFfVXBkYXRlLFxyXG4gICAgU2FnYV9Ub29sQm94Qm94RGF0YV9Cb3hEYXRhX0RlbGV0ZSxcclxuICAgIFNhZ2FfVG9vbEJveEJveERhdGFfQm94RGF0YV9DcmVhdGUsXHJcbn0gZnJvbSAnLi4vYWN0aW9uc19zYWdhL3Rvb2xib3hib3hkYXRhLmpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBTVV9UT09MQk9YVEVYVERBVEFfVVBEQVRFQlVUVE9OX0NMSUNLLFxyXG59IGZyb20gJy4uL2FjdGlvbnNfc3UvdG9vbGJveHRleHRkYXRhLmpzJztcclxuaW1wb3J0IHtcclxuICAgIFNhZ2FfVG9vbEJveFRleHREYXRhX1RleHREYXRhX1VwZGF0ZSxcclxufSBmcm9tICcuLi9hY3Rpb25zX3NhZ2EvdG9vbGJveHRleHRkYXRhLmpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBTVV9UT09MQk9YU09aQUlfVVBEQVRFQlVUVE9OX0NMSUNLLFxyXG4gICAgU1VfVE9PTEJPWFNPWkFJX0RFTEVURUJVVFRPTl9DTElDSyxcclxuICAgIFNVX1RPT0xCT1hTT1pBSV9DUkVBVEVCVVRUT05fQ0xJQ0ssXHJcbiAgICBTVV9UT09MQk9YU09aQUlfU09aQUlfVE9HR0xFLFxyXG59IGZyb20gJy4uL2FjdGlvbnNfc3UvdG9vbGJveHNvemFpLmpzJztcclxuaW1wb3J0IHtcclxuICAgIFNhZ2FfVG9vbEJveFNvemFpX1NvemFpX1VwZGF0ZSxcclxuICAgIFNhZ2FfVG9vbEJveFNvemFpX1NvemFpX0RlbGV0ZSxcclxuICAgIFNhZ2FfVG9vbEJveFNvemFpX1NvemFpX0NyZWF0ZSxcclxuICAgIFNhZ2FfVG9vbEJveFNvemFpX1NvemFpX1RvZ2dsZSxcclxufSBmcm9tICcuLi9hY3Rpb25zX3NhZ2EvdG9vbGJveHNvemFpLmpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBTVV9UT09MQk9YTElOS19DUkVBVEVCVVRUT05fQ0xJQ0ssXHJcbiAgICBTVV9UT09MQk9YTElOS19ERUxFVEVCVVRUT05fQ0xJQ0ssXHJcbn0gZnJvbSAnLi4vYWN0aW9uc19zdS90b29sYm94bGluay5qcyc7XHJcbmltcG9ydCB7XHJcbiAgICBTYWdhX1Rvb2xCb3hMaW5rX0xpbmtfQ3JlYXRlLFxyXG4gICAgU2FnYV9Ub29sQm94TGlua19MaW5rX0RlbGV0ZSxcclxufSBmcm9tICcuLi9hY3Rpb25zX3NhZ2EvdG9vbGJveGxpbmsuanMnO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIFNhZ2FfTmFnYXNoaVJlc3VsdF9DcmVhdGUsXHJcbiAgICBTYWdhX05hZ2FzaGlfUmVtb3ZlLFxyXG59IGZyb20gJy4uL2FjdGlvbnNfc2FnYS9uYWdhc2hpLmpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBuYWdhc2hpRXhlYyxcclxuICAgIG5hZ2FzaGlFeGVjR3JvdXAsXHJcbiAgICBuYWdhc2hpRXhlY0JveCxcclxuICAgIG5hZ2FzaGlFeGVjU296YWksXHJcbiAgICBuYWdhc2hpRXhlY0FsbCxcclxufSBmcm9tICcuL25hZ2FzaGkuanMnO1xyXG5cclxuaW1wb3J0IHsgWmFoeW8gfSBmcm9tICcuLi9saWJzL3phaHlvLmpzJztcclxuaW1wb3J0IHsgVGV4dCB9IGZyb20gJy4uL2xpYnMvdGV4dC5qcyc7XHJcbmltcG9ydCB7IEJveCB9IGZyb20gJy4uL2xpYnMvYm94LmpzJztcclxuaW1wb3J0IHsgU296YWkgfSBmcm9tICcuLi9saWJzL3NvemFpLmpzJztcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiogdG9vbGJveCgpIHtcclxuICAgIC8vIOe0oOadkOOBruWIneacn+WHpueQhlxyXG4gICAgY29uc3Qgc296YWkgPSB5aWVsZCBzZWxlY3QoKHN0YXRlKSA9PiBzdGF0ZS5zb3phaSk7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNvemFpLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgY29uc3QgcGF5bG9hZCA9IHtcclxuICAgICAgICAgICAgc296YWk6IHtcclxuICAgICAgICAgICAgICAgIGlkOiBzb3phaVtpXS5pZCxcclxuICAgICAgICAgICAgICAgIHR5cGU6IHNvemFpW2ldLnR5cGUsXHJcbiAgICAgICAgICAgICAgICB0ZXh0OiBzb3phaVtpXS50ZXh0LFxyXG4gICAgICAgICAgICAgICAgaW1hZ2U6IHNvemFpW2ldLmltYWdlLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgeWllbGQgcHV0KFNhZ2FfVG9vbEJveFNvemFpX1NvemFpX1VwZGF0ZShwYXlsb2FkKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g44OE44O844Or44Oc44OD44Kv44K544KS5Yid5pyf5L2N572u44Gr44K744OD44OI44GZ44KLXHJcbiAgICBjb25zdCB0b29sYm94cyA9IHlpZWxkIHNlbGVjdCgoc3RhdGUpID0+IHN0YXRlLnRvb2xib3hzKTtcclxuICAgIGxldCBwYXlsb2FkID0ge307XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0b29sYm94cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIHN3aXRjaCAodG9vbGJveHNbaV0udHlwZSkge1xyXG4gICAgICAgIGNhc2UgJ3NjYWxlJzogICAvLyDmi6HlpKfnuK7lsI/jg4Tjg7zjg6vjg5zjg4Pjgq/jgrlcclxuICAgICAgICAgICAgcGF5bG9hZCA9IHtcclxuICAgICAgICAgICAgICAgIGlkOiB0b29sYm94c1tpXS5pZCxcclxuICAgICAgICAgICAgICAgIHg6IFphaHlvLndpbmRvd0FyZWEoKS53IC0gdG9vbGJveHNbaV0udyAtIDIwLFxyXG4gICAgICAgICAgICAgICAgeTogNSxcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHlpZWxkIHB1dChTYWdhX1Rvb2xCb3hfTW92ZUVuZChwYXlsb2FkKSk7XHJcblxyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBcclxuICAgICAgICBjYXNlICdib3hkYXRhJzogICAvLyDjg5zjg4Pjgq/jgrnmg4XloLHjg4Tjg7zjg6vjg5zjg4Pjgq/jgrlcclxuICAgICAgICAgICAgcGF5bG9hZCA9IHtcclxuICAgICAgICAgICAgICAgIGlkOiB0b29sYm94c1tpXS5pZCxcclxuICAgICAgICAgICAgICAgIHg6IFphaHlvLndpbmRvd0FyZWEoKS53IC0gdG9vbGJveHNbaV0udyAtIDIwLFxyXG4gICAgICAgICAgICAgICAgeTogNTAsXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB5aWVsZCBwdXQoU2FnYV9Ub29sQm94X01vdmVFbmQocGF5bG9hZCkpO1xyXG5cclxuICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgIGNhc2UgJ3RleHRkYXRhJzogICAvLyDjg4bjgq3jgrnjg4jmg4XloLHjg4Tjg7zjg6vjg5zjg4Pjgq/jgrlcclxuICAgICAgICAgICAgcGF5bG9hZCA9IHtcclxuICAgICAgICAgICAgICAgIGlkOiB0b29sYm94c1tpXS5pZCxcclxuICAgICAgICAgICAgICAgIHg6IFphaHlvLndpbmRvd0FyZWEoKS53IC0gdG9vbGJveHNbaV0udyAtIDIwLFxyXG4gICAgICAgICAgICAgICAgeTogMTk1LFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgeWllbGQgcHV0KFNhZ2FfVG9vbEJveF9Nb3ZlRW5kKHBheWxvYWQpKTtcclxuXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBjYXNlICdzb3phaSc6ICAgLy8g57Sg5p2Q44Oq44K544OI44OE44O844Or44Oc44OD44Kv44K5XHJcbiAgICAgICAgICAgIHBheWxvYWQgPSB7XHJcbiAgICAgICAgICAgICAgICBpZDogdG9vbGJveHNbaV0uaWQsXHJcbiAgICAgICAgICAgICAgICB4OiBaYWh5by53aW5kb3dBcmVhKCkudyAtIHRvb2xib3hzW2ldLncgLSAyMCAtIDIwMCAtIDUsXHJcbiAgICAgICAgICAgICAgICB5OiA1LFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgeWllbGQgcHV0KFNhZ2FfVG9vbEJveF9Nb3ZlRW5kKHBheWxvYWQpKTtcclxuXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBjYXNlICdsaW5rJzogICAgLy8g44Oq44Oz44Kv44Oq44K544OI44OE44O844Or44Oc44OD44Kv44K5XHJcbiAgICAgICAgICAgIHBheWxvYWQgPSB7XHJcbiAgICAgICAgICAgICAgICBpZDogdG9vbGJveHNbaV0uaWQsXHJcbiAgICAgICAgICAgICAgICB4OiBaYWh5by53aW5kb3dBcmVhKCkudyAtIHRvb2xib3hzW2ldLncgLSAyMCAtIDIwMCAtIDUgLSAyMDAgLSA1LFxyXG4gICAgICAgICAgICAgICAgeTogNSxcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHlpZWxkIHB1dChTYWdhX1Rvb2xCb3hfTW92ZUVuZChwYXlsb2FkKSk7XHJcblxyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgXHJcbiAgICAvLyB0YWtlRXZlcnlcclxuICAgIHlpZWxkIHRha2VFdmVyeShTVV9UT09MQk9YX01PVkVFTkQsIGZ1bmN0aW9uKiAoYWN0aW9uKSB7XHJcbiAgICAgICAgeWllbGQgcHV0KFNhZ2FfVG9vbEJveF9Nb3ZlRW5kKGFjdGlvbi5wYXlsb2FkKSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB5aWVsZCB0YWtlRXZlcnkoU1VfVE9PTEJPWEJPWERBVEFfVVBEQVRFQlVUVE9OX0NMSUNLLCBmdW5jdGlvbiogKGFjdGlvbikge1xyXG4gICAgICAgIHlpZWxkIHB1dChTYWdhX1Rvb2xCb3hCb3hEYXRhX0JveERhdGFfVXBkYXRlKGFjdGlvbi5wYXlsb2FkKSk7XHJcblxyXG4gICAgICAgIC8vIOOBmeOBueOBpuOCkua1geOBl+ebtOOBmVxyXG4gICAgICAgIHlpZWxkIGZvcmsobmFnYXNoaUV4ZWNBbGwpO1xyXG4gICAgfSk7XHJcbiAgICB5aWVsZCB0YWtlRXZlcnkoU1VfVE9PTEJPWEJPWERBVEFfREVMRVRFQlVUVE9OX0NMSUNLLCBmdW5jdGlvbiogKGFjdGlvbikge1xyXG4gICAgICAgIC8vIOWJiumZpOOBl+OCiOOBhuOBqOOBl+OBpuOBhOOCi+ODnOODg+OCr+OCueOBruOCsOODq+ODvOODl+WQjeOCkuW+l+OCi1xyXG4gICAgICAgIGxldCBib3hzID0geWllbGQgc2VsZWN0KChzdGF0ZSkgPT4gc3RhdGUuYm94cyk7XHJcbiAgICAgICAgY29uc3QgW2dyb3VwLCBub10gPSBCb3guZ2V0R3JvdXBBbmRObyhib3hzLCBhY3Rpb24ucGF5bG9hZC5pZCk7XHJcblxyXG4gICAgICAgIC8vIOODnOODg+OCr+OCueOCkuWJiumZpFxyXG4gICAgICAgIHlpZWxkIHB1dChTYWdhX1Rvb2xCb3hCb3hEYXRhX0JveERhdGFfRGVsZXRlKGFjdGlvbi5wYXlsb2FkKSk7XHJcblxyXG4gICAgICAgIC8vIOODnOODg+OCr+OCueODquOCueODiOWGheOBq+WJiumZpOOBl+OBn+ODnOODg+OCr+OCueOBruOCsOODq+ODvOODl+WQjeOBjOWtmOWcqOOBl+OBquOBkeOCjOOBsOOAgVxyXG4gICAgICAgIC8vIOODquODs+OCr+ODquOCueODiOOCguWJiumZpOOBmeOCi1xyXG4gICAgICAgIGJveHMgPSB5aWVsZCBzZWxlY3QoKHN0YXRlKSA9PiBzdGF0ZS5ib3hzKTtcclxuICAgICAgICBjb25zdCBncm91cHMgPSBCb3guZ2V0R3JvdXBBcnkoYm94cyk7XHJcbiAgICAgICAgaWYgKGdyb3Vwcy5pbmRleE9mKGdyb3VwKSA8IDApIHtcclxuICAgICAgICAgICAgY29uc3QgcGF5bG9hZCA9IHtcclxuICAgICAgICAgICAgICAgIGdyb3VwOiBncm91cCxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgeWllbGQgcHV0KFNhZ2FfVG9vbEJveExpbmtfTGlua19EZWxldGUocGF5bG9hZCkpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIOWtmOWcqOOBl+OBn+OCieOAgea1geOBl+ebtOOBmVxyXG4gICAgICAgICAgICB5aWVsZCBmb3JrKG5hZ2FzaGlFeGVjR3JvdXAsIGdyb3VwKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIHlpZWxkIHRha2VFdmVyeShTVV9UT09MQk9YQk9YREFUQV9DUkVBVEVCVVRUT05fQ0xJQ0ssIGZ1bmN0aW9uKiAoYWN0aW9uKSB7XHJcbiAgICAgICAgeWllbGQgcHV0KFNhZ2FfVG9vbEJveEJveERhdGFfQm94RGF0YV9DcmVhdGUoYWN0aW9uLnBheWxvYWQpKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHlpZWxkIHRha2VFdmVyeShTVV9UT09MQk9YVEVYVERBVEFfVVBEQVRFQlVUVE9OX0NMSUNLLCBmdW5jdGlvbiogKGFjdGlvbikge1xyXG4gICAgICAgIHlpZWxkIHB1dChTYWdhX1Rvb2xCb3hUZXh0RGF0YV9UZXh0RGF0YV9VcGRhdGUoYWN0aW9uLnBheWxvYWQpKTtcclxuXHJcbiAgICAgICAgLy8g5rWB44GX44KS5pu05pawXHJcbiAgICAgICAgeWllbGQgZm9yayhuYWdhc2hpRXhlY0JveCwgYWN0aW9uLnBheWxvYWQuYm94LmlkKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHlpZWxkIHRha2VFdmVyeShTVV9UT09MQk9YU09aQUlfVVBEQVRFQlVUVE9OX0NMSUNLLCBmdW5jdGlvbiogKGFjdGlvbikge1xyXG4gICAgICAgIHlpZWxkIHB1dChTYWdhX1Rvb2xCb3hTb3phaV9Tb3phaV9VcGRhdGUoYWN0aW9uLnBheWxvYWQpKTtcclxuXHJcbiAgICAgICAgLy8g5rWB44GX5Yem55CG44KS6KGM44GGXHJcbiAgICAgICAgeWllbGQgZm9yayhuYWdhc2hpRXhlY1NvemFpLCBhY3Rpb24ucGF5bG9hZC5zb3phaS5pZCk7XHJcbiAgICB9KTtcclxuICAgIHlpZWxkIHRha2VFdmVyeShTVV9UT09MQk9YU09aQUlfREVMRVRFQlVUVE9OX0NMSUNLLCBmdW5jdGlvbiogKGFjdGlvbikge1xyXG4gICAgICAgIC8vIOWJiumZpOOBl+OCiOOBhuOBqOOBl+OBpuOBhOOCi+e0oOadkOOBjOODquODs+OCr+ODquOCueODiOOBq+OBguOCi+WgtOWQiOOAgVxyXG4gICAgICAgIC8vIOOBneOBruODquODs+OCr+OBleOCjOOBpuOBhOOCi+ODnOODg+OCr+OCueOBruOCsOODq+ODvOODl+OCkuW+l+OBpuODh+OCo+OCueODkeODg+ODgeOBmeOCi1xyXG4gICAgICAgIGNvbnN0IGJveHMgID0geWllbGQgc2VsZWN0KChzdGF0ZSkgPT4gc3RhdGUuYm94cyk7XHJcbiAgICAgICAgY29uc3QgbGlua3MgPSB5aWVsZCBzZWxlY3QoKHN0YXRlKSA9PiBzdGF0ZS5saW5rcyk7XHJcbiAgICAgICAgY29uc3QgZ3JvdXAgPSBCb3guZ2V0TGlua0dyb3VwKGJveHMsIGxpbmtzLCBhY3Rpb24ucGF5bG9hZC5pZCk7XHJcbiAgICAgICAgaWYgKGdyb3VwICE9ICcnKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHBheWxvYWQgPSB7XHJcbiAgICAgICAgICAgICAgICBncm91cDogZ3JvdXAsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgeWllbGQgcHV0KFNhZ2FfTmFnYXNoaV9SZW1vdmUocGF5bG9hZCkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgeWllbGQgcHV0KFNhZ2FfVG9vbEJveFNvemFpX1NvemFpX0RlbGV0ZShhY3Rpb24ucGF5bG9hZCkpO1xyXG4gICAgfSk7XHJcbiAgICB5aWVsZCB0YWtlRXZlcnkoU1VfVE9PTEJPWFNPWkFJX0NSRUFURUJVVFRPTl9DTElDSywgZnVuY3Rpb24qIChhY3Rpb24pIHtcclxuICAgICAgICB5aWVsZCBwdXQoU2FnYV9Ub29sQm94U296YWlfU296YWlfQ3JlYXRlKGFjdGlvbi5wYXlsb2FkKSk7XHJcbiAgICB9KTtcclxuICAgIHlpZWxkIHRha2VFdmVyeShTVV9UT09MQk9YU09aQUlfU09aQUlfVE9HR0xFLCBmdW5jdGlvbiogKGFjdGlvbikge1xyXG4gICAgICAgIHlpZWxkIHB1dChTYWdhX1Rvb2xCb3hTb3phaV9Tb3phaV9Ub2dnbGUoYWN0aW9uLnBheWxvYWQpKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHlpZWxkIHRha2VFdmVyeShTVV9UT09MQk9YTElOS19DUkVBVEVCVVRUT05fQ0xJQ0ssIGZ1bmN0aW9uKiAoYWN0aW9uKSB7XHJcbiAgICAgICAgeWllbGQgcHV0KFNhZ2FfVG9vbEJveExpbmtfTGlua19DcmVhdGUoYWN0aW9uLnBheWxvYWQpKTtcclxuXHJcbiAgICAgICAgLy8g5rWB44GX5Yem55CG44KS6KGM44GGXHJcbiAgICAgICAgeWllbGQgZm9yayhuYWdhc2hpRXhlYywgYWN0aW9uLnBheWxvYWQuZ3JvdXAsIGFjdGlvbi5wYXlsb2FkLnNvemFpX2lkKTtcclxuICAgIH0pO1xyXG4gICAgeWllbGQgdGFrZUV2ZXJ5KFNVX1RPT0xCT1hMSU5LX0RFTEVURUJVVFRPTl9DTElDSywgZnVuY3Rpb24qIChhY3Rpb24pIHtcclxuICAgICAgICAvLyDjg6rjg7Pjgq/jgpLliYrpmaTjgZfjgojjgYbjgajjgZfjgabjgYTjgovjgrDjg6vjg7zjg5fjgpLlvpfjgabjg4fjgqPjgrnjg5Hjg4Pjg4HjgZnjgotcclxuICAgICAgICB5aWVsZCBwdXQoU2FnYV9OYWdhc2hpX1JlbW92ZShhY3Rpb24ucGF5bG9hZCkpO1xyXG5cclxuICAgICAgICB5aWVsZCBwdXQoU2FnYV9Ub29sQm94TGlua19MaW5rX0RlbGV0ZShhY3Rpb24ucGF5bG9hZCkpO1xyXG4gICAgfSk7XHJcbn1cclxuIiwiLy9cclxuLy8g44Oq44Oz44Kv44Oq44K544OI6Zai6YCjXHJcbi8vXHJcblxyXG5leHBvcnQgY29uc3QgTGluayA9IHtcclxuICAgIC8vXHJcbiAgICAvLyDmjIflrprjga7jgrDjg6vjg7zjg5flkI3jgYzjg6rjg7Pjgq/jgZXjgozjgabjgYTjgozjgbDjgIHlr77lv5zjgZnjgovntKDmnZBJROOCkui/lOOBmVxyXG4gICAgLy9cclxuICAgIGdldFNvemFpSWQ6IChsaW5rcywgZ3JvdXApID0+IHtcclxuICAgICAgICBsZXQgc296YWlfaWQgPSAnJztcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5rcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAobGlua3NbaV0uZ3JvdXAgPT0gZ3JvdXApIHtcclxuICAgICAgICAgICAgICAgIHNvemFpX2lkID0gbGlua3NbaV0uc296YWlfaWQ7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHNvemFpX2lkO1xyXG4gICAgfSxcclxuXHJcbiAgICAvL1xyXG4gICAgLy8g5oyH5a6a44Gu44Oc44OD44Kv44K5SUTjga7jg5zjg4Pjgq/jgrnjga7jgrDjg6vjg7zjg5fjgYzjg6rjg7Pjgq/jgZXjgozjgabjgYTjgozjgbDjgIHlr77lv5zjgZnjgovntKDmnZBJROOCkui/lOOBmVxyXG4gICAgLy9cclxuICAgIGdldFNvemFpSWRGcm9tQm94SWQ6IChsaW5rcywgYm94cywgYm94X2lkKSA9PiB7XHJcbiAgICAgICAgbGV0IHNvemFpX2lkID0gJyc7XHJcbiAgICAgICAgbGV0IGdyb3VwID0gJyc7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYm94cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoYm94c1tpXS5pZCA9PSBib3hfaWQpIHtcclxuICAgICAgICAgICAgICAgIGdyb3VwID0gYm94c1tpXS5ncm91cDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZ3JvdXAgIT0gJycpIHtcclxuICAgICAgICAgICAgc296YWlfaWQgPSBMaW5rLmdldFNvemFpSWQobGlua3MsIGdyb3VwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBzb3phaV9pZDtcclxuICAgIH0sXHJcbn1cclxuIiwiaW1wb3J0IHsgdGFrZUV2ZXJ5LCBwdXQsIHNlbGVjdCwgZm9yayB9IGZyb20gJ3JlZHV4LXNhZ2EvZWZmZWN0cyc7XHJcblxyXG5pbXBvcnQge1xyXG4gICAgU1VfU0VMRUNUQk9YX0JPWF9OT05TRUxFQ1QsXHJcbiAgICBTVV9TRUxFQ1RCT1hfQk9YX1NFTEVDVCxcclxuICAgIFNVX1NFTEVDVEJPWF9FRElUQk9YX01PVkVFTkQsXHJcbiAgICBTVV9TRUxFQ1RCT1hfRURJVEJPWF9DSEFOR0VTSVpFLFxyXG59IGZyb20gJy4uL2FjdGlvbnNfc3Uvc2VsZWN0Ym94LmpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBTYWdhX1NlbGVjdEJveF9Cb3hfTm9uU2VsZWN0LFxyXG4gICAgU2FnYV9TZWxlY3RCb3hfQm94X1NlbGVjdCxcclxuICAgIFNhZ2FfU2VsZWN0Qm94X0VkaXRCb3hfTW92ZUVuZCxcclxuICAgIFNhZ2FfU2VsZWN0Qm94X0VkaXRCb3hfQ2hhbmdlU2l6ZSxcclxufSBmcm9tICcuLi9hY3Rpb25zX3NhZ2Evc2VsZWN0Ym94LmpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBTYWdhX1Rvb2xCb3hTb3phaV9Tb3phaV9TZWxlY3QsXHJcbn0gZnJvbSAnLi4vYWN0aW9uc19zYWdhL3Rvb2xib3hzb3phaS5qcyc7XHJcblxyXG5pbXBvcnQge1xyXG4gICAgbmFnYXNoaUV4ZWMsXHJcbiAgICBuYWdhc2hpRXhlY0dyb3VwLFxyXG4gICAgbmFnYXNoaUV4ZWNCb3gsXHJcbiAgICBuYWdhc2hpRXhlY1NvemFpLFxyXG4gICAgbmFnYXNoaUV4ZWNBbGwsXHJcbn0gZnJvbSAnLi9uYWdhc2hpLmpzJztcclxuXHJcbmltcG9ydCB7IExpbmsgfSBmcm9tICcuLi9saWJzL2xpbmsuanMnO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKiBzZWxlY3Rib3goKSB7XHJcbiAgICAvLyDjg5zjg4Pjgq/jgrnvvIjjg4bjgq3jgrnjg4jjg5zjg4Pjgq/jgrnvvInjga7liJ3mnJ/lh6bnkIZcclxuICAgIGNvbnN0IGJveHMgPSB5aWVsZCBzZWxlY3QoKHN0YXRlKSA9PiBzdGF0ZS5ib3hzKTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYm94cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGlmIChib3hzW2ldLnR5cGUgPT0gJ3RleHQnKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHBheWxvYWQgPSB7XHJcbiAgICAgICAgICAgICAgICBpZDogYm94c1tpXS5pZCxcclxuICAgICAgICAgICAgICAgIHgxOiBib3hzW2ldLngxLFxyXG4gICAgICAgICAgICAgICAgeTE6IGJveHNbaV0ueTEsXHJcbiAgICAgICAgICAgICAgICB4MjogYm94c1tpXS54MixcclxuICAgICAgICAgICAgICAgIHkyOiBib3hzW2ldLnkyLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHlpZWxkIHB1dChTYWdhX1NlbGVjdEJveF9FZGl0Qm94X0NoYW5nZVNpemUocGF5bG9hZCkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgeWllbGQgdGFrZUV2ZXJ5KFNVX1NFTEVDVEJPWF9CT1hfTk9OU0VMRUNULCBmdW5jdGlvbiogKGFjdGlvbikge1xyXG4gICAgICAgIHlpZWxkIHB1dChTYWdhX1NlbGVjdEJveF9Cb3hfTm9uU2VsZWN0KGFjdGlvbi5wYXlsb2FkKSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB5aWVsZCB0YWtlRXZlcnkoU1VfU0VMRUNUQk9YX0JPWF9TRUxFQ1QsIGZ1bmN0aW9uKiAoYWN0aW9uKSB7XHJcbiAgICAgICAgeWllbGQgcHV0KFNhZ2FfU2VsZWN0Qm94X0JveF9TZWxlY3QoYWN0aW9uLnBheWxvYWQpKTtcclxuXHJcbiAgICAgICAgLy8g6YG45oqe44GX44Gf44Oc44OD44Kv44K544Gu44Kw44Or44O844OX5ZCN44GM44Oq44Oz44Kv44Oq44K544OI44Gr44GC44KM44Gw44CB44Gd44Gu57Sg5p2Q44KS6YG45oqe44GV44Gb44KLXHJcbiAgICAgICAgY29uc3QgbGlua3MgPSB5aWVsZCBzZWxlY3QoKHN0YXRlKSA9PiBzdGF0ZS5saW5rcyk7XHJcbiAgICAgICAgY29uc3QgYm94cyAgPSB5aWVsZCBzZWxlY3QoKHN0YXRlKSA9PiBzdGF0ZS5ib3hzKTtcclxuICAgICAgICBjb25zdCBzb3phaV9pZCA9IExpbmsuZ2V0U296YWlJZEZyb21Cb3hJZChsaW5rcywgYm94cywgYWN0aW9uLnBheWxvYWQuaWQpO1xyXG4gICAgICAgIGlmIChzb3phaV9pZCAhPSAnJykge1xyXG4gICAgICAgICAgICB5aWVsZCBwdXQoU2FnYV9Ub29sQm94U296YWlfU296YWlfU2VsZWN0KHtpZDogc296YWlfaWR9KSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgeWllbGQgdGFrZUV2ZXJ5KFNVX1NFTEVDVEJPWF9FRElUQk9YX01PVkVFTkQsIGZ1bmN0aW9uKiAoYWN0aW9uKSB7XHJcbiAgICAgICAgeWllbGQgcHV0KFNhZ2FfU2VsZWN0Qm94X0VkaXRCb3hfTW92ZUVuZChhY3Rpb24ucGF5bG9hZCkpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgeWllbGQgdGFrZUV2ZXJ5KFNVX1NFTEVDVEJPWF9FRElUQk9YX0NIQU5HRVNJWkUsIGZ1bmN0aW9uKiAoYWN0aW9uKSB7XHJcbiAgICAgICAgeWllbGQgcHV0KFNhZ2FfU2VsZWN0Qm94X0VkaXRCb3hfQ2hhbmdlU2l6ZShhY3Rpb24ucGF5bG9hZCkpO1xyXG5cclxuICAgICAgICAvLyDmtYHjgZfnm7TjgZlcclxuICAgICAgICB5aWVsZCBmb3JrKG5hZ2FzaGlFeGVjQm94LCBhY3Rpb24ucGF5bG9hZC5pZCk7XHJcbiAgICB9KTtcclxufVxyXG4iLCJpbXBvcnQgeyBmb3JrIH0gZnJvbSAncmVkdXgtc2FnYS9lZmZlY3RzJztcclxuXHJcbmltcG9ydCBzZWxlY3Rib3ggZnJvbSAnLi9zZWxlY3Rib3guanMnO1xyXG5pbXBvcnQgdG9vbGJveCBmcm9tICcuL3Rvb2xib3guanMnO1xyXG5pbXBvcnQgc2NhbGUgZnJvbSAnLi9zY2FsZS5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiogcm9vdFNhZ2EoKSB7XHJcbiAgICB5aWVsZCBmb3JrKHNlbGVjdGJveCk7XHJcbiAgICB5aWVsZCBmb3JrKHRvb2xib3gpO1xyXG4gICAgeWllbGQgZm9yayhzY2FsZSk7XHJcbn1cclxuIiwiaW1wb3J0IHsgWmFoeW8gfSBmcm9tICcuLi9saWJzL3phaHlvLmpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBTQUdBX1RPT0xCT1hMSU5LX0xJTktfQ1JFQVRFLFxyXG4gICAgU0FHQV9UT09MQk9YTElOS19MSU5LX0RFTEVURSxcclxufSBmcm9tICcuLi9hY3Rpb25zX3NhZ2EvdG9vbGJveGxpbmsuanMnO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIFNBR0FfVE9PTEJPWFNPWkFJX1NPWkFJX0RFTEVURSxcclxufSBmcm9tICcuLi9hY3Rpb25zX3NhZ2EvdG9vbGJveHNvemFpLmpzJztcclxuaW1wb3J0IHsgU0FHQV9UT09MQk9YQk9YREFUQV9CT1hEQVRBX0RFTEVURSB9IGZyb20gJy4uL2FjdGlvbnNfc2FnYS90b29sYm94Ym94ZGF0YS5qcyc7XHJcblxyXG4vLyA9PT09PT09PT09PT09PT09PT09PVxyXG4vLyDjg6rjg7Pjgq/jg4fjg7zjgr9cclxuLy8gICAgICBbXHJcbi8vICAgICAgICAgIHtcclxuLy8gICAgICAgICAgICAgIGdyb3VwOiDjgrDjg6vjg7zjg5flkI1cclxuLy8gICAgICAgICAgICAgIHNvemFpX2lkOiDntKDmnZBJRFxyXG4vL1xyXG4vLyAgICAgICAgICAgICAgdGV4dDogW1xyXG4vLyAgICAgICAgICAgICAgICAgIHtcclxuLy8gICAgICAgICAgICAgICAgICAgICAgbW9qaTogMeaWh+Wtl1xyXG4vLyAgICAgICAgICAgICAgICAgICAgICBzaXplX2o6IOWtl+ipsOaWueWQkeOCteOCpOOCulxyXG4vLyAgICAgICAgICAgICAgICAgICAgICBzaXplX2c6IOihjOmAgeaWueWQkeOCteOCpOOCulxyXG4vLyAgICAgICAgICAgICAgICAgICAgICBmb250OiDjg5Xjgqnjg7Pjg4jnlarlj7dcclxuLy8gICAgICAgICAgICAgICAgICB9LFxyXG4vLyAgICAgICAgICAgICAgICAgIC4uLi4uXHJcbi8vICAgICAgICAgICAgICBdLFxyXG4vLyAgICAgICAgICB9LFxyXG4vLyAgICAgICAgICAuLi4uLlxyXG4vLyAgICAgIF1cclxuLy8gPT09PT09PT09PT09PT09PT09PT1cclxuZXhwb3J0IGNvbnN0IGxpbmtzID0gKHN0YXRlID0gW10sIGFjdGlvbikgPT4ge1xyXG4gICAgbGV0IGxpc3RzO1xyXG4gICAgbGV0IGxpbms7XHJcblxyXG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xyXG4gICAgY2FzZSBTQUdBX1RPT0xCT1hMSU5LX0xJTktfQ1JFQVRFOlxyXG4gICAgICAgIGxpc3RzID0gc3RhdGUuc2xpY2UoKTtcclxuXHJcbiAgICAgICAgbGluayA9IHtcclxuICAgICAgICAgICAgZ3JvdXA6IGFjdGlvbi5wYXlsb2FkLmdyb3VwLFxyXG4gICAgICAgICAgICBzb3phaV9pZDogYWN0aW9uLnBheWxvYWQuc296YWlfaWQsXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgbGlzdHMucHVzaChsaW5rKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGxpc3RzO1xyXG5cclxuICAgIGNhc2UgU0FHQV9UT09MQk9YTElOS19MSU5LX0RFTEVURTpcclxuICAgICAgICBsaXN0cyA9IHN0YXRlLnNsaWNlKCk7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGxpc3RzW2ldLmdyb3VwID09IGFjdGlvbi5wYXlsb2FkLmdyb3VwKSB7XHJcbiAgICAgICAgICAgICAgICBsaXN0cy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGxpc3RzO1xyXG5cclxuICAgIGNhc2UgU0FHQV9UT09MQk9YU09aQUlfU09aQUlfREVMRVRFOlxyXG4gICAgICAgIGxpc3RzID0gc3RhdGUuc2xpY2UoKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAobGlzdHNbaV0uc296YWlfaWQgPT0gYWN0aW9uLnBheWxvYWQuaWQpIHtcclxuICAgICAgICAgICAgICAgIGxpc3RzLnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbGlzdHM7XHJcblxyXG4gICAgZGVmYXVsdDpcclxuICAgICAgICByZXR1cm4gc3RhdGU7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgWmFoeW8gfSBmcm9tICcuLi9saWJzL3phaHlvLmpzJztcclxuXHJcbmltcG9ydCB7IFRleHQgfSBmcm9tICcuLi9saWJzL3RleHQuanMnO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIFNBR0FfVE9PTEJPWFNPWkFJX1NPWkFJX1VQREFURSxcclxuICAgIFNBR0FfVE9PTEJPWFNPWkFJX1NPWkFJX0RFTEVURSxcclxuICAgIFNBR0FfVE9PTEJPWFNPWkFJX1NPWkFJX0NSRUFURSxcclxuICAgIFNBR0FfVE9PTEJPWFNPWkFJX1NPWkFJX1NFTEVDVCxcclxuICAgIFNBR0FfVE9PTEJPWFNPWkFJX1NPWkFJX1RPR0dMRSxcclxufSBmcm9tICcuLi9hY3Rpb25zX3NhZ2EvdG9vbGJveHNvemFpLmpzJztcclxuXHJcbi8vID09PT09PT09PT09PT09PT09PT09XHJcbi8vIOe0oOadkOODh+ODvOOCv1xyXG4vLyAgICAgIFtcclxuLy8gICAgICAgICAge1xyXG4vLyAgICAgICAgICAgICAgaWQ6IElEXHJcbi8vICAgICAgICAgICAgICB0eXBlOiAndGV4dCc644OG44Kt44K544OIICdpbWFnZSc655S75YOPXHJcbi8vICAgICAgICAgICAgICB0ZXh0OiDjg4bjgq3jgrnjg4hcclxuLy8gICAgICAgICAgICAgIG1vamlPYmpBcnk6IOaWh+Wtl+OCquODluOCuOOCp+OCr+ODiOmFjeWIl1xyXG4vLyAgICAgICAgICAgICAgaW1hZ2U6IOeUu+WDj1xyXG4vLyAgICAgICAgICB9LFxyXG4vLyAgICAgICAgICAuLi4uLlxyXG4vLyAgICAgIF1cclxuLy8gPT09PT09PT09PT09PT09PT09PT1cclxuZXhwb3J0IGNvbnN0IHNvemFpID0gKHN0YXRlID0gW1xyXG4gICAge1xyXG4gICAgICAgIGlkOiAn57Sg5p2QQScsXHJcbiAgICAgICAgdHlwZTogJ3RleHQnLFxyXG4gICAgICAgIHRleHQ6ICfjgIDnlJ/nlKPlubTpvaLkurrlj6Pjga7muJvlsJHjgoTnrKzvvJTmrKHnlKPmpa3pnanlkb3jgbjjga7lr77lv5zjgarjganjgIHlu7roqK3mpa3jga/lpKfjgY3jgarou6Lmj5vmnJ/jgpLov47jgYjjgabjgYTjgovjgILvvJPmnIjjgavoqK3nq4vvvJfvvJDlkajlubTjgpLov47jgYjjgZ/lhajlm73lu7roqK3mpa3ljZTkvJrjga7ov5Hol6TmmbTosp7kvJrplbfjga/jgIHlnLDln5/lu7roqK3mpa3jgYzlvbnlibLjgpLmnpzjgZ/jgZfntprjgZHjgovjgZ/jgoHjgavjgIHjgIzlg43jgY3mlrnmlLnpnanjgajnlJ/nlKPmgKflkJHkuIrjgavmnpzmlaLjgavmjJHmiKbjgZfjgarjgZHjgozjgbDjgarjgonjgarjgYTjgI3jgajjgZfjgIHjgIzoh6rjgonmlLnpnanjgpLpgLLjgoHjgabjgYTjgY/jgZPjgajjgoLph43opoHjgavjgarjgovjgI3jgajlvLfoqr/jgZnjgovjgILvvJfvvJDlkajlubTjgpLlpZHmqZ/jgavnrZblrprjgZfjgZ/jgIzlnLDln5/lu7roqK3mpa3lsIbmnaXlsZXmnJvjgI3jgavjga/jgIHou6Lmj5vmnJ/jgpLlpInpnanjga7lpb3mqZ/jgavlpInjgYjjgovjgZ/jgoHjga7jgq3jg7zjg6/jg7zjg4njgpLnm5vjgorovrzjgpPjgaDjgILlnLDln5/lu7roqK3mpa3jga7pgLLljJbjgpLlvozmirzjgZfjgZnjgovjgZ/jgoHjgIHlhajlu7rjga/ku4rlvozjgoLlkITlu7roqK3mpa3ljZTkvJrjga7mtLvouo3jgpLlvLflipvjgavmjqjpgLLjgZnjgovjgqjjg7Pjgrjjg7PjgafjgYLjgorntprjgZHjgovjgIJcXG7jgIDov5Hol6TkvJrplbfjga/jgIHlnLDln5/lu7roqK3mpa3jgavmsYLjgoHjgonjgozjgovlvbnlibLjgavjgaTjgYTjgabjgIHjgIzlronlhajjg7vlronlv4Pjga7norrkv53jgaDjgZHjgafjga/jgarjgY/jgIHkvY/msJHjga7liKnkvr/mgKflkJHkuIrjgoTlnLDln5/ntYzmuIjjga7mtLvmgKfljJbjgarjganlpJrlspDjgavjgo/jgZ/jgovjgI3jgajjgZfjgZ/kuIrjgafjgIHjgIzlronlhajjg7vlronlv4Pjga7norrkv53jgajjgYTjgYbliIfjgorlj6PjgaDjgZHjgafjgarjgY/jgIHlsIbmnaXjga7lnLDln5/lu7roqK3mpa3jga7jgYLjgovjgbnjgY3lp7/jgpLorbDoq5bjgZfjgabjgYTjgYvjgarjgZHjgozjgbDjgarjgonjgarjgYTjgI3jgajmjIfmkZjjgZnjgovjgIJcXG7jgIDlsIbmnaXlsZXmnJvjgafjga/jgIHlvLfjgb/jgafjgYLjgovjgIzlnLDln5/lu7roqK3kvIHmpa3lipvjgI3jgpLnlJ/jgYvjgZfjgZ/mlrDmmYLku6Pjga7mp4vnr4njgpLmiZPjgaHlh7rjgZfjgIHjgqTjg7Pjg5Xjg6nogIHmnL3ljJblr77nrZbjgafjga7lt53kuIrmrrXpmo7jgYvjgonjga7lj4LnlLvjgarjganjgIHnqY3mpbXnmoTjgarkuovmpa3mj5DmoYjjgbjjga7lj5bjgorntYTjgb/jgpLvvJHjgaTjga7mlrnlkJHmgKfjgajjgZfjgabnpLrjgZfjgabjgYTjgovjgIJcXG7jgIDoppbnt5rjga7lhYjjgavjgYLjgovjga7jga/jgIHlnLDln5/lu7roqK3mpa3jga7mjIHntprnmoTjgarnmbrlsZXjgafjgYLjgorjgIHov5Hol6TkvJrplbfjga/jgIzoi6XogIXjgYzlhYjjgpLopovpgJrjgZnjgZPjgajjgYzjgafjgY3jgovnkrDlooPjgaXjgY/jgorjga7ln7rnm6TjgpLjgIHlubTphY3jga7mlrnjgIXjgYzjgaTjgY/jgovjgI3jgajjgYTjgYbogIPjgYjjgYzjg5njg7zjgrnjgavjgarjgaPjgabjgYTjgovjgajoqqzmmI7jgZnjgovjgIJcXG7jgIDjgajjga/jgYTjgYjjgIHjgZXjgb7jgZbjgb7jgarmlr3nrZbjgYznq4vmoYjjgZXjgozjgabjgoLjgIHntYzllrbjga7lgaXlhajljJbjgYzjgarjgZHjgozjgbDlrp/nj77jga/pm6PjgZfjgYTjgILlg43jgY3mlrnmlLnpnanjgoTnlJ/nlKPmgKflkJHkuIrjga7ljp/os4fjgajjgarjgovjgIzlgaXlhajjgarntYzllrbjga7ntpnntprjgI3jga7jgZ/jgoHjgavjga/jgIHjgIzku5XkuovjgYzjgYLjgorjgIHku5XkuovjgpLjgZPjgarjgZnkurrjgYzjgYTjgabjgIHliKnmvaTjgYzlh7rjgovjgajjgYTjgYbku5XntYTjgb/jgaXjgY/jgorjgpLjgZfjgarjgZHjgozjgbDjgarjgonjgarjgYTjgI3jgajlvLfoqr/jgZnjgovjgIJcXG7jgIDlhazlhbHkuovmpa3kuojnrpfjga/kuIvjgZLmraLjgb7jgorjga7lgr7lkJHjgYzopovjgonjgozjgabjgYTjgovjgYzjgIHku4rlvozjgoLlv4XopoHjgarku5Xkuovph4/jgpLnorrkv53jgafjgY3jgovjgYvjganjgYbjgYvjgYzlnLDln5/jgZTjgajjgavnlbDjgarjgovnirbms4HkuIvjgafjgIHjgIzjgrfjgrnjg4bjg6Djgarjganjga7jgrXjg53jg7zjg4jjgYzjgarjgZHjgozjgbDjgafjgY3jgarjgYTpg6jliIbjgoLjgYLjgovjgYzjgIHoh6rjgonku5Xkuovph4/jgpLnorrkv53jgZfjgabjgYTjgY/jgajjgYTjgYblj5bjgorntYTjgb/jgoLogIPjgYjjgabjgYTjgY/lv4XopoHjgYzjgYLjgovjgI3jgajjgIHnqY3mpbXmnpzmlaLjgarjg4Hjg6Pjg6zjg7PjgrjjgpLnlJ/jgY3mrovjgorjga7ph43opoHjgaropoHntKDjgavmjJnjgZLjgovjgIJcXG7jgIDlnLDln5/lu7roqK3mpa3jgYzmlrDmmYLku6PjgpLliIfjgorplovjgY/jgZ/jgoHjgavjga/jgIHlhazlhbHkuovmpa3kuojnrpfjga7mjIHntprnmoTjg7vlronlrprnmoTjgarnorrkv53jgYzph43opoHjgarlvbnlibLjgpLmnpzjgZ/jgZnjgYzjgIHjgIzkuojnrpfjga7phY3liIbjgYzkuIDnlarlpKfjgY3jgaroqrLpoYzjgavjgarjgovjgI3jgajjgZfjgIHlnLDln5/lu7roqK3mpa3jgIHkuK3lsI/kvIHmpa3lkJHjgZHjga7kuojnrpfnorrkv53jgavlkJHjgZHjgZ/mtLvli5XjgpLlvJXjgY3ntprjgY3lsZXplovjgZnjgovjgIJcXG7jgIDlg43jgY3mlrnmlLnpnanjgafjga/jgIHkvJrlk6HjgYznj77ooYzjga7kvJHml6Xlrp/nuL7jgpLvvJHml6XlopfjgoTjgZnjgIzkvJHml6XmnIjvvJHvvIvvvIjjg4Tjgq3jgqTjg4Hjg5fjg6njgrnvvInjgI3pgYvli5XjgpLlsZXplovjgZnjgovjgbvjgYvjgIHjgIzljZjkvqHlvJXjgY3kuIrjgZLliIbjgqLjg4Pjg5flrqPoqIDjgI3jgavln7rjgaXjgY3jgIHlhazlhbHlt6XkuovoqK3oqIjlirTli5nljZjkvqHjga7mlLnlrprliIbjgpLkuIvoq4vjgavlj43mmKDjgZnjgovjgZ/jgoHjga7lj5bjgorntYTjgb/jgoLlvrnlupXjgZnjgovjgIJcXG7jgIDlu7roqK3jgq3jg6Pjg6rjgqLjgqLjg4Pjg5fjgrfjgrnjg4bjg6Djgavlr77jgZfjgabjga/jgIHjgIzmioDog73ogIXjga7kv53mnInos4fmoLzjgoTlsLHlirTlrp/nuL7jgpLok4TnqY3jgZnjgovjgZPjgajjgaflh6bpgYfjga7mlLnlloTjgIHmioDog73jga7noJTjgZXjgpPjgavjgaTjgarjgYzjgovjgILlg43jgY3mlrnmlLnpnanjgIHkuK3plbfmnJ/nmoTjgarmi4XjgYTmiYvnorrkv53jga7pnaLjgafjgIHoia/jgYTku5XntYTjgb/jgaDjgajmgJ3jgYbjgI3jgajmnJ/lvoXjgpLlr4TjgZvjgovjgIJcXG7jgIDmlrDjgZ/jgarkuIDmranjgpLouI/jgb/lh7rjgZfjgZ/lhajlu7rjga7ku4rlvozjga7lvbnlibLjgajjgZfjgabov5Hol6TkvJrplbfjga/jgIHlkITlu7rljZTjgajkvJrlk6HkvIHmpa3jgYzmtLvli5XjgZfjgoTjgZnjgYTnkrDlooPjgaXjgY/jgorjgoTjgIHlnLDln5/lu7roqK3mpa3jga7prYXlipvnmbrkv6HjgarjganjgpLmjJnjgZLjgovjgILjgIzlkITlu7rljZTljZjni6zjgafjga/lj5bjgorntYTjgb/jgYzpm6PjgZfjgYTjg4bjg7zjg57jgoToqrLpoYzjgoLjgIHlhajlu7rjgafpm4bntITjgZnjgozjgbDlhajlm73jga7lo7DjgajjgZfjgabnmbrkv6HjgZnjgovjgZPjgajjgYzjgafjgY3jgovjgI3jgajjgZfjgIHlvJXjgY3ntprjgY3jgIzlnLDln5/lu7roqK3mpa3jga7lnLDkvY3lkJHkuIrjgajnmbrlsZXjgavlr4TkuI7jgZfntprjgZHjgabjgYTjgY3jgZ/jgYTjgI3jgajlipvjgpLovrzjgoHjgovjgIInLFxyXG4gICAgICAgIG1vamlPYmpBcnk6IFtdLFxyXG4gICAgICAgIGltYWdlOiAnJyxcclxuXHJcbiAgICAgICAgc2VsZWN0OiAnJyxcclxuICAgIH0sXHJcbiAgICBcclxuXSwgYWN0aW9uKSA9PiB7XHJcbiAgICBsZXQgbGlzdHM7XHJcbiAgICBsZXQgc296YWk7XHJcblxyXG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xyXG4gICAgY2FzZSBTQUdBX1RPT0xCT1hTT1pBSV9TT1pBSV9TRUxFQ1Q6XHJcbiAgICAgICAgbGlzdHMgPSBzdGF0ZS5zbGljZSgpO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3RzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxpc3RzW2ldLnNlbGVjdCA9ICcnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAobGlzdHNbaV0uaWQgPT0gYWN0aW9uLnBheWxvYWQuaWQpIHtcclxuICAgICAgICAgICAgICAgIGxpc3RzW2ldLnNlbGVjdCA9ICdvbic7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGxpc3RzO1xyXG5cclxuICAgIGNhc2UgU0FHQV9UT09MQk9YU09aQUlfU09aQUlfVE9HR0xFOlxyXG4gICAgICAgIGxpc3RzID0gc3RhdGUuc2xpY2UoKTtcclxuXHJcbiAgICAgICAgbGV0IGluZGV4O1xyXG4gICAgICAgIGxldCBzZWxlY3Q7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGxpc3RzW2ldLmlkID09IGFjdGlvbi5wYXlsb2FkLmlkKSB7XHJcbiAgICAgICAgICAgICAgICBpbmRleCA9IGk7XHJcbiAgICAgICAgICAgICAgICBzZWxlY3QgPSBsaXN0c1tpXS5zZWxlY3Q7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3RzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxpc3RzW2ldLnNlbGVjdCA9ICcnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2VsZWN0ID0gKHNlbGVjdCA9PSAnb24nKSA/ICcnIDogJ29uJztcclxuXHJcbiAgICAgICAgbGlzdHNbaW5kZXhdLnNlbGVjdCA9IHNlbGVjdDtcclxuXHJcbiAgICAgICAgcmV0dXJuIGxpc3RzO1xyXG5cclxuICAgIGNhc2UgU0FHQV9UT09MQk9YU09aQUlfU09aQUlfVVBEQVRFOlxyXG4gICAgICAgIGxpc3RzID0gc3RhdGUuc2xpY2UoKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAvLyBsaXN0c1tpXS5zZWxlY3QgPSAnJztcclxuXHJcbiAgICAgICAgICAgIGlmIChsaXN0c1tpXS5pZCA9PSBhY3Rpb24ucGF5bG9hZC5zb3phaS5pZCkge1xyXG4gICAgICAgICAgICAgICAgbGlzdHNbaV0udHlwZSA9IGFjdGlvbi5wYXlsb2FkLnNvemFpLnR5cGU7XHJcbiAgICAgICAgICAgICAgICBsaXN0c1tpXS50ZXh0ID0gYWN0aW9uLnBheWxvYWQuc296YWkudGV4dDtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyDmloflrZfjgqrjg5bjgrjjgqfjgq/jg4jphY3liJfjgpLkvZzmiJDjgZfjgabjgrvjg4Pjg4jjgZnjgotcclxuICAgICAgICAgICAgICAgIGxpc3RzW2ldLm1vamlPYmpBcnkgPSBUZXh0LmNyZWF0ZU1vamlPYmpBcnkoYWN0aW9uLnBheWxvYWQuc296YWkudGV4dCk7XHJcblxyXG4gICAgICAgICAgICAgICAgbGlzdHNbaV0uaW1hZ2UgPSBhY3Rpb24ucGF5bG9hZC5zb3phaS5pbWFnZTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy8gbGlzdHNbaV0uc2VsZWN0ID0gJ29uJztcclxuXHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGxpc3RzO1xyXG5cclxuICAgIGNhc2UgU0FHQV9UT09MQk9YU09aQUlfU09aQUlfREVMRVRFOlxyXG4gICAgICAgIGxpc3RzID0gc3RhdGUuc2xpY2UoKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBsaXN0c1tpXS5zZWxlY3QgPSAnJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGxpc3RzW2ldLmlkID09IGFjdGlvbi5wYXlsb2FkLmlkKSB7XHJcbiAgICAgICAgICAgICAgICBsaXN0cy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGxpc3RzO1xyXG5cclxuICAgIGNhc2UgU0FHQV9UT09MQk9YU09aQUlfU09aQUlfQ1JFQVRFOlxyXG4gICAgICAgIGxpc3RzID0gc3RhdGUuc2xpY2UoKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBsaXN0c1tpXS5zZWxlY3QgPSAnJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNvemFpID0ge1xyXG4gICAgICAgICAgICBpZDogYWN0aW9uLnBheWxvYWQuaWQsXHJcbiAgICAgICAgICAgIHR5cGU6IGFjdGlvbi5wYXlsb2FkLnR5cGUsXHJcbiAgICAgICAgICAgIHRleHQ6IGFjdGlvbi5wYXlsb2FkLnRleHQsXHJcblxyXG4gICAgICAgICAgICAvLyDmloflrZfjgqrjg5bjgrjjgqfjgq/jg4jphY3liJfjgpLkvZzmiJDjgZfjgabjgrvjg4Pjg4jjgZnjgotcclxuICAgICAgICAgICAgbW9qaU9iakFyeTogVGV4dC5jcmVhdGVNb2ppT2JqQXJ5KGFjdGlvbi5wYXlsb2FkLnRleHQpLFxyXG5cclxuICAgICAgICAgICAgaW1hZ2U6IGFjdGlvbi5wYXlsb2FkLmltYWdlLFxyXG5cclxuICAgICAgICAgICAgc2VsZWN0OiAnb24nLFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGxpc3RzLnB1c2goc296YWkpO1xyXG5cclxuICAgICAgICByZXR1cm4gbGlzdHM7XHJcblxyXG4gICAgZGVmYXVsdDpcclxuICAgICAgICByZXR1cm4gc3RhdGU7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgWmFoeW8gfSBmcm9tICcuLi9saWJzL3phaHlvLmpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBTQUdBX1RPT0xCT1hfTU9WRUVORCxcclxufSBmcm9tICcuLi9hY3Rpb25zX3NhZ2EvdG9vbGJveC5qcyc7XHJcblxyXG5pbXBvcnQge1xyXG4gICAgU0FHQV9TRUxFQ1RCT1hfQk9YX1NFTEVDVCxcclxuICAgIFNBR0FfU0VMRUNUQk9YX0JPWF9OT05TRUxFQ1QsXHJcbn0gZnJvbSAnLi4vYWN0aW9uc19zYWdhL3NlbGVjdGJveC5qcyc7XHJcblxyXG4vLyA9PT09PT09PT09PT09PT09PT09PVxyXG4vLyDjg4Tjg7zjg6vjg5zjg4Pjgq/jgrnjg4fjg7zjgr9cclxuLy8gICAgICBbXHJcbi8vICAgICAgICAgIHtcclxuLy8gICAgICAgICAgICAgIGlkOiBJRCxcclxuLy8gICAgICAgICAgICAgIHR5cGU6ICdzY2FsZSc65ouh5aSn57iu5bCP44Oc44OD44Kv44K5XHJcbi8vICAgICAgICAgICAgICB4OiDjg4Tjg7zjg6vjg5zjg4Pjgq/jgrnjga7lt6bkuIrluqfmqJkgWCAocHgpXHJcbi8vICAgICAgICAgICAgICB5OiDjg4Tjg7zjg6vjg5zjg4Pjgq/jgrnjga7lt6bkuIrluqfmqJkgWSAocHgpXHJcbi8vICAgICAgICAgICAgICB3OiDjg4Tjg7zjg6vjg5zjg4Pjgq/jgrnjga7luYXvvIhweClcclxuLy8gICAgICAgICAgICAgIGg6IOODhOODvOODq+ODnOODg+OCr+OCueOBrumrmOOBlSAocHgpXHJcbi8vICAgICAgICAgICAgICB2aWV3OiAndHJ1ZSc66KGo56S6ICdmYWxzZSc6IOmdnuihqOekulxyXG4vLyAgICAgICAgICB9XHJcbi8vICAgICAgXVxyXG4vLyA9PT09PT09PT09PT09PT09PT09PVxyXG5leHBvcnQgY29uc3QgdG9vbGJveHMgPSAoc3RhdGUgPSBbXHJcbiAgICB7XHJcbiAgICAgICAgaWQ6ICd0b29sYm94MDAxJyxcclxuICAgICAgICB0eXBlOiAnc2NhbGUnLFxyXG4gICAgICAgIHg6IDAsXHJcbiAgICAgICAgeTogMCxcclxuICAgICAgICB3OiAyMDAsXHJcbiAgICAgICAgaDogNDAsXHJcbiAgICAgICAgdmlldzogJ3RydWUnLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBpZDogJ3Rvb2xib3gwMDInLFxyXG4gICAgICAgIHR5cGU6ICdib3hkYXRhJyxcclxuICAgICAgICB4OiAwLFxyXG4gICAgICAgIHk6IDAsXHJcbiAgICAgICAgdzogMjAwLFxyXG4gICAgICAgIGg6IDE0MCxcclxuICAgICAgICB2aWV3OiAndHJ1ZScsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIGlkOiAndG9vbGJveDAwMycsXHJcbiAgICAgICAgdHlwZTogJ3RleHRkYXRhJyxcclxuICAgICAgICB4OiAwLFxyXG4gICAgICAgIHk6IDAsXHJcbiAgICAgICAgdzogMjAwLFxyXG4gICAgICAgIGg6IDE2MCxcclxuICAgICAgICB2aWV3OiAndHJ1ZScsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIGlkOiAndG9vbGJveDAwNCcsXHJcbiAgICAgICAgdHlwZTogJ3NvemFpJyxcclxuICAgICAgICB4OiAwLFxyXG4gICAgICAgIHk6IDAsXHJcbiAgICAgICAgdzogMjAwLFxyXG4gICAgICAgIGg6IDQwMCxcclxuICAgICAgICB2aWV3OiAndHJ1ZScsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIGlkOiAndG9vbGJveDAwNScsXHJcbiAgICAgICAgdHlwZTogJ2xpbmsnLFxyXG4gICAgICAgIHg6IDAsXHJcbiAgICAgICAgeTogMCxcclxuICAgICAgICB3OiAyMDAsXHJcbiAgICAgICAgaDogNDcwLFxyXG4gICAgICAgIHZpZXc6ICd0cnVlJyxcclxuICAgIH0sXHJcbl0sIGFjdGlvbikgPT4ge1xyXG4gICAgbGV0IHRvb2xib3hzO1xyXG5cclxuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcclxuICAgIGNhc2UgU0FHQV9UT09MQk9YX01PVkVFTkQ6XHJcbiAgICAgICAgdG9vbGJveHMgPSBzdGF0ZS5zbGljZSgpO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRvb2xib3hzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmICh0b29sYm94c1tpXS5pZCA9PSBhY3Rpb24ucGF5bG9hZC5pZCkge1xyXG4gICAgICAgICAgICAgICAgdG9vbGJveHNbaV0ueCA9IGFjdGlvbi5wYXlsb2FkLng7XHJcbiAgICAgICAgICAgICAgICB0b29sYm94c1tpXS55ID0gYWN0aW9uLnBheWxvYWQueTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdG9vbGJveHM7XHJcblxyXG4gICAgY2FzZSBTQUdBX1NFTEVDVEJPWF9CT1hfU0VMRUNUOiAgIC8vIOODnOODg+OCr+OCueOCkumBuOaKnuOBl+OBn+WgtOWQiFxyXG4gICAgICAgIHRvb2xib3hzID0gc3RhdGUuc2xpY2UoKTtcclxuXHJcbiAgICAgICAgY29uc29sZS5sb2coYWN0aW9uKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRvb2xib3hzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmICh0b29sYm94c1tpXS50eXBlID09ICd0ZXh0ZGF0YScgJiYgYWN0aW9uLnBheWxvYWQudHlwZSA9PSAndGV4dCcpIHtcclxuICAgICAgICAgICAgICAgIC8vIHRvb2xib3hzW2ldLnZpZXcgPSAndHJ1ZSc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRvb2xib3hzO1xyXG5cclxuICAgIGNhc2UgU0FHQV9TRUxFQ1RCT1hfQk9YX05PTlNFTEVDVDogICAvLyDjg5zjg4Pjgq/jgrnjga7pgbjmip7jgpLop6PpmaTjgZfjgZ/loLTlkIhcclxuICAgICAgICB0b29sYm94cyA9IHN0YXRlLnNsaWNlKCk7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdG9vbGJveHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKHRvb2xib3hzW2ldLnR5cGUgPT0gJ3RleHRkYXRhJykge1xyXG4gICAgICAgICAgICAgICAgLy8gdG9vbGJveHNbaV0udmlldyA9ICdmYWxzZSc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRvb2xib3hzO1xyXG5cclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgcmV0dXJuIHN0YXRlO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7XHJcbiAgICBTQUdBX1NFTEVDVEJPWF9CT1hfTk9OU0VMRUNULFxyXG4gICAgU0FHQV9TRUxFQ1RCT1hfQk9YX1NFTEVDVCxcclxufSBmcm9tICcuLi9hY3Rpb25zX3NhZ2Evc2VsZWN0Ym94LmpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBTQUdBX1RPT0xCT1hCT1hEQVRBX0JPWERBVEFfVVBEQVRFLFxyXG4gICAgU0FHQV9UT09MQk9YQk9YREFUQV9CT1hEQVRBX0RFTEVURSxcclxuICAgIFNBR0FfVE9PTEJPWEJPWERBVEFfQk9YREFUQV9DUkVBVEUsXHJcbn0gZnJvbSAnLi4vYWN0aW9uc19zYWdhL3Rvb2xib3hib3hkYXRhLmpzJztcclxuXHJcbi8vID09PT09PT09PT09PT09PT09PT09XHJcbi8vIGJveOODleOCqeODvOOCq+OCueaDheWgsVxyXG4vLyAgICAgIHtcclxuLy8gICAgICAgICAgaWQ6IOODleOCqeODvOOCq+OCueOBleOCjOOBn+ODnOODg+OCr+OCueOBrklE44CB5pyq44OV44Kp44O844Kr44K544GvIG51bGxcclxuLy8gICAgICAgICAgZ3JvdXA6IOODleOCqeODvOOCq+OCueOBleOCjOOBn+ODnOODg+OCr+OCueOBruOCsOODq+ODvOODl+WQjVxyXG4vLyAgICAgICAgICBubzog44OV44Kp44O844Kr44K544GV44KM44Gf44Oc44OD44Kv44K544Gu44Kw44Or44O844OX5YaF44GuTm9cclxuLy8gICAgICB9XHJcbi8vID09PT09PT09PT09PT09PT09PT09XHJcbmV4cG9ydCBjb25zdCBmb2N1c2JveCA9IChzdGF0ZSA9IHtpZDogJycsIGdyb3VwOiAnJywgbm86IDB9LCBhY3Rpb24pID0+IHtcclxuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcclxuICAgIGNhc2UgU0FHQV9TRUxFQ1RCT1hfQk9YX05PTlNFTEVDVDogICAvLyDlhajjgabjga7pgbjmip7jgpLop6PpmaTjgZfjgZ/loLTlkIhcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBpZDogJycsXHJcbiAgICAgICAgICAgIHR5cGU6ICcnLFxyXG4gICAgICAgICAgICBncm91cDogJycsXHJcbiAgICAgICAgICAgIG5vOiAwLFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgY2FzZSBTQUdBX1NFTEVDVEJPWF9CT1hfU0VMRUNUOiAgIC8vIOODnOODg+OCr+OCueOCkumBuOaKnuOBl+OBn+WgtOWQiFxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGlkOiAgICBhY3Rpb24ucGF5bG9hZC5pZCxcclxuICAgICAgICAgICAgdHlwZTogIGFjdGlvbi5wYXlsb2FkLnR5cGUsXHJcbiAgICAgICAgICAgIGdyb3VwOiBhY3Rpb24ucGF5bG9hZC5ncm91cCxcclxuICAgICAgICAgICAgbm86ICAgIGFjdGlvbi5wYXlsb2FkLm5vLFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgY2FzZSBTQUdBX1RPT0xCT1hCT1hEQVRBX0JPWERBVEFfVVBEQVRFOiAgICAvLyDjg5zjg4Pjgq/jgrnmg4XloLHjgpLmm7TmlrDjgZfjgZ/loLTlkIhcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBpZDogICAgYWN0aW9uLnBheWxvYWQuYm94LmlkLFxyXG4gICAgICAgICAgICB0eXBlOiAgYWN0aW9uLnBheWxvYWQuYm94LnR5cGUsXHJcbiAgICAgICAgICAgIGdyb3VwOiBhY3Rpb24ucGF5bG9hZC5ib3guZ3JvdXAsXHJcbiAgICAgICAgICAgIG5vOiAgICBhY3Rpb24ucGF5bG9hZC5ib3gubm8sXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICBjYXNlIFNBR0FfVE9PTEJPWEJPWERBVEFfQk9YREFUQV9ERUxFVEU6ICAgIC8vIOODnOODg+OCr+OCueOCkuWJiumZpOOBl+OBn+WgtOWQiFxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGlkOiAnJyxcclxuICAgICAgICAgICAgdHlwZTogJycsXHJcbiAgICAgICAgICAgIGdyb3VwOiAnJyxcclxuICAgICAgICAgICAgbm86IDAsXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICBjYXNlIFNBR0FfVE9PTEJPWEJPWERBVEFfQk9YREFUQV9DUkVBVEU6ICAgIC8vIOODnOODg+OCr+OCueOCkuaWsOimj+S9nOaIkOOBl+OBn+WgtOWQiFxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGlkOiAgICBhY3Rpb24ucGF5bG9hZC5ib3guaWQsXHJcbiAgICAgICAgICAgIHR5cGU6ICBhY3Rpb24ucGF5bG9hZC5ib3gudHlwZSxcclxuICAgICAgICAgICAgZ3JvdXA6IGFjdGlvbi5wYXlsb2FkLmJveC5ncm91cCxcclxuICAgICAgICAgICAgbm86ICAgIGFjdGlvbi5wYXlsb2FkLmJveC5ubyxcclxuICAgICAgICB9O1xyXG5cclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgcmV0dXJuIHN0YXRlO1xyXG4gICAgfVxyXG59XHJcbiIsIi8vXHJcbi8vIOODhuOCreOCueODiOOCsOODquODg+ODieezu1xyXG4vL1xyXG5cclxuZXhwb3J0IGNvbnN0IFRleHRHcmlkID0ge1xyXG4gICAgLy9cclxuICAgIC8vIOODhuOCreOCueODiOOCsOODquODg+ODieOBruS4reW/g+W6p+aomSBb5a2X6Kmw44KB5pa55ZCR5bqn5qiZLCDooYzpgIHjgormlrnlkJHluqfmqJldIOOBrumFjeWIl+OCkui/lOOBmVxyXG4gICAgLy9cclxuICAgIC8vIFtJTl1cclxuICAgIC8vICAgYXJlYXNpemVfajog5a2X6Kmw44KB5pa55ZCR44Gu44Ko44Oq44Ki44K144Kk44K6XHJcbiAgICAvLyAgIGFyZWFzaXplX2c6IOihjOmAgeOCiuaWueWQkeOBruOCqOODquOCouOCteOCpOOCulxyXG4gICAgLy8gICBwYWRkaW5nX2pzOiDlrZfoqbDjgoHmlrnlkJHjga7plovlp4vjg5Hjg4fjgqPjg7PjgrDlgKRcclxuICAgIC8vICAgcGFkZGluZ19qZTog5a2X6Kmw44KB5pa55ZCR44Gu57WC5LqG44OR44OH44Kj44Oz44Kw5YCkXHJcbiAgICAvLyAgIHBhZGRpbmdfZ3M6IOihjOmAgeOCiuaWueWQkeOBrumWi+Wni+ODkeODh+OCo+ODs+OCsOWApFxyXG4gICAgLy8gICBwYWRkaW5nX2dlOiDooYzpgIHjgormlrnlkJHjga7ntYLkuobjg5Hjg4fjgqPjg7PjgrDlgKRcclxuICAgIC8vICAgc2l6ZV9qOiDjg4bjgq3jgrnjg4jjgrDjg6rjg4Pjg4njgrXjgqTjgrrvvIjlrZfoqbDjgoHmlrnlkJHvvIlcclxuICAgIC8vICAgc2l6ZV9nOiDjg4bjgq3jgrnjg4jjgrDjg6rjg4Pjg4njgrXjgqTjgrrvvIjooYzpgIHjgormlrnlkJHvvIlcclxuICAgIC8vICAgZ3lva2FuOiDooYzplpPjgrXjgqTjgrogXHJcbiAgICAvLyBbT1VUXVxyXG4gICAgLy8gICBbXHJcbiAgICAvLyAgICAgICBb5a2X6Kmw44KB5pa55ZCR5bqn5qiZLCDooYzpgIHjgormlrnlkJHluqfmqJldLCAgICA8LS0tIOOCsOODquODg+ODieOBruS4reW/g+W6p+aomVxyXG4gICAgLy8gICAgICAgW+Wtl+ipsOOCgeaWueWQkeW6p+aomSwg6KGM6YCB44KK5pa55ZCR5bqn5qiZXSxcclxuICAgIC8vICAgICAgIC4uLi5cclxuICAgIC8vICAgXSAgICBcclxuICAgIC8vXHJcbiAgICBnZXRUZXh0R3JpZEFyeTogKFxyXG4gICAgICAgIGFyZWFzaXplX2osXHJcbiAgICAgICAgYXJlYXNpemVfZyxcclxuICAgICAgICBwYWRkaW5nX2pzLFxyXG4gICAgICAgIHBhZGRpbmdfamUsXHJcbiAgICAgICAgcGFkZGluZ19ncyxcclxuICAgICAgICBwYWRkaW5nX2dlLFxyXG4gICAgICAgIHNpemVfaixcclxuICAgICAgICBzaXplX2csXHJcbiAgICAgICAgZ3lva2FuXHJcbiAgICApID0+IHtcclxuICAgICAgICBsZXQgZ3JpZGFyeSA9IFtdO1xyXG5cclxuICAgICAgICAvLyDooYzpgIHjgormlrnlkJHjga7mloflrZfjgrDjg6rjg4Pjg4nluqfmqJnphY3liJfjgpLlvpfjgotcclxuICAgICAgICBjb25zdCBneW9va3VyaUFyeSA9IFRleHRHcmlkLmdldEd5b29rdXJpR3JpZEFyeShcclxuICAgICAgICAgICAgYXJlYXNpemVfZywgcGFkZGluZ19ncywgcGFkZGluZ19nZSwgZ3lva2FuLCBzaXplX2dcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICAvLyDlrZfoqbDjgoHmlrnlkJHjga7mloflrZfjgrDjg6rjg4Pjg4nluqfmqJnphY3liJfjgpLlvpfjgotcclxuICAgICAgICBjb25zdCBqaWR1bWVBcnkgPSBUZXh0R3JpZC5nZXRKaWR1bWVHcmlkQXJ5KFxyXG4gICAgICAgICAgICBhcmVhc2l6ZV9qLCBwYWRkaW5nX2pzLCBwYWRkaW5nX2plLCBzaXplX2pcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICAvLyDmloflrZfjgrDjg6rjg4Pjg4njga7kuK3lv4PluqfmqJnphY3liJfjgpLkvZzmiJDjgZnjgotcclxuICAgICAgICBmb3IgKGxldCBnID0gMDsgZyA8IGd5b29rdXJpQXJ5Lmxlbmd0aDsgZysrKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgamlkdW1lQXJ5Lmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICBncmlkYXJ5LnB1c2goW2ppZHVtZUFyeVtqXSwgZ3lvb2t1cmlBcnlbZ11dKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGdyaWRhcnk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vXHJcbiAgICAvLyDjg4bjgq3jgrnjg4jjgrDjg6rjg4Pjg4njga7kuK3lv4PluqfmqJnjga7phY3liJfjgpLov5TjgZnvvIjlrZfoqbDjgoHmlrnlkJHvvIlcclxuICAgIC8vXHJcbiAgICAvLyBbSU5dXHJcbiAgICAvLyAgIGxlbjog44Ko44Oq44Ki44Gu5a2X6Kmw44KB5pa55ZCR44Gu6ZW344GVXHJcbiAgICAvLyAgIHBhZGRpbmdfczog5a2X6Kmw44KB5pa55ZCR44Ko44Oq44Ki44Gu6ZaL5aeL44OR44OH44Kj44Oz44Kw5YCkXHJcbiAgICAvLyAgIHBhZGRpbmdfZTog5a2X6Kmw44KB5pa55ZCR44Ko44Oq44Ki44Gu57WC5LqG44OR44OH44Kj44Oz44Kw5YCkXHJcbiAgICAvLyAgIHNpemU6IOODhuOCreOCueODiOOCteOCpOOCuu+8iOWtl+ipsOOCgeaWueWQke+8iVxyXG4gICAgLy9cclxuICAgIC8vIFtPVVRdXHJcbiAgICAvLyAgIOODhuOCreOCueODiOOCsOODquODg+ODieOBruS4reW/g+W6p+aome+8iOWtl+ipsOOCgeaWueWQkeOBruOBv++8ieOBrumFjeWIl1xyXG4gICAgLy9cclxuICAgIGdldEppZHVtZUdyaWRBcnk6IChsZW4sIHBhZGRpbmdfcywgcGFkZGluZ19lLCBzaXplKSA9PiB7XHJcbiAgICAgICAgY29uc3QgYXJlYXNpemUgPSBsZW4gLSAocGFkZGluZ19zICsgcGFkZGluZ19lKTtcclxuICAgICAgICBjb25zdCBncmlkc3UgPSBNYXRoLmZsb29yKGFyZWFzaXplIC8gc2l6ZSk7XHJcbiAgICAgICAgY29uc3QgYW1hcmkgPSBhcmVhc2l6ZSAlIHNpemU7XHJcbiAgICAgICAgY29uc3QgbWFyZ2luID0gYW1hcmkgLyAoZ3JpZHN1IC0gMSk7XHJcblxyXG4gICAgICAgIGxldCBncmlkYXJ5ID0gW107XHJcbiAgICAgICAgbGV0IHBvaW50ZXIgPSAwO1xyXG4gICAgICAgIHBvaW50ZXIgKz0gcGFkZGluZ19zO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZ3JpZHN1OyBpKyspIHtcclxuICAgICAgICAgICAgZ3JpZGFyeS5wdXNoKHBvaW50ZXIgKyAoc2l6ZSAvIDIpKTtcclxuXHJcbiAgICAgICAgICAgIHBvaW50ZXIgKz0gc2l6ZTtcclxuICAgICAgICAgICAgcG9pbnRlciArPSBtYXJnaW47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZ3JpZGFyeTtcclxuICAgIH0sXHJcblxyXG4gICAgLy9cclxuICAgIC8vIOODhuOCreOCueODiOOCsOODquODg+ODieOBruS4reW/g+W6p+aomeOBrumFjeWIl+OCkui/lOOBme+8iOihjOmAgeOCiuaWueWQke+8iVxyXG4gICAgLy9cclxuICAgIC8vIFtJTl1cclxuICAgIC8vICAgbGVuOiDjgqjjg6rjgqLjga7ooYzpgIHjgormlrnlkJHjga7plbfjgZVcclxuICAgIC8vICAgcGFkZGluZ19zOiDooYzpgIHjgormlrnlkJHjgqjjg6rjgqLjga7plovlp4vjg5Hjg4fjgqPjg7PjgrDlgKRcclxuICAgIC8vICAgcGFkZGluZ19lOiDooYzpgIHjgormlrnlkJHjgqjjg6rjgqLjga7ntYLkuobjg5Hjg4fjgqPjg7PjgrDlgKRcclxuICAgIC8vICAgZ3lva2FuOiDooYzplpPjgrXjgqTjgrpcclxuICAgIC8vICAgc2l6ZTog44OG44Kt44K544OI44K144Kk44K677yI6KGM6YCB44KK5pa55ZCR77yJXHJcbiAgICAvL1xyXG4gICAgLy8gW09VVF1cclxuICAgIC8vICAg44OG44Kt44K544OI44Kw44Oq44OD44OJ44Gu5Lit5b+D5bqn5qiZ77yI6KGM6YCB44KK5pa55ZCR44Gu44G/77yJ44Gu6YWN5YiXXHJcbiAgICAvL1xyXG4gICAgZ2V0R3lvb2t1cmlHcmlkQXJ5OiAobGVuLCBwYWRkaW5nX3MsIHBhZGRpbmdfZSwgZ3lva2FuLCBzaXplKSA9PiB7ICAgIFxyXG4gICAgICAgIGxldCBncmlkYXJ5ID0gW107XHJcbiAgICAgICAgbGV0IHBvaW50ZXIgPSAwO1xyXG4gICAgICAgIHBvaW50ZXIgKz0gcGFkZGluZ19zO1xyXG4gICAgICAgIHdoaWxlICgxKSB7XHJcbiAgICAgICAgICAgIGlmICgocG9pbnRlciArIHNpemUpID4gKGxlbiAtIHBhZGRpbmdfZSkpIHtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBncmlkYXJ5LnB1c2gocG9pbnRlciArIChzaXplIC8gMikpO1xyXG5cclxuICAgICAgICAgICAgcG9pbnRlciArPSAoc2l6ZSArIGd5b2thbik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZ3JpZGFyeTtcclxuICAgIH0sXHJcbn07XHJcbiIsImltcG9ydCB7IFphaHlvIH0gZnJvbSAnLi4vbGlicy96YWh5by5qcyc7XHJcblxyXG5pbXBvcnQgeyBUZXh0R3JpZCB9IGZyb20gJy4uL2xpYnMvdGV4dGdyaWQuanMnO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIFNBR0FfU0VMRUNUQk9YX0VESVRCT1hfTU9WRUVORCxcclxuICAgIFNBR0FfU0VMRUNUQk9YX0VESVRCT1hfQ0hBTkdFU0laRSxcclxufSBmcm9tICcuLi9hY3Rpb25zX3NhZ2Evc2VsZWN0Ym94LmpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBTQUdBX1RPT0xCT1hCT1hEQVRBX0JPWERBVEFfVVBEQVRFLFxyXG4gICAgU0FHQV9UT09MQk9YQk9YREFUQV9CT1hEQVRBX0RFTEVURSxcclxuICAgIFNBR0FfVE9PTEJPWEJPWERBVEFfQk9YREFUQV9DUkVBVEUsXHJcbn0gZnJvbSAnLi4vYWN0aW9uc19zYWdhL3Rvb2xib3hib3hkYXRhLmpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBTQUdBX1RPT0xCT1hURVhUREFUQV9URVhUREFUQV9VUERBVEUsXHJcbn0gZnJvbSAnLi4vYWN0aW9uc19zYWdhL3Rvb2xib3h0ZXh0ZGF0YS5qcyc7XHJcblxyXG5pbXBvcnQge1xyXG4gICAgU0FHQV9UT09MQk9YU09aQUlfU09aQUlfREVMRVRFLFxyXG59IGZyb20gJy4uL2FjdGlvbnNfc2FnYS90b29sYm94c296YWkuanMnO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIFNBR0FfTkFHQVNISVJFU1VMVF9DUkVBVEUsXHJcbiAgICBTQUdBX05BR0FTSElfUkVNT1ZFLFxyXG59IGZyb20gJy4uL2FjdGlvbnNfc2FnYS9uYWdhc2hpLmpzJztcclxuXHJcbi8vID09PT09PT09PT09PT09PT09PT09XHJcbi8vIOODnOODg+OCr+OCueODh+ODvOOCv1xyXG4vLyAgICAgIFtcclxuLy8gICAgICAgICAge1xyXG4vLyAgICAgICAgICAgICAgaWQ6IElEXHJcbi8vICAgICAgICAgICAgICB0eXBlOiAndGV4dCc644OG44Kt44K544OI44Oc44OD44Kv44K5ICdpbWFnZSc655S75YOP44Oc44OD44Kv44K5XHJcbi8vICAgICAgICAgICAgICB4MTog44Oc44OD44Kv44K544Gu5Y+z5LiK5bqn5qiZIFjvvIjlj7PkuIrln7rngrnvvIlcclxuLy8gICAgICAgICAgICAgIHkxOiDjg5zjg4Pjgq/jgrnjga7lj7PkuIrluqfmqJkgWe+8iOWPs+S4iuWfuueCue+8iVxyXG4vLyAgICAgICAgICAgICAgeDI6IOODnOODg+OCr+OCueOBruW3puS4i+W6p+aomSBY77yI5Y+z5LiK5Z+654K577yJXHJcbi8vICAgICAgICAgICAgICB5Mjog44Oc44OD44Kv44K544Gu5bem5LiL5bqn5qiZIFnvvIjlj7PkuIrln7rngrnvvIlcclxuLy8gICAgICAgICAgICAgIGdyb3VwOiDjgrDjg6vjg7zjg5flkI1cclxuLy8gICAgICAgICAgICAgIG5vOiDjgrDjg6vjg7zjg5flhoXjga7nlarlj7dcclxuLy9cclxuLy8gICAgICAgICAgICAgIHRleHQ6IHtcclxuLy8gICAgICAgICAgICAgICAgICBrdW1paG9rbzogJ3RhdGUnOue4piAneW9rbyc65qiqXHJcbi8vICAgICAgICAgICAgICAgICAgcGFkZGluZ19qczog44OR44OH44Kj44Oz44Kw5YCk77yI5a2X6Kmw5pa55ZCRIOmWi+Wni++8iVxyXG4vLyAgICAgICAgICAgICAgICAgIHBhZGRpbmdfamU6IOODkeODh+OCo+ODs+OCsOWcsO+8iOWtl+ipsOaWueWQkSDntYLkuobvvIlcclxuLy8gICAgICAgICAgICAgICAgICBwYWRkaW5nX2dzOiDjg5Hjg4fjgqPjg7PjgrDlgKTvvIjooYzpgIHmlrnlkJEg6ZaL5aeL77yJXHJcbi8vICAgICAgICAgICAgICAgICAgcGFkZGluZ19nZTog44OR44OH44Kj44Oz44Kw5YCk77yI6KGM6YCB5pa55ZCRIOe1guS6hu+8iVxyXG4vLyAgICAgICAgICAgICAgICAgIHNpemVfajog5paH5a2X44K144Kk44K677yI5a2X6Kmw5pa55ZCR77yJXHJcbi8vICAgICAgICAgICAgICAgICAgc2l6ZV9nOiDmloflrZfjgrXjgqTjgrrvvIjooYzpgIHmlrnlkJHvvIlcclxuLy8gICAgICAgICAgICAgICAgICBneW9rYW46IOihjOmWk+OCteOCpOOCuiAgICBcclxuLy8gICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgICAgIHRleHRncmlkOiBbW3gseV0uLi5dIOaWh+Wtl+OCsOODquODg+ODieS4reW/g+W6p+aomemFjeWIl1xyXG4vLyAgICAgICAgICAgICAgdGV4dFJlc3VsdDogW1xyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9qaTogJ+OBgicgICDmloflrZdcclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZV9qOiDmloflrZfjgrXjgqTjgrrvvIgwOuODh+ODleOCqeODq+ODiOOCteOCpOOCuu+8iVxyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplX2c6IOaWh+Wtl+OCteOCpOOCuu+8iDA644OH44OV44Kp44Or44OI44K144Kk44K677yJXHJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGo6IOS4reW/g+W6p+aome+8iOWtl+ipsOaWueWQke+8iVxyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnOiDkuK3lv4PluqfmqJnvvIjooYzpgIHmlrnlkJHvvIlcclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLi4uLlxyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgXVxyXG4vLyAgICAgICAgICB9XHJcbi8vICAgICAgXVxyXG4vLyA9PT09PT09PT09PT09PT09PT09PVxyXG5leHBvcnQgY29uc3QgYm94cyA9IChzdGF0ZSA9IFtcclxuICAgIHtcclxuICAgICAgICBpZDogJ2JveDEnLFxyXG4gICAgICAgIHR5cGU6ICd0ZXh0JyxcclxuICAgICAgICBncm91cDogJ+OCsOODq+ODvOODl0EnLFxyXG4gICAgICAgIG5vOiAxLFxyXG4gICAgICAgIHgxOiA0MDAsXHJcbiAgICAgICAgeTE6IDEwMCxcclxuICAgICAgICB4MjogNzAwLFxyXG4gICAgICAgIHkyOiAzMDAsXHJcblxyXG4gICAgICAgIHRleHQ6IHtcclxuICAgICAgICAgICAga3VtaWhva286ICd0YXRlJyxcclxuICAgICAgICAgICAgcGFkZGluZ19qczogMTAsXHJcbiAgICAgICAgICAgIHBhZGRpbmdfamU6IDEwLFxyXG4gICAgICAgICAgICBwYWRkaW5nX2dzOiAxMCxcclxuICAgICAgICAgICAgcGFkZGluZ19nZTogMTAsXHJcbiAgICAgICAgICAgIHNpemVfajogMjAsXHJcbiAgICAgICAgICAgIHNpemVfZzogMjAsXHJcbiAgICAgICAgICAgIGd5b2thbjogNSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHRleHRncmlkOiBbXSxcclxuICAgICAgICB0ZXh0UmVzdWx0OiBbXSxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgaWQ6ICdib3gyJyxcclxuICAgICAgICB0eXBlOiAndGV4dCcsXHJcbiAgICAgICAgZ3JvdXA6ICfjgrDjg6vjg7zjg5dBJyxcclxuICAgICAgICBubzogMixcclxuICAgICAgICB4MTogNDAwLFxyXG4gICAgICAgIHkxOiAzNTAsXHJcbiAgICAgICAgeDI6IDcwMCxcclxuICAgICAgICB5MjogNTUwLFxyXG5cclxuICAgICAgICB0ZXh0OiB7XHJcbiAgICAgICAgICAgIGt1bWlob2tvOiAndGF0ZScsXHJcbiAgICAgICAgICAgIHBhZGRpbmdfanM6IDEwLFxyXG4gICAgICAgICAgICBwYWRkaW5nX2plOiAxMCxcclxuICAgICAgICAgICAgcGFkZGluZ19nczogMTAsXHJcbiAgICAgICAgICAgIHBhZGRpbmdfZ2U6IDEwLFxyXG4gICAgICAgICAgICBzaXplX2o6IDIwLFxyXG4gICAgICAgICAgICBzaXplX2c6IDIwLFxyXG4gICAgICAgICAgICBneW9rYW46IDUsXHJcbiAgICAgICAgfSxcclxuICAgICAgICB0ZXh0Z3JpZDogW10sXHJcbiAgICAgICAgdGV4dFJlc3VsdDogW10sXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIGlkOiAnYm94MycsXHJcbiAgICAgICAgdHlwZTogJ3RleHQnLFxyXG4gICAgICAgIGdyb3VwOiAn44Kw44Or44O844OXQScsXHJcbiAgICAgICAgbm86IDMsXHJcbiAgICAgICAgeDE6IDQwMCxcclxuICAgICAgICB5MTogNjAwLFxyXG4gICAgICAgIHgyOiA3MDAsXHJcbiAgICAgICAgeTI6IDgwMCxcclxuXHJcbiAgICAgICAgdGV4dDoge1xyXG4gICAgICAgICAgICBrdW1paG9rbzogJ3RhdGUnLFxyXG4gICAgICAgICAgICBwYWRkaW5nX2pzOiAxMCxcclxuICAgICAgICAgICAgcGFkZGluZ19qZTogMTAsXHJcbiAgICAgICAgICAgIHBhZGRpbmdfZ3M6IDEwLFxyXG4gICAgICAgICAgICBwYWRkaW5nX2dlOiAxMCxcclxuICAgICAgICAgICAgc2l6ZV9qOiAyMCxcclxuICAgICAgICAgICAgc2l6ZV9nOiAyMCxcclxuICAgICAgICAgICAgZ3lva2FuOiA1LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdGV4dGdyaWQ6IFtdLFxyXG4gICAgICAgIHRleHRSZXN1bHQ6IFtdLFxyXG4gICAgfSxcclxuICAgIFxyXG5dLCBhY3Rpb24pID0+IHtcclxuICAgIGxldCBib3hzO1xyXG4gICAgbGV0IGFyZWFzaXplX2osIGFyZWFzaXplX2c7XHJcblxyXG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xyXG4gICAgY2FzZSBTQUdBX1NFTEVDVEJPWF9FRElUQk9YX01PVkVFTkQ6XHJcbiAgICAgICAgYm94cyA9IHN0YXRlLnNsaWNlKCk7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYm94cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoYm94c1tpXS5pZCA9PSBhY3Rpb24ucGF5bG9hZC5pZCkge1xyXG4gICAgICAgICAgICAgICAgYm94c1tpXS54MSA9IGFjdGlvbi5wYXlsb2FkLngxO1xyXG4gICAgICAgICAgICAgICAgYm94c1tpXS55MSA9IGFjdGlvbi5wYXlsb2FkLnkxO1xyXG4gICAgICAgICAgICAgICAgYm94c1tpXS54MiA9IGFjdGlvbi5wYXlsb2FkLngyO1xyXG4gICAgICAgICAgICAgICAgYm94c1tpXS55MiA9IGFjdGlvbi5wYXlsb2FkLnkyO1xyXG5cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gYm94cztcclxuXHJcbiAgICBjYXNlIFNBR0FfU0VMRUNUQk9YX0VESVRCT1hfQ0hBTkdFU0laRTpcclxuICAgICAgICBib3hzID0gc3RhdGUuc2xpY2UoKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBib3hzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChib3hzW2ldLmlkID09IGFjdGlvbi5wYXlsb2FkLmlkKSB7XHJcbiAgICAgICAgICAgICAgICBib3hzW2ldLngxID0gYWN0aW9uLnBheWxvYWQueDE7XHJcbiAgICAgICAgICAgICAgICBib3hzW2ldLnkxID0gYWN0aW9uLnBheWxvYWQueTE7XHJcbiAgICAgICAgICAgICAgICBib3hzW2ldLngyID0gYWN0aW9uLnBheWxvYWQueDI7XHJcbiAgICAgICAgICAgICAgICBib3hzW2ldLnkyID0gYWN0aW9uLnBheWxvYWQueTI7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8g44OG44Kt44K544OI44Kw44Oq44OD44OJXHJcbiAgICAgICAgICAgICAgICBpZiAoYm94c1tpXS50ZXh0Lmt1bWlob2tvID09ICd0YXRlJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGFyZWFzaXplX2ogPSBib3hzW2ldLnkyIC0gYm94c1tpXS55MTtcclxuICAgICAgICAgICAgICAgICAgICBhcmVhc2l6ZV9nID0gYm94c1tpXS54MiAtIGJveHNbaV0ueDE7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGFyZWFzaXplX2ogPSBib3hzW2ldLngyIC0gYm94c1tpXS54MTtcclxuICAgICAgICAgICAgICAgICAgICBhcmVhc2l6ZV9nID0gYm94c1tpXS55MiAtIGJveHNbaV0ueTE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ZXh0Z3JpZCA9IFRleHRHcmlkLmdldFRleHRHcmlkQXJ5KFxyXG4gICAgICAgICAgICAgICAgICAgIGFyZWFzaXplX2osICAvLyDjgqjjg6rjgqLjgrXjgqTjgrrvvIjlrZfoqbDjgoHmlrnlkJHvvIlcclxuICAgICAgICAgICAgICAgICAgICBhcmVhc2l6ZV9nLCAgLy8g44Ko44Oq44Ki44K144Kk44K677yI6KGM6YCB44KK5pa55ZCR77yJXHJcbiAgICAgICAgICAgICAgICAgICAgYm94c1tpXS50ZXh0LnBhZGRpbmdfanMsICAvLyDjg5Hjg4fjgqPjg7PjgrDlgKTvvIjlrZfoqbDjgoHmlrnlkJEg6ZaL5aeL77yJXHJcbiAgICAgICAgICAgICAgICAgICAgYm94c1tpXS50ZXh0LnBhZGRpbmdfamUsICAvLyDjg5Hjg4fjgqPjg7PjgrDlgKTvvIjlrZfoqbDjgoHmlrnlkJEg57WC5LqG77yJXHJcbiAgICAgICAgICAgICAgICAgICAgYm94c1tpXS50ZXh0LnBhZGRpbmdfZ3MsICAvLyDjg5Hjg4fjgqPjg7PjgrDlgKTvvIjooYzpgIHjgormlrnlkJEg6ZaL5aeL77yJXHJcbiAgICAgICAgICAgICAgICAgICAgYm94c1tpXS50ZXh0LnBhZGRpbmdfZ2UsICAvLyDjg5Hjg4fjgqPjg7PjgrDlgKTvvIjooYzpgIHjgormlrnlkJEg57WC5LqG77yJXHJcbiAgICAgICAgICAgICAgICAgICAgYm94c1tpXS50ZXh0LnNpemVfaiwgIC8vIOODhuOCreOCueODiOOCteOCpOOCuu+8iOWtl+ipsOOCgeaWueWQke+8iVxyXG4gICAgICAgICAgICAgICAgICAgIGJveHNbaV0udGV4dC5zaXplX2csICAvLyDjg4bjgq3jgrnjg4jjgrXjgqTjgrrvvIjooYzpgIHjgormlrnlkJHvvIlcclxuICAgICAgICAgICAgICAgICAgICBib3hzW2ldLnRleHQuZ3lva2FuICAvLyDooYzplpNcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICBib3hzW2ldLnRleHRncmlkID0gdGV4dGdyaWQ7XHJcblxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBib3hzO1xyXG5cclxuICAgIGNhc2UgU0FHQV9UT09MQk9YQk9YREFUQV9CT1hEQVRBX1VQREFURTpcclxuICAgICAgICBib3hzID0gc3RhdGUuc2xpY2UoKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBib3hzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChib3hzW2ldLmlkID09IGFjdGlvbi5wYXlsb2FkLmJveC5pZCkge1xyXG4gICAgICAgICAgICAgICAgYm94c1tpXS5ncm91cCA9IGFjdGlvbi5wYXlsb2FkLmJveC5ncm91cDtcclxuICAgICAgICAgICAgICAgIGJveHNbaV0ubm8gPSBhY3Rpb24ucGF5bG9hZC5ib3gubm87XHJcblxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBib3hzO1xyXG5cclxuICAgIGNhc2UgU0FHQV9UT09MQk9YVEVYVERBVEFfVEVYVERBVEFfVVBEQVRFOlxyXG4gICAgICAgIGJveHMgPSBzdGF0ZS5zbGljZSgpO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJveHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGJveHNbaV0uaWQgPT0gYWN0aW9uLnBheWxvYWQuYm94LmlkKSB7XHJcbiAgICAgICAgICAgICAgICBib3hzW2ldLnRleHQucGFkZGluZ19qcyA9IGFjdGlvbi5wYXlsb2FkLmJveC50ZXh0LnBhZGRpbmdfanM7XHJcbiAgICAgICAgICAgICAgICBib3hzW2ldLnRleHQucGFkZGluZ19qZSA9IGFjdGlvbi5wYXlsb2FkLmJveC50ZXh0LnBhZGRpbmdfamU7XHJcbiAgICAgICAgICAgICAgICBib3hzW2ldLnRleHQucGFkZGluZ19ncyA9IGFjdGlvbi5wYXlsb2FkLmJveC50ZXh0LnBhZGRpbmdfZ3M7XHJcbiAgICAgICAgICAgICAgICBib3hzW2ldLnRleHQucGFkZGluZ19nZSA9IGFjdGlvbi5wYXlsb2FkLmJveC50ZXh0LnBhZGRpbmdfZ2U7XHJcbiAgICAgICAgICAgICAgICBib3hzW2ldLnRleHQua3VtaWhva28gPSBhY3Rpb24ucGF5bG9hZC5ib3gudGV4dC5rdW1paG9rbztcclxuICAgICAgICAgICAgICAgIGJveHNbaV0udGV4dC5neW9rYW4gPSBhY3Rpb24ucGF5bG9hZC5ib3gudGV4dC5neW9rYW47XHJcblxyXG4gICAgICAgICAgICAgICAgLy8g44OG44Kt44K544OI44Kw44Oq44OD44OJXHJcbiAgICAgICAgICAgICAgICBpZiAoYm94c1tpXS50ZXh0Lmt1bWlob2tvID09ICd0YXRlJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGFyZWFzaXplX2ogPSBib3hzW2ldLnkyIC0gYm94c1tpXS55MTtcclxuICAgICAgICAgICAgICAgICAgICBhcmVhc2l6ZV9nID0gYm94c1tpXS54MiAtIGJveHNbaV0ueDE7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGFyZWFzaXplX2ogPSBib3hzW2ldLngyIC0gYm94c1tpXS54MTtcclxuICAgICAgICAgICAgICAgICAgICBhcmVhc2l6ZV9nID0gYm94c1tpXS55MiAtIGJveHNbaV0ueTE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ZXh0Z3JpZCA9IFRleHRHcmlkLmdldFRleHRHcmlkQXJ5KFxyXG4gICAgICAgICAgICAgICAgICAgIGFyZWFzaXplX2osICAvLyDjgqjjg6rjgqLjgrXjgqTjgrrvvIjlrZfoqbDjgoHmlrnlkJHvvIlcclxuICAgICAgICAgICAgICAgICAgICBhcmVhc2l6ZV9nLCAgLy8g44Ko44Oq44Ki44K144Kk44K677yI6KGM6YCB44KK5pa55ZCR77yJXHJcbiAgICAgICAgICAgICAgICAgICAgYm94c1tpXS50ZXh0LnBhZGRpbmdfanMsICAvLyDjg5Hjg4fjgqPjg7PjgrDlgKTvvIjlrZfoqbDjgoHmlrnlkJEg6ZaL5aeL77yJXHJcbiAgICAgICAgICAgICAgICAgICAgYm94c1tpXS50ZXh0LnBhZGRpbmdfamUsICAvLyDjg5Hjg4fjgqPjg7PjgrDlgKTvvIjlrZfoqbDjgoHmlrnlkJEg57WC5LqG77yJXHJcbiAgICAgICAgICAgICAgICAgICAgYm94c1tpXS50ZXh0LnBhZGRpbmdfZ3MsICAvLyDjg5Hjg4fjgqPjg7PjgrDlgKTvvIjooYzpgIHjgormlrnlkJEg6ZaL5aeL77yJXHJcbiAgICAgICAgICAgICAgICAgICAgYm94c1tpXS50ZXh0LnBhZGRpbmdfZ2UsICAvLyDjg5Hjg4fjgqPjg7PjgrDlgKTvvIjooYzpgIHjgormlrnlkJEg57WC5LqG77yJXHJcbiAgICAgICAgICAgICAgICAgICAgYm94c1tpXS50ZXh0LnNpemVfaiwgIC8vIOODhuOCreOCueODiOOCteOCpOOCuu+8iOWtl+ipsOOCgeaWueWQke+8iVxyXG4gICAgICAgICAgICAgICAgICAgIGJveHNbaV0udGV4dC5zaXplX2csICAvLyDjg4bjgq3jgrnjg4jjgrXjgqTjgrrvvIjooYzpgIHjgormlrnlkJHvvIlcclxuICAgICAgICAgICAgICAgICAgICBib3hzW2ldLnRleHQuZ3lva2FuICAvLyDooYzplpNcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICBib3hzW2ldLnRleHRncmlkID0gdGV4dGdyaWQ7XHJcblxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBib3hzO1xyXG5cclxuICAgIGNhc2UgU0FHQV9UT09MQk9YQk9YREFUQV9CT1hEQVRBX0RFTEVURTpcclxuICAgICAgICBib3hzID0gc3RhdGUuc2xpY2UoKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBib3hzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChib3hzW2ldLmlkID09IGFjdGlvbi5wYXlsb2FkLmlkKSB7XHJcbiAgICAgICAgICAgICAgICBib3hzLnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gYm94czsgICAgICAgXHJcblxyXG4gICAgY2FzZSBTQUdBX1RPT0xCT1hCT1hEQVRBX0JPWERBVEFfQ1JFQVRFOlxyXG4gICAgICAgIGJveHMgPSBzdGF0ZS5zbGljZSgpO1xyXG5cclxuICAgICAgICBsZXQgYm94O1xyXG4gICAgICAgIGJveCA9IHtcclxuICAgICAgICAgICAgaWQ6IGFjdGlvbi5wYXlsb2FkLmJveC5pZCxcclxuICAgICAgICAgICAgdHlwZTogYWN0aW9uLnBheWxvYWQuYm94LnR5cGUsXHJcbiAgICAgICAgICAgIHgxOiAxMDAsXHJcbiAgICAgICAgICAgIHkxOiAxMDAsXHJcbiAgICAgICAgICAgIHgyOiAyMDAsXHJcbiAgICAgICAgICAgIHkyOiAyMDAsXHJcbiAgICAgICAgICAgIGdyb3VwOiBhY3Rpb24ucGF5bG9hZC5ib3guZ3JvdXAsXHJcbiAgICAgICAgICAgIG5vOiBhY3Rpb24ucGF5bG9hZC5ib3gubm8sXHJcbiAgICAgICAgICAgIHRleHQ6IHtcclxuICAgICAgICAgICAgICAgIGt1bWlob2tvOiAndGF0ZScsXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX2pzOiAxMCxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdfamU6IDEwLFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ19nczogMTAsXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nX2dlOiAxMCxcclxuICAgICAgICAgICAgICAgIHNpemVfajogMTAsXHJcbiAgICAgICAgICAgICAgICBzaXplX2c6IDEwLFxyXG4gICAgICAgICAgICAgICAgZ3lva2FuOiA1LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIOODhuOCreOCueODiOOCsOODquODg+ODiVxyXG4gICAgICAgIGlmIChib3gudGV4dC5rdW1paG9rbyA9PSAndGF0ZScpIHtcclxuICAgICAgICAgICAgYXJlYXNpemVfaiA9IGJveC55MiAtIGJveC55MTtcclxuICAgICAgICAgICAgYXJlYXNpemVfZyA9IGJveC54MiAtIGJveC54MTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBhcmVhc2l6ZV9qID0gYm94LngyIC0gYm94LngxO1xyXG4gICAgICAgICAgICBhcmVhc2l6ZV9nID0gYm94LnkyIC0gYm94LnkxO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB0ZXh0Z3JpZCA9IFRleHRHcmlkLmdldFRleHRHcmlkQXJ5KFxyXG4gICAgICAgICAgICBhcmVhc2l6ZV9qLCAgLy8g44Ko44Oq44Ki44K144Kk44K677yI5a2X6Kmw44KB5pa55ZCR77yJXHJcbiAgICAgICAgICAgIGFyZWFzaXplX2csICAvLyDjgqjjg6rjgqLjgrXjgqTjgrrvvIjooYzpgIHjgormlrnlkJHvvIlcclxuICAgICAgICAgICAgYm94LnRleHQucGFkZGluZ19qcywgIC8vIOODkeODh+OCo+ODs+OCsOWApO+8iOWtl+ipsOOCgeaWueWQkSDplovlp4vvvIlcclxuICAgICAgICAgICAgYm94LnRleHQucGFkZGluZ19qZSwgIC8vIOODkeODh+OCo+ODs+OCsOWApO+8iOWtl+ipsOOCgeaWueWQkSDntYLkuobvvIlcclxuICAgICAgICAgICAgYm94LnRleHQucGFkZGluZ19ncywgIC8vIOODkeODh+OCo+ODs+OCsOWApO+8iOihjOmAgeOCiuaWueWQkSDplovlp4vvvIlcclxuICAgICAgICAgICAgYm94LnRleHQucGFkZGluZ19nZSwgIC8vIOODkeODh+OCo+ODs+OCsOWApO+8iOihjOmAgeOCiuaWueWQkSDntYLkuobvvIlcclxuICAgICAgICAgICAgYm94LnRleHQuc2l6ZV9qLCAgLy8g44OG44Kt44K544OI44K144Kk44K677yI5a2X6Kmw44KB5pa55ZCR77yJXHJcbiAgICAgICAgICAgIGJveC50ZXh0LnNpemVfZywgIC8vIOODhuOCreOCueODiOOCteOCpOOCuu+8iOihjOmAgeOCiuaWueWQke+8iVxyXG4gICAgICAgICAgICBib3gudGV4dC5neW9rYW4gIC8vIOihjOmWk1xyXG4gICAgICAgICk7XHJcbiAgICAgICAgYm94LnRleHRncmlkID0gdGV4dGdyaWQ7XHJcbiAgICAgICAgYm94LnRleHRSZXN1bHQgPSBbXTtcclxuXHJcbiAgICAgICAgLy8g6L+95Yqg44GZ44KLXHJcbiAgICAgICAgYm94cy5wdXNoKGJveCk7XHJcblxyXG4gICAgICAgIHJldHVybiBib3hzO1xyXG5cclxuICAgIGNhc2UgU0FHQV9OQUdBU0hJUkVTVUxUX0NSRUFURTpcclxuICAgICAgICBib3hzID0gc3RhdGUuc2xpY2UoKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBib3hzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChib3hzW2ldLmlkID09IGFjdGlvbi5wYXlsb2FkLmJveF9pZCkge1xyXG4gICAgICAgICAgICAgICAgYm94c1tpXS50ZXh0UmVzdWx0ID0gYWN0aW9uLnBheWxvYWQubmFnYXNoaVJlc3VsdDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gYm94cztcclxuXHJcbiAgICBjYXNlIFNBR0FfTkFHQVNISV9SRU1PVkU6XHJcbiAgICAgICAgYm94cyA9IHN0YXRlLnNsaWNlKCk7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYm94cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoYm94c1tpXS5ncm91cCA9PSBhY3Rpb24ucGF5bG9hZC5ncm91cCkge1xyXG4gICAgICAgICAgICAgICAgYm94c1tpXS50ZXh0UmVzdWx0ID0gW107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBib3hzO1xyXG5cclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgcmV0dXJuIHN0YXRlO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7XHJcbiAgICBTQUdBX1NDQUxFX0NIQU5HRSxcclxufSBmcm9tICcuLi9hY3Rpb25zX3NhZ2EvdG9vbGJveHNjYWxlLmpzJztcclxuXHJcbi8vID09PT09PT09PT09PT09PT09PT09XHJcbi8vIHNjYWxl5oOF5aCxXHJcbi8vICAgICAgMS4wOiAxMDAlXHJcbi8vID09PT09PT09PT09PT09PT09PT09XHJcbmV4cG9ydCBjb25zdCBzY2FsZSA9IChzdGF0ZSA9IDEwMCwgYWN0aW9uKSA9PiB7XHJcbiAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XHJcbiAgICBjYXNlIFNBR0FfU0NBTEVfQ0hBTkdFOiAgIC8vIOaLoeWkp+e4ruWwj+WApOOBjOWkieabtOOBleOCjOOBn1xyXG4gICAgICAgIHJldHVybiBhY3Rpb24ucGF5bG9hZC5zY2FsZTtcclxuXHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICAgIHJldHVybiBzdGF0ZTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBjb21iaW5lUmVkdWNlcnMgfSBmcm9tICdyZWR1eCc7XHJcblxyXG5pbXBvcnQgeyBzY2FsZSB9IGZyb20gJy4vc2NhbGUuanMnO1xyXG5pbXBvcnQgeyBib3hzIH0gZnJvbSAnLi9ib3hzLmpzJztcclxuaW1wb3J0IHsgZm9jdXNib3ggfSBmcm9tICcuL2ZvY3VzYm94LmpzJztcclxuaW1wb3J0IHsgdG9vbGJveHMgfSBmcm9tICcuL3Rvb2xib3hzLmpzJztcclxuaW1wb3J0IHsgc296YWkgfSBmcm9tICcuL3NvemFpLmpzJztcclxuaW1wb3J0IHsgbGlua3MgfSBmcm9tICcuL2xpbmtzLmpzJztcclxuXHJcbmNvbnN0IHJvb3RSZWR1Y2VyID0gY29tYmluZVJlZHVjZXJzKHtcclxuICAgIHNjYWxlLFxyXG4gICAgYm94cyxcclxuICAgIGZvY3VzYm94LFxyXG4gICAgdG9vbGJveHMsXHJcbiAgICBzb3phaSxcclxuICAgIGxpbmtzLFxyXG59KTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHJvb3RSZWR1Y2VyO1xyXG4iLCIvL1xyXG4vLyDphY3liJfplqLpgKNcclxuLy9cclxuXHJcbmV4cG9ydCBjb25zdCBMaWJBcnJheSA9IHtcclxuICAgIC8vXHJcbiAgICAvLyDmjIflrprjga7jgoLjga7jgpLphY3liJfjgavlhaXjgozjgabov5TjgZlcclxuICAgIC8vIOWQjOOBmOOCguOBruOBjOWtmOWcqOOBmeOCi+WgtOWQiOOBr+OAgemFjeWIl+OBq+WQq+OCgeOBquOBhFxyXG4gICAgLy9cclxuICAgIC8vIFtJTl1cclxuICAgIC8vICAgYXJ5OiDphY3liJdcclxuICAgIC8vICAgdmFsOiDlgKRcclxuICAgIC8vXHJcbiAgICAvLyBbT1VUXVxyXG4gICAgLy8gICBhcnk6IOmFjeWIl1xyXG4gICAgLy9cclxuICAgIHNldEFycmF5VW5pcXVlOiAoYXJ5LCB2YWwpID0+IHtcclxuICAgICAgICBsZXQgZmxnID0gZmFsc2U7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJ5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChhcnlbaV0gPT0gdmFsKSB7XHJcbiAgICAgICAgICAgICAgICBmbGcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChmbGcgPT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgYXJ5LnB1c2godmFsKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBhcnk7XHJcbiAgICB9LFxyXG59ICIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcblxyXG5pbXBvcnQgeyBTdHJpbmcgfSBmcm9tICcuLi9saWJzL3N0cmluZy5qcyc7XHJcbmltcG9ydCB7IEJveCB9IGZyb20gJy4uL2xpYnMvYm94LmpzJztcclxuXHJcbmNvbnN0IHN0eWxlcyA9IHtcclxuICAgIGNvbnRhaW5lcjoge1xyXG4gICAgICAgIHRleHRBbGlnbjogJ2xlZnQnLFxyXG4gICAgICAgIHBhZGRpbmdUb3A6ICc1cHgnLFxyXG4gICAgfSxcclxuICAgIGxpbmU6IHtcclxuICAgICAgICBoZWlnaHQ6ICcyMHB4JyxcclxuICAgICAgICBmb250U2l6ZTogJzEycHgnLFxyXG4gICAgICAgIGxpbmVIZWlnaHQ6ICcyMHB4JyxcclxuICAgIH0sXHJcbiAgICBidXR0b246IHtcclxuICAgICAgICB3aWR0aDogJzQwcHgnLFxyXG4gICAgICAgIGhlaWdodDogJzE0cHgnLFxyXG4gICAgICAgIGZvbnRTaXplOiAnMTJweCcsXHJcbiAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcclxuICAgICAgICBsaW5lSGVpZ2h0OiAnMTRweCcsXHJcbiAgICAgICAgYm9yZGVyOiAnMXB4IHNvbGlkIGdyYXknLFxyXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ2xpZ2h0Z3JlZW4nLFxyXG4gICAgICAgIGJvcmRlclJhZGl1czogJzJweCcsXHJcbiAgICB9LFxyXG4gICAgYm94bGlzdGJveDoge1xyXG4gICAgICAgIHdpZHRoOiAnMTAwJScsXHJcbiAgICAgICAgaGVpZ2h0OiAnMTE1cHgnLFxyXG4gICAgICAgIC8vIHBhZGRpbmdUb3A6ICc1cHgnLFxyXG4gICAgICAgIG92ZXJmbG93WTogJ3Njcm9sbCcsXHJcbiAgICAgICAgb3V0bGluZTogJzFweCBzb2xpZCAjYThhOGE4JyxcclxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd3aGl0ZScsXHJcbiAgICB9LFxyXG4gICAgc296YWlsaXN0Ym94OiB7XHJcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcclxuICAgICAgICBoZWlnaHQ6ICcxMTVweCcsXHJcbiAgICAgICAgb3ZlcmZsb3dZOiAnc2Nyb2xsJyxcclxuICAgICAgICAvLyBtYXJnaW5Ub3A6ICc1cHgnLFxyXG4gICAgICAgIG91dGxpbmU6ICcxcHggc29saWQgI2E4YThhOCcsXHJcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnd2hpdGUnLFxyXG4gICAgfSxcclxuICAgIGxpbmtsaXN0Ym94OiB7XHJcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcclxuICAgICAgICBoZWlnaHQ6ICcxMTVweCcsXHJcbiAgICAgICAgb3ZlcmZsb3dZOiAnc2Nyb2xsJyxcclxuICAgICAgICAvLyBtYXJnaW5Ub3A6ICc1cHgnLFxyXG4gICAgICAgIG91dGxpbmU6ICcxcHggc29saWQgI2E4YThhOCcsXHJcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnd2hpdGUnLFxyXG4gICAgfSxcclxuICAgIGxpc3Q6IHtcclxuICAgICAgICB3aWR0aDogJzEwMCUnLFxyXG4gICAgICAgIGhlaWdodDogJzIwcHgnLFxyXG4gICAgICAgIGxpbmVIZWlnaHQ6ICcyMHB4JyxcclxuICAgICAgICBib3JkZXJCb3R0b206ICcxcHggc29saWQgZ3JheScsXHJcbiAgICB9LFxyXG4gICAgbGlua2xpc3Q6IHtcclxuICAgICAgICB3aWR0aDogJzEwMCUnLFxyXG4gICAgICAgIGhlaWdodDogJzQwcHgnLFxyXG4gICAgICAgIGxpbmVIZWlnaHQ6ICcyMHB4JyxcclxuICAgICAgICBib3JkZXJCb3R0b206ICcxcHggc29saWQgZ3JheScsXHJcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnbGlnaHRwaW5rJyxcclxuICAgIH0sXHJcbn07XHJcblxyXG5jb25zdCBDb2xvciA9IHtcclxuICAgIHRleHQ6ICdsaWdodHllbGxvdycsXHJcbiAgICBpbWFnZTogJ3BpbmsnLFxyXG4gICAgc2VsZWN0OiAncmVkJyxcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRvb2xCb3hMaXN0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG5cclxuICAgICAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICAgICAgICBncm91cDogJycsXHJcbiAgICAgICAgICAgIHNvemFpX2lkOiAnJyxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICBcclxuICAgIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgIGdyb3VwOiAnJyxcclxuICAgICAgICAgICAgc296YWlfaWQ6ICcnLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGNsaWNrQm94TGlzdChncm91cCkge1xyXG4gICAgICAgIGxldCBpZDtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuZ3JvdXAgPT0gZ3JvdXApIHtcclxuICAgICAgICAgICAgaWQgPSAnJztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZCA9IGdyb3VwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgIGdyb3VwOiBpZCxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBjbGlja1NvemFpTGlzdChzb3phaV9pZCkge1xyXG4gICAgICAgIGxldCBpZDtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuc296YWlfaWQgPT0gc296YWlfaWQpIHtcclxuICAgICAgICAgICAgaWQgPSAnJztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZCA9IHNvemFpX2lkO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgIHNvemFpX2lkOiBpZCxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBjbGlja0NyZWF0ZUJ1dHRvbigpIHtcclxuICAgICAgICBpZiAodGhpcy5zdGF0ZS5ncm91cCA9PSAnJ1xyXG4gICAgICAgICB8fCB0aGlzLnN0YXRlLnNvemFpX2lkID09ICcnKSB7XHJcbiAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5wcm9wcy5vbkNsaWNrQ3JlYXRlQnV0dG9uKHtcclxuICAgICAgICAgICAgZ3JvdXA6IHRoaXMuc3RhdGUuZ3JvdXAsXHJcbiAgICAgICAgICAgIHNvemFpX2lkOiB0aGlzLnN0YXRlLnNvemFpX2lkLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGNsaWNrRGVsZXRlQnV0dG9uKGdyb3VwKSB7XHJcbiAgICAgICAgaWYgKGNvbmZpcm0oJ+WJiumZpOOBl+OBvuOBmeOAguOCiOOCjeOBl+OBhOOBp+OBmeOBi++8nycpID09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMucHJvcHMub25DbGlja0RlbGV0ZUJ1dHRvbih7XHJcbiAgICAgICAgICAgIGdyb3VwOiBncm91cCxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyDjgrDjg6vjg7zjg5flkI3jgYzjg6rjg7Pjgq/jg6rjgrnjg4jjgavlkKvjgb7jgozjgabjgYTjgovjgYvjganjgYbjgYvjgpLov5TjgZlcclxuICAgIGlzSW5jbHVkZUxpbmtMaXN0R3JvdXAoZ3JvdXApIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucHJvcHMubGlua3MubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMubGlua3NbaV0uZ3JvdXAgPT0gZ3JvdXApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g57Sg5p2QSe+9hOOBjOODquODs+OCr+ODquOCueODiOOBq+WQq+OBvuOCjOOBpuOBhOOCi+OBi+OBqeOBhuOBi+OCkui/lOOBmVxyXG4gICAgaXNJbmNsdWRlTGlua0xpc3RTb3phaUlkKHNvemFpX2lkKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnByb3BzLmxpbmtzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLmxpbmtzW2ldLnNvemFpX2lkID09IHNvemFpX2lkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlOyAgICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgZ3JvdXBsaXN0KCkge1xyXG4gICAgICAgIGxldCBsaXN0ID0gW107XHJcbiAgICAgICAgbGV0IGh0bWwgPSBbXTtcclxuXHJcbiAgICAgICAgLy8g44Oc44OD44Kv44K544Gu44Kw44Or44O844OX5ZCN44Gu44Oq44K544OI77yI6YWN5YiX77yJ44KS5b6X44KLXHJcbiAgICAgICAgY29uc3QgZ3JvdXBfYXJ5ID0gQm94LmdldEdyb3VwQXJ5KHRoaXMucHJvcHMuYm94cyk7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZ3JvdXBfYXJ5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIC8vIOODquODs+OCr+ODquOCueODiOOBq+i/veWKoOOBleOCjOOBpuOBhOOCi+OCguOBruOBr+eEoeimllxyXG4gICAgICAgICAgICBpZiAodGhpcy5pc0luY2x1ZGVMaW5rTGlzdEdyb3VwKGdyb3VwX2FyeVtpXSkgPT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIOODnOODg+OCr+OCueODquOCueODiOOBqOOBl+OBpui/veWKoOOBmeOCi1xyXG4gICAgICAgICAgICBsaXN0LnB1c2goe1xyXG4gICAgICAgICAgICAgICAgZ3JvdXA6IGdyb3VwX2FyeVtpXSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IGJnY29sb3I7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnN0YXRlLmdyb3VwID09IGxpc3RbaV0uZ3JvdXApIHtcclxuICAgICAgICAgICAgICAgIGJnY29sb3IgPSAncmVkJztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGJnY29sb3IgPSAnbGlnaHR5ZWxsb3cnO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBodG1sLnB1c2goXHJcbiAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgLi4uc3R5bGVzLmxpc3QsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogYmdjb2xvcixcclxuICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eyhlKSA9PiB0aGlzLmNsaWNrQm94TGlzdChsaXN0W2ldLmdyb3VwKX1cclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICB7bGlzdFtpXS5ncm91cH1cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGh0bWw7XHJcbiAgICB9XHJcblxyXG4gICAgc296YWlsaXN0KCkge1xyXG4gICAgICAgIGxldCBsaXN0ID0gW107XHJcbiAgICAgICAgbGV0IGh0bWwgPSBbXTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnByb3BzLnNvemFpLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIC8vIOODquODs+OCr+ODquOCueODiOOBq+i/veWKoOOBleOCjOOBpuOBhOOCi+OCguOBruOBr+eEoeimllxyXG4gICAgICAgICAgICBpZiAodGhpcy5pc0luY2x1ZGVMaW5rTGlzdFNvemFpSWQodGhpcy5wcm9wcy5zb3phaVtpXS5pZCkgPT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIOe0oOadkOODquOCueODiOOBqOOBl+OBpui/veWKoOOBmeOCi1xyXG4gICAgICAgICAgICBsaXN0LnB1c2goe1xyXG4gICAgICAgICAgICAgICAgc296YWlfaWQ6IHRoaXMucHJvcHMuc296YWlbaV0uaWQsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCBiZ2NvbG9yO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZS5zb3phaV9pZCA9PSBsaXN0W2ldLnNvemFpX2lkKSB7XHJcbiAgICAgICAgICAgICAgICBiZ2NvbG9yID0gJ3JlZCc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBiZ2NvbG9yID0gJ2xpZ2h0eWVsbG93JztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaHRtbC5wdXNoKFxyXG4gICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnN0eWxlcy5saXN0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGJnY29sb3IsXHJcbiAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoZSkgPT4gdGhpcy5jbGlja1NvemFpTGlzdChsaXN0W2ldLnNvemFpX2lkKX1cclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICB7bGlzdFtpXS5zb3phaV9pZH1cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGh0bWw7XHJcbiAgICB9XHJcblxyXG4gICAgbGlua2xpc3QoKSB7XHJcbiAgICAgICAgbGV0IGh0bWwgPSBbXTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnByb3BzLmxpbmtzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGh0bWwucHVzaChcclxuICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5zdHlsZXMubGlua2xpc3QsXHJcbiAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICc5cHgnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAnOXB4JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ2xpZ2h0Z3JheScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eyhlKSA9PiB0aGlzLmNsaWNrRGVsZXRlQnV0dG9uKHRoaXMucHJvcHMubGlua3NbaV0uZ3JvdXApfVxyXG4gICAgICAgICAgICAgICAgICAgID7inJU8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgJm5ic3A7XHJcbiAgICAgICAgICAgICAgICAgICAge3RoaXMucHJvcHMubGlua3NbaV0uZ3JvdXB9PGJyLz5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT17e3dpZHRoOiAnOXB4JywgaGVpZ2h0OiAnOXB4J319PuOAgDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAmbmJzcDtcclxuICAgICAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5saW5rc1tpXS5zb3phaV9pZH1cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGh0bWw7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICBzdHlsZT17c3R5bGVzLmNvbnRhaW5lcn1cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnN0eWxlcy5saW5lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ2JsdWUnLFxyXG4gICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAg44Kw44Or44O844OX44Oq44K544OIXHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5zdHlsZXMuYm94bGlzdGJveCxcclxuICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIHt0aGlzLmdyb3VwbGlzdCgpfVxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnN0eWxlcy5saW5lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ2JsdWUnLFxyXG4gICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAg57Sg5p2Q44Oq44K544OIXHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5zdHlsZXMuc296YWlsaXN0Ym94LFxyXG4gICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAge3RoaXMuc296YWlsaXN0KCl9XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgLi4uc3R5bGVzLmJ1dHRvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICc2MHB4JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmxvYXQ6ICdyaWdodCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpblRvcDogJzVweCcsXHJcbiAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoZSkgPT4gdGhpcy5jbGlja0NyZWF0ZUJ1dHRvbigpfVxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIOODquODs+OCr1xyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPXt7Y2xlYXI6ICdib3RoJ319Lz5cclxuXHJcbiAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgLi4uc3R5bGVzLmxpbmUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnZ3JlZW4nLFxyXG4gICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAg44Oq44Oz44Kv44Oq44K544OIXHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5zdHlsZXMubGlua2xpc3Rib3gsXHJcbiAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICB7dGhpcy5saW5rbGlzdCgpfVxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIClcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnO1xyXG5cclxuaW1wb3J0IFRvb2xCb3hMaW5rIGZyb20gJy4vVG9vbEJveExpbmsuanMnO1xyXG5cclxuaW1wb3J0IHsgWmFoeW8gfSBmcm9tICcuLi9saWJzL3phaHlvLmpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBTVV9Ub29sQm94TGlua19DcmVhdGVCdXR0b25fQ2xpY2ssXHJcbiAgICBTVV9Ub29sQm94TGlua19EZWxldGVCdXR0b25fQ2xpY2ssXHJcbn0gZnJvbSAnLi4vYWN0aW9uc19zdS90b29sYm94bGluay5qcyc7XHJcblxyXG5cclxuLy8gbWFwU3RhdGVUb1Byb3BzXHJcbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZSwgcHJvcHMpID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgLi4uc3RhdGUsXHJcbiAgICB9O1xyXG59XHJcblxyXG4vLyBtYXBEaXNwYXRjaFRvUHJvcHNcclxuY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0gKGRpc3BhdGNoLCBwcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBkaXNwYXRjaCxcclxuICAgIH07XHJcbn1cclxuXHJcbi8vIG1lcmdlUHJvcHMgXHJcbmNvbnN0IG1lcmdlUHJvcHMgPSAoc3RhdGUsIGRpc3BhdGNoLCBwcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAvLyB4eHg6IHl5eSxcclxuICAgICAgICAvLyBvblh4eHg6ICh4eHgpID0+IHtcclxuICAgICAgICAvLyAgICAgLi4uLi5cclxuICAgICAgICAvLyAgICAgZGlzcGF0Y2guZGlzcGF0Y2goU1VfWHh4eHh4X1h4eHh4X1h4eHgoKSk7XHJcbiAgICAgICAgLy8gfSxcclxuICAgICAgICAvLyAuLi5wcm9wcyxcclxuICAgICAgICBsaW5rczogc3RhdGUubGlua3MsXHJcbiAgICAgICAgYm94czogc3RhdGUuYm94cyxcclxuICAgICAgICBzb3phaTogc3RhdGUuc296YWksXHJcbiAgICAgICAgXHJcbiAgICAgICAgb25DbGlja0NyZWF0ZUJ1dHRvbjogKHBheWxvYWQpID0+IHtcclxuICAgICAgICAgICAgZGlzcGF0Y2guZGlzcGF0Y2goU1VfVG9vbEJveExpbmtfQ3JlYXRlQnV0dG9uX0NsaWNrKHBheWxvYWQpKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uQ2xpY2tEZWxldGVCdXR0b246IChwYXlsb2FkKSA9PiB7XHJcbiAgICAgICAgICAgIGRpc3BhdGNoLmRpc3BhdGNoKFNVX1Rvb2xCb3hMaW5rX0RlbGV0ZUJ1dHRvbl9DbGljayhwYXlsb2FkKSk7XHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuXHJcbi8vIGNvbm5lY3RcclxuY29uc3QgVG9vbEJveExpbmtNYXAgPSBjb25uZWN0KFxyXG4gICAgbWFwU3RhdGVUb1Byb3BzLFxyXG4gICAgbWFwRGlzcGF0Y2hUb1Byb3BzLFxyXG4gICAgbWVyZ2VQcm9wc1xyXG4pKFRvb2xCb3hMaW5rKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFRvb2xCb3hMaW5rTWFwO1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5cclxuaW1wb3J0IHsgU3RyaW5nIH0gZnJvbSAnLi4vbGlicy9zdHJpbmcuanMnO1xyXG5cclxuY29uc3Qgc3R5bGVzID0ge1xyXG4gICAgY29udGFpbmVyOiB7XHJcbiAgICAgICAgdGV4dEFsaWduOiAnbGVmdCcsXHJcbiAgICAgICAgcGFkZGluZ1RvcDogJzVweCcsXHJcbiAgICB9LFxyXG4gICAgbGluZToge1xyXG4gICAgICAgIGhlaWdodDogJzIwcHgnLFxyXG4gICAgICAgIGZvbnRTaXplOiAnMTJweCcsXHJcbiAgICAgICAgbGluZUhlaWdodDogJzIwcHgnLFxyXG4gICAgfSxcclxuICAgIGJ1dHRvbjoge1xyXG4gICAgICAgIHdpZHRoOiAnNDBweCcsXHJcbiAgICAgICAgaGVpZ2h0OiAnMTRweCcsXHJcbiAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcclxuICAgICAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxyXG4gICAgICAgIGxpbmVIZWlnaHQ6ICcxNHB4JyxcclxuICAgICAgICBib3JkZXI6ICcxcHggc29saWQgZ3JheScsXHJcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnbGlnaHRncmVlbicsXHJcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnMnB4JyxcclxuICAgIH0sXHJcbiAgICBpbnB1dDoge1xyXG4gICAgICAgIGhlaWdodDogJzlweCcsXHJcbiAgICB9LFxyXG4gICAgbGlzdGJveDoge1xyXG4gICAgICAgIHdpZHRoOiAnMTAwJScsXHJcbiAgICAgICAgaGVpZ2h0OiAnMTE1cHgnLFxyXG4gICAgICAgIC8vIHBhZGRpbmdUb3A6ICc1cHgnLFxyXG4gICAgICAgIG92ZXJmbG93WTogJ3Njcm9sbCcsXHJcbiAgICAgICAgb3V0bGluZTogJzFweCBzb2xpZCAjYThhOGE4JyxcclxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd3aGl0ZScsXHJcbiAgICB9LFxyXG4gICAgdGV4dGJveDoge1xyXG4gICAgICAgIHdpZHRoOiAnMTc0cHgnLFxyXG4gICAgICAgIGhlaWdodDogJzE3NXB4JyxcclxuICAgICAgICBtYXJnaW5Ub3A6ICc1cHgnLFxyXG4gICAgfSxcclxuICAgIHNvemFpbGlzdDoge1xyXG4gICAgICAgIHdpZHRoOiAnMTAwJScsXHJcbiAgICAgICAgaGVpZ2h0OiAnMjBweCcsXHJcbiAgICAgICAgbGluZUhlaWdodDogJzIwcHgnLFxyXG4gICAgICAgIGJvcmRlckJvdHRvbTogJzFweCBzb2xpZCBncmF5JyxcclxuICAgIH0sXHJcbn07XHJcblxyXG5jb25zdCBDb2xvciA9IHtcclxuICAgIHRleHQ6ICdsaWdodHllbGxvdycsXHJcbiAgICBpbWFnZTogJ3BpbmsnLFxyXG4gICAgc2VsZWN0OiAncmVkJyxcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRvb2xCb3hTb3phaSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKTtcclxuXHJcbiAgICAgICAgdGhpcy5idXR0b24gPSAnJztcclxuXHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgICAgICAgaWQ6ICcnLFxyXG4gICAgICAgICAgICBpbnB1dGlkOiAnJyxcclxuICAgICAgICAgICAgdHlwZTogJycsXHJcbiAgICAgICAgICAgIHRleHQ6ICcnLFxyXG4gICAgICAgICAgICBpbWFnZTogJycsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgXHJcbiAgICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xyXG4gICAgICAgIGxldCBzb3phaSA9ICcnO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmV4dFByb3BzLnNvemFpLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChuZXh0UHJvcHMuc296YWlbaV0uc2VsZWN0ID09ICdvbicpIHtcclxuICAgICAgICAgICAgICAgIHNvemFpID0gbmV4dFByb3BzLnNvemFpW2ldO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChzb3phaSA9PSAnJykge1xyXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgICAgIGlkOiAnJyxcclxuICAgICAgICAgICAgICAgIGlucHV0aWQ6ICcnLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogJycsXHJcbiAgICAgICAgICAgICAgICB0ZXh0OiAnJyxcclxuICAgICAgICAgICAgICAgIGltYWdlOiAnJyxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgICAgICBpZDogc296YWkuaWQsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiBzb3phaS50eXBlLFxyXG4gICAgICAgICAgICAgICAgdGV4dDogc296YWkudGV4dCxcclxuICAgICAgICAgICAgICAgIGltYWdlOiBzb3phaS5pbWFnZSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNsaWNrTGlzdChzb3phaSkge1xyXG4gICAgICAgIHRoaXMucHJvcHMub25DbGlja1NvemFpTGlzdCh7aWQ6IHNvemFpLmlkfSk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xpY2tVcGRhdGVCdXR0b24oKSB7XHJcbiAgICAgICAgbGV0IHNvemFpID0ge1xyXG4gICAgICAgICAgICBpZDogdGhpcy5zdGF0ZS5pZCxcclxuICAgICAgICAgICAgdHlwZTogdGhpcy5zdGF0ZS50eXBlLFxyXG4gICAgICAgICAgICB0ZXh0OiB0aGlzLnN0YXRlLnRleHQsXHJcbiAgICAgICAgICAgIGltYWdlOiB0aGlzLnN0YXRlLmltYWdlLFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMucHJvcHMub25DbGlja1VwZGF0ZUJ1dHRvbih7XHJcbiAgICAgICAgICAgIHNvemFpOiBzb3phaSxcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5idXR0b24gPSAndXBkYXRlJztcclxuICAgIH1cclxuXHJcbiAgICBjbGlja0RlbGV0ZUJ1dHRvbihpZCkge1xyXG4gICAgICAgIGlmIChjb25maXJtKCfliYrpmaTjgZfjgb7jgZnjgILjgojjgo3jgZfjgYTjgafjgZnjgYvvvJ8nKSA9PSBmYWxzZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnByb3BzLm9uQ2xpY2tEZWxldGVCdXR0b24oe1xyXG4gICAgICAgICAgICBpZDogaWQsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xpY2tDcmVhdGVCdXR0b24oKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuaW5wdXRpZCA9PSAnJ1xyXG4gICAgICAgICB8fCB0aGlzLnN0YXRlLnR5cGUgPT0gJycpIHtcclxuICAgICAgICAgICAgIGFsZXJ0KCfntKDmnZBJROOBiuOCiOOBs+OCv+OCpOODl+OCkuWFpeWKm+OBl+OBpuOBj+OBoOOBleOBhCcpO1xyXG4gICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuY2hlY2tTb3phaUV4aXN0KHRoaXMuc3RhdGUuaW5wdXRpZCkpIHtcclxuICAgICAgICAgICAgYWxlcnQoJ+OBk+OBrue0oOadkElE44Gv5pei44Gr5a2Y5Zyo44GX44Gm44GE44G+44GZJyk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLnR5cGUgIT0gJ3RleHQnKSB7XHJcbiAgICAgICAgICAgIGFsZXJ0KCfjgIzjgr/jgqTjg5fjgI3jga8gdGV4dCDjgajlhaXlipvjgZfjgabjgY/jgaDjgZXjgYQnKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5wcm9wcy5vbkNsaWNrQ3JlYXRlQnV0dG9uKHtcclxuICAgICAgICAgICAgaWQ6IHRoaXMuc3RhdGUuaW5wdXRpZCxcclxuICAgICAgICAgICAgdHlwZTogdGhpcy5zdGF0ZS50eXBlLFxyXG4gICAgICAgICAgICB0ZXh0OiB0aGlzLnN0YXRlLnRleHQsXHJcbiAgICAgICAgICAgIGltYWdlOiB0aGlzLnN0YXRlLmltYWdlLFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgaW5wdXRpZDogJycsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgc296YWlsaXN0KCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIHRoaXMucHJvcHMuc296YWkubWFwKChyZWMpID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBjb2xvcjtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAocmVjLnR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3RleHQnOlxyXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yID0gQ29sb3IudGV4dDtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2ltYWdlJzpcclxuICAgICAgICAgICAgICAgICAgICBjb2xvciA9IENvbG9yLmltYWdlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChyZWMuc2VsZWN0ID09ICdvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb2xvciA9IENvbG9yLnNlbGVjdDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLnN0eWxlcy5zb3phaWxpc3QsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGNvbG9yLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGlja0xpc3QocmVjKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAnOXB4JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICc5cHgnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ2xpZ2h0Z3JheScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KGUpID0+IHRoaXMuY2xpY2tEZWxldGVCdXR0b24ocmVjLmlkKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPuKclTwvc3Bhbj4ge3JlYy5pZH1cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG5cclxuICAgIGlkdHlwZSgpIHtcclxuICAgICAgICBsZXQgaHRtbDtcclxuICAgICAgICBpZiAodGhpcy5zdGF0ZS5pZCA9PSAnJykge1xyXG4gICAgICAgICAgICBodG1sID0gW1xyXG4gICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnN0eWxlcy5saW5lLFxyXG4gICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAg57Sg5p2QSUTvvJo8aW5wdXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uc3R5bGVzLmlucHV0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogJzgwcHgnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUuaW5wdXRpZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IHRoaXMuc2V0U3RhdGUoe2lucHV0aWQ6IGUudGFyZ2V0LnZhbHVlfSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+LFxyXG4gICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnN0eWxlcy5saW5lLFxyXG4gICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAg44K/44Kk44OX77yaPGlucHV0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLnN0eWxlcy5pbnB1dCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICc4MHB4JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLnR5cGV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiB0aGlzLnNldFN0YXRlKHt0eXBlOiBlLnRhcmdldC52YWx1ZX0pfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICBdO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGh0bWwgPSBbXHJcbiAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgLi4uc3R5bGVzLmxpbmUsXHJcbiAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICDntKDmnZBJRO+8mnt0aGlzLnN0YXRlLmlkfVxyXG4gICAgICAgICAgICAgICAgPC9kaXY+LFxyXG4gICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnN0eWxlcy5saW5lLFxyXG4gICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAg44K/44Kk44OX77yae3RoaXMuc3RhdGUudHlwZX1cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICBdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGh0bWw7XHJcbiAgICB9XHJcblxyXG4gICAgbmV3dXBkYXRlYnV0dG9uKCkge1xyXG4gICAgICAgIGxldCBodG1sO1xyXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmlkID09ICcnKSB7XHJcbiAgICAgICAgICAgIGh0bWwgPSBbXHJcbiAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgLi4uc3R5bGVzLmJ1dHRvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICc2MHB4JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmxvYXQ6ICdyaWdodCcsXHJcbiAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoZSkgPT4gdGhpcy5jbGlja0NyZWF0ZUJ1dHRvbigpfVxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIOaWsOimj+S9nOaIkFxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIF07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaHRtbCA9IFtcclxuICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5zdHlsZXMuYnV0dG9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmbG9hdDogJ3JpZ2h0JyxcclxuICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eyhlKSA9PiB0aGlzLmNsaWNrVXBkYXRlQnV0dG9uKCl9XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAg5pu05pawXHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBodG1sO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgaWQ9XCJ0b29sYm94c296YWlcIlxyXG4gICAgICAgICAgICAgICAgc3R5bGU9e3N0eWxlcy5jb250YWluZXJ9XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9e3toZWlnaHQ6ICc1cHgnfX0vPlxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgLi4uc3R5bGVzLmxpc3Rib3gsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogJzVweCcsXHJcbiAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICB7dGhpcy5zb3phaWxpc3QoKX1cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgIHt0aGlzLmlkdHlwZSgpfVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICA8dGV4dGFyZWFcclxuICAgICAgICAgICAgICAgICAgICBpZD1cInRvb2xib3hzb3phaXRleHRhcmVhXCJcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS50ZXh0fVxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnN0eWxlcy50ZXh0Ym94LFxyXG4gICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiB0aGlzLnNldFN0YXRlKHt0ZXh0OiBlLnRhcmdldC52YWx1ZX0pfVxyXG4gICAgICAgICAgICAgICAgLz5cclxuXHJcbiAgICAgICAgICAgICAgICB7dGhpcy5uZXd1cGRhdGVidXR0b24oKX1cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XHJcblxyXG5pbXBvcnQgVG9vbEJveFNvemFpIGZyb20gJy4vVG9vbEJveFNvemFpLmpzJztcclxuXHJcbmltcG9ydCB7IFphaHlvIH0gZnJvbSAnLi4vbGlicy96YWh5by5qcyc7XHJcblxyXG5pbXBvcnQge1xyXG4gICAgU1VfVG9vbEJveFNvemFpX1VwZGF0ZUJ1dHRvbl9DbGljayxcclxuICAgIFNVX1Rvb2xCb3hTb3phaV9EZWxldGVCdXR0b25fQ2xpY2ssXHJcbiAgICBTVV9Ub29sQm94U296YWlfQ3JlYXRlQnV0dG9uX0NsaWNrLFxyXG4gICAgU1VfVG9vbEJveFNvemFpX1NvemFpX1RvZ2dsZSxcclxufSBmcm9tICcuLi9hY3Rpb25zX3N1L3Rvb2xib3hzb3phaS5qcyc7XHJcblxyXG5cclxuLy8gbWFwU3RhdGVUb1Byb3BzXHJcbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZSwgcHJvcHMpID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgLi4uc3RhdGUsXHJcbiAgICB9O1xyXG59XHJcblxyXG4vLyBtYXBEaXNwYXRjaFRvUHJvcHNcclxuY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0gKGRpc3BhdGNoLCBwcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBkaXNwYXRjaCxcclxuICAgIH07XHJcbn1cclxuXHJcbi8vIG1lcmdlUHJvcHMgXHJcbmNvbnN0IG1lcmdlUHJvcHMgPSAoc3RhdGUsIGRpc3BhdGNoLCBwcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAvLyB4eHg6IHl5eSxcclxuICAgICAgICAvLyBvblh4eHg6ICh4eHgpID0+IHtcclxuICAgICAgICAvLyAgICAgLi4uLi5cclxuICAgICAgICAvLyAgICAgZGlzcGF0Y2guZGlzcGF0Y2goU1VfWHh4eHh4X1h4eHh4X1h4eHgoKSk7XHJcbiAgICAgICAgLy8gfSxcclxuICAgICAgICAvLyAuLi5wcm9wcyxcclxuICAgICAgICBzb3phaTogc3RhdGUuc296YWksXHJcblxyXG4gICAgICAgIG9uQ2xpY2tTb3phaUxpc3Q6IChwYXlsb2FkKSA9PiB7XHJcbiAgICAgICAgICAgIGRpc3BhdGNoLmRpc3BhdGNoKFNVX1Rvb2xCb3hTb3phaV9Tb3phaV9Ub2dnbGUocGF5bG9hZCkpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25DbGlja1VwZGF0ZUJ1dHRvbjogKHBheWxvYWQpID0+IHtcclxuICAgICAgICAgICAgZGlzcGF0Y2guZGlzcGF0Y2goU1VfVG9vbEJveFNvemFpX1VwZGF0ZUJ1dHRvbl9DbGljayhwYXlsb2FkKSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkNsaWNrRGVsZXRlQnV0dG9uOiAocGF5bG9hZCkgPT4ge1xyXG4gICAgICAgICAgICBkaXNwYXRjaC5kaXNwYXRjaChTVV9Ub29sQm94U296YWlfRGVsZXRlQnV0dG9uX0NsaWNrKHBheWxvYWQpKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uQ2xpY2tDcmVhdGVCdXR0b246IChwYXlsb2FkKSA9PiB7XHJcbiAgICAgICAgICAgIGRpc3BhdGNoLmRpc3BhdGNoKFNVX1Rvb2xCb3hTb3phaV9DcmVhdGVCdXR0b25fQ2xpY2socGF5bG9hZCkpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGNoZWNrU296YWlFeGlzdDogKGlkKSA9PiB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RhdGUuc296YWkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5zb3phaVtpXS5pZCA9PSBpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuXHJcbi8vIGNvbm5lY3RcclxuY29uc3QgVG9vbEJveFNvemFpTWFwID0gY29ubmVjdChcclxuICAgIG1hcFN0YXRlVG9Qcm9wcyxcclxuICAgIG1hcERpc3BhdGNoVG9Qcm9wcyxcclxuICAgIG1lcmdlUHJvcHNcclxuKShUb29sQm94U296YWkpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgVG9vbEJveFNvemFpTWFwO1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5cclxuaW1wb3J0IHsgU3RyaW5nIH0gZnJvbSAnLi4vbGlicy9zdHJpbmcuanMnO1xyXG5cclxuY29uc3Qgc3R5bGVzID0ge1xyXG4gICAgY29udGFpbmVyOiB7XHJcbiAgICAgICAgdGV4dEFsaWduOiAnbGVmdCcsXHJcbiAgICB9LFxyXG4gICAgbGluZToge1xyXG4gICAgICAgIGhlaWdodDogJzIwcHgnLFxyXG4gICAgICAgIGZvbnRTaXplOiAnMTJweCcsXHJcbiAgICAgICAgbGluZUhlaWdodDogJzIwcHgnLFxyXG4gICAgfSxcclxuICAgIGJ1dHRvbjoge1xyXG4gICAgICAgIHdpZHRoOiAnNDBweCcsXHJcbiAgICAgICAgaGVpZ2h0OiAnMTRweCcsXHJcbiAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcclxuICAgICAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxyXG4gICAgICAgIGxpbmVIZWlnaHQ6ICcxNHB4JyxcclxuICAgICAgICBib3JkZXI6ICcxcHggc29saWQgZ3JheScsXHJcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnbGlnaHRncmVlbicsXHJcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnMnB4JyxcclxuICAgIH0sXHJcbiAgICBpbnB1dDoge1xyXG4gICAgICAgIGhlaWdodDogJzlweCcsXHJcbiAgICB9LFxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVG9vbEJveFRleHREYXRhIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG5cclxuICAgICAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICAgICAgICBwYWRkaW5nX2pzOiBwcm9wcy5ib3gudGV4dC5wYWRkaW5nX2pzLFxyXG4gICAgICAgICAgICBwYWRkaW5nX2plOiBwcm9wcy5ib3gudGV4dC5wYWRkaW5nX2plLFxyXG4gICAgICAgICAgICBwYWRkaW5nX2dzOiBwcm9wcy5ib3gudGV4dC5wYWRkaW5nX2dzLFxyXG4gICAgICAgICAgICBwYWRkaW5nX2dlOiBwcm9wcy5ib3gudGV4dC5wYWRkaW5nX2dlLFxyXG4gICAgICAgICAgICBrdW1paG9rbzogcHJvcHMuYm94LnRleHQua3VtaWhva28sXHJcbiAgICAgICAgICAgIHNpemVfajogcHJvcHMuYm94LnRleHQuc2l6ZV9qLFxyXG4gICAgICAgICAgICBzaXplX2c6IHByb3BzLmJveC50ZXh0LnNpemVfZyxcclxuICAgICAgICAgICAgZ3lva2FuOiBwcm9wcy5ib3gudGV4dC5neW9rYW4sXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgcGFkZGluZ19qczogbmV4dFByb3BzLmJveC50ZXh0LnBhZGRpbmdfanMsXHJcbiAgICAgICAgICAgIHBhZGRpbmdfamU6IG5leHRQcm9wcy5ib3gudGV4dC5wYWRkaW5nX2plLFxyXG4gICAgICAgICAgICBwYWRkaW5nX2dzOiBuZXh0UHJvcHMuYm94LnRleHQucGFkZGluZ19ncyxcclxuICAgICAgICAgICAgcGFkZGluZ19nZTogbmV4dFByb3BzLmJveC50ZXh0LnBhZGRpbmdfZ2UsXHJcbiAgICAgICAgICAgIGt1bWlob2tvOiBuZXh0UHJvcHMuYm94LnRleHQua3VtaWhva28sXHJcbiAgICAgICAgICAgIHNpemVfajogbmV4dFByb3BzLmJveC50ZXh0LnNpemVfaixcclxuICAgICAgICAgICAgc2l6ZV9nOiBuZXh0UHJvcHMuYm94LnRleHQuc2l6ZV9nLFxyXG4gICAgICAgICAgICBneW9rYW46IG5leHRQcm9wcy5ib3gudGV4dC5neW9rYW4sXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xpY2tVcGRhdGVCdXR0b24oKSB7XHJcbiAgICAgICAgbGV0IGJveCA9IHRoaXMucHJvcHMuYm94O1xyXG5cclxuICAgICAgICBpZiAodGhpcy5zdGF0ZS5wYWRkaW5nX2pzID09PSAnJ1xyXG4gICAgICAgICB8fCB0aGlzLnN0YXRlLnBhZGRpbmdfamUgPT09ICcnXHJcbiAgICAgICAgIHx8IHRoaXMuc3RhdGUucGFkZGluZ19ncyA9PT0gJydcclxuICAgICAgICAgfHwgdGhpcy5zdGF0ZS5wYWRkaW5nX2dlID09PSAnJ1xyXG4gICAgICAgICB8fCB0aGlzLnN0YXRlLmt1bWlob2tvID09PSAnJ1xyXG4gICAgICAgICB8fCB0aGlzLnN0YXRlLnNpemVfaiA9PT0gJydcclxuICAgICAgICAgfHwgdGhpcy5zdGF0ZS5zaXplX2cgPT09ICcnXHJcbiAgICAgICAgIHx8IHRoaXMuc3RhdGUuZ3lva2FuID09PSAnJykge1xyXG4gICAgICAgICAgICAgYWxlcnQoJ+WFqOOBpuOBrumgheebruOCkuWFpeWKm+OBl+OBpuOBj+OBoOOBleOBhCcpO1xyXG4gICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUua3VtaWhva28gIT0gJ3RhdGUnICYmIHRoaXMuc3RhdGUua3VtaWhva28gIT0gJ3lva28nKSB7XHJcbiAgICAgICAgICAgIGFsZXJ0KCfjgIzntYTmlrnlkJHjgI3jga/jgIF0YXRlIOOBvuOBn+OBryB5b2tvIOOBqOWFpeWKm+OBl+OBpuOBj+OBoOOBleOBhCcpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBib3guaWQgPSB0aGlzLnByb3BzLmJveC5pZDtcclxuICAgICAgICBib3gudGV4dC5wYWRkaW5nX2pzID0gdGhpcy5zdGF0ZS5wYWRkaW5nX2pzO1xyXG4gICAgICAgIGJveC50ZXh0LnBhZGRpbmdfamUgPSB0aGlzLnN0YXRlLnBhZGRpbmdfamU7XHJcbiAgICAgICAgYm94LnRleHQucGFkZGluZ19ncyA9IHRoaXMuc3RhdGUucGFkZGluZ19ncztcclxuICAgICAgICBib3gudGV4dC5wYWRkaW5nX2dlID0gdGhpcy5zdGF0ZS5wYWRkaW5nX2dlO1xyXG4gICAgICAgIGJveC50ZXh0Lmt1bWlob2tvID0gdGhpcy5zdGF0ZS5rdW1paG9rbztcclxuICAgICAgICBib3gudGV4dC5zaXplX2ogPSB0aGlzLnN0YXRlLnNpemVfajtcclxuICAgICAgICBib3gudGV4dC5zaXplX2cgPSB0aGlzLnN0YXRlLnNpemVfZztcclxuICAgICAgICBib3gudGV4dC5neW9rYW4gPSB0aGlzLnN0YXRlLmd5b2thbjtcclxuXHJcbiAgICAgICAgdGhpcy5wcm9wcy5vbkNsaWNrVXBkYXRlQnV0dG9uKHtcclxuICAgICAgICAgICAgYm94OiBib3gsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICBzdHlsZT17c3R5bGVzLmNvbnRhaW5lcn1cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnN0eWxlcy5saW5lXHJcbiAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICDvvorvvp/vvoPvvp7vvajvvp3vvbjvvp4o5a2X6KmwKVxyXG4gICAgICAgICAgICAgICAgICAgIFM8aW5wdXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5wYWRkaW5nX2pzfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17ey4uLnN0eWxlcy5pbnB1dCwgd2lkdGg6ICcyNXB4J319XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gdGhpcy5zZXRTdGF0ZSh7cGFkZGluZ19qczogU3RyaW5nLnRvTnVtZXJpYyhlLnRhcmdldC52YWx1ZSl9KX0gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgJm5ic3A7XHJcbiAgICAgICAgICAgICAgICAgICAgRTxpbnB1dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLnBhZGRpbmdfamV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7Li4uc3R5bGVzLmlucHV0LCB3aWR0aDogJzI1cHgnfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiB0aGlzLnNldFN0YXRlKHtwYWRkaW5nX2plOiBTdHJpbmcudG9OdW1lcmljKGUudGFyZ2V0LnZhbHVlKX0pfVxyXG4gICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5zdHlsZXMubGluZVxyXG4gICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAg776K776f776D776e772o776d7724776eKOihjOmAgSlcclxuICAgICAgICAgICAgICAgICAgICBTPGlucHV0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUucGFkZGluZ19nc31cclxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3suLi5zdHlsZXMuaW5wdXQsIHdpZHRoOiAnMjVweCd9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IHRoaXMuc2V0U3RhdGUoe3BhZGRpbmdfZ3M6IFN0cmluZy50b051bWVyaWMoZS50YXJnZXQudmFsdWUpfSl9IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgICZuYnNwO1xyXG4gICAgICAgICAgICAgICAgICAgIEU8aW5wdXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5wYWRkaW5nX2dlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17ey4uLnN0eWxlcy5pbnB1dCwgd2lkdGg6ICcyNXB4J319XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gdGhpcy5zZXRTdGF0ZSh7cGFkZGluZ19nZTogU3RyaW5nLnRvTnVtZXJpYyhlLnRhcmdldC52YWx1ZSl9KX1cclxuICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgLi4uc3R5bGVzLmxpbmVcclxuICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIOe1hOaWueWQkSA8aW5wdXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUua3VtaWhva299XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3suLi5zdHlsZXMuaW5wdXQsIHdpZHRoOiAnNTBweCd9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gdGhpcy5zZXRTdGF0ZSh7a3VtaWhva286IGUudGFyZ2V0LnZhbHVlfSl9XHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAmbmJzcDtcclxuICAgICAgICAgICAgICAgICAgICDooYzplpMgPGlucHV0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLmd5b2thbn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17ey4uLnN0eWxlcy5pbnB1dCwgd2lkdGg6ICczMHB4J319XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiB0aGlzLnNldFN0YXRlKHtneW9rYW46IFN0cmluZy50b051bWVyaWMoZS50YXJnZXQudmFsdWUpfSl9XHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnN0eWxlcy5saW5lXHJcbiAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICDmloflrZfjgrXjgqTjgrrvvIjlrZfoqbDvvIk8aW5wdXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLnNpemVfan1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7Li4uc3R5bGVzLmlucHV0LCB3aWR0aDogJzMwcHgnfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gdGhpcy5zZXRTdGF0ZSh7c2l6ZV9qOiBTdHJpbmcudG9OdW1lcmljKGUudGFyZ2V0LnZhbHVlKX0pfVxyXG4gICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5zdHlsZXMubGluZVxyXG4gICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAg5paH5a2X44K144Kk44K677yI6KGM6YCB77yJPGlucHV0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLnNpemVfZ31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17ey4uLnN0eWxlcy5pbnB1dCwgd2lkdGg6ICczMHB4J319XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiB0aGlzLnNldFN0YXRlKHtzaXplX2c6IFN0cmluZy50b051bWVyaWMoZS50YXJnZXQudmFsdWUpfSl9XHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnN0eWxlcy5saW5lXHJcbiAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgLi4uc3R5bGVzLmxpbmUsXHJcbiAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5zdHlsZXMuYnV0dG9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmxvYXQ6ICdyaWdodCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHRoaXMuY2xpY2tVcGRhdGVCdXR0b24oKX1cclxuICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIOabtOaWsFxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIClcclxuICAgIH1cclxufSIsImltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XHJcblxyXG5pbXBvcnQgVG9vbEJveFRleHREYXRhIGZyb20gJy4vVG9vbEJveFRleHREYXRhLmpzJztcclxuXHJcbmltcG9ydCB7IFphaHlvIH0gZnJvbSAnLi4vbGlicy96YWh5by5qcyc7XHJcblxyXG5pbXBvcnQge1xyXG4gICAgU1VfVG9vbEJveFRleHREYXRhX1VwZGF0ZUJ1dHRvbl9DbGljayxcclxufSBmcm9tICcuLi9hY3Rpb25zX3N1L3Rvb2xib3h0ZXh0ZGF0YS5qcyc7XHJcblxyXG5cclxuLy8gbWFwU3RhdGVUb1Byb3BzXHJcbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZSwgcHJvcHMpID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgLi4uc3RhdGUsXHJcbiAgICB9O1xyXG59XHJcblxyXG4vLyBtYXBEaXNwYXRjaFRvUHJvcHNcclxuY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0gKGRpc3BhdGNoLCBwcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBkaXNwYXRjaCxcclxuICAgIH07XHJcbn1cclxuXHJcbi8vIG1lcmdlUHJvcHMgXHJcbmNvbnN0IG1lcmdlUHJvcHMgPSAoc3RhdGUsIGRpc3BhdGNoLCBwcm9wcykgPT4ge1xyXG4gICAgLy8g44OV44Kp44O844Kr44K544GV44KM44Gm44GE44KL44Oc44OD44Kv44K55oOF5aCxXHJcbiAgICBsZXQgYm94ID0ge1xyXG4gICAgICAgIGlkOiAnJyxcclxuICAgICAgICB0ZXh0OiB7XHJcbiAgICAgICAgICAgIGt1bWlob2tvOiAnJyxcclxuICAgICAgICAgICAgcGFkZGluZ19qczogJycsXHJcbiAgICAgICAgICAgIHBhZGRpbmdfamU6ICcnLFxyXG4gICAgICAgICAgICBwYWRkaW5nX2dzOiAnJyxcclxuICAgICAgICAgICAgcGFkZGluZ19nZTogJycsXHJcbiAgICAgICAgICAgIHNpemVfajogJycsXHJcbiAgICAgICAgICAgIHNpemVfZzogJycsXHJcbiAgICAgICAgICAgIGd5b2thbjogJycsXHJcbiAgICAgICAgfSxcclxuICAgIH1cclxuICAgIGlmIChzdGF0ZS5mb2N1c2JveC5pZCAhPSAnJykge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RhdGUuYm94cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoc3RhdGUuYm94c1tpXS5pZCA9PSBzdGF0ZS5mb2N1c2JveC5pZCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeiA9IFphaHlvLmNoYW5nZVJlY3RUb0FyZWEoc3RhdGUuYm94c1tpXS54MSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLmJveHNbaV0ueTEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5ib3hzW2ldLngyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuYm94c1tpXS55Mik7XHJcbiAgICAgICAgICAgICAgICBib3ggPSBzdGF0ZS5ib3hzW2ldO1xyXG4gICAgICAgICAgICAgICAgYm94LnggPSB6Lng7XHJcbiAgICAgICAgICAgICAgICBib3gueSA9IHoueTtcclxuICAgICAgICAgICAgICAgIGJveC53ID0gei53O1xyXG4gICAgICAgICAgICAgICAgYm94LmggPSB6Lmg7XHJcblxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAvLyB4eHg6IHl5eSxcclxuICAgICAgICAvLyBvblh4eHg6ICh4eHgpID0+IHtcclxuICAgICAgICAvLyAgICAgLi4uLi5cclxuICAgICAgICAvLyAgICAgZGlzcGF0Y2guZGlzcGF0Y2goU1VfWHh4eHh4X1h4eHh4X1h4eHgoKSk7XHJcbiAgICAgICAgLy8gfSxcclxuICAgICAgICAvLyAuLi5wcm9wcyxcclxuICAgICAgICBib3g6IGJveCxcclxuICAgICAgICBvbkNsaWNrVXBkYXRlQnV0dG9uOiAocGF5bG9hZCkgPT4ge1xyXG4gICAgICAgICAgICBkaXNwYXRjaC5kaXNwYXRjaChTVV9Ub29sQm94VGV4dERhdGFfVXBkYXRlQnV0dG9uX0NsaWNrKHBheWxvYWQpKTtcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxyXG5cclxuLy8gY29ubmVjdFxyXG5jb25zdCBUb29sQm94VGV4dERhdGFNYXAgPSBjb25uZWN0KFxyXG4gICAgbWFwU3RhdGVUb1Byb3BzLFxyXG4gICAgbWFwRGlzcGF0Y2hUb1Byb3BzLFxyXG4gICAgbWVyZ2VQcm9wc1xyXG4pKFRvb2xCb3hUZXh0RGF0YSk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBUb29sQm94VGV4dERhdGFNYXA7XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcblxyXG5pbXBvcnQgeyBTdHJpbmcgfSBmcm9tICcuLi9saWJzL3N0cmluZy5qcyc7XHJcblxyXG5jb25zdCBzdHlsZXMgPSB7XHJcbiAgICBjb250YWluZXI6IHtcclxuICAgICAgICB0ZXh0QWxpZ246ICdsZWZ0JyxcclxuICAgIH0sXHJcbiAgICBsaW5lOiB7XHJcbiAgICAgICAgaGVpZ2h0OiAnMjBweCcsXHJcbiAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcclxuICAgICAgICBsaW5lSGVpZ2h0OiAnMjBweCcsXHJcbiAgICB9LFxyXG4gICAgYnV0dG9uOiB7XHJcbiAgICAgICAgd2lkdGg6ICc0MHB4JyxcclxuICAgICAgICBoZWlnaHQ6ICcxNHB4JyxcclxuICAgICAgICBmb250U2l6ZTogJzEycHgnLFxyXG4gICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXHJcbiAgICAgICAgbGluZUhlaWdodDogJzE0cHgnLFxyXG4gICAgICAgIGJvcmRlcjogJzFweCBzb2xpZCBncmF5JyxcclxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdsaWdodGdyZWVuJyxcclxuICAgICAgICBib3JkZXJSYWRpdXM6ICcycHgnLFxyXG4gICAgfSxcclxuICAgIGlucHV0OiB7XHJcbiAgICAgICAgaGVpZ2h0OiAnOXB4JyxcclxuICAgIH0sXHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUb29sQm94Qm94RGF0YSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKTtcclxuXHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgICAgICAgaWQ6IHByb3BzLmJveC5pZCxcclxuICAgICAgICAgICAgdHlwZTogcHJvcHMuYm94LnR5cGUsXHJcbiAgICAgICAgICAgIGdyb3VwOiBwcm9wcy5ib3guZ3JvdXAsXHJcbiAgICAgICAgICAgIG5vOiBwcm9wcy5ib3gubm8sXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgaWQ6IG5leHRQcm9wcy5ib3guaWQsXHJcbiAgICAgICAgICAgIHR5cGU6IG5leHRQcm9wcy5ib3gudHlwZSxcclxuICAgICAgICAgICAgZ3JvdXA6IG5leHRQcm9wcy5ib3guZ3JvdXAsXHJcbiAgICAgICAgICAgIG5vOiBuZXh0UHJvcHMuYm94Lm5vLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGNsaWNrVXBkYXRlQnV0dG9uKCkge1xyXG4gICAgICAgIGxldCBib3ggPSB0aGlzLnByb3BzLmJveDtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuYm94LmlkID09PSAnJ1xyXG4gICAgICAgICB8fCB0aGlzLnByb3BzLmJveC50eXBlID09PSAnJ1xyXG4gICAgICAgICB8fCB0aGlzLnN0YXRlLmdyb3VwID09PSAnJ1xyXG4gICAgICAgICB8fCB0aGlzLnN0YXRlLm5vID09PSAnJykge1xyXG4gICAgICAgICAgICAgYWxlcnQoJ+WFqOOBpuOBrumgheebruOCkuWFpeWKm+OBl+OBpuOBj+OBoOOBleOBhCcpO1xyXG4gICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYm94LmlkID0gdGhpcy5wcm9wcy5ib3guaWQ7XHJcbiAgICAgICAgYm94LnR5cGUgPSB0aGlzLnByb3BzLmJveC50eXBlO1xyXG4gICAgICAgIGJveC5ncm91cCA9IHRoaXMuc3RhdGUuZ3JvdXA7XHJcbiAgICAgICAgYm94Lm5vID0gdGhpcy5zdGF0ZS5ubztcclxuXHJcbiAgICAgICAgdGhpcy5wcm9wcy5vbkNsaWNrVXBkYXRlQnV0dG9uKHtcclxuICAgICAgICAgICAgYm94OiBib3gsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xpY2tEZWxldGVCdXR0b24oKSB7XHJcbiAgICAgICAgaWYgKGNvbmZpcm0oJ+ODnOODg+OCr+OCueOCkuWJiumZpOOBl+OBvuOBmeOAguOCiOOCjeOBl+OBhOOBp+OBmeOBi++8nycpID09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMucHJvcHMub25DbGlja0RlbGV0ZUJ1dHRvbih7XHJcbiAgICAgICAgICAgIGlkOiB0aGlzLnN0YXRlLmlkLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGNsaWNrQ3JlYXRlQnV0dG9uKCkge1xyXG4gICAgICAgIGxldCBib3ggPSB0aGlzLnByb3BzLmJveDtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuaWQgPT09ICcnXHJcbiAgICAgICAgIHx8IHRoaXMuc3RhdGUudHlwZSA9PT0gJydcclxuICAgICAgICAgfHwgdGhpcy5zdGF0ZS5ncm91cCA9PT0gJydcclxuICAgICAgICAgfHwgdGhpcy5zdGF0ZS5ubyA9PT0gJycpIHtcclxuICAgICAgICAgICAgYWxlcnQoJ+WFqOOBpuOBrumgheebruOCkuWFpeWKm+OBl+OBpuOBj+OBoOOBleOBhCcpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBJROOBjOaXouWtmOOBruWgtOWQiOOBr+OAgeS9nOaIkOOBp+OBjeOBquOBhFxyXG4gICAgICAgIGlmICh0aGlzLnByb3BzLmNoZWNrS2l6b25JZCh0aGlzLnN0YXRlLmlkKSkge1xyXG4gICAgICAgICAgICBhbGVydCgn44GT44Gu44Oc44OD44Kv44K5SUTjga/ml6LjgavlrZjlnKjjgZfjgb7jgZknKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUudHlwZSAhPSAndGV4dCcpIHtcclxuICAgICAgICAgICAgYWxlcnQoJ+OAjOOCv+OCpOODl+OAjeOBryB0ZXh0IOOBqOWFpeWKm+OBl+OBpuOBj+OBoOOBleOBhCcpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBib3guaWQgPSB0aGlzLnN0YXRlLmlkO1xyXG4gICAgICAgIGJveC50eXBlID0gdGhpcy5zdGF0ZS50eXBlO1xyXG4gICAgICAgIGJveC5ncm91cCA9IHRoaXMuc3RhdGUuZ3JvdXA7XHJcbiAgICAgICAgYm94Lm5vID0gdGhpcy5zdGF0ZS5ubztcclxuXHJcbiAgICAgICAgdGhpcy5wcm9wcy5vbkNsaWNrQ3JlYXRlQnV0dG9uKHtcclxuICAgICAgICAgICAgYm94OiBib3gsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgaGVuc2h1KCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgIHN0eWxlPXtzdHlsZXMuY29udGFpbmVyfVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgLi4uc3R5bGVzLmxpbmVcclxuICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIOODnOODg+OCr+OCuUlEOlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogJzlweCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICc5cHgnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnbGlnaHRncmF5JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KGUpID0+IHRoaXMuY2xpY2tEZWxldGVCdXR0b24oKX1cclxuICAgICAgICAgICAgICAgICAgICA+4pyVPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICZuYnNwO1xyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPXt7Zm9udFdlaWdodDogJ2JvbGQnLCBjb2xvcjogJ2JsdWUnfX0+e3RoaXMucHJvcHMuYm94LmlkfTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnN0eWxlcy5saW5lXHJcbiAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICDjgr/jgqTjg5fvvJogPHNwYW4gc3R5bGU9e3tjb2xvcjogJ2dyZWVuJ319Pnt0aGlzLnByb3BzLmJveC50eXBlfTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnN0eWxlcy5saW5lXHJcbiAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICDvvbjvvp7vvpnvvbDvvozvvp/lkI0gPGlucHV0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLmdyb3VwfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7Li4uc3R5bGVzLmlucHV0LCB3aWR0aDogJzEwMHB4J319XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiB0aGlzLnNldFN0YXRlKHtncm91cDogZS50YXJnZXQudmFsdWV9KX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5zdHlsZXMubGluZVxyXG4gICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgTm8uPGlucHV0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5ub31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7Li4uc3R5bGVzLmlucHV0LCB3aWR0aDogJzIwcHgnfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gdGhpcy5zZXRTdGF0ZSh7bm86IFN0cmluZy50b051bWVyaWMoZS50YXJnZXQudmFsdWUpfSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5zdHlsZXMubGluZSxcclxuICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIHg6e3RoaXMucHJvcHMuYm94Lnh9IHk6e3RoaXMucHJvcHMuYm94Lnl9IHc6e3RoaXMucHJvcHMuYm94Lnd9IGg6e3RoaXMucHJvcHMuYm94Lmh9XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5zdHlsZXMubGluZSxcclxuICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLnN0eWxlcy5idXR0b24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbG9hdDogJ3JpZ2h0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gdGhpcy5jbGlja1VwZGF0ZUJ1dHRvbigpfVxyXG4gICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAg5pu05pawXHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBzaGlua2koKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgc3R5bGU9e3N0eWxlcy5jb250YWluZXJ9XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5zdHlsZXMubGluZVxyXG4gICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAg44Oc44OD44Kv44K5SUQ6IDxpbnB1dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5pZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17ey4uLnN0eWxlcy5pbnB1dCwgd2lkdGg6ICc1MHB4J319XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiB0aGlzLnNldFN0YXRlKHtpZDogZS50YXJnZXQudmFsdWV9KX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5zdHlsZXMubGluZVxyXG4gICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAg44K/44Kk44OX77yaIDxpbnB1dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS50eXBlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7Li4uc3R5bGVzLmlucHV0LCB3aWR0aDogJzUwcHgnfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IHRoaXMuc2V0U3RhdGUoe3R5cGU6IGUudGFyZ2V0LnZhbHVlfSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgLi4uc3R5bGVzLmxpbmVcclxuICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIO+9uO++nu++me+9sO++jO++n+WQjSA8aW5wdXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUuZ3JvdXB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3suLi5zdHlsZXMuaW5wdXQsIHdpZHRoOiAnMTAwcHgnfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IHRoaXMuc2V0U3RhdGUoe2dyb3VwOiBlLnRhcmdldC52YWx1ZX0pfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnN0eWxlcy5saW5lXHJcbiAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICBOby48aW5wdXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLm5vfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3suLi5zdHlsZXMuaW5wdXQsIHdpZHRoOiAnMjBweCd9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiB0aGlzLnNldFN0YXRlKHtubzogU3RyaW5nLnRvTnVtZXJpYyhlLnRhcmdldC52YWx1ZSl9KX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnN0eWxlcy5saW5lLFxyXG4gICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnN0eWxlcy5saW5lLFxyXG4gICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uc3R5bGVzLmJ1dHRvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAnNjBweCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbG9hdDogJ3JpZ2h0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gdGhpcy5jbGlja0NyZWF0ZUJ1dHRvbigpfVxyXG4gICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAg5paw6KaP5L2c5oiQXHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgbGV0IGh0bWw7XHJcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuYm94LmlkID09ICcnKSB7XHJcbiAgICAgICAgICAgIGh0bWwgPSB0aGlzLnNoaW5raSgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGh0bWwgPSB0aGlzLmhlbnNodSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgaHRtbCAgXHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcclxuXHJcbmltcG9ydCBUb29sQm94Qm94RGF0YSBmcm9tICcuL1Rvb2xCb3hCb3hEYXRhLmpzJztcclxuXHJcbmltcG9ydCB7IFphaHlvIH0gZnJvbSAnLi4vbGlicy96YWh5by5qcyc7XHJcblxyXG5pbXBvcnQge1xyXG4gICAgU1VfVG9vbEJveEJveERhdGFfVXBkYXRlQnV0dG9uX0NsaWNrLFxyXG4gICAgU1VfVG9vbEJveEJveERhdGFfRGVsZXRlQnV0dG9uX0NsaWNrLFxyXG4gICAgU1VfVG9vbEJveEJveERhdGFfQ3JlYXRlQnV0dG9uX0NsaWNrLFxyXG59IGZyb20gJy4uL2FjdGlvbnNfc3UvdG9vbGJveGJveGRhdGEuanMnO1xyXG5cclxuXHJcbi8vIG1hcFN0YXRlVG9Qcm9wc1xyXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSAoc3RhdGUsIHByb3BzKSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIC4uLnN0YXRlLFxyXG4gICAgfTtcclxufVxyXG5cclxuLy8gbWFwRGlzcGF0Y2hUb1Byb3BzXHJcbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcyA9IChkaXNwYXRjaCwgcHJvcHMpID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZGlzcGF0Y2gsXHJcbiAgICB9O1xyXG59XHJcblxyXG4vLyBtZXJnZVByb3BzIFxyXG5jb25zdCBtZXJnZVByb3BzID0gKHN0YXRlLCBkaXNwYXRjaCwgcHJvcHMpID0+IHtcclxuICAgIC8vIOODleOCqeODvOOCq+OCueOBleOCjOOBpuOBhOOCi+ODnOODg+OCr+OCueaDheWgsVxyXG4gICAgbGV0IGJveCA9IHtcclxuICAgICAgICBpZDogJycsXHJcbiAgICAgICAgdHlwZTogJycsXHJcbiAgICAgICAgZ3JvdXA6ICcnLFxyXG4gICAgICAgIG5vOiAnJyxcclxuICAgICAgICB0ZXh0OiB7XHJcbiAgICAgICAgICAgIGt1bWlob2tvOiAnJyxcclxuICAgICAgICAgICAgcGFkZGluZ19qczogJycsXHJcbiAgICAgICAgICAgIHBhZGRpbmdfamU6ICcnLFxyXG4gICAgICAgICAgICBwYWRkaW5nX2dzOiAnJyxcclxuICAgICAgICAgICAgcGFkZGluZ19nZTogJycsXHJcbiAgICAgICAgICAgIHNpemVfajogJycsXHJcbiAgICAgICAgICAgIHNpemVfZzogJycsXHJcbiAgICAgICAgICAgIGd5b2thbjogJycsXHJcbiAgICAgICAgfSxcclxuICAgIH1cclxuICAgIGlmIChzdGF0ZS5mb2N1c2JveC5pZCAhPSAnJykge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RhdGUuYm94cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoc3RhdGUuYm94c1tpXS5pZCA9PSBzdGF0ZS5mb2N1c2JveC5pZCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeiA9IFphaHlvLmNoYW5nZVJlY3RUb0FyZWEoc3RhdGUuYm94c1tpXS54MSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLmJveHNbaV0ueTEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5ib3hzW2ldLngyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuYm94c1tpXS55Mik7XHJcbiAgICAgICAgICAgICAgICBib3ggPSBzdGF0ZS5ib3hzW2ldO1xyXG4gICAgICAgICAgICAgICAgYm94LnggPSB6Lng7XHJcbiAgICAgICAgICAgICAgICBib3gueSA9IHoueTtcclxuICAgICAgICAgICAgICAgIGJveC53ID0gei53O1xyXG4gICAgICAgICAgICAgICAgYm94LmggPSB6Lmg7XHJcblxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAvLyB4eHg6IHl5eSxcclxuICAgICAgICAvLyBvblh4eHg6ICh4eHgpID0+IHtcclxuICAgICAgICAvLyAgICAgLi4uLi5cclxuICAgICAgICAvLyAgICAgZGlzcGF0Y2guZGlzcGF0Y2goU1VfWHh4eHh4X1h4eHh4X1h4eHgoKSk7XHJcbiAgICAgICAgLy8gfSxcclxuICAgICAgICAvLyAuLi5wcm9wcyxcclxuICAgICAgICBib3g6IGJveCxcclxuICAgICAgICBvbkNsaWNrVXBkYXRlQnV0dG9uOiAocGF5bG9hZCkgPT4ge1xyXG4gICAgICAgICAgICBkaXNwYXRjaC5kaXNwYXRjaChTVV9Ub29sQm94Qm94RGF0YV9VcGRhdGVCdXR0b25fQ2xpY2socGF5bG9hZCkpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25DbGlja0RlbGV0ZUJ1dHRvbjogKHBheWxvYWQpID0+IHtcclxuICAgICAgICAgICAgZGlzcGF0Y2guZGlzcGF0Y2goU1VfVG9vbEJveEJveERhdGFfRGVsZXRlQnV0dG9uX0NsaWNrKHBheWxvYWQpKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uQ2xpY2tDcmVhdGVCdXR0b246IChwYXlsb2FkKSA9PiB7XHJcbiAgICAgICAgICAgIGRpc3BhdGNoLmRpc3BhdGNoKFNVX1Rvb2xCb3hCb3hEYXRhX0NyZWF0ZUJ1dHRvbl9DbGljayhwYXlsb2FkKSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgY2hlY2tLaXpvbklkOiAoaWQpID0+IHtcclxuY29uc29sZS5sb2coJ29rMScpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0YXRlLmJveHMubGVuZ3RoOyBpKyspIHtcclxuY29uc29sZS5sb2coJ29rMicpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlLmJveHNbaV0uaWQgPT0gaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XHJcblxyXG4vLyBjb25uZWN0XHJcbmNvbnN0IFRvb2xCb3hCb3hEYXRhTWFwID0gY29ubmVjdChcclxuICAgIG1hcFN0YXRlVG9Qcm9wcyxcclxuICAgIG1hcERpc3BhdGNoVG9Qcm9wcyxcclxuICAgIG1lcmdlUHJvcHNcclxuKShUb29sQm94Qm94RGF0YSk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBUb29sQm94Qm94RGF0YU1hcDtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuXHJcbmNvbnN0IHN0eWxlcyA9IHtcclxuICAgIGNvbnRhaW5lcjoge1xyXG4gICAgICAgIHRleHRBbGlnbjogJ2xlZnQnLFxyXG4gICAgfSxcclxuICAgIHBlcjoge1xyXG4gICAgICAgIHdpZHRoOiAnNDBweCcsXHJcbiAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcclxuICAgICAgICB0ZXh0QWxpZ246ICdsZWZ0JyxcclxuICAgICAgICBsaW5lSGVpZ2h0OiAnMjBweCcsXHJcbiAgICB9LFxyXG4gICAgYnV0dG9uOiB7XHJcbiAgICAgICAgbWFyZ2luVG9wOiAnMnB4JyxcclxuICAgICAgICB3aWR0aDogJzM4cHgnLFxyXG4gICAgICAgIGhlaWdodDogJzE0cHgnLFxyXG4gICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXHJcbiAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcclxuICAgICAgICBsaW5lSGVpZ2h0OiAnMTRweCcsXHJcbiAgICAgICAgYm9yZGVyOiAnMXB4IHNvbGlkICMzMzMnLFxyXG4gICAgICAgIGJvcmRlclJhZGl1czogJzJweCcsXHJcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnbGlnaHRncmVlbicsXHJcbiAgICAgICAgdXNlclNlbGVjdDogJ25vbmUnLFxyXG4gICAgfSxcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRvb2xCb3hTY2FsZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgc3R5bGU9e3N0eWxlcy5jb250YWluZXJ9XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAuLi5zdHlsZXMucGVyLFxyXG4gICAgICAgICAgICAgICAgICAgIGZsb2F0OiAnbGVmdCcsXHJcbiAgICAgICAgICAgICAgICB9fT5cclxuICAgICAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5zY2FsZX0gJVxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgLi4uc3R5bGVzLmJ1dHRvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmxvYXQ6ICdyaWdodCcsXHJcbiAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB0aGlzLnByb3BzLm9uQ2xpY2sxMDBQZXJCdXR0b24oKX1cclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAxMDAlXHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5zdHlsZXMuYnV0dG9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmbG9hdDogJ3JpZ2h0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luUmlnaHQ6ICc1cHgnLFxyXG4gICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gdGhpcy5wcm9wcy5vbkNsaWNrTWF4QnV0dG9uKCl9XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAg5ouh5aSnXHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5zdHlsZXMuYnV0dG9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmbG9hdDogJ3JpZ2h0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luUmlnaHQ6ICc1cHgnLFxyXG4gICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gdGhpcy5wcm9wcy5vbkNsaWNrTWluQnV0dG9uKCl9XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAg57iu5bCPXHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcclxuXHJcbmltcG9ydCBUb29sQm94U2NhbGUgZnJvbSAnLi9Ub29sQm94U2NhbGUuanMnO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIFNVX1Rvb2xCb3hTY2FsZV9NaW5CdXR0b25fQ2xpY2ssXHJcbiAgICBTVV9Ub29sQm94U2NhbGVfTWF4QnV0dG9uX0NsaWNrLFxyXG4gICAgU1VfVG9vbEJveFNjYWxlXzEwMFBlckJ1dHRvbl9DbGljayxcclxufSBmcm9tICcuLi9hY3Rpb25zX3N1L3Rvb2xib3hzY2FsZS5qcyc7XHJcblxyXG5cclxuLy8gbWFwU3RhdGVUb1Byb3BzXHJcbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZSwgcHJvcHMpID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgLi4uc3RhdGUsXHJcbiAgICB9O1xyXG59XHJcblxyXG4vLyBtYXBEaXNwYXRjaFRvUHJvcHNcclxuY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0gKGRpc3BhdGNoLCBwcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBkaXNwYXRjaCxcclxuICAgIH07XHJcbn1cclxuXHJcbi8vIG1lcmdlUHJvcHMgXHJcbmNvbnN0IG1lcmdlUHJvcHMgPSAoc3RhdGUsIGRpc3BhdGNoLCBwcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAvLyB4eHg6IHl5eSxcclxuICAgICAgICAvLyBvblh4eHg6ICh4eHgpID0+IHtcclxuICAgICAgICAvLyAgICAgLi4uLi5cclxuICAgICAgICAvLyAgICAgZGlzcGF0Y2guZGlzcGF0Y2goU1VfWHh4eHh4X1h4eHh4X1h4eHgoKSk7XHJcbiAgICAgICAgLy8gfSxcclxuICAgICAgICAvLyAuLi5wcm9wcyxcclxuICAgICAgICBzY2FsZTogc3RhdGUuc2NhbGUsXHJcbiAgICAgICAgb25DbGlja01pbkJ1dHRvbjogKCkgPT4ge1xyXG4gICAgICAgICAgICBkaXNwYXRjaC5kaXNwYXRjaChTVV9Ub29sQm94U2NhbGVfTWluQnV0dG9uX0NsaWNrKCkpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25DbGlja01heEJ1dHRvbjogKCkgPT4ge1xyXG4gICAgICAgICAgICBkaXNwYXRjaC5kaXNwYXRjaChTVV9Ub29sQm94U2NhbGVfTWF4QnV0dG9uX0NsaWNrKCkpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25DbGljazEwMFBlckJ1dHRvbjogKCkgPT4ge1xyXG4gICAgICAgICAgICBkaXNwYXRjaC5kaXNwYXRjaChTVV9Ub29sQm94U2NhbGVfMTAwUGVyQnV0dG9uX0NsaWNrKCkpO1xyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XHJcblxyXG4vLyBjb25uZWN0XHJcbmNvbnN0IFRvb2xCb3hTY2FsZU1hcCA9IGNvbm5lY3QoXHJcbiAgICBtYXBTdGF0ZVRvUHJvcHMsXHJcbiAgICBtYXBEaXNwYXRjaFRvUHJvcHMsXHJcbiAgICBtZXJnZVByb3BzXHJcbikoVG9vbEJveFNjYWxlKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFRvb2xCb3hTY2FsZU1hcDtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuXHJcbmNvbnN0IHN0eWxlcyA9IHtcclxuICAgIGNvbnRhaW5lcjoge1xyXG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxyXG4gICAgICAgIGJvcmRlclJhZGl1czogJzVweCcsXHJcbiAgICAgICAgYm94U2hhZG93OiAnMCAwIDJweCBncmF5JyxcclxuICAgIH0sXHJcbiAgICB0aXRsZToge1xyXG4gICAgICAgIHdpZHRoOiAnY2FsYygxMDAlIC0gMnB4IC0gMjBweCknLFxyXG4gICAgICAgIGhlaWdodDogJzE4cHgnLFxyXG4gICAgICAgIGJvcmRlcjogJzFweCBzb2xpZCBncmF5JyxcclxuICAgICAgICBwYWRkaW5nOiAnMHB4IDEwcHgnLFxyXG4gICAgICAgIGZvbnRTaXplOiAnMTJweCcsXHJcbiAgICAgICAgbGluZUhlaWdodDogJzE4cHgnLFxyXG4gICAgICAgIGNvbG9yOiAnIzMzMycsXHJcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnNXB4IDVweCAwIDAnLFxyXG4gICAgICAgIHRleHRBbGlnbjogJ2xlZnQnLFxyXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJyNhMWJkZTgnLFxyXG4gICAgICAgIHVzZXJTZWxlY3Q6ICdub25lJyxcclxuXHJcbiAgICB9LFxyXG4gICAgYm9keToge1xyXG4gICAgICAgIHdpZHRoOiAnY2FsYygxMDAlIC0gMnB4IC0gMjBweCknLFxyXG4gICAgICAgIHBhZGRpbmc6ICcwcHggMTBweCcsXHJcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnMCAwIDVweCA1cHgnLFxyXG4gICAgICAgIGJvcmRlckxlZnQ6ICcxcHggc29saWQgZ3JheScsXHJcbiAgICAgICAgYm9yZGVyUmlnaHQ6ICcxcHggc29saWQgZ3JheScsXHJcbiAgICAgICAgYm9yZGVyQm90dG9tOiAnMXB4IHNvbGlkIGdyYXknLFxyXG4gICAgICAgIGZvbnRTaXplOiAnMTRweCcsXHJcbiAgICAgICAgdGV4dEFsaWduOiAnbGVmdCcsXHJcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnI2YzZjNmNScsXHJcbiAgICAgICAgdXNlclNlbGVjdDogJ25vbmUnLFxyXG4gICAgfSxcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRvb2xCb3ggZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcblxyXG4gICAgICAgIC8vIOW9k+ODhOODvOODq+ODnOODg+OCr+OCueOBruWFg++8iOenu+WLleWJje+8ieOBruW3puS4iuW6p+aomVxyXG4gICAgICAgIHRoaXMuYm94b3JncG9zID0ge1xyXG4gICAgICAgICAgICB4OiBwcm9wcy54LFxyXG4gICAgICAgICAgICB5OiBwcm9wcy55LFxyXG4gICAgICAgIH07XHJcblxyXG5cdFx0Ly8g44Oe44Km44K544OA44Km44Oz5L2N572uXHJcblx0XHR0aGlzLm1vdXNlcG9zID0ge1xyXG5cdFx0XHR4OiAwLFxyXG5cdFx0XHR5OiAwLFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgICAgICAgIHg6IHRoaXMuYm94b3JncG9zLngsXHJcbiAgICAgICAgICAgIHk6IHRoaXMuYm94b3JncG9zLnksXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy5tb3VzZU1vdmUgPSB0aGlzLm1vdXNlTW92ZS5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMubW91c2VVcCAgID0gdGhpcy5tb3VzZVVwLmJpbmQodGhpcyk7ICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xyXG4gICAgICAgIHRoaXMuYm94b3JncG9zID0ge1xyXG4gICAgICAgICAgICB4OiBuZXh0UHJvcHMueCxcclxuICAgICAgICAgICAgeTogbmV4dFByb3BzLnksXHJcbiAgICAgICAgfTsgICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIG1vdXNlRG93bihlKSB7XHJcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTsgICAgLy8g44GT44Gu44Kk44OZ44Oz44OI44KS44GT44Gu44Os44Kk44Ok44O844Gn5q2i44KB44KL44CC5LiL44Os44Kk44Ok44O844Gr44GC44KL6KaB57Sg44Gr44Kk44OZ44Oz44OI44KS6LW344GT44GV44Gq44GEXHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOyAgICAgLy8g44OW44Op44Km44K25qiZ5rqW5qmf6IO944Gu44Kk44OZ44Oz44OI44KS5oqR5q2i44GZ44KLXHJcblxyXG4gICAgICAgIC8vIOODnuOCpuOCueODoOODvOODluOBqOODnuOCpuOCueOCouODg+ODl+OBruOCpOODmeODs+ODiOOCkueZu+mMsuOBmeOCi1xyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMubW91c2VNb3ZlLCBmYWxzZSk7XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsICAgdGhpcy5tb3VzZVVwLCBmYWxzZSk7XHJcblxyXG4gICAgICAgIC8vIOODnuOCpuOCueODgOOCpuODs+OBl+OBn+OCq+ODvOOCveODq+S9jee9ruOCkuOCu+ODg+ODiOOBmeOCi1xyXG4gICAgICAgIHRoaXMubW91c2Vwb3MueCA9IGUucGFnZVg7XHJcbiAgICAgICAgdGhpcy5tb3VzZXBvcy55ID0gZS5wYWdlWTtcclxuICAgIH1cclxuXHJcbiAgICBtb3VzZU1vdmUoZSkge1xyXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7ICAgIC8vIOOBk+OBruOCpOODmeODs+ODiOOCkuOBk+OBruODrOOCpOODpOODvOOBp+atouOCgeOCi+OAguS4i+ODrOOCpOODpOODvOOBq+OBguOCi+imgee0oOOBq+OCpOODmeODs+ODiOOCkui1t+OBk+OBleOBquOBhFxyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTsgICAgIC8vIOODluODqeOCpuOCtuaomea6luapn+iDveOBruOCpOODmeODs+ODiOOCkuaKkeatouOBmeOCi1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIOODnuOCpuOCueODoOODvOODluW+jOOBruOCq+ODvOOCveODq+S9jee9ruOCkuW+l+OCi1xyXG4gICAgICAgIGNvbnN0IG1vdmVYID0gZS5wYWdlWDtcclxuICAgICAgICBjb25zdCBtb3ZlWSA9IGUucGFnZVk7XHJcblxyXG4gICAgICAgIC8vIOW9k+ODnOODg+OCr+OCueOBruaWsOOBn+OBquW6p+aomeOCkuaxguOCgeOCi1xyXG4gICAgICAgIGxldCB4ID0gdGhpcy5ib3hvcmdwb3MueCArIChtb3ZlWCAtIHRoaXMubW91c2Vwb3MueCk7XHJcbiAgICAgICAgbGV0IHkgPSB0aGlzLmJveG9yZ3Bvcy55ICsgKG1vdmVZIC0gdGhpcy5tb3VzZXBvcy55KTtcclxuICAgICAgICBcclxuICAgICAgICAvLyDjgqbjgqPjg7Pjg4njgqbjga7nq6/jgavlvZPjg5zjg4Pjgq/jgrnjgYzooYzjgaPjgZ/loLTlkIjjga7luqfmqJnlpInmj5tcclxuICAgICAgICBjb25zdCBbbngsIG55XSA9IHRoaXMuYm94bW92ZXN0b3AoeCwgeSk7XHJcblxyXG4gICAgICAgIC8vIOeUu+WDj+OBruW6p+aomeOCkuabtOaWsOOBl+OBpuaPj+eUu+OBl+ebtOOBmVxyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICB4OiBueCxcclxuICAgICAgICAgICAgeTogbnksXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgbW91c2VVcChlKSB7XHJcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTsgICAgLy8g44GT44Gu44Kk44OZ44Oz44OI44KS44GT44Gu44Os44Kk44Ok44O844Gn5q2i44KB44KL44CC5LiL44Os44Kk44Ok44O844Gr44GC44KL6KaB57Sg44Gr44Kk44OZ44Oz44OI44KS6LW344GT44GV44Gq44GEXHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOyAgICAgLy8g44OW44Op44Km44K25qiZ5rqW5qmf6IO944Gu44Kk44OZ44Oz44OI44KS5oqR5q2i44GZ44KLXHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8g44Kk44OZ44Oz44OI44KS5YmK6Zmk44GZ44KLXHJcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5tb3VzZU1vdmUpO1xyXG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCAgIHRoaXMubW91c2VVcCk7XHJcblxyXG4gICAgICAgIC8vIOenu+WLlee1guS6huWHpueQhlxyXG4gICAgICAgIHRoaXMucHJvcHMuZW5kTW92ZUJveCh7XHJcbiAgICAgICAgICAgIGlkOiB0aGlzLnByb3BzLmlkLFxyXG4gICAgICAgICAgICB4OiAgdGhpcy5zdGF0ZS54LFxyXG4gICAgICAgICAgICB5OiAgdGhpcy5zdGF0ZS55LFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBib3htb3Zlc3RvcCh4LCB5KSB7XHJcbiAgICAgICAgY29uc3Qgd2luZG93X3cgPSB3aW5kb3cuaW5uZXJXaWR0aDtcclxuICAgICAgICBjb25zdCB3aW5kb3dfaCA9IHdpbmRvdy5pbm5lckhlaWdodDtcclxuXHJcbiAgICAgICAgaWYgKHggKyB0aGlzLnByb3BzLncgPj0gd2luZG93X3cpIHtcclxuICAgICAgICAgICAgeCA9IHdpbmRvd193IC0gdGhpcy5wcm9wcy53O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoeCA8PSAwKSB7XHJcbiAgICAgICAgICAgIHggPSAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHkgKyAyMCA+PSB3aW5kb3dfaCkge1xyXG4gICAgICAgICAgICB5ID0gd2luZG93X2ggLSAyMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHkgPD0gMCkge1xyXG4gICAgICAgICAgICB5ID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIFt4LCB5XTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgLi4uc3R5bGVzLmNvbnRhaW5lciwgXHJcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogICBgJHt0aGlzLnN0YXRlLnh9cHhgLFxyXG4gICAgICAgICAgICAgICAgICAgIHRvcDogICAgYCR7dGhpcy5zdGF0ZS55fXB4YCxcclxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogIGAke3RoaXMucHJvcHMud31weGAsXHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBgJHt0aGlzLnByb3BzLmh9cHhgLFxyXG4gICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9eyhlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlPXtzdHlsZXMudGl0bGV9XHJcbiAgICAgICAgICAgICAgICAgICAgb25Nb3VzZURvd249eyhlKSA9PiB0aGlzLm1vdXNlRG93bihlKX1cclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy50aXRsZX1cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAuLi5zdHlsZXMuYm9keSxcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGBjYWxjKCR7dGhpcy5wcm9wcy5ofXB4IC0gMjBweGAsXHJcbiAgICAgICAgICAgICAgICB9fT5cclxuICAgICAgICAgICAgICAgICAgICB7IHRoaXMucHJvcHMuY2hpbGRyZW4gfVxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIClcclxuICAgIH1cclxufSIsImltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XHJcblxyXG5pbXBvcnQgVG9vbEJveCBmcm9tICcuL1Rvb2xCb3guanMnO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIFNVX1Rvb2xCb3hfTW92ZUVuZCxcclxufSBmcm9tICcuLi9hY3Rpb25zX3N1L3Rvb2xib3guanMnO1xyXG5cclxuXHJcbi8vIG1hcFN0YXRlVG9Qcm9wc1xyXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSAoc3RhdGUsIHByb3BzKSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIC4uLnN0YXRlLFxyXG4gICAgfTtcclxufVxyXG5cclxuLy8gbWFwRGlzcGF0Y2hUb1Byb3BzXHJcbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcyA9IChkaXNwYXRjaCwgcHJvcHMpID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZGlzcGF0Y2gsXHJcbiAgICB9O1xyXG59XHJcblxyXG4vLyBtZXJnZVByb3BzIFxyXG5jb25zdCBtZXJnZVByb3BzID0gKHN0YXRlLCBkaXNwYXRjaCwgcHJvcHMpID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgLy8geHh4OiB5eXksXHJcbiAgICAgICAgLy8gb25YeHh4OiAoeHh4KSA9PiB7XHJcbiAgICAgICAgLy8gICAgIC4uLi4uXHJcbiAgICAgICAgLy8gICAgIGRpc3BhdGNoLmRpc3BhdGNoKFNVX1h4eHh4eF9YeHh4eF9YeHh4KCkpO1xyXG4gICAgICAgIC8vIH0sXHJcbiAgICAgICAgLi4ucHJvcHMsXHJcblxyXG4gICAgICAgIGVuZE1vdmVCb3g6IChwYXlsb2FkKSA9PiB7XHJcbiAgICAgICAgICAgIGRpc3BhdGNoLmRpc3BhdGNoKFNVX1Rvb2xCb3hfTW92ZUVuZChwYXlsb2FkKSk7XHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuXHJcbi8vIGNvbm5lY3RcclxuY29uc3QgVG9vbEJveE1hcCA9IGNvbm5lY3QoXHJcbiAgICBtYXBTdGF0ZVRvUHJvcHMsXHJcbiAgICBtYXBEaXNwYXRjaFRvUHJvcHMsXHJcbiAgICBtZXJnZVByb3BzXHJcbikoVG9vbEJveCk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBUb29sQm94TWFwO1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5cclxuaW1wb3J0IHsgWmFoeW8gfSBmcm9tICcuLi9saWJzL3phaHlvLmpzJztcclxuaW1wb3J0IHsgRGVmaW5lIH0gZnJvbSAnLi4vZGVmaW5lLmpzJztcclxuXHJcbmNvbnN0IHN0eWxlcyA9IHtcclxuXHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZWxlY3RTb25vdGFCb3ggZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcblxyXG4gICAgICAgIHRoaXMuYm94Q2xpY2sgPSB0aGlzLmJveENsaWNrLmJpbmQodGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7XHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYCR7dGhpcy5wcm9wcy5pZH1fc2VsZWN0Ym94YCkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmJveENsaWNrLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgYm94Q2xpY2soZSkge1xyXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7ICAgIC8vIOOBk+OBruOCpOODmeODs+ODiOOCkuOBk+OBruODrOOCpOODpOODvOOBp+atouOCgeOCi+OAguS4i+ODrOOCpOODpOODvOOBq+OBguOCi+imgee0oOOBq+OCpOODmeODs+ODiOOCkui1t+OBk+OBleOBquOBhFxyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTsgICAgIC8vIOODluODqeOCpuOCtuaomea6luapn+iDveOBruOCpOODmeODs+ODiOOCkuaKkeatouOBmeOCi1xyXG5cclxuICAgICAgICB0aGlzLnByb3BzLm9uQ2xpY2tCb3goe1xyXG4gICAgICAgICAgICBpZDogICAgdGhpcy5wcm9wcy5pZCxcclxuICAgICAgICAgICAgdHlwZTogIHRoaXMucHJvcHMudHlwZSxcclxuICAgICAgICAgICAgZ3JvdXA6IHRoaXMucHJvcHMuZ3JvdXAsXHJcbiAgICAgICAgICAgIG5vOiAgICB0aGlzLnByb3BzLm5vLFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBjb25zdCB6ID0gWmFoeW8ucnVUb2x1UmVjdFRvQXJlYSh0aGlzLnByb3BzLngxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMueTEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy54MixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLnkyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlZmluZS5zdmdpbWFnZXNpemUud2lkdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVmaW5lLnN2Z2ltYWdlc2l6ZS5oZWlnaHQpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxnPlxyXG4gICAgICAgICAgICAgICAgPHJlY3RcclxuICAgICAgICAgICAgICAgICAgICBpZD17YCR7dGhpcy5wcm9wcy5pZH1fc2VsZWN0Ym94YH1cclxuICAgICAgICAgICAgICAgICAgICB4PXt6Lnh9XHJcbiAgICAgICAgICAgICAgICAgICAgeT17ei55fVxyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoPXt6Lnd9XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PXt6Lmh9XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsbDogJ2JsYWNrJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6ICcwLjAnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2ZpbGw6ICdub25lJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9zdHJva2U6ICdibHVlJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9zdHJva2VXaWR0aDogMixcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiAnbm9uZScsXHJcbiAgICAgICAgICAgICAgICAgICAgfX1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gb25Nb3VzZVVwPXsoZSkgPT4gdGhpcy5ib3hDbGljayhlKX1cclxuICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgIDwvZz4gXHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XHJcblxyXG5pbXBvcnQgU2VsZWN0U29ub3RhQm94IGZyb20gJy4vU2VsZWN0U29ub3RhQm94LmpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBTVV9TZWxlY3RCb3hfQm94X1NlbGVjdCxcclxufSBmcm9tICcuLi9hY3Rpb25zX3N1L3NlbGVjdGJveC5qcyc7XHJcblxyXG5cclxuLy8gbWFwU3RhdGVUb1Byb3BzXHJcbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZSwgcHJvcHMpID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgLi4uc3RhdGUsXHJcbiAgICB9O1xyXG59XHJcblxyXG4vLyBtYXBEaXNwYXRjaFRvUHJvcHNcclxuY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0gKGRpc3BhdGNoLCBwcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBkaXNwYXRjaCxcclxuICAgIH07XHJcbn1cclxuXHJcbi8vIG1lcmdlUHJvcHMgXHJcbmNvbnN0IG1lcmdlUHJvcHMgPSAoc3RhdGUsIGRpc3BhdGNoLCBwcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAvLyB4eHg6IHl5eSxcclxuICAgICAgICAvLyBvblh4eHg6ICh4eHgpID0+IHtcclxuICAgICAgICAvLyAgICAgLi4uLi5cclxuICAgICAgICAvLyAgICAgZGlzcGF0Y2guZGlzcGF0Y2goU1VfWHh4eHh4X1h4eHh4X1h4eHgoKSk7XHJcbiAgICAgICAgLy8gfSxcclxuICAgICAgICAuLi5wcm9wcyxcclxuICAgICAgICBvbkNsaWNrQm94OiAocGF5bG9hZCkgPT4ge1xyXG4gICAgICAgICAgICBkaXNwYXRjaC5kaXNwYXRjaChTVV9TZWxlY3RCb3hfQm94X1NlbGVjdChwYXlsb2FkKSk7XHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuXHJcbi8vIGNvbm5lY3RcclxuY29uc3QgU2VsZWN0U29ub3RhQm94TWFwID0gY29ubmVjdChcclxuICAgIG1hcFN0YXRlVG9Qcm9wcyxcclxuICAgIG1hcERpc3BhdGNoVG9Qcm9wcyxcclxuICAgIG1lcmdlUHJvcHNcclxuKShTZWxlY3RTb25vdGFCb3gpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgU2VsZWN0U29ub3RhQm94TWFwO1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5cclxuaW1wb3J0IHsgWmFoeW8gfSBmcm9tICcuLi9saWJzL3phaHlvLmpzJztcclxuaW1wb3J0IHsgRGVmaW5lIH0gZnJvbSAnLi4vZGVmaW5lLmpzJztcclxuXHJcbmNvbnN0IHN0eWxlcyA9IHtcclxuXHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZWxlY3RHcm91cEJveCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKTtcclxuXHJcbiAgICAgICAgdGhpcy5ib3hDbGljayA9IHRoaXMuYm94Q2xpY2suYmluZCh0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgJHt0aGlzLnByb3BzLmlkfV9zZWxlY3Rib3hgKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuYm94Q2xpY2ssIGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICBib3hDbGljayhlKSB7XHJcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTsgICAgLy8g44GT44Gu44Kk44OZ44Oz44OI44KS44GT44Gu44Os44Kk44Ok44O844Gn5q2i44KB44KL44CC5LiL44Os44Kk44Ok44O844Gr44GC44KL6KaB57Sg44Gr44Kk44OZ44Oz44OI44KS6LW344GT44GV44Gq44GEXHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOyAgICAgLy8g44OW44Op44Km44K25qiZ5rqW5qmf6IO944Gu44Kk44OZ44Oz44OI44KS5oqR5q2i44GZ44KLXHJcblxyXG4gICAgICAgIHRoaXMucHJvcHMub25DbGlja0JveCh7XHJcbiAgICAgICAgICAgIGlkOiAgICB0aGlzLnByb3BzLmlkLFxyXG4gICAgICAgICAgICB0eXBlOiAgdGhpcy5wcm9wcy50eXBlLFxyXG4gICAgICAgICAgICBncm91cDogdGhpcy5wcm9wcy5ncm91cCxcclxuICAgICAgICAgICAgbm86ICAgIHRoaXMucHJvcHMubm8sXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBcclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBjb25zdCB6ID0gWmFoeW8ucnVUb2x1UmVjdFRvQXJlYSh0aGlzLnByb3BzLngxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMueTEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy54MixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLnkyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlZmluZS5zdmdpbWFnZXNpemUud2lkdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVmaW5lLnN2Z2ltYWdlc2l6ZS5oZWlnaHQpO1xyXG5cclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8Zz5cclxuICAgICAgICAgICAgICAgIDxyZWN0XHJcbiAgICAgICAgICAgICAgICAgICAgaWQ9e2Ake3RoaXMucHJvcHMuaWR9X3NlbGVjdGJveGB9XHJcbiAgICAgICAgICAgICAgICAgICAgeD17ei54fVxyXG4gICAgICAgICAgICAgICAgICAgIHk9e3oueX1cclxuICAgICAgICAgICAgICAgICAgICB3aWR0aD17ei53fVxyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodD17ei5ofVxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw6ICdibHVlJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6ICcwLjMnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2ZpbGw6ICdub25lJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9zdHJva2U6ICdibHVlJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9zdHJva2VXaWR0aDogMixcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiAnbm9uZScsXHJcbiAgICAgICAgICAgICAgICAgICAgfX1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gb25Nb3VzZVVwPXsoZSkgPT4gdGhpcy5ib3hDbGljayhlKX1cclxuICAgICAgICAgICAgICAgIC8+XHJcblxyXG4gICAgICAgICAgICAgICAgey8qIOOCsOODq+ODvOODl05vICovfVxyXG4gICAgICAgICAgICAgICAgPHRleHRcclxuICAgICAgICAgICAgICAgICAgICB4PXt6LnggKyA1fVxyXG4gICAgICAgICAgICAgICAgICAgIHk9e3oueSArIDIwfVxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAxNSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiAnbm9uZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw6ICd3aGl0ZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAnMC43JyxcclxuICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIHt0aGlzLnByb3BzLm5vfVxyXG4gICAgICAgICAgICAgICAgPC90ZXh0PlxyXG4gICAgICAgICAgICA8L2c+IFxyXG4gICAgICAgIClcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnO1xyXG5cclxuaW1wb3J0IFNlbGVjdEdyb3VwQm94IGZyb20gJy4vU2VsZWN0R3JvdXBCb3guanMnO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIFNVX1NlbGVjdEJveF9Cb3hfU2VsZWN0LFxyXG59IGZyb20gJy4uL2FjdGlvbnNfc3Uvc2VsZWN0Ym94LmpzJztcclxuXHJcblxyXG4vLyBtYXBTdGF0ZVRvUHJvcHNcclxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gKHN0YXRlLCBwcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAuLi5zdGF0ZSxcclxuICAgIH07XHJcbn1cclxuXHJcbi8vIG1hcERpc3BhdGNoVG9Qcm9wc1xyXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHMgPSAoZGlzcGF0Y2gsIHByb3BzKSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGRpc3BhdGNoLFxyXG4gICAgfTtcclxufVxyXG5cclxuLy8gbWVyZ2VQcm9wcyBcclxuY29uc3QgbWVyZ2VQcm9wcyA9IChzdGF0ZSwgZGlzcGF0Y2gsIHByb3BzKSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIC8vIHh4eDogeXl5LFxyXG4gICAgICAgIC8vIG9uWHh4eDogKHh4eCkgPT4ge1xyXG4gICAgICAgIC8vICAgICAuLi4uLlxyXG4gICAgICAgIC8vICAgICBkaXNwYXRjaC5kaXNwYXRjaChTVV9YeHh4eHhfWHh4eHhfWHh4eCgpKTtcclxuICAgICAgICAvLyB9LFxyXG4gICAgICAgIC4uLnByb3BzLFxyXG4gICAgICAgIG9uQ2xpY2tCb3g6IChwYXlsb2FkKSA9PiB7XHJcbiAgICAgICAgICAgIGRpc3BhdGNoLmRpc3BhdGNoKFNVX1NlbGVjdEJveF9Cb3hfU2VsZWN0KHBheWxvYWQpKTtcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxyXG5cclxuLy8gY29ubmVjdFxyXG5jb25zdCBTZWxlY3RHcm91cEJveE1hcCA9IGNvbm5lY3QoXHJcbiAgICBtYXBTdGF0ZVRvUHJvcHMsXHJcbiAgICBtYXBEaXNwYXRjaFRvUHJvcHMsXHJcbiAgICBtZXJnZVByb3BzXHJcbikoU2VsZWN0R3JvdXBCb3gpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgU2VsZWN0R3JvdXBCb3hNYXA7XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcblxyXG5pbXBvcnQgeyBEZWZpbmUgfSBmcm9tICcuLi9kZWZpbmUuanMnO1xyXG5cclxuY29uc3Qgc3R5bGVzID0ge1xyXG5cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSGFuZGxlRCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyDnp7vli5XliY3jga7jgqjjg4fjgqPjg4Pjg4jjg5zjg4Pjgq/jgrlhcmVh5oOF5aCxXHJcbiAgICAgICAgdGhpcy5ib3hvcmdwb3MgPSB7XHJcbiAgICAgICAgICAgIHg6IHByb3BzLngsXHJcbiAgICAgICAgICAgIHk6IHByb3BzLnksXHJcbiAgICAgICAgICAgIHc6IHByb3BzLncsXHJcbiAgICAgICAgICAgIGg6IHByb3BzLmgsXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy8g44OP44Oz44OJ44Or44Gu5YWD77yI56e75YuV5YmN77yJ44Gu5Lit5b+D5bqn5qiZXHJcbiAgICAgICAgdGhpcy5oYW5kbGVvcmdwb3MgPSB7XHJcbiAgICAgICAgICAgIHg6IHByb3BzLnggKyAocHJvcHMudyAvIDIpLFxyXG4gICAgICAgICAgICB5OiBwcm9wcy55ICsgcHJvcHMuaCxcclxuICAgICAgICB9O1xyXG5cclxuXHRcdC8vIOODnuOCpuOCueODgOOCpuODs+S9jee9rlxyXG5cdFx0dGhpcy5tb3VzZXBvcyA9IHtcclxuXHRcdFx0eDogMCxcclxuXHRcdFx0eTogMCxcclxuICAgICAgICB9O1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIOODj+ODs+ODieODq+OBruS4reW/g+W6p+aomeOCkuOCu+ODg+ODiFxyXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgICAgICAgIHg6IHRoaXMuaGFuZGxlb3JncG9zLngsXHJcbiAgICAgICAgICAgIHk6IHRoaXMuaGFuZGxlb3JncG9zLnksXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy5tb3VzZU1vdmUgPSB0aGlzLm1vdXNlTW92ZS5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMubW91c2VVcCAgID0gdGhpcy5tb3VzZVVwLmJpbmQodGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcclxuICAgICAgICBpZiAobmV4dFByb3BzLmhhbmRsZVJlZnJlc2ggPT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLmJveG9yZ3BvcyA9IHtcclxuICAgICAgICAgICAgICAgIHg6IG5leHRQcm9wcy54LFxyXG4gICAgICAgICAgICAgICAgeTogbmV4dFByb3BzLnksXHJcbiAgICAgICAgICAgICAgICB3OiBuZXh0UHJvcHMudyxcclxuICAgICAgICAgICAgICAgIGg6IG5leHRQcm9wcy5oLFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5oYW5kbGVvcmdwb3MgPSB7XHJcbiAgICAgICAgICAgICAgICB4OiBuZXh0UHJvcHMueCArIChuZXh0UHJvcHMudyAvIDIpLFxyXG4gICAgICAgICAgICAgICAgeTogbmV4dFByb3BzLnkgKyBuZXh0UHJvcHMuaCxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgIHg6IG5leHRQcm9wcy54ICsgKG5leHRQcm9wcy53IC8gMiksXHJcbiAgICAgICAgICAgIHk6IG5leHRQcm9wcy55ICsgbmV4dFByb3BzLmgsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgbW91c2VEb3duKGUpIHtcclxuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpOyAgICAvLyDjgZPjga7jgqTjg5njg7Pjg4jjgpLjgZPjga7jg6zjgqTjg6Tjg7zjgafmraLjgoHjgovjgILkuIvjg6zjgqTjg6Tjg7zjgavjgYLjgovopoHntKDjgavjgqTjg5njg7Pjg4jjgpLotbfjgZPjgZXjgarjgYRcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7ICAgICAvLyDjg5bjg6njgqbjgrbmqJnmupbmqZ/og73jga7jgqTjg5njg7Pjg4jjgpLmipHmraLjgZnjgotcclxuXHJcbiAgICAgICAgLy8g44Oe44Km44K544Og44O844OW44Go44Oe44Km44K544Ki44OD44OX44Gu44Kk44OZ44Oz44OI44KS55m76Yyy44GZ44KLXHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5tb3VzZU1vdmUsIGZhbHNlKTtcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgICB0aGlzLm1vdXNlVXAsIGZhbHNlKTtcclxuXHJcbiAgICAgICAgLy8g44Kv44Oq44OD44Kv44Gu44Oe44Km44K544Kk44OZ44Oz44OIXHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmNsaWNrLCBmYWxzZSk7XHJcblxyXG4gICAgICAgIC8vIOODnuOCpuOCueODgOOCpuODs+OBl+OBn+OCq+ODvOOCveODq+S9jee9ruOCkuOCu+ODg+ODiOOBmeOCi1xyXG5cdFx0dGhpcy5tb3VzZXBvcy54ID0gZS5wYWdlWCAqIDEwMCAvIHRoaXMucHJvcHMuc2NhbGU7XHJcbiAgICAgICAgdGhpcy5tb3VzZXBvcy55ID0gZS5wYWdlWSAqIDEwMCAvIHRoaXMucHJvcHMuc2NhbGU7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8g44OP44Oz44OJ44Or44Oe44Km44K544OA44Km44Oz5Yem55CGXHJcbiAgICAgICAgdGhpcy5wcm9wcy5oYW5kbGVNb3VzZURvd24oKTtcclxuICAgIH1cclxuXHJcbiAgICBtb3VzZU1vdmUoZSkge1xyXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7ICAgIC8vIOOBk+OBruOCpOODmeODs+ODiOOCkuOBk+OBruODrOOCpOODpOODvOOBp+atouOCgeOCi+OAguS4i+ODrOOCpOODpOODvOOBq+OBguOCi+imgee0oOOBq+OCpOODmeODs+ODiOOCkui1t+OBk+OBleOBquOBhFxyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTsgICAgIC8vIOODluODqeOCpuOCtuaomea6luapn+iDveOBruOCpOODmeODs+ODiOOCkuaKkeatouOBmeOCi1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIOODnuOCpuOCueODoOODvOODluW+jOOBruOCq+ODvOOCveODq+S9jee9ruOCkuW+l+OCi1xyXG5cdFx0Ly8gY29uc3QgbW92ZVggPSBlLnBhZ2VYICogMTAwIC8gdGhpcy5wcm9wcy5zY2FsZTtcclxuXHRcdGNvbnN0IG1vdmVZID0gZS5wYWdlWSAqIDEwMCAvIHRoaXMucHJvcHMuc2NhbGU7XHJcblxyXG5cdFx0Ly8g5b2T44OP44Oz44OJ44Or44Gu5paw44Gf44Gq5bqn5qiZ44KS5rGC44KB44KLXHJcbiAgICAgICAgLy8gbGV0IHggPSB0aGlzLmhhbmRsZW9yZ3Bvcy54ICsgKG1vdmVYIC0gdGhpcy5tb3VzZXBvcy54KTtcclxuICAgICAgICBsZXQgeCA9IHRoaXMuaGFuZGxlb3JncG9zLng7XHJcbiAgICAgICAgbGV0IHkgPSB0aGlzLmhhbmRsZW9yZ3Bvcy55ICsgKG1vdmVZIC0gdGhpcy5tb3VzZXBvcy55KTtcclxuICAgICAgICAvLyBsZXQgeSA9IHRoaXMuaGFuZGxlb3JncG9zLnk7XHJcblxyXG4gICAgICAgIC8vIOODnOODg+OCr+OCueOBjDHjgrDjg6rjg4Pjg4nliIbjgojjgorlsI/jgZXjgY/jgarjgonjgarjgYTjgojjgYbjgavjgZnjgotcclxuICAgICAgICBbeCwgeV0gPSB0aGlzLmNoZWNrZ3JpZDFibG9jayh4LCB5KTtcclxuXHJcbiAgICAgICAgLy8g44Kw44Oq44OD44OJ44K544OK44OD44OX5Yem55CGXHJcbiAgICAgICAgW3gsIHldID0gdGhpcy5wcm9wcy5ncmlkc25hcCh4LCB5KTtcclxuICAgICAgICBcclxuXHRcdC8vIOODmeODvOOCuVNWR+OCpOODoeODvOOCuOOBruerr+OBq+ODj+ODs+ODieODq+OBjOihjOOBo+OBn+WgtOWQiOOBruW6p+aomeWkieaPm1xyXG5cdFx0W3gsIHldID0gdGhpcy5wcm9wcy5oYW5kbGVzdG9wKHgsIHkpO1xyXG5cclxuICAgICAgICAvLyDjgqjjg4fjgqPjg4Pjg4jjg5zjg4Pjgq/jgrnmm7TmlrDlh6bnkIZcclxuICAgICAgICB0aGlzLnByb3BzLmhhbmRsZU1vdmUoXHJcbiAgICAgICAgICAgIHRoaXMuYm94b3JncG9zLngsXHJcbiAgICAgICAgICAgIHRoaXMuYm94b3JncG9zLnksXHJcbiAgICAgICAgICAgIHRoaXMuYm94b3JncG9zLncsXHJcbiAgICAgICAgICAgIHkgLSB0aGlzLmJveG9yZ3Bvcy55LFxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgbW91c2VVcChlKSB7XHJcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTsgICAgLy8g44GT44Gu44Kk44OZ44Oz44OI44KS44GT44Gu44Os44Kk44Ok44O844Gn5q2i44KB44KL44CC5LiL44Os44Kk44Ok44O844Gr44GC44KL6KaB57Sg44Gr44Kk44OZ44Oz44OI44KS6LW344GT44GV44Gq44GEXHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOyAgICAgLy8g44OW44Op44Km44K25qiZ5rqW5qmf6IO944Gu44Kk44OZ44Oz44OI44KS5oqR5q2i44GZ44KLXHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8g44Kk44OZ44Oz44OI44KS5YmK6Zmk44GZ44KLXHJcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5tb3VzZU1vdmUpO1xyXG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCAgIHRoaXMubW91c2VVcCk7XHJcblxyXG4gICAgICAgIC8vIGRvY3VtZW5044G444GuY2xpY2vjgqTjg5njg7Pjg4jjgpLjgq3jg6Pjg7Pjgrvjg6vjgZnjgotcclxuICAgICAgICB2YXIgY2FwdHVyZUNsaWNrID0gKGUpID0+IHtcclxuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjYXB0dXJlQ2xpY2ssIHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGNhcHR1cmVDbGljaywgdHJ1ZSk7XHJcblxyXG4gICAgICAgIC8vIOODj+ODs+ODieODq01vdXNlVXDlh6bnkIZcclxuICAgICAgICB0aGlzLnByb3BzLmhhbmRsZU1vdXNlVXAoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGNoZWNrZ3JpZDFibG9jayh4LCB5KSB7XHJcbiAgICAgICAgY29uc3QgeTIgPSB0aGlzLmJveG9yZ3Bvcy55O1xyXG5cclxuICAgICAgICBpZiAoeSA8IHkyICsgRGVmaW5lLmdyaWQuaGVpZ2h0KSB7XHJcbiAgICAgICAgICAgIHkgPSB5MiArIERlZmluZS5ncmlkLmhlaWdodDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBbeCwgeV07XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIC8vIOODj+ODs+ODieODq+OBruOCteOCpOOCuuOCkuaxguOCgeOCi1xyXG4gICAgICAgIGNvbnN0IGh3ID0gRGVmaW5lLmhhbmRsZS53aWR0aCAgKiAxMDAgLyB0aGlzLnByb3BzLnNjYWxlO1xyXG4gICAgICAgIGNvbnN0IGhoID0gRGVmaW5lLmhhbmRsZS5oZWlnaHQgKiAxMDAgLyB0aGlzLnByb3BzLnNjYWxlO1xyXG5cclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8cmVjdFxyXG4gICAgICAgICAgICAgICAgeD17dGhpcy5zdGF0ZS54IC0gKGh3IC8gMil9XHJcbiAgICAgICAgICAgICAgICB5PXt0aGlzLnN0YXRlLnkgLSAoaGggLyAyKX1cclxuICAgICAgICAgICAgICAgIHdpZHRoPXtod31cclxuICAgICAgICAgICAgICAgIGhlaWdodD17aGh9XHJcbiAgICAgICAgICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbGw6ICdibHVlJyxcclxuICAgICAgICAgICAgICAgIH19XHJcblxyXG4gICAgICAgICAgICAgICAgb25DbGljaz17KGUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpOyAgICAvLyDjgZPjga7jgqTjg5njg7Pjg4jjgpLjgZPjga7jg6zjgqTjg6Tjg7zjgafmraLjgoHjgovjgILkuIvjg6zjgqTjg6Tjg7zjgavjgYLjgovopoHntKDjgavjgqTjg5njg7Pjg4jjgpLotbfjgZPjgZXjgarjgYRcclxuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7ICAgICAvLyDjg5bjg6njgqbjgrbmqJnmupbmqZ/og73jga7jgqTjg5njg7Pjg4jjgpLmipHmraLjgZnjgotcclxuICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICBvbk1vdXNlRG93bj17KGUpID0+IHRoaXMubW91c2VEb3duKGUpfVxyXG4gICAgICAgICAgICAvPlxyXG4gICAgICAgIClcclxuICAgIH1cclxufSIsImltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XHJcblxyXG5pbXBvcnQgSGFuZGxlRCBmcm9tICcuL0hhbmRsZUQuanMnO1xyXG5cclxuLy8gbWFwU3RhdGVUb1Byb3BzXHJcbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZSwgcHJvcHMpID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgLi4uc3RhdGUsXHJcbiAgICB9O1xyXG59XHJcblxyXG4vLyBtYXBEaXNwYXRjaFRvUHJvcHNcclxuY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0gKGRpc3BhdGNoLCBwcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBkaXNwYXRjaCxcclxuICAgIH07XHJcbn1cclxuXHJcbi8vIG1lcmdlUHJvcHMgXHJcbmNvbnN0IG1lcmdlUHJvcHMgPSAoc3RhdGUsIGRpc3BhdGNoLCBwcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAvLyB4eHg6IHl5eSxcclxuICAgICAgICAvLyBvbkhhbmRsZUQ6ICh4eHgpID0+IHtcclxuICAgICAgICAvLyAgICAgLi4uLi5cclxuICAgICAgICAvLyAgICAgZGlzcGF0Y2guZGlzcGF0Y2goU1VfSGFuZGxlRHh4X0hhbmRsZUR4X0hhbmRsZUQoKSk7XHJcbiAgICAgICAgLy8gfSxcclxuICAgICAgICAuLi5wcm9wcyxcclxuICAgICAgICBzY2FsZTogc3RhdGUuc2NhbGUsXHJcbiAgICB9O1xyXG59XHJcblxyXG4vLyBjb25uZWN0XHJcbmNvbnN0IEhhbmRsZURNYXAgPSBjb25uZWN0KFxyXG4gICAgbWFwU3RhdGVUb1Byb3BzLFxyXG4gICAgbWFwRGlzcGF0Y2hUb1Byb3BzLFxyXG4gICAgbWVyZ2VQcm9wc1xyXG4pKEhhbmRsZUQpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgSGFuZGxlRE1hcDtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuXHJcbmltcG9ydCB7IERlZmluZSB9IGZyb20gJy4uL2RlZmluZS5qcyc7XHJcblxyXG5jb25zdCBzdHlsZXMgPSB7XHJcblxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBIYW5kbGVSIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG4gXHJcbiAgICAgICAgLy8g56e75YuV5YmN44Gu44Ko44OH44Kj44OD44OI44Oc44OD44Kv44K5YXJlYeaDheWgsVxyXG4gICAgICAgIHRoaXMuYm94b3JncG9zID0ge1xyXG4gICAgICAgICAgICB4OiBwcm9wcy54LFxyXG4gICAgICAgICAgICB5OiBwcm9wcy55LFxyXG4gICAgICAgICAgICB3OiBwcm9wcy53LFxyXG4gICAgICAgICAgICBoOiBwcm9wcy5oLFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIOODj+ODs+ODieODq+OBruWFg++8iOenu+WLleWJje+8ieOBruS4reW/g+W6p+aomVxyXG4gICAgICAgIHRoaXMuaGFuZGxlb3JncG9zID0ge1xyXG4gICAgICAgICAgICB4OiBwcm9wcy54ICsgcHJvcHMudyxcclxuICAgICAgICAgICAgeTogcHJvcHMueSArIChwcm9wcy5oIC8gMiksXHJcbiAgICAgICAgfTtcclxuXHJcblx0XHQvLyDjg57jgqbjgrnjg4Djgqbjg7PkvY3nva5cclxuXHRcdHRoaXMubW91c2Vwb3MgPSB7XHJcblx0XHRcdHg6IDAsXHJcblx0XHRcdHk6IDAsXHJcbiAgICAgICAgfTtcclxuICAgICAgICBcclxuICAgICAgICAvLyDjg4/jg7Pjg4njg6vjga7kuK3lv4PluqfmqJnjgpLjgrvjg4Pjg4hcclxuICAgICAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICAgICAgICB4OiB0aGlzLmhhbmRsZW9yZ3Bvcy54LFxyXG4gICAgICAgICAgICB5OiB0aGlzLmhhbmRsZW9yZ3Bvcy55LFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMubW91c2VNb3ZlID0gdGhpcy5tb3VzZU1vdmUuYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLm1vdXNlVXAgICA9IHRoaXMubW91c2VVcC5iaW5kKHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XHJcbiAgICAgICAgaWYgKG5leHRQcm9wcy5oYW5kbGVSZWZyZXNoID09IHRydWUpIHtcclxuICAgICAgICAgICAgdGhpcy5ib3hvcmdwb3MgPSB7XHJcbiAgICAgICAgICAgICAgICB4OiBuZXh0UHJvcHMueCxcclxuICAgICAgICAgICAgICAgIHk6IG5leHRQcm9wcy55LFxyXG4gICAgICAgICAgICAgICAgdzogbmV4dFByb3BzLncsXHJcbiAgICAgICAgICAgICAgICBoOiBuZXh0UHJvcHMuaCxcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlb3JncG9zID0ge1xyXG4gICAgICAgICAgICAgICAgeDogbmV4dFByb3BzLnggKyBuZXh0UHJvcHMudyxcclxuICAgICAgICAgICAgICAgIHk6IG5leHRQcm9wcy55ICsgKG5leHRQcm9wcy5oIC8gMiksXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICB4OiBuZXh0UHJvcHMueCArIG5leHRQcm9wcy53LFxyXG4gICAgICAgICAgICB5OiBuZXh0UHJvcHMueSArIChuZXh0UHJvcHMuaCAvIDIpLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIG1vdXNlRG93bihlKSB7XHJcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTsgICAgLy8g44GT44Gu44Kk44OZ44Oz44OI44KS44GT44Gu44Os44Kk44Ok44O844Gn5q2i44KB44KL44CC5LiL44Os44Kk44Ok44O844Gr44GC44KL6KaB57Sg44Gr44Kk44OZ44Oz44OI44KS6LW344GT44GV44Gq44GEXHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOyAgICAgLy8g44OW44Op44Km44K25qiZ5rqW5qmf6IO944Gu44Kk44OZ44Oz44OI44KS5oqR5q2i44GZ44KLXHJcblxyXG4gICAgICAgIC8vIOODnuOCpuOCueODoOODvOODluOBqOODnuOCpuOCueOCouODg+ODl+OBruOCpOODmeODs+ODiOOCkueZu+mMsuOBmeOCi1xyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMubW91c2VNb3ZlLCBmYWxzZSk7XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsICAgdGhpcy5tb3VzZVVwLCBmYWxzZSk7XHJcblxyXG4gICAgICAgIC8vIOOCr+ODquODg+OCr+OBruODnuOCpuOCueOCpOODmeODs+ODiFxyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5jbGljaywgZmFsc2UpO1xyXG5cclxuICAgICAgICAvLyDjg57jgqbjgrnjg4Djgqbjg7PjgZfjgZ/jgqvjg7zjgr3jg6vkvY3nva7jgpLjgrvjg4Pjg4jjgZnjgotcclxuXHRcdHRoaXMubW91c2Vwb3MueCA9IGUucGFnZVggKiAxMDAgLyB0aGlzLnByb3BzLnNjYWxlO1xyXG4gICAgICAgIHRoaXMubW91c2Vwb3MueSA9IGUucGFnZVkgKiAxMDAgLyB0aGlzLnByb3BzLnNjYWxlO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIOODj+ODs+ODieODq+ODnuOCpuOCueODgOOCpuODs+WHpueQhlxyXG4gICAgICAgIHRoaXMucHJvcHMuaGFuZGxlTW91c2VEb3duKCk7XHJcbiAgICB9XHJcblxyXG4gICAgbW91c2VNb3ZlKGUpIHtcclxuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpOyAgICAvLyDjgZPjga7jgqTjg5njg7Pjg4jjgpLjgZPjga7jg6zjgqTjg6Tjg7zjgafmraLjgoHjgovjgILkuIvjg6zjgqTjg6Tjg7zjgavjgYLjgovopoHntKDjgavjgqTjg5njg7Pjg4jjgpLotbfjgZPjgZXjgarjgYRcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7ICAgICAvLyDjg5bjg6njgqbjgrbmqJnmupbmqZ/og73jga7jgqTjg5njg7Pjg4jjgpLmipHmraLjgZnjgotcclxuICAgICAgICBcclxuICAgICAgICAvLyDjg57jgqbjgrnjg6Djg7zjg5blvozjga7jgqvjg7zjgr3jg6vkvY3nva7jgpLlvpfjgotcclxuXHRcdGNvbnN0IG1vdmVYID0gZS5wYWdlWCAqIDEwMCAvIHRoaXMucHJvcHMuc2NhbGU7XHJcblx0XHQvLyBjb25zdCBtb3ZlWSA9IGUucGFnZVkgKiAxMDAgLyB0aGlzLnByb3BzLnNjYWxlO1xyXG5cclxuXHRcdC8vIOW9k+ODj+ODs+ODieODq+OBruaWsOOBn+OBquW6p+aomeOCkuaxguOCgeOCi1xyXG4gICAgICAgIGxldCB4ID0gdGhpcy5oYW5kbGVvcmdwb3MueCArIChtb3ZlWCAtIHRoaXMubW91c2Vwb3MueCk7XHJcbiAgICAgICAgLy8gbGV0IHggPSB0aGlzLmhhbmRsZW9yZ3Bvcy54O1xyXG4gICAgICAgIC8vIGxldCB5ID0gdGhpcy5oYW5kbGVvcmdwb3MueSArIChtb3ZlWSAtIHRoaXMubW91c2Vwb3MueSk7XHJcbiAgICAgICAgbGV0IHkgPSB0aGlzLmhhbmRsZW9yZ3Bvcy55O1xyXG5cclxuICAgICAgICAvLyDjg5zjg4Pjgq/jgrnjgYwx44Kw44Oq44OD44OJ5YiG44KI44KK5bCP44GV44GP44Gq44KJ44Gq44GE44KI44GG44Gr44GZ44KLXHJcbiAgICAgICAgW3gsIHldID0gdGhpcy5jaGVja2dyaWQxYmxvY2soeCwgeSk7XHJcblxyXG4gICAgICAgIC8vIOOCsOODquODg+ODieOCueODiuODg+ODl+WHpueQhlxyXG4gICAgICAgIFt4LCB5XSA9IHRoaXMucHJvcHMuZ3JpZHNuYXAoeCwgeSk7XHJcbiAgICAgICAgXHJcblx0XHQvLyDjg5njg7zjgrlTVkfjgqTjg6Hjg7zjgrjjga7nq6/jgavjg4/jg7Pjg4njg6vjgYzooYzjgaPjgZ/loLTlkIjjga7luqfmqJnlpInmj5tcclxuXHRcdFt4LCB5XSA9IHRoaXMucHJvcHMuaGFuZGxlc3RvcCh4LCB5KTtcclxuXHJcbiAgICAgICAgLy8g44Ko44OH44Kj44OD44OI44Oc44OD44Kv44K55pu05paw5Yem55CGXHJcbiAgICAgICAgdGhpcy5wcm9wcy5oYW5kbGVNb3ZlKFxyXG4gICAgICAgICAgICB0aGlzLmJveG9yZ3Bvcy54LFxyXG4gICAgICAgICAgICB0aGlzLmJveG9yZ3Bvcy55LFxyXG4gICAgICAgICAgICB4IC0gdGhpcy5ib3hvcmdwb3MueCxcclxuICAgICAgICAgICAgdGhpcy5ib3hvcmdwb3MuaCxcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIG1vdXNlVXAoZSkge1xyXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7ICAgIC8vIOOBk+OBruOCpOODmeODs+ODiOOCkuOBk+OBruODrOOCpOODpOODvOOBp+atouOCgeOCi+OAguS4i+ODrOOCpOODpOODvOOBq+OBguOCi+imgee0oOOBq+OCpOODmeODs+ODiOOCkui1t+OBk+OBleOBquOBhFxyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTsgICAgIC8vIOODluODqeOCpuOCtuaomea6luapn+iDveOBruOCpOODmeODs+ODiOOCkuaKkeatouOBmeOCi1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIOOCpOODmeODs+ODiOOCkuWJiumZpOOBmeOCi1xyXG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMubW91c2VNb3ZlKTtcclxuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgICB0aGlzLm1vdXNlVXApO1xyXG5cclxuICAgICAgICAvLyBkb2N1bWVudOOBuOOBrmNsaWNr44Kk44OZ44Oz44OI44KS44Kt44Oj44Oz44K744Or44GZ44KLXHJcbiAgICAgICAgdmFyIGNhcHR1cmVDbGljayA9IChlKSA9PiB7XHJcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgY2FwdHVyZUNsaWNrLCB0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjYXB0dXJlQ2xpY2ssIHRydWUpO1xyXG5cclxuICAgICAgICAvLyDjg4/jg7Pjg4njg6tNb3VzZVVw5Yem55CGXHJcbiAgICAgICAgdGhpcy5wcm9wcy5oYW5kbGVNb3VzZVVwKCk7XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBjaGVja2dyaWQxYmxvY2soeCwgeSkge1xyXG4gICAgICAgIGNvbnN0IHgyID0gdGhpcy5ib3hvcmdwb3MueDtcclxuXHJcbiAgICAgICAgaWYgKHggPCB4MiArIERlZmluZS5ncmlkLndpZHRoKSB7XHJcbiAgICAgICAgICAgIHggPSB4MiArIERlZmluZS5ncmlkLndpZHRoO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIFt4LCB5XTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgLy8g44OP44Oz44OJ44Or44Gu44K144Kk44K644KS5rGC44KB44KLXHJcbiAgICAgICAgY29uc3QgaHcgPSBEZWZpbmUuaGFuZGxlLndpZHRoICAqIDEwMCAvIHRoaXMucHJvcHMuc2NhbGU7XHJcbiAgICAgICAgY29uc3QgaGggPSBEZWZpbmUuaGFuZGxlLmhlaWdodCAqIDEwMCAvIHRoaXMucHJvcHMuc2NhbGU7XHJcblxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxyZWN0XHJcbiAgICAgICAgICAgICAgICB4PXt0aGlzLnN0YXRlLnggLSAoaHcgLyAyKX1cclxuICAgICAgICAgICAgICAgIHk9e3RoaXMuc3RhdGUueSAtIChoaCAvIDIpfVxyXG4gICAgICAgICAgICAgICAgd2lkdGg9e2h3fVxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0PXtoaH1cclxuICAgICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsbDogJ2JsdWUnLFxyXG4gICAgICAgICAgICAgICAgfX1cclxuXHJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXsoZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICBvbk1vdXNlRG93bj17KGUpID0+IHRoaXMubW91c2VEb3duKGUpfVxyXG4gICAgICAgICAgICAvPlxyXG4gICAgICAgIClcclxuICAgIH1cclxufSIsImltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XHJcblxyXG5pbXBvcnQgSGFuZGxlUiBmcm9tICcuL0hhbmRsZVIuanMnO1xyXG5cclxuLy8gbWFwU3RhdGVUb1Byb3BzXHJcbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZSwgcHJvcHMpID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgLi4uc3RhdGUsXHJcbiAgICB9O1xyXG59XHJcblxyXG4vLyBtYXBEaXNwYXRjaFRvUHJvcHNcclxuY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0gKGRpc3BhdGNoLCBwcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBkaXNwYXRjaCxcclxuICAgIH07XHJcbn1cclxuXHJcbi8vIG1lcmdlUHJvcHMgXHJcbmNvbnN0IG1lcmdlUHJvcHMgPSAoc3RhdGUsIGRpc3BhdGNoLCBwcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAvLyB4eHg6IHl5eSxcclxuICAgICAgICAvLyBvbkhhbmRsZVI6ICh4eHgpID0+IHtcclxuICAgICAgICAvLyAgICAgLi4uLi5cclxuICAgICAgICAvLyAgICAgZGlzcGF0Y2guZGlzcGF0Y2goU1VfSGFuZGxlUnh4X0hhbmRsZVJ4X0hhbmRsZVIoKSk7XHJcbiAgICAgICAgLy8gfSxcclxuICAgICAgICAuLi5wcm9wcyxcclxuICAgICAgICBzY2FsZTogc3RhdGUuc2NhbGUsXHJcbiAgICB9O1xyXG59XHJcblxyXG4vLyBjb25uZWN0XHJcbmNvbnN0IEhhbmRsZVJNYXAgPSBjb25uZWN0KFxyXG4gICAgbWFwU3RhdGVUb1Byb3BzLFxyXG4gICAgbWFwRGlzcGF0Y2hUb1Byb3BzLFxyXG4gICAgbWVyZ2VQcm9wc1xyXG4pKEhhbmRsZVIpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgSGFuZGxlUk1hcDtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuXHJcbmltcG9ydCB7IERlZmluZSB9IGZyb20gJy4uL2RlZmluZS5qcyc7XHJcblxyXG5jb25zdCBzdHlsZXMgPSB7XHJcblxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBIYW5kbGVMIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG4gXHJcbiAgICAgICAgLy8g56e75YuV5YmN44Gu44Ko44OH44Kj44OD44OI44Oc44OD44Kv44K5YXJlYeaDheWgsVxyXG4gICAgICAgIHRoaXMuYm94b3JncG9zID0ge1xyXG4gICAgICAgICAgICB4OiBwcm9wcy54LFxyXG4gICAgICAgICAgICB5OiBwcm9wcy55LFxyXG4gICAgICAgICAgICB3OiBwcm9wcy53LFxyXG4gICAgICAgICAgICBoOiBwcm9wcy5oLFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIOODj+ODs+ODieODq+OBruWFg++8iOenu+WLleWJje+8ieOBruS4reW/g+W6p+aomVxyXG4gICAgICAgIHRoaXMuaGFuZGxlb3JncG9zID0ge1xyXG4gICAgICAgICAgICB4OiBwcm9wcy54LFxyXG4gICAgICAgICAgICB5OiBwcm9wcy55ICsgKHByb3BzLmggLyAyKSxcclxuICAgICAgICB9O1xyXG5cclxuXHRcdC8vIOODnuOCpuOCueODgOOCpuODs+S9jee9rlxyXG5cdFx0dGhpcy5tb3VzZXBvcyA9IHtcclxuXHRcdFx0eDogMCxcclxuXHRcdFx0eTogMCxcclxuICAgICAgICB9O1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIOODj+ODs+ODieODq+OBruS4reW/g+W6p+aomeOCkuOCu+ODg+ODiFxyXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgICAgICAgIHg6IHRoaXMuaGFuZGxlb3JncG9zLngsXHJcbiAgICAgICAgICAgIHk6IHRoaXMuaGFuZGxlb3JncG9zLnksXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy5tb3VzZU1vdmUgPSB0aGlzLm1vdXNlTW92ZS5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMubW91c2VVcCAgID0gdGhpcy5tb3VzZVVwLmJpbmQodGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcclxuICAgICAgICBpZiAobmV4dFByb3BzLmhhbmRsZVJlZnJlc2ggPT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLmJveG9yZ3BvcyA9IHtcclxuICAgICAgICAgICAgICAgIHg6IG5leHRQcm9wcy54LFxyXG4gICAgICAgICAgICAgICAgeTogbmV4dFByb3BzLnksXHJcbiAgICAgICAgICAgICAgICB3OiBuZXh0UHJvcHMudyxcclxuICAgICAgICAgICAgICAgIGg6IG5leHRQcm9wcy5oLFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5oYW5kbGVvcmdwb3MgPSB7XHJcbiAgICAgICAgICAgICAgICB4OiBuZXh0UHJvcHMueCxcclxuICAgICAgICAgICAgICAgIHk6IG5leHRQcm9wcy55ICsgKG5leHRQcm9wcy5oIC8gMiksXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICB4OiBuZXh0UHJvcHMueCxcclxuICAgICAgICAgICAgeTogbmV4dFByb3BzLnkgKyAobmV4dFByb3BzLmggLyAyKSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBtb3VzZURvd24oZSkge1xyXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7ICAgIC8vIOOBk+OBruOCpOODmeODs+ODiOOCkuOBk+OBruODrOOCpOODpOODvOOBp+atouOCgeOCi+OAguS4i+ODrOOCpOODpOODvOOBq+OBguOCi+imgee0oOOBq+OCpOODmeODs+ODiOOCkui1t+OBk+OBleOBquOBhFxyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTsgICAgIC8vIOODluODqeOCpuOCtuaomea6luapn+iDveOBruOCpOODmeODs+ODiOOCkuaKkeatouOBmeOCi1xyXG5cclxuICAgICAgICAvLyDjg57jgqbjgrnjg6Djg7zjg5bjgajjg57jgqbjgrnjgqLjg4Pjg5fjga7jgqTjg5njg7Pjg4jjgpLnmbvpjLLjgZnjgotcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLm1vdXNlTW92ZSwgZmFsc2UpO1xyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCAgIHRoaXMubW91c2VVcCwgZmFsc2UpO1xyXG5cclxuICAgICAgICAvLyDjgq/jg6rjg4Pjgq/jga7jg57jgqbjgrnjgqTjg5njg7Pjg4hcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuY2xpY2ssIGZhbHNlKTtcclxuXHJcbiAgICAgICAgLy8g44Oe44Km44K544OA44Km44Oz44GX44Gf44Kr44O844K944Or5L2N572u44KS44K744OD44OI44GZ44KLXHJcblx0XHR0aGlzLm1vdXNlcG9zLnggPSBlLnBhZ2VYICogMTAwIC8gdGhpcy5wcm9wcy5zY2FsZTtcclxuICAgICAgICB0aGlzLm1vdXNlcG9zLnkgPSBlLnBhZ2VZICogMTAwIC8gdGhpcy5wcm9wcy5zY2FsZTtcclxuICAgICAgICBcclxuICAgICAgICAvLyDjg4/jg7Pjg4njg6vjg57jgqbjgrnjg4Djgqbjg7Plh6bnkIZcclxuICAgICAgICB0aGlzLnByb3BzLmhhbmRsZU1vdXNlRG93bigpO1xyXG4gICAgfVxyXG5cclxuICAgIG1vdXNlTW92ZShlKSB7XHJcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTsgICAgLy8g44GT44Gu44Kk44OZ44Oz44OI44KS44GT44Gu44Os44Kk44Ok44O844Gn5q2i44KB44KL44CC5LiL44Os44Kk44Ok44O844Gr44GC44KL6KaB57Sg44Gr44Kk44OZ44Oz44OI44KS6LW344GT44GV44Gq44GEXHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOyAgICAgLy8g44OW44Op44Km44K25qiZ5rqW5qmf6IO944Gu44Kk44OZ44Oz44OI44KS5oqR5q2i44GZ44KLXHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8g44Oe44Km44K544Og44O844OW5b6M44Gu44Kr44O844K944Or5L2N572u44KS5b6X44KLXHJcblx0XHRjb25zdCBtb3ZlWCA9IGUucGFnZVggKiAxMDAgLyB0aGlzLnByb3BzLnNjYWxlO1xyXG5cdFx0Ly8gY29uc3QgbW92ZVkgPSBlLnBhZ2VZICogMTAwIC8gdGhpcy5wcm9wcy5zY2FsZTtcclxuXHJcblx0XHQvLyDlvZPjg4/jg7Pjg4njg6vjga7mlrDjgZ/jgarluqfmqJnjgpLmsYLjgoHjgotcclxuICAgICAgICBsZXQgeCA9IHRoaXMuaGFuZGxlb3JncG9zLnggKyAobW92ZVggLSB0aGlzLm1vdXNlcG9zLngpO1xyXG4gICAgICAgIC8vIGxldCB4ID0gdGhpcy5oYW5kbGVvcmdwb3MueDtcclxuICAgICAgICAvLyBsZXQgeSA9IHRoaXMuaGFuZGxlb3JncG9zLnkgKyAobW92ZVkgLSB0aGlzLm1vdXNlcG9zLnkpO1xyXG4gICAgICAgIGxldCB5ID0gdGhpcy5oYW5kbGVvcmdwb3MueTtcclxuXHJcbiAgICAgICAgLy8g44Oc44OD44Kv44K544GMMeOCsOODquODg+ODieWIhuOCiOOCiuWwj+OBleOBj+OBquOCieOBquOBhOOCiOOBhuOBq+OBmeOCi1xyXG4gICAgICAgIFt4LCB5XSA9IHRoaXMuY2hlY2tncmlkMWJsb2NrKHgsIHkpO1xyXG5cclxuICAgICAgICAvLyDjgrDjg6rjg4Pjg4njgrnjg4rjg4Pjg5flh6bnkIZcclxuICAgICAgICBbeCwgeV0gPSB0aGlzLnByb3BzLmdyaWRzbmFwKHgsIHkpO1xyXG4gICAgICAgIFxyXG5cdFx0Ly8g44OZ44O844K5U1ZH44Kk44Oh44O844K444Gu56uv44Gr44OP44Oz44OJ44Or44GM6KGM44Gj44Gf5aC05ZCI44Gu5bqn5qiZ5aSJ5o+bXHJcblx0XHRbeCwgeV0gPSB0aGlzLnByb3BzLmhhbmRsZXN0b3AoeCwgeSk7XHJcblxyXG4gICAgICAgIC8vIOOCqOODh+OCo+ODg+ODiOODnOODg+OCr+OCueabtOaWsOWHpueQhlxyXG4gICAgICAgIHRoaXMucHJvcHMuaGFuZGxlTW92ZShcclxuICAgICAgICAgICAgeCxcclxuICAgICAgICAgICAgdGhpcy5ib3hvcmdwb3MueSxcclxuICAgICAgICAgICAgdGhpcy5ib3hvcmdwb3MueCAtIHggKyB0aGlzLmJveG9yZ3Bvcy53LFxyXG4gICAgICAgICAgICB0aGlzLmJveG9yZ3Bvcy5oLFxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgbW91c2VVcChlKSB7XHJcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTsgICAgLy8g44GT44Gu44Kk44OZ44Oz44OI44KS44GT44Gu44Os44Kk44Ok44O844Gn5q2i44KB44KL44CC5LiL44Os44Kk44Ok44O844Gr44GC44KL6KaB57Sg44Gr44Kk44OZ44Oz44OI44KS6LW344GT44GV44Gq44GEXHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOyAgICAgLy8g44OW44Op44Km44K25qiZ5rqW5qmf6IO944Gu44Kk44OZ44Oz44OI44KS5oqR5q2i44GZ44KLXHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8g44Kk44OZ44Oz44OI44KS5YmK6Zmk44GZ44KLXHJcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5tb3VzZU1vdmUpO1xyXG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCAgIHRoaXMubW91c2VVcCk7XHJcblxyXG4gICAgICAgIC8vIGRvY3VtZW5044G444GuY2xpY2vjgqTjg5njg7Pjg4jjgpLjgq3jg6Pjg7Pjgrvjg6vjgZnjgotcclxuICAgICAgICB2YXIgY2FwdHVyZUNsaWNrID0gKGUpID0+IHtcclxuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjYXB0dXJlQ2xpY2ssIHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGNhcHR1cmVDbGljaywgdHJ1ZSk7XHJcblxyXG4gICAgICAgIC8vIOODj+ODs+ODieODq01vdXNlVXDlh6bnkIZcclxuICAgICAgICB0aGlzLnByb3BzLmhhbmRsZU1vdXNlVXAoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGNoZWNrZ3JpZDFibG9jayh4LCB5KSB7XHJcbiAgICAgICAgY29uc3QgeDIgPSB0aGlzLmJveG9yZ3Bvcy54ICsgdGhpcy5ib3hvcmdwb3MudztcclxuXHJcbiAgICAgICAgaWYgKHggPiB4MiAtIERlZmluZS5ncmlkLndpZHRoKSB7XHJcbiAgICAgICAgICAgIHggPSB4MiAtIERlZmluZS5ncmlkLndpZHRoO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIFt4LCB5XTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgLy8g44OP44Oz44OJ44Or44Gu44K144Kk44K644KS5rGC44KB44KLXHJcbiAgICAgICAgY29uc3QgaHcgPSBEZWZpbmUuaGFuZGxlLndpZHRoICAqIDEwMCAvIHRoaXMucHJvcHMuc2NhbGU7XHJcbiAgICAgICAgY29uc3QgaGggPSBEZWZpbmUuaGFuZGxlLmhlaWdodCAqIDEwMCAvIHRoaXMucHJvcHMuc2NhbGU7XHJcblxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxyZWN0XHJcbiAgICAgICAgICAgICAgICB4PXt0aGlzLnN0YXRlLnggLSAoaHcgLyAyKX1cclxuICAgICAgICAgICAgICAgIHk9e3RoaXMuc3RhdGUueSAtIChoaCAvIDIpfVxyXG4gICAgICAgICAgICAgICAgd2lkdGg9e2h3fVxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0PXtoaH1cclxuICAgICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsbDogJ2JsdWUnLFxyXG4gICAgICAgICAgICAgICAgfX1cclxuXHJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXsoZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICBvbk1vdXNlRG93bj17KGUpID0+IHRoaXMubW91c2VEb3duKGUpfVxyXG4gICAgICAgICAgICAvPlxyXG4gICAgICAgIClcclxuICAgIH1cclxufSIsImltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XHJcblxyXG5pbXBvcnQgSGFuZGxlTCBmcm9tICcuL0hhbmRsZUwuanMnO1xyXG5cclxuLy8gbWFwU3RhdGVUb1Byb3BzXHJcbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZSwgcHJvcHMpID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgLi4uc3RhdGUsXHJcbiAgICB9O1xyXG59XHJcblxyXG4vLyBtYXBEaXNwYXRjaFRvUHJvcHNcclxuY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0gKGRpc3BhdGNoLCBwcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBkaXNwYXRjaCxcclxuICAgIH07XHJcbn1cclxuXHJcbi8vIG1lcmdlUHJvcHMgXHJcbmNvbnN0IG1lcmdlUHJvcHMgPSAoc3RhdGUsIGRpc3BhdGNoLCBwcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAvLyB4eHg6IHl5eSxcclxuICAgICAgICAvLyBvbkhhbmRsZUw6ICh4eHgpID0+IHtcclxuICAgICAgICAvLyAgICAgLi4uLi5cclxuICAgICAgICAvLyAgICAgZGlzcGF0Y2guZGlzcGF0Y2goU1VfSGFuZGxlTHh4X0hhbmRsZUx4X0hhbmRsZUwoKSk7XHJcbiAgICAgICAgLy8gfSxcclxuICAgICAgICAuLi5wcm9wcyxcclxuICAgICAgICBzY2FsZTogc3RhdGUuc2NhbGUsXHJcbiAgICB9O1xyXG59XHJcblxyXG4vLyBjb25uZWN0XHJcbmNvbnN0IEhhbmRsZUxNYXAgPSBjb25uZWN0KFxyXG4gICAgbWFwU3RhdGVUb1Byb3BzLFxyXG4gICAgbWFwRGlzcGF0Y2hUb1Byb3BzLFxyXG4gICAgbWVyZ2VQcm9wc1xyXG4pKEhhbmRsZUwpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgSGFuZGxlTE1hcDtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuXHJcbmltcG9ydCB7IERlZmluZSB9IGZyb20gJy4uL2RlZmluZS5qcyc7XHJcblxyXG5jb25zdCBzdHlsZXMgPSB7XHJcblxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBIYW5kbGVVIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIOenu+WLleWJjeOBruOCqOODh+OCo+ODg+ODiOODnOODg+OCr+OCuWFyZWHmg4XloLFcclxuICAgICAgICB0aGlzLmJveG9yZ3BvcyA9IHtcclxuICAgICAgICAgICAgeDogcHJvcHMueCxcclxuICAgICAgICAgICAgeTogcHJvcHMueSxcclxuICAgICAgICAgICAgdzogcHJvcHMudyxcclxuICAgICAgICAgICAgaDogcHJvcHMuaCxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyDjg4/jg7Pjg4njg6vjga7lhYPvvIjnp7vli5XliY3vvInjga7kuK3lv4PluqfmqJlcclxuICAgICAgICB0aGlzLmhhbmRsZW9yZ3BvcyA9IHtcclxuICAgICAgICAgICAgeDogcHJvcHMueCArIChwcm9wcy53IC8gMiksXHJcbiAgICAgICAgICAgIHk6IHByb3BzLnksXHJcbiAgICAgICAgfTtcclxuXHJcblx0XHQvLyDjg57jgqbjgrnjg4Djgqbjg7PkvY3nva5cclxuXHRcdHRoaXMubW91c2Vwb3MgPSB7XHJcblx0XHRcdHg6IDAsXHJcblx0XHRcdHk6IDAsXHJcbiAgICAgICAgfTtcclxuICAgICAgICBcclxuICAgICAgICAvLyDjg4/jg7Pjg4njg6vjga7kuK3lv4PluqfmqJnjgpLjgrvjg4Pjg4hcclxuICAgICAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICAgICAgICB4OiB0aGlzLmhhbmRsZW9yZ3Bvcy54LFxyXG4gICAgICAgICAgICB5OiB0aGlzLmhhbmRsZW9yZ3Bvcy55LFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMubW91c2VNb3ZlID0gdGhpcy5tb3VzZU1vdmUuYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLm1vdXNlVXAgICA9IHRoaXMubW91c2VVcC5iaW5kKHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XHJcbiAgICAgICAgaWYgKG5leHRQcm9wcy5oYW5kbGVSZWZyZXNoID09IHRydWUpIHtcclxuICAgICAgICAgICAgdGhpcy5ib3hvcmdwb3MgPSB7XHJcbiAgICAgICAgICAgICAgICB4OiBuZXh0UHJvcHMueCxcclxuICAgICAgICAgICAgICAgIHk6IG5leHRQcm9wcy55LFxyXG4gICAgICAgICAgICAgICAgdzogbmV4dFByb3BzLncsXHJcbiAgICAgICAgICAgICAgICBoOiBuZXh0UHJvcHMuaCxcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlb3JncG9zID0ge1xyXG4gICAgICAgICAgICAgICAgeDogbmV4dFByb3BzLnggKyAobmV4dFByb3BzLncgLyAyKSxcclxuICAgICAgICAgICAgICAgIHk6IG5leHRQcm9wcy55LFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgeDogbmV4dFByb3BzLnggKyAobmV4dFByb3BzLncgLyAyKSxcclxuICAgICAgICAgICAgeTogbmV4dFByb3BzLnksXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgbW91c2VEb3duKGUpIHtcclxuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpOyAgICAvLyDjgZPjga7jgqTjg5njg7Pjg4jjgpLjgZPjga7jg6zjgqTjg6Tjg7zjgafmraLjgoHjgovjgILkuIvjg6zjgqTjg6Tjg7zjgavjgYLjgovopoHntKDjgavjgqTjg5njg7Pjg4jjgpLotbfjgZPjgZXjgarjgYRcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7ICAgICAvLyDjg5bjg6njgqbjgrbmqJnmupbmqZ/og73jga7jgqTjg5njg7Pjg4jjgpLmipHmraLjgZnjgotcclxuXHJcbiAgICAgICAgLy8g44Oe44Km44K544Og44O844OW44Go44Oe44Km44K544Ki44OD44OX44Gu44Kk44OZ44Oz44OI44KS55m76Yyy44GZ44KLXHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5tb3VzZU1vdmUsIGZhbHNlKTtcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgICB0aGlzLm1vdXNlVXAsIGZhbHNlKTtcclxuXHJcbiAgICAgICAgLy8g44Kv44Oq44OD44Kv44Gu44Oe44Km44K544Kk44OZ44Oz44OIXHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmNsaWNrLCBmYWxzZSk7XHJcblxyXG4gICAgICAgIC8vIOODnuOCpuOCueODgOOCpuODs+OBl+OBn+OCq+ODvOOCveODq+S9jee9ruOCkuOCu+ODg+ODiOOBmeOCi1xyXG5cdFx0dGhpcy5tb3VzZXBvcy54ID0gZS5wYWdlWCAqIDEwMCAvIHRoaXMucHJvcHMuc2NhbGU7XHJcbiAgICAgICAgdGhpcy5tb3VzZXBvcy55ID0gZS5wYWdlWSAqIDEwMCAvIHRoaXMucHJvcHMuc2NhbGU7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8g44OP44Oz44OJ44Or44Oe44Km44K544OA44Km44Oz5Yem55CGXHJcbiAgICAgICAgdGhpcy5wcm9wcy5oYW5kbGVNb3VzZURvd24oKTtcclxuICAgIH1cclxuXHJcbiAgICBtb3VzZU1vdmUoZSkge1xyXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7ICAgIC8vIOOBk+OBruOCpOODmeODs+ODiOOCkuOBk+OBruODrOOCpOODpOODvOOBp+atouOCgeOCi+OAguS4i+ODrOOCpOODpOODvOOBq+OBguOCi+imgee0oOOBq+OCpOODmeODs+ODiOOCkui1t+OBk+OBleOBquOBhFxyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTsgICAgIC8vIOODluODqeOCpuOCtuaomea6luapn+iDveOBruOCpOODmeODs+ODiOOCkuaKkeatouOBmeOCi1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIOODnuOCpuOCueODoOODvOODluW+jOOBruOCq+ODvOOCveODq+S9jee9ruOCkuW+l+OCi1xyXG5cdFx0Ly8gY29uc3QgbW92ZVggPSBlLnBhZ2VYICogMTAwIC8gdGhpcy5wcm9wcy5zY2FsZTtcclxuXHRcdGNvbnN0IG1vdmVZID0gZS5wYWdlWSAqIDEwMCAvIHRoaXMucHJvcHMuc2NhbGU7XHJcblxyXG5cdFx0Ly8g5b2T44OP44Oz44OJ44Or44Gu5paw44Gf44Gq5bqn5qiZ44KS5rGC44KB44KLXHJcbiAgICAgICAgLy8gbGV0IHggPSB0aGlzLmhhbmRsZW9yZ3Bvcy54ICsgKG1vdmVYIC0gdGhpcy5tb3VzZXBvcy54KTtcclxuICAgICAgICBsZXQgeCA9IHRoaXMuaGFuZGxlb3JncG9zLng7XHJcbiAgICAgICAgbGV0IHkgPSB0aGlzLmhhbmRsZW9yZ3Bvcy55ICsgKG1vdmVZIC0gdGhpcy5tb3VzZXBvcy55KTtcclxuICAgICAgICAvLyBsZXQgeSA9IHRoaXMuaGFuZGxlb3JncG9zLnk7XHJcblxyXG4gICAgICAgIC8vIOODnOODg+OCr+OCueOBjDHjgrDjg6rjg4Pjg4nliIbjgojjgorlsI/jgZXjgY/jgarjgonjgarjgYTjgojjgYbjgavjgZnjgotcclxuICAgICAgICBbeCwgeV0gPSB0aGlzLmNoZWNrZ3JpZDFibG9jayh4LCB5KTtcclxuXHJcbiAgICAgICAgLy8g44Kw44Oq44OD44OJ44K544OK44OD44OX5Yem55CGXHJcbiAgICAgICAgW3gsIHldID0gdGhpcy5wcm9wcy5ncmlkc25hcCh4LCB5KTtcclxuICAgICAgICBcclxuXHRcdC8vIOODmeODvOOCuVNWR+OCpOODoeODvOOCuOOBruerr+OBq+ODj+ODs+ODieODq+OBjOihjOOBo+OBn+WgtOWQiOOBruW6p+aomeWkieaPm1xyXG5cdFx0W3gsIHldID0gdGhpcy5wcm9wcy5oYW5kbGVzdG9wKHgsIHkpO1xyXG5cclxuICAgICAgICAvLyDjgqjjg4fjgqPjg4Pjg4jjg5zjg4Pjgq/jgrnmm7TmlrDlh6bnkIZcclxuICAgICAgICB0aGlzLnByb3BzLmhhbmRsZU1vdmUoXHJcbiAgICAgICAgICAgIHRoaXMuYm94b3JncG9zLngsXHJcbiAgICAgICAgICAgIHksXHJcbiAgICAgICAgICAgIHRoaXMuYm94b3JncG9zLncsXHJcbiAgICAgICAgICAgIHRoaXMuYm94b3JncG9zLnkgLSB5ICsgdGhpcy5ib3hvcmdwb3MuaCxcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIG1vdXNlVXAoZSkge1xyXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7ICAgIC8vIOOBk+OBruOCpOODmeODs+ODiOOCkuOBk+OBruODrOOCpOODpOODvOOBp+atouOCgeOCi+OAguS4i+ODrOOCpOODpOODvOOBq+OBguOCi+imgee0oOOBq+OCpOODmeODs+ODiOOCkui1t+OBk+OBleOBquOBhFxyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTsgICAgIC8vIOODluODqeOCpuOCtuaomea6luapn+iDveOBruOCpOODmeODs+ODiOOCkuaKkeatouOBmeOCi1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIOOCpOODmeODs+ODiOOCkuWJiumZpOOBmeOCi1xyXG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMubW91c2VNb3ZlKTtcclxuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgICB0aGlzLm1vdXNlVXApO1xyXG5cclxuICAgICAgICAvLyBkb2N1bWVudOOBuOOBrmNsaWNr44Kk44OZ44Oz44OI44KS44Kt44Oj44Oz44K744Or44GZ44KLXHJcbiAgICAgICAgdmFyIGNhcHR1cmVDbGljayA9IChlKSA9PiB7XHJcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgY2FwdHVyZUNsaWNrLCB0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjYXB0dXJlQ2xpY2ssIHRydWUpO1xyXG5cclxuICAgICAgICAvLyDjg4/jg7Pjg4njg6tNb3VzZVVw5Yem55CGXHJcbiAgICAgICAgdGhpcy5wcm9wcy5oYW5kbGVNb3VzZVVwKCk7XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBjaGVja2dyaWQxYmxvY2soeCwgeSkge1xyXG4gICAgICAgIGNvbnN0IHkyID0gdGhpcy5ib3hvcmdwb3MueSArIHRoaXMuYm94b3JncG9zLmg7XHJcblxyXG4gICAgICAgIGlmICh5ID4geTIgLSBEZWZpbmUuZ3JpZC5oZWlnaHQpIHtcclxuICAgICAgICAgICAgeSA9IHkyIC0gRGVmaW5lLmdyaWQuaGVpZ2h0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIFt4LCB5XTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgLy8g44OP44Oz44OJ44Or44Gu44K144Kk44K644KS5rGC44KB44KLXHJcbiAgICAgICAgY29uc3QgaHcgPSBEZWZpbmUuaGFuZGxlLndpZHRoICAqIDEwMCAvIHRoaXMucHJvcHMuc2NhbGU7XHJcbiAgICAgICAgY29uc3QgaGggPSBEZWZpbmUuaGFuZGxlLmhlaWdodCAqIDEwMCAvIHRoaXMucHJvcHMuc2NhbGU7XHJcblxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxyZWN0XHJcbiAgICAgICAgICAgICAgICB4PXt0aGlzLnN0YXRlLnggLSAoaHcgLyAyKX1cclxuICAgICAgICAgICAgICAgIHk9e3RoaXMuc3RhdGUueSAtIChoaCAvIDIpfVxyXG4gICAgICAgICAgICAgICAgd2lkdGg9e2h3fVxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0PXtoaH1cclxuICAgICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsbDogJ2JsdWUnLFxyXG4gICAgICAgICAgICAgICAgfX1cclxuXHJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXsoZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7ICAgIC8vIOOBk+OBruOCpOODmeODs+ODiOOCkuOBk+OBruODrOOCpOODpOODvOOBp+atouOCgeOCi+OAguS4i+ODrOOCpOODpOODvOOBq+OBguOCi+imgee0oOOBq+OCpOODmeODs+ODiOOCkui1t+OBk+OBleOBquOBhFxyXG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsgICAgIC8vIOODluODqeOCpuOCtuaomea6luapn+iDveOBruOCpOODmeODs+ODiOOCkuaKkeatouOBmeOCi1xyXG4gICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgIG9uTW91c2VEb3duPXsoZSkgPT4gdGhpcy5tb3VzZURvd24oZSl9XHJcbiAgICAgICAgICAgIC8+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcclxuXHJcbmltcG9ydCBIYW5kbGVVIGZyb20gJy4vSGFuZGxlVS5qcyc7XHJcblxyXG4vLyBtYXBTdGF0ZVRvUHJvcHNcclxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gKHN0YXRlLCBwcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAuLi5zdGF0ZSxcclxuICAgIH07XHJcbn1cclxuXHJcbi8vIG1hcERpc3BhdGNoVG9Qcm9wc1xyXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHMgPSAoZGlzcGF0Y2gsIHByb3BzKSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGRpc3BhdGNoLFxyXG4gICAgfTtcclxufVxyXG5cclxuLy8gbWVyZ2VQcm9wcyBcclxuY29uc3QgbWVyZ2VQcm9wcyA9IChzdGF0ZSwgZGlzcGF0Y2gsIHByb3BzKSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIC8vIHh4eDogeXl5LFxyXG4gICAgICAgIC8vIG9uSGFuZGxlVTogKHh4eCkgPT4ge1xyXG4gICAgICAgIC8vICAgICAuLi4uLlxyXG4gICAgICAgIC8vICAgICBkaXNwYXRjaC5kaXNwYXRjaChTVV9IYW5kbGVVeHhfSGFuZGxlVXhfSGFuZGxlVSgpKTtcclxuICAgICAgICAvLyB9LFxyXG4gICAgICAgIC4uLnByb3BzLFxyXG4gICAgICAgIHNjYWxlOiBzdGF0ZS5zY2FsZSxcclxuICAgIH07XHJcbn1cclxuXHJcbi8vIGNvbm5lY3RcclxuY29uc3QgSGFuZGxlVU1hcCA9IGNvbm5lY3QoXHJcbiAgICBtYXBTdGF0ZVRvUHJvcHMsXHJcbiAgICBtYXBEaXNwYXRjaFRvUHJvcHMsXHJcbiAgICBtZXJnZVByb3BzXHJcbikoSGFuZGxlVSk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBIYW5kbGVVTWFwO1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5cclxuaW1wb3J0IEhhbmRsZVVNYXAgZnJvbSAnLi9IYW5kbGVVTWFwLmpzJztcclxuaW1wb3J0IEhhbmRsZUxNYXAgZnJvbSAnLi9IYW5kbGVMTWFwLmpzJztcclxuaW1wb3J0IEhhbmRsZVJNYXAgZnJvbSAnLi9IYW5kbGVSTWFwLmpzJztcclxuaW1wb3J0IEhhbmRsZURNYXAgZnJvbSAnLi9IYW5kbGVETWFwLmpzJztcclxuXHJcbmltcG9ydCB7IERlZmluZSB9IGZyb20gJy4uL2RlZmluZS5qcyc7XHJcbmltcG9ydCB7IFphaHlvIH0gIGZyb20gJy4uL2xpYnMvemFoeW8uanMnO1xyXG5cclxuY29uc3Qgc3R5bGVzID0ge1xyXG5cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlbGVjdEVkaXRCb3ggZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcblxyXG4gICAgICAgIC8vIOW9k+ODnOODg+OCr+OCueOBruWFg++8iOenu+WLleWJje+8ieOBruW3puS4iuW6p+aomVxyXG4gICAgICAgIGNvbnN0IGsgPSBaYWh5by5ydVRvbHVSZWN0KHByb3BzLngxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzLnkxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzLngyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzLnkyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlZmluZS5zdmdpbWFnZXNpemUud2lkdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVmaW5lLnN2Z2ltYWdlc2l6ZS5oZWlnaHQpO1xyXG4gICAgICAgIHRoaXMuYm94b3JncG9zID0ge1xyXG4gICAgICAgICAgICB4OiBrLngxLFxyXG4gICAgICAgICAgICB5OiBrLnkxLFxyXG4gICAgICAgIH07XHJcblxyXG5cdFx0Ly8g44Oe44Km44K544OA44Km44Oz5L2N572uXHJcblx0XHR0aGlzLm1vdXNlcG9zID0ge1xyXG5cdFx0XHR4OiAwLFxyXG5cdFx0XHR5OiAwLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8g57eo6ZuG44Oc44OD44Kv44K544Gu5bem5LiK5bqn5qiZ44Go5bmF6auY44GV44KS44K744OD44OIXHJcbiAgICAgICAgY29uc3QgeiA9IFphaHlvLnJ1VG9sdVJlY3RUb0FyZWEocHJvcHMueDEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHMueTEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHMueDIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHMueTIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVmaW5lLnN2Z2ltYWdlc2l6ZS53aWR0aCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWZpbmUuc3ZnaW1hZ2VzaXplLmhlaWdodCk7XHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgICAgICAgeDogei54LFxyXG4gICAgICAgICAgICB5OiB6LnksXHJcbiAgICAgICAgICAgIHc6IHoudyxcclxuICAgICAgICAgICAgaDogei5oLFxyXG4gICAgICAgICAgICBoYW5kbGVfcmVmcmVzaDogdHJ1ZSxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLm1vdXNlTW92ZSA9IHRoaXMubW91c2VNb3ZlLmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5tb3VzZVVwICAgPSB0aGlzLm1vdXNlVXAuYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLmJhc2VDbGljayA9IHRoaXMuYmFzZUNsaWNrLmJpbmQodGhpcyk7XHJcblxyXG4gICAgICAgIC8vIOODmeODvOOCueOCr+ODquODg+OCr+OBruOCpOODmeODs+ODiOOCkueZu+mMsuOBmeOCi1xyXG4gICAgICAgIHRoaXMuYWRkQmFzZUNsaWNrRXZlbnQoKTtcclxuICAgIH1cclxuXHJcbiAgICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xyXG4gICAgICAgIGNvbnN0IGFyZWEgPSBaYWh5by5ydVRvbHVSZWN0VG9BcmVhKG5leHRQcm9wcy54MSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0UHJvcHMueTEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dFByb3BzLngyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHRQcm9wcy55MixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWZpbmUuc3ZnaW1hZ2VzaXplLndpZHRoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlZmluZS5zdmdpbWFnZXNpemUuaGVpZ2h0KTtcclxuXHJcbiAgICAgICAgdGhpcy5ib3hvcmdwb3MgPSB7XHJcbiAgICAgICAgICAgIHg6IGFyZWEueCxcclxuICAgICAgICAgICAgeTogYXJlYS55LFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICB4OiBhcmVhLngsXHJcbiAgICAgICAgICAgIHk6IGFyZWEueSxcclxuICAgICAgICAgICAgdzogYXJlYS53LFxyXG4gICAgICAgICAgICBoOiBhcmVhLmgsXHJcbiAgICAgICAgICAgIGhhbmRsZV9yZWZyZXNoOiB0cnVlLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xyXG4gICAgICAgIHRoaXMucmVtb3ZlQmFzZUNsaWNrRXZlbnQoKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8g44OZ44O844K544Kv44Oq44OD44Kv44Gu44Kk44OZ44Oz44OI55m76Yyy5Yem55CGXHJcbiAgICBhZGRCYXNlQ2xpY2tFdmVudCgpIHtcclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndmlld2JveCcpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5iYXNlQ2xpY2ssIGZhbHNlKTtcclxuICAgIH1cclxuICAgIC8vIOODmeODvOOCueOCr+ODquODg+OCr+OBruOCpOODmeODs+ODiOWJiumZpOWHpueQhlxyXG4gICAgcmVtb3ZlQmFzZUNsaWNrRXZlbnQoKSB7XHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ZpZXdib3gnKS5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuYmFzZUNsaWNrKTtcclxuICAgIH1cclxuXHJcbiAgICBiYXNlQ2xpY2soZSkge1xyXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7ICAgIC8vIOOBk+OBruOCpOODmeODs+ODiOOCkuOBk+OBruODrOOCpOODpOODvOOBp+atouOCgeOCi+OAguS4i+ODrOOCpOODpOODvOOBq+OBguOCi+imgee0oOOBq+OCpOODmeODs+ODiOOCkui1t+OBk+OBleOBquOBhFxyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTsgICAgIC8vIOODluODqeOCpuOCtuaomea6luapn+iDveOBruOCpOODmeODs+ODiOOCkuaKkeatouOBmeOCi1xyXG5cclxuICAgICAgICAvLyDjg5njg7zjgrnjgq/jg6rjg4Pjgq/jga7jgqTjg5njg7Pjg4jjgpLliYrpmaTjgZnjgotcclxuICAgICAgICB0aGlzLnJlbW92ZUJhc2VDbGlja0V2ZW50KCk7XHJcblxyXG4gICAgICAgIHRoaXMucHJvcHMub25DbGlja0Jhc2UoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIG1vdXNlRG93bihlKSB7XHJcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTsgICAgLy8g44GT44Gu44Kk44OZ44Oz44OI44KS44GT44Gu44Os44Kk44Ok44O844Gn5q2i44KB44KL44CC5LiL44Os44Kk44Ok44O844Gr44GC44KL6KaB57Sg44Gr44Kk44OZ44Oz44OI44KS6LW344GT44GV44Gq44GEXHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOyAgICAgLy8g44OW44Op44Km44K25qiZ5rqW5qmf6IO944Gu44Kk44OZ44Oz44OI44KS5oqR5q2i44GZ44KLXHJcblxyXG4gICAgICAgIC8vIOODmeODvOOCueOCr+ODquODg+OCr+OBruOCpOODmeODs+ODiOOCkuWJiumZpOOBmeOCi1xyXG4gICAgICAgIHRoaXMucmVtb3ZlQmFzZUNsaWNrRXZlbnQoKTtcclxuXHJcbiAgICAgICAgLy8g44Oe44Km44K544Og44O844OW44Go44Oe44Km44K544Ki44OD44OX44Gu44Kk44OZ44Oz44OI44KS55m76Yyy44GZ44KLXHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5tb3VzZU1vdmUsIGZhbHNlKTtcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgICB0aGlzLm1vdXNlVXAsIGZhbHNlKTtcclxuXHJcbiAgICAgICAgLy8g44Oe44Km44K544OA44Km44Oz44GX44Gf44Kr44O844K944Or5L2N572u44KS44K744OD44OI44GZ44KLXHJcblx0XHR0aGlzLm1vdXNlcG9zLnggPSBlLnBhZ2VYICogMTAwIC8gdGhpcy5wcm9wcy5zY2FsZTtcclxuXHRcdHRoaXMubW91c2Vwb3MueSA9IGUucGFnZVkgKiAxMDAgLyB0aGlzLnByb3BzLnNjYWxlO1xyXG4gICAgfVxyXG5cclxuICAgIG1vdXNlTW92ZShlKSB7XHJcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTsgICAgLy8g44GT44Gu44Kk44OZ44Oz44OI44KS44GT44Gu44Os44Kk44Ok44O844Gn5q2i44KB44KL44CC5LiL44Os44Kk44Ok44O844Gr44GC44KL6KaB57Sg44Gr44Kk44OZ44Oz44OI44KS6LW344GT44GV44Gq44GEXHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOyAgICAgLy8g44OW44Op44Km44K25qiZ5rqW5qmf6IO944Gu44Kk44OZ44Oz44OI44KS5oqR5q2i44GZ44KLXHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8g44Oe44Km44K544Og44O844OW5b6M44Gu44Kr44O844K944Or5L2N572u44KS5b6X44KLXHJcblx0XHRjb25zdCBtb3ZlWCA9IGUucGFnZVggKiAxMDAgLyB0aGlzLnByb3BzLnNjYWxlO1xyXG5cdFx0Y29uc3QgbW92ZVkgPSBlLnBhZ2VZICogMTAwIC8gdGhpcy5wcm9wcy5zY2FsZTtcclxuXHJcblx0XHQvLyDlvZPjg5zjg4Pjgq/jgrnjga7mlrDjgZ/jgarluqfmqJnjgpLmsYLjgoHjgotcclxuXHRcdGxldCB4ID0gdGhpcy5ib3hvcmdwb3MueCArIChtb3ZlWCAtIHRoaXMubW91c2Vwb3MueCk7XHJcbiAgICAgICAgbGV0IHkgPSB0aGlzLmJveG9yZ3Bvcy55ICsgKG1vdmVZIC0gdGhpcy5tb3VzZXBvcy55KTtcclxuXHJcbiAgICAgICAgLy8g44Kw44Oq44OD44OJ44K544OK44OD44OX5Yem55CGXHJcbiAgICAgICAgW3gsIHldID0gdGhpcy5ncmlkc25hcCh4LCB5KTtcclxuICAgICAgICBcclxuXHRcdC8vIOODmeODvOOCuVNWR+OCpOODoeODvOOCuOOBruerr+OBq+W9k+ODnOODg+OCr+OCueOBjOihjOOBo+OBn+WgtOWQiOOBruW6p+aomeWkieaPm1xyXG5cdFx0W3gsIHldID0gdGhpcy5ib3htb3Zlc3RvcCh4LCB5LCB0aGlzLnN0YXRlLncsIHRoaXMuc3RhdGUuaCk7XHJcblxyXG4gICAgICAgIC8vIOeUu+WDj+OBruW6p+aomeOCkuabtOaWsOOBl+OBpuaPj+eUu+OBl+ebtOOBmVxyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICB4OiB4LFxyXG4gICAgICAgICAgICB5OiB5LFxyXG4gICAgICAgICAgICBoYW5kbGVfcmVmcmVzaDogdHJ1ZSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBtb3VzZVVwKGUpIHtcclxuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpOyAgICAvLyDjgZPjga7jgqTjg5njg7Pjg4jjgpLjgZPjga7jg6zjgqTjg6Tjg7zjgafmraLjgoHjgovjgILkuIvjg6zjgqTjg6Tjg7zjgavjgYLjgovopoHntKDjgavjgqTjg5njg7Pjg4jjgpLotbfjgZPjgZXjgarjgYRcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7ICAgICAvLyDjg5bjg6njgqbjgrbmqJnmupbmqZ/og73jga7jgqTjg5njg7Pjg4jjgpLmipHmraLjgZnjgotcclxuICAgICAgICBcclxuICAgICAgICAvLyDjgqTjg5njg7Pjg4jjgpLliYrpmaTjgZnjgotcclxuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLm1vdXNlTW92ZSk7XHJcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsICAgdGhpcy5tb3VzZVVwKTtcclxuXHJcbiAgICAgICAgLy8gZG9jdW1lbnTjgbjjga5jbGlja+OCpOODmeODs+ODiOOCkuOCreODo+ODs+OCu+ODq+OBmeOCi1xyXG4gICAgICAgIHZhciBjYXB0dXJlQ2xpY2sgPSAoZSkgPT4ge1xyXG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGNhcHR1cmVDbGljaywgdHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgY2FwdHVyZUNsaWNrLCB0cnVlKTtcclxuXHJcbiAgICAgICAgLy8g44OZ44O844K544Kv44Oq44OD44Kv44Gu44Kk44OZ44Oz44OI44KS55m76Yyy44GZ44KLXHJcbiAgICAgICAgdGhpcy5hZGRCYXNlQ2xpY2tFdmVudCgpO1xyXG5cclxuICAgICAgICAvLyDnp7vli5XntYLkuoblh6bnkIbvvIjlj7PkuIrln7rngrnjga7luqfmqJnjgpLmuKHjgZnvvIlcclxuICAgICAgICBjb25zdCB6ID0gWmFoeW8ubHVUb3J1QXJlYVRvUmVjdCh0aGlzLnN0YXRlLngsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS55LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUudyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLmgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVmaW5lLnN2Z2ltYWdlc2l6ZS53aWR0aCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWZpbmUuc3ZnaW1hZ2VzaXplLmhlaWdodCk7XHJcbiAgICAgICAgdGhpcy5wcm9wcy5lbmRNb3ZlQm94KHtcclxuICAgICAgICAgICAgaWQ6IHRoaXMucHJvcHMuaWQsXHJcbiAgICAgICAgICAgIHgxOiB6LngxLFxyXG4gICAgICAgICAgICB5MTogei55MSxcclxuICAgICAgICAgICAgeDI6IHoueDIsXHJcbiAgICAgICAgICAgIHkyOiB6LnkyLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vXHJcbiAgICAvLyDjgrDjg6rjg4Pjg4njgrnjg4rjg4Pjg5flh6bnkIZcclxuICAgIC8vXHJcbiAgICBncmlkc25hcCh4LCB5KSB7XHJcbiAgICAgICAgLy8g5Y+z5LiK5Z+654K544Gu5bqn5qiZ44Gr5aSJ5o+b44GZ44KLXHJcbiAgICAgICAgbGV0IHJ1X3ggPSBaYWh5by5sdVRvcnVYKHgsIERlZmluZS5zdmdpbWFnZXNpemUud2lkdGgpO1xyXG4gICAgICAgIGxldCBydV95ID0gWmFoeW8ubHVUb3J1WSh5LCBEZWZpbmUuc3ZnaW1hZ2VzaXplLmhlaWdodCk7XHJcblxyXG4gICAgICAgIC8vIFjluqfmqJnjgpLjgrDjg6rjg4Pjg4nluYXjgaflibLjgaPjgabjgIHkvZnjgorjgYww44Gu5aC05ZCI44Gv44CBWOW6p+aomeaxuuWumlxyXG4gICAgICAgIGxldCBhbWFyaSwgc2hvLCBtaW5YLCBtYXhYO1xyXG4gICAgICAgIGFtYXJpID0gcnVfeCAlIERlZmluZS5ncmlkLndpZHRoO1xyXG4gICAgICAgIGlmIChhbWFyaSA9PSAwKSB7XHJcbiAgICAgICAgICAgIC8vIFjluqfmqJnjga/msbrlrppcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyDjgrDjg6rjg4Pjg4njga7lsI/jgZXjgYTmlrnjga5Y5bqn5qiZ44KS5rGC44KB44KLXHJcbiAgICAgICAgICAgIHNobyA9IE1hdGguZmxvb3IocnVfeCAvIERlZmluZS5ncmlkLndpZHRoKTtcclxuICAgICAgICAgICAgbWluWCA9IHNobyAqIERlZmluZS5ncmlkLndpZHRoO1xyXG4gICAgICAgICAgICAvLyDjgrDjg6rjg4Pjg4njga7lpKfjgY3jgYTmlrnjga5Y5bqn5qiZ44KS5rGC44KB44KLXHJcbiAgICAgICAgICAgIG1heFggPSAoc2hvICsgMSkgKiBEZWZpbmUuZ3JpZC53aWR0aDtcclxuXHJcbiAgICAgICAgICAgIC8vIOS9meOCiuOBjOOAgeOCsOODquODg+ODieOBruWNiuWIhuOCiOOCiuWkp+OBjeOBkeOCjOOBsOWkp+OBjeOBhOaWueOAgeWwj+OBleOBkeOCjOOBsOWwj+OBleOBhOaWuVxyXG4gICAgICAgICAgICBpZiAoYW1hcmkgPj0gKERlZmluZS5ncmlkLndpZHRoIC8gMikpIHtcclxuICAgICAgICAgICAgICAgIHJ1X3ggPSBtYXhYO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcnVfeCA9IG1pblg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFnluqfmqJnjgpLjgrDjg6rjg4Pjg4npq5jjgZXjgaflibLjgaPjgabjgIHkvZnjgorjgYww44Gu5aC05ZCI44Gv44CBWeW6p+aomeaxuuWumlxyXG4gICAgICAgIGxldCBtaW5ZLCBtYXhZO1xyXG4gICAgICAgIGFtYXJpID0gcnVfeSAlIERlZmluZS5ncmlkLmhlaWdodDtcclxuICAgICAgICBpZiAoYW1hcmkgPT0gMCkge1xyXG4gICAgICAgICAgICAvLyBZ5bqn5qiZ44Gv5rG65a6aXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8g44Kw44Oq44OD44OJ44Gu5bCP44GV44GE5pa544GuWeW6p+aomeOCkuaxguOCgeOCi1xyXG4gICAgICAgICAgICBzaG8gPSBNYXRoLmZsb29yKHJ1X3kgLyBEZWZpbmUuZ3JpZC5oZWlnaHQpO1xyXG4gICAgICAgICAgICBtaW5ZID0gc2hvICogRGVmaW5lLmdyaWQuaGVpZ2h0O1xyXG4gICAgICAgICAgICAvLyDjgrDjg6rjg4Pjg4njga7lpKfjgY3jgYTmlrnjga5Y5bqn5qiZ44KS5rGC44KB44KLXHJcbiAgICAgICAgICAgIG1heFkgPSAoc2hvICsgMSkgKiBEZWZpbmUuZ3JpZC5oZWlnaHQ7XHJcblxyXG4gICAgICAgICAgICAvLyDkvZnjgorjgYzjgIHjgrDjg6rjg4Pjg4njga7ljYrliIbjgojjgorlpKfjgY3jgZHjgozjgbDlpKfjgY3jgYTmlrnjgIHlsI/jgZXjgZHjgozjgbDlsI/jgZXjgYTmlrlcclxuICAgICAgICAgICAgaWYgKGFtYXJpID49IChEZWZpbmUuZ3JpZC5oZWlnaHQgLyAyKSkge1xyXG4gICAgICAgICAgICAgICAgcnVfeSA9IG1heFk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBydV95ID0gbWluWTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8g5bem5LiK5Z+654K544Gu5bqn5qiZ44Gr5aSJ5o+b44GZ44KLXHJcbiAgICAgICAgeCA9IFphaHlvLnJ1VG9sdVgocnVfeCwgRGVmaW5lLnN2Z2ltYWdlc2l6ZS53aWR0aCk7XHJcbiAgICAgICAgeSA9IFphaHlvLnJ1VG9sdVkocnVfeSwgRGVmaW5lLnN2Z2ltYWdlc2l6ZS5oZWlnaHQpO1xyXG5cclxuICAgICAgICByZXR1cm4gW3gsIHldO1xyXG4gICAgfVxyXG5cclxuICAgIC8vXHJcblx0Ly8g44Oc44OD44Kv44K544GM44OZ44O844K5U1ZH44Kk44Oh44O844K444Gu5aSW44Gr5Ye644Gq44GE44KI44GG44Gr44GZ44KLXHJcblx0Ly9cclxuXHRib3htb3Zlc3RvcCh4LCB5LCB3LCBoKSB7XHJcbiAgICAgICAgLy8g5Y+z5LiK5Z+654K544GuYXJlYeW6p+aomeOBq+WkieaPm+OBmeOCi1xyXG4gICAgICAgIGNvbnN0IGFyZWEgPSBaYWh5by5sdVRvcnVBcmVhKHgsIHksIHcsIGgsIERlZmluZS5zdmdpbWFnZXNpemUud2lkdGgsIERlZmluZS5zdmdpbWFnZXNpemUuaGVpZ2h0KTtcclxuXHJcbiAgICAgICAgLy8gU1ZH44Kk44Oh44O844K444Gu5LiA55Wq5bem5YG044Gu44Kw44Oq44OD44OJ44Gu5bqn5qiZ44KS5b6X44KLXHJcbiAgICAgICAgbGV0IHNobywgZ3JpZF9seCwgZ3JpZF9keTtcclxuICAgICAgICBzaG8gPSBNYXRoLmZsb29yKERlZmluZS5zdmdpbWFnZXNpemUud2lkdGggLyBEZWZpbmUuZ3JpZC53aWR0aCk7XHJcbiAgICAgICAgZ3JpZF9seCA9IERlZmluZS5ncmlkLndpZHRoICogc2hvO1xyXG4gICAgICAgIC8vIFNWR+OCpOODoeODvOOCuOOBruS4gOeVquS4i+WBtOOBruOCsOODquODg+ODieOBruW6p+aomeOCkuW+l+OCi1xyXG4gICAgICAgIHNobyA9IE1hdGguZmxvb3IoRGVmaW5lLnN2Z2ltYWdlc2l6ZS5oZWlnaHQgLyBEZWZpbmUuZ3JpZC5oZWlnaHQpO1xyXG4gICAgICAgIGdyaWRfZHkgPSBEZWZpbmUuZ3JpZC5oZWlnaHQgKiBzaG87XHJcblxyXG5cdFx0aWYgKGFyZWEueCA8PSAwKSB7XHJcblx0XHRcdGFyZWEueCA9IDA7XHJcblx0XHR9IGVsc2UgaWYgKGFyZWEueCArIHcgPj0gZ3JpZF9seCkge1xyXG5cdFx0XHRhcmVhLnggPSBncmlkX2x4IC0gYXJlYS53O1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuXHRcdGlmIChhcmVhLnkgPD0gMCkge1xyXG5cdFx0XHRhcmVhLnkgPSAwO1xyXG5cdFx0fSBlbHNlIGlmIChhcmVhLnkgKyBoID49IGdyaWRfZHkpIHtcclxuXHRcdFx0YXJlYS55ID0gZ3JpZF9keSAtIGFyZWEuaDtcclxuXHRcdH1cclxuXHJcbiAgICAgICAgLy8g5bem5LiK5Z+654K544Gu5bqn5qiZ44Gr5aSJ5o+b44GZ44KLXHJcbiAgICAgICAgY29uc3QgeiA9IFphaHlvLnJ1VG9sdUFyZWEoYXJlYS54LCBhcmVhLnksIGFyZWEudywgYXJlYS5oLCBEZWZpbmUuc3ZnaW1hZ2VzaXplLndpZHRoLCBEZWZpbmUuc3ZnaW1hZ2VzaXplLmhlaWdodCk7XHJcblxyXG4gICAgICAgIHJldHVybiBbei54LCB6LnldO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyDjg4/jg7Pjg4njg6vjgYzjg5njg7zjgrlTVkfjgqTjg6Hjg7zjgrjjga7lpJbjgavlh7rjgarjgYTjgojjgYbjgavjgZnjgotcclxuICAgIGhhbmRsZXN0b3AoeCwgeSkge1xyXG4gICAgICAgIC8vIOWPs+S4iuWfuueCueOBruW6p+aomeOBq+WkieaPm+OBmeOCi1xyXG4gICAgICAgIGxldCByeCA9IFphaHlvLmx1VG9ydVgoeCwgRGVmaW5lLnN2Z2ltYWdlc2l6ZS53aWR0aCk7XHJcbiAgICAgICAgbGV0IHJ5ID0gWmFoeW8ubHVUb3J1WSh5LCBEZWZpbmUuc3ZnaW1hZ2VzaXplLmhlaWdodCk7XHJcblxyXG4gICAgICAgIC8vIFNWR+OCpOODoeODvOOCuOOBruS4gOeVquW3puWBtOOBruOCsOODquODg+ODieOBruW6p+aomeOCkuW+l+OCi1xyXG4gICAgICAgIGxldCBzaG8sIGdyaWRfbHgsIGdyaWRfZHk7XHJcbiAgICAgICAgc2hvID0gTWF0aC5mbG9vcihEZWZpbmUuc3ZnaW1hZ2VzaXplLndpZHRoIC8gRGVmaW5lLmdyaWQud2lkdGgpO1xyXG4gICAgICAgIGdyaWRfbHggPSBEZWZpbmUuZ3JpZC53aWR0aCAqIHNobztcclxuICAgICAgICAvLyBTVkfjgqTjg6Hjg7zjgrjjga7kuIDnlarkuIvlgbTjga7jgrDjg6rjg4Pjg4njga7luqfmqJnjgpLlvpfjgotcclxuICAgICAgICBzaG8gPSBNYXRoLmZsb29yKERlZmluZS5zdmdpbWFnZXNpemUuaGVpZ2h0IC8gRGVmaW5lLmdyaWQuaGVpZ2h0KTtcclxuICAgICAgICBncmlkX2R5ID0gRGVmaW5lLmdyaWQuaGVpZ2h0ICogc2hvO1xyXG5cclxuXHRcdGlmIChyeCA8PSAwKSB7XHJcblx0XHRcdHJ4ID0gMDtcclxuXHRcdH0gZWxzZSBpZiAocnggPj0gZ3JpZF9seCkge1xyXG5cdFx0XHRyeCA9IGdyaWRfbHg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG5cdFx0aWYgKHJ5IDw9IDApIHtcclxuXHRcdFx0cnkgPSAwO1xyXG5cdFx0fSBlbHNlIGlmIChyeSA+PSBncmlkX2R5KSB7XHJcblx0XHRcdHJ5ID0gZ3JpZF9keTtcclxuXHRcdH1cclxuXHJcbiAgICAgICAgLy8g5bem5LiK5Z+654K544Gu5bqn5qiZ44Gr5aSJ5o+b44GZ44KLXHJcbiAgICAgICAgeCA9IFphaHlvLnJ1VG9sdVgocngsIERlZmluZS5zdmdpbWFnZXNpemUud2lkdGgpO1xyXG4gICAgICAgIHkgPSBaYWh5by5ydVRvbHVZKHJ5LCBEZWZpbmUuc3ZnaW1hZ2VzaXplLmhlaWdodCk7XHJcblxyXG4gICAgICAgIHJldHVybiBbeCwgeV07XHJcbiAgICB9XHJcblxyXG4gICAgLy8g44OP44Oz44OJ44Or44Gu44Oe44Km44K544OA44Km44Oz5pmC44Gu5Yem55CGXHJcbiAgICBoYW5kbGVNb3VzZURvd24oKSB7XHJcbiAgICAgICAgLy8g44OZ44O844K544Kv44Oq44OD44Kv44Kk44OZ44Oz44OI44KS5YmK6Zmk44GZ44KLXHJcbiAgICAgICAgdGhpcy5yZW1vdmVCYXNlQ2xpY2tFdmVudCgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOODj+ODs+ODieODq+OBrk1vdmXmmYLjga7mm7TmlrDlh6bnkIZcclxuICAgIGhhbmRsZU1vdmUoeCwgeSwgdywgaCkge1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICB4OiB4LFxyXG4gICAgICAgICAgICB5OiB5LFxyXG4gICAgICAgICAgICB3OiB3LFxyXG4gICAgICAgICAgICBoOiBoLFxyXG4gICAgICAgICAgICBoYW5kbGVfcmVmcmVzaDogZmFsc2UsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g44OP44Oz44OJ44Or44Gu44Oe44Km44K544Ki44OD44OX5pmC44Gu5pu05paw5Yem55CGXHJcbiAgICBoYW5kbGVNb3VzZVVwKCkge1xyXG4gICAgICAgIC8vIOODmeODvOOCueOCr+ODquODg+OCr+OCpOODmeODs+ODiOOCkueZu+mMsuOBmeOCi1xyXG4gICAgICAgIHRoaXMuYWRkQmFzZUNsaWNrRXZlbnQoKTtcclxuXHJcbiAgICAgICAgLy8g56e75YuV57WC5LqG5Yem55CG77yI5Y+z5LiK5Z+654K544Gu5bqn5qiZ44KS5rih44GZ77yJXHJcbiAgICAgICAgY29uc3QgeiA9IFphaHlvLmx1VG9ydUFyZWFUb1JlY3QodGhpcy5zdGF0ZS54LFxyXG4gICAgICAgICAgICB0aGlzLnN0YXRlLnksXHJcbiAgICAgICAgICAgIHRoaXMuc3RhdGUudyxcclxuICAgICAgICAgICAgdGhpcy5zdGF0ZS5oLFxyXG4gICAgICAgICAgICBEZWZpbmUuc3ZnaW1hZ2VzaXplLndpZHRoLFxyXG4gICAgICAgICAgICBEZWZpbmUuc3ZnaW1hZ2VzaXplLmhlaWdodCk7XHJcblxyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICBoYW5kbGVfcmVmcmVzaDogdHJ1ZSxcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5wcm9wcy5lbmRDaGFuZ2VTaXplQm94KHtcclxuICAgICAgICAgICAgaWQ6IHRoaXMucHJvcHMuaWQsXHJcbiAgICAgICAgICAgIHgxOiB6LngxLFxyXG4gICAgICAgICAgICB5MTogei55MSxcclxuICAgICAgICAgICAgeDI6IHoueDIsXHJcbiAgICAgICAgICAgIHkyOiB6LnkyLFxyXG4gICAgICAgIH0pOyAgICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxnPlxyXG4gICAgICAgICAgICAgICAgPHJlY3RcclxuICAgICAgICAgICAgICAgICAgICBpZD17YCR7dGhpcy5wcm9wcy5pZH1fc2VsZWN0Ym94YH1cclxuICAgICAgICAgICAgICAgICAgICB4PXt0aGlzLnN0YXRlLnh9XHJcbiAgICAgICAgICAgICAgICAgICAgeT17dGhpcy5zdGF0ZS55fVxyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoPXt0aGlzLnN0YXRlLnd9XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PXt0aGlzLnN0YXRlLmh9XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsbDogJ2JsdWUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogJzAuMycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZpbGw6ICdub25lJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiAnYmx1ZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZVdpZHRoOiAyICogMTAwIC8gdGhpcy5wcm9wcy5zY2FsZSxcclxuICAgICAgICAgICAgICAgICAgICB9fVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpOyAgICAvLyDjgZPjga7jgqTjg5njg7Pjg4jjgpLjgZPjga7jg6zjgqTjg6Tjg7zjgafmraLjgoHjgovjgILkuIvjg6zjgqTjg6Tjg7zjgavjgYLjgovopoHntKDjgavjgqTjg5njg7Pjg4jjgpLotbfjgZPjgZXjgarjgYRcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOyAgICAgLy8g44OW44Op44Km44K25qiZ5rqW5qmf6IO944Gu44Kk44OZ44Oz44OI44KS5oqR5q2i44GZ44KLXHJcbiAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgICAgICBvbk1vdXNlRG93bj17KGUpID0+IHRoaXMubW91c2VEb3duKGUpfVxyXG4gICAgICAgICAgICAgICAgLz5cclxuXHJcbiAgICAgICAgICAgICAgICB7Lyog44Kw44Or44O844OXTm8gKi99XHJcbiAgICAgICAgICAgICAgICA8dGV4dFxyXG4gICAgICAgICAgICAgICAgICAgIHg9e3RoaXMuc3RhdGUueCArIDV9XHJcbiAgICAgICAgICAgICAgICAgICAgeT17dGhpcy5zdGF0ZS55ICsgMjB9XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6IDE1LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJva2U6ICdub25lJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsbDogJ3doaXRlJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6ICcwLjcnLFxyXG4gICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAge3RoaXMucHJvcHMubm99XHJcbiAgICAgICAgICAgICAgICA8L3RleHQ+XHJcblxyXG4gICAgICAgICAgICAgICAgPEhhbmRsZVVNYXBcclxuICAgICAgICAgICAgICAgICAgICB4PXt0aGlzLnN0YXRlLnh9XHJcbiAgICAgICAgICAgICAgICAgICAgeT17dGhpcy5zdGF0ZS55fVxyXG4gICAgICAgICAgICAgICAgICAgIHc9e3RoaXMuc3RhdGUud31cclxuICAgICAgICAgICAgICAgICAgICBoPXt0aGlzLnN0YXRlLmh9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZVJlZnJlc2g9e3RoaXMuc3RhdGUuaGFuZGxlX3JlZnJlc2h9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGdyaWRzbmFwPXsoeCwgeSkgPT4gdGhpcy5ncmlkc25hcCh4LCB5KX1cclxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVzdG9wPXsoeCwgeSwgdywgaCkgPT4gdGhpcy5oYW5kbGVzdG9wKHgsIHksIHcsIGgpfVxyXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZU1vdXNlRG93bj17KCkgPT4gdGhpcy5oYW5kbGVNb3VzZURvd24oKX1cclxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVNb3ZlPXsoeCwgeSwgdywgaCkgPT4gdGhpcy5oYW5kbGVNb3ZlKHgsIHksIHcsIGgpfVxyXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZU1vdXNlVXA9eygpID0+IHRoaXMuaGFuZGxlTW91c2VVcCgpfVxyXG4gICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgIDxIYW5kbGVMTWFwXHJcbiAgICAgICAgICAgICAgICAgICAgeD17dGhpcy5zdGF0ZS54fVxyXG4gICAgICAgICAgICAgICAgICAgIHk9e3RoaXMuc3RhdGUueX1cclxuICAgICAgICAgICAgICAgICAgICB3PXt0aGlzLnN0YXRlLnd9XHJcbiAgICAgICAgICAgICAgICAgICAgaD17dGhpcy5zdGF0ZS5ofVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVSZWZyZXNoPXt0aGlzLnN0YXRlLmhhbmRsZV9yZWZyZXNofVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBncmlkc25hcD17KHgsIHkpID0+IHRoaXMuZ3JpZHNuYXAoeCwgeSl9XHJcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlc3RvcD17KHgsIHksIHcsIGgpID0+IHRoaXMuaGFuZGxlc3RvcCh4LCB5LCB3LCBoKX1cclxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVNb3VzZURvd249eygpID0+IHRoaXMuaGFuZGxlTW91c2VEb3duKCl9XHJcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlTW92ZT17KHgsIHksIHcsIGgpID0+IHRoaXMuaGFuZGxlTW92ZSh4LCB5LCB3LCBoKX1cclxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVNb3VzZVVwPXsoKSA9PiB0aGlzLmhhbmRsZU1vdXNlVXAoKX1cclxuICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICA8SGFuZGxlUk1hcFxyXG4gICAgICAgICAgICAgICAgICAgIHg9e3RoaXMuc3RhdGUueH1cclxuICAgICAgICAgICAgICAgICAgICB5PXt0aGlzLnN0YXRlLnl9XHJcbiAgICAgICAgICAgICAgICAgICAgdz17dGhpcy5zdGF0ZS53fVxyXG4gICAgICAgICAgICAgICAgICAgIGg9e3RoaXMuc3RhdGUuaH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlUmVmcmVzaD17dGhpcy5zdGF0ZS5oYW5kbGVfcmVmcmVzaH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZ3JpZHNuYXA9eyh4LCB5KSA9PiB0aGlzLmdyaWRzbmFwKHgsIHkpfVxyXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZXN0b3A9eyh4LCB5LCB3LCBoKSA9PiB0aGlzLmhhbmRsZXN0b3AoeCwgeSwgdywgaCl9XHJcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlTW91c2VEb3duPXsoKSA9PiB0aGlzLmhhbmRsZU1vdXNlRG93bigpfVxyXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZU1vdmU9eyh4LCB5LCB3LCBoKSA9PiB0aGlzLmhhbmRsZU1vdmUoeCwgeSwgdywgaCl9XHJcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlTW91c2VVcD17KCkgPT4gdGhpcy5oYW5kbGVNb3VzZVVwKCl9XHJcbiAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgPEhhbmRsZURNYXBcclxuICAgICAgICAgICAgICAgICAgICB4PXt0aGlzLnN0YXRlLnh9XHJcbiAgICAgICAgICAgICAgICAgICAgeT17dGhpcy5zdGF0ZS55fVxyXG4gICAgICAgICAgICAgICAgICAgIHc9e3RoaXMuc3RhdGUud31cclxuICAgICAgICAgICAgICAgICAgICBoPXt0aGlzLnN0YXRlLmh9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZVJlZnJlc2g9e3RoaXMuc3RhdGUuaGFuZGxlX3JlZnJlc2h9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGdyaWRzbmFwPXsoeCwgeSkgPT4gdGhpcy5ncmlkc25hcCh4LCB5KX1cclxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVzdG9wPXsoeCwgeSwgdywgaCkgPT4gdGhpcy5oYW5kbGVzdG9wKHgsIHksIHcsIGgpfVxyXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZU1vdXNlRG93bj17KCkgPT4gdGhpcy5oYW5kbGVNb3VzZURvd24oKX1cclxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVNb3ZlPXsoeCwgeSwgdywgaCkgPT4gdGhpcy5oYW5kbGVNb3ZlKHgsIHksIHcsIGgpfVxyXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZU1vdXNlVXA9eygpID0+IHRoaXMuaGFuZGxlTW91c2VVcCgpfVxyXG4gICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgPC9nPiBcclxuICAgICAgICApXHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcclxuXHJcbmltcG9ydCBTZWxlY3RFZGl0Qm94IGZyb20gJy4vU2VsZWN0RWRpdEJveC5qcyc7XHJcblxyXG5pbXBvcnQge1xyXG4gICAgU1VfU2VsZWN0Qm94X0JveF9Ob25TZWxlY3QsXHJcbiAgICBTVV9TZWxlY3RCb3hfRWRpdEJveF9Nb3ZlRW5kLFxyXG4gICAgU1VfU2VsZWN0Qm94X0VkaXRCb3hfQ2hhbmdlU2l6ZSxcclxufSBmcm9tICcuLi9hY3Rpb25zX3N1L3NlbGVjdGJveC5qcyc7XHJcblxyXG4vLyBtYXBTdGF0ZVRvUHJvcHNcclxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gKHN0YXRlLCBwcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAuLi5zdGF0ZSxcclxuICAgIH07XHJcbn1cclxuXHJcbi8vIG1hcERpc3BhdGNoVG9Qcm9wc1xyXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHMgPSAoZGlzcGF0Y2gsIHByb3BzKSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGRpc3BhdGNoLFxyXG4gICAgfTtcclxufVxyXG5cclxuLy8gbWVyZ2VQcm9wcyBcclxuY29uc3QgbWVyZ2VQcm9wcyA9IChzdGF0ZSwgZGlzcGF0Y2gsIHByb3BzKSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIC8vIHh4eDogeXl5LFxyXG4gICAgICAgIC8vIG9uWHh4eDogKHh4eCkgPT4ge1xyXG4gICAgICAgIC8vICAgICAuLi4uLlxyXG4gICAgICAgIC8vICAgICBkaXNwYXRjaC5kaXNwYXRjaChTVV9YeHh4eHhfWHh4eHhfWHh4eCgpKTtcclxuICAgICAgICAvLyB9LFxyXG4gICAgICAgIC4uLnByb3BzLFxyXG4gICAgICAgIHNjYWxlOiBzdGF0ZS5zY2FsZSxcclxuXHJcbiAgICAgICAgZW5kTW92ZUJveDogKHBheWxvYWQpID0+IHtcclxuICAgICAgICAgICAgZGlzcGF0Y2guZGlzcGF0Y2goU1VfU2VsZWN0Qm94X0VkaXRCb3hfTW92ZUVuZChwYXlsb2FkKSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbmRDaGFuZ2VTaXplQm94OiAocGF5bG9hZCkgPT4ge1xyXG4gICAgICAgICAgICBkaXNwYXRjaC5kaXNwYXRjaChTVV9TZWxlY3RCb3hfRWRpdEJveF9DaGFuZ2VTaXplKHBheWxvYWQpKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBvbkNsaWNrQmFzZTogKCkgPT4ge1xyXG4gICAgICAgICAgICBkaXNwYXRjaC5kaXNwYXRjaChTVV9TZWxlY3RCb3hfQm94X05vblNlbGVjdCgpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfTtcclxufVxyXG5cclxuLy8gY29ubmVjdFxyXG5jb25zdCBTZWxlY3RFZGl0Qm94TWFwID0gY29ubmVjdChcclxuICAgIG1hcFN0YXRlVG9Qcm9wcyxcclxuICAgIG1hcERpc3BhdGNoVG9Qcm9wcyxcclxuICAgIG1lcmdlUHJvcHNcclxuKShTZWxlY3RFZGl0Qm94KTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNlbGVjdEVkaXRCb3hNYXA7XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcblxyXG5pbXBvcnQgU2VsZWN0RWRpdEJveE1hcCAgIGZyb20gJy4vU2VsZWN0RWRpdEJveE1hcC5qcyc7XHJcbmltcG9ydCBTZWxlY3RHcm91cEJveE1hcCAgZnJvbSAnLi9TZWxlY3RHcm91cEJveE1hcC5qcyc7XHJcbmltcG9ydCBTZWxlY3RTb25vdGFCb3hNYXAgZnJvbSAnLi9TZWxlY3RTb25vdGFCb3hNYXAuanMnO1xyXG5cclxuY29uc3Qgc3R5bGVzID0ge1xyXG5cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlbGVjdEJveHMgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcbiAgICB9XHJcblxyXG4gICAgc2VsZWN0QWxsU29ub3RhQm94KCkge1xyXG4gICAgICAgIGxldCBzZWxlY3Rib3hzID0gW107XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5wcm9wcy5ib3hzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHNlbGVjdGJveHMucHVzaChcclxuICAgICAgICAgICAgICAgIDxTZWxlY3RTb25vdGFCb3hNYXBcclxuICAgICAgICAgICAgICAgICAgICBpZD17dGhpcy5wcm9wcy5ib3hzW2ldLmlkfVxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU9e3RoaXMucHJvcHMuYm94c1tpXS50eXBlfVxyXG4gICAgICAgICAgICAgICAgICAgIHgxPXt0aGlzLnByb3BzLmJveHNbaV0ueDF9XHJcbiAgICAgICAgICAgICAgICAgICAgeTE9e3RoaXMucHJvcHMuYm94c1tpXS55MX1cclxuICAgICAgICAgICAgICAgICAgICB4Mj17dGhpcy5wcm9wcy5ib3hzW2ldLngyfVxyXG4gICAgICAgICAgICAgICAgICAgIHkyPXt0aGlzLnByb3BzLmJveHNbaV0ueTJ9XHJcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXA9e3RoaXMucHJvcHMuYm94c1tpXS5ncm91cH1cclxuICAgICAgICAgICAgICAgICAgICBubz17dGhpcy5wcm9wcy5ib3hzW2ldLm5vfVxyXG4gICAgICAgICAgICAgICAgLz4gICAgICAgICAgIFxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gc2VsZWN0Ym94cztcclxuICAgIH1cclxuXHJcbiAgICBzZWxlY3RCb3goKSB7XHJcbiAgICAgICAgbGV0IHNlbGVjdGJveHMgPSBbXTtcclxuICAgICAgICBsZXQgZWRpdGJveDtcclxuICAgICAgICBcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucHJvcHMuYm94cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAvLyDpgbjmip7jgZfjgZ/jg5zjg4Pjgq/jgrnvvIjjgqjjg4fjgqPjg4Pjg4jjg5zjg4Pjgq/jgrnvvInjga7loLTlkIjjga/jgIHphY3liJfjga7mnIDlvozjgavov73liqDjgZnjgovjgZ/jgoHjgIHkv53lrZhcclxuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMuZm9jdXNib3guaWQgPT0gdGhpcy5wcm9wcy5ib3hzW2ldLmlkKSB7XHJcbiAgICAgICAgICAgICAgICBlZGl0Ym94ID0gKFxyXG4gICAgICAgICAgICAgICAgICAgIDxTZWxlY3RFZGl0Qm94TWFwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkPXt0aGlzLnByb3BzLmJveHNbaV0uaWR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9e3RoaXMucHJvcHMuYm94c1tpXS50eXBlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB4MT17dGhpcy5wcm9wcy5ib3hzW2ldLngxfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB5MT17dGhpcy5wcm9wcy5ib3hzW2ldLnkxfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB4Mj17dGhpcy5wcm9wcy5ib3hzW2ldLngyfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB5Mj17dGhpcy5wcm9wcy5ib3hzW2ldLnkyfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBncm91cD17dGhpcy5wcm9wcy5ib3hzW2ldLmdyb3VwfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBubz17dGhpcy5wcm9wcy5ib3hzW2ldLm5vfVxyXG4gICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyDpgbjmip7jgZfjgZ/jg5zjg4Pjgq/jgrnjga7jgrDjg6vjg7zjg5fjg5zjg4Pjgq/jgrnjga7loLTlkIhcclxuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMuZm9jdXNib3guZ3JvdXAgPT0gdGhpcy5wcm9wcy5ib3hzW2ldLmdyb3VwKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxlY3Rib3hzLnB1c2goXHJcbiAgICAgICAgICAgICAgICAgICAgPFNlbGVjdEdyb3VwQm94TWFwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkPXt0aGlzLnByb3BzLmJveHNbaV0uaWR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9e3RoaXMucHJvcHMuYm94c1tpXS50eXBlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB4MT17dGhpcy5wcm9wcy5ib3hzW2ldLngxfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB5MT17dGhpcy5wcm9wcy5ib3hzW2ldLnkxfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB4Mj17dGhpcy5wcm9wcy5ib3hzW2ldLngyfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB5Mj17dGhpcy5wcm9wcy5ib3hzW2ldLnkyfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBncm91cD17dGhpcy5wcm9wcy5ib3hzW2ldLmdyb3VwfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBubz17dGhpcy5wcm9wcy5ib3hzW2ldLm5vfVxyXG4gICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyDjgZ3jga7ku5bjga7jg5zjg4Pjgq/jgrnjga7loLTlkIhcclxuICAgICAgICAgICAgc2VsZWN0Ym94cy5wdXNoKFxyXG4gICAgICAgICAgICAgICAgPFNlbGVjdFNvbm90YUJveE1hcFxyXG4gICAgICAgICAgICAgICAgICAgIGlkPXt0aGlzLnByb3BzLmJveHNbaV0uaWR9XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZT17dGhpcy5wcm9wcy5ib3hzW2ldLnR5cGV9XHJcbiAgICAgICAgICAgICAgICAgICAgeDE9e3RoaXMucHJvcHMuYm94c1tpXS54MX1cclxuICAgICAgICAgICAgICAgICAgICB5MT17dGhpcy5wcm9wcy5ib3hzW2ldLnkxfVxyXG4gICAgICAgICAgICAgICAgICAgIHgyPXt0aGlzLnByb3BzLmJveHNbaV0ueDJ9XHJcbiAgICAgICAgICAgICAgICAgICAgeTI9e3RoaXMucHJvcHMuYm94c1tpXS55Mn1cclxuICAgICAgICAgICAgICAgICAgICBncm91cD17dGhpcy5wcm9wcy5ib3hzW2ldLmdyb3VwfVxyXG4gICAgICAgICAgICAgICAgICAgIG5vPXt0aGlzLnByb3BzLmJveHNbaV0ubm99XHJcbiAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8g44Ko44OH44Kj44OD44OI44Oc44OD44Kv44K544KS5pyA5b6M44Gr6L+95Yqg44GZ44KLXHJcbiAgICAgICAgc2VsZWN0Ym94cy5wdXNoKGVkaXRib3gpO1xyXG5cclxuICAgICAgICByZXR1cm4gc2VsZWN0Ym94cztcclxuICAgIH1cclxuXHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGxldCBzZWxlY3Rib3hzO1xyXG4gICAgICAgIGlmICh0aGlzLnByb3BzLmZvY3VzYm94LmlkID09ICcnKSB7XHJcbiAgICAgICAgICAgIHNlbGVjdGJveHMgPSB0aGlzLnNlbGVjdEFsbFNvbm90YUJveCgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHNlbGVjdGJveHMgPSB0aGlzLnNlbGVjdEJveCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGc+XHJcbiAgICAgICAgICAgICAgICB7c2VsZWN0Ym94c31cclxuICAgICAgICAgICAgPC9nPiAgICAgICAgICAgIFxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcclxuXHJcbmltcG9ydCBTZWxlY3RCb3hzIGZyb20gJy4vU2VsZWN0Qm94cy5qcyc7XHJcblxyXG4vLyBpbXBvcnQge1xyXG4vLyAgICAgU1VfU2VsZWN0Qm94X0JveF9TZWxlY3QsXHJcbi8vIH0gZnJvbSAnLi4vYWN0aW9uc19zdS9zZWxlY3Rib3guanMnO1xyXG5cclxuXHJcbi8vIG1hcFN0YXRlVG9Qcm9wc1xyXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSAoc3RhdGUsIHByb3BzKSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIC4uLnN0YXRlLFxyXG4gICAgfTtcclxufVxyXG5cclxuLy8gbWFwRGlzcGF0Y2hUb1Byb3BzXHJcbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcyA9IChkaXNwYXRjaCwgcHJvcHMpID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZGlzcGF0Y2gsXHJcbiAgICB9O1xyXG59XHJcblxyXG4vLyBtZXJnZVByb3BzIFxyXG5jb25zdCBtZXJnZVByb3BzID0gKHN0YXRlLCBkaXNwYXRjaCwgcHJvcHMpID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgLy8geHh4OiB5eXksXHJcbiAgICAgICAgLy8gb25YeHh4OiAoeHh4KSA9PiB7XHJcbiAgICAgICAgLy8gICAgIC4uLi4uXHJcbiAgICAgICAgLy8gICAgIGRpc3BhdGNoLmRpc3BhdGNoKFNVX1h4eHh4eF9YeHh4eF9YeHh4KCkpO1xyXG4gICAgICAgIC8vIH0sXHJcbiAgICAgICAgLy8gLi4ucHJvcHMsXHJcbiAgICAgICAgYm94czogc3RhdGUuYm94cyxcclxuICAgICAgICBmb2N1c2JveDogc3RhdGUuZm9jdXNib3gsXHJcbiAgICB9O1xyXG59XHJcblxyXG4vLyBjb25uZWN0XHJcbmNvbnN0IFNlbGVjdEJveHNNYXAgPSBjb25uZWN0KFxyXG4gICAgbWFwU3RhdGVUb1Byb3BzLFxyXG4gICAgbWFwRGlzcGF0Y2hUb1Byb3BzLFxyXG4gICAgbWVyZ2VQcm9wc1xyXG4pKFNlbGVjdEJveHMpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgU2VsZWN0Qm94c01hcDtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuXHJcbmltcG9ydCB7IFphaHlvIH0gZnJvbSAnLi4vbGlicy96YWh5by5qcyc7XHJcblxyXG5jb25zdCBzdHlsZXMgPSB7XHJcbiAgICBjb250YWluZXI6IHtcclxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd5ZWxsb3cnLFxyXG4gICAgfSxcclxufTsgXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUZXh0Qm94IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG4gICAgfVxyXG5cclxuICAgIGJveCgpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8cmVjdFxyXG4gICAgICAgICAgICAgICAgeD1cIjBcIlxyXG4gICAgICAgICAgICAgICAgeT1cIjBcIlxyXG4gICAgICAgICAgICAgICAgd2lkdGg9e3RoaXMucHJvcHMud2lkdGh9XHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ9e3RoaXMucHJvcHMuaGVpZ2h0fVxyXG4gICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICBzdHJva2U6ICdub25lJyxcclxuICAgICAgICAgICAgICAgICAgICBmaWxsOiAnbGlnaHR5ZWxsb3cnLFxyXG4gICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6ICcwLjUnLFxyXG4gICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgLz5cclxuICAgICAgICApXHJcbiAgICB9XHJcblxyXG4gICAgdGV4dGdyaWQoKSB7XHJcbiAgICAgICAgbGV0IGFyeSA9IFtdO1xyXG4gICAgICAgIGxldCB4LCB5O1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucHJvcHMudGV4dGdyaWQubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IGNqLCBjZywgeCwgeSwgc2l6ZV94LCBzaXplX3k7XHJcbiAgICAgICAgICAgIGNqID0gdGhpcy5wcm9wcy50ZXh0Z3JpZFtpXVswXTtcclxuICAgICAgICAgICAgY2cgPSB0aGlzLnByb3BzLnRleHRncmlkW2ldWzFdO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMudGV4dC5rdW1paG9rbyA9PSAndGF0ZScpIHtcclxuICAgICAgICAgICAgICAgIHggPSBaYWh5by5ydVRvbHVYKGNnLCB0aGlzLnByb3BzLndpZHRoKTtcclxuICAgICAgICAgICAgICAgIHkgPSBaYWh5by5ydVRvbHVZKGNqLCB0aGlzLnByb3BzLmhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICBzaXplX3ggPSB0aGlzLnByb3BzLnRleHQuc2l6ZV9nO1xyXG4gICAgICAgICAgICAgICAgc2l6ZV95ID0gdGhpcy5wcm9wcy50ZXh0LnNpemVfajtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHggPSBjajtcclxuICAgICAgICAgICAgICAgIHkgPSBjZztcclxuICAgICAgICAgICAgICAgIHNpemVfeCA9IHRoaXMucHJvcHMudGV4dC5zaXplX2o7XHJcbiAgICAgICAgICAgICAgICBzaXplX3kgPSB0aGlzLnByb3BzLnRleHQuc2l6ZV9nO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBhcnkucHVzaChcclxuICAgICAgICAgICAgICAgIDxyZWN0XHJcbiAgICAgICAgICAgICAgICAgICAgeD17eCAtIChzaXplX3ggLyAyKX1cclxuICAgICAgICAgICAgICAgICAgICB5PXt5IC0gKHNpemVfeSAvIDIpfVxyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoPXtzaXplX3h9XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PXtzaXplX3l9XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiAnbGlnaHRncmF5JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlV2lkdGg6ICcxJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsbDogJ25vbmUnLFxyXG4gICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGFyeTtcclxuICAgIH1cclxuXHJcbiAgICB0ZXh0KCkge1xyXG4gICAgICAgIGxldCBhcnkgPSBbXTtcclxuICAgICAgICBsZXQgeCwgeTtcclxuXHJcbmNvbnNvbGUubG9nKHRoaXMucHJvcHMudGV4dFJlc3VsdCk7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5wcm9wcy50ZXh0UmVzdWx0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCBjaiwgY2csIHgsIHksIHNpemVfeCwgc2l6ZV95O1xyXG4gICAgICAgICAgICBjaiA9IHRoaXMucHJvcHMudGV4dFJlc3VsdFtpXS5qO1xyXG4gICAgICAgICAgICBjZyA9IHRoaXMucHJvcHMudGV4dFJlc3VsdFtpXS5nO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMudGV4dC5rdW1paG9rbyA9PSAndGF0ZScpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLnRleHRSZXN1bHRbaV0uc2l6ZV9nID09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBzaXplX3ggPSB0aGlzLnByb3BzLnRleHQuc2l6ZV9nO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBzaXplX3ggPSB0aGlzLnByb3BzLnRleHRSZXN1bHRbaV0uc2l6ZV9nO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMudGV4dFJlc3VsdFtpXS5zaXplX2ogPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNpemVfeSA9IHRoaXMucHJvcHMudGV4dC5zaXplX2o7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHNpemVfeSA9IHRoaXMucHJvcHMudGV4dFJlc3VsdFtpXS5zaXplX2o7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgeCA9IFphaHlvLnJ1VG9sdVgoY2csIHRoaXMucHJvcHMud2lkdGgpO1xyXG4gICAgICAgICAgICAgICAgeSA9IFphaHlvLnJ1VG9sdVkoY2osIHRoaXMucHJvcHMuaGVpZ2h0KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLnRleHRSZXN1bHRbaV0uc2l6ZV9qID09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBzaXplX3ggPSB0aGlzLnByb3BzLnRleHQuc2l6ZV9qO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBzaXplX3ggPSB0aGlzLnByb3BzLnRleHRSZXN1bHRbaV0uc2l6ZV9qO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMudGV4dFJlc3VsdFtpXS5zaXplX2cgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNpemVfeSA9IHRoaXMucHJvcHMudGV4dC5zaXplX2c7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHNpemVfeSA9IHRoaXMucHJvcHMudGV4dFJlc3VsdFtpXS5zaXplX2c7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgeCA9IGNqO1xyXG4gICAgICAgICAgICAgICAgeSA9IGNnO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBhcnkucHVzaChcclxuICAgICAgICAgICAgICAgIDx0ZXh0XHJcbiAgICAgICAgICAgICAgICAgICAgeD17eCAtIChzaXplX3ggLyAyKX1cclxuICAgICAgICAgICAgICAgICAgICB5PXt5ICsgKHNpemVfeSAvIDIpIC0gKHNpemVfeSAqIDEyLjUgLyAxMDAuMCl9XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6IHNpemVfeCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiAnbm9uZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw6ICdibGFjaycsXHJcbiAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy50ZXh0UmVzdWx0W2ldLm1vaml9XHJcbiAgICAgICAgICAgICAgICA8L3RleHQ+XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gYXJ5O1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGdcclxuICAgICAgICAgICAgICAgIGlkPXt0aGlzLnByb3BzLmlkfVxyXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtPXtgdHJhbnNsYXRlKCR7dGhpcy5wcm9wcy54fSwke3RoaXMucHJvcHMueX0pYH1cclxuICAgICAgICAgICAgICAgIHdpZHRoPXt0aGlzLnByb3BzLndpZHRofVxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0PXt0aGlzLnByb3BzLmhlaWdodH1cclxuICAgICAgICAgICAgICAgIHN0eWxlPXtzdHlsZXMuY29udGFpbmVyfVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICB7Lyog44OG44Kt44K544OI44Oc44OD44Kv44K544Gu6IOM5pmvICovfVxyXG4gICAgICAgICAgICAgICAge3RoaXMuYm94KCl9XHJcblxyXG4gICAgICAgICAgICAgICAgey8qIDx0ZXh0IHg9XCIwXCIgeT1cIjIwXCIgZmlsbD1cIiMwMDBcIj7jgYI8L3RleHQ+ICovfVxyXG5cclxuICAgICAgICAgICAgICAgIHsvKiDjg4bjgq3jgrnjg4jjgrDjg6rjg4Pjg4kgKi99XHJcbiAgICAgICAgICAgICAgICB7dGhpcy50ZXh0Z3JpZCgpfVxyXG5cclxuICAgICAgICAgICAgICAgIHsvKiDjg4bjgq3jgrnjg4ggKi99XHJcbiAgICAgICAgICAgICAgICB7dGhpcy50ZXh0KCl9XHJcbiAgICAgICAgICAgIDwvZz5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcclxuXHJcbmltcG9ydCBUZXh0Qm94IGZyb20gJy4vVGV4dEJveC5qcyc7XHJcblxyXG5cclxuLy8gbWFwU3RhdGVUb1Byb3BzXHJcbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZSwgcHJvcHMpID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgLi4uc3RhdGUsXHJcbiAgICB9O1xyXG59XHJcblxyXG4vLyBtYXBEaXNwYXRjaFRvUHJvcHNcclxuY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0gKGRpc3BhdGNoLCBwcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBkaXNwYXRjaCxcclxuICAgIH07XHJcbn1cclxuXHJcbi8vIG1lcmdlUHJvcHMgXHJcbmNvbnN0IG1lcmdlUHJvcHMgPSAoc3RhdGUsIGRpc3BhdGNoLCBwcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAvLyB4eHg6IHl5eSxcclxuICAgICAgICAvLyBvblh4eHg6ICh4eHgpID0+IHtcclxuICAgICAgICAvLyAgICAgLi4uLi5cclxuICAgICAgICAvLyAgICAgZGlzcGF0Y2guZGlzcGF0Y2goU1VfWHh4eHh4X1h4eHh4X1h4eHgoKSk7XHJcbiAgICAgICAgLy8gfSxcclxuICAgICAgICAuLi5wcm9wcyxcclxuICAgIH07XHJcbn1cclxuXHJcbi8vIGNvbm5lY3RcclxuY29uc3QgVGV4dEJveE1hcCA9IGNvbm5lY3QoXHJcbiAgICBtYXBTdGF0ZVRvUHJvcHMsXHJcbiAgICBtYXBEaXNwYXRjaFRvUHJvcHMsXHJcbiAgICBtZXJnZVByb3BzXHJcbikoVGV4dEJveCk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBUZXh0Qm94TWFwO1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5cclxuaW1wb3J0IFRleHRCb3hNYXAgZnJvbSAnLi9UZXh0Qm94TWFwLmpzJztcclxuXHJcbmltcG9ydCB7IERlZmluZSB9IGZyb20gJy4uL2RlZmluZS5qcyc7XHJcbmltcG9ydCB7IFphaHlvIH0gZnJvbSAnLi4vbGlicy96YWh5by5qcyc7XHJcblxyXG5jb25zdCBzdHlsZXMgPSB7XHJcblxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQm94cyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGcgaWQ9e3RoaXMucHJvcHMuaWR9PlxyXG4gICAgICAgICAgICAgICAge3RoaXMucHJvcHMuYm94cy5tYXAoKGJveCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHogPSBaYWh5by5ydVRvbHVSZWN0VG9BcmVhKGJveC54MSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3gueTEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm94LngyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJveC55MixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWZpbmUuc3ZnaW1hZ2VzaXplLndpZHRoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlZmluZS5zdmdpbWFnZXNpemUuaGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGJveC50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAndGV4dCc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VGV4dEJveE1hcFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPXtib3guaWR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeD17ei54fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHk9e3oueX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aD17ei53fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodD17ei5ofVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwPXtib3guZ3JvdXB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm89e2JveC5ub31cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dD17Ym94LnRleHR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dGdyaWQ9e2JveC50ZXh0Z3JpZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0UmVzdWx0PXtib3gudGV4dFJlc3VsdH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2ltYWdlJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pfVxyXG4gICAgICAgICAgICA8L2c+ICAgICAgICAgICAgXHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcclxuXHJcbmltcG9ydCBCb3hzIGZyb20gJy4vQm94cy5qcyc7XHJcblxyXG4vLyBtYXBTdGF0ZVRvUHJvcHNcclxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gKHN0YXRlLCBwcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAuLi5zdGF0ZSxcclxuICAgIH07XHJcbn1cclxuXHJcbi8vIG1hcERpc3BhdGNoVG9Qcm9wc1xyXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHMgPSAoZGlzcGF0Y2gsIHByb3BzKSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGRpc3BhdGNoLFxyXG4gICAgfTtcclxufVxyXG5cclxuLy8gbWVyZ2VQcm9wcyBcclxuY29uc3QgbWVyZ2VQcm9wcyA9IChzdGF0ZSwgZGlzcGF0Y2gsIHByb3BzKSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIC8vIHh4eDogeXl5LFxyXG4gICAgICAgIC8vIG9uWHh4eDogKHh4eCkgPT4ge1xyXG4gICAgICAgIC8vICAgICAuLi4uLlxyXG4gICAgICAgIC8vICAgICBkaXNwYXRjaC5kaXNwYXRjaChTVV9YeHh4eHhfWHh4eHhfWHh4eCgpKTtcclxuICAgICAgICAvLyB9LFxyXG4gICAgICAgIC4uLnByb3BzLFxyXG4gICAgICAgIGJveHM6IHN0YXRlLmJveHMsXHJcbiAgICB9O1xyXG59XHJcblxyXG4vLyBjb25uZWN0XHJcbmNvbnN0IEJveHNNYXAgPSBjb25uZWN0KFxyXG4gICAgbWFwU3RhdGVUb1Byb3BzLFxyXG4gICAgbWFwRGlzcGF0Y2hUb1Byb3BzLFxyXG4gICAgbWVyZ2VQcm9wc1xyXG4pKEJveHMpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgQm94c01hcDtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuXHJcbmltcG9ydCB7IFphaHlvIH0gZnJvbSAnLi4vbGlicy96YWh5by5qcyc7XHJcbmltcG9ydCB7IERlZmluZSB9IGZyb20gJy4uL2RlZmluZS5qcyc7XHJcblxyXG5jb25zdCBzdHlsZXMgPSB7XHJcblxyXG59O1xyXG5cclxuY29uc3QgY29sXzEgPSAnI2Y5ZjlmOSc7XHJcbmNvbnN0IGNvbF8yID0gJyNlZmVmZjknO1xyXG5jb25zdCBjb2xfMyA9ICcjZjllZmVmJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdyaWQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG5cclxuICAgIHlva29rZWkoKSB7XHJcbiAgICAgICAgbGV0IGh0bWwgPSBbXTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgeSA9IDA7IHkgPD0gdGhpcy5wcm9wcy5oZWlnaHQ7IHkgKz0gRGVmaW5lLmdyaWQuaGVpZ2h0KSB7XHJcbiAgICAgICAgICAgIGxldCBsdyA9IDEgKiAxMDAgLyB0aGlzLnByb3BzLnNjYWxlO1xyXG4gICAgICAgICAgICBsZXQgY29sID0gY29sXzE7XHJcbiAgICAgICAgICAgIGlmICh5ICUgKERlZmluZS5ncmlkLmhlaWdodCAqIDUpID09IDApIHtcclxuICAgICAgICAgICAgICAgIGx3ID0gMiAqIDEwMCAvIHRoaXMucHJvcHMuc2NhbGU7XHJcbiAgICAgICAgICAgICAgICBjb2wgPSBjb2xfMjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoeSAlIChEZWZpbmUuZ3JpZC5oZWlnaHQgKiAxMCkgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgbHcgPSAzICogMTAwLyB0aGlzLnByb3BzLnNjYWxlO1xyXG4gICAgICAgICAgICAgICAgY29sID0gY29sXzM7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGh0bWwucHVzaChcclxuICAgICAgICAgICAgICAgIDxsaW5lXHJcbiAgICAgICAgICAgICAgICAgICAgeDE9ezB9XHJcbiAgICAgICAgICAgICAgICAgICAgeTE9e1phaHlvLmx1VG9ydVkoeSwgdGhpcy5wcm9wcy5oZWlnaHQpfVxyXG4gICAgICAgICAgICAgICAgICAgIHgyPXt0aGlzLnByb3BzLndpZHRofVxyXG4gICAgICAgICAgICAgICAgICAgIHkyPXtaYWh5by5sdVRvcnVZKHksIHRoaXMucHJvcHMuaGVpZ2h0KX1cclxuICAgICAgICAgICAgICAgICAgICBzdHJva2VXaWR0aD17bHd9XHJcbiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlPXtjb2x9XHJcbiAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGh0bWw7XHJcbiAgICB9XHJcblxyXG4gICAgdGF0ZWtlaSgpIHtcclxuICAgICAgICBsZXQgaHRtbCA9IFtdO1xyXG5cclxuICAgICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IHRoaXMucHJvcHMud2lkdGg7IHggKz0gRGVmaW5lLmdyaWQud2lkdGgpIHtcclxuICAgICAgICAgICAgbGV0IGx3ID0gMSAqIDEwMCAvIHRoaXMucHJvcHMuc2NhbGU7XHJcbiAgICAgICAgICAgIGxldCBjb2wgPSBjb2xfMTtcclxuICAgICAgICAgICAgaWYgKHggJSAoRGVmaW5lLmdyaWQud2lkdGggKiA1KSA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBsdyA9IDIgKiAxMDAgLyB0aGlzLnByb3BzLnNjYWxlO1xyXG4gICAgICAgICAgICAgICAgY29sID0gY29sXzI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHggJSAoRGVmaW5lLmdyaWQud2lkdGggKiAxMCkgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgbHcgPSAzICogMTAwIC8gdGhpcy5wcm9wcy5zY2FsZTtcclxuICAgICAgICAgICAgICAgIGNvbCA9IGNvbF8zO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBodG1sLnB1c2goXHJcbiAgICAgICAgICAgICAgICA8bGluZVxyXG4gICAgICAgICAgICAgICAgICAgIHgxPXtaYWh5by5sdVRvcnVYKHgsIHRoaXMucHJvcHMud2lkdGgpfVxyXG4gICAgICAgICAgICAgICAgICAgIHkxPXswfVxyXG4gICAgICAgICAgICAgICAgICAgIHgyPXtaYWh5by5sdVRvcnVYKHgsIHRoaXMucHJvcHMud2lkdGgpfVxyXG4gICAgICAgICAgICAgICAgICAgIHkyPXt0aGlzLnByb3BzLmhlaWdodH1cclxuICAgICAgICAgICAgICAgICAgICBzdHJva2VXaWR0aD17bHd9XHJcbiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlPXtjb2x9XHJcbiAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGh0bWw7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxnPlxyXG4gICAgICAgICAgICAgICAgICAge3RoaXMueW9rb2tlaSgpfVxyXG4gICAgICAgICAgICAgICAgICAge3RoaXMudGF0ZWtlaSgpfVxyXG4gICAgICAgICAgICA8L2c+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcblxyXG5pbXBvcnQgR3JpZCBmcm9tICcuL0dyaWQuanMnO1xyXG5pbXBvcnQgQm94c01hcCBmcm9tICcuL0JveHNNYXAuanMnO1xyXG5pbXBvcnQgU2VsZWN0Qm94c01hcCBmcm9tICcuL1NlbGVjdEJveHNNYXAuanMnO1xyXG5cclxuY29uc3Qgc3R5bGVzID0ge1xyXG4gICAgY29udGFpbmVyOiB7XHJcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnI2ZmZicsXHJcbiAgICB9LFxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3ZnSW1hZ2UgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxzdmdcclxuICAgICAgICAgICAgICAgIHdpZHRoPXt0aGlzLnByb3BzLndpZHRoICogdGhpcy5wcm9wcy5zY2FsZSAvIDEwMH1cclxuICAgICAgICAgICAgICAgIGhlaWdodD17dGhpcy5wcm9wcy5oZWlnaHQgKiB0aGlzLnByb3BzLnNjYWxlIC8gMTAwfVxyXG4gICAgICAgICAgICAgICAgdmlld0JveD17YDAgMCAke3RoaXMucHJvcHMud2lkdGh9ICR7dGhpcy5wcm9wcy5oZWlnaHR9YH1cclxuICAgICAgICAgICAgICAgIHN0eWxlPXtzdHlsZXMuY29udGFpbmVyfVxyXG4gICAgICAgICAgICA+XHJcblxyXG4gICAgICAgICAgICAgICAgey8qIOOCsOODquODg+ODieOBruaPj+eUuyAqL31cclxuICAgICAgICAgICAgICAgIDxHcmlkXHJcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg9e3RoaXMucHJvcHMud2lkdGh9XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PXt0aGlzLnByb3BzLmhlaWdodH1cclxuICAgICAgICAgICAgICAgICAgICBzY2FsZT17dGhpcy5wcm9wcy5zY2FsZX1cclxuICAgICAgICAgICAgICAgIC8+XHJcblxyXG4gICAgICAgICAgICAgICAgey8qIOODnOODg+OCr+OCueOBruaPj+eUuyAqL31cclxuICAgICAgICAgICAgICAgIDxCb3hzTWFwIC8+XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHsvKiDpgbjmip7jg5zjg4Pjgq/jgrnjga7mj4/nlLsgKi99XHJcbiAgICAgICAgICAgICAgICA8U2VsZWN0Qm94c01hcCAvPlxyXG4gICAgICAgICAgICA8L3N2Zz5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcclxuXHJcbmltcG9ydCBTdmdJbWFnZSBmcm9tICcuL1N2Z0ltYWdlLmpzJztcclxuXHJcblxyXG4vLyBtYXBTdGF0ZVRvUHJvcHNcclxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gKHN0YXRlLCBwcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAuLi5zdGF0ZSxcclxuICAgIH07XHJcbn1cclxuXHJcbi8vIG1hcERpc3BhdGNoVG9Qcm9wc1xyXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHMgPSAoZGlzcGF0Y2gsIHByb3BzKSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGRpc3BhdGNoLFxyXG4gICAgfTtcclxufVxyXG5cclxuLy8gbWVyZ2VQcm9wcyBcclxuY29uc3QgbWVyZ2VQcm9wcyA9IChzdGF0ZSwgZGlzcGF0Y2gsIHByb3BzKSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIC8vIHh4eDogeXl5LFxyXG4gICAgICAgIC8vIG9uWHh4eDogKHh4eCkgPT4ge1xyXG4gICAgICAgIC8vICAgICAuLi4uLlxyXG4gICAgICAgIC8vICAgICBkaXNwYXRjaC5kaXNwYXRjaChTVV9YeHh4eHhfWHh4eHhfWHh4eCgpKTtcclxuICAgICAgICAvLyB9LFxyXG4gICAgICAgIHdpZHRoOiBwcm9wcy53aWR0aCxcclxuICAgICAgICBoZWlnaHQ6IHByb3BzLmhlaWdodCxcclxuICAgICAgICBzY2FsZTogc3RhdGUuc2NhbGUsXHJcbiAgICB9O1xyXG59XHJcblxyXG4vLyBjb25uZWN0XHJcbmNvbnN0IFN2Z0ltYWdlTWFwID0gY29ubmVjdChcclxuICAgIG1hcFN0YXRlVG9Qcm9wcyxcclxuICAgIG1hcERpc3BhdGNoVG9Qcm9wcyxcclxuICAgIG1lcmdlUHJvcHNcclxuKShTdmdJbWFnZSk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBTdmdJbWFnZU1hcDtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuXHJcbmltcG9ydCBTdmdJbWFnZU1hcCBmcm9tICcuL1N2Z0ltYWdlTWFwLmpzJztcclxuXHJcbmltcG9ydCB7IERlZmluZSB9IGZyb20gJy4uL2RlZmluZS5qcyc7XHJcblxyXG5jb25zdCBzdHlsZXMgPSB7XHJcbiAgICBjb250YWluZXI6IHtcclxuICAgICAgICBvdmVyZmxvdzogJ3Njcm9sbCcsXHJcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnI2RkZCcsXHJcbiAgICAgICAgLy8gYm9yZGVyOiAnMnB4IHNvbGlkIHJlZCcsXHJcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcclxuICAgICAgICBoZWlnaHQ6ICcxMDB2aCcsXHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFZpZXdCb3ggZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcbiAgICB9XHJcblxyXG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7XHJcblx0XHQvLyAvLyDlvZPjgrPjg7Pjg53jg7zjg43jg7Pjg4jjga7luYXjgajpq5jjgZXjgpLjgrvjg4Pjg4jjgZnjgotcclxuXHRcdC8vIGNvbnN0IHZpZXdib3ggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndmlld2JveCcpO1xyXG5cdFx0Ly8gdmlld2JveC5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCAoZSkgPT4ge1xyXG5cdFx0Ly8gXHR0aGlzLnZpZXdib3gudyA9IGUuc3JjRWxlbWVudC5jbGllbnRXaWR0aDtcclxuXHRcdC8vIFx0dGhpcy52aWV3Ym94LmggPSBlLnNyY0VsZW1lbnQuY2xpZW50SGVpZ2h0O1xyXG5cdFx0Ly8gfSk7XHJcblxyXG5cdFx0Ly8gLy8g44Km44Kj44Oz44OJ44Km44GM44Oq44K144Kk44K644GX44Gf5aC05ZCI44Gu44Kk44OZ44Oz44OI5Yem55CGXHJcblx0XHQvLyB3aW5kb3cub25yZXNpemUgPSAoKSA9PiB7XHJcblx0XHQvLyBcdC8vIHZpZXdib3jjgatyZXNpemXjgqTjg5njg7Pjg4jjgpLnmbrooYzjgZnjgotcclxuXHRcdC8vIFx0bGV0IGV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KFwicmVzaXplXCIpO1xyXG5cdFx0Ly8gXHR2aWV3Ym94LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1x0Ly8g44Kk44OZ44Oz44OI44OI44Oq44Ks44O8XHJcblx0XHQvLyB9XHJcblxyXG5cdFx0Ly8gLy8g5Yid5Zue44Gr77yR5bqm44Gg44GR44CBdmlld2JveOOBq3Jlc2l6ZeOCpOODmeODs+ODiOOCkueZuuihjOOBmeOCi1xyXG5cdFx0Ly8gbGV0IGV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KFwicmVzaXplXCIpO1xyXG5cdFx0Ly8gdmlld2JveC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcdC8vIOOCpOODmeODs+ODiOODiOODquOCrOODvFxyXG4gICAgfVxyXG4gICAgXHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgIGlkPVwidmlld2JveFwiXHJcbiAgICAgICAgICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgICAgICAgICAgIC4uLnN0eWxlcy5jb250YWluZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgLi4udGhpcy5wcm9wcy5zdHlsZSxcclxuICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIDxTdmdJbWFnZU1hcFxyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoPXtEZWZpbmUuc3ZnaW1hZ2VzaXplLndpZHRofVxyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodD17RGVmaW5lLnN2Z2ltYWdlc2l6ZS5oZWlnaHR9XHJcbiAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcblxyXG5pbXBvcnQgVmlld0JveCBmcm9tICcuLi9jb21wb25lbnRzL1ZpZXdCb3guanMnO1xyXG4vLyBpbXBvcnQgeyBEaWFsb2cgfSBmcm9tICdtYXRlcmlhbC11aSc7XHJcbmltcG9ydCBUb29sQm94TWFwIGZyb20gJy4uL2NvbXBvbmVudHMvVG9vbEJveE1hcC5qcyc7XHJcbmltcG9ydCBUb29sQm94U2NhbGVNYXAgZnJvbSAnLi4vY29tcG9uZW50cy9Ub29sQm94U2NhbGVNYXAuanMnO1xyXG5pbXBvcnQgVG9vbEJveEJveERhdGFNYXAgZnJvbSAnLi4vY29tcG9uZW50cy9Ub29sQm94Qm94RGF0YU1hcC5qcyc7XHJcbmltcG9ydCBUb29sQm94VGV4dERhdGFNYXAgZnJvbSAnLi4vY29tcG9uZW50cy9Ub29sQm94VGV4dERhdGFNYXAuanMnO1xyXG5pbXBvcnQgVG9vbEJveFNvemFpTWFwIGZyb20gJy4uL2NvbXBvbmVudHMvVG9vbEJveFNvemFpTWFwLmpzJztcclxuaW1wb3J0IFRvb2xCb3hMaW5rTWFwIGZyb20gJy4uL2NvbXBvbmVudHMvVG9vbEJveExpbmtNYXAuanMnO1xyXG5cclxuY29uc3Qgc3R5bGVzID0ge1xyXG4gICAgY29udGFpbmVyOiB7XHJcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXHJcbiAgICAgICAgZm9udFNpemU6ICcyMHB4JyxcclxuICAgICAgICBmb250V2VpZ2h0OiAnYm9sZCcsXHJcbiAgICAgICAgY29sb3I6ICdibGFjaycsXHJcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcclxuICAgICAgICBoZWlnaHQ6ICcxMDB2aCcsXHJcbiAgICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxyXG4gICAgfSxcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRvcFNjcmVlbiBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgICB0b29sQm94cygpIHtcclxuICAgICAgICBsZXQgdG9vbGJveHMgPSBbXTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnByb3BzLnRvb2xib3hzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5wcm9wcy50b29sYm94c1tpXS50eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ3NjYWxlJzogICAvLyDmi6HlpKfnuK7lsI/jg4Tjg7zjg6vjg5zjg4Pjgq/jgrlcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLnRvb2xib3hzW2ldLnZpZXcgPT0gJ2ZhbHNlJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdG9vbGJveHMucHVzaChcclxuICAgICAgICAgICAgICAgICAgICA8VG9vbEJveE1hcFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZD17dGhpcy5wcm9wcy50b29sYm94c1tpXS5pZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgeD17dGhpcy5wcm9wcy50b29sYm94c1tpXS54fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB5PXt0aGlzLnByb3BzLnRvb2xib3hzW2ldLnl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHc9e3RoaXMucHJvcHMudG9vbGJveHNbaV0ud31cclxuICAgICAgICAgICAgICAgICAgICAgICAgaD17dGhpcy5wcm9wcy50b29sYm94c1tpXS5ofVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT1cIuaLoeWkp+e4ruWwj1wiXHJcbiAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8VG9vbEJveFNjYWxlTWFwIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9Ub29sQm94TWFwPlxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgY2FzZSAnYm94ZGF0YSc6ICAgLy8g44Oc44OD44Kv44K55oOF5aCx44OE44O844Or44Oc44OD44Kv44K5XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wcm9wcy50b29sYm94c1tpXS52aWV3ID09ICdmYWxzZScpIHtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRvb2xib3hzLnB1c2goXHJcbiAgICAgICAgICAgICAgICAgICAgPFRvb2xCb3hNYXBcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ9e3RoaXMucHJvcHMudG9vbGJveHNbaV0uaWR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHg9e3RoaXMucHJvcHMudG9vbGJveHNbaV0ueH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgeT17dGhpcy5wcm9wcy50b29sYm94c1tpXS55fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3PXt0aGlzLnByb3BzLnRvb2xib3hzW2ldLnd9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGg9e3RoaXMucHJvcHMudG9vbGJveHNbaV0uaH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9XCLjg5zjg4Pjgq/jgrnmg4XloLFcIlxyXG4gICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPFRvb2xCb3hCb3hEYXRhTWFwIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9Ub29sQm94TWFwPlxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgY2FzZSAndGV4dGRhdGEnOiAgIC8vIOODhuOCreOCueODiOaDheWgseODhOODvOODq+ODnOODg+OCr+OCuVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMudG9vbGJveHNbaV0udmlldyA9PSAnZmFsc2UnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0b29sYm94cy5wdXNoKFxyXG4gICAgICAgICAgICAgICAgICAgIDxUb29sQm94TWFwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkPXt0aGlzLnByb3BzLnRvb2xib3hzW2ldLmlkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB4PXt0aGlzLnByb3BzLnRvb2xib3hzW2ldLnh9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHk9e3RoaXMucHJvcHMudG9vbGJveHNbaV0ueX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdz17dGhpcy5wcm9wcy50b29sYm94c1tpXS53fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBoPXt0aGlzLnByb3BzLnRvb2xib3hzW2ldLmh9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPVwi776O776e772v77247729776D77237729776E5oOF5aCxXCJcclxuICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxUb29sQm94VGV4dERhdGFNYXAgLz5cclxuICAgICAgICAgICAgICAgICAgICA8L1Rvb2xCb3hNYXA+XHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICBjYXNlICdzb3phaSc6ICAgIC8vIOe0oOadkOODquOCueODiOODhOODvOODq+ODnOODg+OCr+OCuVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMudG9vbGJveHNbaV0udmlldyA9PSAnZmFsc2UnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0b29sYm94cy5wdXNoKFxyXG4gICAgICAgICAgICAgICAgICAgIDxUb29sQm94TWFwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkPXt0aGlzLnByb3BzLnRvb2xib3hzW2ldLmlkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB4PXt0aGlzLnByb3BzLnRvb2xib3hzW2ldLnh9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHk9e3RoaXMucHJvcHMudG9vbGJveHNbaV0ueX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdz17dGhpcy5wcm9wcy50b29sYm94c1tpXS53fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBoPXt0aGlzLnByb3BzLnRvb2xib3hzW2ldLmh9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPVwi57Sg5p2Q44Oq44K544OIXCJcclxuICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxUb29sQm94U296YWlNYXAgLz5cclxuICAgICAgICAgICAgICAgICAgICA8L1Rvb2xCb3hNYXA+XHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICBjYXNlICdsaW5rJzogICAgLy8g44Oq44Oz44Kv44Oq44K544OI44OE44O844Or44Oc44OD44Kv44K5XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wcm9wcy50b29sYm94c1tpXS52aWV3ID09ICdmYWxzZScpIHtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRvb2xib3hzLnB1c2goXHJcbiAgICAgICAgICAgICAgICAgICAgPFRvb2xCb3hNYXBcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ9e3RoaXMucHJvcHMudG9vbGJveHNbaV0uaWR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHg9e3RoaXMucHJvcHMudG9vbGJveHNbaV0ueH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgeT17dGhpcy5wcm9wcy50b29sYm94c1tpXS55fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3PXt0aGlzLnByb3BzLnRvb2xib3hzW2ldLnd9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGg9e3RoaXMucHJvcHMudG9vbGJveHNbaV0uaH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9XCLjg6rjg7Pjgq/jg6rjgrnjg4hcIlxyXG4gICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPFRvb2xCb3hMaW5rTWFwIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9Ub29sQm94TWFwPlxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdG9vbGJveHM7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgIHN0eWxlPXtzdHlsZXMuY29udGFpbmVyfVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICB7LyogU1ZH44Kk44Oh44O844K444Oc44OD44Kv44K5ICovfVxyXG4gICAgICAgICAgICAgICAgPFZpZXdCb3ggLz5cclxuXHJcbiAgICAgICAgICAgICAgICB7Lyog44OE44O844Or44Oc44OD44Kv44K5ICovfVxyXG4gICAgICAgICAgICAgICAgeyB0aGlzLnRvb2xCb3hzKCkgfVxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XHJcblxyXG5pbXBvcnQgVG9wU2NyZWVuIGZyb20gJy4vVG9wU2NyZWVuLmpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBTVV9TZWxlY3RCb3hfQm94X05vblNlbGVjdCxcclxufSBmcm9tICcuLi9hY3Rpb25zX3N1L3NlbGVjdGJveC5qcyc7XHJcblxyXG5cclxuLy8gbWFwU3RhdGVUb1Byb3BzXHJcbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZSwgcHJvcHMpID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgLi4uc3RhdGUsXHJcbiAgICB9O1xyXG59XHJcblxyXG4vLyBtYXBEaXNwYXRjaFRvUHJvcHNcclxuY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0gKGRpc3BhdGNoLCBwcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBkaXNwYXRjaCxcclxuICAgIH07XHJcbn1cclxuXHJcbi8vIG1lcmdlUHJvcHNcclxuY29uc3QgbWVyZ2VQcm9wcyA9IChzdGF0ZSwgZGlzcGF0Y2gsIHByb3BzKSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIC8vIHh4eDogeXl5LFxyXG4gICAgICAgIC8vIG9uWHh4eDogKHh4eCkgPT4ge1xyXG4gICAgICAgIC8vICAgICAuLi4uLlxyXG4gICAgICAgIC8vICAgICBkaXNwYXRjaC5kaXNwYXRjaChTVV9YeHh4eHhfWHh4eHhfWHh4eCgpKTtcclxuICAgICAgICAvLyB9LFxyXG4gICAgICAgIHRvb2xib3hzOiBzdGF0ZS50b29sYm94cyxcclxuICAgIH07XHJcbn1cclxuXHJcbi8vIGNvbm5lY3RcclxuY29uc3QgVG9wU2NyZWVuTWFwID0gY29ubmVjdChcclxuICAgIG1hcFN0YXRlVG9Qcm9wcyxcclxuICAgIG1hcERpc3BhdGNoVG9Qcm9wcyxcclxuICAgIG1lcmdlUHJvcHNcclxuKShUb3BTY3JlZW4pO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgVG9wU2NyZWVuTWFwO1xyXG4iLCIhZnVuY3Rpb24oZSx0KXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZT90KGV4cG9ydHMpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW1wiZXhwb3J0c1wiXSx0KTp0KGUucmVkdXhMb2dnZXI9ZS5yZWR1eExvZ2dlcnx8e30pfSh0aGlzLGZ1bmN0aW9uKGUpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHQoZSx0KXtlLnN1cGVyXz10LGUucHJvdG90eXBlPU9iamVjdC5jcmVhdGUodC5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTplLGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pfWZ1bmN0aW9uIHIoZSx0KXtPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcImtpbmRcIix7dmFsdWU6ZSxlbnVtZXJhYmxlOiEwfSksdCYmdC5sZW5ndGgmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwicGF0aFwiLHt2YWx1ZTp0LGVudW1lcmFibGU6ITB9KX1mdW5jdGlvbiBuKGUsdCxyKXtuLnN1cGVyXy5jYWxsKHRoaXMsXCJFXCIsZSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJsaHNcIix7dmFsdWU6dCxlbnVtZXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJyaHNcIix7dmFsdWU6cixlbnVtZXJhYmxlOiEwfSl9ZnVuY3Rpb24gbyhlLHQpe28uc3VwZXJfLmNhbGwodGhpcyxcIk5cIixlKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcInJoc1wiLHt2YWx1ZTp0LGVudW1lcmFibGU6ITB9KX1mdW5jdGlvbiBpKGUsdCl7aS5zdXBlcl8uY2FsbCh0aGlzLFwiRFwiLGUpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwibGhzXCIse3ZhbHVlOnQsZW51bWVyYWJsZTohMH0pfWZ1bmN0aW9uIGEoZSx0LHIpe2Euc3VwZXJfLmNhbGwodGhpcyxcIkFcIixlKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcImluZGV4XCIse3ZhbHVlOnQsZW51bWVyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiaXRlbVwiLHt2YWx1ZTpyLGVudW1lcmFibGU6ITB9KX1mdW5jdGlvbiBmKGUsdCxyKXt2YXIgbj1lLnNsaWNlKChyfHx0KSsxfHxlLmxlbmd0aCk7cmV0dXJuIGUubGVuZ3RoPXQ8MD9lLmxlbmd0aCt0OnQsZS5wdXNoLmFwcGx5KGUsbiksZX1mdW5jdGlvbiB1KGUpe3ZhciB0PVwidW5kZWZpbmVkXCI9PXR5cGVvZiBlP1widW5kZWZpbmVkXCI6TihlKTtyZXR1cm5cIm9iamVjdFwiIT09dD90OmU9PT1NYXRoP1wibWF0aFwiOm51bGw9PT1lP1wibnVsbFwiOkFycmF5LmlzQXJyYXkoZSk/XCJhcnJheVwiOlwiW29iamVjdCBEYXRlXVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpP1wiZGF0ZVwiOlwiZnVuY3Rpb25cIj09dHlwZW9mIGUudG9TdHJpbmcmJi9eXFwvLipcXC8vLnRlc3QoZS50b1N0cmluZygpKT9cInJlZ2V4cFwiOlwib2JqZWN0XCJ9ZnVuY3Rpb24gbChlLHQscixjLHMsZCxwKXtzPXN8fFtdLHA9cHx8W107dmFyIGc9cy5zbGljZSgwKTtpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgZCl7aWYoYyl7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgYyYmYyhnLGQpKXJldHVybjtpZihcIm9iamVjdFwiPT09KFwidW5kZWZpbmVkXCI9PXR5cGVvZiBjP1widW5kZWZpbmVkXCI6TihjKSkpe2lmKGMucHJlZmlsdGVyJiZjLnByZWZpbHRlcihnLGQpKXJldHVybjtpZihjLm5vcm1hbGl6ZSl7dmFyIGg9Yy5ub3JtYWxpemUoZyxkLGUsdCk7aCYmKGU9aFswXSx0PWhbMV0pfX19Zy5wdXNoKGQpfVwicmVnZXhwXCI9PT11KGUpJiZcInJlZ2V4cFwiPT09dSh0KSYmKGU9ZS50b1N0cmluZygpLHQ9dC50b1N0cmluZygpKTt2YXIgeT1cInVuZGVmaW5lZFwiPT10eXBlb2YgZT9cInVuZGVmaW5lZFwiOk4oZSksdj1cInVuZGVmaW5lZFwiPT10eXBlb2YgdD9cInVuZGVmaW5lZFwiOk4odCksYj1cInVuZGVmaW5lZFwiIT09eXx8cCYmcFtwLmxlbmd0aC0xXS5saHMmJnBbcC5sZW5ndGgtMV0ubGhzLmhhc093blByb3BlcnR5KGQpLG09XCJ1bmRlZmluZWRcIiE9PXZ8fHAmJnBbcC5sZW5ndGgtMV0ucmhzJiZwW3AubGVuZ3RoLTFdLnJocy5oYXNPd25Qcm9wZXJ0eShkKTtpZighYiYmbSlyKG5ldyBvKGcsdCkpO2Vsc2UgaWYoIW0mJmIpcihuZXcgaShnLGUpKTtlbHNlIGlmKHUoZSkhPT11KHQpKXIobmV3IG4oZyxlLHQpKTtlbHNlIGlmKFwiZGF0ZVwiPT09dShlKSYmZS10IT09MClyKG5ldyBuKGcsZSx0KSk7ZWxzZSBpZihcIm9iamVjdFwiPT09eSYmbnVsbCE9PWUmJm51bGwhPT10KWlmKHAuZmlsdGVyKGZ1bmN0aW9uKHQpe3JldHVybiB0Lmxocz09PWV9KS5sZW5ndGgpZSE9PXQmJnIobmV3IG4oZyxlLHQpKTtlbHNle2lmKHAucHVzaCh7bGhzOmUscmhzOnR9KSxBcnJheS5pc0FycmF5KGUpKXt2YXIgdztlLmxlbmd0aDtmb3Iodz0wO3c8ZS5sZW5ndGg7dysrKXc+PXQubGVuZ3RoP3IobmV3IGEoZyx3LG5ldyBpKHZvaWQgMCxlW3ddKSkpOmwoZVt3XSx0W3ddLHIsYyxnLHcscCk7Zm9yKDt3PHQubGVuZ3RoOylyKG5ldyBhKGcsdyxuZXcgbyh2b2lkIDAsdFt3KytdKSkpfWVsc2V7dmFyIHg9T2JqZWN0LmtleXMoZSksUz1PYmplY3Qua2V5cyh0KTt4LmZvckVhY2goZnVuY3Rpb24obixvKXt2YXIgaT1TLmluZGV4T2Yobik7aT49MD8obChlW25dLHRbbl0scixjLGcsbixwKSxTPWYoUyxpKSk6bChlW25dLHZvaWQgMCxyLGMsZyxuLHApfSksUy5mb3JFYWNoKGZ1bmN0aW9uKGUpe2wodm9pZCAwLHRbZV0scixjLGcsZSxwKX0pfXAubGVuZ3RoPXAubGVuZ3RoLTF9ZWxzZSBlIT09dCYmKFwibnVtYmVyXCI9PT15JiZpc05hTihlKSYmaXNOYU4odCl8fHIobmV3IG4oZyxlLHQpKSl9ZnVuY3Rpb24gYyhlLHQscixuKXtyZXR1cm4gbj1ufHxbXSxsKGUsdCxmdW5jdGlvbihlKXtlJiZuLnB1c2goZSl9LHIpLG4ubGVuZ3RoP246dm9pZCAwfWZ1bmN0aW9uIHMoZSx0LHIpe2lmKHIucGF0aCYmci5wYXRoLmxlbmd0aCl7dmFyIG4sbz1lW3RdLGk9ci5wYXRoLmxlbmd0aC0xO2ZvcihuPTA7bjxpO24rKylvPW9bci5wYXRoW25dXTtzd2l0Y2goci5raW5kKXtjYXNlXCJBXCI6cyhvW3IucGF0aFtuXV0sci5pbmRleCxyLml0ZW0pO2JyZWFrO2Nhc2VcIkRcIjpkZWxldGUgb1tyLnBhdGhbbl1dO2JyZWFrO2Nhc2VcIkVcIjpjYXNlXCJOXCI6b1tyLnBhdGhbbl1dPXIucmhzfX1lbHNlIHN3aXRjaChyLmtpbmQpe2Nhc2VcIkFcIjpzKGVbdF0sci5pbmRleCxyLml0ZW0pO2JyZWFrO2Nhc2VcIkRcIjplPWYoZSx0KTticmVhaztjYXNlXCJFXCI6Y2FzZVwiTlwiOmVbdF09ci5yaHN9cmV0dXJuIGV9ZnVuY3Rpb24gZChlLHQscil7aWYoZSYmdCYmciYmci5raW5kKXtmb3IodmFyIG49ZSxvPS0xLGk9ci5wYXRoP3IucGF0aC5sZW5ndGgtMTowOysrbzxpOylcInVuZGVmaW5lZFwiPT10eXBlb2YgbltyLnBhdGhbb11dJiYobltyLnBhdGhbb11dPVwibnVtYmVyXCI9PXR5cGVvZiByLnBhdGhbb10/W106e30pLG49bltyLnBhdGhbb11dO3N3aXRjaChyLmtpbmQpe2Nhc2VcIkFcIjpzKHIucGF0aD9uW3IucGF0aFtvXV06bixyLmluZGV4LHIuaXRlbSk7YnJlYWs7Y2FzZVwiRFwiOmRlbGV0ZSBuW3IucGF0aFtvXV07YnJlYWs7Y2FzZVwiRVwiOmNhc2VcIk5cIjpuW3IucGF0aFtvXV09ci5yaHN9fX1mdW5jdGlvbiBwKGUsdCxyKXtpZihyLnBhdGgmJnIucGF0aC5sZW5ndGgpe3ZhciBuLG89ZVt0XSxpPXIucGF0aC5sZW5ndGgtMTtmb3Iobj0wO248aTtuKyspbz1vW3IucGF0aFtuXV07c3dpdGNoKHIua2luZCl7Y2FzZVwiQVwiOnAob1tyLnBhdGhbbl1dLHIuaW5kZXgsci5pdGVtKTticmVhaztjYXNlXCJEXCI6b1tyLnBhdGhbbl1dPXIubGhzO2JyZWFrO2Nhc2VcIkVcIjpvW3IucGF0aFtuXV09ci5saHM7YnJlYWs7Y2FzZVwiTlwiOmRlbGV0ZSBvW3IucGF0aFtuXV19fWVsc2Ugc3dpdGNoKHIua2luZCl7Y2FzZVwiQVwiOnAoZVt0XSxyLmluZGV4LHIuaXRlbSk7YnJlYWs7Y2FzZVwiRFwiOmVbdF09ci5saHM7YnJlYWs7Y2FzZVwiRVwiOmVbdF09ci5saHM7YnJlYWs7Y2FzZVwiTlwiOmU9ZihlLHQpfXJldHVybiBlfWZ1bmN0aW9uIGcoZSx0LHIpe2lmKGUmJnQmJnImJnIua2luZCl7dmFyIG4sbyxpPWU7Zm9yKG89ci5wYXRoLmxlbmd0aC0xLG49MDtuPG87bisrKVwidW5kZWZpbmVkXCI9PXR5cGVvZiBpW3IucGF0aFtuXV0mJihpW3IucGF0aFtuXV09e30pLGk9aVtyLnBhdGhbbl1dO3N3aXRjaChyLmtpbmQpe2Nhc2VcIkFcIjpwKGlbci5wYXRoW25dXSxyLmluZGV4LHIuaXRlbSk7YnJlYWs7Y2FzZVwiRFwiOmlbci5wYXRoW25dXT1yLmxoczticmVhaztjYXNlXCJFXCI6aVtyLnBhdGhbbl1dPXIubGhzO2JyZWFrO2Nhc2VcIk5cIjpkZWxldGUgaVtyLnBhdGhbbl1dfX19ZnVuY3Rpb24gaChlLHQscil7aWYoZSYmdCl7dmFyIG49ZnVuY3Rpb24obil7ciYmIXIoZSx0LG4pfHxkKGUsdCxuKX07bChlLHQsbil9fWZ1bmN0aW9uIHkoZSl7cmV0dXJuXCJjb2xvcjogXCIrRltlXS5jb2xvcitcIjsgZm9udC13ZWlnaHQ6IGJvbGRcIn1mdW5jdGlvbiB2KGUpe3ZhciB0PWUua2luZCxyPWUucGF0aCxuPWUubGhzLG89ZS5yaHMsaT1lLmluZGV4LGE9ZS5pdGVtO3N3aXRjaCh0KXtjYXNlXCJFXCI6cmV0dXJuW3Iuam9pbihcIi5cIiksbixcIuKGklwiLG9dO2Nhc2VcIk5cIjpyZXR1cm5bci5qb2luKFwiLlwiKSxvXTtjYXNlXCJEXCI6cmV0dXJuW3Iuam9pbihcIi5cIildO2Nhc2VcIkFcIjpyZXR1cm5bci5qb2luKFwiLlwiKStcIltcIitpK1wiXVwiLGFdO2RlZmF1bHQ6cmV0dXJuW119fWZ1bmN0aW9uIGIoZSx0LHIsbil7dmFyIG89YyhlLHQpO3RyeXtuP3IuZ3JvdXBDb2xsYXBzZWQoXCJkaWZmXCIpOnIuZ3JvdXAoXCJkaWZmXCIpfWNhdGNoKGUpe3IubG9nKFwiZGlmZlwiKX1vP28uZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgdD1lLmtpbmQsbj12KGUpO3IubG9nLmFwcGx5KHIsW1wiJWMgXCIrRlt0XS50ZXh0LHkodCldLmNvbmNhdChQKG4pKSl9KTpyLmxvZyhcIuKAlOKAlCBubyBkaWZmIOKAlOKAlFwiKTt0cnl7ci5ncm91cEVuZCgpfWNhdGNoKGUpe3IubG9nKFwi4oCU4oCUIGRpZmYgZW5kIOKAlOKAlCBcIil9fWZ1bmN0aW9uIG0oZSx0LHIsbil7c3dpdGNoKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBlP1widW5kZWZpbmVkXCI6TihlKSl7Y2FzZVwib2JqZWN0XCI6cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgZVtuXT9lW25dLmFwcGx5KGUsUChyKSk6ZVtuXTtjYXNlXCJmdW5jdGlvblwiOnJldHVybiBlKHQpO2RlZmF1bHQ6cmV0dXJuIGV9fWZ1bmN0aW9uIHcoZSl7dmFyIHQ9ZS50aW1lc3RhbXAscj1lLmR1cmF0aW9uO3JldHVybiBmdW5jdGlvbihlLG4sbyl7dmFyIGk9W1wiYWN0aW9uXCJdO3JldHVybiBpLnB1c2goXCIlY1wiK1N0cmluZyhlLnR5cGUpKSx0JiZpLnB1c2goXCIlY0AgXCIrbiksciYmaS5wdXNoKFwiJWMoaW4gXCIrby50b0ZpeGVkKDIpK1wiIG1zKVwiKSxpLmpvaW4oXCIgXCIpfX1mdW5jdGlvbiB4KGUsdCl7dmFyIHI9dC5sb2dnZXIsbj10LmFjdGlvblRyYW5zZm9ybWVyLG89dC50aXRsZUZvcm1hdHRlcixpPXZvaWQgMD09PW8/dyh0KTpvLGE9dC5jb2xsYXBzZWQsZj10LmNvbG9ycyx1PXQubGV2ZWwsbD10LmRpZmYsYz1cInVuZGVmaW5lZFwiPT10eXBlb2YgdC50aXRsZUZvcm1hdHRlcjtlLmZvckVhY2goZnVuY3Rpb24obyxzKXt2YXIgZD1vLnN0YXJ0ZWQscD1vLnN0YXJ0ZWRUaW1lLGc9by5hY3Rpb24saD1vLnByZXZTdGF0ZSx5PW8uZXJyb3Isdj1vLnRvb2ssdz1vLm5leHRTdGF0ZSx4PWVbcysxXTt4JiYodz14LnByZXZTdGF0ZSx2PXguc3RhcnRlZC1kKTt2YXIgUz1uKGcpLGs9XCJmdW5jdGlvblwiPT10eXBlb2YgYT9hKGZ1bmN0aW9uKCl7cmV0dXJuIHd9LGcsbyk6YSxqPUQocCksRT1mLnRpdGxlP1wiY29sb3I6IFwiK2YudGl0bGUoUykrXCI7XCI6XCJcIixBPVtcImNvbG9yOiBncmF5OyBmb250LXdlaWdodDogbGlnaHRlcjtcIl07QS5wdXNoKEUpLHQudGltZXN0YW1wJiZBLnB1c2goXCJjb2xvcjogZ3JheTsgZm9udC13ZWlnaHQ6IGxpZ2h0ZXI7XCIpLHQuZHVyYXRpb24mJkEucHVzaChcImNvbG9yOiBncmF5OyBmb250LXdlaWdodDogbGlnaHRlcjtcIik7dmFyIE89aShTLGosdik7dHJ5e2s/Zi50aXRsZSYmYz9yLmdyb3VwQ29sbGFwc2VkLmFwcGx5KHIsW1wiJWMgXCIrT10uY29uY2F0KEEpKTpyLmdyb3VwQ29sbGFwc2VkKE8pOmYudGl0bGUmJmM/ci5ncm91cC5hcHBseShyLFtcIiVjIFwiK09dLmNvbmNhdChBKSk6ci5ncm91cChPKX1jYXRjaChlKXtyLmxvZyhPKX12YXIgTj1tKHUsUyxbaF0sXCJwcmV2U3RhdGVcIiksUD1tKHUsUyxbU10sXCJhY3Rpb25cIiksQz1tKHUsUyxbeSxoXSxcImVycm9yXCIpLEY9bSh1LFMsW3ddLFwibmV4dFN0YXRlXCIpO2lmKE4paWYoZi5wcmV2U3RhdGUpe3ZhciBMPVwiY29sb3I6IFwiK2YucHJldlN0YXRlKGgpK1wiOyBmb250LXdlaWdodDogYm9sZFwiO3JbTl0oXCIlYyBwcmV2IHN0YXRlXCIsTCxoKX1lbHNlIHJbTl0oXCJwcmV2IHN0YXRlXCIsaCk7aWYoUClpZihmLmFjdGlvbil7dmFyIFQ9XCJjb2xvcjogXCIrZi5hY3Rpb24oUykrXCI7IGZvbnQtd2VpZ2h0OiBib2xkXCI7cltQXShcIiVjIGFjdGlvbiAgICBcIixULFMpfWVsc2UgcltQXShcImFjdGlvbiAgICBcIixTKTtpZih5JiZDKWlmKGYuZXJyb3Ipe3ZhciBNPVwiY29sb3I6IFwiK2YuZXJyb3IoeSxoKStcIjsgZm9udC13ZWlnaHQ6IGJvbGQ7XCI7cltDXShcIiVjIGVycm9yICAgICBcIixNLHkpfWVsc2UgcltDXShcImVycm9yICAgICBcIix5KTtpZihGKWlmKGYubmV4dFN0YXRlKXt2YXIgXz1cImNvbG9yOiBcIitmLm5leHRTdGF0ZSh3KStcIjsgZm9udC13ZWlnaHQ6IGJvbGRcIjtyW0ZdKFwiJWMgbmV4dCBzdGF0ZVwiLF8sdyl9ZWxzZSByW0ZdKFwibmV4dCBzdGF0ZVwiLHcpO2wmJmIoaCx3LHIsayk7dHJ5e3IuZ3JvdXBFbmQoKX1jYXRjaChlKXtyLmxvZyhcIuKAlOKAlCBsb2cgZW5kIOKAlOKAlFwiKX19KX1mdW5jdGlvbiBTKCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnt9LHQ9T2JqZWN0LmFzc2lnbih7fSxMLGUpLHI9dC5sb2dnZXIsbj10LnN0YXRlVHJhbnNmb3JtZXIsbz10LmVycm9yVHJhbnNmb3JtZXIsaT10LnByZWRpY2F0ZSxhPXQubG9nRXJyb3JzLGY9dC5kaWZmUHJlZGljYXRlO2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiByKXJldHVybiBmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24odCl7cmV0dXJuIGUodCl9fX07aWYoZS5nZXRTdGF0ZSYmZS5kaXNwYXRjaClyZXR1cm4gY29uc29sZS5lcnJvcihcIltyZWR1eC1sb2dnZXJdIHJlZHV4LWxvZ2dlciBub3QgaW5zdGFsbGVkLiBNYWtlIHN1cmUgdG8gcGFzcyBsb2dnZXIgaW5zdGFuY2UgYXMgbWlkZGxld2FyZTpcXG4vLyBMb2dnZXIgd2l0aCBkZWZhdWx0IG9wdGlvbnNcXG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICdyZWR1eC1sb2dnZXInXFxuY29uc3Qgc3RvcmUgPSBjcmVhdGVTdG9yZShcXG4gIHJlZHVjZXIsXFxuICBhcHBseU1pZGRsZXdhcmUobG9nZ2VyKVxcbilcXG4vLyBPciB5b3UgY2FuIGNyZWF0ZSB5b3VyIG93biBsb2dnZXIgd2l0aCBjdXN0b20gb3B0aW9ucyBodHRwOi8vYml0Lmx5L3JlZHV4LWxvZ2dlci1vcHRpb25zXFxuaW1wb3J0IGNyZWF0ZUxvZ2dlciBmcm9tICdyZWR1eC1sb2dnZXInXFxuY29uc3QgbG9nZ2VyID0gY3JlYXRlTG9nZ2VyKHtcXG4gIC8vIC4uLm9wdGlvbnNcXG59KTtcXG5jb25zdCBzdG9yZSA9IGNyZWF0ZVN0b3JlKFxcbiAgcmVkdWNlcixcXG4gIGFwcGx5TWlkZGxld2FyZShsb2dnZXIpXFxuKVxcblwiKSxmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24odCl7cmV0dXJuIGUodCl9fX07dmFyIHU9W107cmV0dXJuIGZ1bmN0aW9uKGUpe3ZhciByPWUuZ2V0U3RhdGU7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbihsKXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBpJiYhaShyLGwpKXJldHVybiBlKGwpO3ZhciBjPXt9O3UucHVzaChjKSxjLnN0YXJ0ZWQ9Ty5ub3coKSxjLnN0YXJ0ZWRUaW1lPW5ldyBEYXRlLGMucHJldlN0YXRlPW4ocigpKSxjLmFjdGlvbj1sO3ZhciBzPXZvaWQgMDtpZihhKXRyeXtzPWUobCl9Y2F0Y2goZSl7Yy5lcnJvcj1vKGUpfWVsc2Ugcz1lKGwpO2MudG9vaz1PLm5vdygpLWMuc3RhcnRlZCxjLm5leHRTdGF0ZT1uKHIoKSk7dmFyIGQ9dC5kaWZmJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBmP2YocixsKTp0LmRpZmY7aWYoeCh1LE9iamVjdC5hc3NpZ24oe30sdCx7ZGlmZjpkfSkpLHUubGVuZ3RoPTAsYy5lcnJvcil0aHJvdyBjLmVycm9yO3JldHVybiBzfX19fXZhciBrLGosRT1mdW5jdGlvbihlLHQpe3JldHVybiBuZXcgQXJyYXkodCsxKS5qb2luKGUpfSxBPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIEUoXCIwXCIsdC1lLnRvU3RyaW5nKCkubGVuZ3RoKStlfSxEPWZ1bmN0aW9uKGUpe3JldHVybiBBKGUuZ2V0SG91cnMoKSwyKStcIjpcIitBKGUuZ2V0TWludXRlcygpLDIpK1wiOlwiK0EoZS5nZXRTZWNvbmRzKCksMikrXCIuXCIrQShlLmdldE1pbGxpc2Vjb25kcygpLDMpfSxPPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBwZXJmb3JtYW5jZSYmbnVsbCE9PXBlcmZvcm1hbmNlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBwZXJmb3JtYW5jZS5ub3c/cGVyZm9ybWFuY2U6RGF0ZSxOPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbihlKXtyZXR1cm4gdHlwZW9mIGV9OmZ1bmN0aW9uKGUpe3JldHVybiBlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJmUuY29uc3RydWN0b3I9PT1TeW1ib2wmJmUhPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIGV9LFA9ZnVuY3Rpb24oZSl7aWYoQXJyYXkuaXNBcnJheShlKSl7Zm9yKHZhciB0PTAscj1BcnJheShlLmxlbmd0aCk7dDxlLmxlbmd0aDt0Kyspclt0XT1lW3RdO3JldHVybiByfXJldHVybiBBcnJheS5mcm9tKGUpfSxDPVtdO2s9XCJvYmplY3RcIj09PShcInVuZGVmaW5lZFwiPT10eXBlb2YgZ2xvYmFsP1widW5kZWZpbmVkXCI6TihnbG9iYWwpKSYmZ2xvYmFsP2dsb2JhbDpcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzp7fSxqPWsuRGVlcERpZmYsaiYmQy5wdXNoKGZ1bmN0aW9uKCl7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGomJmsuRGVlcERpZmY9PT1jJiYoay5EZWVwRGlmZj1qLGo9dm9pZCAwKX0pLHQobixyKSx0KG8sciksdChpLHIpLHQoYSxyKSxPYmplY3QuZGVmaW5lUHJvcGVydGllcyhjLHtkaWZmOnt2YWx1ZTpjLGVudW1lcmFibGU6ITB9LG9ic2VydmFibGVEaWZmOnt2YWx1ZTpsLGVudW1lcmFibGU6ITB9LGFwcGx5RGlmZjp7dmFsdWU6aCxlbnVtZXJhYmxlOiEwfSxhcHBseUNoYW5nZTp7dmFsdWU6ZCxlbnVtZXJhYmxlOiEwfSxyZXZlcnRDaGFuZ2U6e3ZhbHVlOmcsZW51bWVyYWJsZTohMH0saXNDb25mbGljdDp7dmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2Ygan0sZW51bWVyYWJsZTohMH0sbm9Db25mbGljdDp7dmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gQyYmKEMuZm9yRWFjaChmdW5jdGlvbihlKXtlKCl9KSxDPW51bGwpLGN9LGVudW1lcmFibGU6ITB9fSk7dmFyIEY9e0U6e2NvbG9yOlwiIzIxOTZGM1wiLHRleHQ6XCJDSEFOR0VEOlwifSxOOntjb2xvcjpcIiM0Q0FGNTBcIix0ZXh0OlwiQURERUQ6XCJ9LEQ6e2NvbG9yOlwiI0Y0NDMzNlwiLHRleHQ6XCJERUxFVEVEOlwifSxBOntjb2xvcjpcIiMyMTk2RjNcIix0ZXh0OlwiQVJSQVk6XCJ9fSxMPXtsZXZlbDpcImxvZ1wiLGxvZ2dlcjpjb25zb2xlLGxvZ0Vycm9yczohMCxjb2xsYXBzZWQ6dm9pZCAwLHByZWRpY2F0ZTp2b2lkIDAsZHVyYXRpb246ITEsdGltZXN0YW1wOiEwLHN0YXRlVHJhbnNmb3JtZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIGV9LGFjdGlvblRyYW5zZm9ybWVyOmZ1bmN0aW9uKGUpe3JldHVybiBlfSxlcnJvclRyYW5zZm9ybWVyOmZ1bmN0aW9uKGUpe3JldHVybiBlfSxjb2xvcnM6e3RpdGxlOmZ1bmN0aW9uKCl7cmV0dXJuXCJpbmhlcml0XCJ9LHByZXZTdGF0ZTpmdW5jdGlvbigpe3JldHVyblwiIzlFOUU5RVwifSxhY3Rpb246ZnVuY3Rpb24oKXtyZXR1cm5cIiMwM0E5RjRcIn0sbmV4dFN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuXCIjNENBRjUwXCJ9LGVycm9yOmZ1bmN0aW9uKCl7cmV0dXJuXCIjRjIwNDA0XCJ9fSxkaWZmOiExLGRpZmZQcmVkaWNhdGU6dm9pZCAwLHRyYW5zZm9ybWVyOnZvaWQgMH0sVD1mdW5jdGlvbigpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTp7fSx0PWUuZGlzcGF0Y2gscj1lLmdldFN0YXRlO3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIHR8fFwiZnVuY3Rpb25cIj09dHlwZW9mIHI/UygpKHtkaXNwYXRjaDp0LGdldFN0YXRlOnJ9KTp2b2lkIGNvbnNvbGUuZXJyb3IoXCJcXG5bcmVkdXgtbG9nZ2VyIHYzXSBCUkVBS0lORyBDSEFOR0VcXG5bcmVkdXgtbG9nZ2VyIHYzXSBTaW5jZSAzLjAuMCByZWR1eC1sb2dnZXIgZXhwb3J0cyBieSBkZWZhdWx0IGxvZ2dlciB3aXRoIGRlZmF1bHQgc2V0dGluZ3MuXFxuW3JlZHV4LWxvZ2dlciB2M10gQ2hhbmdlXFxuW3JlZHV4LWxvZ2dlciB2M10gaW1wb3J0IGNyZWF0ZUxvZ2dlciBmcm9tICdyZWR1eC1sb2dnZXInXFxuW3JlZHV4LWxvZ2dlciB2M10gdG9cXG5bcmVkdXgtbG9nZ2VyIHYzXSBpbXBvcnQgeyBjcmVhdGVMb2dnZXIgfSBmcm9tICdyZWR1eC1sb2dnZXInXFxuXCIpfTtlLmRlZmF1bHRzPUwsZS5jcmVhdGVMb2dnZXI9UyxlLmxvZ2dlcj1ULGUuZGVmYXVsdD1ULE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pfSk7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlc1NlY3JldDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJ2ZianMvbGliL2VtcHR5RnVuY3Rpb24nKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpbnZhcmlhbnQoXG4gICAgICBmYWxzZSxcbiAgICAgICdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICdVc2UgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKCkgdG8gY2FsbCB0aGVtLiAnICtcbiAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xuICAgICk7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltXG4gIH07XG5cbiAgUmVhY3RQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMgPSBlbXB0eUZ1bmN0aW9uO1xuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcmlnaW5hbE1vZHVsZSkge1xyXG5cdGlmICghb3JpZ2luYWxNb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XHJcblx0XHR2YXIgbW9kdWxlID0gT2JqZWN0LmNyZWF0ZShvcmlnaW5hbE1vZHVsZSk7XHJcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcclxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcclxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XHJcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXHJcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiZXhwb3J0c1wiLCB7XHJcblx0XHRcdGVudW1lcmFibGU6IHRydWVcclxuXHRcdH0pO1xyXG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XHJcblx0fVxyXG5cdHJldHVybiBtb2R1bGU7XHJcbn07XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IGNyZWF0ZVN0b3JlLCBhcHBseU1pZGRsZXdhcmUgfSBmcm9tICdyZWR1eCc7XHJcbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xyXG5pbXBvcnQgY3JlYXRlU2FnYU1pZGRsZXdhcmUgZnJvbSAncmVkdXgtc2FnYSc7XHJcbmltcG9ydCB7IGNyZWF0ZUxvZ2dlciB9IGZyb20gJ3JlZHV4LWxvZ2dlcic7XHJcblxyXG5pbXBvcnQgVG9wU2NyZWVuTWFwIGZyb20gJy4vVG9wU2NyZWVuTWFwLmpzJztcclxuaW1wb3J0IHJvb3RSZWR1Y2VyIGZyb20gJy4uL3JlZHVjZXJzL3Jvb3RSZWR1Y2VyLmpzJztcclxuXHJcbmltcG9ydCByb290U2FnYSBmcm9tICcuLi9zYWdhcy9yb290U2FnYS5qcyc7XHJcblxyXG5jb25zdCBzYWdhTWlkZGxld2FyZSA9IGNyZWF0ZVNhZ2FNaWRkbGV3YXJlKCk7XHJcbmNvbnN0IHN0b3JlID0gY3JlYXRlU3RvcmUocm9vdFJlZHVjZXIsIGFwcGx5TWlkZGxld2FyZShzYWdhTWlkZGxld2FyZSwgY3JlYXRlTG9nZ2VyKCkpKTtcclxuc2FnYU1pZGRsZXdhcmUucnVuKHJvb3RTYWdhKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJhc2UgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybihcclxuICAgICAgICAgICAgPFByb3ZpZGVyIHN0b3JlPXtzdG9yZX0+XHJcbiAgICAgICAgICAgICAgICA8VG9wU2NyZWVuTWFwIC8+XHJcbiAgICAgICAgICAgIDwvUHJvdmlkZXI+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChyZWdFeHAsIHJlcGxhY2UpIHtcbiAgdmFyIHJlcGxhY2VyID0gcmVwbGFjZSA9PT0gT2JqZWN0KHJlcGxhY2UpID8gZnVuY3Rpb24gKHBhcnQpIHtcbiAgICByZXR1cm4gcmVwbGFjZVtwYXJ0XTtcbiAgfSA6IHJlcGxhY2U7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gU3RyaW5nKGl0KS5yZXBsYWNlKHJlZ0V4cCwgcmVwbGFjZXIpO1xuICB9O1xufTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9iZW5qYW1pbmdyL1JleEV4cC5lc2NhcGVcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHJlID0gcmVxdWlyZSgnLi9fcmVwbGFjZXInKSgvW1xcXFxeJCorPy4oKXxbXFxde31dL2csICdcXFxcJCYnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWdFeHAnLCB7IGVzY2FwZTogZnVuY3Rpb24gZXNjYXBlKGl0KSB7IHJldHVybiAkcmUoaXQpOyB9IH0pO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9jb3JlLnJlZ2V4cC5lc2NhcGUnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLlJlZ0V4cC5lc2NhcGU7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBodHRwczovL3Jhdy5naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL21hc3Rlci9MSUNFTlNFIGZpbGUuIEFuXG4gKiBhZGRpdGlvbmFsIGdyYW50IG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW5cbiAqIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqL1xuXG4hKGZ1bmN0aW9uKGdsb2JhbCkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgT3AgPSBPYmplY3QucHJvdG90eXBlO1xuICB2YXIgaGFzT3duID0gT3AuaGFzT3duUHJvcGVydHk7XG4gIHZhciB1bmRlZmluZWQ7IC8vIE1vcmUgY29tcHJlc3NpYmxlIHRoYW4gdm9pZCAwLlxuICB2YXIgJFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbCA6IHt9O1xuICB2YXIgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiO1xuICB2YXIgYXN5bmNJdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuYXN5bmNJdGVyYXRvciB8fCBcIkBAYXN5bmNJdGVyYXRvclwiO1xuICB2YXIgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xuXG4gIHZhciBpbk1vZHVsZSA9IHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCI7XG4gIHZhciBydW50aW1lID0gZ2xvYmFsLnJlZ2VuZXJhdG9yUnVudGltZTtcbiAgaWYgKHJ1bnRpbWUpIHtcbiAgICBpZiAoaW5Nb2R1bGUpIHtcbiAgICAgIC8vIElmIHJlZ2VuZXJhdG9yUnVudGltZSBpcyBkZWZpbmVkIGdsb2JhbGx5IGFuZCB3ZSdyZSBpbiBhIG1vZHVsZSxcbiAgICAgIC8vIG1ha2UgdGhlIGV4cG9ydHMgb2JqZWN0IGlkZW50aWNhbCB0byByZWdlbmVyYXRvclJ1bnRpbWUuXG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IHJ1bnRpbWU7XG4gICAgfVxuICAgIC8vIERvbid0IGJvdGhlciBldmFsdWF0aW5nIHRoZSByZXN0IG9mIHRoaXMgZmlsZSBpZiB0aGUgcnVudGltZSB3YXNcbiAgICAvLyBhbHJlYWR5IGRlZmluZWQgZ2xvYmFsbHkuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRGVmaW5lIHRoZSBydW50aW1lIGdsb2JhbGx5IChhcyBleHBlY3RlZCBieSBnZW5lcmF0ZWQgY29kZSkgYXMgZWl0aGVyXG4gIC8vIG1vZHVsZS5leHBvcnRzIChpZiB3ZSdyZSBpbiBhIG1vZHVsZSkgb3IgYSBuZXcsIGVtcHR5IG9iamVjdC5cbiAgcnVudGltZSA9IGdsb2JhbC5yZWdlbmVyYXRvclJ1bnRpbWUgPSBpbk1vZHVsZSA/IG1vZHVsZS5leHBvcnRzIDoge307XG5cbiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIC8vIElmIG91dGVyRm4gcHJvdmlkZWQgYW5kIG91dGVyRm4ucHJvdG90eXBlIGlzIGEgR2VuZXJhdG9yLCB0aGVuIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yLlxuICAgIHZhciBwcm90b0dlbmVyYXRvciA9IG91dGVyRm4gJiYgb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IgPyBvdXRlckZuIDogR2VuZXJhdG9yO1xuICAgIHZhciBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSk7XG4gICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7XG5cbiAgICAvLyBUaGUgLl9pbnZva2UgbWV0aG9kIHVuaWZpZXMgdGhlIGltcGxlbWVudGF0aW9ucyBvZiB0aGUgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzLlxuICAgIGdlbmVyYXRvci5faW52b2tlID0gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcblxuICAgIHJldHVybiBnZW5lcmF0b3I7XG4gIH1cbiAgcnVudGltZS53cmFwID0gd3JhcDtcblxuICAvLyBUcnkvY2F0Y2ggaGVscGVyIHRvIG1pbmltaXplIGRlb3B0aW1pemF0aW9ucy4gUmV0dXJucyBhIGNvbXBsZXRpb25cbiAgLy8gcmVjb3JkIGxpa2UgY29udGV4dC50cnlFbnRyaWVzW2ldLmNvbXBsZXRpb24uIFRoaXMgaW50ZXJmYWNlIGNvdWxkXG4gIC8vIGhhdmUgYmVlbiAoYW5kIHdhcyBwcmV2aW91c2x5KSBkZXNpZ25lZCB0byB0YWtlIGEgY2xvc3VyZSB0byBiZVxuICAvLyBpbnZva2VkIHdpdGhvdXQgYXJndW1lbnRzLCBidXQgaW4gYWxsIHRoZSBjYXNlcyB3ZSBjYXJlIGFib3V0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhbiBleGlzdGluZyBtZXRob2Qgd2Ugd2FudCB0byBjYWxsLCBzbyB0aGVyZSdzIG5vIG5lZWRcbiAgLy8gdG8gY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIG9iamVjdC4gV2UgY2FuIGV2ZW4gZ2V0IGF3YXkgd2l0aCBhc3N1bWluZ1xuICAvLyB0aGUgbWV0aG9kIHRha2VzIGV4YWN0bHkgb25lIGFyZ3VtZW50LCBzaW5jZSB0aGF0IGhhcHBlbnMgdG8gYmUgdHJ1ZVxuICAvLyBpbiBldmVyeSBjYXNlLCBzbyB3ZSBkb24ndCBoYXZlIHRvIHRvdWNoIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBUaGVcbiAgLy8gb25seSBhZGRpdGlvbmFsIGFsbG9jYXRpb24gcmVxdWlyZWQgaXMgdGhlIGNvbXBsZXRpb24gcmVjb3JkLCB3aGljaFxuICAvLyBoYXMgYSBzdGFibGUgc2hhcGUgYW5kIHNvIGhvcGVmdWxseSBzaG91bGQgYmUgY2hlYXAgdG8gYWxsb2NhdGUuXG4gIGZ1bmN0aW9uIHRyeUNhdGNoKGZuLCBvYmosIGFyZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcIm5vcm1hbFwiLCBhcmc6IGZuLmNhbGwob2JqLCBhcmcpIH07XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcInRocm93XCIsIGFyZzogZXJyIH07XG4gICAgfVxuICB9XG5cbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkU3RhcnQgPSBcInN1c3BlbmRlZFN0YXJ0XCI7XG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkID0gXCJzdXNwZW5kZWRZaWVsZFwiO1xuICB2YXIgR2VuU3RhdGVFeGVjdXRpbmcgPSBcImV4ZWN1dGluZ1wiO1xuICB2YXIgR2VuU3RhdGVDb21wbGV0ZWQgPSBcImNvbXBsZXRlZFwiO1xuXG4gIC8vIFJldHVybmluZyB0aGlzIG9iamVjdCBmcm9tIHRoZSBpbm5lckZuIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXNcbiAgLy8gYnJlYWtpbmcgb3V0IG9mIHRoZSBkaXNwYXRjaCBzd2l0Y2ggc3RhdGVtZW50LlxuICB2YXIgQ29udGludWVTZW50aW5lbCA9IHt9O1xuXG4gIC8vIER1bW15IGNvbnN0cnVjdG9yIGZ1bmN0aW9ucyB0aGF0IHdlIHVzZSBhcyB0aGUgLmNvbnN0cnVjdG9yIGFuZFxuICAvLyAuY29uc3RydWN0b3IucHJvdG90eXBlIHByb3BlcnRpZXMgZm9yIGZ1bmN0aW9ucyB0aGF0IHJldHVybiBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0cy4gRm9yIGZ1bGwgc3BlYyBjb21wbGlhbmNlLCB5b3UgbWF5IHdpc2ggdG8gY29uZmlndXJlIHlvdXJcbiAgLy8gbWluaWZpZXIgbm90IHRvIG1hbmdsZSB0aGUgbmFtZXMgb2YgdGhlc2UgdHdvIGZ1bmN0aW9ucy5cbiAgZnVuY3Rpb24gR2VuZXJhdG9yKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9XG5cbiAgLy8gVGhpcyBpcyBhIHBvbHlmaWxsIGZvciAlSXRlcmF0b3JQcm90b3R5cGUlIGZvciBlbnZpcm9ubWVudHMgdGhhdFxuICAvLyBkb24ndCBuYXRpdmVseSBzdXBwb3J0IGl0LlxuICB2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcbiAgSXRlcmF0b3JQcm90b3R5cGVbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgdmFyIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8gJiYgZ2V0UHJvdG8oZ2V0UHJvdG8odmFsdWVzKFtdKSkpO1xuICBpZiAoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgJiZcbiAgICAgIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPcCAmJlxuICAgICAgaGFzT3duLmNhbGwoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sKSkge1xuICAgIC8vIFRoaXMgZW52aXJvbm1lbnQgaGFzIGEgbmF0aXZlICVJdGVyYXRvclByb3RvdHlwZSU7IHVzZSBpdCBpbnN0ZWFkXG4gICAgLy8gb2YgdGhlIHBvbHlmaWxsLlxuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gTmF0aXZlSXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cblxuICB2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPVxuICAgIEdlbmVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgR2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlID0gR3AuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvbjtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGVbdG9TdHJpbmdUYWdTeW1ib2xdID1cbiAgICBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcblxuICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZVxuICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLlxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICBwcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBydW50aW1lLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICB2YXIgY3RvciA9IHR5cGVvZiBnZW5GdW4gPT09IFwiZnVuY3Rpb25cIiAmJiBnZW5GdW4uY29uc3RydWN0b3I7XG4gICAgcmV0dXJuIGN0b3JcbiAgICAgID8gY3RvciA9PT0gR2VuZXJhdG9yRnVuY3Rpb24gfHxcbiAgICAgICAgLy8gRm9yIHRoZSBuYXRpdmUgR2VuZXJhdG9yRnVuY3Rpb24gY29uc3RydWN0b3IsIHRoZSBiZXN0IHdlIGNhblxuICAgICAgICAvLyBkbyBpcyB0byBjaGVjayBpdHMgLm5hbWUgcHJvcGVydHkuXG4gICAgICAgIChjdG9yLmRpc3BsYXlOYW1lIHx8IGN0b3IubmFtZSkgPT09IFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICAgICAgOiBmYWxzZTtcbiAgfTtcblxuICBydW50aW1lLm1hcmsgPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoZ2VuRnVuLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdlbkZ1bi5fX3Byb3RvX18gPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgICAgIGlmICghKHRvU3RyaW5nVGFnU3ltYm9sIGluIGdlbkZ1bikpIHtcbiAgICAgICAgZ2VuRnVuW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcbiAgICAgIH1cbiAgICB9XG4gICAgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApO1xuICAgIHJldHVybiBnZW5GdW47XG4gIH07XG5cbiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvXG4gIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0XG4gIC8vIGBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpYCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXNcbiAgLy8gbWVhbnQgdG8gYmUgYXdhaXRlZC5cbiAgcnVudGltZS5hd3JhcCA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB7IF9fYXdhaXQ6IGFyZyB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChnZW5lcmF0b3JbbWV0aG9kXSwgZ2VuZXJhdG9yLCBhcmcpO1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgcmVqZWN0KHJlY29yZC5hcmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlY29yZC5hcmc7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIikpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJ0aHJvd1wiLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uKHVud3JhcHBlZCkge1xuICAgICAgICAgIC8vIFdoZW4gYSB5aWVsZGVkIFByb21pc2UgaXMgcmVzb2x2ZWQsIGl0cyBmaW5hbCB2YWx1ZSBiZWNvbWVzXG4gICAgICAgICAgLy8gdGhlIC52YWx1ZSBvZiB0aGUgUHJvbWlzZTx7dmFsdWUsZG9uZX0+IHJlc3VsdCBmb3IgdGhlXG4gICAgICAgICAgLy8gY3VycmVudCBpdGVyYXRpb24uIElmIHRoZSBQcm9taXNlIGlzIHJlamVjdGVkLCBob3dldmVyLCB0aGVcbiAgICAgICAgICAvLyByZXN1bHQgZm9yIHRoaXMgaXRlcmF0aW9uIHdpbGwgYmUgcmVqZWN0ZWQgd2l0aCB0aGUgc2FtZVxuICAgICAgICAgIC8vIHJlYXNvbi4gTm90ZSB0aGF0IHJlamVjdGlvbnMgb2YgeWllbGRlZCBQcm9taXNlcyBhcmUgbm90XG4gICAgICAgICAgLy8gdGhyb3duIGJhY2sgaW50byB0aGUgZ2VuZXJhdG9yIGZ1bmN0aW9uLCBhcyBpcyB0aGUgY2FzZVxuICAgICAgICAgIC8vIHdoZW4gYW4gYXdhaXRlZCBQcm9taXNlIGlzIHJlamVjdGVkLiBUaGlzIGRpZmZlcmVuY2UgaW5cbiAgICAgICAgICAvLyBiZWhhdmlvciBiZXR3ZWVuIHlpZWxkIGFuZCBhd2FpdCBpcyBpbXBvcnRhbnQsIGJlY2F1c2UgaXRcbiAgICAgICAgICAvLyBhbGxvd3MgdGhlIGNvbnN1bWVyIHRvIGRlY2lkZSB3aGF0IHRvIGRvIHdpdGggdGhlIHlpZWxkZWRcbiAgICAgICAgICAvLyByZWplY3Rpb24gKHN3YWxsb3cgaXQgYW5kIGNvbnRpbnVlLCBtYW51YWxseSAudGhyb3cgaXQgYmFja1xuICAgICAgICAgIC8vIGludG8gdGhlIGdlbmVyYXRvciwgYWJhbmRvbiBpdGVyYXRpb24sIHdoYXRldmVyKS4gV2l0aFxuICAgICAgICAgIC8vIGF3YWl0LCBieSBjb250cmFzdCwgdGhlcmUgaXMgbm8gb3Bwb3J0dW5pdHkgdG8gZXhhbWluZSB0aGVcbiAgICAgICAgICAvLyByZWplY3Rpb24gcmVhc29uIG91dHNpZGUgdGhlIGdlbmVyYXRvciBmdW5jdGlvbiwgc28gdGhlXG4gICAgICAgICAgLy8gb25seSBvcHRpb24gaXMgdG8gdGhyb3cgaXQgZnJvbSB0aGUgYXdhaXQgZXhwcmVzc2lvbiwgYW5kXG4gICAgICAgICAgLy8gbGV0IHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24gaGFuZGxlIHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGdsb2JhbC5wcm9jZXNzID09PSBcIm9iamVjdFwiICYmIGdsb2JhbC5wcm9jZXNzLmRvbWFpbikge1xuICAgICAgaW52b2tlID0gZ2xvYmFsLnByb2Nlc3MuZG9tYWluLmJpbmQoaW52b2tlKTtcbiAgICB9XG5cbiAgICB2YXIgcHJldmlvdXNQcm9taXNlO1xuXG4gICAgZnVuY3Rpb24gZW5xdWV1ZShtZXRob2QsIGFyZykge1xuICAgICAgZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID1cbiAgICAgICAgLy8gSWYgZW5xdWV1ZSBoYXMgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIHdlIHdhbnQgdG8gd2FpdCB1bnRpbFxuICAgICAgICAvLyBhbGwgcHJldmlvdXMgUHJvbWlzZXMgaGF2ZSBiZWVuIHJlc29sdmVkIGJlZm9yZSBjYWxsaW5nIGludm9rZSxcbiAgICAgICAgLy8gc28gdGhhdCByZXN1bHRzIGFyZSBhbHdheXMgZGVsaXZlcmVkIGluIHRoZSBjb3JyZWN0IG9yZGVyLiBJZlxuICAgICAgICAvLyBlbnF1ZXVlIGhhcyBub3QgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIGl0IGlzIGltcG9ydGFudCB0b1xuICAgICAgICAvLyBjYWxsIGludm9rZSBpbW1lZGlhdGVseSwgd2l0aG91dCB3YWl0aW5nIG9uIGEgY2FsbGJhY2sgdG8gZmlyZSxcbiAgICAgICAgLy8gc28gdGhhdCB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhcyB0aGUgb3Bwb3J0dW5pdHkgdG8gZG9cbiAgICAgICAgLy8gYW55IG5lY2Vzc2FyeSBzZXR1cCBpbiBhIHByZWRpY3RhYmxlIHdheS4gVGhpcyBwcmVkaWN0YWJpbGl0eVxuICAgICAgICAvLyBpcyB3aHkgdGhlIFByb21pc2UgY29uc3RydWN0b3Igc3luY2hyb25vdXNseSBpbnZva2VzIGl0c1xuICAgICAgICAvLyBleGVjdXRvciBjYWxsYmFjaywgYW5kIHdoeSBhc3luYyBmdW5jdGlvbnMgc3luY2hyb25vdXNseVxuICAgICAgICAvLyBleGVjdXRlIGNvZGUgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdC4gU2luY2Ugd2UgaW1wbGVtZW50IHNpbXBsZVxuICAgICAgICAvLyBhc3luYyBmdW5jdGlvbnMgaW4gdGVybXMgb2YgYXN5bmMgZ2VuZXJhdG9ycywgaXQgaXMgZXNwZWNpYWxseVxuICAgICAgICAvLyBpbXBvcnRhbnQgdG8gZ2V0IHRoaXMgcmlnaHQsIGV2ZW4gdGhvdWdoIGl0IHJlcXVpcmVzIGNhcmUuXG4gICAgICAgIHByZXZpb3VzUHJvbWlzZSA/IHByZXZpb3VzUHJvbWlzZS50aGVuKFxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnLFxuICAgICAgICAgIC8vIEF2b2lkIHByb3BhZ2F0aW5nIGZhaWx1cmVzIHRvIFByb21pc2VzIHJldHVybmVkIGJ5IGxhdGVyXG4gICAgICAgICAgLy8gaW52b2NhdGlvbnMgb2YgdGhlIGl0ZXJhdG9yLlxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnXG4gICAgICAgICkgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpO1xuICAgIH1cblxuICAgIC8vIERlZmluZSB0aGUgdW5pZmllZCBoZWxwZXIgbWV0aG9kIHRoYXQgaXMgdXNlZCB0byBpbXBsZW1lbnQgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiAoc2VlIGRlZmluZUl0ZXJhdG9yTWV0aG9kcykuXG4gICAgdGhpcy5faW52b2tlID0gZW5xdWV1ZTtcbiAgfVxuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSk7XG4gIEFzeW5jSXRlcmF0b3IucHJvdG90eXBlW2FzeW5jSXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBydW50aW1lLkFzeW5jSXRlcmF0b3IgPSBBc3luY0l0ZXJhdG9yO1xuXG4gIC8vIE5vdGUgdGhhdCBzaW1wbGUgYXN5bmMgZnVuY3Rpb25zIGFyZSBpbXBsZW1lbnRlZCBvbiB0b3Agb2ZcbiAgLy8gQXN5bmNJdGVyYXRvciBvYmplY3RzOyB0aGV5IGp1c3QgcmV0dXJuIGEgUHJvbWlzZSBmb3IgdGhlIHZhbHVlIG9mXG4gIC8vIHRoZSBmaW5hbCByZXN1bHQgcHJvZHVjZWQgYnkgdGhlIGl0ZXJhdG9yLlxuICBydW50aW1lLmFzeW5jID0gZnVuY3Rpb24oaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKFxuICAgICAgd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdClcbiAgICApO1xuXG4gICAgcmV0dXJuIHJ1bnRpbWUuaXNHZW5lcmF0b3JGdW5jdGlvbihvdXRlckZuKVxuICAgICAgPyBpdGVyIC8vIElmIG91dGVyRm4gaXMgYSBnZW5lcmF0b3IsIHJldHVybiB0aGUgZnVsbCBpdGVyYXRvci5cbiAgICAgIDogaXRlci5uZXh0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0LmRvbmUgPyByZXN1bHQudmFsdWUgOiBpdGVyLm5leHQoKTtcbiAgICAgICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KSB7XG4gICAgdmFyIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydDtcblxuICAgIHJldHVybiBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcpIHtcbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVFeGVjdXRpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUNvbXBsZXRlZCkge1xuICAgICAgICBpZiAobWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICB0aHJvdyBhcmc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCZSBmb3JnaXZpbmcsIHBlciAyNS4zLjMuMy4zIG9mIHRoZSBzcGVjOlxuICAgICAgICAvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtZ2VuZXJhdG9ycmVzdW1lXG4gICAgICAgIHJldHVybiBkb25lUmVzdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnRleHQubWV0aG9kID0gbWV0aG9kO1xuICAgICAgY29udGV4dC5hcmcgPSBhcmc7XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGNvbnRleHQuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSkge1xuICAgICAgICAgIHZhciBkZWxlZ2F0ZVJlc3VsdCA9IG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0ID09PSBDb250aW51ZVNlbnRpbmVsKSBjb250aW51ZTtcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZVJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgICAgLy8gU2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgICAgICBjb250ZXh0LnNlbnQgPSBjb250ZXh0Ll9zZW50ID0gY29udGV4dC5hcmc7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0KSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgICAgdGhyb3cgY29udGV4dC5hcmc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZyk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICAgIGNvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIGNvbnRleHQuYXJnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlID0gR2VuU3RhdGVFeGVjdXRpbmc7XG5cbiAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIpIHtcbiAgICAgICAgICAvLyBJZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIGZyb20gaW5uZXJGbiwgd2UgbGVhdmUgc3RhdGUgPT09XG4gICAgICAgICAgLy8gR2VuU3RhdGVFeGVjdXRpbmcgYW5kIGxvb3AgYmFjayBmb3IgYW5vdGhlciBpbnZvY2F0aW9uLlxuICAgICAgICAgIHN0YXRlID0gY29udGV4dC5kb25lXG4gICAgICAgICAgICA/IEdlblN0YXRlQ29tcGxldGVkXG4gICAgICAgICAgICA6IEdlblN0YXRlU3VzcGVuZGVkWWllbGQ7XG5cbiAgICAgICAgICBpZiAocmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiByZWNvcmQuYXJnLFxuICAgICAgICAgICAgZG9uZTogY29udGV4dC5kb25lXG4gICAgICAgICAgfTtcblxuICAgICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgIC8vIERpc3BhdGNoIHRoZSBleGNlcHRpb24gYnkgbG9vcGluZyBiYWNrIGFyb3VuZCB0byB0aGVcbiAgICAgICAgICAvLyBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKSBjYWxsIGFib3ZlLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvLyBDYWxsIGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXShjb250ZXh0LmFyZykgYW5kIGhhbmRsZSB0aGVcbiAgLy8gcmVzdWx0LCBlaXRoZXIgYnkgcmV0dXJuaW5nIGEgeyB2YWx1ZSwgZG9uZSB9IHJlc3VsdCBmcm9tIHRoZVxuICAvLyBkZWxlZ2F0ZSBpdGVyYXRvciwgb3IgYnkgbW9kaWZ5aW5nIGNvbnRleHQubWV0aG9kIGFuZCBjb250ZXh0LmFyZyxcbiAgLy8gc2V0dGluZyBjb250ZXh0LmRlbGVnYXRlIHRvIG51bGwsIGFuZCByZXR1cm5pbmcgdGhlIENvbnRpbnVlU2VudGluZWwuXG4gIGZ1bmN0aW9uIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgbWV0aG9kID0gZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdO1xuICAgIGlmIChtZXRob2QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gQSAudGhyb3cgb3IgLnJldHVybiB3aGVuIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgbm8gLnRocm93XG4gICAgICAvLyBtZXRob2QgYWx3YXlzIHRlcm1pbmF0ZXMgdGhlIHlpZWxkKiBsb29wLlxuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIGlmIChkZWxlZ2F0ZS5pdGVyYXRvci5yZXR1cm4pIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIGEgcmV0dXJuIG1ldGhvZCwgZ2l2ZSBpdCBhXG4gICAgICAgICAgLy8gY2hhbmNlIHRvIGNsZWFuIHVwLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcblxuICAgICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICAvLyBJZiBtYXliZUludm9rZURlbGVnYXRlKGNvbnRleHQpIGNoYW5nZWQgY29udGV4dC5tZXRob2QgZnJvbVxuICAgICAgICAgICAgLy8gXCJyZXR1cm5cIiB0byBcInRocm93XCIsIGxldCB0aGF0IG92ZXJyaWRlIHRoZSBUeXBlRXJyb3IgYmVsb3cuXG4gICAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAndGhyb3cnIG1ldGhvZFwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKG1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGNvbnRleHQuYXJnKTtcblxuICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIGluZm8gPSByZWNvcmQuYXJnO1xuXG4gICAgaWYgKCEgaW5mbykge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKTtcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgaWYgKGluZm8uZG9uZSkge1xuICAgICAgLy8gQXNzaWduIHRoZSByZXN1bHQgb2YgdGhlIGZpbmlzaGVkIGRlbGVnYXRlIHRvIHRoZSB0ZW1wb3JhcnlcbiAgICAgIC8vIHZhcmlhYmxlIHNwZWNpZmllZCBieSBkZWxlZ2F0ZS5yZXN1bHROYW1lIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZTtcblxuICAgICAgLy8gUmVzdW1lIGV4ZWN1dGlvbiBhdCB0aGUgZGVzaXJlZCBsb2NhdGlvbiAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYztcblxuICAgICAgLy8gSWYgY29udGV4dC5tZXRob2Qgd2FzIFwidGhyb3dcIiBidXQgdGhlIGRlbGVnYXRlIGhhbmRsZWQgdGhlXG4gICAgICAvLyBleGNlcHRpb24sIGxldCB0aGUgb3V0ZXIgZ2VuZXJhdG9yIHByb2NlZWQgbm9ybWFsbHkuIElmXG4gICAgICAvLyBjb250ZXh0Lm1ldGhvZCB3YXMgXCJuZXh0XCIsIGZvcmdldCBjb250ZXh0LmFyZyBzaW5jZSBpdCBoYXMgYmVlblxuICAgICAgLy8gXCJjb25zdW1lZFwiIGJ5IHRoZSBkZWxlZ2F0ZSBpdGVyYXRvci4gSWYgY29udGV4dC5tZXRob2Qgd2FzXG4gICAgICAvLyBcInJldHVyblwiLCBhbGxvdyB0aGUgb3JpZ2luYWwgLnJldHVybiBjYWxsIHRvIGNvbnRpbnVlIGluIHRoZVxuICAgICAgLy8gb3V0ZXIgZ2VuZXJhdG9yLlxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kICE9PSBcInJldHVyblwiKSB7XG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlLXlpZWxkIHRoZSByZXN1bHQgcmV0dXJuZWQgYnkgdGhlIGRlbGVnYXRlIG1ldGhvZC5cbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cblxuICAgIC8vIFRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBpcyBmaW5pc2hlZCwgc28gZm9yZ2V0IGl0IGFuZCBjb250aW51ZSB3aXRoXG4gICAgLy8gdGhlIG91dGVyIGdlbmVyYXRvci5cbiAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgfVxuXG4gIC8vIERlZmluZSBHZW5lcmF0b3IucHJvdG90eXBlLntuZXh0LHRocm93LHJldHVybn0gaW4gdGVybXMgb2YgdGhlXG4gIC8vIHVuaWZpZWQgLl9pbnZva2UgaGVscGVyIG1ldGhvZC5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKTtcblxuICBHcFt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvclwiO1xuXG4gIC8vIEEgR2VuZXJhdG9yIHNob3VsZCBhbHdheXMgcmV0dXJuIGl0c2VsZiBhcyB0aGUgaXRlcmF0b3Igb2JqZWN0IHdoZW4gdGhlXG4gIC8vIEBAaXRlcmF0b3IgZnVuY3Rpb24gaXMgY2FsbGVkIG9uIGl0LiBTb21lIGJyb3dzZXJzJyBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlXG4gIC8vIGl0ZXJhdG9yIHByb3RvdHlwZSBjaGFpbiBpbmNvcnJlY3RseSBpbXBsZW1lbnQgdGhpcywgY2F1c2luZyB0aGUgR2VuZXJhdG9yXG4gIC8vIG9iamVjdCB0byBub3QgYmUgcmV0dXJuZWQgZnJvbSB0aGlzIGNhbGwuIFRoaXMgZW5zdXJlcyB0aGF0IGRvZXNuJ3QgaGFwcGVuLlxuICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL2lzc3Vlcy8yNzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgR3BbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgR3AudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCJbb2JqZWN0IEdlbmVyYXRvcl1cIjtcbiAgfTtcblxuICBmdW5jdGlvbiBwdXNoVHJ5RW50cnkobG9jcykge1xuICAgIHZhciBlbnRyeSA9IHsgdHJ5TG9jOiBsb2NzWzBdIH07XG5cbiAgICBpZiAoMSBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5jYXRjaExvYyA9IGxvY3NbMV07XG4gICAgfVxuXG4gICAgaWYgKDIgaW4gbG9jcykge1xuICAgICAgZW50cnkuZmluYWxseUxvYyA9IGxvY3NbMl07XG4gICAgICBlbnRyeS5hZnRlckxvYyA9IGxvY3NbM107XG4gICAgfVxuXG4gICAgdGhpcy50cnlFbnRyaWVzLnB1c2goZW50cnkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXRUcnlFbnRyeShlbnRyeSkge1xuICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uIHx8IHt9O1xuICAgIHJlY29yZC50eXBlID0gXCJub3JtYWxcIjtcbiAgICBkZWxldGUgcmVjb3JkLmFyZztcbiAgICBlbnRyeS5jb21wbGV0aW9uID0gcmVjb3JkO1xuICB9XG5cbiAgZnVuY3Rpb24gQ29udGV4dCh0cnlMb2NzTGlzdCkge1xuICAgIC8vIFRoZSByb290IGVudHJ5IG9iamVjdCAoZWZmZWN0aXZlbHkgYSB0cnkgc3RhdGVtZW50IHdpdGhvdXQgYSBjYXRjaFxuICAgIC8vIG9yIGEgZmluYWxseSBibG9jaykgZ2l2ZXMgdXMgYSBwbGFjZSB0byBzdG9yZSB2YWx1ZXMgdGhyb3duIGZyb21cbiAgICAvLyBsb2NhdGlvbnMgd2hlcmUgdGhlcmUgaXMgbm8gZW5jbG9zaW5nIHRyeSBzdGF0ZW1lbnQuXG4gICAgdGhpcy50cnlFbnRyaWVzID0gW3sgdHJ5TG9jOiBcInJvb3RcIiB9XTtcbiAgICB0cnlMb2NzTGlzdC5mb3JFYWNoKHB1c2hUcnlFbnRyeSwgdGhpcyk7XG4gICAgdGhpcy5yZXNldCh0cnVlKTtcbiAgfVxuXG4gIHJ1bnRpbWUua2V5cyA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgfVxuICAgIGtleXMucmV2ZXJzZSgpO1xuXG4gICAgLy8gUmF0aGVyIHRoYW4gcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGEgbmV4dCBtZXRob2QsIHdlIGtlZXBcbiAgICAvLyB0aGluZ3Mgc2ltcGxlIGFuZCByZXR1cm4gdGhlIG5leHQgZnVuY3Rpb24gaXRzZWxmLlxuICAgIHJldHVybiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgd2hpbGUgKGtleXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzLnBvcCgpO1xuICAgICAgICBpZiAoa2V5IGluIG9iamVjdCkge1xuICAgICAgICAgIG5leHQudmFsdWUgPSBrZXk7XG4gICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVG8gYXZvaWQgY3JlYXRpbmcgYW4gYWRkaXRpb25hbCBvYmplY3QsIHdlIGp1c3QgaGFuZyB0aGUgLnZhbHVlXG4gICAgICAvLyBhbmQgLmRvbmUgcHJvcGVydGllcyBvZmYgdGhlIG5leHQgZnVuY3Rpb24gb2JqZWN0IGl0c2VsZi4gVGhpc1xuICAgICAgLy8gYWxzbyBlbnN1cmVzIHRoYXQgdGhlIG1pbmlmaWVyIHdpbGwgbm90IGFub255bWl6ZSB0aGUgZnVuY3Rpb24uXG4gICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiB2YWx1ZXMoaXRlcmFibGUpIHtcbiAgICBpZiAoaXRlcmFibGUpIHtcbiAgICAgIHZhciBpdGVyYXRvck1ldGhvZCA9IGl0ZXJhYmxlW2l0ZXJhdG9yU3ltYm9sXTtcbiAgICAgIGlmIChpdGVyYXRvck1ldGhvZCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JNZXRob2QuY2FsbChpdGVyYWJsZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgaXRlcmFibGUubmV4dCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBpdGVyYWJsZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc05hTihpdGVyYWJsZS5sZW5ndGgpKSB7XG4gICAgICAgIHZhciBpID0gLTEsIG5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBpdGVyYWJsZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChpdGVyYWJsZSwgaSkpIHtcbiAgICAgICAgICAgICAgbmV4dC52YWx1ZSA9IGl0ZXJhYmxlW2ldO1xuICAgICAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV4dC52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuXG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG5leHQubmV4dCA9IG5leHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGFuIGl0ZXJhdG9yIHdpdGggbm8gdmFsdWVzLlxuICAgIHJldHVybiB7IG5leHQ6IGRvbmVSZXN1bHQgfTtcbiAgfVxuICBydW50aW1lLnZhbHVlcyA9IHZhbHVlcztcblxuICBmdW5jdGlvbiBkb25lUmVzdWx0KCkge1xuICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfVxuXG4gIENvbnRleHQucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBDb250ZXh0LFxuXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKHNraXBUZW1wUmVzZXQpIHtcbiAgICAgIHRoaXMucHJldiA9IDA7XG4gICAgICB0aGlzLm5leHQgPSAwO1xuICAgICAgLy8gUmVzZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICB0aGlzLnNlbnQgPSB0aGlzLl9zZW50ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICB0aGlzLmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuXG4gICAgICB0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChyZXNldFRyeUVudHJ5KTtcblxuICAgICAgaWYgKCFza2lwVGVtcFJlc2V0KSB7XG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcykge1xuICAgICAgICAgIC8vIE5vdCBzdXJlIGFib3V0IHRoZSBvcHRpbWFsIG9yZGVyIG9mIHRoZXNlIGNvbmRpdGlvbnM6XG4gICAgICAgICAgaWYgKG5hbWUuY2hhckF0KDApID09PSBcInRcIiAmJlxuICAgICAgICAgICAgICBoYXNPd24uY2FsbCh0aGlzLCBuYW1lKSAmJlxuICAgICAgICAgICAgICAhaXNOYU4oK25hbWUuc2xpY2UoMSkpKSB7XG4gICAgICAgICAgICB0aGlzW25hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG5cbiAgICAgIHZhciByb290RW50cnkgPSB0aGlzLnRyeUVudHJpZXNbMF07XG4gICAgICB2YXIgcm9vdFJlY29yZCA9IHJvb3RFbnRyeS5jb21wbGV0aW9uO1xuICAgICAgaWYgKHJvb3RSZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJvb3RSZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5ydmFsO1xuICAgIH0sXG5cbiAgICBkaXNwYXRjaEV4Y2VwdGlvbjogZnVuY3Rpb24oZXhjZXB0aW9uKSB7XG4gICAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAgIHRocm93IGV4Y2VwdGlvbjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuICAgICAgZnVuY3Rpb24gaGFuZGxlKGxvYywgY2F1Z2h0KSB7XG4gICAgICAgIHJlY29yZC50eXBlID0gXCJ0aHJvd1wiO1xuICAgICAgICByZWNvcmQuYXJnID0gZXhjZXB0aW9uO1xuICAgICAgICBjb250ZXh0Lm5leHQgPSBsb2M7XG5cbiAgICAgICAgaWYgKGNhdWdodCkge1xuICAgICAgICAgIC8vIElmIHRoZSBkaXNwYXRjaGVkIGV4Y2VwdGlvbiB3YXMgY2F1Z2h0IGJ5IGEgY2F0Y2ggYmxvY2ssXG4gICAgICAgICAgLy8gdGhlbiBsZXQgdGhhdCBjYXRjaCBibG9jayBoYW5kbGUgdGhlIGV4Y2VwdGlvbiBub3JtYWxseS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICEhIGNhdWdodDtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IFwicm9vdFwiKSB7XG4gICAgICAgICAgLy8gRXhjZXB0aW9uIHRocm93biBvdXRzaWRlIG9mIGFueSB0cnkgYmxvY2sgdGhhdCBjb3VsZCBoYW5kbGVcbiAgICAgICAgICAvLyBpdCwgc28gc2V0IHRoZSBjb21wbGV0aW9uIHZhbHVlIG9mIHRoZSBlbnRpcmUgZnVuY3Rpb24gdG9cbiAgICAgICAgICAvLyB0aHJvdyB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJldHVybiBoYW5kbGUoXCJlbmRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldikge1xuICAgICAgICAgIHZhciBoYXNDYXRjaCA9IGhhc093bi5jYWxsKGVudHJ5LCBcImNhdGNoTG9jXCIpO1xuICAgICAgICAgIHZhciBoYXNGaW5hbGx5ID0gaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKTtcblxuICAgICAgICAgIGlmIChoYXNDYXRjaCAmJiBoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzQ2F0Y2gpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYWJydXB0OiBmdW5jdGlvbih0eXBlLCBhcmcpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKSAmJlxuICAgICAgICAgICAgdGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgIHZhciBmaW5hbGx5RW50cnkgPSBlbnRyeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZmluYWxseUVudHJ5ICYmXG4gICAgICAgICAgKHR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgICB0eXBlID09PSBcImNvbnRpbnVlXCIpICYmXG4gICAgICAgICAgZmluYWxseUVudHJ5LnRyeUxvYyA8PSBhcmcgJiZcbiAgICAgICAgICBhcmcgPD0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgLy8gSWdub3JlIHRoZSBmaW5hbGx5IGVudHJ5IGlmIGNvbnRyb2wgaXMgbm90IGp1bXBpbmcgdG8gYVxuICAgICAgICAvLyBsb2NhdGlvbiBvdXRzaWRlIHRoZSB0cnkvY2F0Y2ggYmxvY2suXG4gICAgICAgIGZpbmFsbHlFbnRyeSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWNvcmQgPSBmaW5hbGx5RW50cnkgPyBmaW5hbGx5RW50cnkuY29tcGxldGlvbiA6IHt9O1xuICAgICAgcmVjb3JkLnR5cGUgPSB0eXBlO1xuICAgICAgcmVjb3JkLmFyZyA9IGFyZztcblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSkge1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICB0aGlzLm5leHQgPSBmaW5hbGx5RW50cnkuZmluYWxseUxvYztcbiAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmNvbXBsZXRlKHJlY29yZCk7XG4gICAgfSxcblxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbihyZWNvcmQsIGFmdGVyTG9jKSB7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgIHJlY29yZC50eXBlID09PSBcImNvbnRpbnVlXCIpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gcmVjb3JkLmFyZztcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgdGhpcy5ydmFsID0gdGhpcy5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgIHRoaXMubmV4dCA9IFwiZW5kXCI7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiICYmIGFmdGVyTG9jKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IGFmdGVyTG9jO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9LFxuXG4gICAgZmluaXNoOiBmdW5jdGlvbihmaW5hbGx5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB0aGlzLmNvbXBsZXRlKGVudHJ5LmNvbXBsZXRpb24sIGVudHJ5LmFmdGVyTG9jKTtcbiAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBcImNhdGNoXCI6IGZ1bmN0aW9uKHRyeUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IHRyeUxvYykge1xuICAgICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICB2YXIgdGhyb3duID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhyb3duO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBjb250ZXh0LmNhdGNoIG1ldGhvZCBtdXN0IG9ubHkgYmUgY2FsbGVkIHdpdGggYSBsb2NhdGlvblxuICAgICAgLy8gYXJndW1lbnQgdGhhdCBjb3JyZXNwb25kcyB0byBhIGtub3duIGNhdGNoIGJsb2NrLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xuICAgIH0sXG5cbiAgICBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbihpdGVyYWJsZSwgcmVzdWx0TmFtZSwgbmV4dExvYykge1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IHtcbiAgICAgICAgaXRlcmF0b3I6IHZhbHVlcyhpdGVyYWJsZSksXG4gICAgICAgIHJlc3VsdE5hbWU6IHJlc3VsdE5hbWUsXG4gICAgICAgIG5leHRMb2M6IG5leHRMb2NcbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgLy8gRGVsaWJlcmF0ZWx5IGZvcmdldCB0aGUgbGFzdCBzZW50IHZhbHVlIHNvIHRoYXQgd2UgZG9uJ3RcbiAgICAgICAgLy8gYWNjaWRlbnRhbGx5IHBhc3MgaXQgb24gdG8gdGhlIGRlbGVnYXRlLlxuICAgICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuICB9O1xufSkoXG4gIC8vIEFtb25nIHRoZSB2YXJpb3VzIHRyaWNrcyBmb3Igb2J0YWluaW5nIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWxcbiAgLy8gb2JqZWN0LCB0aGlzIHNlZW1zIHRvIGJlIHRoZSBtb3N0IHJlbGlhYmxlIHRlY2huaXF1ZSB0aGF0IGRvZXMgbm90XG4gIC8vIHVzZSBpbmRpcmVjdCBldmFsICh3aGljaCB2aW9sYXRlcyBDb250ZW50IFNlY3VyaXR5IFBvbGljeSkuXG4gIHR5cGVvZiBnbG9iYWwgPT09IFwib2JqZWN0XCIgPyBnbG9iYWwgOlxuICB0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiID8gd2luZG93IDpcbiAgdHlwZW9mIHNlbGYgPT09IFwib2JqZWN0XCIgPyBzZWxmIDogdGhpc1xuKTtcbiIsInZhciAkaXRlcmF0b3JzID0gcmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbnZhciBJVEVSQVRPUiA9IHdrcygnaXRlcmF0b3InKTtcbnZhciBUT19TVFJJTkdfVEFHID0gd2tzKCd0b1N0cmluZ1RhZycpO1xudmFyIEFycmF5VmFsdWVzID0gSXRlcmF0b3JzLkFycmF5O1xuXG52YXIgRE9NSXRlcmFibGVzID0ge1xuICBDU1NSdWxlTGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIENTU1N0eWxlRGVjbGFyYXRpb246IGZhbHNlLFxuICBDU1NWYWx1ZUxpc3Q6IGZhbHNlLFxuICBDbGllbnRSZWN0TGlzdDogZmFsc2UsXG4gIERPTVJlY3RMaXN0OiBmYWxzZSxcbiAgRE9NU3RyaW5nTGlzdDogZmFsc2UsXG4gIERPTVRva2VuTGlzdDogdHJ1ZSxcbiAgRGF0YVRyYW5zZmVySXRlbUxpc3Q6IGZhbHNlLFxuICBGaWxlTGlzdDogZmFsc2UsXG4gIEhUTUxBbGxDb2xsZWN0aW9uOiBmYWxzZSxcbiAgSFRNTENvbGxlY3Rpb246IGZhbHNlLFxuICBIVE1MRm9ybUVsZW1lbnQ6IGZhbHNlLFxuICBIVE1MU2VsZWN0RWxlbWVudDogZmFsc2UsXG4gIE1lZGlhTGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIE1pbWVUeXBlQXJyYXk6IGZhbHNlLFxuICBOYW1lZE5vZGVNYXA6IGZhbHNlLFxuICBOb2RlTGlzdDogdHJ1ZSxcbiAgUGFpbnRSZXF1ZXN0TGlzdDogZmFsc2UsXG4gIFBsdWdpbjogZmFsc2UsXG4gIFBsdWdpbkFycmF5OiBmYWxzZSxcbiAgU1ZHTGVuZ3RoTGlzdDogZmFsc2UsXG4gIFNWR051bWJlckxpc3Q6IGZhbHNlLFxuICBTVkdQYXRoU2VnTGlzdDogZmFsc2UsXG4gIFNWR1BvaW50TGlzdDogZmFsc2UsXG4gIFNWR1N0cmluZ0xpc3Q6IGZhbHNlLFxuICBTVkdUcmFuc2Zvcm1MaXN0OiBmYWxzZSxcbiAgU291cmNlQnVmZmVyTGlzdDogZmFsc2UsXG4gIFN0eWxlU2hlZXRMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgVGV4dFRyYWNrQ3VlTGlzdDogZmFsc2UsXG4gIFRleHRUcmFja0xpc3Q6IGZhbHNlLFxuICBUb3VjaExpc3Q6IGZhbHNlXG59O1xuXG5mb3IgKHZhciBjb2xsZWN0aW9ucyA9IGdldEtleXMoRE9NSXRlcmFibGVzKSwgaSA9IDA7IGkgPCBjb2xsZWN0aW9ucy5sZW5ndGg7IGkrKykge1xuICB2YXIgTkFNRSA9IGNvbGxlY3Rpb25zW2ldO1xuICB2YXIgZXhwbGljaXQgPSBET01JdGVyYWJsZXNbTkFNRV07XG4gIHZhciBDb2xsZWN0aW9uID0gZ2xvYmFsW05BTUVdO1xuICB2YXIgcHJvdG8gPSBDb2xsZWN0aW9uICYmIENvbGxlY3Rpb24ucHJvdG90eXBlO1xuICB2YXIga2V5O1xuICBpZiAocHJvdG8pIHtcbiAgICBpZiAoIXByb3RvW0lURVJBVE9SXSkgaGlkZShwcm90bywgSVRFUkFUT1IsIEFycmF5VmFsdWVzKTtcbiAgICBpZiAoIXByb3RvW1RPX1NUUklOR19UQUddKSBoaWRlKHByb3RvLCBUT19TVFJJTkdfVEFHLCBOQU1FKTtcbiAgICBJdGVyYXRvcnNbTkFNRV0gPSBBcnJheVZhbHVlcztcbiAgICBpZiAoZXhwbGljaXQpIGZvciAoa2V5IGluICRpdGVyYXRvcnMpIGlmICghcHJvdG9ba2V5XSkgcmVkZWZpbmUocHJvdG8sIGtleSwgJGl0ZXJhdG9yc1trZXldLCB0cnVlKTtcbiAgfVxufVxuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5CLCB7XG4gIHNldEltbWVkaWF0ZTogJHRhc2suc2V0LFxuICBjbGVhckltbWVkaWF0ZTogJHRhc2suY2xlYXJcbn0pO1xuIiwiLy8gaWU5LSBzZXRUaW1lb3V0ICYgc2V0SW50ZXJ2YWwgYWRkaXRpb25hbCBwYXJhbWV0ZXJzIGZpeFxudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuL191c2VyLWFnZW50Jyk7XG52YXIgc2xpY2UgPSBbXS5zbGljZTtcbnZhciBNU0lFID0gL01TSUUgLlxcLi8udGVzdCh1c2VyQWdlbnQpOyAvLyA8LSBkaXJ0eSBpZTktIGNoZWNrXG52YXIgd3JhcCA9IGZ1bmN0aW9uIChzZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChmbiwgdGltZSAvKiAsIC4uLmFyZ3MgKi8pIHtcbiAgICB2YXIgYm91bmRBcmdzID0gYXJndW1lbnRzLmxlbmd0aCA+IDI7XG4gICAgdmFyIGFyZ3MgPSBib3VuZEFyZ3MgPyBzbGljZS5jYWxsKGFyZ3VtZW50cywgMikgOiBmYWxzZTtcbiAgICByZXR1cm4gc2V0KGJvdW5kQXJncyA/IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgICAgKHR5cGVvZiBmbiA9PSAnZnVuY3Rpb24nID8gZm4gOiBGdW5jdGlvbihmbikpLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH0gOiBmbiwgdGltZSk7XG4gIH07XG59O1xuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkIgKyAkZXhwb3J0LkYgKiBNU0lFLCB7XG4gIHNldFRpbWVvdXQ6IHdyYXAoZ2xvYmFsLnNldFRpbWVvdXQpLFxuICBzZXRJbnRlcnZhbDogd3JhcChnbG9iYWwuc2V0SW50ZXJ2YWwpXG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96ZW5wYXJzaW5nL2VzLW9ic2VydmFibGVcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBtaWNyb3Rhc2sgPSByZXF1aXJlKCcuL19taWNyb3Rhc2snKSgpO1xudmFyIE9CU0VSVkFCTEUgPSByZXF1aXJlKCcuL193a3MnKSgnb2JzZXJ2YWJsZScpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIFJFVFVSTiA9IGZvck9mLlJFVFVSTjtcblxudmFyIGdldE1ldGhvZCA9IGZ1bmN0aW9uIChmbikge1xuICByZXR1cm4gZm4gPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGFGdW5jdGlvbihmbik7XG59O1xuXG52YXIgY2xlYW51cFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgdmFyIGNsZWFudXAgPSBzdWJzY3JpcHRpb24uX2M7XG4gIGlmIChjbGVhbnVwKSB7XG4gICAgc3Vic2NyaXB0aW9uLl9jID0gdW5kZWZpbmVkO1xuICAgIGNsZWFudXAoKTtcbiAgfVxufTtcblxudmFyIHN1YnNjcmlwdGlvbkNsb3NlZCA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgcmV0dXJuIHN1YnNjcmlwdGlvbi5fbyA9PT0gdW5kZWZpbmVkO1xufTtcblxudmFyIGNsb3NlU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICBpZiAoIXN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKSB7XG4gICAgc3Vic2NyaXB0aW9uLl9vID0gdW5kZWZpbmVkO1xuICAgIGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgfVxufTtcblxudmFyIFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIChvYnNlcnZlciwgc3Vic2NyaWJlcikge1xuICBhbk9iamVjdChvYnNlcnZlcik7XG4gIHRoaXMuX2MgPSB1bmRlZmluZWQ7XG4gIHRoaXMuX28gPSBvYnNlcnZlcjtcbiAgb2JzZXJ2ZXIgPSBuZXcgU3Vic2NyaXB0aW9uT2JzZXJ2ZXIodGhpcyk7XG4gIHRyeSB7XG4gICAgdmFyIGNsZWFudXAgPSBzdWJzY3JpYmVyKG9ic2VydmVyKTtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gY2xlYW51cDtcbiAgICBpZiAoY2xlYW51cCAhPSBudWxsKSB7XG4gICAgICBpZiAodHlwZW9mIGNsZWFudXAudW5zdWJzY3JpYmUgPT09ICdmdW5jdGlvbicpIGNsZWFudXAgPSBmdW5jdGlvbiAoKSB7IHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpOyB9O1xuICAgICAgZWxzZSBhRnVuY3Rpb24oY2xlYW51cCk7XG4gICAgICB0aGlzLl9jID0gY2xlYW51cDtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBvYnNlcnZlci5lcnJvcihlKTtcbiAgICByZXR1cm47XG4gIH0gaWYgKHN1YnNjcmlwdGlvbkNsb3NlZCh0aGlzKSkgY2xlYW51cFN1YnNjcmlwdGlvbih0aGlzKTtcbn07XG5cblN1YnNjcmlwdGlvbi5wcm90b3R5cGUgPSByZWRlZmluZUFsbCh7fSwge1xuICB1bnN1YnNjcmliZTogZnVuY3Rpb24gdW5zdWJzY3JpYmUoKSB7IGNsb3NlU3Vic2NyaXB0aW9uKHRoaXMpOyB9XG59KTtcblxudmFyIFN1YnNjcmlwdGlvbk9ic2VydmVyID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICB0aGlzLl9zID0gc3Vic2NyaXB0aW9uO1xufTtcblxuU3Vic2NyaXB0aW9uT2JzZXJ2ZXIucHJvdG90eXBlID0gcmVkZWZpbmVBbGwoe30sIHtcbiAgbmV4dDogZnVuY3Rpb24gbmV4dCh2YWx1ZSkge1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGlzLl9zO1xuICAgIGlmICghc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvbikpIHtcbiAgICAgIHZhciBvYnNlcnZlciA9IHN1YnNjcmlwdGlvbi5fbztcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBtID0gZ2V0TWV0aG9kKG9ic2VydmVyLm5leHQpO1xuICAgICAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvYnNlcnZlciwgdmFsdWUpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNsb3NlU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgZXJyb3I6IGZ1bmN0aW9uIGVycm9yKHZhbHVlKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuX3M7XG4gICAgaWYgKHN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKSB0aHJvdyB2YWx1ZTtcbiAgICB2YXIgb2JzZXJ2ZXIgPSBzdWJzY3JpcHRpb24uX287XG4gICAgc3Vic2NyaXB0aW9uLl9vID0gdW5kZWZpbmVkO1xuICAgIHRyeSB7XG4gICAgICB2YXIgbSA9IGdldE1ldGhvZChvYnNlcnZlci5lcnJvcik7XG4gICAgICBpZiAoIW0pIHRocm93IHZhbHVlO1xuICAgICAgdmFsdWUgPSBtLmNhbGwob2JzZXJ2ZXIsIHZhbHVlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH0gY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfSxcbiAgY29tcGxldGU6IGZ1bmN0aW9uIGNvbXBsZXRlKHZhbHVlKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuX3M7XG4gICAgaWYgKCFzdWJzY3JpcHRpb25DbG9zZWQoc3Vic2NyaXB0aW9uKSkge1xuICAgICAgdmFyIG9ic2VydmVyID0gc3Vic2NyaXB0aW9uLl9vO1xuICAgICAgc3Vic2NyaXB0aW9uLl9vID0gdW5kZWZpbmVkO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIG0gPSBnZXRNZXRob2Qob2JzZXJ2ZXIuY29tcGxldGUpO1xuICAgICAgICB2YWx1ZSA9IG0gPyBtLmNhbGwob2JzZXJ2ZXIsIHZhbHVlKSA6IHVuZGVmaW5lZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfSBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICB9XG59KTtcblxudmFyICRPYnNlcnZhYmxlID0gZnVuY3Rpb24gT2JzZXJ2YWJsZShzdWJzY3JpYmVyKSB7XG4gIGFuSW5zdGFuY2UodGhpcywgJE9ic2VydmFibGUsICdPYnNlcnZhYmxlJywgJ19mJykuX2YgPSBhRnVuY3Rpb24oc3Vic2NyaWJlcik7XG59O1xuXG5yZWRlZmluZUFsbCgkT2JzZXJ2YWJsZS5wcm90b3R5cGUsIHtcbiAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUob2JzZXJ2ZXIpIHtcbiAgICByZXR1cm4gbmV3IFN1YnNjcmlwdGlvbihvYnNlcnZlciwgdGhpcy5fZik7XG4gIH0sXG4gIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcbiAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgcmV0dXJuIG5ldyAoY29yZS5Qcm9taXNlIHx8IGdsb2JhbC5Qcm9taXNlKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBhRnVuY3Rpb24oZm4pO1xuICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoYXQuc3Vic2NyaWJlKHtcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBmbih2YWx1ZSk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBlcnJvcjogcmVqZWN0LFxuICAgICAgICBjb21wbGV0ZTogcmVzb2x2ZVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn0pO1xuXG5yZWRlZmluZUFsbCgkT2JzZXJ2YWJsZSwge1xuICBmcm9tOiBmdW5jdGlvbiBmcm9tKHgpIHtcbiAgICB2YXIgQyA9IHR5cGVvZiB0aGlzID09PSAnZnVuY3Rpb24nID8gdGhpcyA6ICRPYnNlcnZhYmxlO1xuICAgIHZhciBtZXRob2QgPSBnZXRNZXRob2QoYW5PYmplY3QoeClbT0JTRVJWQUJMRV0pO1xuICAgIGlmIChtZXRob2QpIHtcbiAgICAgIHZhciBvYnNlcnZhYmxlID0gYW5PYmplY3QobWV0aG9kLmNhbGwoeCkpO1xuICAgICAgcmV0dXJuIG9ic2VydmFibGUuY29uc3RydWN0b3IgPT09IEMgPyBvYnNlcnZhYmxlIDogbmV3IEMoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlLnN1YnNjcmliZShvYnNlcnZlcik7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBDKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgdmFyIGRvbmUgPSBmYWxzZTtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghZG9uZSkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoZm9yT2YoeCwgZmFsc2UsIGZ1bmN0aW9uIChpdCkge1xuICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KGl0KTtcbiAgICAgICAgICAgICAgaWYgKGRvbmUpIHJldHVybiBSRVRVUk47XG4gICAgICAgICAgICB9KSA9PT0gUkVUVVJOKSByZXR1cm47XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgaWYgKGRvbmUpIHRocm93IGU7XG4gICAgICAgICAgICBvYnNlcnZlci5lcnJvcihlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9IG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgZG9uZSA9IHRydWU7IH07XG4gICAgfSk7XG4gIH0sXG4gIG9mOiBmdW5jdGlvbiBvZigpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGgsIGl0ZW1zID0gbmV3IEFycmF5KGwpOyBpIDwgbDspIGl0ZW1zW2ldID0gYXJndW1lbnRzW2krK107XG4gICAgcmV0dXJuIG5ldyAodHlwZW9mIHRoaXMgPT09ICdmdW5jdGlvbicgPyB0aGlzIDogJE9ic2VydmFibGUpKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgdmFyIGRvbmUgPSBmYWxzZTtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghZG9uZSkge1xuICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgaXRlbXMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgIG9ic2VydmVyLm5leHQoaXRlbXNbal0pO1xuICAgICAgICAgICAgaWYgKGRvbmUpIHJldHVybjtcbiAgICAgICAgICB9IG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgZG9uZSA9IHRydWU7IH07XG4gICAgfSk7XG4gIH1cbn0pO1xuXG5oaWRlKCRPYnNlcnZhYmxlLnByb3RvdHlwZSwgT0JTRVJWQUJMRSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSk7XG5cbiRleHBvcnQoJGV4cG9ydC5HLCB7IE9ic2VydmFibGU6ICRPYnNlcnZhYmxlIH0pO1xuXG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKCdPYnNlcnZhYmxlJyk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vcndhbGRyb24vdGMzOS1ub3Rlcy9ibG9iL21hc3Rlci9lczYvMjAxNC0wOS9zZXB0LTI1Lm1kIzUxMC1nbG9iYWxhc2FwLWZvci1lbnF1ZXVpbmctYS1taWNyb3Rhc2tcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgbWljcm90YXNrID0gcmVxdWlyZSgnLi9fbWljcm90YXNrJykoKTtcbnZhciBwcm9jZXNzID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykucHJvY2VzcztcbnZhciBpc05vZGUgPSByZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG5cbiRleHBvcnQoJGV4cG9ydC5HLCB7XG4gIGFzYXA6IGZ1bmN0aW9uIGFzYXAoZm4pIHtcbiAgICB2YXIgZG9tYWluID0gaXNOb2RlICYmIHByb2Nlc3MuZG9tYWluO1xuICAgIG1pY3JvdGFzayhkb21haW4gPyBkb21haW4uYmluZChmbikgOiBmbik7XG4gIH1cbn0pO1xuIiwidmFyICRtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgdG9NZXRhS2V5ID0gJG1ldGFkYXRhLmtleTtcbnZhciBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhID0gJG1ldGFkYXRhLnNldDtcblxuJG1ldGFkYXRhLmV4cCh7IG1ldGFkYXRhOiBmdW5jdGlvbiBtZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24gZGVjb3JhdG9yKHRhcmdldCwgdGFyZ2V0S2V5KSB7XG4gICAgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YShcbiAgICAgIG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlLFxuICAgICAgKHRhcmdldEtleSAhPT0gdW5kZWZpbmVkID8gYW5PYmplY3QgOiBhRnVuY3Rpb24pKHRhcmdldCksXG4gICAgICB0b01ldGFLZXkodGFyZ2V0S2V5KVxuICAgICk7XG4gIH07XG59IH0pO1xuIiwidmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5oYXM7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xuXG5tZXRhZGF0YS5leHAoeyBoYXNPd25NZXRhZGF0YTogZnVuY3Rpb24gaGFzT3duTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xuICByZXR1cm4gb3JkaW5hcnlIYXNPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgYW5PYmplY3QodGFyZ2V0KVxuICAgICwgYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKSk7XG59IH0pO1xuIiwidmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5oYXM7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xuXG52YXIgb3JkaW5hcnlIYXNNZXRhZGF0YSA9IGZ1bmN0aW9uIChNZXRhZGF0YUtleSwgTywgUCkge1xuICB2YXIgaGFzT3duID0gb3JkaW5hcnlIYXNPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCk7XG4gIGlmIChoYXNPd24pIHJldHVybiB0cnVlO1xuICB2YXIgcGFyZW50ID0gZ2V0UHJvdG90eXBlT2YoTyk7XG4gIHJldHVybiBwYXJlbnQgIT09IG51bGwgPyBvcmRpbmFyeUhhc01ldGFkYXRhKE1ldGFkYXRhS2V5LCBwYXJlbnQsIFApIDogZmFsc2U7XG59O1xuXG5tZXRhZGF0YS5leHAoeyBoYXNNZXRhZGF0YTogZnVuY3Rpb24gaGFzTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xuICByZXR1cm4gb3JkaW5hcnlIYXNNZXRhZGF0YShtZXRhZGF0YUtleSwgYW5PYmplY3QodGFyZ2V0KSwgYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKSk7XG59IH0pO1xuIiwidmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzID0gbWV0YWRhdGEua2V5cztcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG5cbm1ldGFkYXRhLmV4cCh7IGdldE93bk1ldGFkYXRhS2V5czogZnVuY3Rpb24gZ2V0T3duTWV0YWRhdGFLZXlzKHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xuICByZXR1cm4gb3JkaW5hcnlPd25NZXRhZGF0YUtleXMoYW5PYmplY3QodGFyZ2V0KSwgYXJndW1lbnRzLmxlbmd0aCA8IDIgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzFdKSk7XG59IH0pO1xuIiwidmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEgPSBtZXRhZGF0YS5nZXQ7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xuXG5tZXRhZGF0YS5leHAoeyBnZXRPd25NZXRhZGF0YTogZnVuY3Rpb24gZ2V0T3duTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xuICByZXR1cm4gb3JkaW5hcnlHZXRPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgYW5PYmplY3QodGFyZ2V0KVxuICAgICwgYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKSk7XG59IH0pO1xuIiwidmFyIFNldCA9IHJlcXVpcmUoJy4vZXM2LnNldCcpO1xudmFyIGZyb20gPSByZXF1aXJlKCcuL19hcnJheS1mcm9tLWl0ZXJhYmxlJyk7XG52YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgb3JkaW5hcnlPd25NZXRhZGF0YUtleXMgPSBtZXRhZGF0YS5rZXlzO1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcblxudmFyIG9yZGluYXJ5TWV0YWRhdGFLZXlzID0gZnVuY3Rpb24gKE8sIFApIHtcbiAgdmFyIG9LZXlzID0gb3JkaW5hcnlPd25NZXRhZGF0YUtleXMoTywgUCk7XG4gIHZhciBwYXJlbnQgPSBnZXRQcm90b3R5cGVPZihPKTtcbiAgaWYgKHBhcmVudCA9PT0gbnVsbCkgcmV0dXJuIG9LZXlzO1xuICB2YXIgcEtleXMgPSBvcmRpbmFyeU1ldGFkYXRhS2V5cyhwYXJlbnQsIFApO1xuICByZXR1cm4gcEtleXMubGVuZ3RoID8gb0tleXMubGVuZ3RoID8gZnJvbShuZXcgU2V0KG9LZXlzLmNvbmNhdChwS2V5cykpKSA6IHBLZXlzIDogb0tleXM7XG59O1xuXG5tZXRhZGF0YS5leHAoeyBnZXRNZXRhZGF0YUtleXM6IGZ1bmN0aW9uIGdldE1ldGFkYXRhS2V5cyh0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgcmV0dXJuIG9yZGluYXJ5TWV0YWRhdGFLZXlzKGFuT2JqZWN0KHRhcmdldCksIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1sxXSkpO1xufSB9KTtcbiIsInZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBvcmRpbmFyeUhhc093bk1ldGFkYXRhID0gbWV0YWRhdGEuaGFzO1xudmFyIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEgPSBtZXRhZGF0YS5nZXQ7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xuXG52YXIgb3JkaW5hcnlHZXRNZXRhZGF0YSA9IGZ1bmN0aW9uIChNZXRhZGF0YUtleSwgTywgUCkge1xuICB2YXIgaGFzT3duID0gb3JkaW5hcnlIYXNPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCk7XG4gIGlmIChoYXNPd24pIHJldHVybiBvcmRpbmFyeUdldE93bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTtcbiAgdmFyIHBhcmVudCA9IGdldFByb3RvdHlwZU9mKE8pO1xuICByZXR1cm4gcGFyZW50ICE9PSBudWxsID8gb3JkaW5hcnlHZXRNZXRhZGF0YShNZXRhZGF0YUtleSwgcGFyZW50LCBQKSA6IHVuZGVmaW5lZDtcbn07XG5cbm1ldGFkYXRhLmV4cCh7IGdldE1ldGFkYXRhOiBmdW5jdGlvbiBnZXRNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeUdldE1ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTtcbn0gfSk7XG4iLCJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xudmFyIGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAgPSBtZXRhZGF0YS5tYXA7XG52YXIgc3RvcmUgPSBtZXRhZGF0YS5zdG9yZTtcblxubWV0YWRhdGEuZXhwKHsgZGVsZXRlTWV0YWRhdGE6IGZ1bmN0aW9uIGRlbGV0ZU1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgdmFyIHRhcmdldEtleSA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSk7XG4gIHZhciBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoYW5PYmplY3QodGFyZ2V0KSwgdGFyZ2V0S2V5LCBmYWxzZSk7XG4gIGlmIChtZXRhZGF0YU1hcCA9PT0gdW5kZWZpbmVkIHx8ICFtZXRhZGF0YU1hcFsnZGVsZXRlJ10obWV0YWRhdGFLZXkpKSByZXR1cm4gZmFsc2U7XG4gIGlmIChtZXRhZGF0YU1hcC5zaXplKSByZXR1cm4gdHJ1ZTtcbiAgdmFyIHRhcmdldE1ldGFkYXRhID0gc3RvcmUuZ2V0KHRhcmdldCk7XG4gIHRhcmdldE1ldGFkYXRhWydkZWxldGUnXSh0YXJnZXRLZXkpO1xuICByZXR1cm4gISF0YXJnZXRNZXRhZGF0YS5zaXplIHx8IHN0b3JlWydkZWxldGUnXSh0YXJnZXQpO1xufSB9KTtcbiIsInZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG52YXIgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSA9IG1ldGFkYXRhLnNldDtcblxubWV0YWRhdGEuZXhwKHsgZGVmaW5lTWV0YWRhdGE6IGZ1bmN0aW9uIGRlZmluZU1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlLCB0YXJnZXQsIHRhcmdldEtleSkge1xuICBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlLCBhbk9iamVjdCh0YXJnZXQpLCB0b01ldGFLZXkodGFyZ2V0S2V5KSk7XG59IH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtcHJvbWlzZS10cnlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSByZXF1aXJlKCcuL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG52YXIgcGVyZm9ybSA9IHJlcXVpcmUoJy4vX3BlcmZvcm0nKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdQcm9taXNlJywgeyAndHJ5JzogZnVuY3Rpb24gKGNhbGxiYWNrZm4pIHtcbiAgdmFyIHByb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkuZih0aGlzKTtcbiAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oY2FsbGJhY2tmbik7XG4gIChyZXN1bHQuZSA/IHByb21pc2VDYXBhYmlsaXR5LnJlamVjdCA6IHByb21pc2VDYXBhYmlsaXR5LnJlc29sdmUpKHJlc3VsdC52KTtcbiAgcmV0dXJuIHByb21pc2VDYXBhYmlsaXR5LnByb21pc2U7XG59IH0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtcHJvbWlzZS1maW5hbGx5XG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi9fcHJvbWlzZS1yZXNvbHZlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5SLCAnUHJvbWlzZScsIHsgJ2ZpbmFsbHknOiBmdW5jdGlvbiAob25GaW5hbGx5KSB7XG4gIHZhciBDID0gc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsIGNvcmUuUHJvbWlzZSB8fCBnbG9iYWwuUHJvbWlzZSk7XG4gIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIG9uRmluYWxseSA9PSAnZnVuY3Rpb24nO1xuICByZXR1cm4gdGhpcy50aGVuKFxuICAgIGlzRnVuY3Rpb24gPyBmdW5jdGlvbiAoeCkge1xuICAgICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKEMsIG9uRmluYWxseSgpKS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHg7IH0pO1xuICAgIH0gOiBvbkZpbmFsbHksXG4gICAgaXNGdW5jdGlvbiA/IGZ1bmN0aW9uIChlKSB7XG4gICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoQywgb25GaW5hbGx5KCkpLnRoZW4oZnVuY3Rpb24gKCkgeyB0aHJvdyBlOyB9KTtcbiAgICB9IDogb25GaW5hbGx5XG4gICk7XG59IH0pO1xuIiwiLy8gaHR0cDovL2pmYmFzdGllbi5naXRodWIuaW8vcGFwZXJzL01hdGguc2lnbmJpdC5odG1sXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IHNpZ25iaXQ6IGZ1bmN0aW9uIHNpZ25iaXQoeCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIHJldHVybiAoeCA9ICt4KSAhPSB4ID8geCA6IHggPT0gMCA/IDEgLyB4ID09IEluZmluaXR5IDogeCA+IDA7XG59IH0pO1xuIiwiLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vQnJlbmRhbkVpY2gvNDI5NGQ1YzIxMmE2ZDIyNTQ3MDNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgdW11bGg6IGZ1bmN0aW9uIHVtdWxoKHUsIHYpIHtcbiAgICB2YXIgVUlOVDE2ID0gMHhmZmZmO1xuICAgIHZhciAkdSA9ICt1O1xuICAgIHZhciAkdiA9ICt2O1xuICAgIHZhciB1MCA9ICR1ICYgVUlOVDE2O1xuICAgIHZhciB2MCA9ICR2ICYgVUlOVDE2O1xuICAgIHZhciB1MSA9ICR1ID4+PiAxNjtcbiAgICB2YXIgdjEgPSAkdiA+Pj4gMTY7XG4gICAgdmFyIHQgPSAodTEgKiB2MCA+Pj4gMCkgKyAodTAgKiB2MCA+Pj4gMTYpO1xuICAgIHJldHVybiB1MSAqIHYxICsgKHQgPj4+IDE2KSArICgodTAgKiB2MSA+Pj4gMCkgKyAodCAmIFVJTlQxNikgPj4+IDE2KTtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IHNjYWxlOiByZXF1aXJlKCcuL19tYXRoLXNjYWxlJykgfSk7XG4iLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIERFR19QRVJfUkFEID0gTWF0aC5QSSAvIDE4MDtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICByYWRpYW5zOiBmdW5jdGlvbiByYWRpYW5zKGRlZ3JlZXMpIHtcbiAgICByZXR1cm4gZGVncmVlcyAqIERFR19QRVJfUkFEO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgUkFEX1BFUl9ERUc6IDE4MCAvIE1hdGguUEkgfSk7XG4iLCIvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBpbXVsaDogZnVuY3Rpb24gaW11bGgodSwgdikge1xuICAgIHZhciBVSU5UMTYgPSAweGZmZmY7XG4gICAgdmFyICR1ID0gK3U7XG4gICAgdmFyICR2ID0gK3Y7XG4gICAgdmFyIHUwID0gJHUgJiBVSU5UMTY7XG4gICAgdmFyIHYwID0gJHYgJiBVSU5UMTY7XG4gICAgdmFyIHUxID0gJHUgPj4gMTY7XG4gICAgdmFyIHYxID0gJHYgPj4gMTY7XG4gICAgdmFyIHQgPSAodTEgKiB2MCA+Pj4gMCkgKyAodTAgKiB2MCA+Pj4gMTYpO1xuICAgIHJldHVybiB1MSAqIHYxICsgKHQgPj4gMTYpICsgKCh1MCAqIHYxID4+PiAwKSArICh0ICYgVUlOVDE2KSA+PiAxNik7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vQnJlbmRhbkVpY2gvNDI5NGQ1YzIxMmE2ZDIyNTQ3MDNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgaXN1Ymg6IGZ1bmN0aW9uIGlzdWJoKHgwLCB4MSwgeTAsIHkxKSB7XG4gICAgdmFyICR4MCA9IHgwID4+PiAwO1xuICAgIHZhciAkeDEgPSB4MSA+Pj4gMDtcbiAgICB2YXIgJHkwID0geTAgPj4+IDA7XG4gICAgcmV0dXJuICR4MSAtICh5MSA+Pj4gMCkgLSAoKH4keDAgJiAkeTAgfCB+KCR4MCBeICR5MCkgJiAkeDAgLSAkeTAgPj4+IDApID4+PiAzMSkgfCAwO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGlhZGRoOiBmdW5jdGlvbiBpYWRkaCh4MCwgeDEsIHkwLCB5MSkge1xuICAgIHZhciAkeDAgPSB4MCA+Pj4gMDtcbiAgICB2YXIgJHgxID0geDEgPj4+IDA7XG4gICAgdmFyICR5MCA9IHkwID4+PiAwO1xuICAgIHJldHVybiAkeDEgKyAoeTEgPj4+IDApICsgKCgkeDAgJiAkeTAgfCAoJHgwIHwgJHkwKSAmIH4oJHgwICsgJHkwID4+PiAwKSkgPj4+IDMxKSB8IDA7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBzY2FsZSA9IHJlcXVpcmUoJy4vX21hdGgtc2NhbGUnKTtcbnZhciBmcm91bmQgPSByZXF1aXJlKCcuL19tYXRoLWZyb3VuZCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGZzY2FsZTogZnVuY3Rpb24gZnNjYWxlKHgsIGluTG93LCBpbkhpZ2gsIG91dExvdywgb3V0SGlnaCkge1xuICAgIHJldHVybiBmcm91bmQoc2NhbGUoeCwgaW5Mb3csIGluSGlnaCwgb3V0TG93LCBvdXRIaWdoKSk7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBSQURfUEVSX0RFRyA9IDE4MCAvIE1hdGguUEk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgZGVncmVlczogZnVuY3Rpb24gZGVncmVlcyhyYWRpYW5zKSB7XG4gICAgcmV0dXJuIHJhZGlhbnMgKiBSQURfUEVSX0RFRztcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IERFR19QRVJfUkFEOiBNYXRoLlBJIC8gMTgwIH0pO1xuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjbGFtcDogZnVuY3Rpb24gY2xhbXAoeCwgbG93ZXIsIHVwcGVyKSB7XG4gICAgcmV0dXJuIE1hdGgubWluKHVwcGVyLCBNYXRoLm1heChsb3dlciwgeCkpO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9samhhcmIvcHJvcG9zYWwtaXMtZXJyb3JcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnRXJyb3InLCB7XG4gIGlzRXJyb3I6IGZ1bmN0aW9uIGlzRXJyb3IoaXQpIHtcbiAgICByZXR1cm4gY29mKGl0KSA9PT0gJ0Vycm9yJztcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1nbG9iYWxcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnU3lzdGVtJywgeyBnbG9iYWw6IHJlcXVpcmUoJy4vX2dsb2JhbCcpIH0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtZ2xvYmFsXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuRywgeyBnbG9iYWw6IHJlcXVpcmUoJy4vX2dsb2JhbCcpIH0pO1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtd2Vha3NldC5mcm9tXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1mcm9tJykoJ1dlYWtTZXQnKTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXdlYWttYXAuZnJvbVxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tZnJvbScpKCdXZWFrTWFwJyk7XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy1zZXQuZnJvbVxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tZnJvbScpKCdTZXQnKTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLW1hcC5mcm9tXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1mcm9tJykoJ01hcCcpO1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtd2Vha3NldC5vZlxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tb2YnKSgnV2Vha1NldCcpO1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtd2Vha21hcC5vZlxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tb2YnKSgnV2Vha01hcCcpO1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtc2V0Lm9mXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1vZicpKCdTZXQnKTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLW1hcC5vZlxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tb2YnKSgnTWFwJyk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vRGF2aWRCcnVhbnQvTWFwLVNldC5wcm90b3R5cGUudG9KU09OXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuUiwgJ1NldCcsIHsgdG9KU09OOiByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXRvLWpzb24nKSgnU2V0JykgfSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vRGF2aWRCcnVhbnQvTWFwLVNldC5wcm90b3R5cGUudG9KU09OXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuUiwgJ01hcCcsIHsgdG9KU09OOiByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXRvLWpzb24nKSgnTWFwJykgfSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG5cbi8vIEIuMi4yLjUgT2JqZWN0LnByb3RvdHlwZS5fX2xvb2t1cFNldHRlcl9fKFApXG5yZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICRleHBvcnQoJGV4cG9ydC5QICsgcmVxdWlyZSgnLi9fb2JqZWN0LWZvcmNlZC1wYW0nKSwgJ09iamVjdCcsIHtcbiAgX19sb29rdXBTZXR0ZXJfXzogZnVuY3Rpb24gX19sb29rdXBTZXR0ZXJfXyhQKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgSyA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICAgIHZhciBEO1xuICAgIGRvIHtcbiAgICAgIGlmIChEID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIEspKSByZXR1cm4gRC5zZXQ7XG4gICAgfSB3aGlsZSAoTyA9IGdldFByb3RvdHlwZU9mKE8pKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG5cbi8vIEIuMi4yLjQgT2JqZWN0LnByb3RvdHlwZS5fX2xvb2t1cEdldHRlcl9fKFApXG5yZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICRleHBvcnQoJGV4cG9ydC5QICsgcmVxdWlyZSgnLi9fb2JqZWN0LWZvcmNlZC1wYW0nKSwgJ09iamVjdCcsIHtcbiAgX19sb29rdXBHZXR0ZXJfXzogZnVuY3Rpb24gX19sb29rdXBHZXR0ZXJfXyhQKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgSyA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICAgIHZhciBEO1xuICAgIGRvIHtcbiAgICAgIGlmIChEID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIEspKSByZXR1cm4gRC5nZXQ7XG4gICAgfSB3aGlsZSAoTyA9IGdldFByb3RvdHlwZU9mKE8pKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xuXG4vLyBCLjIuMi4zIE9iamVjdC5wcm90b3R5cGUuX19kZWZpbmVTZXR0ZXJfXyhQLCBzZXR0ZXIpXG5yZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICRleHBvcnQoJGV4cG9ydC5QICsgcmVxdWlyZSgnLi9fb2JqZWN0LWZvcmNlZC1wYW0nKSwgJ09iamVjdCcsIHtcbiAgX19kZWZpbmVTZXR0ZXJfXzogZnVuY3Rpb24gX19kZWZpbmVTZXR0ZXJfXyhQLCBzZXR0ZXIpIHtcbiAgICAkZGVmaW5lUHJvcGVydHkuZih0b09iamVjdCh0aGlzKSwgUCwgeyBzZXQ6IGFGdW5jdGlvbihzZXR0ZXIpLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciAkZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcblxuLy8gQi4yLjIuMiBPYmplY3QucHJvdG90eXBlLl9fZGVmaW5lR2V0dGVyX18oUCwgZ2V0dGVyKVxucmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIHJlcXVpcmUoJy4vX29iamVjdC1mb3JjZWQtcGFtJyksICdPYmplY3QnLCB7XG4gIF9fZGVmaW5lR2V0dGVyX186IGZ1bmN0aW9uIF9fZGVmaW5lR2V0dGVyX18oUCwgZ2V0dGVyKSB7XG4gICAgJGRlZmluZVByb3BlcnR5LmYodG9PYmplY3QodGhpcyksIFAsIHsgZ2V0OiBhRnVuY3Rpb24oZ2V0dGVyKSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC12YWx1ZXMtZW50cmllc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZW50cmllcyA9IHJlcXVpcmUoJy4vX29iamVjdC10by1hcnJheScpKHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtcbiAgZW50cmllczogZnVuY3Rpb24gZW50cmllcyhpdCkge1xuICAgIHJldHVybiAkZW50cmllcyhpdCk7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LXZhbHVlcy1lbnRyaWVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICR2YWx1ZXMgPSByZXF1aXJlKCcuL19vYmplY3QtdG8tYXJyYXknKShmYWxzZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge1xuICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcyhpdCkge1xuICAgIHJldHVybiAkdmFsdWVzKGl0KTtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBvd25LZXlzID0gcmVxdWlyZSgnLi9fb3duLWtleXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnM6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob2JqZWN0KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3Qob2JqZWN0KTtcbiAgICB2YXIgZ2V0RGVzYyA9IGdPUEQuZjtcbiAgICB2YXIga2V5cyA9IG93bktleXMoTyk7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIga2V5LCBkZXNjO1xuICAgIHdoaWxlIChrZXlzLmxlbmd0aCA+IGkpIHtcbiAgICAgIGRlc2MgPSBnZXREZXNjKE8sIGtleSA9IGtleXNbaSsrXSk7XG4gICAgICBpZiAoZGVzYyAhPT0gdW5kZWZpbmVkKSBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGtleSwgZGVzYyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwicmVxdWlyZSgnLi9fd2tzLWRlZmluZScpKCdvYnNlcnZhYmxlJyk7XG4iLCJyZXF1aXJlKCcuL193a3MtZGVmaW5lJykoJ2FzeW5jSXRlcmF0b3InKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vU3RyaW5nLnByb3RvdHlwZS5tYXRjaEFsbC9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJyk7XG52YXIgZ2V0RmxhZ3MgPSByZXF1aXJlKCcuL19mbGFncycpO1xudmFyIFJlZ0V4cFByb3RvID0gUmVnRXhwLnByb3RvdHlwZTtcblxudmFyICRSZWdFeHBTdHJpbmdJdGVyYXRvciA9IGZ1bmN0aW9uIChyZWdleHAsIHN0cmluZykge1xuICB0aGlzLl9yID0gcmVnZXhwO1xuICB0aGlzLl9zID0gc3RyaW5nO1xufTtcblxucmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKSgkUmVnRXhwU3RyaW5nSXRlcmF0b3IsICdSZWdFeHAgU3RyaW5nJywgZnVuY3Rpb24gbmV4dCgpIHtcbiAgdmFyIG1hdGNoID0gdGhpcy5fci5leGVjKHRoaXMuX3MpO1xuICByZXR1cm4geyB2YWx1ZTogbWF0Y2gsIGRvbmU6IG1hdGNoID09PSBudWxsIH07XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIG1hdGNoQWxsOiBmdW5jdGlvbiBtYXRjaEFsbChyZWdleHApIHtcbiAgICBkZWZpbmVkKHRoaXMpO1xuICAgIGlmICghaXNSZWdFeHAocmVnZXhwKSkgdGhyb3cgVHlwZUVycm9yKHJlZ2V4cCArICcgaXMgbm90IGEgcmVnZXhwIScpO1xuICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuICAgIHZhciBmbGFncyA9ICdmbGFncycgaW4gUmVnRXhwUHJvdG8gPyBTdHJpbmcocmVnZXhwLmZsYWdzKSA6IGdldEZsYWdzLmNhbGwocmVnZXhwKTtcbiAgICB2YXIgcnggPSBuZXcgUmVnRXhwKHJlZ2V4cC5zb3VyY2UsIH5mbGFncy5pbmRleE9mKCdnJykgPyBmbGFncyA6ICdnJyArIGZsYWdzKTtcbiAgICByeC5sYXN0SW5kZXggPSB0b0xlbmd0aChyZWdleHAubGFzdEluZGV4KTtcbiAgICByZXR1cm4gbmV3ICRSZWdFeHBTdHJpbmdJdGVyYXRvcihyeCwgUyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3NlYm1hcmtiYWdlL2VjbWFzY3JpcHQtc3RyaW5nLWxlZnQtcmlnaHQtdHJpbVxucmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKSgndHJpbVJpZ2h0JywgZnVuY3Rpb24gKCR0cmltKSB7XG4gIHJldHVybiBmdW5jdGlvbiB0cmltUmlnaHQoKSB7XG4gICAgcmV0dXJuICR0cmltKHRoaXMsIDIpO1xuICB9O1xufSwgJ3RyaW1FbmQnKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zZWJtYXJrYmFnZS9lY21hc2NyaXB0LXN0cmluZy1sZWZ0LXJpZ2h0LXRyaW1cbnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW1MZWZ0JywgZnVuY3Rpb24gKCR0cmltKSB7XG4gIHJldHVybiBmdW5jdGlvbiB0cmltTGVmdCgpIHtcbiAgICByZXR1cm4gJHRyaW0odGhpcywgMSk7XG4gIH07XG59LCAndHJpbVN0YXJ0Jyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFkID0gcmVxdWlyZSgnLi9fc3RyaW5nLXBhZCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzI4MFxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAvVmVyc2lvblxcLzEwXFwuXFxkKyhcXC5cXGQrKT8gU2FmYXJpXFwvLy50ZXN0KHVzZXJBZ2VudCksICdTdHJpbmcnLCB7XG4gIHBhZEVuZDogZnVuY3Rpb24gcGFkRW5kKG1heExlbmd0aCAvKiAsIGZpbGxTdHJpbmcgPSAnICcgKi8pIHtcbiAgICByZXR1cm4gJHBhZCh0aGlzLCBtYXhMZW5ndGgsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCBmYWxzZSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmRcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhZCA9IHJlcXVpcmUoJy4vX3N0cmluZy1wYWQnKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuL191c2VyLWFnZW50Jyk7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8yODBcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogL1ZlcnNpb25cXC8xMFxcLlxcZCsoXFwuXFxkKyk/IFNhZmFyaVxcLy8udGVzdCh1c2VyQWdlbnQpLCAnU3RyaW5nJywge1xuICBwYWRTdGFydDogZnVuY3Rpb24gcGFkU3RhcnQobWF4TGVuZ3RoIC8qICwgZmlsbFN0cmluZyA9ICcgJyAqLykge1xuICAgIHJldHVybiAkcGFkKHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRydWUpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRoaWFzYnluZW5zL1N0cmluZy5wcm90b3R5cGUuYXRcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykodHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICBhdDogZnVuY3Rpb24gYXQocG9zKSB7XG4gICAgcmV0dXJuICRhdCh0aGlzLCBwb3MpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtZmxhdE1hcC8jc2VjLUFycmF5LnByb3RvdHlwZS5mbGF0dGVuXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGZsYXR0ZW5JbnRvQXJyYXkgPSByZXF1aXJlKCcuL19mbGF0dGVuLWludG8tYXJyYXknKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7XG4gIGZsYXR0ZW46IGZ1bmN0aW9uIGZsYXR0ZW4oLyogZGVwdGhBcmcgPSAxICovKSB7XG4gICAgdmFyIGRlcHRoQXJnID0gYXJndW1lbnRzWzBdO1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIHNvdXJjZUxlbiA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCAwKTtcbiAgICBmbGF0dGVuSW50b0FycmF5KEEsIE8sIE8sIHNvdXJjZUxlbiwgMCwgZGVwdGhBcmcgPT09IHVuZGVmaW5lZCA/IDEgOiB0b0ludGVnZXIoZGVwdGhBcmcpKTtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdmbGF0dGVuJyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLWZsYXRNYXAvI3NlYy1BcnJheS5wcm90b3R5cGUuZmxhdE1hcFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBmbGF0dGVuSW50b0FycmF5ID0gcmVxdWlyZSgnLi9fZmxhdHRlbi1pbnRvLWFycmF5Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5Jywge1xuICBmbGF0TWFwOiBmdW5jdGlvbiBmbGF0TWFwKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgc291cmNlTGVuLCBBO1xuICAgIGFGdW5jdGlvbihjYWxsYmFja2ZuKTtcbiAgICBzb3VyY2VMZW4gPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCAwKTtcbiAgICBmbGF0dGVuSW50b0FycmF5KEEsIE8sIE8sIHNvdXJjZUxlbiwgMCwgMSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdmbGF0TWFwJyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9BcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGluY2x1ZGVzID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKSh0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKGVsIC8qICwgZnJvbUluZGV4ID0gMCAqLykge1xuICAgIHJldHVybiAkaW5jbHVkZXModGhpcywgZWwsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdpbmNsdWRlcycpO1xuIiwiLy8gMjYuMS4xNCBSZWZsZWN0LnNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG8pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHNldFByb3RvID0gcmVxdWlyZSgnLi9fc2V0LXByb3RvJyk7XG5cbmlmIChzZXRQcm90bykgJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBzZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YodGFyZ2V0LCBwcm90bykge1xuICAgIHNldFByb3RvLmNoZWNrKHRhcmdldCwgcHJvdG8pO1xuICAgIHRyeSB7XG4gICAgICBzZXRQcm90by5zZXQodGFyZ2V0LCBwcm90byk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcbiIsIi8vIDI2LjEuMTMgUmVmbGVjdC5zZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSwgViBbLCByZWNlaXZlcl0pXG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbmZ1bmN0aW9uIHNldCh0YXJnZXQsIHByb3BlcnR5S2V5LCBWIC8qICwgcmVjZWl2ZXIgKi8pIHtcbiAgdmFyIHJlY2VpdmVyID0gYXJndW1lbnRzLmxlbmd0aCA8IDQgPyB0YXJnZXQgOiBhcmd1bWVudHNbM107XG4gIHZhciBvd25EZXNjID0gZ09QRC5mKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgdmFyIGV4aXN0aW5nRGVzY3JpcHRvciwgcHJvdG87XG4gIGlmICghb3duRGVzYykge1xuICAgIGlmIChpc09iamVjdChwcm90byA9IGdldFByb3RvdHlwZU9mKHRhcmdldCkpKSB7XG4gICAgICByZXR1cm4gc2V0KHByb3RvLCBwcm9wZXJ0eUtleSwgViwgcmVjZWl2ZXIpO1xuICAgIH1cbiAgICBvd25EZXNjID0gY3JlYXRlRGVzYygwKTtcbiAgfVxuICBpZiAoaGFzKG93bkRlc2MsICd2YWx1ZScpKSB7XG4gICAgaWYgKG93bkRlc2Mud3JpdGFibGUgPT09IGZhbHNlIHx8ICFpc09iamVjdChyZWNlaXZlcikpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoZXhpc3RpbmdEZXNjcmlwdG9yID0gZ09QRC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSkpIHtcbiAgICAgIGlmIChleGlzdGluZ0Rlc2NyaXB0b3IuZ2V0IHx8IGV4aXN0aW5nRGVzY3JpcHRvci5zZXQgfHwgZXhpc3RpbmdEZXNjcmlwdG9yLndyaXRhYmxlID09PSBmYWxzZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgZXhpc3RpbmdEZXNjcmlwdG9yLnZhbHVlID0gVjtcbiAgICAgIGRQLmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5LCBleGlzdGluZ0Rlc2NyaXB0b3IpO1xuICAgIH0gZWxzZSBkUC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSwgY3JlYXRlRGVzYygwLCBWKSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIG93bkRlc2Muc2V0ID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IChvd25EZXNjLnNldC5jYWxsKHJlY2VpdmVyLCBWKSwgdHJ1ZSk7XG59XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsgc2V0OiBzZXQgfSk7XG4iLCIvLyAyNi4xLjEyIFJlZmxlY3QucHJldmVudEV4dGVuc2lvbnModGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyICRwcmV2ZW50RXh0ZW5zaW9ucyA9IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBwcmV2ZW50RXh0ZW5zaW9uczogZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnModGFyZ2V0KSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICB0cnkge1xuICAgICAgaWYgKCRwcmV2ZW50RXh0ZW5zaW9ucykgJHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcbiIsIi8vIDI2LjEuMTEgUmVmbGVjdC5vd25LZXlzKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsgb3duS2V5czogcmVxdWlyZSgnLi9fb3duLWtleXMnKSB9KTtcbiIsIi8vIDI2LjEuMTAgUmVmbGVjdC5pc0V4dGVuc2libGUodGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyICRpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGlzRXh0ZW5zaWJsZTogZnVuY3Rpb24gaXNFeHRlbnNpYmxlKHRhcmdldCkge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgcmV0dXJuICRpc0V4dGVuc2libGUgPyAkaXNFeHRlbnNpYmxlKHRhcmdldCkgOiB0cnVlO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuOSBSZWZsZWN0Lmhhcyh0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBoYXM6IGZ1bmN0aW9uIGhhcyh0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgcmV0dXJuIHByb3BlcnR5S2V5IGluIHRhcmdldDtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjggUmVmbGVjdC5nZXRQcm90b3R5cGVPZih0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGdldFByb3RvID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZ2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKHRhcmdldCkge1xuICAgIHJldHVybiBnZXRQcm90byhhbk9iamVjdCh0YXJnZXQpKTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjcgUmVmbGVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eUtleSlcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgcmV0dXJuIGdPUEQuZihhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS42IFJlZmxlY3QuZ2V0KHRhcmdldCwgcHJvcGVydHlLZXkgWywgcmVjZWl2ZXJdKVxudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbmZ1bmN0aW9uIGdldCh0YXJnZXQsIHByb3BlcnR5S2V5IC8qICwgcmVjZWl2ZXIgKi8pIHtcbiAgdmFyIHJlY2VpdmVyID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB0YXJnZXQgOiBhcmd1bWVudHNbMl07XG4gIHZhciBkZXNjLCBwcm90bztcbiAgaWYgKGFuT2JqZWN0KHRhcmdldCkgPT09IHJlY2VpdmVyKSByZXR1cm4gdGFyZ2V0W3Byb3BlcnR5S2V5XTtcbiAgaWYgKGRlc2MgPSBnT1BELmYodGFyZ2V0LCBwcm9wZXJ0eUtleSkpIHJldHVybiBoYXMoZGVzYywgJ3ZhbHVlJylcbiAgICA/IGRlc2MudmFsdWVcbiAgICA6IGRlc2MuZ2V0ICE9PSB1bmRlZmluZWRcbiAgICAgID8gZGVzYy5nZXQuY2FsbChyZWNlaXZlcilcbiAgICAgIDogdW5kZWZpbmVkO1xuICBpZiAoaXNPYmplY3QocHJvdG8gPSBnZXRQcm90b3R5cGVPZih0YXJnZXQpKSkgcmV0dXJuIGdldChwcm90bywgcHJvcGVydHlLZXksIHJlY2VpdmVyKTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgeyBnZXQ6IGdldCB9KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDI2LjEuNSBSZWZsZWN0LmVudW1lcmF0ZSh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgRW51bWVyYXRlID0gZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHRoaXMuX3QgPSBhbk9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHZhciBrZXlzID0gdGhpcy5fayA9IFtdOyAgICAgIC8vIGtleXNcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gaXRlcmF0ZWQpIGtleXMucHVzaChrZXkpO1xufTtcbnJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJykoRW51bWVyYXRlLCAnT2JqZWN0JywgZnVuY3Rpb24gKCkge1xuICB2YXIgdGhhdCA9IHRoaXM7XG4gIHZhciBrZXlzID0gdGhhdC5faztcbiAgdmFyIGtleTtcbiAgZG8ge1xuICAgIGlmICh0aGF0Ll9pID49IGtleXMubGVuZ3RoKSByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH0gd2hpbGUgKCEoKGtleSA9IGtleXNbdGhhdC5faSsrXSkgaW4gdGhhdC5fdCkpO1xuICByZXR1cm4geyB2YWx1ZToga2V5LCBkb25lOiBmYWxzZSB9O1xufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZW51bWVyYXRlOiBmdW5jdGlvbiBlbnVtZXJhdGUodGFyZ2V0KSB7XG4gICAgcmV0dXJuIG5ldyBFbnVtZXJhdGUodGFyZ2V0KTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjQgUmVmbGVjdC5kZWxldGVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZGVsZXRlUHJvcGVydHk6IGZ1bmN0aW9uIGRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICB2YXIgZGVzYyA9IGdPUEQoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpO1xuICAgIHJldHVybiBkZXNjICYmICFkZXNjLmNvbmZpZ3VyYWJsZSA/IGZhbHNlIDogZGVsZXRlIHRhcmdldFtwcm9wZXJ0eUtleV07XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4zIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcylcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG5cbi8vIE1TIEVkZ2UgaGFzIGJyb2tlbiBSZWZsZWN0LmRlZmluZVByb3BlcnR5IC0gdGhyb3dpbmcgaW5zdGVhZCBvZiByZXR1cm5pbmcgZmFsc2VcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICBSZWZsZWN0LmRlZmluZVByb3BlcnR5KGRQLmYoe30sIDEsIHsgdmFsdWU6IDEgfSksIDEsIHsgdmFsdWU6IDIgfSk7XG59KSwgJ1JlZmxlY3QnLCB7XG4gIGRlZmluZVByb3BlcnR5OiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICBwcm9wZXJ0eUtleSA9IHRvUHJpbWl0aXZlKHByb3BlcnR5S2V5LCB0cnVlKTtcbiAgICBhbk9iamVjdChhdHRyaWJ1dGVzKTtcbiAgICB0cnkge1xuICAgICAgZFAuZih0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4yIFJlZmxlY3QuY29uc3RydWN0KHRhcmdldCwgYXJndW1lbnRzTGlzdCBbLCBuZXdUYXJnZXRdKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4vX2JpbmQnKTtcbnZhciByQ29uc3RydWN0ID0gKHJlcXVpcmUoJy4vX2dsb2JhbCcpLlJlZmxlY3QgfHwge30pLmNvbnN0cnVjdDtcblxuLy8gTVMgRWRnZSBzdXBwb3J0cyBvbmx5IDIgYXJndW1lbnRzIGFuZCBhcmd1bWVudHNMaXN0IGFyZ3VtZW50IGlzIG9wdGlvbmFsXG4vLyBGRiBOaWdodGx5IHNldHMgdGhpcmQgYXJndW1lbnQgYXMgYG5ldy50YXJnZXRgLCBidXQgZG9lcyBub3QgY3JlYXRlIGB0aGlzYCBmcm9tIGl0XG52YXIgTkVXX1RBUkdFVF9CVUcgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEYoKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuICEockNvbnN0cnVjdChmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sIFtdLCBGKSBpbnN0YW5jZW9mIEYpO1xufSk7XG52YXIgQVJHU19CVUcgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICByQ29uc3RydWN0KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTkVXX1RBUkdFVF9CVUcgfHwgQVJHU19CVUcpLCAnUmVmbGVjdCcsIHtcbiAgY29uc3RydWN0OiBmdW5jdGlvbiBjb25zdHJ1Y3QoVGFyZ2V0LCBhcmdzIC8qICwgbmV3VGFyZ2V0ICovKSB7XG4gICAgYUZ1bmN0aW9uKFRhcmdldCk7XG4gICAgYW5PYmplY3QoYXJncyk7XG4gICAgdmFyIG5ld1RhcmdldCA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gVGFyZ2V0IDogYUZ1bmN0aW9uKGFyZ3VtZW50c1syXSk7XG4gICAgaWYgKEFSR1NfQlVHICYmICFORVdfVEFSR0VUX0JVRykgcmV0dXJuIHJDb25zdHJ1Y3QoVGFyZ2V0LCBhcmdzLCBuZXdUYXJnZXQpO1xuICAgIGlmIChUYXJnZXQgPT0gbmV3VGFyZ2V0KSB7XG4gICAgICAvLyB3L28gYWx0ZXJlZCBuZXdUYXJnZXQsIG9wdGltaXphdGlvbiBmb3IgMC00IGFyZ3VtZW50c1xuICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgVGFyZ2V0KCk7XG4gICAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSk7XG4gICAgICAgIGNhc2UgMjogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgIGNhc2UgMzogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgIGNhc2UgNDogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gICAgICB9XG4gICAgICAvLyB3L28gYWx0ZXJlZCBuZXdUYXJnZXQsIGxvdCBvZiBhcmd1bWVudHMgY2FzZVxuICAgICAgdmFyICRhcmdzID0gW251bGxdO1xuICAgICAgJGFyZ3MucHVzaC5hcHBseSgkYXJncywgYXJncyk7XG4gICAgICByZXR1cm4gbmV3IChiaW5kLmFwcGx5KFRhcmdldCwgJGFyZ3MpKSgpO1xuICAgIH1cbiAgICAvLyB3aXRoIGFsdGVyZWQgbmV3VGFyZ2V0LCBub3Qgc3VwcG9ydCBidWlsdC1pbiBjb25zdHJ1Y3RvcnNcbiAgICB2YXIgcHJvdG8gPSBuZXdUYXJnZXQucHJvdG90eXBlO1xuICAgIHZhciBpbnN0YW5jZSA9IGNyZWF0ZShpc09iamVjdChwcm90bykgPyBwcm90byA6IE9iamVjdC5wcm90b3R5cGUpO1xuICAgIHZhciByZXN1bHQgPSBGdW5jdGlvbi5hcHBseS5jYWxsKFRhcmdldCwgaW5zdGFuY2UsIGFyZ3MpO1xuICAgIHJldHVybiBpc09iamVjdChyZXN1bHQpID8gcmVzdWx0IDogaW5zdGFuY2U7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4xIFJlZmxlY3QuYXBwbHkodGFyZ2V0LCB0aGlzQXJndW1lbnQsIGFyZ3VtZW50c0xpc3QpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHJBcHBseSA9IChyZXF1aXJlKCcuL19nbG9iYWwnKS5SZWZsZWN0IHx8IHt9KS5hcHBseTtcbnZhciBmQXBwbHkgPSBGdW5jdGlvbi5hcHBseTtcbi8vIE1TIEVkZ2UgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbFxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJBcHBseShmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xufSksICdSZWZsZWN0Jywge1xuICBhcHBseTogZnVuY3Rpb24gYXBwbHkodGFyZ2V0LCB0aGlzQXJndW1lbnQsIGFyZ3VtZW50c0xpc3QpIHtcbiAgICB2YXIgVCA9IGFGdW5jdGlvbih0YXJnZXQpO1xuICAgIHZhciBMID0gYW5PYmplY3QoYXJndW1lbnRzTGlzdCk7XG4gICAgcmV0dXJuIHJBcHBseSA/IHJBcHBseShULCB0aGlzQXJndW1lbnQsIEwpIDogZkFwcGx5LmNhbGwoVCwgdGhpc0FyZ3VtZW50LCBMKTtcbiAgfVxufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdGbG9hdDY0JywgOCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0NjRBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdGbG9hdDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50MzInLCA0LCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnSW50MzInLCA0LCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gSW50MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50MTYnLCAyLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDE2QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnSW50MTYnLCAyLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gSW50MTZBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50OCcsIDEsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50OENsYW1wZWRBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSwgdHJ1ZSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50OCcsIDEsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50OEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0ludDgnLCAxLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gSW50OEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL190eXBlZCcpLkFCViwge1xuICBEYXRhVmlldzogcmVxdWlyZSgnLi9fdHlwZWQtYnVmZmVyJykuRGF0YVZpZXdcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkdHlwZWQgPSByZXF1aXJlKCcuL190eXBlZCcpO1xudmFyIGJ1ZmZlciA9IHJlcXVpcmUoJy4vX3R5cGVkLWJ1ZmZlcicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgQXJyYXlCdWZmZXIgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5BcnJheUJ1ZmZlcjtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgJEFycmF5QnVmZmVyID0gYnVmZmVyLkFycmF5QnVmZmVyO1xudmFyICREYXRhVmlldyA9IGJ1ZmZlci5EYXRhVmlldztcbnZhciAkaXNWaWV3ID0gJHR5cGVkLkFCViAmJiBBcnJheUJ1ZmZlci5pc1ZpZXc7XG52YXIgJHNsaWNlID0gJEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZTtcbnZhciBWSUVXID0gJHR5cGVkLlZJRVc7XG52YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoQXJyYXlCdWZmZXIgIT09ICRBcnJheUJ1ZmZlciksIHsgQXJyYXlCdWZmZXI6ICRBcnJheUJ1ZmZlciB9KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhJHR5cGVkLkNPTlNUUiwgQVJSQVlfQlVGRkVSLCB7XG4gIC8vIDI0LjEuMy4xIEFycmF5QnVmZmVyLmlzVmlldyhhcmcpXG4gIGlzVmlldzogZnVuY3Rpb24gaXNWaWV3KGl0KSB7XG4gICAgcmV0dXJuICRpc1ZpZXcgJiYgJGlzVmlldyhpdCkgfHwgaXNPYmplY3QoaXQpICYmIFZJRVcgaW4gaXQ7XG4gIH1cbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuVSArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gIW5ldyAkQXJyYXlCdWZmZXIoMikuc2xpY2UoMSwgdW5kZWZpbmVkKS5ieXRlTGVuZ3RoO1xufSksIEFSUkFZX0JVRkZFUiwge1xuICAvLyAyNC4xLjQuMyBBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2Uoc3RhcnQsIGVuZClcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQpIHtcbiAgICBpZiAoJHNsaWNlICE9PSB1bmRlZmluZWQgJiYgZW5kID09PSB1bmRlZmluZWQpIHJldHVybiAkc2xpY2UuY2FsbChhbk9iamVjdCh0aGlzKSwgc3RhcnQpOyAvLyBGRiBmaXhcbiAgICB2YXIgbGVuID0gYW5PYmplY3QodGhpcykuYnl0ZUxlbmd0aDtcbiAgICB2YXIgZmlyc3QgPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbik7XG4gICAgdmFyIGZpbmFsID0gdG9BYnNvbHV0ZUluZGV4KGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogZW5kLCBsZW4pO1xuICAgIHZhciByZXN1bHQgPSBuZXcgKHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCAkQXJyYXlCdWZmZXIpKSh0b0xlbmd0aChmaW5hbCAtIGZpcnN0KSk7XG4gICAgdmFyIHZpZXdTID0gbmV3ICREYXRhVmlldyh0aGlzKTtcbiAgICB2YXIgdmlld1QgPSBuZXcgJERhdGFWaWV3KHJlc3VsdCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB3aGlsZSAoZmlyc3QgPCBmaW5hbCkge1xuICAgICAgdmlld1Quc2V0VWludDgoaW5kZXgrKywgdmlld1MuZ2V0VWludDgoZmlyc3QrKykpO1xuICAgIH0gcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoQVJSQVlfQlVGRkVSKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB3ZWFrID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi13ZWFrJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgV0VBS19TRVQgPSAnV2Vha1NldCc7XG5cbi8vIDIzLjQgV2Vha1NldCBPYmplY3RzXG5yZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoV0VBS19TRVQsIGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFdlYWtTZXQoKSB7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy40LjMuMSBXZWFrU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpXG4gIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKSB7XG4gICAgcmV0dXJuIHdlYWsuZGVmKHZhbGlkYXRlKHRoaXMsIFdFQUtfU0VUKSwgdmFsdWUsIHRydWUpO1xuICB9XG59LCB3ZWFrLCBmYWxzZSwgdHJ1ZSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciB0YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpLnNldDtcbnZhciBtaWNyb3Rhc2sgPSByZXF1aXJlKCcuL19taWNyb3Rhc2snKSgpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlID0gcmVxdWlyZSgnLi9fbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xudmFyIHBlcmZvcm0gPSByZXF1aXJlKCcuL19wZXJmb3JtJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi9fdXNlci1hZ2VudCcpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi9fcHJvbWlzZS1yZXNvbHZlJyk7XG52YXIgUFJPTUlTRSA9ICdQcm9taXNlJztcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciB2ZXJzaW9ucyA9IHByb2Nlc3MgJiYgcHJvY2Vzcy52ZXJzaW9ucztcbnZhciB2OCA9IHZlcnNpb25zICYmIHZlcnNpb25zLnY4IHx8ICcnO1xudmFyICRQcm9taXNlID0gZ2xvYmFsW1BST01JU0VdO1xudmFyIGlzTm9kZSA9IGNsYXNzb2YocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xudmFyIGVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xudmFyIEludGVybmFsLCBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHksIE93blByb21pc2VDYXBhYmlsaXR5LCBXcmFwcGVyO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZjtcblxudmFyIFVTRV9OQVRJVkUgPSAhIWZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICAvLyBjb3JyZWN0IHN1YmNsYXNzaW5nIHdpdGggQEBzcGVjaWVzIHN1cHBvcnRcbiAgICB2YXIgcHJvbWlzZSA9ICRQcm9taXNlLnJlc29sdmUoMSk7XG4gICAgdmFyIEZha2VQcm9taXNlID0gKHByb21pc2UuY29uc3RydWN0b3IgPSB7fSlbcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKV0gPSBmdW5jdGlvbiAoZXhlYykge1xuICAgICAgZXhlYyhlbXB0eSwgZW1wdHkpO1xuICAgIH07XG4gICAgLy8gdW5oYW5kbGVkIHJlamVjdGlvbnMgdHJhY2tpbmcgc3VwcG9ydCwgTm9kZUpTIFByb21pc2Ugd2l0aG91dCBpdCBmYWlscyBAQHNwZWNpZXMgdGVzdFxuICAgIHJldHVybiAoaXNOb2RlIHx8IHR5cGVvZiBQcm9taXNlUmVqZWN0aW9uRXZlbnQgPT0gJ2Z1bmN0aW9uJylcbiAgICAgICYmIHByb21pc2UudGhlbihlbXB0eSkgaW5zdGFuY2VvZiBGYWtlUHJvbWlzZVxuICAgICAgLy8gdjggNi42IChOb2RlIDEwIGFuZCBDaHJvbWUgNjYpIGhhdmUgYSBidWcgd2l0aCByZXNvbHZpbmcgY3VzdG9tIHRoZW5hYmxlc1xuICAgICAgLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9ODMwNTY1XG4gICAgICAvLyB3ZSBjYW4ndCBkZXRlY3QgaXQgc3luY2hyb25vdXNseSwgc28ganVzdCBjaGVjayB2ZXJzaW9uc1xuICAgICAgJiYgdjguaW5kZXhPZignNi42JykgIT09IDBcbiAgICAgICYmIHVzZXJBZ2VudC5pbmRleE9mKCdDaHJvbWUvNjYnKSA9PT0gLTE7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxufSgpO1xuXG4vLyBoZWxwZXJzXG52YXIgaXNUaGVuYWJsZSA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgdGhlbjtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiB0eXBlb2YgKHRoZW4gPSBpdC50aGVuKSA9PSAnZnVuY3Rpb24nID8gdGhlbiA6IGZhbHNlO1xufTtcbnZhciBub3RpZnkgPSBmdW5jdGlvbiAocHJvbWlzZSwgaXNSZWplY3QpIHtcbiAgaWYgKHByb21pc2UuX24pIHJldHVybjtcbiAgcHJvbWlzZS5fbiA9IHRydWU7XG4gIHZhciBjaGFpbiA9IHByb21pc2UuX2M7XG4gIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZhbHVlID0gcHJvbWlzZS5fdjtcbiAgICB2YXIgb2sgPSBwcm9taXNlLl9zID09IDE7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBydW4gPSBmdW5jdGlvbiAocmVhY3Rpb24pIHtcbiAgICAgIHZhciBoYW5kbGVyID0gb2sgPyByZWFjdGlvbi5vayA6IHJlYWN0aW9uLmZhaWw7XG4gICAgICB2YXIgcmVzb2x2ZSA9IHJlYWN0aW9uLnJlc29sdmU7XG4gICAgICB2YXIgcmVqZWN0ID0gcmVhY3Rpb24ucmVqZWN0O1xuICAgICAgdmFyIGRvbWFpbiA9IHJlYWN0aW9uLmRvbWFpbjtcbiAgICAgIHZhciByZXN1bHQsIHRoZW4sIGV4aXRlZDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgaWYgKCFvaykge1xuICAgICAgICAgICAgaWYgKHByb21pc2UuX2ggPT0gMikgb25IYW5kbGVVbmhhbmRsZWQocHJvbWlzZSk7XG4gICAgICAgICAgICBwcm9taXNlLl9oID0gMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGhhbmRsZXIgPT09IHRydWUpIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGRvbWFpbikgZG9tYWluLmVudGVyKCk7XG4gICAgICAgICAgICByZXN1bHQgPSBoYW5kbGVyKHZhbHVlKTsgLy8gbWF5IHRocm93XG4gICAgICAgICAgICBpZiAoZG9tYWluKSB7XG4gICAgICAgICAgICAgIGRvbWFpbi5leGl0KCk7XG4gICAgICAgICAgICAgIGV4aXRlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyZXN1bHQgPT09IHJlYWN0aW9uLnByb21pc2UpIHtcbiAgICAgICAgICAgIHJlamVjdChUeXBlRXJyb3IoJ1Byb21pc2UtY2hhaW4gY3ljbGUnKSk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0aGVuID0gaXNUaGVuYWJsZShyZXN1bHQpKSB7XG4gICAgICAgICAgICB0aGVuLmNhbGwocmVzdWx0LCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0gZWxzZSByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0gZWxzZSByZWplY3QodmFsdWUpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoZG9tYWluICYmICFleGl0ZWQpIGRvbWFpbi5leGl0KCk7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHdoaWxlIChjaGFpbi5sZW5ndGggPiBpKSBydW4oY2hhaW5baSsrXSk7IC8vIHZhcmlhYmxlIGxlbmd0aCAtIGNhbid0IHVzZSBmb3JFYWNoXG4gICAgcHJvbWlzZS5fYyA9IFtdO1xuICAgIHByb21pc2UuX24gPSBmYWxzZTtcbiAgICBpZiAoaXNSZWplY3QgJiYgIXByb21pc2UuX2gpIG9uVW5oYW5kbGVkKHByb21pc2UpO1xuICB9KTtcbn07XG52YXIgb25VbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZhbHVlID0gcHJvbWlzZS5fdjtcbiAgICB2YXIgdW5oYW5kbGVkID0gaXNVbmhhbmRsZWQocHJvbWlzZSk7XG4gICAgdmFyIHJlc3VsdCwgaGFuZGxlciwgY29uc29sZTtcbiAgICBpZiAodW5oYW5kbGVkKSB7XG4gICAgICByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGlzTm9kZSkge1xuICAgICAgICAgIHByb2Nlc3MuZW1pdCgndW5oYW5kbGVkUmVqZWN0aW9uJywgdmFsdWUsIHByb21pc2UpO1xuICAgICAgICB9IGVsc2UgaWYgKGhhbmRsZXIgPSBnbG9iYWwub251bmhhbmRsZWRyZWplY3Rpb24pIHtcbiAgICAgICAgICBoYW5kbGVyKHsgcHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiB2YWx1ZSB9KTtcbiAgICAgICAgfSBlbHNlIGlmICgoY29uc29sZSA9IGdsb2JhbC5jb25zb2xlKSAmJiBjb25zb2xlLmVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignVW5oYW5kbGVkIHByb21pc2UgcmVqZWN0aW9uJywgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIC8vIEJyb3dzZXJzIHNob3VsZCBub3QgdHJpZ2dlciBgcmVqZWN0aW9uSGFuZGxlZGAgZXZlbnQgaWYgaXQgd2FzIGhhbmRsZWQgaGVyZSwgTm9kZUpTIC0gc2hvdWxkXG4gICAgICBwcm9taXNlLl9oID0gaXNOb2RlIHx8IGlzVW5oYW5kbGVkKHByb21pc2UpID8gMiA6IDE7XG4gICAgfSBwcm9taXNlLl9hID0gdW5kZWZpbmVkO1xuICAgIGlmICh1bmhhbmRsZWQgJiYgcmVzdWx0LmUpIHRocm93IHJlc3VsdC52O1xuICB9KTtcbn07XG52YXIgaXNVbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICByZXR1cm4gcHJvbWlzZS5faCAhPT0gMSAmJiAocHJvbWlzZS5fYSB8fCBwcm9taXNlLl9jKS5sZW5ndGggPT09IDA7XG59O1xudmFyIG9uSGFuZGxlVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBoYW5kbGVyO1xuICAgIGlmIChpc05vZGUpIHtcbiAgICAgIHByb2Nlc3MuZW1pdCgncmVqZWN0aW9uSGFuZGxlZCcsIHByb21pc2UpO1xuICAgIH0gZWxzZSBpZiAoaGFuZGxlciA9IGdsb2JhbC5vbnJlamVjdGlvbmhhbmRsZWQpIHtcbiAgICAgIGhhbmRsZXIoeyBwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHByb21pc2UuX3YgfSk7XG4gICAgfVxuICB9KTtcbn07XG52YXIgJHJlamVjdCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gIGlmIChwcm9taXNlLl9kKSByZXR1cm47XG4gIHByb21pc2UuX2QgPSB0cnVlO1xuICBwcm9taXNlID0gcHJvbWlzZS5fdyB8fCBwcm9taXNlOyAvLyB1bndyYXBcbiAgcHJvbWlzZS5fdiA9IHZhbHVlO1xuICBwcm9taXNlLl9zID0gMjtcbiAgaWYgKCFwcm9taXNlLl9hKSBwcm9taXNlLl9hID0gcHJvbWlzZS5fYy5zbGljZSgpO1xuICBub3RpZnkocHJvbWlzZSwgdHJ1ZSk7XG59O1xudmFyICRyZXNvbHZlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHZhciBwcm9taXNlID0gdGhpcztcbiAgdmFyIHRoZW47XG4gIGlmIChwcm9taXNlLl9kKSByZXR1cm47XG4gIHByb21pc2UuX2QgPSB0cnVlO1xuICBwcm9taXNlID0gcHJvbWlzZS5fdyB8fCBwcm9taXNlOyAvLyB1bndyYXBcbiAgdHJ5IHtcbiAgICBpZiAocHJvbWlzZSA9PT0gdmFsdWUpIHRocm93IFR5cGVFcnJvcihcIlByb21pc2UgY2FuJ3QgYmUgcmVzb2x2ZWQgaXRzZWxmXCIpO1xuICAgIGlmICh0aGVuID0gaXNUaGVuYWJsZSh2YWx1ZSkpIHtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB3cmFwcGVyID0geyBfdzogcHJvbWlzZSwgX2Q6IGZhbHNlIH07IC8vIHdyYXBcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGVuLmNhbGwodmFsdWUsIGN0eCgkcmVzb2x2ZSwgd3JhcHBlciwgMSksIGN0eCgkcmVqZWN0LCB3cmFwcGVyLCAxKSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAkcmVqZWN0LmNhbGwod3JhcHBlciwgZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9taXNlLl92ID0gdmFsdWU7XG4gICAgICBwcm9taXNlLl9zID0gMTtcbiAgICAgIG5vdGlmeShwcm9taXNlLCBmYWxzZSk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgJHJlamVjdC5jYWxsKHsgX3c6IHByb21pc2UsIF9kOiBmYWxzZSB9LCBlKTsgLy8gd3JhcFxuICB9XG59O1xuXG4vLyBjb25zdHJ1Y3RvciBwb2x5ZmlsbFxuaWYgKCFVU0VfTkFUSVZFKSB7XG4gIC8vIDI1LjQuMy4xIFByb21pc2UoZXhlY3V0b3IpXG4gICRQcm9taXNlID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIGFuSW5zdGFuY2UodGhpcywgJFByb21pc2UsIFBST01JU0UsICdfaCcpO1xuICAgIGFGdW5jdGlvbihleGVjdXRvcik7XG4gICAgSW50ZXJuYWwuY2FsbCh0aGlzKTtcbiAgICB0cnkge1xuICAgICAgZXhlY3V0b3IoY3R4KCRyZXNvbHZlLCB0aGlzLCAxKSwgY3R4KCRyZWplY3QsIHRoaXMsIDEpKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICRyZWplY3QuY2FsbCh0aGlzLCBlcnIpO1xuICAgIH1cbiAgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIEludGVybmFsID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIHRoaXMuX2MgPSBbXTsgICAgICAgICAgICAgLy8gPC0gYXdhaXRpbmcgcmVhY3Rpb25zXG4gICAgdGhpcy5fYSA9IHVuZGVmaW5lZDsgICAgICAvLyA8LSBjaGVja2VkIGluIGlzVW5oYW5kbGVkIHJlYWN0aW9uc1xuICAgIHRoaXMuX3MgPSAwOyAgICAgICAgICAgICAgLy8gPC0gc3RhdGVcbiAgICB0aGlzLl9kID0gZmFsc2U7ICAgICAgICAgIC8vIDwtIGRvbmVcbiAgICB0aGlzLl92ID0gdW5kZWZpbmVkOyAgICAgIC8vIDwtIHZhbHVlXG4gICAgdGhpcy5faCA9IDA7ICAgICAgICAgICAgICAvLyA8LSByZWplY3Rpb24gc3RhdGUsIDAgLSBkZWZhdWx0LCAxIC0gaGFuZGxlZCwgMiAtIHVuaGFuZGxlZFxuICAgIHRoaXMuX24gPSBmYWxzZTsgICAgICAgICAgLy8gPC0gbm90aWZ5XG4gIH07XG4gIEludGVybmFsLnByb3RvdHlwZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpKCRQcm9taXNlLnByb3RvdHlwZSwge1xuICAgIC8vIDI1LjQuNS4zIFByb21pc2UucHJvdG90eXBlLnRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpXG4gICAgdGhlbjogZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICAgICAgdmFyIHJlYWN0aW9uID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsICRQcm9taXNlKSk7XG4gICAgICByZWFjdGlvbi5vayA9IHR5cGVvZiBvbkZ1bGZpbGxlZCA9PSAnZnVuY3Rpb24nID8gb25GdWxmaWxsZWQgOiB0cnVlO1xuICAgICAgcmVhY3Rpb24uZmFpbCA9IHR5cGVvZiBvblJlamVjdGVkID09ICdmdW5jdGlvbicgJiYgb25SZWplY3RlZDtcbiAgICAgIHJlYWN0aW9uLmRvbWFpbiA9IGlzTm9kZSA/IHByb2Nlc3MuZG9tYWluIDogdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fYy5wdXNoKHJlYWN0aW9uKTtcbiAgICAgIGlmICh0aGlzLl9hKSB0aGlzLl9hLnB1c2gocmVhY3Rpb24pO1xuICAgICAgaWYgKHRoaXMuX3MpIG5vdGlmeSh0aGlzLCBmYWxzZSk7XG4gICAgICByZXR1cm4gcmVhY3Rpb24ucHJvbWlzZTtcbiAgICB9LFxuICAgIC8vIDI1LjQuNS4xIFByb21pc2UucHJvdG90eXBlLmNhdGNoKG9uUmVqZWN0ZWQpXG4gICAgJ2NhdGNoJzogZnVuY3Rpb24gKG9uUmVqZWN0ZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnRoZW4odW5kZWZpbmVkLCBvblJlamVjdGVkKTtcbiAgICB9XG4gIH0pO1xuICBPd25Qcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBJbnRlcm5hbCgpO1xuICAgIHRoaXMucHJvbWlzZSA9IHByb21pc2U7XG4gICAgdGhpcy5yZXNvbHZlID0gY3R4KCRyZXNvbHZlLCBwcm9taXNlLCAxKTtcbiAgICB0aGlzLnJlamVjdCA9IGN0eCgkcmVqZWN0LCBwcm9taXNlLCAxKTtcbiAgfTtcbiAgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKEMpIHtcbiAgICByZXR1cm4gQyA9PT0gJFByb21pc2UgfHwgQyA9PT0gV3JhcHBlclxuICAgICAgPyBuZXcgT3duUHJvbWlzZUNhcGFiaWxpdHkoQylcbiAgICAgIDogbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICB9O1xufVxuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7IFByb21pc2U6ICRQcm9taXNlIH0pO1xucmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKSgkUHJvbWlzZSwgUFJPTUlTRSk7XG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKFBST01JU0UpO1xuV3JhcHBlciA9IHJlcXVpcmUoJy4vX2NvcmUnKVtQUk9NSVNFXTtcblxuLy8gc3RhdGljc1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuNSBQcm9taXNlLnJlamVjdChyKVxuICByZWplY3Q6IGZ1bmN0aW9uIHJlamVjdChyKSB7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSh0aGlzKTtcbiAgICB2YXIgJCRyZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICAkJHJlamVjdChyKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKExJQlJBUlkgfHwgIVVTRV9OQVRJVkUpLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC42IFByb21pc2UucmVzb2x2ZSh4KVxuICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKHgpIHtcbiAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoTElCUkFSWSAmJiB0aGlzID09PSBXcmFwcGVyID8gJFByb21pc2UgOiB0aGlzLCB4KTtcbiAgfVxufSk7XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoVVNFX05BVElWRSAmJiByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpKGZ1bmN0aW9uIChpdGVyKSB7XG4gICRQcm9taXNlLmFsbChpdGVyKVsnY2F0Y2gnXShlbXB0eSk7XG59KSksIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjEgUHJvbWlzZS5hbGwoaXRlcmFibGUpXG4gIGFsbDogZnVuY3Rpb24gYWxsKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICB2YXIgcmVtYWluaW5nID0gMTtcbiAgICAgIGZvck9mKGl0ZXJhYmxlLCBmYWxzZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgdmFyICRpbmRleCA9IGluZGV4Kys7XG4gICAgICAgIHZhciBhbHJlYWR5Q2FsbGVkID0gZmFsc2U7XG4gICAgICAgIHZhbHVlcy5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIHJlbWFpbmluZysrO1xuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeUNhbGxlZCkgcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgIHZhbHVlc1skaW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lKSByZWplY3QocmVzdWx0LnYpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH0sXG4gIC8vIDI1LjQuNC40IFByb21pc2UucmFjZShpdGVyYWJsZSlcbiAgcmFjZTogZnVuY3Rpb24gcmFjZShpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIEMucmVzb2x2ZShwcm9taXNlKS50aGVuKGNhcGFiaWxpdHkucmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZSkgcmVqZWN0KHJlc3VsdC52KTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiIsIi8vIEBAc3BsaXQgbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnc3BsaXQnLCAyLCBmdW5jdGlvbiAoZGVmaW5lZCwgU1BMSVQsICRzcGxpdCkge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xuICB2YXIgX3NwbGl0ID0gJHNwbGl0O1xuICB2YXIgJHB1c2ggPSBbXS5wdXNoO1xuICB2YXIgJFNQTElUID0gJ3NwbGl0JztcbiAgdmFyIExFTkdUSCA9ICdsZW5ndGgnO1xuICB2YXIgTEFTVF9JTkRFWCA9ICdsYXN0SW5kZXgnO1xuICBpZiAoXG4gICAgJ2FiYmMnWyRTUExJVF0oLyhiKSovKVsxXSA9PSAnYycgfHxcbiAgICAndGVzdCdbJFNQTElUXSgvKD86KS8sIC0xKVtMRU5HVEhdICE9IDQgfHxcbiAgICAnYWInWyRTUExJVF0oLyg/OmFiKSovKVtMRU5HVEhdICE9IDIgfHxcbiAgICAnLidbJFNQTElUXSgvKC4/KSguPykvKVtMRU5HVEhdICE9IDQgfHxcbiAgICAnLidbJFNQTElUXSgvKCkoKS8pW0xFTkdUSF0gPiAxIHx8XG4gICAgJydbJFNQTElUXSgvLj8vKVtMRU5HVEhdXG4gICkge1xuICAgIHZhciBOUENHID0gLygpPz8vLmV4ZWMoJycpWzFdID09PSB1bmRlZmluZWQ7IC8vIG5vbnBhcnRpY2lwYXRpbmcgY2FwdHVyaW5nIGdyb3VwXG4gICAgLy8gYmFzZWQgb24gZXM1LXNoaW0gaW1wbGVtZW50YXRpb24sIG5lZWQgdG8gcmV3b3JrIGl0XG4gICAgJHNwbGl0ID0gZnVuY3Rpb24gKHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHZhciBzdHJpbmcgPSBTdHJpbmcodGhpcyk7XG4gICAgICBpZiAoc2VwYXJhdG9yID09PSB1bmRlZmluZWQgJiYgbGltaXQgPT09IDApIHJldHVybiBbXTtcbiAgICAgIC8vIElmIGBzZXBhcmF0b3JgIGlzIG5vdCBhIHJlZ2V4LCB1c2UgbmF0aXZlIHNwbGl0XG4gICAgICBpZiAoIWlzUmVnRXhwKHNlcGFyYXRvcikpIHJldHVybiBfc3BsaXQuY2FsbChzdHJpbmcsIHNlcGFyYXRvciwgbGltaXQpO1xuICAgICAgdmFyIG91dHB1dCA9IFtdO1xuICAgICAgdmFyIGZsYWdzID0gKHNlcGFyYXRvci5pZ25vcmVDYXNlID8gJ2knIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IubXVsdGlsaW5lID8gJ20nIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IudW5pY29kZSA/ICd1JyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnN0aWNreSA/ICd5JyA6ICcnKTtcbiAgICAgIHZhciBsYXN0TGFzdEluZGV4ID0gMDtcbiAgICAgIHZhciBzcGxpdExpbWl0ID0gbGltaXQgPT09IHVuZGVmaW5lZCA/IDQyOTQ5NjcyOTUgOiBsaW1pdCA+Pj4gMDtcbiAgICAgIC8vIE1ha2UgYGdsb2JhbGAgYW5kIGF2b2lkIGBsYXN0SW5kZXhgIGlzc3VlcyBieSB3b3JraW5nIHdpdGggYSBjb3B5XG4gICAgICB2YXIgc2VwYXJhdG9yQ29weSA9IG5ldyBSZWdFeHAoc2VwYXJhdG9yLnNvdXJjZSwgZmxhZ3MgKyAnZycpO1xuICAgICAgdmFyIHNlcGFyYXRvcjIsIG1hdGNoLCBsYXN0SW5kZXgsIGxhc3RMZW5ndGgsIGk7XG4gICAgICAvLyBEb2Vzbid0IG5lZWQgZmxhZ3MgZ3ksIGJ1dCB0aGV5IGRvbid0IGh1cnRcbiAgICAgIGlmICghTlBDRykgc2VwYXJhdG9yMiA9IG5ldyBSZWdFeHAoJ14nICsgc2VwYXJhdG9yQ29weS5zb3VyY2UgKyAnJCg/IVxcXFxzKScsIGZsYWdzKTtcbiAgICAgIHdoaWxlIChtYXRjaCA9IHNlcGFyYXRvckNvcHkuZXhlYyhzdHJpbmcpKSB7XG4gICAgICAgIC8vIGBzZXBhcmF0b3JDb3B5Lmxhc3RJbmRleGAgaXMgbm90IHJlbGlhYmxlIGNyb3NzLWJyb3dzZXJcbiAgICAgICAgbGFzdEluZGV4ID0gbWF0Y2guaW5kZXggKyBtYXRjaFswXVtMRU5HVEhdO1xuICAgICAgICBpZiAobGFzdEluZGV4ID4gbGFzdExhc3RJbmRleCkge1xuICAgICAgICAgIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4LCBtYXRjaC5pbmRleCkpO1xuICAgICAgICAgIC8vIEZpeCBicm93c2VycyB3aG9zZSBgZXhlY2AgbWV0aG9kcyBkb24ndCBjb25zaXN0ZW50bHkgcmV0dXJuIGB1bmRlZmluZWRgIGZvciBOUENHXG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxvb3AtZnVuY1xuICAgICAgICAgIGlmICghTlBDRyAmJiBtYXRjaFtMRU5HVEhdID4gMSkgbWF0Y2hbMF0ucmVwbGFjZShzZXBhcmF0b3IyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBmb3IgKGkgPSAxOyBpIDwgYXJndW1lbnRzW0xFTkdUSF0gLSAyOyBpKyspIGlmIChhcmd1bWVudHNbaV0gPT09IHVuZGVmaW5lZCkgbWF0Y2hbaV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKG1hdGNoW0xFTkdUSF0gPiAxICYmIG1hdGNoLmluZGV4IDwgc3RyaW5nW0xFTkdUSF0pICRwdXNoLmFwcGx5KG91dHB1dCwgbWF0Y2guc2xpY2UoMSkpO1xuICAgICAgICAgIGxhc3RMZW5ndGggPSBtYXRjaFswXVtMRU5HVEhdO1xuICAgICAgICAgIGxhc3RMYXN0SW5kZXggPSBsYXN0SW5kZXg7XG4gICAgICAgICAgaWYgKG91dHB1dFtMRU5HVEhdID49IHNwbGl0TGltaXQpIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZXBhcmF0b3JDb3B5W0xBU1RfSU5ERVhdID09PSBtYXRjaC5pbmRleCkgc2VwYXJhdG9yQ29weVtMQVNUX0lOREVYXSsrOyAvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wXG4gICAgICB9XG4gICAgICBpZiAobGFzdExhc3RJbmRleCA9PT0gc3RyaW5nW0xFTkdUSF0pIHtcbiAgICAgICAgaWYgKGxhc3RMZW5ndGggfHwgIXNlcGFyYXRvckNvcHkudGVzdCgnJykpIG91dHB1dC5wdXNoKCcnKTtcbiAgICAgIH0gZWxzZSBvdXRwdXQucHVzaChzdHJpbmcuc2xpY2UobGFzdExhc3RJbmRleCkpO1xuICAgICAgcmV0dXJuIG91dHB1dFtMRU5HVEhdID4gc3BsaXRMaW1pdCA/IG91dHB1dC5zbGljZSgwLCBzcGxpdExpbWl0KSA6IG91dHB1dDtcbiAgICB9O1xuICAvLyBDaGFrcmEsIFY4XG4gIH0gZWxzZSBpZiAoJzAnWyRTUExJVF0odW5kZWZpbmVkLCAwKVtMRU5HVEhdKSB7XG4gICAgJHNwbGl0ID0gZnVuY3Rpb24gKHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHJldHVybiBzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCAmJiBsaW1pdCA9PT0gMCA/IFtdIDogX3NwbGl0LmNhbGwodGhpcywgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgfTtcbiAgfVxuICAvLyAyMS4xLjMuMTcgU3RyaW5nLnByb3RvdHlwZS5zcGxpdChzZXBhcmF0b3IsIGxpbWl0KVxuICByZXR1cm4gW2Z1bmN0aW9uIHNwbGl0KHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgdmFyIGZuID0gc2VwYXJhdG9yID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlcGFyYXRvcltTUExJVF07XG4gICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHNlcGFyYXRvciwgTywgbGltaXQpIDogJHNwbGl0LmNhbGwoU3RyaW5nKE8pLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgfSwgJHNwbGl0XTtcbn0pO1xuIiwiLy8gQEBzZWFyY2ggbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnc2VhcmNoJywgMSwgZnVuY3Rpb24gKGRlZmluZWQsIFNFQVJDSCwgJHNlYXJjaCkge1xuICAvLyAyMS4xLjMuMTUgU3RyaW5nLnByb3RvdHlwZS5zZWFyY2gocmVnZXhwKVxuICByZXR1cm4gW2Z1bmN0aW9uIHNlYXJjaChyZWdleHApIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgIHZhciBmbiA9IHJlZ2V4cCA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiByZWdleHBbU0VBUkNIXTtcbiAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZCA/IGZuLmNhbGwocmVnZXhwLCBPKSA6IG5ldyBSZWdFeHAocmVnZXhwKVtTRUFSQ0hdKFN0cmluZyhPKSk7XG4gIH0sICRzZWFyY2hdO1xufSk7XG4iLCIvLyBAQHJlcGxhY2UgbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgncmVwbGFjZScsIDIsIGZ1bmN0aW9uIChkZWZpbmVkLCBSRVBMQUNFLCAkcmVwbGFjZSkge1xuICAvLyAyMS4xLjMuMTQgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpXG4gIHJldHVybiBbZnVuY3Rpb24gcmVwbGFjZShzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICB2YXIgZm4gPSBzZWFyY2hWYWx1ZSA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZWFyY2hWYWx1ZVtSRVBMQUNFXTtcbiAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZFxuICAgICAgPyBmbi5jYWxsKHNlYXJjaFZhbHVlLCBPLCByZXBsYWNlVmFsdWUpXG4gICAgICA6ICRyZXBsYWNlLmNhbGwoU3RyaW5nKE8pLCBzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKTtcbiAgfSwgJHJlcGxhY2VdO1xufSk7XG4iLCIvLyBAQG1hdGNoIGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ21hdGNoJywgMSwgZnVuY3Rpb24gKGRlZmluZWQsIE1BVENILCAkbWF0Y2gpIHtcbiAgLy8gMjEuMS4zLjExIFN0cmluZy5wcm90b3R5cGUubWF0Y2gocmVnZXhwKVxuICByZXR1cm4gW2Z1bmN0aW9uIG1hdGNoKHJlZ2V4cCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgdmFyIGZuID0gcmVnZXhwID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHJlZ2V4cFtNQVRDSF07XG4gICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHJlZ2V4cCwgTykgOiBuZXcgUmVnRXhwKHJlZ2V4cClbTUFUQ0hdKFN0cmluZyhPKSk7XG4gIH0sICRtYXRjaF07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnJlcXVpcmUoJy4vZXM2LnJlZ2V4cC5mbGFncycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgJGZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciAkdG9TdHJpbmcgPSAvLi9bVE9fU1RSSU5HXTtcblxudmFyIGRlZmluZSA9IGZ1bmN0aW9uIChmbikge1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKFJlZ0V4cC5wcm90b3R5cGUsIFRPX1NUUklORywgZm4sIHRydWUpO1xufTtcblxuLy8gMjEuMi41LjE0IFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcoKVxuaWYgKHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkgeyByZXR1cm4gJHRvU3RyaW5nLmNhbGwoeyBzb3VyY2U6ICdhJywgZmxhZ3M6ICdiJyB9KSAhPSAnL2EvYic7IH0pKSB7XG4gIGRlZmluZShmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICB2YXIgUiA9IGFuT2JqZWN0KHRoaXMpO1xuICAgIHJldHVybiAnLycuY29uY2F0KFIuc291cmNlLCAnLycsXG4gICAgICAnZmxhZ3MnIGluIFIgPyBSLmZsYWdzIDogIURFU0NSSVBUT1JTICYmIFIgaW5zdGFuY2VvZiBSZWdFeHAgPyAkZmxhZ3MuY2FsbChSKSA6IHVuZGVmaW5lZCk7XG4gIH0pO1xuLy8gRkY0NC0gUmVnRXhwI3RvU3RyaW5nIGhhcyBhIHdyb25nIG5hbWVcbn0gZWxzZSBpZiAoJHRvU3RyaW5nLm5hbWUgIT0gVE9fU1RSSU5HKSB7XG4gIGRlZmluZShmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gJHRvU3RyaW5nLmNhbGwodGhpcyk7XG4gIH0pO1xufVxuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi9faW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJyk7XG52YXIgJGZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcbnZhciAkUmVnRXhwID0gZ2xvYmFsLlJlZ0V4cDtcbnZhciBCYXNlID0gJFJlZ0V4cDtcbnZhciBwcm90byA9ICRSZWdFeHAucHJvdG90eXBlO1xudmFyIHJlMSA9IC9hL2c7XG52YXIgcmUyID0gL2EvZztcbi8vIFwibmV3XCIgY3JlYXRlcyBhIG5ldyBvYmplY3QsIG9sZCB3ZWJraXQgYnVnZ3kgaGVyZVxudmFyIENPUlJFQ1RfTkVXID0gbmV3ICRSZWdFeHAocmUxKSAhPT0gcmUxO1xuXG5pZiAocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAoIUNPUlJFQ1RfTkVXIHx8IHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZTJbcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyldID0gZmFsc2U7XG4gIC8vIFJlZ0V4cCBjb25zdHJ1Y3RvciBjYW4gYWx0ZXIgZmxhZ3MgYW5kIElzUmVnRXhwIHdvcmtzIGNvcnJlY3Qgd2l0aCBAQG1hdGNoXG4gIHJldHVybiAkUmVnRXhwKHJlMSkgIT0gcmUxIHx8ICRSZWdFeHAocmUyKSA9PSByZTIgfHwgJFJlZ0V4cChyZTEsICdpJykgIT0gJy9hL2knO1xufSkpKSB7XG4gICRSZWdFeHAgPSBmdW5jdGlvbiBSZWdFeHAocCwgZikge1xuICAgIHZhciB0aVJFID0gdGhpcyBpbnN0YW5jZW9mICRSZWdFeHA7XG4gICAgdmFyIHBpUkUgPSBpc1JlZ0V4cChwKTtcbiAgICB2YXIgZmlVID0gZiA9PT0gdW5kZWZpbmVkO1xuICAgIHJldHVybiAhdGlSRSAmJiBwaVJFICYmIHAuY29uc3RydWN0b3IgPT09ICRSZWdFeHAgJiYgZmlVID8gcFxuICAgICAgOiBpbmhlcml0SWZSZXF1aXJlZChDT1JSRUNUX05FV1xuICAgICAgICA/IG5ldyBCYXNlKHBpUkUgJiYgIWZpVSA/IHAuc291cmNlIDogcCwgZilcbiAgICAgICAgOiBCYXNlKChwaVJFID0gcCBpbnN0YW5jZW9mICRSZWdFeHApID8gcC5zb3VyY2UgOiBwLCBwaVJFICYmIGZpVSA/ICRmbGFncy5jYWxsKHApIDogZilcbiAgICAgICwgdGlSRSA/IHRoaXMgOiBwcm90bywgJFJlZ0V4cCk7XG4gIH07XG4gIHZhciBwcm94eSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICBrZXkgaW4gJFJlZ0V4cCB8fCBkUCgkUmVnRXhwLCBrZXksIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gQmFzZVtrZXldOyB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiAoaXQpIHsgQmFzZVtrZXldID0gaXQ7IH1cbiAgICB9KTtcbiAgfTtcbiAgZm9yICh2YXIga2V5cyA9IGdPUE4oQmFzZSksIGkgPSAwOyBrZXlzLmxlbmd0aCA+IGk7KSBwcm94eShrZXlzW2krK10pO1xuICBwcm90by5jb25zdHJ1Y3RvciA9ICRSZWdFeHA7XG4gICRSZWdFeHAucHJvdG90eXBlID0gcHJvdG87XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoZ2xvYmFsLCAnUmVnRXhwJywgJFJlZ0V4cCk7XG59XG5cbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoJ1JlZ0V4cCcpO1xuIiwicmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKSgnQXJyYXknKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy45IEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXgocHJlZGljYXRlLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmluZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSg2KTtcbnZhciBLRVkgPSAnZmluZEluZGV4JztcbnZhciBmb3JjZWQgPSB0cnVlO1xuLy8gU2hvdWxkbid0IHNraXAgaG9sZXNcbmlmIChLRVkgaW4gW10pIEFycmF5KDEpW0tFWV0oZnVuY3Rpb24gKCkgeyBmb3JjZWQgPSBmYWxzZTsgfSk7XG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZvcmNlZCwgJ0FycmF5Jywge1xuICBmaW5kSW5kZXg6IGZ1bmN0aW9uIGZpbmRJbmRleChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgIHJldHVybiAkZmluZCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoS0VZKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy44IEFycmF5LnByb3RvdHlwZS5maW5kKHByZWRpY2F0ZSwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZpbmQgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNSk7XG52YXIgS0VZID0gJ2ZpbmQnO1xudmFyIGZvcmNlZCA9IHRydWU7XG4vLyBTaG91bGRuJ3Qgc2tpcCBob2xlc1xuaWYgKEtFWSBpbiBbXSkgQXJyYXkoMSlbS0VZXShmdW5jdGlvbiAoKSB7IGZvcmNlZCA9IGZhbHNlOyB9KTtcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZm9yY2VkLCAnQXJyYXknLCB7XG4gIGZpbmQ6IGZ1bmN0aW9uIGZpbmQoY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICByZXR1cm4gJGZpbmQodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKEtFWSk7XG4iLCIvLyAyMi4xLjMuNiBBcnJheS5wcm90b3R5cGUuZmlsbCh2YWx1ZSwgc3RhcnQgPSAwLCBlbmQgPSB0aGlzLmxlbmd0aClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7IGZpbGw6IHJlcXVpcmUoJy4vX2FycmF5LWZpbGwnKSB9KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2ZpbGwnKTtcbiIsIi8vIDIyLjEuMy4zIEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluKHRhcmdldCwgc3RhcnQsIGVuZCA9IHRoaXMubGVuZ3RoKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHsgY29weVdpdGhpbjogcmVxdWlyZSgnLi9fYXJyYXktY29weS13aXRoaW4nKSB9KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2NvcHlXaXRoaW4nKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyICRuYXRpdmUgPSBbXS5sYXN0SW5kZXhPZjtcbnZhciBORUdBVElWRV9aRVJPID0gISEkbmF0aXZlICYmIDEgLyBbMV0ubGFzdEluZGV4T2YoMSwgLTApIDwgMDtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoTkVHQVRJVkVfWkVSTyB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKCRuYXRpdmUpKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTQgLyAxNS40LjQuMTUgQXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgWywgZnJvbUluZGV4XSlcbiAgbGFzdEluZGV4T2Y6IGZ1bmN0aW9uIGxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggPSBAWyotMV0gKi8pIHtcbiAgICAvLyBjb252ZXJ0IC0wIHRvICswXG4gICAgaWYgKE5FR0FUSVZFX1pFUk8pIHJldHVybiAkbmF0aXZlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgMDtcbiAgICB2YXIgTyA9IHRvSU9iamVjdCh0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IGxlbmd0aCAtIDE7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSBpbmRleCA9IE1hdGgubWluKGluZGV4LCB0b0ludGVnZXIoYXJndW1lbnRzWzFdKSk7XG4gICAgaWYgKGluZGV4IDwgMCkgaW5kZXggPSBsZW5ndGggKyBpbmRleDtcbiAgICBmb3IgKDtpbmRleCA+PSAwOyBpbmRleC0tKSBpZiAoaW5kZXggaW4gTykgaWYgKE9baW5kZXhdID09PSBzZWFyY2hFbGVtZW50KSByZXR1cm4gaW5kZXggfHwgMDtcbiAgICByZXR1cm4gLTE7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkaW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpO1xudmFyICRuYXRpdmUgPSBbXS5pbmRleE9mO1xudmFyIE5FR0FUSVZFX1pFUk8gPSAhISRuYXRpdmUgJiYgMSAvIFsxXS5pbmRleE9mKDEsIC0wKSA8IDA7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKE5FR0FUSVZFX1pFUk8gfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkbmF0aXZlKSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjExIC8gMTUuNC40LjE0IEFycmF5LnByb3RvdHlwZS5pbmRleE9mKHNlYXJjaEVsZW1lbnQgWywgZnJvbUluZGV4XSlcbiAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ID0gMCAqLykge1xuICAgIHJldHVybiBORUdBVElWRV9aRVJPXG4gICAgICAvLyBjb252ZXJ0IC0wIHRvICswXG4gICAgICA/ICRuYXRpdmUuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCAwXG4gICAgICA6ICRpbmRleE9mKHRoaXMsIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcmVkdWNlID0gcmVxdWlyZSgnLi9fYXJyYXktcmVkdWNlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5yZWR1Y2VSaWdodCwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE5IC8gMTUuNC40LjIyIEFycmF5LnByb3RvdHlwZS5yZWR1Y2VSaWdodChjYWxsYmFja2ZuIFssIGluaXRpYWxWYWx1ZV0pXG4gIHJlZHVjZVJpZ2h0OiBmdW5jdGlvbiByZWR1Y2VSaWdodChjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gICAgcmV0dXJuICRyZWR1Y2UodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzWzFdLCB0cnVlKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRyZWR1Y2UgPSByZXF1aXJlKCcuL19hcnJheS1yZWR1Y2UnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLnJlZHVjZSwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE4IC8gMTUuNC40LjIxIEFycmF5LnByb3RvdHlwZS5yZWR1Y2UoY2FsbGJhY2tmbiBbLCBpbml0aWFsVmFsdWVdKVxuICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gICAgcmV0dXJuICRyZWR1Y2UodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzWzFdLCBmYWxzZSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZXZlcnkgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNCk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5ldmVyeSwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjUgLyAxNS40LjQuMTYgQXJyYXkucHJvdG90eXBlLmV2ZXJ5KGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGV2ZXJ5OiBmdW5jdGlvbiBldmVyeShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkZXZlcnkodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRzb21lID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDMpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uc29tZSwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjIzIC8gMTUuNC40LjE3IEFycmF5LnByb3RvdHlwZS5zb21lKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIHNvbWU6IGZ1bmN0aW9uIHNvbWUoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJHNvbWUodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmaWx0ZXIgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMik7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5maWx0ZXIsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy43IC8gMTUuNC40LjIwIEFycmF5LnByb3RvdHlwZS5maWx0ZXIoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGZpbHRlcih0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJG1hcCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgxKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLm1hcCwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE1IC8gMTUuNC40LjE5IEFycmF5LnByb3RvdHlwZS5tYXAoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgbWFwOiBmdW5jdGlvbiBtYXAoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJG1hcCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL19pcy1hcnJheScpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbCkge1xuICB2YXIgQztcbiAgaWYgKGlzQXJyYXkob3JpZ2luYWwpKSB7XG4gICAgQyA9IG9yaWdpbmFsLmNvbnN0cnVjdG9yO1xuICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgaWYgKHR5cGVvZiBDID09ICdmdW5jdGlvbicgJiYgKEMgPT09IEFycmF5IHx8IGlzQXJyYXkoQy5wcm90b3R5cGUpKSkgQyA9IHVuZGVmaW5lZDtcbiAgICBpZiAoaXNPYmplY3QoQykpIHtcbiAgICAgIEMgPSBDW1NQRUNJRVNdO1xuICAgICAgaWYgKEMgPT09IG51bGwpIEMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9IHJldHVybiBDID09PSB1bmRlZmluZWQgPyBBcnJheSA6IEM7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZm9yRWFjaCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgwKTtcbnZhciBTVFJJQ1QgPSByZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZm9yRWFjaCwgdHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIVNUUklDVCwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTAgLyAxNS40LjQuMTggQXJyYXkucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkZm9yRWFjaCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyICRzb3J0ID0gW10uc29ydDtcbnZhciB0ZXN0ID0gWzEsIDIsIDNdO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIElFOC1cbiAgdGVzdC5zb3J0KHVuZGVmaW5lZCk7XG59KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBWOCBidWdcbiAgdGVzdC5zb3J0KG51bGwpO1xuICAvLyBPbGQgV2ViS2l0XG59KSB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKCRzb3J0KSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjI1IEFycmF5LnByb3RvdHlwZS5zb3J0KGNvbXBhcmVmbilcbiAgc29ydDogZnVuY3Rpb24gc29ydChjb21wYXJlZm4pIHtcbiAgICByZXR1cm4gY29tcGFyZWZuID09PSB1bmRlZmluZWRcbiAgICAgID8gJHNvcnQuY2FsbCh0b09iamVjdCh0aGlzKSlcbiAgICAgIDogJHNvcnQuY2FsbCh0b09iamVjdCh0aGlzKSwgYUZ1bmN0aW9uKGNvbXBhcmVmbikpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4vX2h0bWwnKTtcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgYXJyYXlTbGljZSA9IFtdLnNsaWNlO1xuXG4vLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2UgRVMzIHN0cmluZ3MgYW5kIERPTSBvYmplY3RzXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICBpZiAoaHRtbCkgYXJyYXlTbGljZS5jYWxsKGh0bWwpO1xufSksICdBcnJheScsIHtcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKGJlZ2luLCBlbmQpIHtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgodGhpcy5sZW5ndGgpO1xuICAgIHZhciBrbGFzcyA9IGNvZih0aGlzKTtcbiAgICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IGVuZDtcbiAgICBpZiAoa2xhc3MgPT0gJ0FycmF5JykgcmV0dXJuIGFycmF5U2xpY2UuY2FsbCh0aGlzLCBiZWdpbiwgZW5kKTtcbiAgICB2YXIgc3RhcnQgPSB0b0Fic29sdXRlSW5kZXgoYmVnaW4sIGxlbik7XG4gICAgdmFyIHVwVG8gPSB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW4pO1xuICAgIHZhciBzaXplID0gdG9MZW5ndGgodXBUbyAtIHN0YXJ0KTtcbiAgICB2YXIgY2xvbmVkID0gbmV3IEFycmF5KHNpemUpO1xuICAgIHZhciBpID0gMDtcbiAgICBmb3IgKDsgaSA8IHNpemU7IGkrKykgY2xvbmVkW2ldID0ga2xhc3MgPT0gJ1N0cmluZydcbiAgICAgID8gdGhpcy5jaGFyQXQoc3RhcnQgKyBpKVxuICAgICAgOiB0aGlzW3N0YXJ0ICsgaV07XG4gICAgcmV0dXJuIGNsb25lZDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmpvaW4oc2VwYXJhdG9yKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgYXJyYXlKb2luID0gW10uam9pbjtcblxuLy8gZmFsbGJhY2sgZm9yIG5vdCBhcnJheS1saWtlIHN0cmluZ3NcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKHJlcXVpcmUoJy4vX2lvYmplY3QnKSAhPSBPYmplY3QgfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShhcnJheUpvaW4pKSwgJ0FycmF5Jywge1xuICBqb2luOiBmdW5jdGlvbiBqb2luKHNlcGFyYXRvcikge1xuICAgIHJldHVybiBhcnJheUpvaW4uY2FsbCh0b0lPYmplY3QodGhpcyksIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkID8gJywnIDogc2VwYXJhdG9yKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fY3JlYXRlLXByb3BlcnR5Jyk7XG5cbi8vIFdlYktpdCBBcnJheS5vZiBpc24ndCBnZW5lcmljXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGKCkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiAhKEFycmF5Lm9mLmNhbGwoRikgaW5zdGFuY2VvZiBGKTtcbn0pLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMi4zIEFycmF5Lm9mKCAuLi5pdGVtcylcbiAgb2Y6IGZ1bmN0aW9uIG9mKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgcmVzdWx0ID0gbmV3ICh0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nID8gdGhpcyA6IEFycmF5KShhTGVuKTtcbiAgICB3aGlsZSAoYUxlbiA+IGluZGV4KSBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgIHJlc3VsdC5sZW5ndGggPSBhTGVuO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuL19pdGVyLWNhbGwnKTtcbnZhciBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgZ2V0SXRlckZuID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKShmdW5jdGlvbiAoaXRlcikgeyBBcnJheS5mcm9tKGl0ZXIpOyB9KSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjIuMSBBcnJheS5mcm9tKGFycmF5TGlrZSwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gIGZyb206IGZ1bmN0aW9uIGZyb20oYXJyYXlMaWtlIC8qICwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KGFycmF5TGlrZSk7XG4gICAgdmFyIEMgPSB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nID8gdGhpcyA6IEFycmF5O1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgbWFwZm4gPSBhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWQ7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgaXRlckZuID0gZ2V0SXRlckZuKE8pO1xuICAgIHZhciBsZW5ndGgsIHJlc3VsdCwgc3RlcCwgaXRlcmF0b3I7XG4gICAgaWYgKG1hcHBpbmcpIG1hcGZuID0gY3R4KG1hcGZuLCBhTGVuID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCwgMik7XG4gICAgLy8gaWYgb2JqZWN0IGlzbid0IGl0ZXJhYmxlIG9yIGl0J3MgYXJyYXkgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yIC0gdXNlIHNpbXBsZSBjYXNlXG4gICAgaWYgKGl0ZXJGbiAhPSB1bmRlZmluZWQgJiYgIShDID09IEFycmF5ICYmIGlzQXJyYXlJdGVyKGl0ZXJGbikpKSB7XG4gICAgICBmb3IgKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoTyksIHJlc3VsdCA9IG5ldyBDKCk7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaW5kZXgrKykge1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBtYXBwaW5nID8gY2FsbChpdGVyYXRvciwgbWFwZm4sIFtzdGVwLnZhbHVlLCBpbmRleF0sIHRydWUpIDogc3RlcC52YWx1ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICAgIGZvciAocmVzdWx0ID0gbmV3IEMobGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IG1hcGZuKE9baW5kZXhdLCBpbmRleCkgOiBPW2luZGV4XSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdC5sZW5ndGggPSBpbmRleDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIi8vIDIyLjEuMi4yIC8gMTUuNC4zLjIgQXJyYXkuaXNBcnJheShhcmcpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ0FycmF5JywgeyBpc0FycmF5OiByZXF1aXJlKCcuL19pcy1hcnJheScpIH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBOVU1CRVIgPSAnbnVtYmVyJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaGludCkge1xuICBpZiAoaGludCAhPT0gJ3N0cmluZycgJiYgaGludCAhPT0gTlVNQkVSICYmIGhpbnQgIT09ICdkZWZhdWx0JykgdGhyb3cgVHlwZUVycm9yKCdJbmNvcnJlY3QgaGludCcpO1xuICByZXR1cm4gdG9QcmltaXRpdmUoYW5PYmplY3QodGhpcyksIGhpbnQgIT0gTlVNQkVSKTtcbn07XG4iLCJ2YXIgVE9fUFJJTUlUSVZFID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvUHJpbWl0aXZlJyk7XG52YXIgcHJvdG8gPSBEYXRlLnByb3RvdHlwZTtcblxuaWYgKCEoVE9fUFJJTUlUSVZFIGluIHByb3RvKSkgcmVxdWlyZSgnLi9faGlkZScpKHByb3RvLCBUT19QUklNSVRJVkUsIHJlcXVpcmUoJy4vX2RhdGUtdG8tcHJpbWl0aXZlJykpO1xuIiwidmFyIERhdGVQcm90byA9IERhdGUucHJvdG90eXBlO1xudmFyIElOVkFMSURfREFURSA9ICdJbnZhbGlkIERhdGUnO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgJHRvU3RyaW5nID0gRGF0ZVByb3RvW1RPX1NUUklOR107XG52YXIgZ2V0VGltZSA9IERhdGVQcm90by5nZXRUaW1lO1xuaWYgKG5ldyBEYXRlKE5hTikgKyAnJyAhPSBJTlZBTElEX0RBVEUpIHtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShEYXRlUHJvdG8sIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgdmFyIHZhbHVlID0gZ2V0VGltZS5jYWxsKHRoaXMpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlID8gJHRvU3RyaW5nLmNhbGwodGhpcykgOiBJTlZBTElEX0RBVEU7XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjAuMy40LjM2IC8gMTUuOS41LjQzIERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nKClcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgZ2V0VGltZSA9IERhdGUucHJvdG90eXBlLmdldFRpbWU7XG52YXIgJHRvSVNPU3RyaW5nID0gRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmc7XG5cbnZhciBseiA9IGZ1bmN0aW9uIChudW0pIHtcbiAgcmV0dXJuIG51bSA+IDkgPyBudW0gOiAnMCcgKyBudW07XG59O1xuXG4vLyBQaGFudG9tSlMgLyBvbGQgV2ViS2l0IGhhcyBhIGJyb2tlbiBpbXBsZW1lbnRhdGlvbnNcbm1vZHVsZS5leHBvcnRzID0gKGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICR0b0lTT1N0cmluZy5jYWxsKG5ldyBEYXRlKC01ZTEzIC0gMSkpICE9ICcwMzg1LTA3LTI1VDA3OjA2OjM5Ljk5OVonO1xufSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgJHRvSVNPU3RyaW5nLmNhbGwobmV3IERhdGUoTmFOKSk7XG59KSkgPyBmdW5jdGlvbiB0b0lTT1N0cmluZygpIHtcbiAgaWYgKCFpc0Zpbml0ZShnZXRUaW1lLmNhbGwodGhpcykpKSB0aHJvdyBSYW5nZUVycm9yKCdJbnZhbGlkIHRpbWUgdmFsdWUnKTtcbiAgdmFyIGQgPSB0aGlzO1xuICB2YXIgeSA9IGQuZ2V0VVRDRnVsbFllYXIoKTtcbiAgdmFyIG0gPSBkLmdldFVUQ01pbGxpc2Vjb25kcygpO1xuICB2YXIgcyA9IHkgPCAwID8gJy0nIDogeSA+IDk5OTkgPyAnKycgOiAnJztcbiAgcmV0dXJuIHMgKyAoJzAwMDAwJyArIE1hdGguYWJzKHkpKS5zbGljZShzID8gLTYgOiAtNCkgK1xuICAgICctJyArIGx6KGQuZ2V0VVRDTW9udGgoKSArIDEpICsgJy0nICsgbHooZC5nZXRVVENEYXRlKCkpICtcbiAgICAnVCcgKyBseihkLmdldFVUQ0hvdXJzKCkpICsgJzonICsgbHooZC5nZXRVVENNaW51dGVzKCkpICtcbiAgICAnOicgKyBseihkLmdldFVUQ1NlY29uZHMoKSkgKyAnLicgKyAobSA+IDk5ID8gbSA6ICcwJyArIGx6KG0pKSArICdaJztcbn0gOiAkdG9JU09TdHJpbmc7XG4iLCIvLyAyMC4zLjQuMzYgLyAxNS45LjUuNDMgRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcoKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0lTT1N0cmluZyA9IHJlcXVpcmUoJy4vX2RhdGUtdG8taXNvLXN0cmluZycpO1xuXG4vLyBQaGFudG9tSlMgLyBvbGQgV2ViS2l0IGhhcyBhIGJyb2tlbiBpbXBsZW1lbnRhdGlvbnNcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nICE9PSB0b0lTT1N0cmluZyksICdEYXRlJywge1xuICB0b0lTT1N0cmluZzogdG9JU09TdHJpbmdcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBuZXcgRGF0ZShOYU4pLnRvSlNPTigpICE9PSBudWxsXG4gICAgfHwgRGF0ZS5wcm90b3R5cGUudG9KU09OLmNhbGwoeyB0b0lTT1N0cmluZzogZnVuY3Rpb24gKCkgeyByZXR1cm4gMTsgfSB9KSAhPT0gMTtcbn0pLCAnRGF0ZScsIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIHRvSlNPTjogZnVuY3Rpb24gdG9KU09OKGtleSkge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIHB2ID0gdG9QcmltaXRpdmUoTyk7XG4gICAgcmV0dXJuIHR5cGVvZiBwdiA9PSAnbnVtYmVyJyAmJiAhaXNGaW5pdGUocHYpID8gbnVsbCA6IE8udG9JU09TdHJpbmcoKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4zLjMuMSAvIDE1LjkuNC40IERhdGUubm93KClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnRGF0ZScsIHsgbm93OiBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTsgfSB9KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjE0IFN0cmluZy5wcm90b3R5cGUuc3VwKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3N1cCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzdXAoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N1cCcsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjEzIFN0cmluZy5wcm90b3R5cGUuc3ViKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3N1YicsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzdWIoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N1YicsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjEyIFN0cmluZy5wcm90b3R5cGUuc3RyaWtlKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3N0cmlrZScsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzdHJpa2UoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N0cmlrZScsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjExIFN0cmluZy5wcm90b3R5cGUuc21hbGwoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc21hbGwnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc21hbGwoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3NtYWxsJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTAgU3RyaW5nLnByb3RvdHlwZS5saW5rKHVybClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2xpbmsnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gbGluayh1cmwpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYScsICdocmVmJywgdXJsKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuOSBTdHJpbmcucHJvdG90eXBlLml0YWxpY3MoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnaXRhbGljcycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpdGFsaWNzKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdpJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuOCBTdHJpbmcucHJvdG90eXBlLmZvbnRzaXplKHNpemUpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdmb250c2l6ZScsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmb250c2l6ZShzaXplKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2ZvbnQnLCAnc2l6ZScsIHNpemUpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy43IFN0cmluZy5wcm90b3R5cGUuZm9udGNvbG9yKGNvbG9yKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnZm9udGNvbG9yJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZvbnRjb2xvcihjb2xvcikge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdmb250JywgJ2NvbG9yJywgY29sb3IpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy42IFN0cmluZy5wcm90b3R5cGUuZml4ZWQoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnZml4ZWQnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gZml4ZWQoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3R0JywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNSBTdHJpbmcucHJvdG90eXBlLmJvbGQoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYm9sZCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBib2xkKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdiJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNCBTdHJpbmcucHJvdG90eXBlLmJsaW5rKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JsaW5rJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGJsaW5rKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdibGluaycsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjMgU3RyaW5nLnByb3RvdHlwZS5iaWcoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYmlnJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGJpZygpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYmlnJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMiBTdHJpbmcucHJvdG90eXBlLmFuY2hvcihuYW1lKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYW5jaG9yJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGFuY2hvcihuYW1lKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2EnLCAnbmFtZScsIG5hbWUpO1xuICB9O1xufSk7XG4iLCIvLyAyMS4xLjMuMTggU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoKHNlYXJjaFN0cmluZyBbLCBwb3NpdGlvbiBdKVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGNvbnRleHQgPSByZXF1aXJlKCcuL19zdHJpbmctY29udGV4dCcpO1xudmFyIFNUQVJUU19XSVRIID0gJ3N0YXJ0c1dpdGgnO1xudmFyICRzdGFydHNXaXRoID0gJydbU1RBUlRTX1dJVEhdO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKFNUQVJUU19XSVRIKSwgJ1N0cmluZycsIHtcbiAgc3RhcnRzV2l0aDogZnVuY3Rpb24gc3RhcnRzV2l0aChzZWFyY2hTdHJpbmcgLyogLCBwb3NpdGlvbiA9IDAgKi8pIHtcbiAgICB2YXIgdGhhdCA9IGNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBTVEFSVFNfV0lUSCk7XG4gICAgdmFyIGluZGV4ID0gdG9MZW5ndGgoTWF0aC5taW4oYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRoYXQubGVuZ3RoKSk7XG4gICAgdmFyIHNlYXJjaCA9IFN0cmluZyhzZWFyY2hTdHJpbmcpO1xuICAgIHJldHVybiAkc3RhcnRzV2l0aFxuICAgICAgPyAkc3RhcnRzV2l0aC5jYWxsKHRoYXQsIHNlYXJjaCwgaW5kZXgpXG4gICAgICA6IHRoYXQuc2xpY2UoaW5kZXgsIGluZGV4ICsgc2VhcmNoLmxlbmd0aCkgPT09IHNlYXJjaDtcbiAgfVxufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4zLjEzIFN0cmluZy5wcm90b3R5cGUucmVwZWF0KGNvdW50KVxuICByZXBlYXQ6IHJlcXVpcmUoJy4vX3N0cmluZy1yZXBlYXQnKVxufSk7XG4iLCIvLyAyMS4xLjMuNyBTdHJpbmcucHJvdG90eXBlLmluY2x1ZGVzKHNlYXJjaFN0cmluZywgcG9zaXRpb24gPSAwKVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjb250ZXh0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWNvbnRleHQnKTtcbnZhciBJTkNMVURFUyA9ICdpbmNsdWRlcyc7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMtaXMtcmVnZXhwJykoSU5DTFVERVMpLCAnU3RyaW5nJywge1xuICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoU3RyaW5nIC8qICwgcG9zaXRpb24gPSAwICovKSB7XG4gICAgcmV0dXJuICEhfmNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBJTkNMVURFUylcbiAgICAgIC5pbmRleE9mKHNlYXJjaFN0cmluZywgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsIi8vIDIxLjEuMy42IFN0cmluZy5wcm90b3R5cGUuZW5kc1dpdGgoc2VhcmNoU3RyaW5nIFssIGVuZFBvc2l0aW9uXSlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjb250ZXh0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWNvbnRleHQnKTtcbnZhciBFTkRTX1dJVEggPSAnZW5kc1dpdGgnO1xudmFyICRlbmRzV2l0aCA9ICcnW0VORFNfV0lUSF07XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMtaXMtcmVnZXhwJykoRU5EU19XSVRIKSwgJ1N0cmluZycsIHtcbiAgZW5kc1dpdGg6IGZ1bmN0aW9uIGVuZHNXaXRoKHNlYXJjaFN0cmluZyAvKiAsIGVuZFBvc2l0aW9uID0gQGxlbmd0aCAqLykge1xuICAgIHZhciB0aGF0ID0gY29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIEVORFNfV0lUSCk7XG4gICAgdmFyIGVuZFBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRoYXQubGVuZ3RoKTtcbiAgICB2YXIgZW5kID0gZW5kUG9zaXRpb24gPT09IHVuZGVmaW5lZCA/IGxlbiA6IE1hdGgubWluKHRvTGVuZ3RoKGVuZFBvc2l0aW9uKSwgbGVuKTtcbiAgICB2YXIgc2VhcmNoID0gU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuICRlbmRzV2l0aFxuICAgICAgPyAkZW5kc1dpdGguY2FsbCh0aGF0LCBzZWFyY2gsIGVuZClcbiAgICAgIDogdGhhdC5zbGljZShlbmQgLSBzZWFyY2gubGVuZ3RoLCBlbmQpID09PSBzZWFyY2g7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkYXQgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKShmYWxzZSk7XG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4zLjMgU3RyaW5nLnByb3RvdHlwZS5jb2RlUG9pbnRBdChwb3MpXG4gIGNvZGVQb2ludEF0OiBmdW5jdGlvbiBjb2RlUG9pbnRBdChwb3MpIHtcbiAgICByZXR1cm4gJGF0KHRoaXMsIHBvcyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4vLyAyMS4xLjMuMjcgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKFN0cmluZywgJ1N0cmluZycsIGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICB0aGlzLl90ID0gU3RyaW5nKGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4vLyAyMS4xLjUuMi4xICVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBPID0gdGhpcy5fdDtcbiAgdmFyIGluZGV4ID0gdGhpcy5faTtcbiAgdmFyIHBvaW50O1xuICBpZiAoaW5kZXggPj0gTy5sZW5ndGgpIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgcG9pbnQgPSAkYXQoTywgaW5kZXgpO1xuICB0aGlzLl9pICs9IHBvaW50Lmxlbmd0aDtcbiAgcmV0dXJuIHsgdmFsdWU6IHBvaW50LCBkb25lOiBmYWxzZSB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMS4xLjMuMjUgU3RyaW5nLnByb3RvdHlwZS50cmltKClcbnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW0nLCBmdW5jdGlvbiAoJHRyaW0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW0oKSB7XG4gICAgcmV0dXJuICR0cmltKHRoaXMsIDMpO1xuICB9O1xufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4yLjQgU3RyaW5nLnJhdyhjYWxsU2l0ZSwgLi4uc3Vic3RpdHV0aW9ucylcbiAgcmF3OiBmdW5jdGlvbiByYXcoY2FsbFNpdGUpIHtcbiAgICB2YXIgdHBsID0gdG9JT2JqZWN0KGNhbGxTaXRlLnJhdyk7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRwbC5sZW5ndGgpO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgcmVzID0gW107XG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChsZW4gPiBpKSB7XG4gICAgICByZXMucHVzaChTdHJpbmcodHBsW2krK10pKTtcbiAgICAgIGlmIChpIDwgYUxlbikgcmVzLnB1c2goU3RyaW5nKGFyZ3VtZW50c1tpXSkpO1xuICAgIH0gcmV0dXJuIHJlcy5qb2luKCcnKTtcbiAgfVxufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgZnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZTtcbnZhciAkZnJvbUNvZGVQb2ludCA9IFN0cmluZy5mcm9tQ29kZVBvaW50O1xuXG4vLyBsZW5ndGggc2hvdWxkIGJlIDEsIG9sZCBGRiBwcm9ibGVtXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghISRmcm9tQ29kZVBvaW50ICYmICRmcm9tQ29kZVBvaW50Lmxlbmd0aCAhPSAxKSwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4yLjIgU3RyaW5nLmZyb21Db2RlUG9pbnQoLi4uY29kZVBvaW50cylcbiAgZnJvbUNvZGVQb2ludDogZnVuY3Rpb24gZnJvbUNvZGVQb2ludCh4KSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICB2YXIgcmVzID0gW107XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgY29kZTtcbiAgICB3aGlsZSAoYUxlbiA+IGkpIHtcbiAgICAgIGNvZGUgPSArYXJndW1lbnRzW2krK107XG4gICAgICBpZiAodG9BYnNvbHV0ZUluZGV4KGNvZGUsIDB4MTBmZmZmKSAhPT0gY29kZSkgdGhyb3cgUmFuZ2VFcnJvcihjb2RlICsgJyBpcyBub3QgYSB2YWxpZCBjb2RlIHBvaW50Jyk7XG4gICAgICByZXMucHVzaChjb2RlIDwgMHgxMDAwMFxuICAgICAgICA/IGZyb21DaGFyQ29kZShjb2RlKVxuICAgICAgICA6IGZyb21DaGFyQ29kZSgoKGNvZGUgLT0gMHgxMDAwMCkgPj4gMTApICsgMHhkODAwLCBjb2RlICUgMHg0MDAgKyAweGRjMDApXG4gICAgICApO1xuICAgIH0gcmV0dXJuIHJlcy5qb2luKCcnKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMzQgTWF0aC50cnVuYyh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICB0cnVuYzogZnVuY3Rpb24gdHJ1bmMoaXQpIHtcbiAgICByZXR1cm4gKGl0ID4gMCA/IE1hdGguZmxvb3IgOiBNYXRoLmNlaWwpKGl0KTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMzMgTWF0aC50YW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGV4cG0xID0gcmVxdWlyZSgnLi9fbWF0aC1leHBtMScpO1xudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHRhbmg6IGZ1bmN0aW9uIHRhbmgoeCkge1xuICAgIHZhciBhID0gZXhwbTEoeCA9ICt4KTtcbiAgICB2YXIgYiA9IGV4cG0xKC14KTtcbiAgICByZXR1cm4gYSA9PSBJbmZpbml0eSA/IDEgOiBiID09IEluZmluaXR5ID8gLTEgOiAoYSAtIGIpIC8gKGV4cCh4KSArIGV4cCgteCkpO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4zMCBNYXRoLnNpbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZXhwbTEgPSByZXF1aXJlKCcuL19tYXRoLWV4cG0xJyk7XG52YXIgZXhwID0gTWF0aC5leHA7XG5cbi8vIFY4IG5lYXIgQ2hyb21pdW0gMzggaGFzIGEgcHJvYmxlbSB3aXRoIHZlcnkgc21hbGwgbnVtYmVyc1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICFNYXRoLnNpbmgoLTJlLTE3KSAhPSAtMmUtMTc7XG59KSwgJ01hdGgnLCB7XG4gIHNpbmg6IGZ1bmN0aW9uIHNpbmgoeCkge1xuICAgIHJldHVybiBNYXRoLmFicyh4ID0gK3gpIDwgMVxuICAgICAgPyAoZXhwbTEoeCkgLSBleHBtMSgteCkpIC8gMlxuICAgICAgOiAoZXhwKHggLSAxKSAtIGV4cCgteCAtIDEpKSAqIChNYXRoLkUgLyAyKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMjggTWF0aC5zaWduKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IHNpZ246IHJlcXVpcmUoJy4vX21hdGgtc2lnbicpIH0pO1xuIiwiLy8gMjAuMi4yLjIyIE1hdGgubG9nMih4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBsb2cyOiBmdW5jdGlvbiBsb2cyKHgpIHtcbiAgICByZXR1cm4gTWF0aC5sb2coeCkgLyBNYXRoLkxOMjtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMjAgTWF0aC5sb2cxcCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBsb2cxcDogcmVxdWlyZSgnLi9fbWF0aC1sb2cxcCcpIH0pO1xuIiwiLy8gMjAuMi4yLjIxIE1hdGgubG9nMTAoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgbG9nMTA6IGZ1bmN0aW9uIGxvZzEwKHgpIHtcbiAgICByZXR1cm4gTWF0aC5sb2coeCkgKiBNYXRoLkxPRzEwRTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMTggTWF0aC5pbXVsKHgsIHkpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRpbXVsID0gTWF0aC5pbXVsO1xuXG4vLyBzb21lIFdlYktpdCB2ZXJzaW9ucyBmYWlscyB3aXRoIGJpZyBudW1iZXJzLCBzb21lIGhhcyB3cm9uZyBhcml0eVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICRpbXVsKDB4ZmZmZmZmZmYsIDUpICE9IC01IHx8ICRpbXVsLmxlbmd0aCAhPSAyO1xufSksICdNYXRoJywge1xuICBpbXVsOiBmdW5jdGlvbiBpbXVsKHgsIHkpIHtcbiAgICB2YXIgVUlOVDE2ID0gMHhmZmZmO1xuICAgIHZhciB4biA9ICt4O1xuICAgIHZhciB5biA9ICt5O1xuICAgIHZhciB4bCA9IFVJTlQxNiAmIHhuO1xuICAgIHZhciB5bCA9IFVJTlQxNiAmIHluO1xuICAgIHJldHVybiAwIHwgeGwgKiB5bCArICgoVUlOVDE2ICYgeG4gPj4+IDE2KSAqIHlsICsgeGwgKiAoVUlOVDE2ICYgeW4gPj4+IDE2KSA8PCAxNiA+Pj4gMCk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjE3IE1hdGguaHlwb3QoW3ZhbHVlMVssIHZhbHVlMlssIOKApiBdXV0pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFicyA9IE1hdGguYWJzO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGh5cG90OiBmdW5jdGlvbiBoeXBvdCh2YWx1ZTEsIHZhbHVlMikgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgdmFyIHN1bSA9IDA7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgbGFyZyA9IDA7XG4gICAgdmFyIGFyZywgZGl2O1xuICAgIHdoaWxlIChpIDwgYUxlbikge1xuICAgICAgYXJnID0gYWJzKGFyZ3VtZW50c1tpKytdKTtcbiAgICAgIGlmIChsYXJnIDwgYXJnKSB7XG4gICAgICAgIGRpdiA9IGxhcmcgLyBhcmc7XG4gICAgICAgIHN1bSA9IHN1bSAqIGRpdiAqIGRpdiArIDE7XG4gICAgICAgIGxhcmcgPSBhcmc7XG4gICAgICB9IGVsc2UgaWYgKGFyZyA+IDApIHtcbiAgICAgICAgZGl2ID0gYXJnIC8gbGFyZztcbiAgICAgICAgc3VtICs9IGRpdiAqIGRpdjtcbiAgICAgIH0gZWxzZSBzdW0gKz0gYXJnO1xuICAgIH1cbiAgICByZXR1cm4gbGFyZyA9PT0gSW5maW5pdHkgPyBJbmZpbml0eSA6IGxhcmcgKiBNYXRoLnNxcnQoc3VtKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMTYgTWF0aC5mcm91bmQoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgZnJvdW5kOiByZXF1aXJlKCcuL19tYXRoLWZyb3VuZCcpIH0pO1xuIiwiLy8gMjAuMi4yLjE0IE1hdGguZXhwbTEoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGV4cG0xID0gcmVxdWlyZSgnLi9fbWF0aC1leHBtMScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICgkZXhwbTEgIT0gTWF0aC5leHBtMSksICdNYXRoJywgeyBleHBtMTogJGV4cG0xIH0pO1xuIiwiLy8gMjAuMi4yLjEyIE1hdGguY29zaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBleHAgPSBNYXRoLmV4cDtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjb3NoOiBmdW5jdGlvbiBjb3NoKHgpIHtcbiAgICByZXR1cm4gKGV4cCh4ID0gK3gpICsgZXhwKC14KSkgLyAyO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4xMSBNYXRoLmNsejMyKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNsejMyOiBmdW5jdGlvbiBjbHozMih4KSB7XG4gICAgcmV0dXJuICh4ID4+Pj0gMCkgPyAzMSAtIE1hdGguZmxvb3IoTWF0aC5sb2coeCArIDAuNSkgKiBNYXRoLkxPRzJFKSA6IDMyO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi45IE1hdGguY2JydCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBzaWduID0gcmVxdWlyZSgnLi9fbWF0aC1zaWduJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY2JydDogZnVuY3Rpb24gY2JydCh4KSB7XG4gICAgcmV0dXJuIHNpZ24oeCA9ICt4KSAqIE1hdGgucG93KE1hdGguYWJzKHgpLCAxIC8gMyk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjcgTWF0aC5hdGFuaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkYXRhbmggPSBNYXRoLmF0YW5oO1xuXG4vLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYXRhbmgoLTApIC0+IDBcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYXRhbmggJiYgMSAvICRhdGFuaCgtMCkgPCAwKSwgJ01hdGgnLCB7XG4gIGF0YW5oOiBmdW5jdGlvbiBhdGFuaCh4KSB7XG4gICAgcmV0dXJuICh4ID0gK3gpID09IDAgPyB4IDogTWF0aC5sb2coKDEgKyB4KSAvICgxIC0geCkpIC8gMjtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuNSBNYXRoLmFzaW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRhc2luaCA9IE1hdGguYXNpbmg7XG5cbmZ1bmN0aW9uIGFzaW5oKHgpIHtcbiAgcmV0dXJuICFpc0Zpbml0ZSh4ID0gK3gpIHx8IHggPT0gMCA/IHggOiB4IDwgMCA/IC1hc2luaCgteCkgOiBNYXRoLmxvZyh4ICsgTWF0aC5zcXJ0KHggKiB4ICsgMSkpO1xufVxuXG4vLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYXNpbmgoMCkgLT4gLTBcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYXNpbmggJiYgMSAvICRhc2luaCgwKSA+IDApLCAnTWF0aCcsIHsgYXNpbmg6IGFzaW5oIH0pO1xuIiwiLy8gMjAuMi4yLjMgTWF0aC5hY29zaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBsb2cxcCA9IHJlcXVpcmUoJy4vX21hdGgtbG9nMXAnKTtcbnZhciBzcXJ0ID0gTWF0aC5zcXJ0O1xudmFyICRhY29zaCA9IE1hdGguYWNvc2g7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYWNvc2hcbiAgLy8gVjggYnVnOiBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzUwOVxuICAmJiBNYXRoLmZsb29yKCRhY29zaChOdW1iZXIuTUFYX1ZBTFVFKSkgPT0gNzEwXG4gIC8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hY29zaChJbmZpbml0eSkgLT4gTmFOXG4gICYmICRhY29zaChJbmZpbml0eSkgPT0gSW5maW5pdHlcbiksICdNYXRoJywge1xuICBhY29zaDogZnVuY3Rpb24gYWNvc2goeCkge1xuICAgIHJldHVybiAoeCA9ICt4KSA8IDEgPyBOYU4gOiB4ID4gOTQ5MDYyNjUuNjI0MjUxNTZcbiAgICAgID8gTWF0aC5sb2coeCkgKyBNYXRoLkxOMlxuICAgICAgOiBsb2cxcCh4IC0gMSArIHNxcnQoeCAtIDEpICogc3FydCh4ICsgMSkpO1xuICB9XG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fcGFyc2UtaW50Jyk7XG4vLyAyMC4xLjIuMTMgTnVtYmVyLnBhcnNlSW50KHN0cmluZywgcmFkaXgpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChOdW1iZXIucGFyc2VJbnQgIT0gJHBhcnNlSW50KSwgJ051bWJlcicsIHsgcGFyc2VJbnQ6ICRwYXJzZUludCB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19wYXJzZS1mbG9hdCcpO1xuLy8gMjAuMS4yLjEyIE51bWJlci5wYXJzZUZsb2F0KHN0cmluZylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKE51bWJlci5wYXJzZUZsb2F0ICE9ICRwYXJzZUZsb2F0KSwgJ051bWJlcicsIHsgcGFyc2VGbG9hdDogJHBhcnNlRmxvYXQgfSk7XG4iLCIvLyAyMC4xLjIuMTAgTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBNSU5fU0FGRV9JTlRFR0VSOiAtMHgxZmZmZmZmZmZmZmZmZiB9KTtcbiIsIi8vIDIwLjEuMi42IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgTUFYX1NBRkVfSU5URUdFUjogMHgxZmZmZmZmZmZmZmZmZiB9KTtcbiIsIi8vIDIwLjEuMi41IE51bWJlci5pc1NhZmVJbnRlZ2VyKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaXNJbnRlZ2VyID0gcmVxdWlyZSgnLi9faXMtaW50ZWdlcicpO1xudmFyIGFicyA9IE1hdGguYWJzO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtcbiAgaXNTYWZlSW50ZWdlcjogZnVuY3Rpb24gaXNTYWZlSW50ZWdlcihudW1iZXIpIHtcbiAgICByZXR1cm4gaXNJbnRlZ2VyKG51bWJlcikgJiYgYWJzKG51bWJlcikgPD0gMHgxZmZmZmZmZmZmZmZmZjtcbiAgfVxufSk7XG4iLCIvLyAyMC4xLjIuNCBOdW1iZXIuaXNOYU4obnVtYmVyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7XG4gIGlzTmFOOiBmdW5jdGlvbiBpc05hTihudW1iZXIpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgcmV0dXJuIG51bWJlciAhPSBudW1iZXI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMS4yLjMgTnVtYmVyLmlzSW50ZWdlcihudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgaXNJbnRlZ2VyOiByZXF1aXJlKCcuL19pcy1pbnRlZ2VyJykgfSk7XG4iLCIvLyAyMC4xLjIuMiBOdW1iZXIuaXNGaW5pdGUobnVtYmVyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBfaXNGaW5pdGUgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5pc0Zpbml0ZTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7XG4gIGlzRmluaXRlOiBmdW5jdGlvbiBpc0Zpbml0ZShpdCkge1xuICAgIHJldHVybiB0eXBlb2YgaXQgPT0gJ251bWJlcicgJiYgX2lzRmluaXRlKGl0KTtcbiAgfVxufSk7XG4iLCIvLyAyMC4xLjIuMSBOdW1iZXIuRVBTSUxPTlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IEVQU0lMT046IE1hdGgucG93KDIsIC01MikgfSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgYU51bWJlclZhbHVlID0gcmVxdWlyZSgnLi9fYS1udW1iZXItdmFsdWUnKTtcbnZhciAkdG9QcmVjaXNpb24gPSAxLjAudG9QcmVjaXNpb247XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKCRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIElFNy1cbiAgcmV0dXJuICR0b1ByZWNpc2lvbi5jYWxsKDEsIHVuZGVmaW5lZCkgIT09ICcxJztcbn0pIHx8ICEkZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBWOCB+IEFuZHJvaWQgNC4zLVxuICAkdG9QcmVjaXNpb24uY2FsbCh7fSk7XG59KSksICdOdW1iZXInLCB7XG4gIHRvUHJlY2lzaW9uOiBmdW5jdGlvbiB0b1ByZWNpc2lvbihwcmVjaXNpb24pIHtcbiAgICB2YXIgdGhhdCA9IGFOdW1iZXJWYWx1ZSh0aGlzLCAnTnVtYmVyI3RvUHJlY2lzaW9uOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnKTtcbiAgICByZXR1cm4gcHJlY2lzaW9uID09PSB1bmRlZmluZWQgPyAkdG9QcmVjaXNpb24uY2FsbCh0aGF0KSA6ICR0b1ByZWNpc2lvbi5jYWxsKHRoYXQsIHByZWNpc2lvbik7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgYU51bWJlclZhbHVlID0gcmVxdWlyZSgnLi9fYS1udW1iZXItdmFsdWUnKTtcbnZhciByZXBlYXQgPSByZXF1aXJlKCcuL19zdHJpbmctcmVwZWF0Jyk7XG52YXIgJHRvRml4ZWQgPSAxLjAudG9GaXhlZDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgZGF0YSA9IFswLCAwLCAwLCAwLCAwLCAwXTtcbnZhciBFUlJPUiA9ICdOdW1iZXIudG9GaXhlZDogaW5jb3JyZWN0IGludm9jYXRpb24hJztcbnZhciBaRVJPID0gJzAnO1xuXG52YXIgbXVsdGlwbHkgPSBmdW5jdGlvbiAobiwgYykge1xuICB2YXIgaSA9IC0xO1xuICB2YXIgYzIgPSBjO1xuICB3aGlsZSAoKytpIDwgNikge1xuICAgIGMyICs9IG4gKiBkYXRhW2ldO1xuICAgIGRhdGFbaV0gPSBjMiAlIDFlNztcbiAgICBjMiA9IGZsb29yKGMyIC8gMWU3KTtcbiAgfVxufTtcbnZhciBkaXZpZGUgPSBmdW5jdGlvbiAobikge1xuICB2YXIgaSA9IDY7XG4gIHZhciBjID0gMDtcbiAgd2hpbGUgKC0taSA+PSAwKSB7XG4gICAgYyArPSBkYXRhW2ldO1xuICAgIGRhdGFbaV0gPSBmbG9vcihjIC8gbik7XG4gICAgYyA9IChjICUgbikgKiAxZTc7XG4gIH1cbn07XG52YXIgbnVtVG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBpID0gNjtcbiAgdmFyIHMgPSAnJztcbiAgd2hpbGUgKC0taSA+PSAwKSB7XG4gICAgaWYgKHMgIT09ICcnIHx8IGkgPT09IDAgfHwgZGF0YVtpXSAhPT0gMCkge1xuICAgICAgdmFyIHQgPSBTdHJpbmcoZGF0YVtpXSk7XG4gICAgICBzID0gcyA9PT0gJycgPyB0IDogcyArIHJlcGVhdC5jYWxsKFpFUk8sIDcgLSB0Lmxlbmd0aCkgKyB0O1xuICAgIH1cbiAgfSByZXR1cm4gcztcbn07XG52YXIgcG93ID0gZnVuY3Rpb24gKHgsIG4sIGFjYykge1xuICByZXR1cm4gbiA9PT0gMCA/IGFjYyA6IG4gJSAyID09PSAxID8gcG93KHgsIG4gLSAxLCBhY2MgKiB4KSA6IHBvdyh4ICogeCwgbiAvIDIsIGFjYyk7XG59O1xudmFyIGxvZyA9IGZ1bmN0aW9uICh4KSB7XG4gIHZhciBuID0gMDtcbiAgdmFyIHgyID0geDtcbiAgd2hpbGUgKHgyID49IDQwOTYpIHtcbiAgICBuICs9IDEyO1xuICAgIHgyIC89IDQwOTY7XG4gIH1cbiAgd2hpbGUgKHgyID49IDIpIHtcbiAgICBuICs9IDE7XG4gICAgeDIgLz0gMjtcbiAgfSByZXR1cm4gbjtcbn07XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKCEhJHRvRml4ZWQgJiYgKFxuICAwLjAwMDA4LnRvRml4ZWQoMykgIT09ICcwLjAwMCcgfHxcbiAgMC45LnRvRml4ZWQoMCkgIT09ICcxJyB8fFxuICAxLjI1NS50b0ZpeGVkKDIpICE9PSAnMS4yNScgfHxcbiAgMTAwMDAwMDAwMDAwMDAwMDEyOC4wLnRvRml4ZWQoMCkgIT09ICcxMDAwMDAwMDAwMDAwMDAwMTI4J1xuKSB8fCAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIC8vIFY4IH4gQW5kcm9pZCA0LjMtXG4gICR0b0ZpeGVkLmNhbGwoe30pO1xufSkpLCAnTnVtYmVyJywge1xuICB0b0ZpeGVkOiBmdW5jdGlvbiB0b0ZpeGVkKGZyYWN0aW9uRGlnaXRzKSB7XG4gICAgdmFyIHggPSBhTnVtYmVyVmFsdWUodGhpcywgRVJST1IpO1xuICAgIHZhciBmID0gdG9JbnRlZ2VyKGZyYWN0aW9uRGlnaXRzKTtcbiAgICB2YXIgcyA9ICcnO1xuICAgIHZhciBtID0gWkVSTztcbiAgICB2YXIgZSwgeiwgaiwgaztcbiAgICBpZiAoZiA8IDAgfHwgZiA+IDIwKSB0aHJvdyBSYW5nZUVycm9yKEVSUk9SKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKHggIT0geCkgcmV0dXJuICdOYU4nO1xuICAgIGlmICh4IDw9IC0xZTIxIHx8IHggPj0gMWUyMSkgcmV0dXJuIFN0cmluZyh4KTtcbiAgICBpZiAoeCA8IDApIHtcbiAgICAgIHMgPSAnLSc7XG4gICAgICB4ID0gLXg7XG4gICAgfVxuICAgIGlmICh4ID4gMWUtMjEpIHtcbiAgICAgIGUgPSBsb2coeCAqIHBvdygyLCA2OSwgMSkpIC0gNjk7XG4gICAgICB6ID0gZSA8IDAgPyB4ICogcG93KDIsIC1lLCAxKSA6IHggLyBwb3coMiwgZSwgMSk7XG4gICAgICB6ICo9IDB4MTAwMDAwMDAwMDAwMDA7XG4gICAgICBlID0gNTIgLSBlO1xuICAgICAgaWYgKGUgPiAwKSB7XG4gICAgICAgIG11bHRpcGx5KDAsIHopO1xuICAgICAgICBqID0gZjtcbiAgICAgICAgd2hpbGUgKGogPj0gNykge1xuICAgICAgICAgIG11bHRpcGx5KDFlNywgMCk7XG4gICAgICAgICAgaiAtPSA3O1xuICAgICAgICB9XG4gICAgICAgIG11bHRpcGx5KHBvdygxMCwgaiwgMSksIDApO1xuICAgICAgICBqID0gZSAtIDE7XG4gICAgICAgIHdoaWxlIChqID49IDIzKSB7XG4gICAgICAgICAgZGl2aWRlKDEgPDwgMjMpO1xuICAgICAgICAgIGogLT0gMjM7XG4gICAgICAgIH1cbiAgICAgICAgZGl2aWRlKDEgPDwgaik7XG4gICAgICAgIG11bHRpcGx5KDEsIDEpO1xuICAgICAgICBkaXZpZGUoMik7XG4gICAgICAgIG0gPSBudW1Ub1N0cmluZygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbXVsdGlwbHkoMCwgeik7XG4gICAgICAgIG11bHRpcGx5KDEgPDwgLWUsIDApO1xuICAgICAgICBtID0gbnVtVG9TdHJpbmcoKSArIHJlcGVhdC5jYWxsKFpFUk8sIGYpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZiA+IDApIHtcbiAgICAgIGsgPSBtLmxlbmd0aDtcbiAgICAgIG0gPSBzICsgKGsgPD0gZiA/ICcwLicgKyByZXBlYXQuY2FsbChaRVJPLCBmIC0gaykgKyBtIDogbS5zbGljZSgwLCBrIC0gZikgKyAnLicgKyBtLnNsaWNlKGsgLSBmKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSBzICsgbTtcbiAgICB9IHJldHVybiBtO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyICR0cmltID0gcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKS50cmltO1xudmFyIE5VTUJFUiA9ICdOdW1iZXInO1xudmFyICROdW1iZXIgPSBnbG9iYWxbTlVNQkVSXTtcbnZhciBCYXNlID0gJE51bWJlcjtcbnZhciBwcm90byA9ICROdW1iZXIucHJvdG90eXBlO1xuLy8gT3BlcmEgfjEyIGhhcyBicm9rZW4gT2JqZWN0I3RvU3RyaW5nXG52YXIgQlJPS0VOX0NPRiA9IGNvZihyZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJykocHJvdG8pKSA9PSBOVU1CRVI7XG52YXIgVFJJTSA9ICd0cmltJyBpbiBTdHJpbmcucHJvdG90eXBlO1xuXG4vLyA3LjEuMyBUb051bWJlcihhcmd1bWVudClcbnZhciB0b051bWJlciA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICB2YXIgaXQgPSB0b1ByaW1pdGl2ZShhcmd1bWVudCwgZmFsc2UpO1xuICBpZiAodHlwZW9mIGl0ID09ICdzdHJpbmcnICYmIGl0Lmxlbmd0aCA+IDIpIHtcbiAgICBpdCA9IFRSSU0gPyBpdC50cmltKCkgOiAkdHJpbShpdCwgMyk7XG4gICAgdmFyIGZpcnN0ID0gaXQuY2hhckNvZGVBdCgwKTtcbiAgICB2YXIgdGhpcmQsIHJhZGl4LCBtYXhDb2RlO1xuICAgIGlmIChmaXJzdCA9PT0gNDMgfHwgZmlyc3QgPT09IDQ1KSB7XG4gICAgICB0aGlyZCA9IGl0LmNoYXJDb2RlQXQoMik7XG4gICAgICBpZiAodGhpcmQgPT09IDg4IHx8IHRoaXJkID09PSAxMjApIHJldHVybiBOYU47IC8vIE51bWJlcignKzB4MScpIHNob3VsZCBiZSBOYU4sIG9sZCBWOCBmaXhcbiAgICB9IGVsc2UgaWYgKGZpcnN0ID09PSA0OCkge1xuICAgICAgc3dpdGNoIChpdC5jaGFyQ29kZUF0KDEpKSB7XG4gICAgICAgIGNhc2UgNjY6IGNhc2UgOTg6IHJhZGl4ID0gMjsgbWF4Q29kZSA9IDQ5OyBicmVhazsgLy8gZmFzdCBlcXVhbCAvXjBiWzAxXSskL2lcbiAgICAgICAgY2FzZSA3OTogY2FzZSAxMTE6IHJhZGl4ID0gODsgbWF4Q29kZSA9IDU1OyBicmVhazsgLy8gZmFzdCBlcXVhbCAvXjBvWzAtN10rJC9pXG4gICAgICAgIGRlZmF1bHQ6IHJldHVybiAraXQ7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBkaWdpdHMgPSBpdC5zbGljZSgyKSwgaSA9IDAsIGwgPSBkaWdpdHMubGVuZ3RoLCBjb2RlOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGNvZGUgPSBkaWdpdHMuY2hhckNvZGVBdChpKTtcbiAgICAgICAgLy8gcGFyc2VJbnQgcGFyc2VzIGEgc3RyaW5nIHRvIGEgZmlyc3QgdW5hdmFpbGFibGUgc3ltYm9sXG4gICAgICAgIC8vIGJ1dCBUb051bWJlciBzaG91bGQgcmV0dXJuIE5hTiBpZiBhIHN0cmluZyBjb250YWlucyB1bmF2YWlsYWJsZSBzeW1ib2xzXG4gICAgICAgIGlmIChjb2RlIDwgNDggfHwgY29kZSA+IG1heENvZGUpIHJldHVybiBOYU47XG4gICAgICB9IHJldHVybiBwYXJzZUludChkaWdpdHMsIHJhZGl4KTtcbiAgICB9XG4gIH0gcmV0dXJuICtpdDtcbn07XG5cbmlmICghJE51bWJlcignIDBvMScpIHx8ICEkTnVtYmVyKCcwYjEnKSB8fCAkTnVtYmVyKCcrMHgxJykpIHtcbiAgJE51bWJlciA9IGZ1bmN0aW9uIE51bWJlcih2YWx1ZSkge1xuICAgIHZhciBpdCA9IGFyZ3VtZW50cy5sZW5ndGggPCAxID8gMCA6IHZhbHVlO1xuICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICByZXR1cm4gdGhhdCBpbnN0YW5jZW9mICROdW1iZXJcbiAgICAgIC8vIGNoZWNrIG9uIDEuLmNvbnN0cnVjdG9yKGZvbykgY2FzZVxuICAgICAgJiYgKEJST0tFTl9DT0YgPyBmYWlscyhmdW5jdGlvbiAoKSB7IHByb3RvLnZhbHVlT2YuY2FsbCh0aGF0KTsgfSkgOiBjb2YodGhhdCkgIT0gTlVNQkVSKVxuICAgICAgICA/IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBCYXNlKHRvTnVtYmVyKGl0KSksIHRoYXQsICROdW1iZXIpIDogdG9OdW1iZXIoaXQpO1xuICB9O1xuICBmb3IgKHZhciBrZXlzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGdPUE4oQmFzZSkgOiAoXG4gICAgLy8gRVMzOlxuICAgICdNQVhfVkFMVUUsTUlOX1ZBTFVFLE5hTixORUdBVElWRV9JTkZJTklUWSxQT1NJVElWRV9JTkZJTklUWSwnICtcbiAgICAvLyBFUzYgKGluIGNhc2UsIGlmIG1vZHVsZXMgd2l0aCBFUzYgTnVtYmVyIHN0YXRpY3MgcmVxdWlyZWQgYmVmb3JlKTpcbiAgICAnRVBTSUxPTixpc0Zpbml0ZSxpc0ludGVnZXIsaXNOYU4saXNTYWZlSW50ZWdlcixNQVhfU0FGRV9JTlRFR0VSLCcgK1xuICAgICdNSU5fU0FGRV9JTlRFR0VSLHBhcnNlRmxvYXQscGFyc2VJbnQsaXNJbnRlZ2VyJ1xuICApLnNwbGl0KCcsJyksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajsgaisrKSB7XG4gICAgaWYgKGhhcyhCYXNlLCBrZXkgPSBrZXlzW2pdKSAmJiAhaGFzKCROdW1iZXIsIGtleSkpIHtcbiAgICAgIGRQKCROdW1iZXIsIGtleSwgZ09QRChCYXNlLCBrZXkpKTtcbiAgICB9XG4gIH1cbiAgJE51bWJlci5wcm90b3R5cGUgPSBwcm90bztcbiAgcHJvdG8uY29uc3RydWN0b3IgPSAkTnVtYmVyO1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKGdsb2JhbCwgTlVNQkVSLCAkTnVtYmVyKTtcbn1cbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19wYXJzZS1mbG9hdCcpO1xuLy8gMTguMi40IHBhcnNlRmxvYXQoc3RyaW5nKVxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkYgKiAocGFyc2VGbG9hdCAhPSAkcGFyc2VGbG9hdCksIHsgcGFyc2VGbG9hdDogJHBhcnNlRmxvYXQgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX3BhcnNlLWludCcpO1xuLy8gMTguMi41IHBhcnNlSW50KHN0cmluZywgcmFkaXgpXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuRiAqIChwYXJzZUludCAhPSAkcGFyc2VJbnQpLCB7IHBhcnNlSW50OiAkcGFyc2VJbnQgfSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBIQVNfSU5TVEFOQ0UgPSByZXF1aXJlKCcuL193a3MnKSgnaGFzSW5zdGFuY2UnKTtcbnZhciBGdW5jdGlvblByb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuLy8gMTkuMi4zLjYgRnVuY3Rpb24ucHJvdG90eXBlW0BAaGFzSW5zdGFuY2VdKFYpXG5pZiAoIShIQVNfSU5TVEFOQ0UgaW4gRnVuY3Rpb25Qcm90bykpIHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYoRnVuY3Rpb25Qcm90bywgSEFTX0lOU1RBTkNFLCB7IHZhbHVlOiBmdW5jdGlvbiAoTykge1xuICBpZiAodHlwZW9mIHRoaXMgIT0gJ2Z1bmN0aW9uJyB8fCAhaXNPYmplY3QoTykpIHJldHVybiBmYWxzZTtcbiAgaWYgKCFpc09iamVjdCh0aGlzLnByb3RvdHlwZSkpIHJldHVybiBPIGluc3RhbmNlb2YgdGhpcztcbiAgLy8gZm9yIGVudmlyb25tZW50IHcvbyBuYXRpdmUgYEBAaGFzSW5zdGFuY2VgIGxvZ2ljIGVub3VnaCBgaW5zdGFuY2VvZmAsIGJ1dCBhZGQgdGhpczpcbiAgd2hpbGUgKE8gPSBnZXRQcm90b3R5cGVPZihPKSkgaWYgKHRoaXMucHJvdG90eXBlID09PSBPKSByZXR1cm4gdHJ1ZTtcbiAgcmV0dXJuIGZhbHNlO1xufSB9KTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgRlByb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xudmFyIG5hbWVSRSA9IC9eXFxzKmZ1bmN0aW9uIChbXiAoXSopLztcbnZhciBOQU1FID0gJ25hbWUnO1xuXG4vLyAxOS4yLjQuMiBuYW1lXG5OQU1FIGluIEZQcm90byB8fCByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmIGRQKEZQcm90bywgTkFNRSwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gKCcnICsgdGhpcykubWF0Y2gobmFtZVJFKVsxXTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9XG59KTtcbiIsIi8vIDE5LjIuMy4yIC8gMTUuMy40LjUgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQodGhpc0FyZywgYXJncy4uLilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnRnVuY3Rpb24nLCB7IGJpbmQ6IHJlcXVpcmUoJy4vX2JpbmQnKSB9KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgdGVzdCA9IHt9O1xudGVzdFtyZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKV0gPSAneic7XG5pZiAodGVzdCArICcnICE9ICdbb2JqZWN0IHpdJykge1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKE9iamVjdC5wcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiAnW29iamVjdCAnICsgY2xhc3NvZih0aGlzKSArICddJztcbiAgfSwgdHJ1ZSk7XG59XG4iLCIvLyAxOS4xLjMuMTkgT2JqZWN0LnNldFByb3RvdHlwZU9mKE8sIHByb3RvKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBzZXRQcm90b3R5cGVPZjogcmVxdWlyZSgnLi9fc2V0LXByb3RvJykuc2V0IH0pO1xuIiwiLy8gNy4yLjkgU2FtZVZhbHVlKHgsIHkpXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5pcyB8fCBmdW5jdGlvbiBpcyh4LCB5KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgcmV0dXJuIHggPT09IHkgPyB4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geSA6IHggIT0geCAmJiB5ICE9IHk7XG59O1xuIiwiLy8gMTkuMS4zLjEwIE9iamVjdC5pcyh2YWx1ZTEsIHZhbHVlMilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgaXM6IHJlcXVpcmUoJy4vX3NhbWUtdmFsdWUnKSB9KTtcbiIsIi8vIDE5LjEuMy4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiwgJ09iamVjdCcsIHsgYXNzaWduOiByZXF1aXJlKCcuL19vYmplY3QtYXNzaWduJykgfSk7XG4iLCIvLyAxOS4xLjIuMTEgT2JqZWN0LmlzRXh0ZW5zaWJsZShPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNFeHRlbnNpYmxlJywgZnVuY3Rpb24gKCRpc0V4dGVuc2libGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZShpdCkge1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNFeHRlbnNpYmxlID8gJGlzRXh0ZW5zaWJsZShpdCkgOiB0cnVlIDogZmFsc2U7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xMyBPYmplY3QuaXNTZWFsZWQoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2lzU2VhbGVkJywgZnVuY3Rpb24gKCRpc1NlYWxlZCkge1xuICByZXR1cm4gZnVuY3Rpb24gaXNTZWFsZWQoaXQpIHtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzU2VhbGVkID8gJGlzU2VhbGVkKGl0KSA6IGZhbHNlIDogdHJ1ZTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjEyIE9iamVjdC5pc0Zyb3plbihPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNGcm96ZW4nLCBmdW5jdGlvbiAoJGlzRnJvemVuKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpc0Zyb3plbihpdCkge1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNGcm96ZW4gPyAkaXNGcm96ZW4oaXQpIDogZmFsc2UgOiB0cnVlO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTUgT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpLm9uRnJlZXplO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ3ByZXZlbnRFeHRlbnNpb25zJywgZnVuY3Rpb24gKCRwcmV2ZW50RXh0ZW5zaW9ucykge1xuICByZXR1cm4gZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnMoaXQpIHtcbiAgICByZXR1cm4gJHByZXZlbnRFeHRlbnNpb25zICYmIGlzT2JqZWN0KGl0KSA/ICRwcmV2ZW50RXh0ZW5zaW9ucyhtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjE3IE9iamVjdC5zZWFsKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpLm9uRnJlZXplO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ3NlYWwnLCBmdW5jdGlvbiAoJHNlYWwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHNlYWwoaXQpIHtcbiAgICByZXR1cm4gJHNlYWwgJiYgaXNPYmplY3QoaXQpID8gJHNlYWwobWV0YShpdCkpIDogaXQ7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi41IE9iamVjdC5mcmVlemUoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJykub25GcmVlemU7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZnJlZXplJywgZnVuY3Rpb24gKCRmcmVlemUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZyZWV6ZShpdCkge1xuICAgIHJldHVybiAkZnJlZXplICYmIGlzT2JqZWN0KGl0KSA/ICRmcmVlemUobWV0YShpdCkpIDogaXQ7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldE93blByb3BlcnR5TmFtZXMnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiByZXF1aXJlKCcuL19vYmplY3QtZ29wbi1leHQnKS5mO1xufSk7XG4iLCIvLyAxOS4xLjIuMTQgT2JqZWN0LmtleXMoTylcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdrZXlzJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24ga2V5cyhpdCkge1xuICAgIHJldHVybiAka2V5cyh0b09iamVjdChpdCkpO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuOSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyICRnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRQcm90b3R5cGVPZicsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKGl0KSB7XG4gICAgcmV0dXJuICRnZXRQcm90b3R5cGVPZih0b09iamVjdChpdCkpO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgICByZXR1cm4gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0b0lPYmplY3QoaXQpLCBrZXkpO1xuICB9O1xufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjMgLyAxNS4yLjMuNyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSwgJ09iamVjdCcsIHsgZGVmaW5lUHJvcGVydGllczogcmVxdWlyZSgnLi9fb2JqZWN0LWRwcycpIH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi40IC8gMTUuMi4zLjYgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpLCAnT2JqZWN0JywgeyBkZWZpbmVQcm9wZXJ0eTogcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZiB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBjcmVhdGU6IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKSB9KTtcbiIsIi8vIGFsbCBlbnVtZXJhYmxlIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBzeW1ib2xzXG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHJlc3VsdCA9IGdldEtleXMoaXQpO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgaWYgKGdldFN5bWJvbHMpIHtcbiAgICB2YXIgc3ltYm9scyA9IGdldFN5bWJvbHMoaXQpO1xuICAgIHZhciBpc0VudW0gPSBwSUUuZjtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAoc3ltYm9scy5sZW5ndGggPiBpKSBpZiAoaXNFbnVtLmNhbGwoaXQsIGtleSA9IHN5bWJvbHNbaSsrXSkpIHJlc3VsdC5wdXNoKGtleSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyBFQ01BU2NyaXB0IDYgc3ltYm9scyBzaGltXG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgTUVUQSA9IHJlcXVpcmUoJy4vX21ldGEnKS5LRVk7XG52YXIgJGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgd2tzRXh0ID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpO1xudmFyIHdrc0RlZmluZSA9IHJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKTtcbnZhciBlbnVtS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0ta2V5cycpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL19pcy1hcnJheScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIF9jcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgZ09QTkV4dCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuLWV4dCcpO1xudmFyICRHT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciAkRFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QRCA9ICRHT1BELmY7XG52YXIgZFAgPSAkRFAuZjtcbnZhciBnT1BOID0gZ09QTkV4dC5mO1xudmFyICRTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyICRKU09OID0gZ2xvYmFsLkpTT047XG52YXIgX3N0cmluZ2lmeSA9ICRKU09OICYmICRKU09OLnN0cmluZ2lmeTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBISURERU4gPSB3a3MoJ19oaWRkZW4nKTtcbnZhciBUT19QUklNSVRJVkUgPSB3a3MoJ3RvUHJpbWl0aXZlJyk7XG52YXIgaXNFbnVtID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG52YXIgU3ltYm9sUmVnaXN0cnkgPSBzaGFyZWQoJ3N5bWJvbC1yZWdpc3RyeScpO1xudmFyIEFsbFN5bWJvbHMgPSBzaGFyZWQoJ3N5bWJvbHMnKTtcbnZhciBPUFN5bWJvbHMgPSBzaGFyZWQoJ29wLXN5bWJvbHMnKTtcbnZhciBPYmplY3RQcm90byA9IE9iamVjdFtQUk9UT1RZUEVdO1xudmFyIFVTRV9OQVRJVkUgPSB0eXBlb2YgJFN5bWJvbCA9PSAnZnVuY3Rpb24nO1xudmFyIFFPYmplY3QgPSBnbG9iYWwuUU9iamVjdDtcbi8vIERvbid0IHVzZSBzZXR0ZXJzIGluIFF0IFNjcmlwdCwgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzE3M1xudmFyIHNldHRlciA9ICFRT2JqZWN0IHx8ICFRT2JqZWN0W1BST1RPVFlQRV0gfHwgIVFPYmplY3RbUFJPVE9UWVBFXS5maW5kQ2hpbGQ7XG5cbi8vIGZhbGxiYWNrIGZvciBvbGQgQW5kcm9pZCwgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTY4N1xudmFyIHNldFN5bWJvbERlc2MgPSBERVNDUklQVE9SUyAmJiAkZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gX2NyZWF0ZShkUCh7fSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkUCh0aGlzLCAnYScsIHsgdmFsdWU6IDcgfSkuYTsgfVxuICB9KSkuYSAhPSA3O1xufSkgPyBmdW5jdGlvbiAoaXQsIGtleSwgRCkge1xuICB2YXIgcHJvdG9EZXNjID0gZ09QRChPYmplY3RQcm90bywga2V5KTtcbiAgaWYgKHByb3RvRGVzYykgZGVsZXRlIE9iamVjdFByb3RvW2tleV07XG4gIGRQKGl0LCBrZXksIEQpO1xuICBpZiAocHJvdG9EZXNjICYmIGl0ICE9PSBPYmplY3RQcm90bykgZFAoT2JqZWN0UHJvdG8sIGtleSwgcHJvdG9EZXNjKTtcbn0gOiBkUDtcblxudmFyIHdyYXAgPSBmdW5jdGlvbiAodGFnKSB7XG4gIHZhciBzeW0gPSBBbGxTeW1ib2xzW3RhZ10gPSBfY3JlYXRlKCRTeW1ib2xbUFJPVE9UWVBFXSk7XG4gIHN5bS5fayA9IHRhZztcbiAgcmV0dXJuIHN5bTtcbn07XG5cbnZhciBpc1N5bWJvbCA9IFVTRV9OQVRJVkUgJiYgdHlwZW9mICRTeW1ib2wuaXRlcmF0b3IgPT0gJ3N5bWJvbCcgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJztcbn0gOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0IGluc3RhbmNlb2YgJFN5bWJvbDtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBEKSB7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG8pICRkZWZpbmVQcm9wZXJ0eShPUFN5bWJvbHMsIGtleSwgRCk7XG4gIGFuT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgYW5PYmplY3QoRCk7XG4gIGlmIChoYXMoQWxsU3ltYm9scywga2V5KSkge1xuICAgIGlmICghRC5lbnVtZXJhYmxlKSB7XG4gICAgICBpZiAoIWhhcyhpdCwgSElEREVOKSkgZFAoaXQsIEhJRERFTiwgY3JlYXRlRGVzYygxLCB7fSkpO1xuICAgICAgaXRbSElEREVOXVtrZXldID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pIGl0W0hJRERFTl1ba2V5XSA9IGZhbHNlO1xuICAgICAgRCA9IF9jcmVhdGUoRCwgeyBlbnVtZXJhYmxlOiBjcmVhdGVEZXNjKDAsIGZhbHNlKSB9KTtcbiAgICB9IHJldHVybiBzZXRTeW1ib2xEZXNjKGl0LCBrZXksIEQpO1xuICB9IHJldHVybiBkUChpdCwga2V5LCBEKTtcbn07XG52YXIgJGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKGl0LCBQKSB7XG4gIGFuT2JqZWN0KGl0KTtcbiAgdmFyIGtleXMgPSBlbnVtS2V5cyhQID0gdG9JT2JqZWN0KFApKTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgbCA9IGtleXMubGVuZ3RoO1xuICB2YXIga2V5O1xuICB3aGlsZSAobCA+IGkpICRkZWZpbmVQcm9wZXJ0eShpdCwga2V5ID0ga2V5c1tpKytdLCBQW2tleV0pO1xuICByZXR1cm4gaXQ7XG59O1xudmFyICRjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaXQsIFApIHtcbiAgcmV0dXJuIFAgPT09IHVuZGVmaW5lZCA/IF9jcmVhdGUoaXQpIDogJGRlZmluZVByb3BlcnRpZXMoX2NyZWF0ZShpdCksIFApO1xufTtcbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShrZXkpIHtcbiAgdmFyIEUgPSBpc0VudW0uY2FsbCh0aGlzLCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKTtcbiAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBFIHx8ICFoYXModGhpcywga2V5KSB8fCAhaGFzKEFsbFN5bWJvbHMsIGtleSkgfHwgaGFzKHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW2tleV0gPyBFIDogdHJ1ZTtcbn07XG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gIGl0ID0gdG9JT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSkgcmV0dXJuO1xuICB2YXIgRCA9IGdPUEQoaXQsIGtleSk7XG4gIGlmIChEICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICEoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkpIEQuZW51bWVyYWJsZSA9IHRydWU7XG4gIHJldHVybiBEO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgdmFyIG5hbWVzID0gZ09QTih0b0lPYmplY3QoaXQpKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgaSA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSB7XG4gICAgaWYgKCFoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYga2V5ICE9IEhJRERFTiAmJiBrZXkgIT0gTUVUQSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSB7XG4gIHZhciBJU19PUCA9IGl0ID09PSBPYmplY3RQcm90bztcbiAgdmFyIG5hbWVzID0gZ09QTihJU19PUCA/IE9QU3ltYm9scyA6IHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIChJU19PUCA/IGhhcyhPYmplY3RQcm90bywga2V5KSA6IHRydWUpKSByZXN1bHQucHVzaChBbGxTeW1ib2xzW2tleV0pO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyAxOS40LjEuMSBTeW1ib2woW2Rlc2NyaXB0aW9uXSlcbmlmICghVVNFX05BVElWRSkge1xuICAkU3ltYm9sID0gZnVuY3Rpb24gU3ltYm9sKCkge1xuICAgIGlmICh0aGlzIGluc3RhbmNlb2YgJFN5bWJvbCkgdGhyb3cgVHlwZUVycm9yKCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3IhJyk7XG4gICAgdmFyIHRhZyA9IHVpZChhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7XG4gICAgdmFyICRzZXQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmICh0aGlzID09PSBPYmplY3RQcm90bykgJHNldC5jYWxsKE9QU3ltYm9scywgdmFsdWUpO1xuICAgICAgaWYgKGhhcyh0aGlzLCBISURERU4pICYmIGhhcyh0aGlzW0hJRERFTl0sIHRhZykpIHRoaXNbSElEREVOXVt0YWddID0gZmFsc2U7XG4gICAgICBzZXRTeW1ib2xEZXNjKHRoaXMsIHRhZywgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xuICAgIH07XG4gICAgaWYgKERFU0NSSVBUT1JTICYmIHNldHRlcikgc2V0U3ltYm9sRGVzYyhPYmplY3RQcm90bywgdGFnLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgc2V0OiAkc2V0IH0pO1xuICAgIHJldHVybiB3cmFwKHRhZyk7XG4gIH07XG4gIHJlZGVmaW5lKCRTeW1ib2xbUFJPVE9UWVBFXSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2s7XG4gIH0pO1xuXG4gICRHT1BELmYgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICAkRFAuZiA9ICRkZWZpbmVQcm9wZXJ0eTtcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mID0gZ09QTkV4dC5mID0gJGdldE93blByb3BlcnR5TmFtZXM7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1waWUnKS5mID0gJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuICByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpLmYgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4gIGlmIChERVNDUklQVE9SUyAmJiAhcmVxdWlyZSgnLi9fbGlicmFyeScpKSB7XG4gICAgcmVkZWZpbmUoT2JqZWN0UHJvdG8sICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsICRwcm9wZXJ0eUlzRW51bWVyYWJsZSwgdHJ1ZSk7XG4gIH1cblxuICB3a3NFeHQuZiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIHdyYXAod2tzKG5hbWUpKTtcbiAgfTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgeyBTeW1ib2w6ICRTeW1ib2wgfSk7XG5cbmZvciAodmFyIGVzNlN5bWJvbHMgPSAoXG4gIC8vIDE5LjQuMi4yLCAxOS40LjIuMywgMTkuNC4yLjQsIDE5LjQuMi42LCAxOS40LjIuOCwgMTkuNC4yLjksIDE5LjQuMi4xMCwgMTkuNC4yLjExLCAxOS40LjIuMTIsIDE5LjQuMi4xMywgMTkuNC4yLjE0XG4gICdoYXNJbnN0YW5jZSxpc0NvbmNhdFNwcmVhZGFibGUsaXRlcmF0b3IsbWF0Y2gscmVwbGFjZSxzZWFyY2gsc3BlY2llcyxzcGxpdCx0b1ByaW1pdGl2ZSx0b1N0cmluZ1RhZyx1bnNjb3BhYmxlcydcbikuc3BsaXQoJywnKSwgaiA9IDA7IGVzNlN5bWJvbHMubGVuZ3RoID4gajspd2tzKGVzNlN5bWJvbHNbaisrXSk7XG5cbmZvciAodmFyIHdlbGxLbm93blN5bWJvbHMgPSAka2V5cyh3a3Muc3RvcmUpLCBrID0gMDsgd2VsbEtub3duU3ltYm9scy5sZW5ndGggPiBrOykgd2tzRGVmaW5lKHdlbGxLbm93blN5bWJvbHNbaysrXSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdTeW1ib2wnLCB7XG4gIC8vIDE5LjQuMi4xIFN5bWJvbC5mb3Ioa2V5KVxuICAnZm9yJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBoYXMoU3ltYm9sUmVnaXN0cnksIGtleSArPSAnJylcbiAgICAgID8gU3ltYm9sUmVnaXN0cnlba2V5XVxuICAgICAgOiBTeW1ib2xSZWdpc3RyeVtrZXldID0gJFN5bWJvbChrZXkpO1xuICB9LFxuICAvLyAxOS40LjIuNSBTeW1ib2wua2V5Rm9yKHN5bSlcbiAga2V5Rm9yOiBmdW5jdGlvbiBrZXlGb3Ioc3ltKSB7XG4gICAgaWYgKCFpc1N5bWJvbChzeW0pKSB0aHJvdyBUeXBlRXJyb3Ioc3ltICsgJyBpcyBub3QgYSBzeW1ib2whJyk7XG4gICAgZm9yICh2YXIga2V5IGluIFN5bWJvbFJlZ2lzdHJ5KSBpZiAoU3ltYm9sUmVnaXN0cnlba2V5XSA9PT0gc3ltKSByZXR1cm4ga2V5O1xuICB9LFxuICB1c2VTZXR0ZXI6IGZ1bmN0aW9uICgpIHsgc2V0dGVyID0gdHJ1ZTsgfSxcbiAgdXNlU2ltcGxlOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IGZhbHNlOyB9XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ09iamVjdCcsIHtcbiAgLy8gMTkuMS4yLjIgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxuICBjcmVhdGU6ICRjcmVhdGUsXG4gIC8vIDE5LjEuMi40IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuICBkZWZpbmVQcm9wZXJ0eTogJGRlZmluZVByb3BlcnR5LFxuICAvLyAxOS4xLjIuMyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKVxuICBkZWZpbmVQcm9wZXJ0aWVzOiAkZGVmaW5lUHJvcGVydGllcyxcbiAgLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKVxuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsXG4gIC8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG4gIGdldE93blByb3BlcnR5TmFtZXM6ICRnZXRPd25Qcm9wZXJ0eU5hbWVzLFxuICAvLyAxOS4xLjIuOCBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKE8pXG4gIGdldE93blByb3BlcnR5U3ltYm9sczogJGdldE93blByb3BlcnR5U3ltYm9sc1xufSk7XG5cbi8vIDI0LjMuMiBKU09OLnN0cmluZ2lmeSh2YWx1ZSBbLCByZXBsYWNlciBbLCBzcGFjZV1dKVxuJEpTT04gJiYgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoIVVTRV9OQVRJVkUgfHwgJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIFMgPSAkU3ltYm9sKCk7XG4gIC8vIE1TIEVkZ2UgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIHt9XG4gIC8vIFdlYktpdCBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMgbnVsbFxuICAvLyBWOCB0aHJvd3Mgb24gYm94ZWQgc3ltYm9sc1xuICByZXR1cm4gX3N0cmluZ2lmeShbU10pICE9ICdbbnVsbF0nIHx8IF9zdHJpbmdpZnkoeyBhOiBTIH0pICE9ICd7fScgfHwgX3N0cmluZ2lmeShPYmplY3QoUykpICE9ICd7fSc7XG59KSksICdKU09OJywge1xuICBzdHJpbmdpZnk6IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCkge1xuICAgIHZhciBhcmdzID0gW2l0XTtcbiAgICB2YXIgaSA9IDE7XG4gICAgdmFyIHJlcGxhY2VyLCAkcmVwbGFjZXI7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgICRyZXBsYWNlciA9IHJlcGxhY2VyID0gYXJnc1sxXTtcbiAgICBpZiAoIWlzT2JqZWN0KHJlcGxhY2VyKSAmJiBpdCA9PT0gdW5kZWZpbmVkIHx8IGlzU3ltYm9sKGl0KSkgcmV0dXJuOyAvLyBJRTggcmV0dXJucyBzdHJpbmcgb24gdW5kZWZpbmVkXG4gICAgaWYgKCFpc0FycmF5KHJlcGxhY2VyKSkgcmVwbGFjZXIgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiAkcmVwbGFjZXIgPT0gJ2Z1bmN0aW9uJykgdmFsdWUgPSAkcmVwbGFjZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgIGlmICghaXNTeW1ib2wodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgICBhcmdzWzFdID0gcmVwbGFjZXI7XG4gICAgcmV0dXJuIF9zdHJpbmdpZnkuYXBwbHkoJEpTT04sIGFyZ3MpO1xuICB9XG59KTtcblxuLy8gMTkuNC4zLjQgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXShoaW50KVxuJFN5bWJvbFtQUk9UT1RZUEVdW1RPX1BSSU1JVElWRV0gfHwgcmVxdWlyZSgnLi9faGlkZScpKCRTeW1ib2xbUFJPVE9UWVBFXSwgVE9fUFJJTUlUSVZFLCAkU3ltYm9sW1BST1RPVFlQRV0udmFsdWVPZik7XG4vLyAxOS40LjMuNSBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZygkU3ltYm9sLCAnU3ltYm9sJyk7XG4vLyAyMC4yLjEuOSBNYXRoW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhNYXRoLCAnTWF0aCcsIHRydWUpO1xuLy8gMjQuMy4zIEpTT05bQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKGdsb2JhbC5KU09OLCAnSlNPTicsIHRydWUpO1xuIiwicmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zeW1ib2wnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydGllcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5mcmVlemUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnNlYWwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnByZXZlbnQtZXh0ZW5zaW9ucycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZnJvemVuJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1zZWFsZWQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmlzLWV4dGVuc2libGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5mdW5jdGlvbi5iaW5kJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmZ1bmN0aW9uLm5hbWUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZnVuY3Rpb24uaGFzLWluc3RhbmNlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnBhcnNlLWludCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5wYXJzZS1mbG9hdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuY29uc3RydWN0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLnRvLWZpeGVkJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci50by1wcmVjaXNpb24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmVwc2lsb24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmlzLWZpbml0ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtaW50ZWdlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtbmFuJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5pcy1zYWZlLWludGVnZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLm1heC1zYWZlLWludGVnZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLm1pbi1zYWZlLWludGVnZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWZsb2F0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1pbnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5hY29zaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmFzaW5oJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguYXRhbmgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5jYnJ0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguY2x6MzInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5jb3NoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguZXhwbTEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5mcm91bmQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5oeXBvdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmltdWwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5sb2cxMCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmxvZzFwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGgubG9nMicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLnNpZ24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5zaW5oJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGgudGFuaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLnRydW5jJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5mcm9tLWNvZGUtcG9pbnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnJhdycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcudHJpbScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmNvZGUtcG9pbnQtYXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmVuZHMtd2l0aCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuaW5jbHVkZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnJlcGVhdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3RhcnRzLXdpdGgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmFuY2hvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuYmlnJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5ibGluaycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuYm9sZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZml4ZWQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRjb2xvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udHNpemUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLml0YWxpY3MnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmxpbmsnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnNtYWxsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5zdHJpa2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnN1YicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3VwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUubm93Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUudG8tanNvbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5kYXRlLnRvLWlzby1zdHJpbmcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZGF0ZS50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZGF0ZS50by1wcmltaXRpdmUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuaXMtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZnJvbScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5qb2luJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnNsaWNlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnNvcnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZm9yLWVhY2gnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkubWFwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZpbHRlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5zb21lJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmV2ZXJ5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UtcmlnaHQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuaW5kZXgtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkubGFzdC1pbmRleC1vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5jb3B5LXdpdGhpbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5maWxsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZpbmQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZmluZC1pbmRleCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5zcGVjaWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5jb25zdHJ1Y3RvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5mbGFncycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAubWF0Y2gnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLnJlcGxhY2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLnNlYXJjaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAuc3BsaXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucHJvbWlzZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc2V0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LndlYWstbWFwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LndlYWstc2V0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmFycmF5LWJ1ZmZlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5kYXRhLXZpZXcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuaW50OC1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1jbGFtcGVkLWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmludDE2LWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQxNi1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5pbnQzMi1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC51aW50MzItYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuZmxvYXQzMi1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5mbG9hdDY0LWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuYXBwbHknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5jb25zdHJ1Y3QnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5kZWZpbmUtcHJvcGVydHknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5kZWxldGUtcHJvcGVydHknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5lbnVtZXJhdGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuaGFzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuaXMtZXh0ZW5zaWJsZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0Lm93bi1rZXlzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QucHJldmVudC1leHRlbnNpb25zJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5hcnJheS5pbmNsdWRlcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5hcnJheS5mbGF0LW1hcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5hcnJheS5mbGF0dGVuJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy5hdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLXN0YXJ0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtZW5kJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy50cmltLWxlZnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tcmlnaHQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLm1hdGNoLWFsbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LnZhbHVlcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QuZW50cmllcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QuZGVmaW5lLWdldHRlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QuZGVmaW5lLXNldHRlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QubG9va3VwLWdldHRlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QubG9va3VwLXNldHRlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXAudG8tanNvbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zZXQudG8tanNvbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXAub2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc2V0Lm9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LndlYWstbWFwLm9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LndlYWstc2V0Lm9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hcC5mcm9tJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnNldC5mcm9tJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LndlYWstbWFwLmZyb20nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcud2Vhay1zZXQuZnJvbScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5nbG9iYWwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3lzdGVtLmdsb2JhbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5lcnJvci5pcy1lcnJvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmNsYW1wJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguZGVnLXBlci1yYWQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5kZWdyZWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguZnNjYWxlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguaWFkZGgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5pc3ViaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmltdWxoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGgucmFkLXBlci1kZWcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5yYWRpYW5zJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguc2NhbGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC51bXVsaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLnNpZ25iaXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucHJvbWlzZS5maW5hbGx5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnByb21pc2UudHJ5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZGVmaW5lLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZGVsZXRlLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhLWtleXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtb3duLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YS1rZXlzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuaGFzLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuaGFzLW93bi1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0Lm1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LmFzYXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JzZXJ2YWJsZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL3dlYi50aW1lcnMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy93ZWIuaW1tZWRpYXRlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL21vZHVsZXMvX2NvcmUnKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9zaGltXCIpO1xuXG5yZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lXCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9yZWdleHAvZXNjYXBlXCIpO1xuXG5pZiAoZ2xvYmFsLl9iYWJlbFBvbHlmaWxsKSB7XG4gIHRocm93IG5ldyBFcnJvcihcIm9ubHkgb25lIGluc3RhbmNlIG9mIGJhYmVsLXBvbHlmaWxsIGlzIGFsbG93ZWRcIik7XG59XG5nbG9iYWwuX2JhYmVsUG9seWZpbGwgPSB0cnVlO1xuXG52YXIgREVGSU5FX1BST1BFUlRZID0gXCJkZWZpbmVQcm9wZXJ0eVwiO1xuZnVuY3Rpb24gZGVmaW5lKE8sIGtleSwgdmFsdWUpIHtcbiAgT1trZXldIHx8IE9iamVjdFtERUZJTkVfUFJPUEVSVFldKE8sIGtleSwge1xuICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfSk7XG59XG5cbmRlZmluZShTdHJpbmcucHJvdG90eXBlLCBcInBhZExlZnRcIiwgXCJcIi5wYWRTdGFydCk7XG5kZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgXCJwYWRSaWdodFwiLCBcIlwiLnBhZEVuZCk7XG5cblwicG9wLHJldmVyc2Usc2hpZnQsa2V5cyx2YWx1ZXMsZW50cmllcyxpbmRleE9mLGV2ZXJ5LHNvbWUsZm9yRWFjaCxtYXAsZmlsdGVyLGZpbmQsZmluZEluZGV4LGluY2x1ZGVzLGpvaW4sc2xpY2UsY29uY2F0LHB1c2gsc3BsaWNlLHVuc2hpZnQsc29ydCxsYXN0SW5kZXhPZixyZWR1Y2UscmVkdWNlUmlnaHQsY29weVdpdGhpbixmaWxsXCIuc3BsaXQoXCIsXCIpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBbXVtrZXldICYmIGRlZmluZShBcnJheSwga2V5LCBGdW5jdGlvbi5jYWxsLmJpbmQoW11ba2V5XSkpO1xufSk7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuLyoqXG4gKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBvciBub3QgdGhlIG9iamVjdCBpcyBhIERPTSBub2RlLlxuICovXG5mdW5jdGlvbiBpc05vZGUob2JqZWN0KSB7XG4gIHZhciBkb2MgPSBvYmplY3QgPyBvYmplY3Qub3duZXJEb2N1bWVudCB8fCBvYmplY3QgOiBkb2N1bWVudDtcbiAgdmFyIGRlZmF1bHRWaWV3ID0gZG9jLmRlZmF1bHRWaWV3IHx8IHdpbmRvdztcbiAgcmV0dXJuICEhKG9iamVjdCAmJiAodHlwZW9mIGRlZmF1bHRWaWV3Lk5vZGUgPT09ICdmdW5jdGlvbicgPyBvYmplY3QgaW5zdGFuY2VvZiBkZWZhdWx0Vmlldy5Ob2RlIDogdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG9iamVjdC5ub2RlVHlwZSA9PT0gJ251bWJlcicgJiYgdHlwZW9mIG9iamVjdC5ub2RlTmFtZSA9PT0gJ3N0cmluZycpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc05vZGU7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxudmFyIGlzTm9kZSA9IHJlcXVpcmUoJy4vaXNOb2RlJyk7XG5cbi8qKlxuICogQHBhcmFtIHsqfSBvYmplY3QgVGhlIG9iamVjdCB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgb3Igbm90IHRoZSBvYmplY3QgaXMgYSBET00gdGV4dCBub2RlLlxuICovXG5mdW5jdGlvbiBpc1RleHROb2RlKG9iamVjdCkge1xuICByZXR1cm4gaXNOb2RlKG9iamVjdCkgJiYgb2JqZWN0Lm5vZGVUeXBlID09IDM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNUZXh0Tm9kZTsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKi9cblxudmFyIGlzVGV4dE5vZGUgPSByZXF1aXJlKCcuL2lzVGV4dE5vZGUnKTtcblxuLyplc2xpbnQtZGlzYWJsZSBuby1iaXR3aXNlICovXG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgZ2l2ZW4gRE9NIG5vZGUgY29udGFpbnMgb3IgaXMgYW5vdGhlciBET00gbm9kZS5cbiAqL1xuZnVuY3Rpb24gY29udGFpbnNOb2RlKG91dGVyTm9kZSwgaW5uZXJOb2RlKSB7XG4gIGlmICghb3V0ZXJOb2RlIHx8ICFpbm5lck5vZGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSBpZiAob3V0ZXJOb2RlID09PSBpbm5lck5vZGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIGlmIChpc1RleHROb2RlKG91dGVyTm9kZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSBpZiAoaXNUZXh0Tm9kZShpbm5lck5vZGUpKSB7XG4gICAgcmV0dXJuIGNvbnRhaW5zTm9kZShvdXRlck5vZGUsIGlubmVyTm9kZS5wYXJlbnROb2RlKTtcbiAgfSBlbHNlIGlmICgnY29udGFpbnMnIGluIG91dGVyTm9kZSkge1xuICAgIHJldHVybiBvdXRlck5vZGUuY29udGFpbnMoaW5uZXJOb2RlKTtcbiAgfSBlbHNlIGlmIChvdXRlck5vZGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24pIHtcbiAgICByZXR1cm4gISEob3V0ZXJOb2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGlubmVyTm9kZSkgJiAxNik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29udGFpbnNOb2RlOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqIFxuICovXG5cbi8qZXNsaW50LWRpc2FibGUgbm8tc2VsZi1jb21wYXJlICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBpbmxpbmVkIE9iamVjdC5pcyBwb2x5ZmlsbCB0byBhdm9pZCByZXF1aXJpbmcgY29uc3VtZXJzIHNoaXAgdGhlaXIgb3duXG4gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvaXNcbiAqL1xuZnVuY3Rpb24gaXMoeCwgeSkge1xuICAvLyBTYW1lVmFsdWUgYWxnb3JpdGhtXG4gIGlmICh4ID09PSB5KSB7XG4gICAgLy8gU3RlcHMgMS01LCA3LTEwXG4gICAgLy8gU3RlcHMgNi5iLTYuZTogKzAgIT0gLTBcbiAgICAvLyBBZGRlZCB0aGUgbm9uemVybyB5IGNoZWNrIHRvIG1ha2UgRmxvdyBoYXBweSwgYnV0IGl0IGlzIHJlZHVuZGFudFxuICAgIHJldHVybiB4ICE9PSAwIHx8IHkgIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICB9IGVsc2Uge1xuICAgIC8vIFN0ZXAgNi5hOiBOYU4gPT0gTmFOXG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG4vKipcbiAqIFBlcmZvcm1zIGVxdWFsaXR5IGJ5IGl0ZXJhdGluZyB0aHJvdWdoIGtleXMgb24gYW4gb2JqZWN0IGFuZCByZXR1cm5pbmcgZmFsc2VcbiAqIHdoZW4gYW55IGtleSBoYXMgdmFsdWVzIHdoaWNoIGFyZSBub3Qgc3RyaWN0bHkgZXF1YWwgYmV0d2VlbiB0aGUgYXJndW1lbnRzLlxuICogUmV0dXJucyB0cnVlIHdoZW4gdGhlIHZhbHVlcyBvZiBhbGwga2V5cyBhcmUgc3RyaWN0bHkgZXF1YWwuXG4gKi9cbmZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCKSB7XG4gIGlmIChpcyhvYmpBLCBvYmpCKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvYmpBICE9PSAnb2JqZWN0JyB8fCBvYmpBID09PSBudWxsIHx8IHR5cGVvZiBvYmpCICE9PSAnb2JqZWN0JyB8fCBvYmpCID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKG9iakIpO1xuXG4gIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXNCLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIFRlc3QgZm9yIEEncyBrZXlzIGRpZmZlcmVudCBmcm9tIEIuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5c0EubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwob2JqQiwga2V5c0FbaV0pIHx8ICFpcyhvYmpBW2tleXNBW2ldXSwgb2JqQltrZXlzQVtpXV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hhbGxvd0VxdWFsOyIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbi8qIGVzbGludC1kaXNhYmxlIGZiLXd3dy90eXBlb2YtdW5kZWZpbmVkICovXG5cbi8qKlxuICogU2FtZSBhcyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGJ1dCB3cmFwcyBpbiBhIHRyeS1jYXRjaCBibG9jay4gSW4gSUUgaXQgaXNcbiAqIG5vdCBzYWZlIHRvIGNhbGwgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBpZiB0aGVyZSBpcyBub3RoaW5nIGZvY3VzZWQuXG4gKlxuICogVGhlIGFjdGl2ZUVsZW1lbnQgd2lsbCBiZSBudWxsIG9ubHkgaWYgdGhlIGRvY3VtZW50IG9yIGRvY3VtZW50IGJvZHkgaXMgbm90XG4gKiB5ZXQgZGVmaW5lZC5cbiAqXG4gKiBAcGFyYW0gez9ET01Eb2N1bWVudH0gZG9jIERlZmF1bHRzIHRvIGN1cnJlbnQgZG9jdW1lbnQuXG4gKiBAcmV0dXJuIHs/RE9NRWxlbWVudH1cbiAqL1xuZnVuY3Rpb24gZ2V0QWN0aXZlRWxlbWVudChkb2MpIC8qP0RPTUVsZW1lbnQqL3tcbiAgZG9jID0gZG9jIHx8ICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnID8gZG9jdW1lbnQgOiB1bmRlZmluZWQpO1xuICBpZiAodHlwZW9mIGRvYyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICB0cnkge1xuICAgIHJldHVybiBkb2MuYWN0aXZlRWxlbWVudCB8fCBkb2MuYm9keTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBkb2MuYm9keTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEFjdGl2ZUVsZW1lbnQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblxuLyoqXG4gKiBTaW1wbGUsIGxpZ2h0d2VpZ2h0IG1vZHVsZSBhc3Npc3Rpbmcgd2l0aCB0aGUgZGV0ZWN0aW9uIGFuZCBjb250ZXh0IG9mXG4gKiBXb3JrZXIuIEhlbHBzIGF2b2lkIGNpcmN1bGFyIGRlcGVuZGVuY2llcyBhbmQgYWxsb3dzIGNvZGUgdG8gcmVhc29uIGFib3V0XG4gKiB3aGV0aGVyIG9yIG5vdCB0aGV5IGFyZSBpbiBhIFdvcmtlciwgZXZlbiBpZiB0aGV5IG5ldmVyIGluY2x1ZGUgdGhlIG1haW5cbiAqIGBSZWFjdFdvcmtlcmAgZGVwZW5kZW5jeS5cbiAqL1xudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0ge1xuXG4gIGNhblVzZURPTTogY2FuVXNlRE9NLFxuXG4gIGNhblVzZVdvcmtlcnM6IHR5cGVvZiBXb3JrZXIgIT09ICd1bmRlZmluZWQnLFxuXG4gIGNhblVzZUV2ZW50TGlzdGVuZXJzOiBjYW5Vc2VET00gJiYgISEod2luZG93LmFkZEV2ZW50TGlzdGVuZXIgfHwgd2luZG93LmF0dGFjaEV2ZW50KSxcblxuICBjYW5Vc2VWaWV3cG9ydDogY2FuVXNlRE9NICYmICEhd2luZG93LnNjcmVlbixcblxuICBpc0luV29ya2VyOiAhY2FuVXNlRE9NIC8vIEZvciBub3csIHRoaXMgaXMgdHJ1ZSAtIG1pZ2h0IGNoYW5nZSBpbiB0aGUgZnV0dXJlLlxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV4ZWN1dGlvbkVudmlyb25tZW50OyIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMy4yXG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYmE9cmVxdWlyZShcImZianMvbGliL2ludmFyaWFudFwiKSxlYT1yZXF1aXJlKFwicmVhY3RcIiksbT1yZXF1aXJlKFwiZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnRcIiksQT1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxDPXJlcXVpcmUoXCJmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uXCIpLGZhPXJlcXVpcmUoXCJmYmpzL2xpYi9nZXRBY3RpdmVFbGVtZW50XCIpLGhhPXJlcXVpcmUoXCJmYmpzL2xpYi9zaGFsbG93RXF1YWxcIiksamE9cmVxdWlyZShcImZianMvbGliL2NvbnRhaW5zTm9kZVwiKSxrYT1yZXF1aXJlKFwiZmJqcy9saWIvZW1wdHlPYmplY3RcIik7XG5mdW5jdGlvbiBEKGEpe2Zvcih2YXIgYj1hcmd1bWVudHMubGVuZ3RoLTEsYz1cImh0dHA6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnRcXHgzZFwiK2EsZD0wO2Q8YjtkKyspYys9XCJcXHgyNmFyZ3NbXVxceDNkXCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tkKzFdKTtiYSghMSxcIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCAlcyBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuIFwiLGMpfWVhP3ZvaWQgMDpEKFwiMjI3XCIpO1xuZnVuY3Rpb24gbWEoYSxiLGMsZCxlLGYsaCxnLGspe3RoaXMuX2hhc0NhdWdodEVycm9yPSExO3RoaXMuX2NhdWdodEVycm9yPW51bGw7dmFyIHY9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsdil9Y2F0Y2gobCl7dGhpcy5fY2F1Z2h0RXJyb3I9bCx0aGlzLl9oYXNDYXVnaHRFcnJvcj0hMH19XG52YXIgRT17X2NhdWdodEVycm9yOm51bGwsX2hhc0NhdWdodEVycm9yOiExLF9yZXRocm93RXJyb3I6bnVsbCxfaGFzUmV0aHJvd0Vycm9yOiExLGludm9rZUd1YXJkZWRDYWxsYmFjazpmdW5jdGlvbihhLGIsYyxkLGUsZixoLGcsayl7bWEuYXBwbHkoRSxhcmd1bWVudHMpfSxpbnZva2VHdWFyZGVkQ2FsbGJhY2tBbmRDYXRjaEZpcnN0RXJyb3I6ZnVuY3Rpb24oYSxiLGMsZCxlLGYsaCxnLGspe0UuaW52b2tlR3VhcmRlZENhbGxiYWNrLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihFLmhhc0NhdWdodEVycm9yKCkpe3ZhciB2PUUuY2xlYXJDYXVnaHRFcnJvcigpO0UuX2hhc1JldGhyb3dFcnJvcnx8KEUuX2hhc1JldGhyb3dFcnJvcj0hMCxFLl9yZXRocm93RXJyb3I9dil9fSxyZXRocm93Q2F1Z2h0RXJyb3I6ZnVuY3Rpb24oKXtyZXR1cm4gbmEuYXBwbHkoRSxhcmd1bWVudHMpfSxoYXNDYXVnaHRFcnJvcjpmdW5jdGlvbigpe3JldHVybiBFLl9oYXNDYXVnaHRFcnJvcn0sY2xlYXJDYXVnaHRFcnJvcjpmdW5jdGlvbigpe2lmKEUuX2hhc0NhdWdodEVycm9yKXt2YXIgYT1cbkUuX2NhdWdodEVycm9yO0UuX2NhdWdodEVycm9yPW51bGw7RS5faGFzQ2F1Z2h0RXJyb3I9ITE7cmV0dXJuIGF9RChcIjE5OFwiKX19O2Z1bmN0aW9uIG5hKCl7aWYoRS5faGFzUmV0aHJvd0Vycm9yKXt2YXIgYT1FLl9yZXRocm93RXJyb3I7RS5fcmV0aHJvd0Vycm9yPW51bGw7RS5faGFzUmV0aHJvd0Vycm9yPSExO3Rocm93IGE7fX12YXIgb2E9bnVsbCxwYT17fTtcbmZ1bmN0aW9uIHFhKCl7aWYob2EpZm9yKHZhciBhIGluIHBhKXt2YXIgYj1wYVthXSxjPW9hLmluZGV4T2YoYSk7LTE8Yz92b2lkIDA6RChcIjk2XCIsYSk7aWYoIXJhW2NdKXtiLmV4dHJhY3RFdmVudHM/dm9pZCAwOkQoXCI5N1wiLGEpO3JhW2NdPWI7Yz1iLmV2ZW50VHlwZXM7Zm9yKHZhciBkIGluIGMpe3ZhciBlPXZvaWQgMDt2YXIgZj1jW2RdLGg9YixnPWQ7c2EuaGFzT3duUHJvcGVydHkoZyk/RChcIjk5XCIsZyk6dm9pZCAwO3NhW2ddPWY7dmFyIGs9Zi5waGFzZWRSZWdpc3RyYXRpb25OYW1lcztpZihrKXtmb3IoZSBpbiBrKWsuaGFzT3duUHJvcGVydHkoZSkmJnRhKGtbZV0saCxnKTtlPSEwfWVsc2UgZi5yZWdpc3RyYXRpb25OYW1lPyh0YShmLnJlZ2lzdHJhdGlvbk5hbWUsaCxnKSxlPSEwKTplPSExO2U/dm9pZCAwOkQoXCI5OFwiLGQsYSl9fX19XG5mdW5jdGlvbiB0YShhLGIsYyl7dWFbYV0/RChcIjEwMFwiLGEpOnZvaWQgMDt1YVthXT1iO3ZhW2FdPWIuZXZlbnRUeXBlc1tjXS5kZXBlbmRlbmNpZXN9dmFyIHJhPVtdLHNhPXt9LHVhPXt9LHZhPXt9O2Z1bmN0aW9uIHdhKGEpe29hP0QoXCIxMDFcIik6dm9pZCAwO29hPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGEpO3FhKCl9ZnVuY3Rpb24geGEoYSl7dmFyIGI9ITEsYztmb3IoYyBpbiBhKWlmKGEuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPWFbY107cGEuaGFzT3duUHJvcGVydHkoYykmJnBhW2NdPT09ZHx8KHBhW2NdP0QoXCIxMDJcIixjKTp2b2lkIDAscGFbY109ZCxiPSEwKX1iJiZxYSgpfVxudmFyIENhPU9iamVjdC5mcmVlemUoe3BsdWdpbnM6cmEsZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzOnNhLHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzOnVhLHJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXM6dmEscG9zc2libGVSZWdpc3RyYXRpb25OYW1lczpudWxsLGluamVjdEV2ZW50UGx1Z2luT3JkZXI6d2EsaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lOnhhfSksRGE9bnVsbCxFYT1udWxsLEZhPW51bGw7ZnVuY3Rpb24gR2EoYSxiLGMsZCl7Yj1hLnR5cGV8fFwidW5rbm93bi1ldmVudFwiO2EuY3VycmVudFRhcmdldD1GYShkKTtFLmludm9rZUd1YXJkZWRDYWxsYmFja0FuZENhdGNoRmlyc3RFcnJvcihiLGMsdm9pZCAwLGEpO2EuY3VycmVudFRhcmdldD1udWxsfVxuZnVuY3Rpb24gSGEoYSxiKXtudWxsPT1iP0QoXCIzMFwiKTp2b2lkIDA7aWYobnVsbD09YSlyZXR1cm4gYjtpZihBcnJheS5pc0FycmF5KGEpKXtpZihBcnJheS5pc0FycmF5KGIpKXJldHVybiBhLnB1c2guYXBwbHkoYSxiKSxhO2EucHVzaChiKTtyZXR1cm4gYX1yZXR1cm4gQXJyYXkuaXNBcnJheShiKT9bYV0uY29uY2F0KGIpOlthLGJdfWZ1bmN0aW9uIElhKGEsYixjKXtBcnJheS5pc0FycmF5KGEpP2EuZm9yRWFjaChiLGMpOmEmJmIuY2FsbChjLGEpfXZhciBKYT1udWxsO1xuZnVuY3Rpb24gS2EoYSxiKXtpZihhKXt2YXIgYz1hLl9kaXNwYXRjaExpc3RlbmVycyxkPWEuX2Rpc3BhdGNoSW5zdGFuY2VzO2lmKEFycmF5LmlzQXJyYXkoYykpZm9yKHZhciBlPTA7ZTxjLmxlbmd0aCYmIWEuaXNQcm9wYWdhdGlvblN0b3BwZWQoKTtlKyspR2EoYSxiLGNbZV0sZFtlXSk7ZWxzZSBjJiZHYShhLGIsYyxkKTthLl9kaXNwYXRjaExpc3RlbmVycz1udWxsO2EuX2Rpc3BhdGNoSW5zdGFuY2VzPW51bGw7YS5pc1BlcnNpc3RlbnQoKXx8YS5jb25zdHJ1Y3Rvci5yZWxlYXNlKGEpfX1mdW5jdGlvbiBMYShhKXtyZXR1cm4gS2EoYSwhMCl9ZnVuY3Rpb24gTWEoYSl7cmV0dXJuIEthKGEsITEpfXZhciBOYT17aW5qZWN0RXZlbnRQbHVnaW5PcmRlcjp3YSxpbmplY3RFdmVudFBsdWdpbnNCeU5hbWU6eGF9O1xuZnVuY3Rpb24gT2EoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtpZighYylyZXR1cm4gbnVsbDt2YXIgZD1EYShjKTtpZighZClyZXR1cm4gbnVsbDtjPWRbYl07YTpzd2l0Y2goYil7Y2FzZSBcIm9uQ2xpY2tcIjpjYXNlIFwib25DbGlja0NhcHR1cmVcIjpjYXNlIFwib25Eb3VibGVDbGlja1wiOmNhc2UgXCJvbkRvdWJsZUNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRG93blwiOmNhc2UgXCJvbk1vdXNlRG93bkNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZU1vdmVcIjpjYXNlIFwib25Nb3VzZU1vdmVDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VVcFwiOmNhc2UgXCJvbk1vdXNlVXBDYXB0dXJlXCI6KGQ9IWQuZGlzYWJsZWQpfHwoYT1hLnR5cGUsZD0hKFwiYnV0dG9uXCI9PT1hfHxcImlucHV0XCI9PT1hfHxcInNlbGVjdFwiPT09YXx8XCJ0ZXh0YXJlYVwiPT09YSkpO2E9IWQ7YnJlYWsgYTtkZWZhdWx0OmE9ITF9aWYoYSlyZXR1cm4gbnVsbDtjJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYz9EKFwiMjMxXCIsYix0eXBlb2YgYyk6dm9pZCAwO1xucmV0dXJuIGN9ZnVuY3Rpb24gUGEoYSxiKXtudWxsIT09YSYmKEphPUhhKEphLGEpKTthPUphO0phPW51bGw7YSYmKGI/SWEoYSxMYSk6SWEoYSxNYSksSmE/RChcIjk1XCIpOnZvaWQgMCxFLnJldGhyb3dDYXVnaHRFcnJvcigpKX1mdW5jdGlvbiBRYShhLGIsYyxkKXtmb3IodmFyIGU9bnVsbCxmPTA7ZjxyYS5sZW5ndGg7ZisrKXt2YXIgaD1yYVtmXTtoJiYoaD1oLmV4dHJhY3RFdmVudHMoYSxiLGMsZCkpJiYoZT1IYShlLGgpKX1QYShlLCExKX12YXIgUmE9T2JqZWN0LmZyZWV6ZSh7aW5qZWN0aW9uOk5hLGdldExpc3RlbmVyOk9hLHJ1bkV2ZW50c0luQmF0Y2g6UGEscnVuRXh0cmFjdGVkRXZlbnRzSW5CYXRjaDpRYX0pLFNhPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLEY9XCJfX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSRcIitTYSxUYT1cIl9fcmVhY3RFdmVudEhhbmRsZXJzJFwiK1NhO1xuZnVuY3Rpb24gVWEoYSl7aWYoYVtGXSlyZXR1cm4gYVtGXTtmb3IoOyFhW0ZdOylpZihhLnBhcmVudE5vZGUpYT1hLnBhcmVudE5vZGU7ZWxzZSByZXR1cm4gbnVsbDthPWFbRl07cmV0dXJuIDU9PT1hLnRhZ3x8Nj09PWEudGFnP2E6bnVsbH1mdW5jdGlvbiBWYShhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7RChcIjMzXCIpfWZ1bmN0aW9uIFhhKGEpe3JldHVybiBhW1RhXXx8bnVsbH12YXIgYmI9T2JqZWN0LmZyZWV6ZSh7cHJlY2FjaGVGaWJlck5vZGU6ZnVuY3Rpb24oYSxiKXtiW0ZdPWF9LGdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlOlVhLGdldEluc3RhbmNlRnJvbU5vZGU6ZnVuY3Rpb24oYSl7YT1hW0ZdO3JldHVybiFhfHw1IT09YS50YWcmJjYhPT1hLnRhZz9udWxsOmF9LGdldE5vZGVGcm9tSW5zdGFuY2U6VmEsZ2V0RmliZXJDdXJyZW50UHJvcHNGcm9tTm9kZTpYYSx1cGRhdGVGaWJlclByb3BzOmZ1bmN0aW9uKGEsYil7YVtUYV09Yn19KTtcbmZ1bmN0aW9uIEwoYSl7ZG8gYT1hW1wicmV0dXJuXCJdO3doaWxlKGEmJjUhPT1hLnRhZyk7cmV0dXJuIGE/YTpudWxsfWZ1bmN0aW9uIGNiKGEsYixjKXtmb3IodmFyIGQ9W107YTspZC5wdXNoKGEpLGE9TChhKTtmb3IoYT1kLmxlbmd0aDswPGEtLTspYihkW2FdLFwiY2FwdHVyZWRcIixjKTtmb3IoYT0wO2E8ZC5sZW5ndGg7YSsrKWIoZFthXSxcImJ1YmJsZWRcIixjKX1mdW5jdGlvbiBkYihhLGIsYyl7aWYoYj1PYShhLGMuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXNbYl0pKWMuX2Rpc3BhdGNoTGlzdGVuZXJzPUhhKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPUhhKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpfWZ1bmN0aW9uIGViKGEpe2EmJmEuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMmJmNiKGEuX3RhcmdldEluc3QsZGIsYSl9XG5mdW5jdGlvbiBmYihhKXtpZihhJiZhLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKXt2YXIgYj1hLl90YXJnZXRJbnN0O2I9Yj9MKGIpOm51bGw7Y2IoYixkYixhKX19ZnVuY3Rpb24gZ2IoYSxiLGMpe2EmJmMmJmMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmKGI9T2EoYSxjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUpKSYmKGMuX2Rpc3BhdGNoTGlzdGVuZXJzPUhhKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPUhhKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpKX1mdW5jdGlvbiBoYihhKXthJiZhLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJmdiKGEuX3RhcmdldEluc3QsbnVsbCxhKX1mdW5jdGlvbiBpYihhKXtJYShhLGViKX1cbmZ1bmN0aW9uIGpiKGEsYixjLGQpe2lmKGMmJmQpYTp7dmFyIGU9Yztmb3IodmFyIGY9ZCxoPTAsZz1lO2c7Zz1MKGcpKWgrKztnPTA7Zm9yKHZhciBrPWY7aztrPUwoaykpZysrO2Zvcig7MDxoLWc7KWU9TChlKSxoLS07Zm9yKDswPGctaDspZj1MKGYpLGctLTtmb3IoO2gtLTspe2lmKGU9PT1mfHxlPT09Zi5hbHRlcm5hdGUpYnJlYWsgYTtlPUwoZSk7Zj1MKGYpfWU9bnVsbH1lbHNlIGU9bnVsbDtmPWU7Zm9yKGU9W107YyYmYyE9PWY7KXtoPWMuYWx0ZXJuYXRlO2lmKG51bGwhPT1oJiZoPT09ZilicmVhaztlLnB1c2goYyk7Yz1MKGMpfWZvcihjPVtdO2QmJmQhPT1mOyl7aD1kLmFsdGVybmF0ZTtpZihudWxsIT09aCYmaD09PWYpYnJlYWs7Yy5wdXNoKGQpO2Q9TChkKX1mb3IoZD0wO2Q8ZS5sZW5ndGg7ZCsrKWdiKGVbZF0sXCJidWJibGVkXCIsYSk7Zm9yKGE9Yy5sZW5ndGg7MDxhLS07KWdiKGNbYV0sXCJjYXB0dXJlZFwiLGIpfVxudmFyIGtiPU9iamVjdC5mcmVlemUoe2FjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXM6aWIsYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NraXBUYXJnZXQ6ZnVuY3Rpb24oYSl7SWEoYSxmYil9LGFjY3VtdWxhdGVFbnRlckxlYXZlRGlzcGF0Y2hlczpqYixhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlczpmdW5jdGlvbihhKXtJYShhLGhiKX19KSxsYj1udWxsO2Z1bmN0aW9uIG1iKCl7IWxiJiZtLmNhblVzZURPTSYmKGxiPVwidGV4dENvbnRlbnRcImluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudD9cInRleHRDb250ZW50XCI6XCJpbm5lclRleHRcIik7cmV0dXJuIGxifXZhciBNPXtfcm9vdDpudWxsLF9zdGFydFRleHQ6bnVsbCxfZmFsbGJhY2tUZXh0Om51bGx9O1xuZnVuY3Rpb24gbmIoKXtpZihNLl9mYWxsYmFja1RleHQpcmV0dXJuIE0uX2ZhbGxiYWNrVGV4dDt2YXIgYSxiPU0uX3N0YXJ0VGV4dCxjPWIubGVuZ3RoLGQsZT1vYigpLGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGg9Yy1hO2ZvcihkPTE7ZDw9aCYmYltjLWRdPT09ZVtmLWRdO2QrKyk7TS5fZmFsbGJhY2tUZXh0PWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCk7cmV0dXJuIE0uX2ZhbGxiYWNrVGV4dH1mdW5jdGlvbiBvYigpe3JldHVyblwidmFsdWVcImluIE0uX3Jvb3Q/TS5fcm9vdC52YWx1ZTpNLl9yb290W21iKCldfVxudmFyIHBiPVwiZGlzcGF0Y2hDb25maWcgX3RhcmdldEluc3QgbmF0aXZlRXZlbnQgaXNEZWZhdWx0UHJldmVudGVkIGlzUHJvcGFnYXRpb25TdG9wcGVkIF9kaXNwYXRjaExpc3RlbmVycyBfZGlzcGF0Y2hJbnN0YW5jZXNcIi5zcGxpdChcIiBcIikscWI9e3R5cGU6bnVsbCx0YXJnZXQ6bnVsbCxjdXJyZW50VGFyZ2V0OkMudGhhdFJldHVybnNOdWxsLGV2ZW50UGhhc2U6bnVsbCxidWJibGVzOm51bGwsY2FuY2VsYWJsZTpudWxsLHRpbWVTdGFtcDpmdW5jdGlvbihhKXtyZXR1cm4gYS50aW1lU3RhbXB8fERhdGUubm93KCl9LGRlZmF1bHRQcmV2ZW50ZWQ6bnVsbCxpc1RydXN0ZWQ6bnVsbH07XG5mdW5jdGlvbiBOKGEsYixjLGQpe3RoaXMuZGlzcGF0Y2hDb25maWc9YTt0aGlzLl90YXJnZXRJbnN0PWI7dGhpcy5uYXRpdmVFdmVudD1jO2E9dGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2U7Zm9yKHZhciBlIGluIGEpYS5oYXNPd25Qcm9wZXJ0eShlKSYmKChiPWFbZV0pP3RoaXNbZV09YihjKTpcInRhcmdldFwiPT09ZT90aGlzLnRhcmdldD1kOnRoaXNbZV09Y1tlXSk7dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9KG51bGwhPWMuZGVmYXVsdFByZXZlbnRlZD9jLmRlZmF1bHRQcmV2ZW50ZWQ6ITE9PT1jLnJldHVyblZhbHVlKT9DLnRoYXRSZXR1cm5zVHJ1ZTpDLnRoYXRSZXR1cm5zRmFsc2U7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1DLnRoYXRSZXR1cm5zRmFsc2U7cmV0dXJuIHRoaXN9XG5BKE4ucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiYoYS5yZXR1cm5WYWx1ZT0hMSksdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9Qy50aGF0UmV0dXJuc1RydWUpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnN0b3BQcm9wYWdhdGlvbj9hLnN0b3BQcm9wYWdhdGlvbigpOlwidW5rbm93blwiIT09dHlwZW9mIGEuY2FuY2VsQnViYmxlJiYoYS5jYW5jZWxCdWJibGU9ITApLHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9Qy50aGF0UmV0dXJuc1RydWUpfSxwZXJzaXN0OmZ1bmN0aW9uKCl7dGhpcy5pc1BlcnNpc3RlbnQ9Qy50aGF0UmV0dXJuc1RydWV9LGlzUGVyc2lzdGVudDpDLnRoYXRSZXR1cm5zRmFsc2UsXG5kZXN0cnVjdG9yOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2UsYjtmb3IoYiBpbiBhKXRoaXNbYl09bnVsbDtmb3IoYT0wO2E8cGIubGVuZ3RoO2ErKyl0aGlzW3BiW2FdXT1udWxsfX0pO04uSW50ZXJmYWNlPXFiO04uZXh0ZW5kPWZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIoKXt9ZnVuY3Rpb24gYygpe3JldHVybiBkLmFwcGx5KHRoaXMsYXJndW1lbnRzKX12YXIgZD10aGlzO2IucHJvdG90eXBlPWQucHJvdG90eXBlO3ZhciBlPW5ldyBiO0EoZSxjLnByb3RvdHlwZSk7Yy5wcm90b3R5cGU9ZTtjLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1jO2MuSW50ZXJmYWNlPUEoe30sZC5JbnRlcmZhY2UsYSk7Yy5leHRlbmQ9ZC5leHRlbmQ7cmIoYyk7cmV0dXJuIGN9O3JiKE4pO1xuZnVuY3Rpb24gc2IoYSxiLGMsZCl7aWYodGhpcy5ldmVudFBvb2wubGVuZ3RoKXt2YXIgZT10aGlzLmV2ZW50UG9vbC5wb3AoKTt0aGlzLmNhbGwoZSxhLGIsYyxkKTtyZXR1cm4gZX1yZXR1cm4gbmV3IHRoaXMoYSxiLGMsZCl9ZnVuY3Rpb24gdGIoYSl7YSBpbnN0YW5jZW9mIHRoaXM/dm9pZCAwOkQoXCIyMjNcIik7YS5kZXN0cnVjdG9yKCk7MTA+dGhpcy5ldmVudFBvb2wubGVuZ3RoJiZ0aGlzLmV2ZW50UG9vbC5wdXNoKGEpfWZ1bmN0aW9uIHJiKGEpe2EuZXZlbnRQb29sPVtdO2EuZ2V0UG9vbGVkPXNiO2EucmVsZWFzZT10Yn12YXIgdWI9Ti5leHRlbmQoe2RhdGE6bnVsbH0pLHZiPU4uZXh0ZW5kKHtkYXRhOm51bGx9KSx3Yj1bOSwxMywyNywzMl0seGI9bS5jYW5Vc2VET00mJlwiQ29tcG9zaXRpb25FdmVudFwiaW4gd2luZG93LHliPW51bGw7bS5jYW5Vc2VET00mJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmKHliPWRvY3VtZW50LmRvY3VtZW50TW9kZSk7XG52YXIgemI9bS5jYW5Vc2VET00mJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiF5YixBYj1tLmNhblVzZURPTSYmKCF4Ynx8eWImJjg8eWImJjExPj15YiksQmI9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksS2I9e2JlZm9yZUlucHV0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQmVmb3JlSW5wdXRcIixjYXB0dXJlZDpcIm9uQmVmb3JlSW5wdXRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbXCJ0b3BDb21wb3NpdGlvbkVuZFwiLFwidG9wS2V5UHJlc3NcIixcInRvcFRleHRJbnB1dFwiLFwidG9wUGFzdGVcIl19LGNvbXBvc2l0aW9uRW5kOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25FbmRcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25FbmRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcInRvcEJsdXIgdG9wQ29tcG9zaXRpb25FbmQgdG9wS2V5RG93biB0b3BLZXlQcmVzcyB0b3BLZXlVcCB0b3BNb3VzZURvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uU3RhcnQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblN0YXJ0XCIsXG5jYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25TdGFydENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwidG9wQmx1ciB0b3BDb21wb3NpdGlvblN0YXJ0IHRvcEtleURvd24gdG9wS2V5UHJlc3MgdG9wS2V5VXAgdG9wTW91c2VEb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblVwZGF0ZTp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uVXBkYXRlXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uVXBkYXRlQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJ0b3BCbHVyIHRvcENvbXBvc2l0aW9uVXBkYXRlIHRvcEtleURvd24gdG9wS2V5UHJlc3MgdG9wS2V5VXAgdG9wTW91c2VEb3duXCIuc3BsaXQoXCIgXCIpfX0sTGI9ITE7XG5mdW5jdGlvbiBNYihhLGIpe3N3aXRjaChhKXtjYXNlIFwidG9wS2V5VXBcIjpyZXR1cm4tMSE9PXdiLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwidG9wS2V5RG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcInRvcEtleVByZXNzXCI6Y2FzZSBcInRvcE1vdXNlRG93blwiOmNhc2UgXCJ0b3BCbHVyXCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gTmIoYSl7YT1hLmRldGFpbDtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJlwiZGF0YVwiaW4gYT9hLmRhdGE6bnVsbH12YXIgT2I9ITE7ZnVuY3Rpb24gUGIoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcInRvcENvbXBvc2l0aW9uRW5kXCI6cmV0dXJuIE5iKGIpO2Nhc2UgXCJ0b3BLZXlQcmVzc1wiOmlmKDMyIT09Yi53aGljaClyZXR1cm4gbnVsbDtMYj0hMDtyZXR1cm4gQmI7Y2FzZSBcInRvcFRleHRJbnB1dFwiOnJldHVybiBhPWIuZGF0YSxhPT09QmImJkxiP251bGw6YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIFFiKGEsYil7aWYoT2IpcmV0dXJuXCJ0b3BDb21wb3NpdGlvbkVuZFwiPT09YXx8IXhiJiZNYihhLGIpPyhhPW5iKCksTS5fcm9vdD1udWxsLE0uX3N0YXJ0VGV4dD1udWxsLE0uX2ZhbGxiYWNrVGV4dD1udWxsLE9iPSExLGEpOm51bGw7c3dpdGNoKGEpe2Nhc2UgXCJ0b3BQYXN0ZVwiOnJldHVybiBudWxsO2Nhc2UgXCJ0b3BLZXlQcmVzc1wiOmlmKCEoYi5jdHJsS2V5fHxiLmFsdEtleXx8Yi5tZXRhS2V5KXx8Yi5jdHJsS2V5JiZiLmFsdEtleSl7aWYoYi5jaGFyJiYxPGIuY2hhci5sZW5ndGgpcmV0dXJuIGIuY2hhcjtpZihiLndoaWNoKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGIud2hpY2gpfXJldHVybiBudWxsO2Nhc2UgXCJ0b3BDb21wb3NpdGlvbkVuZFwiOnJldHVybiBBYj9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciBSYj17ZXZlbnRUeXBlczpLYixleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPXZvaWQgMDt2YXIgZj12b2lkIDA7aWYoeGIpYjp7c3dpdGNoKGEpe2Nhc2UgXCJ0b3BDb21wb3NpdGlvblN0YXJ0XCI6ZT1LYi5jb21wb3NpdGlvblN0YXJ0O2JyZWFrIGI7Y2FzZSBcInRvcENvbXBvc2l0aW9uRW5kXCI6ZT1LYi5jb21wb3NpdGlvbkVuZDticmVhayBiO2Nhc2UgXCJ0b3BDb21wb3NpdGlvblVwZGF0ZVwiOmU9S2IuY29tcG9zaXRpb25VcGRhdGU7YnJlYWsgYn1lPXZvaWQgMH1lbHNlIE9iP01iKGEsYykmJihlPUtiLmNvbXBvc2l0aW9uRW5kKTpcInRvcEtleURvd25cIj09PWEmJjIyOT09PWMua2V5Q29kZSYmKGU9S2IuY29tcG9zaXRpb25TdGFydCk7ZT8oQWImJihPYnx8ZSE9PUtiLmNvbXBvc2l0aW9uU3RhcnQ/ZT09PUtiLmNvbXBvc2l0aW9uRW5kJiZPYiYmKGY9bmIoKSk6KE0uX3Jvb3Q9ZCxNLl9zdGFydFRleHQ9b2IoKSxPYj0hMCkpLGU9dWIuZ2V0UG9vbGVkKGUsXG5iLGMsZCksZj9lLmRhdGE9ZjooZj1OYihjKSxudWxsIT09ZiYmKGUuZGF0YT1mKSksaWIoZSksZj1lKTpmPW51bGw7KGE9emI/UGIoYSxjKTpRYihhLGMpKT8oYj12Yi5nZXRQb29sZWQoS2IuYmVmb3JlSW5wdXQsYixjLGQpLGIuZGF0YT1hLGliKGIpKTpiPW51bGw7cmV0dXJuIG51bGw9PT1mP2I6bnVsbD09PWI/ZjpbZixiXX19LFNiPW51bGwsVGI9e2luamVjdEZpYmVyQ29udHJvbGxlZEhvc3RDb21wb25lbnQ6ZnVuY3Rpb24oYSl7U2I9YX19LFViPW51bGwsVmI9bnVsbDtmdW5jdGlvbiBXYihhKXtpZihhPUVhKGEpKXtTYiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIFNiLnJlc3RvcmVDb250cm9sbGVkU3RhdGU/dm9pZCAwOkQoXCIxOTRcIik7dmFyIGI9RGEoYS5zdGF0ZU5vZGUpO1NiLnJlc3RvcmVDb250cm9sbGVkU3RhdGUoYS5zdGF0ZU5vZGUsYS50eXBlLGIpfX1mdW5jdGlvbiBYYihhKXtVYj9WYj9WYi5wdXNoKGEpOlZiPVthXTpVYj1hfVxuZnVuY3Rpb24gWWIoKXtyZXR1cm4gbnVsbCE9PVVifHxudWxsIT09VmJ9ZnVuY3Rpb24gWmIoKXtpZihVYil7dmFyIGE9VWIsYj1WYjtWYj1VYj1udWxsO1diKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKylXYihiW2FdKX19dmFyICRiPU9iamVjdC5mcmVlemUoe2luamVjdGlvbjpUYixlbnF1ZXVlU3RhdGVSZXN0b3JlOlhiLG5lZWRzU3RhdGVSZXN0b3JlOlliLHJlc3RvcmVTdGF0ZUlmTmVlZGVkOlpifSk7ZnVuY3Rpb24gYWMoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBiYyhhLGIsYyl7cmV0dXJuIGEoYixjKX1mdW5jdGlvbiBjYygpe312YXIgZGM9ITE7ZnVuY3Rpb24gZWMoYSxiKXtpZihkYylyZXR1cm4gYShiKTtkYz0hMDt0cnl7cmV0dXJuIGFjKGEsYil9ZmluYWxseXtkYz0hMSxZYigpJiYoY2MoKSxaYigpKX19XG52YXIgZmM9e2NvbG9yOiEwLGRhdGU6ITAsZGF0ZXRpbWU6ITAsXCJkYXRldGltZS1sb2NhbFwiOiEwLGVtYWlsOiEwLG1vbnRoOiEwLG51bWJlcjohMCxwYXNzd29yZDohMCxyYW5nZTohMCxzZWFyY2g6ITAsdGVsOiEwLHRleHQ6ITAsdGltZTohMCx1cmw6ITAsd2VlazohMH07ZnVuY3Rpb24gZ2MoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWI/ISFmY1thLnR5cGVdOlwidGV4dGFyZWFcIj09PWI/ITA6ITF9ZnVuY3Rpb24gaGMoYSl7YT1hLnRhcmdldHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX1cbmZ1bmN0aW9uIGljKGEsYil7aWYoIW0uY2FuVXNlRE9NfHxiJiYhKFwiYWRkRXZlbnRMaXN0ZW5lclwiaW4gZG9jdW1lbnQpKXJldHVybiExO2E9XCJvblwiK2E7Yj1hIGluIGRvY3VtZW50O2J8fChiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYi5zZXRBdHRyaWJ1dGUoYSxcInJldHVybjtcIiksYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgYlthXSk7cmV0dXJuIGJ9ZnVuY3Rpb24gamMoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIGtjKGEpe3ZhciBiPWpjKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGMuZ2V0LmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtjLnNldC5jYWxsKHRoaXMsYSl9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KSx7Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1udWxsO2RlbGV0ZSBhW2JdfX19XG5mdW5jdGlvbiBsYyhhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9a2MoYSkpfWZ1bmN0aW9uIG1jKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD1qYyhhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfVxudmFyIG5jPWVhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELlJlYWN0Q3VycmVudE93bmVyLE89XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sW1wiZm9yXCJdLG9jPU8/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxwYz1PP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmNhbGxcIik6NjAxMDQscWM9Tz9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5yZXR1cm5cIik6NjAxMDUscmM9Tz9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsc2M9Tz9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyx0Yz1PP1N5bWJvbFtcImZvclwiXShcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LHVjPU8/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksdmM9Tz9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLHdjPU8/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxcbnhjPU8/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIseWM9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIHpjKGEpe2lmKG51bGw9PT1hfHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT15YyYmYVt5Y118fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1cbmZ1bmN0aW9uIEFjKGEpe2E9YS50eXBlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBhLmRpc3BsYXlOYW1lfHxhLm5hbWU7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVybiBhO3N3aXRjaChhKXtjYXNlIHNjOnJldHVyblwiUmVhY3RGcmFnbWVudFwiO2Nhc2UgcmM6cmV0dXJuXCJSZWFjdFBvcnRhbFwiO2Nhc2UgcGM6cmV0dXJuXCJSZWFjdENhbGxcIjtjYXNlIHFjOnJldHVyblwiUmVhY3RSZXR1cm5cIn1pZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHhjOnJldHVybiBhPWEucmVuZGVyLmRpc3BsYXlOYW1lfHxhLnJlbmRlci5uYW1lfHxcIlwiLFwiXCIhPT1hP1wiRm9yd2FyZFJlZihcIithK1wiKVwiOlwiRm9yd2FyZFJlZlwifXJldHVybiBudWxsfVxuZnVuY3Rpb24gQmMoYSl7dmFyIGI9XCJcIjtkb3thOnN3aXRjaChhLnRhZyl7Y2FzZSAwOmNhc2UgMTpjYXNlIDI6Y2FzZSA1OnZhciBjPWEuX2RlYnVnT3duZXIsZD1hLl9kZWJ1Z1NvdXJjZTt2YXIgZT1BYyhhKTt2YXIgZj1udWxsO2MmJihmPUFjKGMpKTtjPWQ7ZT1cIlxcbiAgICBpbiBcIisoZXx8XCJVbmtub3duXCIpKyhjP1wiIChhdCBcIitjLmZpbGVOYW1lLnJlcGxhY2UoL14uKltcXFxcXFwvXS8sXCJcIikrXCI6XCIrYy5saW5lTnVtYmVyK1wiKVwiOmY/XCIgKGNyZWF0ZWQgYnkgXCIrZitcIilcIjpcIlwiKTticmVhayBhO2RlZmF1bHQ6ZT1cIlwifWIrPWU7YT1hW1wicmV0dXJuXCJdfXdoaWxlKGEpO3JldHVybiBifVxudmFyIENjPS9eWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXVs6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcLS4wLTlcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwXSokLyxEYz17fSxFYz17fTtmdW5jdGlvbiBGYyhhKXtpZihFYy5oYXNPd25Qcm9wZXJ0eShhKSlyZXR1cm4hMDtpZihEYy5oYXNPd25Qcm9wZXJ0eShhKSlyZXR1cm4hMTtpZihDYy50ZXN0KGEpKXJldHVybiBFY1thXT0hMDtEY1thXT0hMDtyZXR1cm4hMX1cbmZ1bmN0aW9uIEdjKGEsYixjLGQpe2lmKG51bGwhPT1jJiYwPT09Yy50eXBlKXJldHVybiExO3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcImZ1bmN0aW9uXCI6Y2FzZSBcInN5bWJvbFwiOnJldHVybiEwO2Nhc2UgXCJib29sZWFuXCI6aWYoZClyZXR1cm4hMTtpZihudWxsIT09YylyZXR1cm4hYy5hY2NlcHRzQm9vbGVhbnM7YT1hLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw1KTtyZXR1cm5cImRhdGEtXCIhPT1hJiZcImFyaWEtXCIhPT1hO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIEhjKGEsYixjLGQpe2lmKG51bGw9PT1ifHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGJ8fEdjKGEsYixjLGQpKXJldHVybiEwO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfVxuZnVuY3Rpb24gVShhLGIsYyxkLGUpe3RoaXMuYWNjZXB0c0Jvb2xlYW5zPTI9PT1ifHwzPT09Ynx8ND09PWI7dGhpcy5hdHRyaWJ1dGVOYW1lPWQ7dGhpcy5hdHRyaWJ1dGVOYW1lc3BhY2U9ZTt0aGlzLm11c3RVc2VQcm9wZXJ0eT1jO3RoaXMucHJvcGVydHlOYW1lPWE7dGhpcy50eXBlPWJ9dmFyIFY9e307XCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtWW2FdPW5ldyBVKGEsMCwhMSxhLG51bGwpfSk7XG5bW1wiYWNjZXB0Q2hhcnNldFwiLFwiYWNjZXB0LWNoYXJzZXRcIl0sW1wiY2xhc3NOYW1lXCIsXCJjbGFzc1wiXSxbXCJodG1sRm9yXCIsXCJmb3JcIl0sW1wiaHR0cEVxdWl2XCIsXCJodHRwLWVxdWl2XCJdXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWFbMF07VltiXT1uZXcgVShiLDEsITEsYVsxXSxudWxsKX0pO1tcImNvbnRlbnRFZGl0YWJsZVwiLFwiZHJhZ2dhYmxlXCIsXCJzcGVsbENoZWNrXCIsXCJ2YWx1ZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1ZbYV09bmV3IFUoYSwyLCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1tcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7VlthXT1uZXcgVShhLDIsITEsYSxudWxsKX0pO1xuXCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZm9ybU5vVmFsaWRhdGUgaGlkZGVuIGxvb3Agbm9Nb2R1bGUgbm9WYWxpZGF0ZSBvcGVuIHBsYXlzSW5saW5lIHJlYWRPbmx5IHJlcXVpcmVkIHJldmVyc2VkIHNjb3BlZCBzZWFtbGVzcyBpdGVtU2NvcGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtWW2FdPW5ldyBVKGEsMywhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtbXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7VlthXT1uZXcgVShhLDMsITAsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7W1wiY2FwdHVyZVwiLFwiZG93bmxvYWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtWW2FdPW5ldyBVKGEsNCwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtcbltcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtWW2FdPW5ldyBVKGEsNiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtbXCJyb3dTcGFuXCIsXCJzdGFydFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1ZbYV09bmV3IFUoYSw1LCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO3ZhciBTYz0vW1xcLTpdKFthLXpdKS9nO2Z1bmN0aW9uIFRjKGEpe3JldHVybiBhWzFdLnRvVXBwZXJDYXNlKCl9XG5cImFjY2VudC1oZWlnaHQgYWxpZ25tZW50LWJhc2VsaW5lIGFyYWJpYy1mb3JtIGJhc2VsaW5lLXNoaWZ0IGNhcC1oZWlnaHQgY2xpcC1wYXRoIGNsaXAtcnVsZSBjb2xvci1pbnRlcnBvbGF0aW9uIGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycyBjb2xvci1wcm9maWxlIGNvbG9yLXJlbmRlcmluZyBkb21pbmFudC1iYXNlbGluZSBlbmFibGUtYmFja2dyb3VuZCBmaWxsLW9wYWNpdHkgZmlsbC1ydWxlIGZsb29kLWNvbG9yIGZsb29kLW9wYWNpdHkgZm9udC1mYW1pbHkgZm9udC1zaXplIGZvbnQtc2l6ZS1hZGp1c3QgZm9udC1zdHJldGNoIGZvbnQtc3R5bGUgZm9udC12YXJpYW50IGZvbnQtd2VpZ2h0IGdseXBoLW5hbWUgZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCBnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbCBob3Jpei1hZHYteCBob3Jpei1vcmlnaW4teCBpbWFnZS1yZW5kZXJpbmcgbGV0dGVyLXNwYWNpbmcgbGlnaHRpbmctY29sb3IgbWFya2VyLWVuZCBtYXJrZXItbWlkIG1hcmtlci1zdGFydCBvdmVybGluZS1wb3NpdGlvbiBvdmVybGluZS10aGlja25lc3MgcGFpbnQtb3JkZXIgcGFub3NlLTEgcG9pbnRlci1ldmVudHMgcmVuZGVyaW5nLWludGVudCBzaGFwZS1yZW5kZXJpbmcgc3RvcC1jb2xvciBzdG9wLW9wYWNpdHkgc3RyaWtldGhyb3VnaC1wb3NpdGlvbiBzdHJpa2V0aHJvdWdoLXRoaWNrbmVzcyBzdHJva2UtZGFzaGFycmF5IHN0cm9rZS1kYXNob2Zmc2V0IHN0cm9rZS1saW5lY2FwIHN0cm9rZS1saW5lam9pbiBzdHJva2UtbWl0ZXJsaW1pdCBzdHJva2Utb3BhY2l0eSBzdHJva2Utd2lkdGggdGV4dC1hbmNob3IgdGV4dC1kZWNvcmF0aW9uIHRleHQtcmVuZGVyaW5nIHVuZGVybGluZS1wb3NpdGlvbiB1bmRlcmxpbmUtdGhpY2tuZXNzIHVuaWNvZGUtYmlkaSB1bmljb2RlLXJhbmdlIHVuaXRzLXBlci1lbSB2LWFscGhhYmV0aWMgdi1oYW5naW5nIHYtaWRlb2dyYXBoaWMgdi1tYXRoZW1hdGljYWwgdmVjdG9yLWVmZmVjdCB2ZXJ0LWFkdi15IHZlcnQtb3JpZ2luLXggdmVydC1vcmlnaW4teSB3b3JkLXNwYWNpbmcgd3JpdGluZy1tb2RlIHhtbG5zOnhsaW5rIHgtaGVpZ2h0XCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKFNjLFxuVGMpO1ZbYl09bmV3IFUoYiwxLCExLGEsbnVsbCl9KTtcInhsaW5rOmFjdHVhdGUgeGxpbms6YXJjcm9sZSB4bGluazpocmVmIHhsaW5rOnJvbGUgeGxpbms6c2hvdyB4bGluazp0aXRsZSB4bGluazp0eXBlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKFNjLFRjKTtWW2JdPW5ldyBVKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiKX0pO1tcInhtbDpiYXNlXCIsXCJ4bWw6bGFuZ1wiLFwieG1sOnNwYWNlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKFNjLFRjKTtWW2JdPW5ldyBVKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIpfSk7Vi50YWJJbmRleD1uZXcgVShcInRhYkluZGV4XCIsMSwhMSxcInRhYmluZGV4XCIsbnVsbCk7XG5mdW5jdGlvbiBVYyhhLGIsYyxkKXt2YXIgZT1WLmhhc093blByb3BlcnR5KGIpP1ZbYl06bnVsbDt2YXIgZj1udWxsIT09ZT8wPT09ZS50eXBlOmQ/ITE6ISgyPGIubGVuZ3RoKXx8XCJvXCIhPT1iWzBdJiZcIk9cIiE9PWJbMF18fFwiblwiIT09YlsxXSYmXCJOXCIhPT1iWzFdPyExOiEwO2Z8fChIYyhiLGMsZSxkKSYmKGM9bnVsbCksZHx8bnVsbD09PWU/RmMoYikmJihudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTphLnNldEF0dHJpYnV0ZShiLFwiXCIrYykpOmUubXVzdFVzZVByb3BlcnR5P2FbZS5wcm9wZXJ0eU5hbWVdPW51bGw9PT1jPzM9PT1lLnR5cGU/ITE6XCJcIjpjOihiPWUuYXR0cmlidXRlTmFtZSxkPWUuYXR0cmlidXRlTmFtZXNwYWNlLG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOihlPWUudHlwZSxjPTM9PT1lfHw0PT09ZSYmITA9PT1jP1wiXCI6XCJcIitjLGQ/YS5zZXRBdHRyaWJ1dGVOUyhkLGIsYyk6YS5zZXRBdHRyaWJ1dGUoYixjKSkpKX1cbmZ1bmN0aW9uIFZjKGEsYil7dmFyIGM9Yi5jaGVja2VkO3JldHVybiBBKHt9LGIse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOnZvaWQgMCxjaGVja2VkOm51bGwhPWM/YzphLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWR9KX1mdW5jdGlvbiBXYyhhLGIpe3ZhciBjPW51bGw9PWIuZGVmYXVsdFZhbHVlP1wiXCI6Yi5kZWZhdWx0VmFsdWUsZD1udWxsIT1iLmNoZWNrZWQ/Yi5jaGVja2VkOmIuZGVmYXVsdENoZWNrZWQ7Yz1YYyhudWxsIT1iLnZhbHVlP2IudmFsdWU6Yyk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsQ2hlY2tlZDpkLGluaXRpYWxWYWx1ZTpjLGNvbnRyb2xsZWQ6XCJjaGVja2JveFwiPT09Yi50eXBlfHxcInJhZGlvXCI9PT1iLnR5cGU/bnVsbCE9Yi5jaGVja2VkOm51bGwhPWIudmFsdWV9fWZ1bmN0aW9uIFljKGEsYil7Yj1iLmNoZWNrZWQ7bnVsbCE9YiYmVWMoYSxcImNoZWNrZWRcIixiLCExKX1cbmZ1bmN0aW9uIFpjKGEsYil7WWMoYSxiKTt2YXIgYz1YYyhiLnZhbHVlKTtpZihudWxsIT1jKWlmKFwibnVtYmVyXCI9PT1iLnR5cGUpe2lmKDA9PT1jJiZcIlwiPT09YS52YWx1ZXx8YS52YWx1ZSE9YylhLnZhbHVlPVwiXCIrY31lbHNlIGEudmFsdWUhPT1cIlwiK2MmJihhLnZhbHVlPVwiXCIrYyk7Yi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpPyRjKGEsYi50eXBlLGMpOmIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikmJiRjKGEsYi50eXBlLFhjKGIuZGVmYXVsdFZhbHVlKSk7bnVsbD09Yi5jaGVja2VkJiZudWxsIT1iLmRlZmF1bHRDaGVja2VkJiYoYS5kZWZhdWx0Q2hlY2tlZD0hIWIuZGVmYXVsdENoZWNrZWQpfVxuZnVuY3Rpb24gYWQoYSxiKXtpZihiLmhhc093blByb3BlcnR5KFwidmFsdWVcIil8fGIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikpXCJcIj09PWEudmFsdWUmJihhLnZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSksYS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlO2I9YS5uYW1lO1wiXCIhPT1iJiYoYS5uYW1lPVwiXCIpO2EuZGVmYXVsdENoZWNrZWQ9IWEuZGVmYXVsdENoZWNrZWQ7YS5kZWZhdWx0Q2hlY2tlZD0hYS5kZWZhdWx0Q2hlY2tlZDtcIlwiIT09YiYmKGEubmFtZT1iKX1mdW5jdGlvbiAkYyhhLGIsYyl7aWYoXCJudW1iZXJcIiE9PWJ8fGEub3duZXJEb2N1bWVudC5hY3RpdmVFbGVtZW50IT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9XG5mdW5jdGlvbiBYYyhhKXtzd2l0Y2godHlwZW9mIGEpe2Nhc2UgXCJib29sZWFuXCI6Y2FzZSBcIm51bWJlclwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcInVuZGVmaW5lZFwiOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuXCJcIn19dmFyIGJkPXtjaGFuZ2U6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25DaGFuZ2VcIixjYXB0dXJlZDpcIm9uQ2hhbmdlQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJ0b3BCbHVyIHRvcENoYW5nZSB0b3BDbGljayB0b3BGb2N1cyB0b3BJbnB1dCB0b3BLZXlEb3duIHRvcEtleVVwIHRvcFNlbGVjdGlvbkNoYW5nZVwiLnNwbGl0KFwiIFwiKX19O2Z1bmN0aW9uIGNkKGEsYixjKXthPU4uZ2V0UG9vbGVkKGJkLmNoYW5nZSxhLGIsYyk7YS50eXBlPVwiY2hhbmdlXCI7WGIoYyk7aWIoYSk7cmV0dXJuIGF9dmFyIGRkPW51bGwsZWQ9bnVsbDtmdW5jdGlvbiBmZChhKXtQYShhLCExKX1cbmZ1bmN0aW9uIGdkKGEpe3ZhciBiPVZhKGEpO2lmKG1jKGIpKXJldHVybiBhfWZ1bmN0aW9uIGhkKGEsYil7aWYoXCJ0b3BDaGFuZ2VcIj09PWEpcmV0dXJuIGJ9dmFyIGlkPSExO20uY2FuVXNlRE9NJiYoaWQ9aWMoXCJpbnB1dFwiKSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKSk7ZnVuY3Rpb24gamQoKXtkZCYmKGRkLmRldGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLGtkKSxlZD1kZD1udWxsKX1mdW5jdGlvbiBrZChhKXtcInZhbHVlXCI9PT1hLnByb3BlcnR5TmFtZSYmZ2QoZWQpJiYoYT1jZChlZCxhLGhjKGEpKSxlYyhmZCxhKSl9ZnVuY3Rpb24gbGQoYSxiLGMpe1widG9wRm9jdXNcIj09PWE/KGpkKCksZGQ9YixlZD1jLGRkLmF0dGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLGtkKSk6XCJ0b3BCbHVyXCI9PT1hJiZqZCgpfVxuZnVuY3Rpb24gbWQoYSl7aWYoXCJ0b3BTZWxlY3Rpb25DaGFuZ2VcIj09PWF8fFwidG9wS2V5VXBcIj09PWF8fFwidG9wS2V5RG93blwiPT09YSlyZXR1cm4gZ2QoZWQpfWZ1bmN0aW9uIG5kKGEsYil7aWYoXCJ0b3BDbGlja1wiPT09YSlyZXR1cm4gZ2QoYil9ZnVuY3Rpb24gb2QoYSxiKXtpZihcInRvcElucHV0XCI9PT1hfHxcInRvcENoYW5nZVwiPT09YSlyZXR1cm4gZ2QoYil9XG52YXIgcGQ9e2V2ZW50VHlwZXM6YmQsX2lzSW5wdXRFdmVudFN1cHBvcnRlZDppZCxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWI/VmEoYik6d2luZG93LGY9dm9pZCAwLGg9dm9pZCAwLGc9ZS5ub2RlTmFtZSYmZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1wic2VsZWN0XCI9PT1nfHxcImlucHV0XCI9PT1nJiZcImZpbGVcIj09PWUudHlwZT9mPWhkOmdjKGUpP2lkP2Y9b2Q6KGY9bWQsaD1sZCk6KGc9ZS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWcudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWUudHlwZXx8XCJyYWRpb1wiPT09ZS50eXBlKSYmKGY9bmQpO2lmKGYmJihmPWYoYSxiKSkpcmV0dXJuIGNkKGYsYyxkKTtoJiZoKGEsZSxiKTtcInRvcEJsdXJcIj09PWEmJm51bGwhPWImJihhPWIuX3dyYXBwZXJTdGF0ZXx8ZS5fd3JhcHBlclN0YXRlKSYmYS5jb250cm9sbGVkJiZcIm51bWJlclwiPT09ZS50eXBlJiYkYyhlLFwibnVtYmVyXCIsZS52YWx1ZSl9fSxxZD1OLmV4dGVuZCh7dmlldzpudWxsLFxuZGV0YWlsOm51bGx9KSxyZD17QWx0OlwiYWx0S2V5XCIsQ29udHJvbDpcImN0cmxLZXlcIixNZXRhOlwibWV0YUtleVwiLFNoaWZ0Olwic2hpZnRLZXlcIn07ZnVuY3Rpb24gc2QoYSl7dmFyIGI9dGhpcy5uYXRpdmVFdmVudDtyZXR1cm4gYi5nZXRNb2RpZmllclN0YXRlP2IuZ2V0TW9kaWZpZXJTdGF0ZShhKTooYT1yZFthXSk/ISFiW2FdOiExfWZ1bmN0aW9uIHRkKCl7cmV0dXJuIHNkfVxudmFyIHVkPXFkLmV4dGVuZCh7c2NyZWVuWDpudWxsLHNjcmVlblk6bnVsbCxjbGllbnRYOm51bGwsY2xpZW50WTpudWxsLHBhZ2VYOm51bGwscGFnZVk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTp0ZCxidXR0b246bnVsbCxidXR0b25zOm51bGwscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gYS5yZWxhdGVkVGFyZ2V0fHwoYS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50KX19KSx2ZD17bW91c2VFbnRlcjp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uTW91c2VFbnRlclwiLGRlcGVuZGVuY2llczpbXCJ0b3BNb3VzZU91dFwiLFwidG9wTW91c2VPdmVyXCJdfSxtb3VzZUxlYXZlOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUxlYXZlXCIsZGVwZW5kZW5jaWVzOltcInRvcE1vdXNlT3V0XCIsXCJ0b3BNb3VzZU92ZXJcIl19fSx3ZD17ZXZlbnRUeXBlczp2ZCxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsXG5iLGMsZCl7aWYoXCJ0b3BNb3VzZU92ZXJcIj09PWEmJihjLnJlbGF0ZWRUYXJnZXR8fGMuZnJvbUVsZW1lbnQpfHxcInRvcE1vdXNlT3V0XCIhPT1hJiZcInRvcE1vdXNlT3ZlclwiIT09YSlyZXR1cm4gbnVsbDt2YXIgZT1kLndpbmRvdz09PWQ/ZDooZT1kLm93bmVyRG9jdW1lbnQpP2UuZGVmYXVsdFZpZXd8fGUucGFyZW50V2luZG93OndpbmRvdztcInRvcE1vdXNlT3V0XCI9PT1hPyhhPWIsYj0oYj1jLnJlbGF0ZWRUYXJnZXR8fGMudG9FbGVtZW50KT9VYShiKTpudWxsKTphPW51bGw7aWYoYT09PWIpcmV0dXJuIG51bGw7dmFyIGY9bnVsbD09YT9lOlZhKGEpO2U9bnVsbD09Yj9lOlZhKGIpO3ZhciBoPXVkLmdldFBvb2xlZCh2ZC5tb3VzZUxlYXZlLGEsYyxkKTtoLnR5cGU9XCJtb3VzZWxlYXZlXCI7aC50YXJnZXQ9ZjtoLnJlbGF0ZWRUYXJnZXQ9ZTtjPXVkLmdldFBvb2xlZCh2ZC5tb3VzZUVudGVyLGIsYyxkKTtjLnR5cGU9XCJtb3VzZWVudGVyXCI7Yy50YXJnZXQ9ZTtjLnJlbGF0ZWRUYXJnZXQ9XG5mO2piKGgsYyxhLGIpO3JldHVybltoLGNdfX07ZnVuY3Rpb24geGQoYSl7dmFyIGI9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2JbXCJyZXR1cm5cIl07KWI9YltcInJldHVyblwiXTtlbHNle2lmKDAhPT0oYi5lZmZlY3RUYWcmMikpcmV0dXJuIDE7Zm9yKDtiW1wicmV0dXJuXCJdOylpZihiPWJbXCJyZXR1cm5cIl0sMCE9PShiLmVmZmVjdFRhZyYyKSlyZXR1cm4gMX1yZXR1cm4gMz09PWIudGFnPzI6M31mdW5jdGlvbiB5ZChhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFsRmliZXIpPzI9PT14ZChhKTohMX1mdW5jdGlvbiB6ZChhKXsyIT09eGQoYSk/RChcIjE4OFwiKTp2b2lkIDB9XG5mdW5jdGlvbiBBZChhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYilyZXR1cm4gYj14ZChhKSwzPT09Yj9EKFwiMTg4XCIpOnZvaWQgMCwxPT09Yj9udWxsOmE7Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWNbXCJyZXR1cm5cIl0sZj1lP2UuYWx0ZXJuYXRlOm51bGw7aWYoIWV8fCFmKWJyZWFrO2lmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IodmFyIGg9ZS5jaGlsZDtoOyl7aWYoaD09PWMpcmV0dXJuIHpkKGUpLGE7aWYoaD09PWQpcmV0dXJuIHpkKGUpLGI7aD1oLnNpYmxpbmd9RChcIjE4OFwiKX1pZihjW1wicmV0dXJuXCJdIT09ZFtcInJldHVyblwiXSljPWUsZD1mO2Vsc2V7aD0hMTtmb3IodmFyIGc9ZS5jaGlsZDtnOyl7aWYoZz09PWMpe2g9ITA7Yz1lO2Q9ZjticmVha31pZihnPT09ZCl7aD0hMDtkPWU7Yz1mO2JyZWFrfWc9Zy5zaWJsaW5nfWlmKCFoKXtmb3IoZz1mLmNoaWxkO2c7KXtpZihnPT09Yyl7aD0hMDtjPWY7ZD1lO2JyZWFrfWlmKGc9PT1kKXtoPSEwO2Q9ZjtjPWU7YnJlYWt9Zz1nLnNpYmxpbmd9aD9cbnZvaWQgMDpEKFwiMTg5XCIpfX1jLmFsdGVybmF0ZSE9PWQ/RChcIjE5MFwiKTp2b2lkIDB9MyE9PWMudGFnP0QoXCIxODhcIik6dm9pZCAwO3JldHVybiBjLnN0YXRlTm9kZS5jdXJyZW50PT09Yz9hOmJ9ZnVuY3Rpb24gQmQoYSl7YT1BZChhKTtpZighYSlyZXR1cm4gbnVsbDtmb3IodmFyIGI9YTs7KXtpZig1PT09Yi50YWd8fDY9PT1iLnRhZylyZXR1cm4gYjtpZihiLmNoaWxkKWIuY2hpbGRbXCJyZXR1cm5cIl09YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYltcInJldHVyblwiXXx8YltcInJldHVyblwiXT09PWEpcmV0dXJuIG51bGw7Yj1iW1wicmV0dXJuXCJdfWIuc2libGluZ1tcInJldHVyblwiXT1iW1wicmV0dXJuXCJdO2I9Yi5zaWJsaW5nfX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIENkKGEpe2E9QWQoYSk7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKHZhciBiPWE7Oyl7aWYoNT09PWIudGFnfHw2PT09Yi50YWcpcmV0dXJuIGI7aWYoYi5jaGlsZCYmNCE9PWIudGFnKWIuY2hpbGRbXCJyZXR1cm5cIl09YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYltcInJldHVyblwiXXx8YltcInJldHVyblwiXT09PWEpcmV0dXJuIG51bGw7Yj1iW1wicmV0dXJuXCJdfWIuc2libGluZ1tcInJldHVyblwiXT1iW1wicmV0dXJuXCJdO2I9Yi5zaWJsaW5nfX1yZXR1cm4gbnVsbH12YXIgRGQ9Ti5leHRlbmQoe2FuaW1hdGlvbk5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLEVkPU4uZXh0ZW5kKHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSksRmQ9cWQuZXh0ZW5kKHtyZWxhdGVkVGFyZ2V0Om51bGx9KTtcbmZ1bmN0aW9uIEdkKGEpe3ZhciBiPWEua2V5Q29kZTtcImNoYXJDb2RlXCJpbiBhPyhhPWEuY2hhckNvZGUsMD09PWEmJjEzPT09YiYmKGE9MTMpKTphPWI7MTA9PT1hJiYoYT0xMyk7cmV0dXJuIDMyPD1hfHwxMz09PWE/YTowfVxudmFyIEhkPXtFc2M6XCJFc2NhcGVcIixTcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxJZD17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIixcbjExNjpcIkY1XCIsMTE3OlwiRjZcIiwxMTg6XCJGN1wiLDExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0sSmQ9cWQuZXh0ZW5kKHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPUhkW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPUdkKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9JZFthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGxvY2F0aW9uOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLHJlcGVhdDpudWxsLGxvY2FsZTpudWxsLGdldE1vZGlmaWVyU3RhdGU6dGQsY2hhckNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09XG5hLnR5cGU/R2QoYSk6MH0sa2V5Q29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfSx3aGljaDpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/R2QoYSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH19KSxLZD11ZC5leHRlbmQoe2RhdGFUcmFuc2ZlcjpudWxsfSksTGQ9cWQuZXh0ZW5kKHt0b3VjaGVzOm51bGwsdGFyZ2V0VG91Y2hlczpudWxsLGNoYW5nZWRUb3VjaGVzOm51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6dGR9KSxNZD1OLmV4dGVuZCh7cHJvcGVydHlOYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSxOZD11ZC5leHRlbmQoe2RlbHRhWDpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWFwiaW4gYT9hLmRlbHRhWDpcIndoZWVsRGVsdGFYXCJpblxuYT8tYS53aGVlbERlbHRhWDowfSxkZWx0YVk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVlcImluIGE/YS5kZWx0YVk6XCJ3aGVlbERlbHRhWVwiaW4gYT8tYS53aGVlbERlbHRhWTpcIndoZWVsRGVsdGFcImluIGE/LWEud2hlZWxEZWx0YTowfSxkZWx0YVo6bnVsbCxkZWx0YU1vZGU6bnVsbH0pLE9kPXt9LFBkPXt9O2Z1bmN0aW9uIFFkKGEsYil7dmFyIGM9YVswXS50b1VwcGVyQ2FzZSgpK2Euc2xpY2UoMSksZD1cIm9uXCIrYztjPVwidG9wXCIrYztiPXtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpkLGNhcHR1cmVkOmQrXCJDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbY10saXNJbnRlcmFjdGl2ZTpifTtPZFthXT1iO1BkW2NdPWJ9XG5cImJsdXIgY2FuY2VsIGNsaWNrIGNsb3NlIGNvbnRleHRNZW51IGNvcHkgY3V0IGRvdWJsZUNsaWNrIGRyYWdFbmQgZHJhZ1N0YXJ0IGRyb3AgZm9jdXMgaW5wdXQgaW52YWxpZCBrZXlEb3duIGtleVByZXNzIGtleVVwIG1vdXNlRG93biBtb3VzZVVwIHBhc3RlIHBhdXNlIHBsYXkgcmF0ZUNoYW5nZSByZXNldCBzZWVrZWQgc3VibWl0IHRvdWNoQ2FuY2VsIHRvdWNoRW5kIHRvdWNoU3RhcnQgdm9sdW1lQ2hhbmdlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7UWQoYSwhMCl9KTtcblwiYWJvcnQgYW5pbWF0aW9uRW5kIGFuaW1hdGlvbkl0ZXJhdGlvbiBhbmltYXRpb25TdGFydCBjYW5QbGF5IGNhblBsYXlUaHJvdWdoIGRyYWcgZHJhZ0VudGVyIGRyYWdFeGl0IGRyYWdMZWF2ZSBkcmFnT3ZlciBkdXJhdGlvbkNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBsb2FkIGxvYWRlZERhdGEgbG9hZGVkTWV0YWRhdGEgbG9hZFN0YXJ0IG1vdXNlTW92ZSBtb3VzZU91dCBtb3VzZU92ZXIgcGxheWluZyBwcm9ncmVzcyBzY3JvbGwgc2Vla2luZyBzdGFsbGVkIHN1c3BlbmQgdGltZVVwZGF0ZSB0b2dnbGUgdG91Y2hNb3ZlIHRyYW5zaXRpb25FbmQgd2FpdGluZyB3aGVlbFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1FkKGEsITEpfSk7XG52YXIgUmQ9e2V2ZW50VHlwZXM6T2QsaXNJbnRlcmFjdGl2ZVRvcExldmVsRXZlbnRUeXBlOmZ1bmN0aW9uKGEpe2E9UGRbYV07cmV0dXJuIHZvaWQgMCE9PWEmJiEwPT09YS5pc0ludGVyYWN0aXZlfSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPVBkW2FdO2lmKCFlKXJldHVybiBudWxsO3N3aXRjaChhKXtjYXNlIFwidG9wS2V5UHJlc3NcIjppZigwPT09R2QoYykpcmV0dXJuIG51bGw7Y2FzZSBcInRvcEtleURvd25cIjpjYXNlIFwidG9wS2V5VXBcIjphPUpkO2JyZWFrO2Nhc2UgXCJ0b3BCbHVyXCI6Y2FzZSBcInRvcEZvY3VzXCI6YT1GZDticmVhaztjYXNlIFwidG9wQ2xpY2tcIjppZigyPT09Yy5idXR0b24pcmV0dXJuIG51bGw7Y2FzZSBcInRvcERvdWJsZUNsaWNrXCI6Y2FzZSBcInRvcE1vdXNlRG93blwiOmNhc2UgXCJ0b3BNb3VzZU1vdmVcIjpjYXNlIFwidG9wTW91c2VVcFwiOmNhc2UgXCJ0b3BNb3VzZU91dFwiOmNhc2UgXCJ0b3BNb3VzZU92ZXJcIjpjYXNlIFwidG9wQ29udGV4dE1lbnVcIjphPVxudWQ7YnJlYWs7Y2FzZSBcInRvcERyYWdcIjpjYXNlIFwidG9wRHJhZ0VuZFwiOmNhc2UgXCJ0b3BEcmFnRW50ZXJcIjpjYXNlIFwidG9wRHJhZ0V4aXRcIjpjYXNlIFwidG9wRHJhZ0xlYXZlXCI6Y2FzZSBcInRvcERyYWdPdmVyXCI6Y2FzZSBcInRvcERyYWdTdGFydFwiOmNhc2UgXCJ0b3BEcm9wXCI6YT1LZDticmVhaztjYXNlIFwidG9wVG91Y2hDYW5jZWxcIjpjYXNlIFwidG9wVG91Y2hFbmRcIjpjYXNlIFwidG9wVG91Y2hNb3ZlXCI6Y2FzZSBcInRvcFRvdWNoU3RhcnRcIjphPUxkO2JyZWFrO2Nhc2UgXCJ0b3BBbmltYXRpb25FbmRcIjpjYXNlIFwidG9wQW5pbWF0aW9uSXRlcmF0aW9uXCI6Y2FzZSBcInRvcEFuaW1hdGlvblN0YXJ0XCI6YT1EZDticmVhaztjYXNlIFwidG9wVHJhbnNpdGlvbkVuZFwiOmE9TWQ7YnJlYWs7Y2FzZSBcInRvcFNjcm9sbFwiOmE9cWQ7YnJlYWs7Y2FzZSBcInRvcFdoZWVsXCI6YT1OZDticmVhaztjYXNlIFwidG9wQ29weVwiOmNhc2UgXCJ0b3BDdXRcIjpjYXNlIFwidG9wUGFzdGVcIjphPUVkO2JyZWFrO2RlZmF1bHQ6YT1cbk59Yj1hLmdldFBvb2xlZChlLGIsYyxkKTtpYihiKTtyZXR1cm4gYn19LFNkPVJkLmlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZSxUZD1bXTtmdW5jdGlvbiBVZChhKXt2YXIgYj1hLnRhcmdldEluc3Q7ZG97aWYoIWIpe2EuYW5jZXN0b3JzLnB1c2goYik7YnJlYWt9dmFyIGM7Zm9yKGM9YjtjW1wicmV0dXJuXCJdOyljPWNbXCJyZXR1cm5cIl07Yz0zIT09Yy50YWc/bnVsbDpjLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2lmKCFjKWJyZWFrO2EuYW5jZXN0b3JzLnB1c2goYik7Yj1VYShjKX13aGlsZShiKTtmb3IoYz0wO2M8YS5hbmNlc3RvcnMubGVuZ3RoO2MrKyliPWEuYW5jZXN0b3JzW2NdLFFhKGEudG9wTGV2ZWxUeXBlLGIsYS5uYXRpdmVFdmVudCxoYyhhLm5hdGl2ZUV2ZW50KSl9dmFyIFZkPSEwO2Z1bmN0aW9uIFdkKGEpe1ZkPSEhYX1cbmZ1bmN0aW9uIFcoYSxiLGMpe2lmKCFjKXJldHVybiBudWxsO2E9KFNkKGEpP1hkOllkKS5iaW5kKG51bGwsYSk7Yy5hZGRFdmVudExpc3RlbmVyKGIsYSwhMSl9ZnVuY3Rpb24gWmQoYSxiLGMpe2lmKCFjKXJldHVybiBudWxsO2E9KFNkKGEpP1hkOllkKS5iaW5kKG51bGwsYSk7Yy5hZGRFdmVudExpc3RlbmVyKGIsYSwhMCl9ZnVuY3Rpb24gWGQoYSxiKXtiYyhZZCxhLGIpfVxuZnVuY3Rpb24gWWQoYSxiKXtpZihWZCl7dmFyIGM9aGMoYik7Yz1VYShjKTtudWxsIT09YyYmXCJudW1iZXJcIj09PXR5cGVvZiBjLnRhZyYmMiE9PXhkKGMpJiYoYz1udWxsKTtpZihUZC5sZW5ndGgpe3ZhciBkPVRkLnBvcCgpO2QudG9wTGV2ZWxUeXBlPWE7ZC5uYXRpdmVFdmVudD1iO2QudGFyZ2V0SW5zdD1jO2E9ZH1lbHNlIGE9e3RvcExldmVsVHlwZTphLG5hdGl2ZUV2ZW50OmIsdGFyZ2V0SW5zdDpjLGFuY2VzdG9yczpbXX07dHJ5e2VjKFVkLGEpfWZpbmFsbHl7YS50b3BMZXZlbFR5cGU9bnVsbCxhLm5hdGl2ZUV2ZW50PW51bGwsYS50YXJnZXRJbnN0PW51bGwsYS5hbmNlc3RvcnMubGVuZ3RoPTAsMTA+VGQubGVuZ3RoJiZUZC5wdXNoKGEpfX19XG52YXIgJGQ9T2JqZWN0LmZyZWV6ZSh7Z2V0IF9lbmFibGVkKCl7cmV0dXJuIFZkfSxzZXRFbmFibGVkOldkLGlzRW5hYmxlZDpmdW5jdGlvbigpe3JldHVybiBWZH0sdHJhcEJ1YmJsZWRFdmVudDpXLHRyYXBDYXB0dXJlZEV2ZW50OlpkLGRpc3BhdGNoRXZlbnQ6WWR9KTtmdW5jdGlvbiBhZShhLGIpe3ZhciBjPXt9O2NbYS50b0xvd2VyQ2FzZSgpXT1iLnRvTG93ZXJDYXNlKCk7Y1tcIldlYmtpdFwiK2FdPVwid2Via2l0XCIrYjtjW1wiTW96XCIrYV09XCJtb3pcIitiO2NbXCJtc1wiK2FdPVwiTVNcIitiO2NbXCJPXCIrYV09XCJvXCIrYi50b0xvd2VyQ2FzZSgpO3JldHVybiBjfVxudmFyIGJlPXthbmltYXRpb25lbmQ6YWUoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkVuZFwiKSxhbmltYXRpb25pdGVyYXRpb246YWUoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkl0ZXJhdGlvblwiKSxhbmltYXRpb25zdGFydDphZShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uU3RhcnRcIiksdHJhbnNpdGlvbmVuZDphZShcIlRyYW5zaXRpb25cIixcIlRyYW5zaXRpb25FbmRcIil9LGNlPXt9LGRlPXt9O20uY2FuVXNlRE9NJiYoZGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZSxcIkFuaW1hdGlvbkV2ZW50XCJpbiB3aW5kb3d8fChkZWxldGUgYmUuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbixkZWxldGUgYmUuYW5pbWF0aW9uaXRlcmF0aW9uLmFuaW1hdGlvbixkZWxldGUgYmUuYW5pbWF0aW9uc3RhcnQuYW5pbWF0aW9uKSxcIlRyYW5zaXRpb25FdmVudFwiaW4gd2luZG93fHxkZWxldGUgYmUudHJhbnNpdGlvbmVuZC50cmFuc2l0aW9uKTtcbmZ1bmN0aW9uIGVlKGEpe2lmKGNlW2FdKXJldHVybiBjZVthXTtpZighYmVbYV0pcmV0dXJuIGE7dmFyIGI9YmVbYV0sYztmb3IoYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykmJmMgaW4gZGUpcmV0dXJuIGNlW2FdPWJbY107cmV0dXJuIGF9XG52YXIgZmU9e3RvcEFuaW1hdGlvbkVuZDplZShcImFuaW1hdGlvbmVuZFwiKSx0b3BBbmltYXRpb25JdGVyYXRpb246ZWUoXCJhbmltYXRpb25pdGVyYXRpb25cIiksdG9wQW5pbWF0aW9uU3RhcnQ6ZWUoXCJhbmltYXRpb25zdGFydFwiKSx0b3BCbHVyOlwiYmx1clwiLHRvcENhbmNlbDpcImNhbmNlbFwiLHRvcENoYW5nZTpcImNoYW5nZVwiLHRvcENsaWNrOlwiY2xpY2tcIix0b3BDbG9zZTpcImNsb3NlXCIsdG9wQ29tcG9zaXRpb25FbmQ6XCJjb21wb3NpdGlvbmVuZFwiLHRvcENvbXBvc2l0aW9uU3RhcnQ6XCJjb21wb3NpdGlvbnN0YXJ0XCIsdG9wQ29tcG9zaXRpb25VcGRhdGU6XCJjb21wb3NpdGlvbnVwZGF0ZVwiLHRvcENvbnRleHRNZW51OlwiY29udGV4dG1lbnVcIix0b3BDb3B5OlwiY29weVwiLHRvcEN1dDpcImN1dFwiLHRvcERvdWJsZUNsaWNrOlwiZGJsY2xpY2tcIix0b3BEcmFnOlwiZHJhZ1wiLHRvcERyYWdFbmQ6XCJkcmFnZW5kXCIsdG9wRHJhZ0VudGVyOlwiZHJhZ2VudGVyXCIsdG9wRHJhZ0V4aXQ6XCJkcmFnZXhpdFwiLHRvcERyYWdMZWF2ZTpcImRyYWdsZWF2ZVwiLFxudG9wRHJhZ092ZXI6XCJkcmFnb3ZlclwiLHRvcERyYWdTdGFydDpcImRyYWdzdGFydFwiLHRvcERyb3A6XCJkcm9wXCIsdG9wRm9jdXM6XCJmb2N1c1wiLHRvcElucHV0OlwiaW5wdXRcIix0b3BLZXlEb3duOlwia2V5ZG93blwiLHRvcEtleVByZXNzOlwia2V5cHJlc3NcIix0b3BLZXlVcDpcImtleXVwXCIsdG9wTG9hZDpcImxvYWRcIix0b3BMb2FkU3RhcnQ6XCJsb2Fkc3RhcnRcIix0b3BNb3VzZURvd246XCJtb3VzZWRvd25cIix0b3BNb3VzZU1vdmU6XCJtb3VzZW1vdmVcIix0b3BNb3VzZU91dDpcIm1vdXNlb3V0XCIsdG9wTW91c2VPdmVyOlwibW91c2VvdmVyXCIsdG9wTW91c2VVcDpcIm1vdXNldXBcIix0b3BQYXN0ZTpcInBhc3RlXCIsdG9wU2Nyb2xsOlwic2Nyb2xsXCIsdG9wU2VsZWN0aW9uQ2hhbmdlOlwic2VsZWN0aW9uY2hhbmdlXCIsdG9wVGV4dElucHV0OlwidGV4dElucHV0XCIsdG9wVG9nZ2xlOlwidG9nZ2xlXCIsdG9wVG91Y2hDYW5jZWw6XCJ0b3VjaGNhbmNlbFwiLHRvcFRvdWNoRW5kOlwidG91Y2hlbmRcIix0b3BUb3VjaE1vdmU6XCJ0b3VjaG1vdmVcIixcbnRvcFRvdWNoU3RhcnQ6XCJ0b3VjaHN0YXJ0XCIsdG9wVHJhbnNpdGlvbkVuZDplZShcInRyYW5zaXRpb25lbmRcIiksdG9wV2hlZWw6XCJ3aGVlbFwifSxnZT17dG9wQWJvcnQ6XCJhYm9ydFwiLHRvcENhblBsYXk6XCJjYW5wbGF5XCIsdG9wQ2FuUGxheVRocm91Z2g6XCJjYW5wbGF5dGhyb3VnaFwiLHRvcER1cmF0aW9uQ2hhbmdlOlwiZHVyYXRpb25jaGFuZ2VcIix0b3BFbXB0aWVkOlwiZW1wdGllZFwiLHRvcEVuY3J5cHRlZDpcImVuY3J5cHRlZFwiLHRvcEVuZGVkOlwiZW5kZWRcIix0b3BFcnJvcjpcImVycm9yXCIsdG9wTG9hZGVkRGF0YTpcImxvYWRlZGRhdGFcIix0b3BMb2FkZWRNZXRhZGF0YTpcImxvYWRlZG1ldGFkYXRhXCIsdG9wTG9hZFN0YXJ0OlwibG9hZHN0YXJ0XCIsdG9wUGF1c2U6XCJwYXVzZVwiLHRvcFBsYXk6XCJwbGF5XCIsdG9wUGxheWluZzpcInBsYXlpbmdcIix0b3BQcm9ncmVzczpcInByb2dyZXNzXCIsdG9wUmF0ZUNoYW5nZTpcInJhdGVjaGFuZ2VcIix0b3BTZWVrZWQ6XCJzZWVrZWRcIix0b3BTZWVraW5nOlwic2Vla2luZ1wiLFxudG9wU3RhbGxlZDpcInN0YWxsZWRcIix0b3BTdXNwZW5kOlwic3VzcGVuZFwiLHRvcFRpbWVVcGRhdGU6XCJ0aW1ldXBkYXRlXCIsdG9wVm9sdW1lQ2hhbmdlOlwidm9sdW1lY2hhbmdlXCIsdG9wV2FpdGluZzpcIndhaXRpbmdcIn0saGU9e30saWU9MCxqZT1cIl9yZWFjdExpc3RlbmVyc0lEXCIrKFwiXCIrTWF0aC5yYW5kb20oKSkuc2xpY2UoMik7ZnVuY3Rpb24ga2UoYSl7T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGEsamUpfHwoYVtqZV09aWUrKyxoZVthW2plXV09e30pO3JldHVybiBoZVthW2plXV19ZnVuY3Rpb24gbGUoYSl7Zm9yKDthJiZhLmZpcnN0Q2hpbGQ7KWE9YS5maXJzdENoaWxkO3JldHVybiBhfVxuZnVuY3Rpb24gbWUoYSxiKXt2YXIgYz1sZShhKTthPTA7Zm9yKHZhciBkO2M7KXtpZigzPT09Yy5ub2RlVHlwZSl7ZD1hK2MudGV4dENvbnRlbnQubGVuZ3RoO2lmKGE8PWImJmQ+PWIpcmV0dXJue25vZGU6YyxvZmZzZXQ6Yi1hfTthPWR9YTp7Zm9yKDtjOyl7aWYoYy5uZXh0U2libGluZyl7Yz1jLm5leHRTaWJsaW5nO2JyZWFrIGF9Yz1jLnBhcmVudE5vZGV9Yz12b2lkIDB9Yz1sZShjKX19ZnVuY3Rpb24gbmUoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmXCJ0ZXh0XCI9PT1hLnR5cGV8fFwidGV4dGFyZWFcIj09PWJ8fFwidHJ1ZVwiPT09YS5jb250ZW50RWRpdGFibGUpfVxudmFyIG9lPW0uY2FuVXNlRE9NJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJjExPj1kb2N1bWVudC5kb2N1bWVudE1vZGUscGU9e3NlbGVjdDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvblNlbGVjdFwiLGNhcHR1cmVkOlwib25TZWxlY3RDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcInRvcEJsdXIgdG9wQ29udGV4dE1lbnUgdG9wRm9jdXMgdG9wS2V5RG93biB0b3BLZXlVcCB0b3BNb3VzZURvd24gdG9wTW91c2VVcCB0b3BTZWxlY3Rpb25DaGFuZ2VcIi5zcGxpdChcIiBcIil9fSxxZT1udWxsLHJlPW51bGwsc2U9bnVsbCx0ZT0hMTtcbmZ1bmN0aW9uIHVlKGEsYil7aWYodGV8fG51bGw9PXFlfHxxZSE9PWZhKCkpcmV0dXJuIG51bGw7dmFyIGM9cWU7XCJzZWxlY3Rpb25TdGFydFwiaW4gYyYmbmUoYyk/Yz17c3RhcnQ6Yy5zZWxlY3Rpb25TdGFydCxlbmQ6Yy5zZWxlY3Rpb25FbmR9OndpbmRvdy5nZXRTZWxlY3Rpb24/KGM9d2luZG93LmdldFNlbGVjdGlvbigpLGM9e2FuY2hvck5vZGU6Yy5hbmNob3JOb2RlLGFuY2hvck9mZnNldDpjLmFuY2hvck9mZnNldCxmb2N1c05vZGU6Yy5mb2N1c05vZGUsZm9jdXNPZmZzZXQ6Yy5mb2N1c09mZnNldH0pOmM9dm9pZCAwO3JldHVybiBzZSYmaGEoc2UsYyk/bnVsbDooc2U9YyxhPU4uZ2V0UG9vbGVkKHBlLnNlbGVjdCxyZSxhLGIpLGEudHlwZT1cInNlbGVjdFwiLGEudGFyZ2V0PXFlLGliKGEpLGEpfVxudmFyIHZlPXtldmVudFR5cGVzOnBlLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9ZC53aW5kb3c9PT1kP2QuZG9jdW1lbnQ6OT09PWQubm9kZVR5cGU/ZDpkLm93bmVyRG9jdW1lbnQsZjtpZighKGY9IWUpKXthOntlPWtlKGUpO2Y9dmEub25TZWxlY3Q7Zm9yKHZhciBoPTA7aDxmLmxlbmd0aDtoKyspe3ZhciBnPWZbaF07aWYoIWUuaGFzT3duUHJvcGVydHkoZyl8fCFlW2ddKXtlPSExO2JyZWFrIGF9fWU9ITB9Zj0hZX1pZihmKXJldHVybiBudWxsO2U9Yj9WYShiKTp3aW5kb3c7c3dpdGNoKGEpe2Nhc2UgXCJ0b3BGb2N1c1wiOmlmKGdjKGUpfHxcInRydWVcIj09PWUuY29udGVudEVkaXRhYmxlKXFlPWUscmU9YixzZT1udWxsO2JyZWFrO2Nhc2UgXCJ0b3BCbHVyXCI6c2U9cmU9cWU9bnVsbDticmVhaztjYXNlIFwidG9wTW91c2VEb3duXCI6dGU9ITA7YnJlYWs7Y2FzZSBcInRvcENvbnRleHRNZW51XCI6Y2FzZSBcInRvcE1vdXNlVXBcIjpyZXR1cm4gdGU9ITEsdWUoYyxkKTtjYXNlIFwidG9wU2VsZWN0aW9uQ2hhbmdlXCI6aWYob2UpYnJlYWs7XG5jYXNlIFwidG9wS2V5RG93blwiOmNhc2UgXCJ0b3BLZXlVcFwiOnJldHVybiB1ZShjLGQpfXJldHVybiBudWxsfX07TmEuaW5qZWN0RXZlbnRQbHVnaW5PcmRlcihcIlJlc3BvbmRlckV2ZW50UGx1Z2luIFNpbXBsZUV2ZW50UGx1Z2luIFRhcEV2ZW50UGx1Z2luIEVudGVyTGVhdmVFdmVudFBsdWdpbiBDaGFuZ2VFdmVudFBsdWdpbiBTZWxlY3RFdmVudFBsdWdpbiBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luXCIuc3BsaXQoXCIgXCIpKTtEYT1iYi5nZXRGaWJlckN1cnJlbnRQcm9wc0Zyb21Ob2RlO0VhPWJiLmdldEluc3RhbmNlRnJvbU5vZGU7RmE9YmIuZ2V0Tm9kZUZyb21JbnN0YW5jZTtOYS5pbmplY3RFdmVudFBsdWdpbnNCeU5hbWUoe1NpbXBsZUV2ZW50UGx1Z2luOlJkLEVudGVyTGVhdmVFdmVudFBsdWdpbjp3ZCxDaGFuZ2VFdmVudFBsdWdpbjpwZCxTZWxlY3RFdmVudFBsdWdpbjp2ZSxCZWZvcmVJbnB1dEV2ZW50UGx1Z2luOlJifSk7XG5mdW5jdGlvbiB4ZShhLGIsYyxkKXt0aGlzLnRhZz1hO3RoaXMua2V5PWM7dGhpcy5zdGF0ZU5vZGU9dGhpcy50eXBlPW51bGw7dGhpcy5zaWJsaW5nPXRoaXMuY2hpbGQ9dGhpc1tcInJldHVyblwiXT1udWxsO3RoaXMuaW5kZXg9MDt0aGlzLnJlZj1udWxsO3RoaXMucGVuZGluZ1Byb3BzPWI7dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPW51bGw7dGhpcy5tb2RlPWQ7dGhpcy5lZmZlY3RUYWc9MDt0aGlzLmxhc3RFZmZlY3Q9dGhpcy5maXJzdEVmZmVjdD10aGlzLm5leHRFZmZlY3Q9bnVsbDt0aGlzLmV4cGlyYXRpb25UaW1lPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1cbmZ1bmN0aW9uIHplKGEsYixjKXt2YXIgZD1hLmFsdGVybmF0ZTtudWxsPT09ZD8oZD1uZXcgeGUoYS50YWcsYixhLmtleSxhLm1vZGUpLGQudHlwZT1hLnR5cGUsZC5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsZC5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1kKTooZC5wZW5kaW5nUHJvcHM9YixkLmVmZmVjdFRhZz0wLGQubmV4dEVmZmVjdD1udWxsLGQuZmlyc3RFZmZlY3Q9bnVsbCxkLmxhc3RFZmZlY3Q9bnVsbCk7ZC5leHBpcmF0aW9uVGltZT1jO2QuY2hpbGQ9YS5jaGlsZDtkLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2QubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZC51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2Quc2libGluZz1hLnNpYmxpbmc7ZC5pbmRleD1hLmluZGV4O2QucmVmPWEucmVmO3JldHVybiBkfVxuZnVuY3Rpb24gQWUoYSxiLGMpe3ZhciBkPWEudHlwZSxlPWEua2V5O2E9YS5wcm9wczt2YXIgZj12b2lkIDA7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpZj1kLnByb3RvdHlwZSYmZC5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD8yOjA7ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIGQpZj01O2Vsc2Ugc3dpdGNoKGQpe2Nhc2Ugc2M6cmV0dXJuIEJlKGEuY2hpbGRyZW4sYixjLGUpO2Nhc2Ugd2M6Zj0xMTtifD0zO2JyZWFrO2Nhc2UgdGM6Zj0xMTtifD0yO2JyZWFrO2Nhc2UgcGM6Zj03O2JyZWFrO2Nhc2UgcWM6Zj05O2JyZWFrO2RlZmF1bHQ6aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZClzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSB1YzpmPTEzO2JyZWFrO2Nhc2UgdmM6Zj0xMjticmVhaztjYXNlIHhjOmY9MTQ7YnJlYWs7ZGVmYXVsdDppZihcIm51bWJlclwiPT09dHlwZW9mIGQudGFnKXJldHVybiBiPWQsYi5wZW5kaW5nUHJvcHM9YSxiLmV4cGlyYXRpb25UaW1lPWMsXG5iO0QoXCIxMzBcIixudWxsPT1kP2Q6dHlwZW9mIGQsXCJcIil9ZWxzZSBEKFwiMTMwXCIsbnVsbD09ZD9kOnR5cGVvZiBkLFwiXCIpfWI9bmV3IHhlKGYsYSxlLGIpO2IudHlwZT1kO2IuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYn1mdW5jdGlvbiBCZShhLGIsYyxkKXthPW5ldyB4ZSgxMCxhLGQsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfWZ1bmN0aW9uIENlKGEsYixjKXthPW5ldyB4ZSg2LGEsbnVsbCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9ZnVuY3Rpb24gRGUoYSxiLGMpe2I9bmV3IHhlKDQsbnVsbCE9PWEuY2hpbGRyZW4/YS5jaGlsZHJlbjpbXSxhLmtleSxiKTtiLmV4cGlyYXRpb25UaW1lPWM7Yi5zdGF0ZU5vZGU9e2NvbnRhaW5lckluZm86YS5jb250YWluZXJJbmZvLHBlbmRpbmdDaGlsZHJlbjpudWxsLGltcGxlbWVudGF0aW9uOmEuaW1wbGVtZW50YXRpb259O3JldHVybiBifXZhciBFZT1udWxsLEZlPW51bGw7XG5mdW5jdGlvbiBHZShhKXtyZXR1cm4gZnVuY3Rpb24oYil7dHJ5e3JldHVybiBhKGIpfWNhdGNoKGMpe319fWZ1bmN0aW9uIEhlKGEpe2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXJldHVybiExO3ZhciBiPV9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztpZihiLmlzRGlzYWJsZWR8fCFiLnN1cHBvcnRzRmliZXIpcmV0dXJuITA7dHJ5e3ZhciBjPWIuaW5qZWN0KGEpO0VlPUdlKGZ1bmN0aW9uKGEpe3JldHVybiBiLm9uQ29tbWl0RmliZXJSb290KGMsYSl9KTtGZT1HZShmdW5jdGlvbihhKXtyZXR1cm4gYi5vbkNvbW1pdEZpYmVyVW5tb3VudChjLGEpfSl9Y2F0Y2goZCl7fXJldHVybiEwfWZ1bmN0aW9uIEllKGEpe1wiZnVuY3Rpb25cIj09PXR5cGVvZiBFZSYmRWUoYSl9ZnVuY3Rpb24gSmUoYSl7XCJmdW5jdGlvblwiPT09dHlwZW9mIEZlJiZGZShhKX1uZXcgU2V0O1xuZnVuY3Rpb24gS2UoYSl7cmV0dXJue2Jhc2VTdGF0ZTphLGV4cGlyYXRpb25UaW1lOjAsZmlyc3Q6bnVsbCxsYXN0Om51bGwsY2FsbGJhY2tMaXN0Om51bGwsaGFzRm9yY2VVcGRhdGU6ITEsaXNJbml0aWFsaXplZDohMSxjYXB0dXJlZFZhbHVlczpudWxsfX1mdW5jdGlvbiBMZShhLGIpe251bGw9PT1hLmxhc3Q/YS5maXJzdD1hLmxhc3Q9YjooYS5sYXN0Lm5leHQ9YixhLmxhc3Q9Yik7aWYoMD09PWEuZXhwaXJhdGlvblRpbWV8fGEuZXhwaXJhdGlvblRpbWU+Yi5leHBpcmF0aW9uVGltZSlhLmV4cGlyYXRpb25UaW1lPWIuZXhwaXJhdGlvblRpbWV9dmFyIE1lPXZvaWQgMCxOZT12b2lkIDA7XG5mdW5jdGlvbiBPZShhKXtNZT1OZT1udWxsO3ZhciBiPWEuYWx0ZXJuYXRlLGM9YS51cGRhdGVRdWV1ZTtudWxsPT09YyYmKGM9YS51cGRhdGVRdWV1ZT1LZShudWxsKSk7bnVsbCE9PWI/KGE9Yi51cGRhdGVRdWV1ZSxudWxsPT09YSYmKGE9Yi51cGRhdGVRdWV1ZT1LZShudWxsKSkpOmE9bnVsbDtNZT1jO05lPWEhPT1jP2E6bnVsbH1mdW5jdGlvbiBQZShhLGIpe09lKGEpO2E9TWU7dmFyIGM9TmU7bnVsbD09PWM/TGUoYSxiKTpudWxsPT09YS5sYXN0fHxudWxsPT09Yy5sYXN0PyhMZShhLGIpLExlKGMsYikpOihMZShhLGIpLGMubGFzdD1iKX1mdW5jdGlvbiBRZShhLGIsYyxkKXthPWEucGFydGlhbFN0YXRlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2EuY2FsbChiLGMsZCk6YX1cbmZ1bmN0aW9uIFJlKGEsYixjLGQsZSxmKXtudWxsIT09YSYmYS51cGRhdGVRdWV1ZT09PWMmJihjPWIudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTpjLmJhc2VTdGF0ZSxleHBpcmF0aW9uVGltZTpjLmV4cGlyYXRpb25UaW1lLGZpcnN0OmMuZmlyc3QsbGFzdDpjLmxhc3QsaXNJbml0aWFsaXplZDpjLmlzSW5pdGlhbGl6ZWQsY2FwdHVyZWRWYWx1ZXM6Yy5jYXB0dXJlZFZhbHVlcyxjYWxsYmFja0xpc3Q6bnVsbCxoYXNGb3JjZVVwZGF0ZTohMX0pO2MuZXhwaXJhdGlvblRpbWU9MDtjLmlzSW5pdGlhbGl6ZWQ/YT1jLmJhc2VTdGF0ZTooYT1jLmJhc2VTdGF0ZT1iLm1lbW9pemVkU3RhdGUsYy5pc0luaXRpYWxpemVkPSEwKTtmb3IodmFyIGg9ITAsZz1jLmZpcnN0LGs9ITE7bnVsbCE9PWc7KXt2YXIgdj1nLmV4cGlyYXRpb25UaW1lO2lmKHY+Zil7dmFyIGw9Yy5leHBpcmF0aW9uVGltZTtpZigwPT09bHx8bD52KWMuZXhwaXJhdGlvblRpbWU9djtrfHwoaz0hMCxjLmJhc2VTdGF0ZT1hKX1lbHNle2t8fFxuKGMuZmlyc3Q9Zy5uZXh0LG51bGw9PT1jLmZpcnN0JiYoYy5sYXN0PW51bGwpKTtpZihnLmlzUmVwbGFjZSlhPVFlKGcsZCxhLGUpLGg9ITA7ZWxzZSBpZih2PVFlKGcsZCxhLGUpKWE9aD9BKHt9LGEsdik6QShhLHYpLGg9ITE7Zy5pc0ZvcmNlZCYmKGMuaGFzRm9yY2VVcGRhdGU9ITApO251bGwhPT1nLmNhbGxiYWNrJiYodj1jLmNhbGxiYWNrTGlzdCxudWxsPT09diYmKHY9Yy5jYWxsYmFja0xpc3Q9W10pLHYucHVzaChnKSk7bnVsbCE9PWcuY2FwdHVyZWRWYWx1ZSYmKHY9Yy5jYXB0dXJlZFZhbHVlcyxudWxsPT09dj9jLmNhcHR1cmVkVmFsdWVzPVtnLmNhcHR1cmVkVmFsdWVdOnYucHVzaChnLmNhcHR1cmVkVmFsdWUpKX1nPWcubmV4dH1udWxsIT09Yy5jYWxsYmFja0xpc3Q/Yi5lZmZlY3RUYWd8PTMyOm51bGwhPT1jLmZpcnN0fHxjLmhhc0ZvcmNlVXBkYXRlfHxudWxsIT09Yy5jYXB0dXJlZFZhbHVlc3x8KGIudXBkYXRlUXVldWU9bnVsbCk7a3x8KGMuYmFzZVN0YXRlPWEpO1xucmV0dXJuIGF9ZnVuY3Rpb24gU2UoYSxiKXt2YXIgYz1hLmNhbGxiYWNrTGlzdDtpZihudWxsIT09Yylmb3IoYS5jYWxsYmFja0xpc3Q9bnVsbCxhPTA7YTxjLmxlbmd0aDthKyspe3ZhciBkPWNbYV0sZT1kLmNhbGxiYWNrO2QuY2FsbGJhY2s9bnVsbDtcImZ1bmN0aW9uXCIhPT10eXBlb2YgZT9EKFwiMTkxXCIsZSk6dm9pZCAwO2UuY2FsbChiKX19XG5mdW5jdGlvbiBUZShhLGIsYyxkLGUpe2Z1bmN0aW9uIGYoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1ifHxudWxsIT09YS51cGRhdGVRdWV1ZSYmYS51cGRhdGVRdWV1ZS5oYXNGb3JjZVVwZGF0ZSlyZXR1cm4hMDt2YXIgbj1hLnN0YXRlTm9kZTthPWEudHlwZTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2Ygbi5zaG91bGRDb21wb25lbnRVcGRhdGU/bi5zaG91bGRDb21wb25lbnRVcGRhdGUoYyxlLGYpOmEucHJvdG90eXBlJiZhLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudD8haGEoYixjKXx8IWhhKGQsZSk6ITB9ZnVuY3Rpb24gaChhLGIpe2IudXBkYXRlcj1yO2Euc3RhdGVOb2RlPWI7Yi5fcmVhY3RJbnRlcm5hbEZpYmVyPWF9ZnVuY3Rpb24gZyhhLGIsYyxkKXthPWIuc3RhdGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlxuYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZyLmVucXVldWVSZXBsYWNlU3RhdGUoYixiLnN0YXRlLG51bGwpfWZ1bmN0aW9uIGsoYSxiLGMsZCl7YT1hLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKXJldHVybiBhLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcy5jYWxsKG51bGwsYyxkKX12YXIgdj1hLmNhY2hlQ29udGV4dCxsPWEuZ2V0TWFza2VkQ29udGV4dCxwPWEuZ2V0VW5tYXNrZWRDb250ZXh0LHo9YS5pc0NvbnRleHRDb25zdW1lcixCPWEuaGFzQ29udGV4dENoYW5nZWQscj17aXNNb3VudGVkOnlkLGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihhLGQsZSl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7ZT12b2lkIDA9PT1lP251bGw6ZTt2YXIgZj1jKGEpO1BlKGEse2V4cGlyYXRpb25UaW1lOmYscGFydGlhbFN0YXRlOmQsY2FsbGJhY2s6ZSxpc1JlcGxhY2U6ITEsaXNGb3JjZWQ6ITEsXG5jYXB0dXJlZFZhbHVlOm51bGwsbmV4dDpudWxsfSk7YihhLGYpfSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKGEsZCxlKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjtlPXZvaWQgMD09PWU/bnVsbDplO3ZhciBmPWMoYSk7UGUoYSx7ZXhwaXJhdGlvblRpbWU6ZixwYXJ0aWFsU3RhdGU6ZCxjYWxsYmFjazplLGlzUmVwbGFjZTohMCxpc0ZvcmNlZDohMSxjYXB0dXJlZFZhbHVlOm51bGwsbmV4dDpudWxsfSk7YihhLGYpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYSxkKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBlPWMoYSk7UGUoYSx7ZXhwaXJhdGlvblRpbWU6ZSxwYXJ0aWFsU3RhdGU6bnVsbCxjYWxsYmFjazpkLGlzUmVwbGFjZTohMSxpc0ZvcmNlZDohMCxjYXB0dXJlZFZhbHVlOm51bGwsbmV4dDpudWxsfSk7YihhLGUpfX07cmV0dXJue2Fkb3B0Q2xhc3NJbnN0YW5jZTpoLGNhbGxHZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM6ayxcbmNvbnN0cnVjdENsYXNzSW5zdGFuY2U6ZnVuY3Rpb24oYSxiKXt2YXIgYz1hLnR5cGUsZD1wKGEpLGU9eihhKSxmPWU/bChhLGQpOmthO2M9bmV3IGMoYixmKTt2YXIgbj1udWxsIT09Yy5zdGF0ZSYmdm9pZCAwIT09Yy5zdGF0ZT9jLnN0YXRlOm51bGw7aChhLGMpO2EubWVtb2l6ZWRTdGF0ZT1uO2I9ayhhLGMsYixuKTtudWxsIT09YiYmdm9pZCAwIT09YiYmKGEubWVtb2l6ZWRTdGF0ZT1BKHt9LGEubWVtb2l6ZWRTdGF0ZSxiKSk7ZSYmdihhLGQsZik7cmV0dXJuIGN9LG1vdW50Q2xhc3NJbnN0YW5jZTpmdW5jdGlvbihhLGIpe3ZhciBjPWEudHlwZSxkPWEuYWx0ZXJuYXRlLGU9YS5zdGF0ZU5vZGUsZj1hLnBlbmRpbmdQcm9wcyxuPXAoYSk7ZS5wcm9wcz1mO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2UucmVmcz1rYTtlLmNvbnRleHQ9bChhLG4pO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc3x8XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fFxuXCJmdW5jdGlvblwiIT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50fHwoYz1lLnN0YXRlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudCYmZS5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSxjIT09ZS5zdGF0ZSYmci5lbnF1ZXVlUmVwbGFjZVN0YXRlKGUsZS5zdGF0ZSxudWxsKSxjPWEudXBkYXRlUXVldWUsbnVsbCE9PWMmJihlLnN0YXRlPVJlKGQsYSxjLGUsZixiKSkpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudERpZE1vdW50JiYoYS5lZmZlY3RUYWd8PTQpfSxyZXN1bWVNb3VudENsYXNzSW5zdGFuY2U6ZnVuY3Rpb24oYSxiKXt2YXIgYz1hLnR5cGUsbj1hLnN0YXRlTm9kZTtuLnByb3BzPWEubWVtb2l6ZWRQcm9wcztuLnN0YXRlPVxuYS5tZW1vaXplZFN0YXRlO3ZhciBoPWEubWVtb2l6ZWRQcm9wcyxyPWEucGVuZGluZ1Byb3BzLHo9bi5jb250ZXh0LHE9cChhKTtxPWwoYSxxKTsoYz1cImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIG4uVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBuLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09cnx8eiE9PXEpJiZnKGEsbixyLHEpO3o9YS5tZW1vaXplZFN0YXRlO2I9bnVsbCE9PWEudXBkYXRlUXVldWU/UmUobnVsbCxhLGEudXBkYXRlUXVldWUsbixyLGIpOno7dmFyIHU9dm9pZCAwO2ghPT1yJiYodT1rKGEsbixyLGIpKTtpZihudWxsIT09dSYmdm9pZCAwIT09dSl7Yj1udWxsPT09Ynx8dm9pZCAwPT09Yj91OkEoe30sYix1KTt2YXIgdD1hLnVwZGF0ZVF1ZXVlO1xubnVsbCE9PXQmJih0LmJhc2VTdGF0ZT1BKHt9LHQuYmFzZVN0YXRlLHUpKX1pZighKGghPT1yfHx6IT09Ynx8QigpfHxudWxsIT09YS51cGRhdGVRdWV1ZSYmYS51cGRhdGVRdWV1ZS5oYXNGb3JjZVVwZGF0ZSkpcmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIG4uY29tcG9uZW50RGlkTW91bnQmJihhLmVmZmVjdFRhZ3w9NCksITE7KGg9ZihhLGgscix6LGIscSkpPyhjfHxcImZ1bmN0aW9uXCIhPT10eXBlb2Ygbi5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2Ygbi5jb21wb25lbnRXaWxsTW91bnR8fChcImZ1bmN0aW9uXCI9PT10eXBlb2Ygbi5jb21wb25lbnRXaWxsTW91bnQmJm4uY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIG4uVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmbi5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuLmNvbXBvbmVudERpZE1vdW50JiYoYS5lZmZlY3RUYWd8PVxuNCkpOihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygbi5jb21wb25lbnREaWRNb3VudCYmKGEuZWZmZWN0VGFnfD00KSxkKGEsciksZShhLGIpKTtuLnByb3BzPXI7bi5zdGF0ZT1iO24uY29udGV4dD1xO3JldHVybiBofSx1cGRhdGVDbGFzc0luc3RhbmNlOmZ1bmN0aW9uKGEsYixjKXt2YXIgbj1iLnR5cGUseD1iLnN0YXRlTm9kZTt4LnByb3BzPWIubWVtb2l6ZWRQcm9wczt4LnN0YXRlPWIubWVtb2l6ZWRTdGF0ZTt2YXIgaD1iLm1lbW9pemVkUHJvcHMscj1iLnBlbmRpbmdQcm9wcyxxPXguY29udGV4dCx1PXAoYik7dT1sKGIsdSk7KG49XCJmdW5jdGlvblwiPT09dHlwZW9mIG4uZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgeC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB4LlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgeC5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHxcbihoIT09cnx8cSE9PXUpJiZnKGIseCxyLHUpO3E9Yi5tZW1vaXplZFN0YXRlO2M9bnVsbCE9PWIudXBkYXRlUXVldWU/UmUoYSxiLGIudXBkYXRlUXVldWUseCxyLGMpOnE7dmFyIHQ9dm9pZCAwO2ghPT1yJiYodD1rKGIseCxyLGMpKTtpZihudWxsIT09dCYmdm9pZCAwIT09dCl7Yz1udWxsPT09Y3x8dm9pZCAwPT09Yz90OkEoe30sYyx0KTt2YXIgeT1iLnVwZGF0ZVF1ZXVlO251bGwhPT15JiYoeS5iYXNlU3RhdGU9QSh7fSx5LmJhc2VTdGF0ZSx0KSl9aWYoIShoIT09cnx8cSE9PWN8fEIoKXx8bnVsbCE9PWIudXBkYXRlUXVldWUmJmIudXBkYXRlUXVldWUuaGFzRm9yY2VVcGRhdGUpKXJldHVyblwiZnVuY3Rpb25cIiE9PXR5cGVvZiB4LmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcT09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgeC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmXG5xPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTIwNDgpLCExOyh0PWYoYixoLHIscSxjLHUpKT8obnx8XCJmdW5jdGlvblwiIT09dHlwZW9mIHguVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiB4LmNvbXBvbmVudFdpbGxVcGRhdGV8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgeC5jb21wb25lbnRXaWxsVXBkYXRlJiZ4LmNvbXBvbmVudFdpbGxVcGRhdGUocixjLHUpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiB4LlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZ4LlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKHIsYyx1KSksXCJmdW5jdGlvblwiPT09dHlwZW9mIHguY29tcG9uZW50RGlkVXBkYXRlJiYoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiB4LmdldFNuYXBzaG90QmVmb3JlVXBkYXRlJiYoYi5lZmZlY3RUYWd8PTIwNDgpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIHguY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZcbnE9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIHguZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnE9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjA0OCksZChiLHIpLGUoYixjKSk7eC5wcm9wcz1yO3guc3RhdGU9Yzt4LmNvbnRleHQ9dTtyZXR1cm4gdH19fXZhciBVZT1BcnJheS5pc0FycmF5O1xuZnVuY3Rpb24gVmUoYSxiLGMpe2E9Yy5yZWY7aWYobnVsbCE9PWEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZcIm9iamVjdFwiIT09dHlwZW9mIGEpe2lmKGMuX293bmVyKXtjPWMuX293bmVyO3ZhciBkPXZvaWQgMDtjJiYoMiE9PWMudGFnP0QoXCIxMTBcIik6dm9pZCAwLGQ9Yy5zdGF0ZU5vZGUpO2Q/dm9pZCAwOkQoXCIxNDdcIixhKTt2YXIgZT1cIlwiK2E7aWYobnVsbCE9PWImJm51bGwhPT1iLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWUpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZC5yZWZzPT09a2E/ZC5yZWZzPXt9OmQucmVmcztudWxsPT09YT9kZWxldGUgYltlXTpiW2VdPWF9O2IuX3N0cmluZ1JlZj1lO3JldHVybiBifVwic3RyaW5nXCIhPT10eXBlb2YgYT9EKFwiMTQ4XCIpOnZvaWQgMDtjLl9vd25lcj92b2lkIDA6RChcIjI1NFwiLGEpfXJldHVybiBhfVxuZnVuY3Rpb24gV2UoYSxiKXtcInRleHRhcmVhXCIhPT1hLnR5cGUmJkQoXCIzMVwiLFwiW29iamVjdCBPYmplY3RdXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYik/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhiKS5qb2luKFwiLCBcIikrXCJ9XCI6YixcIlwiKX1cbmZ1bmN0aW9uIFhlKGEpe2Z1bmN0aW9uIGIoYixjKXtpZihhKXt2YXIgZD1iLmxhc3RFZmZlY3Q7bnVsbCE9PWQ/KGQubmV4dEVmZmVjdD1jLGIubGFzdEVmZmVjdD1jKTpiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1jO2MubmV4dEVmZmVjdD1udWxsO2MuZWZmZWN0VGFnPTh9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiLGMpe2E9emUoYSxiLGMpO2EuaW5kZXg9MDthLnNpYmxpbmc9bnVsbDtyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyxkKXtiLmluZGV4PWQ7aWYoIWEpcmV0dXJuIGM7ZD1iLmFsdGVybmF0ZTtpZihudWxsIT09ZClyZXR1cm4gZD1kLmluZGV4LGQ8Yz8oYi5lZmZlY3RUYWc9XG4yLGMpOmQ7Yi5lZmZlY3RUYWc9MjtyZXR1cm4gY31mdW5jdGlvbiBoKGIpe2EmJm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZWZmZWN0VGFnPTIpO3JldHVybiBifWZ1bmN0aW9uIGcoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDYhPT1iLnRhZylyZXR1cm4gYj1DZShjLGEubW9kZSxkKSxiW1wicmV0dXJuXCJdPWEsYjtiPWUoYixjLGQpO2JbXCJyZXR1cm5cIl09YTtyZXR1cm4gYn1mdW5jdGlvbiBrKGEsYixjLGQpe2lmKG51bGwhPT1iJiZiLnR5cGU9PT1jLnR5cGUpcmV0dXJuIGQ9ZShiLGMucHJvcHMsZCksZC5yZWY9VmUoYSxiLGMpLGRbXCJyZXR1cm5cIl09YSxkO2Q9QWUoYyxhLm1vZGUsZCk7ZC5yZWY9VmUoYSxiLGMpO2RbXCJyZXR1cm5cIl09YTtyZXR1cm4gZH1mdW5jdGlvbiB2KGEsYixjLGQpe2lmKG51bGw9PT1ifHw0IT09Yi50YWd8fGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09Yy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj1cbkRlKGMsYS5tb2RlLGQpLGJbXCJyZXR1cm5cIl09YSxiO2I9ZShiLGMuY2hpbGRyZW58fFtdLGQpO2JbXCJyZXR1cm5cIl09YTtyZXR1cm4gYn1mdW5jdGlvbiBsKGEsYixjLGQsZil7aWYobnVsbD09PWJ8fDEwIT09Yi50YWcpcmV0dXJuIGI9QmUoYyxhLm1vZGUsZCxmKSxiW1wicmV0dXJuXCJdPWEsYjtiPWUoYixjLGQpO2JbXCJyZXR1cm5cIl09YTtyZXR1cm4gYn1mdW5jdGlvbiBwKGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGJ8fFwibnVtYmVyXCI9PT10eXBlb2YgYilyZXR1cm4gYj1DZShcIlwiK2IsYS5tb2RlLGMpLGJbXCJyZXR1cm5cIl09YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIG9jOnJldHVybiBjPUFlKGIsYS5tb2RlLGMpLGMucmVmPVZlKGEsbnVsbCxiKSxjW1wicmV0dXJuXCJdPWEsYztjYXNlIHJjOnJldHVybiBiPURlKGIsYS5tb2RlLGMpLGJbXCJyZXR1cm5cIl09YSxifWlmKFVlKGIpfHx6YyhiKSlyZXR1cm4gYj1CZShiLFxuYS5tb2RlLGMsbnVsbCksYltcInJldHVyblwiXT1hLGI7V2UoYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB6KGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6ZyhhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIG9jOnJldHVybiBjLmtleT09PWU/Yy50eXBlPT09c2M/bChhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGUpOmsoYSxiLGMsZCk6bnVsbDtjYXNlIHJjOnJldHVybiBjLmtleT09PWU/dihhLGIsYyxkKTpudWxsfWlmKFVlKGMpfHx6YyhjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDpsKGEsYixjLGQsbnVsbCk7V2UoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBCKGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9YS5nZXQoYyl8fFxubnVsbCxnKGIsYSxcIlwiK2QsZSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2Ugb2M6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGQudHlwZT09PXNjP2woYixhLGQucHJvcHMuY2hpbGRyZW4sZSxkLmtleSk6ayhiLGEsZCxlKTtjYXNlIHJjOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCx2KGIsYSxkLGUpfWlmKFVlKGQpfHx6YyhkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxsKGIsYSxkLGUsbnVsbCk7V2UoYixkKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiByKGUsbCxnLGgpe2Zvcih2YXIgcj1udWxsLGs9bnVsbCxxPWwsdT1sPTAsdD1udWxsO251bGwhPT1xJiZ1PGcubGVuZ3RoO3UrKyl7cS5pbmRleD51Pyh0PXEscT1udWxsKTp0PXEuc2libGluZzt2YXIgbj16KGUscSxnW3VdLGgpO2lmKG51bGw9PT1uKXtudWxsPT09cSYmKHE9dCk7YnJlYWt9YSYmcSYmbnVsbD09PVxubi5hbHRlcm5hdGUmJmIoZSxxKTtsPWYobixsLHUpO251bGw9PT1rP3I9bjprLnNpYmxpbmc9bjtrPW47cT10fWlmKHU9PT1nLmxlbmd0aClyZXR1cm4gYyhlLHEpLHI7aWYobnVsbD09PXEpe2Zvcig7dTxnLmxlbmd0aDt1KyspaWYocT1wKGUsZ1t1XSxoKSlsPWYocSxsLHUpLG51bGw9PT1rP3I9cTprLnNpYmxpbmc9cSxrPXE7cmV0dXJuIHJ9Zm9yKHE9ZChlLHEpO3U8Zy5sZW5ndGg7dSsrKWlmKHQ9QihxLGUsdSxnW3VdLGgpKXtpZihhJiZudWxsIT09dC5hbHRlcm5hdGUpcVtcImRlbGV0ZVwiXShudWxsPT09dC5rZXk/dTp0LmtleSk7bD1mKHQsbCx1KTtudWxsPT09az9yPXQ6ay5zaWJsaW5nPXQ7az10fWEmJnEuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIHJ9ZnVuY3Rpb24gUShlLGwsZyxoKXt2YXIgcj16YyhnKTtcImZ1bmN0aW9uXCIhPT10eXBlb2Ygcj9EKFwiMTUwXCIpOnZvaWQgMDtnPXIuY2FsbChnKTtudWxsPT1nP0QoXCIxNTFcIik6dm9pZCAwO2Zvcih2YXIgaz1cbnI9bnVsbCxxPWwsdT1sPTAsdD1udWxsLG49Zy5uZXh0KCk7bnVsbCE9PXEmJiFuLmRvbmU7dSsrLG49Zy5uZXh0KCkpe3EuaW5kZXg+dT8odD1xLHE9bnVsbCk6dD1xLnNpYmxpbmc7dmFyIEg9eihlLHEsbi52YWx1ZSxoKTtpZihudWxsPT09SCl7cXx8KHE9dCk7YnJlYWt9YSYmcSYmbnVsbD09PUguYWx0ZXJuYXRlJiZiKGUscSk7bD1mKEgsbCx1KTtudWxsPT09az9yPUg6ay5zaWJsaW5nPUg7az1IO3E9dH1pZihuLmRvbmUpcmV0dXJuIGMoZSxxKSxyO2lmKG51bGw9PT1xKXtmb3IoOyFuLmRvbmU7dSsrLG49Zy5uZXh0KCkpbj1wKGUsbi52YWx1ZSxoKSxudWxsIT09biYmKGw9ZihuLGwsdSksbnVsbD09PWs/cj1uOmsuc2libGluZz1uLGs9bik7cmV0dXJuIHJ9Zm9yKHE9ZChlLHEpOyFuLmRvbmU7dSsrLG49Zy5uZXh0KCkpaWYobj1CKHEsZSx1LG4udmFsdWUsaCksbnVsbCE9PW4pe2lmKGEmJm51bGwhPT1uLmFsdGVybmF0ZSlxW1wiZGVsZXRlXCJdKG51bGw9PT1uLmtleT91Om4ua2V5KTtcbmw9ZihuLGwsdSk7bnVsbD09PWs/cj1uOmsuc2libGluZz1uO2s9bn1hJiZxLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiByfXJldHVybiBmdW5jdGlvbihhLGQsZixsKXtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLnR5cGU9PT1zYyYmbnVsbD09PWYua2V5JiYoZj1mLnByb3BzLmNoaWxkcmVuKTt2YXIgZz1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mO2lmKGcpc3dpdGNoKGYuJCR0eXBlb2Ype2Nhc2Ugb2M6YTp7dmFyIGs9Zi5rZXk7Zm9yKGc9ZDtudWxsIT09Zzspe2lmKGcua2V5PT09aylpZigxMD09PWcudGFnP2YudHlwZT09PXNjOmcudHlwZT09PWYudHlwZSl7YyhhLGcuc2libGluZyk7ZD1lKGcsZi50eXBlPT09c2M/Zi5wcm9wcy5jaGlsZHJlbjpmLnByb3BzLGwpO2QucmVmPVZlKGEsZyxmKTtkW1wicmV0dXJuXCJdPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsZyk7YnJlYWt9ZWxzZSBiKGEsZyk7Zz1nLnNpYmxpbmd9Zi50eXBlPT09XG5zYz8oZD1CZShmLnByb3BzLmNoaWxkcmVuLGEubW9kZSxsLGYua2V5KSxkW1wicmV0dXJuXCJdPWEsYT1kKToobD1BZShmLGEubW9kZSxsKSxsLnJlZj1WZShhLGQsZiksbFtcInJldHVyblwiXT1hLGE9bCl9cmV0dXJuIGgoYSk7Y2FzZSByYzphOntmb3IoZz1mLmtleTtudWxsIT09ZDspe2lmKGQua2V5PT09ZylpZig0PT09ZC50YWcmJmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm89PT1mLmNvbnRhaW5lckluZm8mJmQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uPT09Zi5pbXBsZW1lbnRhdGlvbil7YyhhLGQuc2libGluZyk7ZD1lKGQsZi5jaGlsZHJlbnx8W10sbCk7ZFtcInJldHVyblwiXT1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGQpO2JyZWFrfWVsc2UgYihhLGQpO2Q9ZC5zaWJsaW5nfWQ9RGUoZixhLm1vZGUsbCk7ZFtcInJldHVyblwiXT1hO2E9ZH1yZXR1cm4gaChhKX1pZihcInN0cmluZ1wiPT09dHlwZW9mIGZ8fFwibnVtYmVyXCI9PT10eXBlb2YgZilyZXR1cm4gZj1cIlwiK2YsbnVsbCE9PWQmJlxuNj09PWQudGFnPyhjKGEsZC5zaWJsaW5nKSxkPWUoZCxmLGwpLGRbXCJyZXR1cm5cIl09YSxhPWQpOihjKGEsZCksZD1DZShmLGEubW9kZSxsKSxkW1wicmV0dXJuXCJdPWEsYT1kKSxoKGEpO2lmKFVlKGYpKXJldHVybiByKGEsZCxmLGwpO2lmKHpjKGYpKXJldHVybiBRKGEsZCxmLGwpO2cmJldlKGEsZik7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBmKXN3aXRjaChhLnRhZyl7Y2FzZSAyOmNhc2UgMTpsPWEudHlwZSxEKFwiMTUyXCIsbC5kaXNwbGF5TmFtZXx8bC5uYW1lfHxcIkNvbXBvbmVudFwiKX1yZXR1cm4gYyhhLGQpfX12YXIgWWU9WGUoITApLFplPVhlKCExKTtcbmZ1bmN0aW9uICRlKGEsYixjLGQsZSxmLGgpe2Z1bmN0aW9uIGcoYSxiLGMpe2soYSxiLGMsYi5leHBpcmF0aW9uVGltZSl9ZnVuY3Rpb24gayhhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP1plKGIsbnVsbCxjLGQpOlllKGIsYS5jaGlsZCxjLGQpfWZ1bmN0aW9uIHYoYSxiKXt2YXIgYz1iLnJlZjtpZihudWxsPT09YSYmbnVsbCE9PWN8fG51bGwhPT1hJiZhLnJlZiE9PWMpYi5lZmZlY3RUYWd8PTEyOH1mdW5jdGlvbiBsKGEsYixjLGQsZSxmKXt2KGEsYik7aWYoIWMmJiFlKXJldHVybiBkJiZ5KGIsITEpLHIoYSxiKTtjPWIuc3RhdGVOb2RlO25jLmN1cnJlbnQ9Yjt2YXIgbD1lP251bGw6Yy5yZW5kZXIoKTtiLmVmZmVjdFRhZ3w9MTtlJiYoayhhLGIsbnVsbCxmKSxiLmNoaWxkPW51bGwpO2soYSxiLGwsZik7Yi5tZW1vaXplZFN0YXRlPWMuc3RhdGU7Yi5tZW1vaXplZFByb3BzPWMucHJvcHM7ZCYmeShiLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBwKGEpe3ZhciBiPWEuc3RhdGVOb2RlO1xuYi5wZW5kaW5nQ29udGV4dD90KGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJnQoYSxiLmNvbnRleHQsITEpO1koYSxiLmNvbnRhaW5lckluZm8pfWZ1bmN0aW9uIHooYSxiLGMsZCl7dmFyIGU9YS5jaGlsZDtmb3IobnVsbCE9PWUmJihlW1wicmV0dXJuXCJdPWEpO251bGwhPT1lOyl7c3dpdGNoKGUudGFnKXtjYXNlIDEyOnZhciBmPWUuc3RhdGVOb2RlfDA7aWYoZS50eXBlPT09YiYmMCE9PShmJmMpKXtmb3IoZj1lO251bGwhPT1mOyl7dmFyIGw9Zi5hbHRlcm5hdGU7aWYoMD09PWYuZXhwaXJhdGlvblRpbWV8fGYuZXhwaXJhdGlvblRpbWU+ZClmLmV4cGlyYXRpb25UaW1lPWQsbnVsbCE9PWwmJigwPT09bC5leHBpcmF0aW9uVGltZXx8bC5leHBpcmF0aW9uVGltZT5kKSYmKGwuZXhwaXJhdGlvblRpbWU9ZCk7ZWxzZSBpZihudWxsIT09bCYmKDA9PT1sLmV4cGlyYXRpb25UaW1lfHxsLmV4cGlyYXRpb25UaW1lPmQpKWwuZXhwaXJhdGlvblRpbWU9XG5kO2Vsc2UgYnJlYWs7Zj1mW1wicmV0dXJuXCJdfWY9bnVsbH1lbHNlIGY9ZS5jaGlsZDticmVhaztjYXNlIDEzOmY9ZS50eXBlPT09YS50eXBlP251bGw6ZS5jaGlsZDticmVhaztkZWZhdWx0OmY9ZS5jaGlsZH1pZihudWxsIT09ZilmW1wicmV0dXJuXCJdPWU7ZWxzZSBmb3IoZj1lO251bGwhPT1mOyl7aWYoZj09PWEpe2Y9bnVsbDticmVha31lPWYuc2libGluZztpZihudWxsIT09ZSl7Zj1lO2JyZWFrfWY9ZltcInJldHVyblwiXX1lPWZ9fWZ1bmN0aW9uIEIoYSxiLGMpe3ZhciBkPWIudHlwZS5fY29udGV4dCxlPWIucGVuZGluZ1Byb3BzLGY9Yi5tZW1vaXplZFByb3BzO2lmKCFxKCkmJmY9PT1lKXJldHVybiBiLnN0YXRlTm9kZT0wLEcoYikscihhLGIpO3ZhciBsPWUudmFsdWU7Yi5tZW1vaXplZFByb3BzPWU7aWYobnVsbD09PWYpbD0xMDczNzQxODIzO2Vsc2UgaWYoZi52YWx1ZT09PWUudmFsdWUpe2lmKGYuY2hpbGRyZW49PT1lLmNoaWxkcmVuKXJldHVybiBiLnN0YXRlTm9kZT0wLEcoYiksXG5yKGEsYik7bD0wfWVsc2V7dmFyIGg9Zi52YWx1ZTtpZihoPT09bCYmKDAhPT1ofHwxL2g9PT0xL2wpfHxoIT09aCYmbCE9PWwpe2lmKGYuY2hpbGRyZW49PT1lLmNoaWxkcmVuKXJldHVybiBiLnN0YXRlTm9kZT0wLEcoYikscihhLGIpO2w9MH1lbHNlIGlmKGw9XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzP2QuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzKGgsbCk6MTA3Mzc0MTgyMyxsfD0wLDA9PT1sKXtpZihmLmNoaWxkcmVuPT09ZS5jaGlsZHJlbilyZXR1cm4gYi5zdGF0ZU5vZGU9MCxHKGIpLHIoYSxiKX1lbHNlIHooYixkLGwsYyl9Yi5zdGF0ZU5vZGU9bDtHKGIpO2coYSxiLGUuY2hpbGRyZW4pO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIHIoYSxiKXtudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQ/RChcIjE1M1wiKTp2b2lkIDA7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDt2YXIgYz16ZShhLGEucGVuZGluZ1Byb3BzLGEuZXhwaXJhdGlvblRpbWUpO1xuYi5jaGlsZD1jO2ZvcihjW1wicmV0dXJuXCJdPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9emUoYSxhLnBlbmRpbmdQcm9wcyxhLmV4cGlyYXRpb25UaW1lKSxjW1wicmV0dXJuXCJdPWI7Yy5zaWJsaW5nPW51bGx9cmV0dXJuIGIuY2hpbGR9dmFyIFE9YS5zaG91bGRTZXRUZXh0Q29udGVudCxuPWEuc2hvdWxkRGVwcmlvcml0aXplU3VidHJlZSx4PWIucHVzaEhvc3RDb250ZXh0LFk9Yi5wdXNoSG9zdENvbnRhaW5lcixHPWQucHVzaFByb3ZpZGVyLFI9Yy5nZXRNYXNrZWRDb250ZXh0LFM9Yy5nZXRVbm1hc2tlZENvbnRleHQscT1jLmhhc0NvbnRleHRDaGFuZ2VkLHU9Yy5wdXNoQ29udGV4dFByb3ZpZGVyLHQ9Yy5wdXNoVG9wTGV2ZWxDb250ZXh0T2JqZWN0LHk9Yy5pbnZhbGlkYXRlQ29udGV4dFByb3ZpZGVyLEg9ZS5lbnRlckh5ZHJhdGlvblN0YXRlLFdhPWUucmVzZXRIeWRyYXRpb25TdGF0ZSxDYj1lLnRyeVRvQ2xhaW1OZXh0SHlkcmF0YWJsZUluc3RhbmNlO1xuYT1UZShjLGYsaCxmdW5jdGlvbihhLGIpe2EubWVtb2l6ZWRQcm9wcz1ifSxmdW5jdGlvbihhLGIpe2EubWVtb2l6ZWRTdGF0ZT1ifSk7dmFyIEpjPWEuYWRvcHRDbGFzc0luc3RhbmNlLEtjPWEuY2FsbEdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyxMYz1hLmNvbnN0cnVjdENsYXNzSW5zdGFuY2UsRGI9YS5tb3VudENsYXNzSW5zdGFuY2UsTWM9YS5yZXN1bWVNb3VudENsYXNzSW5zdGFuY2UsRWI9YS51cGRhdGVDbGFzc0luc3RhbmNlO3JldHVybntiZWdpbldvcms6ZnVuY3Rpb24oYSxiLGMpe2lmKDA9PT1iLmV4cGlyYXRpb25UaW1lfHxiLmV4cGlyYXRpb25UaW1lPmMpe3N3aXRjaChiLnRhZyl7Y2FzZSAzOnAoYik7YnJlYWs7Y2FzZSAyOnUoYik7YnJlYWs7Y2FzZSA0OlkoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTticmVhaztjYXNlIDEzOkcoYil9cmV0dXJuIG51bGx9c3dpdGNoKGIudGFnKXtjYXNlIDA6bnVsbCE9PWE/RChcIjE1NVwiKTp2b2lkIDA7dmFyIGQ9Yi50eXBlLFxuZT1iLnBlbmRpbmdQcm9wcyxmPVMoYik7Zj1SKGIsZik7ZD1kKGUsZik7Yi5lZmZlY3RUYWd8PTE7XCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQucmVuZGVyJiZ2b2lkIDA9PT1kLiQkdHlwZW9mPyhmPWIudHlwZSxiLnRhZz0yLGIubWVtb2l6ZWRTdGF0ZT1udWxsIT09ZC5zdGF0ZSYmdm9pZCAwIT09ZC5zdGF0ZT9kLnN0YXRlOm51bGwsXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzJiYoZT1LYyhiLGQsZSxiLm1lbW9pemVkU3RhdGUpLG51bGwhPT1lJiZ2b2lkIDAhPT1lJiYoYi5tZW1vaXplZFN0YXRlPUEoe30sYi5tZW1vaXplZFN0YXRlLGUpKSksZT11KGIpLEpjKGIsZCksRGIoYixjKSxhPWwoYSxiLCEwLGUsITEsYykpOihiLnRhZz0xLGcoYSxiLGQpLGIubWVtb2l6ZWRQcm9wcz1lLGE9Yi5jaGlsZCk7cmV0dXJuIGE7Y2FzZSAxOnJldHVybiBlPWIudHlwZSxjPWIucGVuZGluZ1Byb3BzLHEoKXx8XG5iLm1lbW9pemVkUHJvcHMhPT1jPyhkPVMoYiksZD1SKGIsZCksZT1lKGMsZCksYi5lZmZlY3RUYWd8PTEsZyhhLGIsZSksYi5tZW1vaXplZFByb3BzPWMsYT1iLmNoaWxkKTphPXIoYSxiKSxhO2Nhc2UgMjplPXUoYik7bnVsbD09PWE/bnVsbD09PWIuc3RhdGVOb2RlPyhMYyhiLGIucGVuZGluZ1Byb3BzKSxEYihiLGMpLGQ9ITApOmQ9TWMoYixjKTpkPUViKGEsYixjKTtmPSExO3ZhciBoPWIudXBkYXRlUXVldWU7bnVsbCE9PWgmJm51bGwhPT1oLmNhcHR1cmVkVmFsdWVzJiYoZj1kPSEwKTtyZXR1cm4gbChhLGIsZCxlLGYsYyk7Y2FzZSAzOmE6aWYocChiKSxkPWIudXBkYXRlUXVldWUsbnVsbCE9PWQpe2Y9Yi5tZW1vaXplZFN0YXRlO2U9UmUoYSxiLGQsbnVsbCxudWxsLGMpO2IubWVtb2l6ZWRTdGF0ZT1lO2Q9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09ZCYmbnVsbCE9PWQuY2FwdHVyZWRWYWx1ZXMpZD1udWxsO2Vsc2UgaWYoZj09PWUpe1dhKCk7YT1yKGEsYik7YnJlYWsgYX1lbHNlIGQ9XG5lLmVsZW1lbnQ7Zj1iLnN0YXRlTm9kZTsobnVsbD09PWF8fG51bGw9PT1hLmNoaWxkKSYmZi5oeWRyYXRlJiZIKGIpPyhiLmVmZmVjdFRhZ3w9MixiLmNoaWxkPVplKGIsbnVsbCxkLGMpKTooV2EoKSxnKGEsYixkKSk7Yi5tZW1vaXplZFN0YXRlPWU7YT1iLmNoaWxkfWVsc2UgV2EoKSxhPXIoYSxiKTtyZXR1cm4gYTtjYXNlIDU6YTp7eChiKTtudWxsPT09YSYmQ2IoYik7ZT1iLnR5cGU7aD1iLm1lbW9pemVkUHJvcHM7ZD1iLnBlbmRpbmdQcm9wcztmPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpudWxsO2lmKCFxKCkmJmg9PT1kKXtpZihoPWIubW9kZSYxJiZuKGUsZCkpYi5leHBpcmF0aW9uVGltZT0xMDczNzQxODIzO2lmKCFofHwxMDczNzQxODIzIT09Yyl7YT1yKGEsYik7YnJlYWsgYX19aD1kLmNoaWxkcmVuO1EoZSxkKT9oPW51bGw6ZiYmUShlLGYpJiYoYi5lZmZlY3RUYWd8PTE2KTt2KGEsYik7MTA3Mzc0MTgyMyE9PWMmJmIubW9kZSYxJiZuKGUsZCk/KGIuZXhwaXJhdGlvblRpbWU9XG4xMDczNzQxODIzLGIubWVtb2l6ZWRQcm9wcz1kLGE9bnVsbCk6KGcoYSxiLGgpLGIubWVtb2l6ZWRQcm9wcz1kLGE9Yi5jaGlsZCl9cmV0dXJuIGE7Y2FzZSA2OnJldHVybiBudWxsPT09YSYmQ2IoYiksYi5tZW1vaXplZFByb3BzPWIucGVuZGluZ1Byb3BzLG51bGw7Y2FzZSA4OmIudGFnPTc7Y2FzZSA3OnJldHVybiBlPWIucGVuZGluZ1Byb3BzLHEoKXx8Yi5tZW1vaXplZFByb3BzIT09ZXx8KGU9Yi5tZW1vaXplZFByb3BzKSxkPWUuY2hpbGRyZW4sYi5zdGF0ZU5vZGU9bnVsbD09PWE/WmUoYixiLnN0YXRlTm9kZSxkLGMpOlllKGIsYS5zdGF0ZU5vZGUsZCxjKSxiLm1lbW9pemVkUHJvcHM9ZSxiLnN0YXRlTm9kZTtjYXNlIDk6cmV0dXJuIG51bGw7Y2FzZSA0OnJldHVybiBZKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksZT1iLnBlbmRpbmdQcm9wcyxxKCl8fGIubWVtb2l6ZWRQcm9wcyE9PWU/KG51bGw9PT1hP2IuY2hpbGQ9WWUoYixudWxsLGUsYyk6ZyhhLGIsZSksYi5tZW1vaXplZFByb3BzPVxuZSxhPWIuY2hpbGQpOmE9cihhLGIpLGE7Y2FzZSAxNDpyZXR1cm4gYz1iLnR5cGUucmVuZGVyLGM9YyhiLnBlbmRpbmdQcm9wcyxiLnJlZiksZyhhLGIsYyksYi5tZW1vaXplZFByb3BzPWMsYi5jaGlsZDtjYXNlIDEwOnJldHVybiBjPWIucGVuZGluZ1Byb3BzLHEoKXx8Yi5tZW1vaXplZFByb3BzIT09Yz8oZyhhLGIsYyksYi5tZW1vaXplZFByb3BzPWMsYT1iLmNoaWxkKTphPXIoYSxiKSxhO2Nhc2UgMTE6cmV0dXJuIGM9Yi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4scSgpfHxudWxsIT09YyYmYi5tZW1vaXplZFByb3BzIT09Yz8oZyhhLGIsYyksYi5tZW1vaXplZFByb3BzPWMsYT1iLmNoaWxkKTphPXIoYSxiKSxhO2Nhc2UgMTM6cmV0dXJuIEIoYSxiLGMpO2Nhc2UgMTI6YTp7ZD1iLnR5cGU7Zj1iLnBlbmRpbmdQcm9wcztoPWIubWVtb2l6ZWRQcm9wcztlPWQuX2N1cnJlbnRWYWx1ZTt2YXIgdD1kLl9jaGFuZ2VkQml0cztpZihxKCl8fDAhPT10fHxoIT09Zil7Yi5tZW1vaXplZFByb3BzPVxuZjt2YXIgaz1mLnVuc3RhYmxlX29ic2VydmVkQml0cztpZih2b2lkIDA9PT1rfHxudWxsPT09aylrPTEwNzM3NDE4MjM7Yi5zdGF0ZU5vZGU9aztpZigwIT09KHQmaykpeihiLGQsdCxjKTtlbHNlIGlmKGg9PT1mKXthPXIoYSxiKTticmVhayBhfWM9Zi5jaGlsZHJlbjtjPWMoZSk7ZyhhLGIsYyk7YT1iLmNoaWxkfWVsc2UgYT1yKGEsYil9cmV0dXJuIGE7ZGVmYXVsdDpEKFwiMTU2XCIpfX19fVxuZnVuY3Rpb24gYWYoYSxiLGMsZCxlKXtmdW5jdGlvbiBmKGEpe2EuZWZmZWN0VGFnfD00fXZhciBoPWEuY3JlYXRlSW5zdGFuY2UsZz1hLmNyZWF0ZVRleHRJbnN0YW5jZSxrPWEuYXBwZW5kSW5pdGlhbENoaWxkLHY9YS5maW5hbGl6ZUluaXRpYWxDaGlsZHJlbixsPWEucHJlcGFyZVVwZGF0ZSxwPWEucGVyc2lzdGVuY2Usej1iLmdldFJvb3RIb3N0Q29udGFpbmVyLEI9Yi5wb3BIb3N0Q29udGV4dCxyPWIuZ2V0SG9zdENvbnRleHQsUT1iLnBvcEhvc3RDb250YWluZXIsbj1jLnBvcENvbnRleHRQcm92aWRlcix4PWMucG9wVG9wTGV2ZWxDb250ZXh0T2JqZWN0LFk9ZC5wb3BQcm92aWRlcixHPWUucHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZSxSPWUucHJlcGFyZVRvSHlkcmF0ZUhvc3RUZXh0SW5zdGFuY2UsUz1lLnBvcEh5ZHJhdGlvblN0YXRlLHE9dm9pZCAwLHU9dm9pZCAwLHQ9dm9pZCAwO2EubXV0YXRpb24/KHE9ZnVuY3Rpb24oKXt9LHU9ZnVuY3Rpb24oYSxiLGMpeyhiLnVwZGF0ZVF1ZXVlPVxuYykmJmYoYil9LHQ9ZnVuY3Rpb24oYSxiLGMsZCl7YyE9PWQmJmYoYil9KTpwP0QoXCIyMzVcIik6RChcIjIzNlwiKTtyZXR1cm57Y29tcGxldGVXb3JrOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcztzd2l0Y2goYi50YWcpe2Nhc2UgMTpyZXR1cm4gbnVsbDtjYXNlIDI6cmV0dXJuIG4oYiksYT1iLnN0YXRlTm9kZSxkPWIudXBkYXRlUXVldWUsbnVsbCE9PWQmJm51bGwhPT1kLmNhcHR1cmVkVmFsdWVzJiYoYi5lZmZlY3RUYWcmPS02NSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5jb21wb25lbnREaWRDYXRjaD9iLmVmZmVjdFRhZ3w9MjU2OmQuY2FwdHVyZWRWYWx1ZXM9bnVsbCksbnVsbDtjYXNlIDM6UShiKTt4KGIpO2Q9Yi5zdGF0ZU5vZGU7ZC5wZW5kaW5nQ29udGV4dCYmKGQuY29udGV4dD1kLnBlbmRpbmdDb250ZXh0LGQucGVuZGluZ0NvbnRleHQ9bnVsbCk7aWYobnVsbD09PWF8fG51bGw9PT1hLmNoaWxkKVMoYiksYi5lZmZlY3RUYWcmPS0zO3EoYik7YT1iLnVwZGF0ZVF1ZXVlO1xubnVsbCE9PWEmJm51bGwhPT1hLmNhcHR1cmVkVmFsdWVzJiYoYi5lZmZlY3RUYWd8PTI1Nik7cmV0dXJuIG51bGw7Y2FzZSA1OkIoYik7Yz16KCk7dmFyIGU9Yi50eXBlO2lmKG51bGwhPT1hJiZudWxsIT1iLnN0YXRlTm9kZSl7dmFyIHA9YS5tZW1vaXplZFByb3BzLEg9Yi5zdGF0ZU5vZGUseT1yKCk7SD1sKEgsZSxwLGQsYyx5KTt1KGEsYixILGUscCxkLGMseSk7YS5yZWYhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpfWVsc2V7aWYoIWQpcmV0dXJuIG51bGw9PT1iLnN0YXRlTm9kZT9EKFwiMTY2XCIpOnZvaWQgMCxudWxsO2E9cigpO2lmKFMoYikpRyhiLGMsYSkmJmYoYik7ZWxzZXtwPWgoZSxkLGMsYSxiKTthOmZvcih5PWIuY2hpbGQ7bnVsbCE9PXk7KXtpZig1PT09eS50YWd8fDY9PT15LnRhZylrKHAseS5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PXkudGFnJiZudWxsIT09eS5jaGlsZCl7eS5jaGlsZFtcInJldHVyblwiXT15O3k9eS5jaGlsZDtjb250aW51ZX1pZih5PT09YilicmVhaztcbmZvcig7bnVsbD09PXkuc2libGluZzspe2lmKG51bGw9PT15W1wicmV0dXJuXCJdfHx5W1wicmV0dXJuXCJdPT09YilicmVhayBhO3k9eVtcInJldHVyblwiXX15LnNpYmxpbmdbXCJyZXR1cm5cIl09eVtcInJldHVyblwiXTt5PXkuc2libGluZ312KHAsZSxkLGMsYSkmJmYoYik7Yi5zdGF0ZU5vZGU9cH1udWxsIT09Yi5yZWYmJihiLmVmZmVjdFRhZ3w9MTI4KX1yZXR1cm4gbnVsbDtjYXNlIDY6aWYoYSYmbnVsbCE9Yi5zdGF0ZU5vZGUpdChhLGIsYS5tZW1vaXplZFByb3BzLGQpO2Vsc2V7aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBkKXJldHVybiBudWxsPT09Yi5zdGF0ZU5vZGU/RChcIjE2NlwiKTp2b2lkIDAsbnVsbDthPXooKTtjPXIoKTtTKGIpP1IoYikmJmYoYik6Yi5zdGF0ZU5vZGU9ZyhkLGEsYyxiKX1yZXR1cm4gbnVsbDtjYXNlIDc6KGQ9Yi5tZW1vaXplZFByb3BzKT92b2lkIDA6RChcIjE2NVwiKTtiLnRhZz04O2U9W107YTpmb3IoKHA9Yi5zdGF0ZU5vZGUpJiYocFtcInJldHVyblwiXT1iKTtudWxsIT09XG5wOyl7aWYoNT09PXAudGFnfHw2PT09cC50YWd8fDQ9PT1wLnRhZylEKFwiMjQ3XCIpO2Vsc2UgaWYoOT09PXAudGFnKWUucHVzaChwLnBlbmRpbmdQcm9wcy52YWx1ZSk7ZWxzZSBpZihudWxsIT09cC5jaGlsZCl7cC5jaGlsZFtcInJldHVyblwiXT1wO3A9cC5jaGlsZDtjb250aW51ZX1mb3IoO251bGw9PT1wLnNpYmxpbmc7KXtpZihudWxsPT09cFtcInJldHVyblwiXXx8cFtcInJldHVyblwiXT09PWIpYnJlYWsgYTtwPXBbXCJyZXR1cm5cIl19cC5zaWJsaW5nW1wicmV0dXJuXCJdPXBbXCJyZXR1cm5cIl07cD1wLnNpYmxpbmd9cD1kLmhhbmRsZXI7ZD1wKGQucHJvcHMsZSk7Yi5jaGlsZD1ZZShiLG51bGwhPT1hP2EuY2hpbGQ6bnVsbCxkLGMpO3JldHVybiBiLmNoaWxkO2Nhc2UgODpyZXR1cm4gYi50YWc9NyxudWxsO2Nhc2UgOTpyZXR1cm4gbnVsbDtjYXNlIDE0OnJldHVybiBudWxsO2Nhc2UgMTA6cmV0dXJuIG51bGw7Y2FzZSAxMTpyZXR1cm4gbnVsbDtjYXNlIDQ6cmV0dXJuIFEoYikscShiKSxudWxsO1xuY2FzZSAxMzpyZXR1cm4gWShiKSxudWxsO2Nhc2UgMTI6cmV0dXJuIG51bGw7Y2FzZSAwOkQoXCIxNjdcIik7ZGVmYXVsdDpEKFwiMTU2XCIpfX19fVxuZnVuY3Rpb24gYmYoYSxiLGMsZCxlKXt2YXIgZj1hLnBvcEhvc3RDb250YWluZXIsaD1hLnBvcEhvc3RDb250ZXh0LGc9Yi5wb3BDb250ZXh0UHJvdmlkZXIsaz1iLnBvcFRvcExldmVsQ29udGV4dE9iamVjdCx2PWMucG9wUHJvdmlkZXI7cmV0dXJue3Rocm93RXhjZXB0aW9uOmZ1bmN0aW9uKGEsYixjKXtiLmVmZmVjdFRhZ3w9NTEyO2IuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PW51bGw7Yj17dmFsdWU6Yyxzb3VyY2U6YixzdGFjazpCYyhiKX07ZG97c3dpdGNoKGEudGFnKXtjYXNlIDM6T2UoYSk7YS51cGRhdGVRdWV1ZS5jYXB0dXJlZFZhbHVlcz1bYl07YS5lZmZlY3RUYWd8PTEwMjQ7cmV0dXJuO2Nhc2UgMjppZihjPWEuc3RhdGVOb2RlLDA9PT0oYS5lZmZlY3RUYWcmNjQpJiZudWxsIT09YyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuY29tcG9uZW50RGlkQ2F0Y2gmJiFlKGMpKXtPZShhKTtjPWEudXBkYXRlUXVldWU7dmFyIGQ9Yy5jYXB0dXJlZFZhbHVlcztudWxsPT09ZD9cbmMuY2FwdHVyZWRWYWx1ZXM9W2JdOmQucHVzaChiKTthLmVmZmVjdFRhZ3w9MTAyNDtyZXR1cm59fWE9YVtcInJldHVyblwiXX13aGlsZShudWxsIT09YSl9LHVud2luZFdvcms6ZnVuY3Rpb24oYSl7c3dpdGNoKGEudGFnKXtjYXNlIDI6ZyhhKTt2YXIgYj1hLmVmZmVjdFRhZztyZXR1cm4gYiYxMDI0PyhhLmVmZmVjdFRhZz1iJi0xMDI1fDY0LGEpOm51bGw7Y2FzZSAzOnJldHVybiBmKGEpLGsoYSksYj1hLmVmZmVjdFRhZyxiJjEwMjQ/KGEuZWZmZWN0VGFnPWImLTEwMjV8NjQsYSk6bnVsbDtjYXNlIDU6cmV0dXJuIGgoYSksbnVsbDtjYXNlIDQ6cmV0dXJuIGYoYSksbnVsbDtjYXNlIDEzOnJldHVybiB2KGEpLG51bGw7ZGVmYXVsdDpyZXR1cm4gbnVsbH19LHVud2luZEludGVycnVwdGVkV29yazpmdW5jdGlvbihhKXtzd2l0Y2goYS50YWcpe2Nhc2UgMjpnKGEpO2JyZWFrO2Nhc2UgMzpmKGEpO2soYSk7YnJlYWs7Y2FzZSA1OmgoYSk7YnJlYWs7Y2FzZSA0OmYoYSk7YnJlYWs7Y2FzZSAxMzp2KGEpfX19fVxuZnVuY3Rpb24gY2YoYSxiKXt2YXIgYz1iLnNvdXJjZTtudWxsPT09Yi5zdGFjayYmQmMoYyk7bnVsbCE9PWMmJkFjKGMpO2I9Yi52YWx1ZTtudWxsIT09YSYmMj09PWEudGFnJiZBYyhhKTt0cnl7YiYmYi5zdXBwcmVzc1JlYWN0RXJyb3JMb2dnaW5nfHxjb25zb2xlLmVycm9yKGIpfWNhdGNoKGQpe2QmJmQuc3VwcHJlc3NSZWFjdEVycm9yTG9nZ2luZ3x8Y29uc29sZS5lcnJvcihkKX19XG5mdW5jdGlvbiBkZihhLGIsYyxkLGUpe2Z1bmN0aW9uIGYoYSl7dmFyIGM9YS5yZWY7aWYobnVsbCE9PWMpaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMpdHJ5e2MobnVsbCl9Y2F0Y2godCl7YihhLHQpfWVsc2UgYy5jdXJyZW50PW51bGx9ZnVuY3Rpb24gaChhKXtcImZ1bmN0aW9uXCI9PT10eXBlb2YgSmUmJkplKGEpO3N3aXRjaChhLnRhZyl7Y2FzZSAyOmYoYSk7dmFyIGM9YS5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuY29tcG9uZW50V2lsbFVubW91bnQpdHJ5e2MucHJvcHM9YS5tZW1vaXplZFByb3BzLGMuc3RhdGU9YS5tZW1vaXplZFN0YXRlLGMuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaCh0KXtiKGEsdCl9YnJlYWs7Y2FzZSA1OmYoYSk7YnJlYWs7Y2FzZSA3OmcoYS5zdGF0ZU5vZGUpO2JyZWFrO2Nhc2UgNDpwJiZ2KGEpfX1mdW5jdGlvbiBnKGEpe2Zvcih2YXIgYj1hOzspaWYoaChiKSxudWxsPT09Yi5jaGlsZHx8cCYmND09PWIudGFnKXtpZihiPT09XG5hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iW1wicmV0dXJuXCJdfHxiW1wicmV0dXJuXCJdPT09YSlyZXR1cm47Yj1iW1wicmV0dXJuXCJdfWIuc2libGluZ1tcInJldHVyblwiXT1iW1wicmV0dXJuXCJdO2I9Yi5zaWJsaW5nfWVsc2UgYi5jaGlsZFtcInJldHVyblwiXT1iLGI9Yi5jaGlsZH1mdW5jdGlvbiBrKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfWZ1bmN0aW9uIHYoYSl7Zm9yKHZhciBiPWEsYz0hMSxkPXZvaWQgMCxlPXZvaWQgMDs7KXtpZighYyl7Yz1iW1wicmV0dXJuXCJdO2E6Zm9yKDs7KXtudWxsPT09Yz9EKFwiMTYwXCIpOnZvaWQgMDtzd2l0Y2goYy50YWcpe2Nhc2UgNTpkPWMuc3RhdGVOb2RlO2U9ITE7YnJlYWsgYTtjYXNlIDM6ZD1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2U9ITA7YnJlYWsgYTtjYXNlIDQ6ZD1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2U9ITA7YnJlYWsgYX1jPWNbXCJyZXR1cm5cIl19Yz0hMH1pZig1PT09XG5iLnRhZ3x8Nj09PWIudGFnKWcoYiksZT9TKGQsYi5zdGF0ZU5vZGUpOlIoZCxiLnN0YXRlTm9kZSk7ZWxzZSBpZig0PT09Yi50YWc/ZD1iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOmgoYiksbnVsbCE9PWIuY2hpbGQpe2IuY2hpbGRbXCJyZXR1cm5cIl09YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWJbXCJyZXR1cm5cIl18fGJbXCJyZXR1cm5cIl09PT1hKXJldHVybjtiPWJbXCJyZXR1cm5cIl07ND09PWIudGFnJiYoYz0hMSl9Yi5zaWJsaW5nW1wicmV0dXJuXCJdPWJbXCJyZXR1cm5cIl07Yj1iLnNpYmxpbmd9fXZhciBsPWEuZ2V0UHVibGljSW5zdGFuY2UscD1hLm11dGF0aW9uO2E9YS5wZXJzaXN0ZW5jZTtwfHwoYT9EKFwiMjM1XCIpOkQoXCIyMzZcIikpO3ZhciB6PXAuY29tbWl0TW91bnQsQj1wLmNvbW1pdFVwZGF0ZSxyPXAucmVzZXRUZXh0Q29udGVudCxRPXAuY29tbWl0VGV4dFVwZGF0ZSxuPXAuYXBwZW5kQ2hpbGQsXG54PXAuYXBwZW5kQ2hpbGRUb0NvbnRhaW5lcixZPXAuaW5zZXJ0QmVmb3JlLEc9cC5pbnNlcnRJbkNvbnRhaW5lckJlZm9yZSxSPXAucmVtb3ZlQ2hpbGQsUz1wLnJlbW92ZUNoaWxkRnJvbUNvbnRhaW5lcjtyZXR1cm57Y29tbWl0QmVmb3JlTXV0YXRpb25MaWZlQ3ljbGVzOmZ1bmN0aW9uKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDI6aWYoYi5lZmZlY3RUYWcmMjA0OCYmbnVsbCE9PWEpe3ZhciBjPWEubWVtb2l6ZWRQcm9wcyxkPWEubWVtb2l6ZWRTdGF0ZTthPWIuc3RhdGVOb2RlO2EucHJvcHM9Yi5tZW1vaXplZFByb3BzO2Euc3RhdGU9Yi5tZW1vaXplZFN0YXRlO2I9YS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShjLGQpO2EuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGU9Yn1icmVhaztjYXNlIDM6Y2FzZSA1OmNhc2UgNjpjYXNlIDQ6YnJlYWs7ZGVmYXVsdDpEKFwiMTYzXCIpfX0sY29tbWl0UmVzZXRUZXh0Q29udGVudDpmdW5jdGlvbihhKXtyKGEuc3RhdGVOb2RlKX0sXG5jb21taXRQbGFjZW1lbnQ6ZnVuY3Rpb24oYSl7YTp7Zm9yKHZhciBiPWFbXCJyZXR1cm5cIl07bnVsbCE9PWI7KXtpZihrKGIpKXt2YXIgYz1iO2JyZWFrIGF9Yj1iW1wicmV0dXJuXCJdfUQoXCIxNjBcIik7Yz12b2lkIDB9dmFyIGQ9Yj12b2lkIDA7c3dpdGNoKGMudGFnKXtjYXNlIDU6Yj1jLnN0YXRlTm9kZTtkPSExO2JyZWFrO2Nhc2UgMzpiPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztjYXNlIDQ6Yj1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7ZGVmYXVsdDpEKFwiMTYxXCIpfWMuZWZmZWN0VGFnJjE2JiYocihiKSxjLmVmZmVjdFRhZyY9LTE3KTthOmI6Zm9yKGM9YTs7KXtmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Y1tcInJldHVyblwiXXx8ayhjW1wicmV0dXJuXCJdKSl7Yz1udWxsO2JyZWFrIGF9Yz1jW1wicmV0dXJuXCJdfWMuc2libGluZ1tcInJldHVyblwiXT1jW1wicmV0dXJuXCJdO2ZvcihjPWMuc2libGluZzs1IT09Yy50YWcmJjYhPT1cbmMudGFnOyl7aWYoYy5lZmZlY3RUYWcmMiljb250aW51ZSBiO2lmKG51bGw9PT1jLmNoaWxkfHw0PT09Yy50YWcpY29udGludWUgYjtlbHNlIGMuY2hpbGRbXCJyZXR1cm5cIl09YyxjPWMuY2hpbGR9aWYoIShjLmVmZmVjdFRhZyYyKSl7Yz1jLnN0YXRlTm9kZTticmVhayBhfX1mb3IodmFyIGU9YTs7KXtpZig1PT09ZS50YWd8fDY9PT1lLnRhZyljP2Q/RyhiLGUuc3RhdGVOb2RlLGMpOlkoYixlLnN0YXRlTm9kZSxjKTpkP3goYixlLnN0YXRlTm9kZSk6bihiLGUuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1lLnRhZyYmbnVsbCE9PWUuY2hpbGQpe2UuY2hpbGRbXCJyZXR1cm5cIl09ZTtlPWUuY2hpbGQ7Y29udGludWV9aWYoZT09PWEpYnJlYWs7Zm9yKDtudWxsPT09ZS5zaWJsaW5nOyl7aWYobnVsbD09PWVbXCJyZXR1cm5cIl18fGVbXCJyZXR1cm5cIl09PT1hKXJldHVybjtlPWVbXCJyZXR1cm5cIl19ZS5zaWJsaW5nW1wicmV0dXJuXCJdPWVbXCJyZXR1cm5cIl07ZT1lLnNpYmxpbmd9fSxjb21taXREZWxldGlvbjpmdW5jdGlvbihhKXt2KGEpO1xuYVtcInJldHVyblwiXT1udWxsO2EuY2hpbGQ9bnVsbDthLmFsdGVybmF0ZSYmKGEuYWx0ZXJuYXRlLmNoaWxkPW51bGwsYS5hbHRlcm5hdGVbXCJyZXR1cm5cIl09bnVsbCl9LGNvbW1pdFdvcms6ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMjpicmVhaztjYXNlIDU6dmFyIGM9Yi5zdGF0ZU5vZGU7aWYobnVsbCE9Yyl7dmFyIGQ9Yi5tZW1vaXplZFByb3BzO2E9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOmQ7dmFyIGU9Yi50eXBlLGY9Yi51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPW51bGw7bnVsbCE9PWYmJkIoYyxmLGUsYSxkLGIpfWJyZWFrO2Nhc2UgNjpudWxsPT09Yi5zdGF0ZU5vZGU/RChcIjE2MlwiKTp2b2lkIDA7Yz1iLm1lbW9pemVkUHJvcHM7UShiLnN0YXRlTm9kZSxudWxsIT09YT9hLm1lbW9pemVkUHJvcHM6YyxjKTticmVhaztjYXNlIDM6YnJlYWs7ZGVmYXVsdDpEKFwiMTYzXCIpfX0sY29tbWl0TGlmZUN5Y2xlczpmdW5jdGlvbihhLGIsYyl7c3dpdGNoKGMudGFnKXtjYXNlIDI6YT1cbmMuc3RhdGVOb2RlO2lmKGMuZWZmZWN0VGFnJjQpaWYobnVsbD09PWIpYS5wcm9wcz1jLm1lbW9pemVkUHJvcHMsYS5zdGF0ZT1jLm1lbW9pemVkU3RhdGUsYS5jb21wb25lbnREaWRNb3VudCgpO2Vsc2V7dmFyIGQ9Yi5tZW1vaXplZFByb3BzO2I9Yi5tZW1vaXplZFN0YXRlO2EucHJvcHM9Yy5tZW1vaXplZFByb3BzO2Euc3RhdGU9Yy5tZW1vaXplZFN0YXRlO2EuY29tcG9uZW50RGlkVXBkYXRlKGQsYixhLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlKX1jPWMudXBkYXRlUXVldWU7bnVsbCE9PWMmJlNlKGMsYSk7YnJlYWs7Y2FzZSAzOmI9Yy51cGRhdGVRdWV1ZTtpZihudWxsIT09Yil7YT1udWxsO2lmKG51bGwhPT1jLmNoaWxkKXN3aXRjaChjLmNoaWxkLnRhZyl7Y2FzZSA1OmE9bChjLmNoaWxkLnN0YXRlTm9kZSk7YnJlYWs7Y2FzZSAyOmE9Yy5jaGlsZC5zdGF0ZU5vZGV9U2UoYixhKX1icmVhaztjYXNlIDU6YT1jLnN0YXRlTm9kZTtudWxsPT09YiYmYy5lZmZlY3RUYWcmXG40JiZ6KGEsYy50eXBlLGMubWVtb2l6ZWRQcm9wcyxjKTticmVhaztjYXNlIDY6YnJlYWs7Y2FzZSA0OmJyZWFrO2RlZmF1bHQ6RChcIjE2M1wiKX19LGNvbW1pdEVycm9yTG9nZ2luZzpmdW5jdGlvbihhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSAyOnZhciBjPWEudHlwZTtiPWEuc3RhdGVOb2RlO3ZhciBkPWEudXBkYXRlUXVldWU7bnVsbD09PWR8fG51bGw9PT1kLmNhcHR1cmVkVmFsdWVzP0QoXCIyNjRcIik6dm9pZCAwO3ZhciBmPWQuY2FwdHVyZWRWYWx1ZXM7ZC5jYXB0dXJlZFZhbHVlcz1udWxsO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21DYXRjaCYmZShiKTtiLnByb3BzPWEubWVtb2l6ZWRQcm9wcztiLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtmb3IoYz0wO2M8Zi5sZW5ndGg7YysrKXtkPWZbY107dmFyIGw9ZC52YWx1ZSxnPWQuc3RhY2s7Y2YoYSxkKTtiLmNvbXBvbmVudERpZENhdGNoKGwse2NvbXBvbmVudFN0YWNrOm51bGwhPT1nP2c6XCJcIn0pfWJyZWFrO1xuY2FzZSAzOmM9YS51cGRhdGVRdWV1ZTtudWxsPT09Y3x8bnVsbD09PWMuY2FwdHVyZWRWYWx1ZXM/RChcIjI2NFwiKTp2b2lkIDA7Zj1jLmNhcHR1cmVkVmFsdWVzO2MuY2FwdHVyZWRWYWx1ZXM9bnVsbDtmb3IoYz0wO2M8Zi5sZW5ndGg7YysrKWQ9ZltjXSxjZihhLGQpLGIoZC52YWx1ZSk7YnJlYWs7ZGVmYXVsdDpEKFwiMjY1XCIpfX0sY29tbWl0QXR0YWNoUmVmOmZ1bmN0aW9uKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKXt2YXIgYz1hLnN0YXRlTm9kZTtzd2l0Y2goYS50YWcpe2Nhc2UgNTphPWwoYyk7YnJlYWs7ZGVmYXVsdDphPWN9XCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihhKTpiLmN1cnJlbnQ9YX19LGNvbW1pdERldGFjaFJlZjpmdW5jdGlvbihhKXthPWEucmVmO251bGwhPT1hJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YShudWxsKTphLmN1cnJlbnQ9bnVsbCl9fX12YXIgZWY9e307XG5mdW5jdGlvbiBmZihhLGIpe2Z1bmN0aW9uIGMoYSl7YT09PWVmP0QoXCIxNzRcIik6dm9pZCAwO3JldHVybiBhfXZhciBkPWEuZ2V0Q2hpbGRIb3N0Q29udGV4dCxlPWEuZ2V0Um9vdEhvc3RDb250ZXh0O2E9Yi5jcmVhdGVDdXJzb3I7dmFyIGY9Yi5wdXNoLGg9Yi5wb3AsZz1hKGVmKSxrPWEoZWYpLHY9YShlZik7cmV0dXJue2dldEhvc3RDb250ZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIGMoZy5jdXJyZW50KX0sZ2V0Um9vdEhvc3RDb250YWluZXI6ZnVuY3Rpb24oKXtyZXR1cm4gYyh2LmN1cnJlbnQpfSxwb3BIb3N0Q29udGFpbmVyOmZ1bmN0aW9uKGEpe2goZyxhKTtoKGssYSk7aCh2LGEpfSxwb3BIb3N0Q29udGV4dDpmdW5jdGlvbihhKXtrLmN1cnJlbnQ9PT1hJiYoaChnLGEpLGgoayxhKSl9LHB1c2hIb3N0Q29udGFpbmVyOmZ1bmN0aW9uKGEsYil7Zih2LGIsYSk7ZihrLGEsYSk7ZihnLGVmLGEpO2I9ZShiKTtoKGcsYSk7ZihnLGIsYSl9LHB1c2hIb3N0Q29udGV4dDpmdW5jdGlvbihhKXt2YXIgYj1cbmModi5jdXJyZW50KSxlPWMoZy5jdXJyZW50KTtiPWQoZSxhLnR5cGUsYik7ZSE9PWImJihmKGssYSxhKSxmKGcsYixhKSl9fX1cbmZ1bmN0aW9uIGdmKGEpe2Z1bmN0aW9uIGIoYSxiKXt2YXIgYz1uZXcgeGUoNSxudWxsLG51bGwsMCk7Yy50eXBlPVwiREVMRVRFRFwiO2Muc3RhdGVOb2RlPWI7Y1tcInJldHVyblwiXT1hO2MuZWZmZWN0VGFnPTg7bnVsbCE9PWEubGFzdEVmZmVjdD8oYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YyxhLmxhc3RFZmZlY3Q9Yyk6YS5maXJzdEVmZmVjdD1hLmxhc3RFZmZlY3Q9Y31mdW5jdGlvbiBjKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDU6cmV0dXJuIGI9ZihiLGEudHlwZSxhLnBlbmRpbmdQcm9wcyksbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgNjpyZXR1cm4gYj1oKGIsYS5wZW5kaW5nUHJvcHMpLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBkKGEpe2ZvcihhPWFbXCJyZXR1cm5cIl07bnVsbCE9PWEmJjUhPT1hLnRhZyYmMyE9PWEudGFnOylhPWFbXCJyZXR1cm5cIl07cD1hfXZhciBlPWEuc2hvdWxkU2V0VGV4dENvbnRlbnQ7XG5hPWEuaHlkcmF0aW9uO2lmKCFhKXJldHVybntlbnRlckh5ZHJhdGlvblN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuITF9LHJlc2V0SHlkcmF0aW9uU3RhdGU6ZnVuY3Rpb24oKXt9LHRyeVRvQ2xhaW1OZXh0SHlkcmF0YWJsZUluc3RhbmNlOmZ1bmN0aW9uKCl7fSxwcmVwYXJlVG9IeWRyYXRlSG9zdEluc3RhbmNlOmZ1bmN0aW9uKCl7RChcIjE3NVwiKX0scHJlcGFyZVRvSHlkcmF0ZUhvc3RUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oKXtEKFwiMTc2XCIpfSxwb3BIeWRyYXRpb25TdGF0ZTpmdW5jdGlvbigpe3JldHVybiExfX07dmFyIGY9YS5jYW5IeWRyYXRlSW5zdGFuY2UsaD1hLmNhbkh5ZHJhdGVUZXh0SW5zdGFuY2UsZz1hLmdldE5leHRIeWRyYXRhYmxlU2libGluZyxrPWEuZ2V0Rmlyc3RIeWRyYXRhYmxlQ2hpbGQsdj1hLmh5ZHJhdGVJbnN0YW5jZSxsPWEuaHlkcmF0ZVRleHRJbnN0YW5jZSxwPW51bGwsej1udWxsLEI9ITE7cmV0dXJue2VudGVySHlkcmF0aW9uU3RhdGU6ZnVuY3Rpb24oYSl7ej1cbmsoYS5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7cD1hO3JldHVybiBCPSEwfSxyZXNldEh5ZHJhdGlvblN0YXRlOmZ1bmN0aW9uKCl7ej1wPW51bGw7Qj0hMX0sdHJ5VG9DbGFpbU5leHRIeWRyYXRhYmxlSW5zdGFuY2U6ZnVuY3Rpb24oYSl7aWYoQil7dmFyIGQ9ejtpZihkKXtpZighYyhhLGQpKXtkPWcoZCk7aWYoIWR8fCFjKGEsZCkpe2EuZWZmZWN0VGFnfD0yO0I9ITE7cD1hO3JldHVybn1iKHAseil9cD1hO3o9ayhkKX1lbHNlIGEuZWZmZWN0VGFnfD0yLEI9ITEscD1hfX0scHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZTpmdW5jdGlvbihhLGIsYyl7Yj12KGEuc3RhdGVOb2RlLGEudHlwZSxhLm1lbW9pemVkUHJvcHMsYixjLGEpO2EudXBkYXRlUXVldWU9YjtyZXR1cm4gbnVsbCE9PWI/ITA6ITF9LHByZXBhcmVUb0h5ZHJhdGVIb3N0VGV4dEluc3RhbmNlOmZ1bmN0aW9uKGEpe3JldHVybiBsKGEuc3RhdGVOb2RlLGEubWVtb2l6ZWRQcm9wcyxhKX0scG9wSHlkcmF0aW9uU3RhdGU6ZnVuY3Rpb24oYSl7aWYoYSE9PVxucClyZXR1cm4hMTtpZighQilyZXR1cm4gZChhKSxCPSEwLCExO3ZhciBjPWEudHlwZTtpZig1IT09YS50YWd8fFwiaGVhZFwiIT09YyYmXCJib2R5XCIhPT1jJiYhZShjLGEubWVtb2l6ZWRQcm9wcykpZm9yKGM9ejtjOyliKGEsYyksYz1nKGMpO2QoYSk7ej1wP2coYS5zdGF0ZU5vZGUpOm51bGw7cmV0dXJuITB9fX1cbmZ1bmN0aW9uIGhmKGEpe2Z1bmN0aW9uIGIoYSxiLGMpe2E9YS5zdGF0ZU5vZGU7YS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWI7YS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1jfWZ1bmN0aW9uIGMoYSl7cmV0dXJuIDI9PT1hLnRhZyYmbnVsbCE9YS50eXBlLmNoaWxkQ29udGV4dFR5cGVzfWZ1bmN0aW9uIGQoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZSxkPWEudHlwZS5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGI7Yz1jLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBjKWUgaW4gZD92b2lkIDA6RChcIjEwOFwiLEFjKGEpfHxcIlVua25vd25cIixlKTtyZXR1cm4gQSh7fSxiLGMpfXZhciBlPWEuY3JlYXRlQ3Vyc29yLGY9YS5wdXNoLGg9YS5wb3AsZz1lKGthKSxrPWUoITEpLHY9a2E7cmV0dXJue2dldFVubWFza2VkQ29udGV4dDpmdW5jdGlvbihhKXtyZXR1cm4gYyhhKT9cbnY6Zy5jdXJyZW50fSxjYWNoZUNvbnRleHQ6YixnZXRNYXNrZWRDb250ZXh0OmZ1bmN0aW9uKGEsYyl7dmFyIGQ9YS50eXBlLmNvbnRleHRUeXBlcztpZighZClyZXR1cm4ga2E7dmFyIGU9YS5zdGF0ZU5vZGU7aWYoZSYmZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YylyZXR1cm4gZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZj17fSxnO2ZvcihnIGluIGQpZltnXT1jW2ddO2UmJmIoYSxjLGYpO3JldHVybiBmfSxoYXNDb250ZXh0Q2hhbmdlZDpmdW5jdGlvbigpe3JldHVybiBrLmN1cnJlbnR9LGlzQ29udGV4dENvbnN1bWVyOmZ1bmN0aW9uKGEpe3JldHVybiAyPT09YS50YWcmJm51bGwhPWEudHlwZS5jb250ZXh0VHlwZXN9LGlzQ29udGV4dFByb3ZpZGVyOmMscG9wQ29udGV4dFByb3ZpZGVyOmZ1bmN0aW9uKGEpe2MoYSkmJihoKGssYSksaChnLGEpKX0scG9wVG9wTGV2ZWxDb250ZXh0T2JqZWN0OmZ1bmN0aW9uKGEpe2goayxcbmEpO2goZyxhKX0scHVzaFRvcExldmVsQ29udGV4dE9iamVjdDpmdW5jdGlvbihhLGIsYyl7bnVsbCE9Zy5jdXJzb3I/RChcIjE2OFwiKTp2b2lkIDA7ZihnLGIsYSk7ZihrLGMsYSl9LHByb2Nlc3NDaGlsZENvbnRleHQ6ZCxwdXNoQ29udGV4dFByb3ZpZGVyOmZ1bmN0aW9uKGEpe2lmKCFjKGEpKXJldHVybiExO3ZhciBiPWEuc3RhdGVOb2RlO2I9YiYmYi5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dHx8a2E7dj1nLmN1cnJlbnQ7ZihnLGIsYSk7ZihrLGsuY3VycmVudCxhKTtyZXR1cm4hMH0saW52YWxpZGF0ZUNvbnRleHRQcm92aWRlcjpmdW5jdGlvbihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2M/dm9pZCAwOkQoXCIxNjlcIik7aWYoYil7dmFyIGU9ZChhLHYpO2MuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9ZTtoKGssYSk7aChnLGEpO2YoZyxlLGEpfWVsc2UgaChrLGEpO2YoayxiLGEpfSxmaW5kQ3VycmVudFVubWFza2VkQ29udGV4dDpmdW5jdGlvbihhKXtmb3IoMiE9PVxueGQoYSl8fDIhPT1hLnRhZz9EKFwiMTcwXCIpOnZvaWQgMDszIT09YS50YWc7KXtpZihjKGEpKXJldHVybiBhLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDsoYT1hW1wicmV0dXJuXCJdKT92b2lkIDA6RChcIjE3MVwiKX1yZXR1cm4gYS5zdGF0ZU5vZGUuY29udGV4dH19fVxuZnVuY3Rpb24gamYoYSl7dmFyIGI9YS5jcmVhdGVDdXJzb3IsYz1hLnB1c2gsZD1hLnBvcCxlPWIobnVsbCksZj1iKG51bGwpLGg9YigwKTtyZXR1cm57cHVzaFByb3ZpZGVyOmZ1bmN0aW9uKGEpe3ZhciBiPWEudHlwZS5fY29udGV4dDtjKGgsYi5fY2hhbmdlZEJpdHMsYSk7YyhmLGIuX2N1cnJlbnRWYWx1ZSxhKTtjKGUsYSxhKTtiLl9jdXJyZW50VmFsdWU9YS5wZW5kaW5nUHJvcHMudmFsdWU7Yi5fY2hhbmdlZEJpdHM9YS5zdGF0ZU5vZGV9LHBvcFByb3ZpZGVyOmZ1bmN0aW9uKGEpe3ZhciBiPWguY3VycmVudCxjPWYuY3VycmVudDtkKGUsYSk7ZChmLGEpO2QoaCxhKTthPWEudHlwZS5fY29udGV4dDthLl9jdXJyZW50VmFsdWU9YzthLl9jaGFuZ2VkQml0cz1ifX19XG5mdW5jdGlvbiBrZigpe3ZhciBhPVtdLGI9LTE7cmV0dXJue2NyZWF0ZUN1cnNvcjpmdW5jdGlvbihhKXtyZXR1cm57Y3VycmVudDphfX0saXNFbXB0eTpmdW5jdGlvbigpe3JldHVybi0xPT09Yn0scG9wOmZ1bmN0aW9uKGMpezA+Ynx8KGMuY3VycmVudD1hW2JdLGFbYl09bnVsbCxiLS0pfSxwdXNoOmZ1bmN0aW9uKGMsZCl7YisrO2FbYl09Yy5jdXJyZW50O2MuY3VycmVudD1kfSxjaGVja1RoYXRTdGFja0lzRW1wdHk6ZnVuY3Rpb24oKXt9LHJlc2V0U3RhY2tBZnRlckZhdGFsRXJyb3JJbkRldjpmdW5jdGlvbigpe319fVxuZnVuY3Rpb24gbGYoYSl7ZnVuY3Rpb24gYigpe2lmKG51bGwhPT1JKWZvcih2YXIgYT1JW1wicmV0dXJuXCJdO251bGwhPT1hOylMYyhhKSxhPWFbXCJyZXR1cm5cIl07WWE9bnVsbDtaPTA7ST1udWxsO05jPSExfWZ1bmN0aW9uIGMoYSl7cmV0dXJuIG51bGwhPT15YSYmeWEuaGFzKGEpfWZ1bmN0aW9uIGQoYSl7Zm9yKDs7KXt2YXIgYj1hLmFsdGVybmF0ZSxjPWFbXCJyZXR1cm5cIl0sZD1hLnNpYmxpbmc7aWYoMD09PShhLmVmZmVjdFRhZyY1MTIpKXtiPUNiKGIsYSxaKTt2YXIgZT1hO2lmKDEwNzM3NDE4MjM9PT1afHwxMDczNzQxODIzIT09ZS5leHBpcmF0aW9uVGltZSl7Yjpzd2l0Y2goZS50YWcpe2Nhc2UgMzpjYXNlIDI6dmFyIGY9ZS51cGRhdGVRdWV1ZTtmPW51bGw9PT1mPzA6Zi5leHBpcmF0aW9uVGltZTticmVhayBiO2RlZmF1bHQ6Zj0wfWZvcih2YXIgZz1lLmNoaWxkO251bGwhPT1nOykwIT09Zy5leHBpcmF0aW9uVGltZSYmKDA9PT1mfHxmPmcuZXhwaXJhdGlvblRpbWUpJiYoZj1cbmcuZXhwaXJhdGlvblRpbWUpLGc9Zy5zaWJsaW5nO2UuZXhwaXJhdGlvblRpbWU9Zn1pZihudWxsIT09YilyZXR1cm4gYjtudWxsIT09YyYmMD09PShjLmVmZmVjdFRhZyY1MTIpJiYobnVsbD09PWMuZmlyc3RFZmZlY3QmJihjLmZpcnN0RWZmZWN0PWEuZmlyc3RFZmZlY3QpLG51bGwhPT1hLmxhc3RFZmZlY3QmJihudWxsIT09Yy5sYXN0RWZmZWN0JiYoYy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YS5maXJzdEVmZmVjdCksYy5sYXN0RWZmZWN0PWEubGFzdEVmZmVjdCksMTxhLmVmZmVjdFRhZyYmKG51bGwhPT1jLmxhc3RFZmZlY3Q/Yy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YTpjLmZpcnN0RWZmZWN0PWEsYy5sYXN0RWZmZWN0PWEpKTtpZihudWxsIT09ZClyZXR1cm4gZDtpZihudWxsIT09YylhPWM7ZWxzZXtOYz0hMDticmVha319ZWxzZXthPUtjKGEpO2lmKG51bGwhPT1hKXJldHVybiBhLmVmZmVjdFRhZyY9MjU1OSxhO251bGwhPT1jJiYoYy5maXJzdEVmZmVjdD1jLmxhc3RFZmZlY3Q9XG5udWxsLGMuZWZmZWN0VGFnfD01MTIpO2lmKG51bGwhPT1kKXJldHVybiBkO2lmKG51bGwhPT1jKWE9YztlbHNlIGJyZWFrfX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBlKGEpe3ZhciBiPVdhKGEuYWx0ZXJuYXRlLGEsWik7bnVsbD09PWImJihiPWQoYSkpO25jLmN1cnJlbnQ9bnVsbDtyZXR1cm4gYn1mdW5jdGlvbiBmKGEsYyxmKXtjYT9EKFwiMjQzXCIpOnZvaWQgMDtjYT0hMDtpZihjIT09Wnx8YSE9PVlhfHxudWxsPT09SSliKCksWWE9YSxaPWMsST16ZShZYS5jdXJyZW50LG51bGwsWiksYS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9MDt2YXIgZz0hMTtkb3t0cnl7aWYoZilmb3IoO251bGwhPT1JJiYhUygpOylJPWUoSSk7ZWxzZSBmb3IoO251bGwhPT1JOylJPWUoSSl9Y2F0Y2goT2Mpe2lmKG51bGw9PT1JKXtnPSEwO3EoT2MpO2JyZWFrfWY9STt2YXIgaD1mW1wicmV0dXJuXCJdO2lmKG51bGw9PT1oKXtnPSEwO3EoT2MpO2JyZWFrfUpjKGgsZixPYyk7ST1kKGYpfWJyZWFrfXdoaWxlKDEpO1xuY2E9ITE7aWYoZ3x8bnVsbCE9PUkpcmV0dXJuIG51bGw7aWYoTmMpcmV0dXJuIGEucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPWMsYS5jdXJyZW50LmFsdGVybmF0ZTtEKFwiMjYyXCIpfWZ1bmN0aW9uIGgoYSxiLGMsZCl7YT17dmFsdWU6Yyxzb3VyY2U6YSxzdGFjazpCYyhhKX07UGUoYix7ZXhwaXJhdGlvblRpbWU6ZCxwYXJ0aWFsU3RhdGU6bnVsbCxjYWxsYmFjazpudWxsLGlzUmVwbGFjZTohMSxpc0ZvcmNlZDohMSxjYXB0dXJlZFZhbHVlOmEsbmV4dDpudWxsfSk7dihiLGQpfWZ1bmN0aW9uIGcoYSxiKXthOntjYSYmIVphP0QoXCIyNjNcIik6dm9pZCAwO2Zvcih2YXIgZD1hW1wicmV0dXJuXCJdO251bGwhPT1kOyl7c3dpdGNoKGQudGFnKXtjYXNlIDI6dmFyIGU9ZC5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tQ2F0Y2h8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudERpZENhdGNoJiYhYyhlKSl7aChhLGQsYixcbjEpO2E9dm9pZCAwO2JyZWFrIGF9YnJlYWs7Y2FzZSAzOmgoYSxkLGIsMSk7YT12b2lkIDA7YnJlYWsgYX1kPWRbXCJyZXR1cm5cIl19Mz09PWEudGFnJiZoKGEsYSxiLDEpO2E9dm9pZCAwfXJldHVybiBhfWZ1bmN0aW9uIGsoYSl7YT0wIT09aWE/aWE6Y2E/WmE/MTpaOmEubW9kZSYxP3phPzEwKigoKGwoKSsxNSkvMTB8MCkrMSk6MjUqKCgobCgpKzUwMCkvMjV8MCkrMSk6MTt6YSYmKDA9PT1kYXx8YT5kYSkmJihkYT1hKTtyZXR1cm4gYX1mdW5jdGlvbiB2KGEsYyl7YTp7Zm9yKDtudWxsIT09YTspe2lmKDA9PT1hLmV4cGlyYXRpb25UaW1lfHxhLmV4cGlyYXRpb25UaW1lPmMpYS5leHBpcmF0aW9uVGltZT1jO251bGwhPT1hLmFsdGVybmF0ZSYmKDA9PT1hLmFsdGVybmF0ZS5leHBpcmF0aW9uVGltZXx8YS5hbHRlcm5hdGUuZXhwaXJhdGlvblRpbWU+YykmJihhLmFsdGVybmF0ZS5leHBpcmF0aW9uVGltZT1jKTtpZihudWxsPT09YVtcInJldHVyblwiXSlpZigzPT09YS50YWcpe3ZhciBkPVxuYS5zdGF0ZU5vZGU7IWNhJiYwIT09WiYmYzxaJiZiKCk7Y2EmJiFaYSYmWWE9PT1kfHxCKGQsYyk7RmI+eGcmJkQoXCIxODVcIil9ZWxzZXtjPXZvaWQgMDticmVhayBhfWE9YVtcInJldHVyblwiXX1jPXZvaWQgMH1yZXR1cm4gY31mdW5jdGlvbiBsKCl7eWU9SWMoKS1QYztyZXR1cm4geWc9KHllLzEwfDApKzJ9ZnVuY3Rpb24gcChhLGIsYyxkLGUpe3ZhciBmPWlhO2lhPTE7dHJ5e3JldHVybiBhKGIsYyxkLGUpfWZpbmFsbHl7aWE9Zn19ZnVuY3Rpb24geihhKXtpZigwIT09R2Ipe2lmKGE+R2IpcmV0dXJuO21nKFFjKX12YXIgYj1JYygpLVBjO0diPWE7UWM9bGcoUSx7dGltZW91dDoxMCooYS0yKS1ifSl9ZnVuY3Rpb24gQihhLGIpe2lmKG51bGw9PT1hLm5leHRTY2hlZHVsZWRSb290KWEucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9YixudWxsPT09Sz8obGE9Sz1hLGEubmV4dFNjaGVkdWxlZFJvb3Q9YSk6KEs9Sy5uZXh0U2NoZWR1bGVkUm9vdD1hLEsubmV4dFNjaGVkdWxlZFJvb3Q9bGEpO1xuZWxzZXt2YXIgYz1hLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lO2lmKDA9PT1jfHxiPGMpYS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT1ifVR8fChKP0hiJiYoYWE9YSxQPTEsRyhhLDEsITEpKToxPT09Yj9uKCk6eihiKSl9ZnVuY3Rpb24gcigpe3ZhciBhPTAsYj1udWxsO2lmKG51bGwhPT1LKWZvcih2YXIgYz1LLGQ9bGE7bnVsbCE9PWQ7KXt2YXIgZT1kLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lO2lmKDA9PT1lKXtudWxsPT09Y3x8bnVsbD09PUs/RChcIjI0NFwiKTp2b2lkIDA7aWYoZD09PWQubmV4dFNjaGVkdWxlZFJvb3Qpe2xhPUs9ZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2JyZWFrfWVsc2UgaWYoZD09PWxhKWxhPWU9ZC5uZXh0U2NoZWR1bGVkUm9vdCxLLm5leHRTY2hlZHVsZWRSb290PWUsZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2Vsc2UgaWYoZD09PUspe0s9YztLLm5leHRTY2hlZHVsZWRSb290PWxhO2QubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDticmVha31lbHNlIGMubmV4dFNjaGVkdWxlZFJvb3Q9XG5kLm5leHRTY2hlZHVsZWRSb290LGQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDtkPWMubmV4dFNjaGVkdWxlZFJvb3R9ZWxzZXtpZigwPT09YXx8ZTxhKWE9ZSxiPWQ7aWYoZD09PUspYnJlYWs7Yz1kO2Q9ZC5uZXh0U2NoZWR1bGVkUm9vdH19Yz1hYTtudWxsIT09YyYmYz09PWImJjE9PT1hP0ZiKys6RmI9MDthYT1iO1A9YX1mdW5jdGlvbiBRKGEpe3goMCwhMCxhKX1mdW5jdGlvbiBuKCl7eCgxLCExLG51bGwpfWZ1bmN0aW9uIHgoYSxiLGMpeyRhPWM7cigpO2lmKGIpZm9yKDtudWxsIT09YWEmJjAhPT1QJiYoMD09PWF8fGE+PVApJiYoIUlifHxsKCk+PVApOylHKGFhLFAsIUliKSxyKCk7ZWxzZSBmb3IoO251bGwhPT1hYSYmMCE9PVAmJigwPT09YXx8YT49UCk7KUcoYWEsUCwhMSkscigpO251bGwhPT0kYSYmKEdiPTAsUWM9LTEpOzAhPT1QJiZ6KFApOyRhPW51bGw7SWI9ITE7WSgpfWZ1bmN0aW9uIFkoKXtGYj0wO2lmKG51bGwhPT1BYSl7dmFyIGE9QWE7QWE9bnVsbDtmb3IodmFyIGI9XG4wO2I8YS5sZW5ndGg7YisrKXt2YXIgYz1hW2JdO3RyeXtjLl9vbkNvbXBsZXRlKCl9Y2F0Y2god2cpe0JhfHwoQmE9ITAsSmI9d2cpfX19aWYoQmEpdGhyb3cgYT1KYixKYj1udWxsLEJhPSExLGE7fWZ1bmN0aW9uIEcoYSxiLGMpe1Q/RChcIjI0NVwiKTp2b2lkIDA7VD0hMDtjPyhjPWEuZmluaXNoZWRXb3JrLG51bGwhPT1jP1IoYSxjLGIpOihhLmZpbmlzaGVkV29yaz1udWxsLGM9ZihhLGIsITApLG51bGwhPT1jJiYoUygpP2EuZmluaXNoZWRXb3JrPWM6UihhLGMsYikpKSk6KGM9YS5maW5pc2hlZFdvcmssbnVsbCE9PWM/UihhLGMsYik6KGEuZmluaXNoZWRXb3JrPW51bGwsYz1mKGEsYiwhMSksbnVsbCE9PWMmJlIoYSxjLGIpKSk7VD0hMX1mdW5jdGlvbiBSKGEsYixjKXt2YXIgZD1hLmZpcnN0QmF0Y2g7aWYobnVsbCE9PWQmJmQuX2V4cGlyYXRpb25UaW1lPD1jJiYobnVsbD09PUFhP0FhPVtkXTpBYS5wdXNoKGQpLGQuX2RlZmVyKSl7YS5maW5pc2hlZFdvcms9YjthLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPVxuMDtyZXR1cm59YS5maW5pc2hlZFdvcms9bnVsbDtaYT1jYT0hMDtjPWIuc3RhdGVOb2RlO2MuY3VycmVudD09PWI/RChcIjE3N1wiKTp2b2lkIDA7ZD1jLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZTswPT09ZD9EKFwiMjYxXCIpOnZvaWQgMDtjLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT0wO3ZhciBlPWwoKTtuYy5jdXJyZW50PW51bGw7aWYoMTxiLmVmZmVjdFRhZylpZihudWxsIT09Yi5sYXN0RWZmZWN0KXtiLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1iO3ZhciBmPWIuZmlyc3RFZmZlY3R9ZWxzZSBmPWI7ZWxzZSBmPWIuZmlyc3RFZmZlY3Q7emcoYy5jb250YWluZXJJbmZvKTtmb3Iodz1mO251bGwhPT13Oyl7dmFyIGg9ITEsaz12b2lkIDA7dHJ5e2Zvcig7bnVsbCE9PXc7KXcuZWZmZWN0VGFnJjIwNDgmJkRiKHcuYWx0ZXJuYXRlLHcpLHc9dy5uZXh0RWZmZWN0fWNhdGNoKGFiKXtoPSEwLGs9YWJ9aCYmKG51bGw9PT13P0QoXCIxNzhcIik6dm9pZCAwLGcodyxrKSxudWxsIT09XG53JiYodz13Lm5leHRFZmZlY3QpKX1mb3Iodz1mO251bGwhPT13Oyl7aD0hMTtrPXZvaWQgMDt0cnl7Zm9yKDtudWxsIT09dzspe3ZhciBwPXcuZWZmZWN0VGFnO3AmMTYmJk1jKHcpO2lmKHAmMTI4KXt2YXIgbj13LmFsdGVybmF0ZTtudWxsIT09biYma2cobil9c3dpdGNoKHAmMTQpe2Nhc2UgMjpFYih3KTt3LmVmZmVjdFRhZyY9LTM7YnJlYWs7Y2FzZSA2OkViKHcpO3cuZWZmZWN0VGFnJj0tMzt3ZSh3LmFsdGVybmF0ZSx3KTticmVhaztjYXNlIDQ6d2Uody5hbHRlcm5hdGUsdyk7YnJlYWs7Y2FzZSA4OmdnKHcpfXc9dy5uZXh0RWZmZWN0fX1jYXRjaChhYil7aD0hMCxrPWFifWgmJihudWxsPT09dz9EKFwiMTc4XCIpOnZvaWQgMCxnKHcsayksbnVsbCE9PXcmJih3PXcubmV4dEVmZmVjdCkpfUFnKGMuY29udGFpbmVySW5mbyk7Yy5jdXJyZW50PWI7Zm9yKHc9ZjtudWxsIT09dzspe3A9ITE7bj12b2lkIDA7dHJ5e2ZvcihmPWMsaD1lLGs9ZDtudWxsIT09dzspe3ZhciByPXcuZWZmZWN0VGFnO1xuciYzNiYmaGcoZix3LmFsdGVybmF0ZSx3LGgsayk7ciYyNTYmJmlnKHcscSk7ciYxMjgmJmpnKHcpO3ZhciB0PXcubmV4dEVmZmVjdDt3Lm5leHRFZmZlY3Q9bnVsbDt3PXR9fWNhdGNoKGFiKXtwPSEwLG49YWJ9cCYmKG51bGw9PT13P0QoXCIxNzhcIik6dm9pZCAwLGcodyxuKSxudWxsIT09dyYmKHc9dy5uZXh0RWZmZWN0KSl9Y2E9WmE9ITE7XCJmdW5jdGlvblwiPT09dHlwZW9mIEllJiZJZShiLnN0YXRlTm9kZSk7Yj1jLmN1cnJlbnQuZXhwaXJhdGlvblRpbWU7MD09PWImJih5YT1udWxsKTthLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPWJ9ZnVuY3Rpb24gUygpe3JldHVybiBudWxsPT09JGF8fCRhLnRpbWVSZW1haW5pbmcoKT5CZz8hMTpJYj0hMH1mdW5jdGlvbiBxKGEpe251bGw9PT1hYT9EKFwiMjQ2XCIpOnZvaWQgMDthYS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT0wO0JhfHwoQmE9ITAsSmI9YSl9dmFyIHU9a2YoKSx0PWZmKGEsdSkseT1oZih1KTt1PWpmKHUpO3ZhciBIPWdmKGEpLFxuV2E9JGUoYSx0LHksdSxILHYsaykuYmVnaW5Xb3JrLENiPWFmKGEsdCx5LHUsSCkuY29tcGxldGVXb3JrO3Q9YmYodCx5LHUsdixjKTt2YXIgSmM9dC50aHJvd0V4Y2VwdGlvbixLYz10LnVud2luZFdvcmssTGM9dC51bndpbmRJbnRlcnJ1cHRlZFdvcms7dD1kZihhLGcsdixrLGZ1bmN0aW9uKGEpe251bGw9PT15YT95YT1uZXcgU2V0KFthXSk6eWEuYWRkKGEpfSxsKTt2YXIgRGI9dC5jb21taXRCZWZvcmVNdXRhdGlvbkxpZmVDeWNsZXMsTWM9dC5jb21taXRSZXNldFRleHRDb250ZW50LEViPXQuY29tbWl0UGxhY2VtZW50LGdnPXQuY29tbWl0RGVsZXRpb24sd2U9dC5jb21taXRXb3JrLGhnPXQuY29tbWl0TGlmZUN5Y2xlcyxpZz10LmNvbW1pdEVycm9yTG9nZ2luZyxqZz10LmNvbW1pdEF0dGFjaFJlZixrZz10LmNvbW1pdERldGFjaFJlZixJYz1hLm5vdyxsZz1hLnNjaGVkdWxlRGVmZXJyZWRDYWxsYmFjayxtZz1hLmNhbmNlbERlZmVycmVkQ2FsbGJhY2ssemc9YS5wcmVwYXJlRm9yQ29tbWl0LFxuQWc9YS5yZXNldEFmdGVyQ29tbWl0LFBjPUljKCkseWc9Mix5ZT1QYyxSYz0wLGlhPTAsY2E9ITEsST1udWxsLFlhPW51bGwsWj0wLHc9bnVsbCxaYT0hMSxOYz0hMSx5YT1udWxsLGxhPW51bGwsSz1udWxsLEdiPTAsUWM9LTEsVD0hMSxhYT1udWxsLFA9MCxkYT0wLEliPSExLEJhPSExLEpiPW51bGwsJGE9bnVsbCxKPSExLEhiPSExLHphPSExLEFhPW51bGwseGc9MUUzLEZiPTAsQmc9MTtyZXR1cm57cmVjYWxjdWxhdGVDdXJyZW50VGltZTpsLGNvbXB1dGVFeHBpcmF0aW9uRm9yRmliZXI6ayxzY2hlZHVsZVdvcms6dixyZXF1ZXN0V29yazpCLGZsdXNoUm9vdDpmdW5jdGlvbihhLGIpe1Q/RChcIjI1M1wiKTp2b2lkIDA7YWE9YTtQPWI7RyhhLGIsITEpO24oKTtZKCl9LGJhdGNoZWRVcGRhdGVzOmZ1bmN0aW9uKGEsYil7dmFyIGM9SjtKPSEwO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5eyhKPWMpfHxUfHxuKCl9fSx1bmJhdGNoZWRVcGRhdGVzOmZ1bmN0aW9uKGEsYil7aWYoSiYmIUhiKXtIYj1cbiEwO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e0hiPSExfX1yZXR1cm4gYShiKX0sZmx1c2hTeW5jOmZ1bmN0aW9uKGEsYil7VD9EKFwiMTg3XCIpOnZvaWQgMDt2YXIgYz1KO0o9ITA7dHJ5e3JldHVybiBwKGEsYil9ZmluYWxseXtKPWMsbigpfX0sZmx1c2hDb250cm9sbGVkOmZ1bmN0aW9uKGEpe3ZhciBiPUo7Sj0hMDt0cnl7cChhKX1maW5hbGx5eyhKPWIpfHxUfHx4KDEsITEsbnVsbCl9fSxkZWZlcnJlZFVwZGF0ZXM6ZnVuY3Rpb24oYSl7dmFyIGI9aWE7aWE9MjUqKCgobCgpKzUwMCkvMjV8MCkrMSk7dHJ5e3JldHVybiBhKCl9ZmluYWxseXtpYT1ifX0sc3luY1VwZGF0ZXM6cCxpbnRlcmFjdGl2ZVVwZGF0ZXM6ZnVuY3Rpb24oYSxiLGMpe2lmKHphKXJldHVybiBhKGIsYyk7Snx8VHx8MD09PWRhfHwoeChkYSwhMSxudWxsKSxkYT0wKTt2YXIgZD16YSxlPUo7Sj16YT0hMDt0cnl7cmV0dXJuIGEoYixjKX1maW5hbGx5e3phPWQsKEo9ZSl8fFR8fG4oKX19LGZsdXNoSW50ZXJhY3RpdmVVcGRhdGVzOmZ1bmN0aW9uKCl7VHx8XG4wPT09ZGF8fCh4KGRhLCExLG51bGwpLGRhPTApfSxjb21wdXRlVW5pcXVlQXN5bmNFeHBpcmF0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9MjUqKCgobCgpKzUwMCkvMjV8MCkrMSk7YTw9UmMmJihhPVJjKzEpO3JldHVybiBSYz1hfSxsZWdhY3lDb250ZXh0Onl9fVxuZnVuY3Rpb24gbWYoYSl7ZnVuY3Rpb24gYihhLGIsYyxkLGUsaCl7ZD1iLmN1cnJlbnQ7aWYoYyl7Yz1jLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGw9ZyhjKTtjPWsoYyk/dihjLGwpOmx9ZWxzZSBjPWthO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9aDtQZShkLHtleHBpcmF0aW9uVGltZTplLHBhcnRpYWxTdGF0ZTp7ZWxlbWVudDphfSxjYWxsYmFjazp2b2lkIDA9PT1iP251bGw6Yixpc1JlcGxhY2U6ITEsaXNGb3JjZWQ6ITEsY2FwdHVyZWRWYWx1ZTpudWxsLG5leHQ6bnVsbH0pO2YoZCxlKTtyZXR1cm4gZX12YXIgYz1hLmdldFB1YmxpY0luc3RhbmNlO2E9bGYoYSk7dmFyIGQ9YS5yZWNhbGN1bGF0ZUN1cnJlbnRUaW1lLGU9YS5jb21wdXRlRXhwaXJhdGlvbkZvckZpYmVyLGY9YS5zY2hlZHVsZVdvcmssaD1hLmxlZ2FjeUNvbnRleHQsZz1oLmZpbmRDdXJyZW50VW5tYXNrZWRDb250ZXh0LGs9aC5pc0NvbnRleHRQcm92aWRlcix2PVxuaC5wcm9jZXNzQ2hpbGRDb250ZXh0O3JldHVybntjcmVhdGVDb250YWluZXI6ZnVuY3Rpb24oYSxiLGMpe2I9bmV3IHhlKDMsbnVsbCxudWxsLGI/MzowKTthPXtjdXJyZW50OmIsY29udGFpbmVySW5mbzphLHBlbmRpbmdDaGlsZHJlbjpudWxsLHBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZTowLGZpbmlzaGVkV29yazpudWxsLGNvbnRleHQ6bnVsbCxwZW5kaW5nQ29udGV4dDpudWxsLGh5ZHJhdGU6YyxyZW1haW5pbmdFeHBpcmF0aW9uVGltZTowLGZpcnN0QmF0Y2g6bnVsbCxuZXh0U2NoZWR1bGVkUm9vdDpudWxsfTtyZXR1cm4gYi5zdGF0ZU5vZGU9YX0sdXBkYXRlQ29udGFpbmVyOmZ1bmN0aW9uKGEsYyxmLGgpe3ZhciBnPWMuY3VycmVudCxrPWQoKTtnPWUoZyk7cmV0dXJuIGIoYSxjLGYsayxnLGgpfSx1cGRhdGVDb250YWluZXJBdEV4cGlyYXRpb25UaW1lOmZ1bmN0aW9uKGEsYyxlLGYsZyl7dmFyIGg9ZCgpO3JldHVybiBiKGEsYyxlLGgsZixnKX0sZmx1c2hSb290OmEuZmx1c2hSb290LFxucmVxdWVzdFdvcms6YS5yZXF1ZXN0V29yayxjb21wdXRlVW5pcXVlQXN5bmNFeHBpcmF0aW9uOmEuY29tcHV0ZVVuaXF1ZUFzeW5jRXhwaXJhdGlvbixiYXRjaGVkVXBkYXRlczphLmJhdGNoZWRVcGRhdGVzLHVuYmF0Y2hlZFVwZGF0ZXM6YS51bmJhdGNoZWRVcGRhdGVzLGRlZmVycmVkVXBkYXRlczphLmRlZmVycmVkVXBkYXRlcyxzeW5jVXBkYXRlczphLnN5bmNVcGRhdGVzLGludGVyYWN0aXZlVXBkYXRlczphLmludGVyYWN0aXZlVXBkYXRlcyxmbHVzaEludGVyYWN0aXZlVXBkYXRlczphLmZsdXNoSW50ZXJhY3RpdmVVcGRhdGVzLGZsdXNoQ29udHJvbGxlZDphLmZsdXNoQ29udHJvbGxlZCxmbHVzaFN5bmM6YS5mbHVzaFN5bmMsZ2V0UHVibGljUm9vdEluc3RhbmNlOmZ1bmN0aW9uKGEpe2E9YS5jdXJyZW50O2lmKCFhLmNoaWxkKXJldHVybiBudWxsO3N3aXRjaChhLmNoaWxkLnRhZyl7Y2FzZSA1OnJldHVybiBjKGEuY2hpbGQuc3RhdGVOb2RlKTtkZWZhdWx0OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZX19LFxuZmluZEhvc3RJbnN0YW5jZTpmdW5jdGlvbihhKXt2YXIgYj1hLl9yZWFjdEludGVybmFsRmliZXI7dm9pZCAwPT09YiYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnJlbmRlcj9EKFwiMTg4XCIpOkQoXCIyNjhcIixPYmplY3Qua2V5cyhhKSkpO2E9QmQoYik7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRIb3N0SW5zdGFuY2VXaXRoTm9Qb3J0YWxzOmZ1bmN0aW9uKGEpe2E9Q2QoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGluamVjdEludG9EZXZUb29sczpmdW5jdGlvbihhKXt2YXIgYj1hLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlO3JldHVybiBIZShBKHt9LGEse2ZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9QmQoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOmZ1bmN0aW9uKGEpe3JldHVybiBiP2IoYSk6bnVsbH19KSl9fX1cbnZhciBuZj1PYmplY3QuZnJlZXplKHtkZWZhdWx0Om1mfSksb2Y9bmYmJm1mfHxuZixwZj1vZltcImRlZmF1bHRcIl0/b2ZbXCJkZWZhdWx0XCJdOm9mO2Z1bmN0aW9uIHFmKGEsYixjKXt2YXIgZD0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bnVsbDtyZXR1cm57JCR0eXBlb2Y6cmMsa2V5Om51bGw9PWQ/bnVsbDpcIlwiK2QsY2hpbGRyZW46YSxjb250YWluZXJJbmZvOmIsaW1wbGVtZW50YXRpb246Y319dmFyIHJmPVwib2JqZWN0XCI9PT10eXBlb2YgcGVyZm9ybWFuY2UmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBwZXJmb3JtYW5jZS5ub3csc2Y9dm9pZCAwO3NmPXJmP2Z1bmN0aW9uKCl7cmV0dXJuIHBlcmZvcm1hbmNlLm5vdygpfTpmdW5jdGlvbigpe3JldHVybiBEYXRlLm5vdygpfTt2YXIgdGY9dm9pZCAwLHVmPXZvaWQgMDtcbmlmKG0uY2FuVXNlRE9NKWlmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiByZXF1ZXN0SWRsZUNhbGxiYWNrfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgY2FuY2VsSWRsZUNhbGxiYWNrKXt2YXIgdmY9bnVsbCx3Zj0hMSx4Zj0tMSx5Zj0hMSx6Zj0wLEFmPTMzLEJmPTMzLENmPXZvaWQgMDtDZj1yZj97ZGlkVGltZW91dDohMSx0aW1lUmVtYWluaW5nOmZ1bmN0aW9uKCl7dmFyIGE9emYtcGVyZm9ybWFuY2Uubm93KCk7cmV0dXJuIDA8YT9hOjB9fTp7ZGlkVGltZW91dDohMSx0aW1lUmVtYWluaW5nOmZ1bmN0aW9uKCl7dmFyIGE9emYtRGF0ZS5ub3coKTtyZXR1cm4gMDxhP2E6MH19O3ZhciBEZj1cIl9fcmVhY3RJZGxlQ2FsbGJhY2skXCIrTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMik7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsZnVuY3Rpb24oYSl7aWYoYS5zb3VyY2U9PT13aW5kb3cmJmEuZGF0YT09PURmKXt3Zj0hMTthPXNmKCk7aWYoMD49emYtYSlpZigtMSE9PVxueGYmJnhmPD1hKUNmLmRpZFRpbWVvdXQ9ITA7ZWxzZXt5Znx8KHlmPSEwLHJlcXVlc3RBbmltYXRpb25GcmFtZShFZikpO3JldHVybn1lbHNlIENmLmRpZFRpbWVvdXQ9ITE7eGY9LTE7YT12Zjt2Zj1udWxsO251bGwhPT1hJiZhKENmKX19LCExKTt2YXIgRWY9ZnVuY3Rpb24oYSl7eWY9ITE7dmFyIGI9YS16ZitCZjtiPEJmJiZBZjxCZj8oOD5iJiYoYj04KSxCZj1iPEFmP0FmOmIpOkFmPWI7emY9YStCZjt3Znx8KHdmPSEwLHdpbmRvdy5wb3N0TWVzc2FnZShEZixcIipcIikpfTt0Zj1mdW5jdGlvbihhLGIpe3ZmPWE7bnVsbCE9YiYmXCJudW1iZXJcIj09PXR5cGVvZiBiLnRpbWVvdXQmJih4Zj1zZigpK2IudGltZW91dCk7eWZ8fCh5Zj0hMCxyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoRWYpKTtyZXR1cm4gMH07dWY9ZnVuY3Rpb24oKXt2Zj1udWxsO3dmPSExO3hmPS0xfX1lbHNlIHRmPXdpbmRvdy5yZXF1ZXN0SWRsZUNhbGxiYWNrLHVmPXdpbmRvdy5jYW5jZWxJZGxlQ2FsbGJhY2s7ZWxzZSB0Zj1cbmZ1bmN0aW9uKGEpe3JldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7YSh7dGltZVJlbWFpbmluZzpmdW5jdGlvbigpe3JldHVybiBJbmZpbml0eX0sZGlkVGltZW91dDohMX0pfSl9LHVmPWZ1bmN0aW9uKGEpe2NsZWFyVGltZW91dChhKX07ZnVuY3Rpb24gRmYoYSl7dmFyIGI9XCJcIjtlYS5DaGlsZHJlbi5mb3JFYWNoKGEsZnVuY3Rpb24oYSl7bnVsbD09YXx8XCJzdHJpbmdcIiE9PXR5cGVvZiBhJiZcIm51bWJlclwiIT09dHlwZW9mIGF8fChiKz1hKX0pO3JldHVybiBifWZ1bmN0aW9uIEdmKGEsYil7YT1BKHtjaGlsZHJlbjp2b2lkIDB9LGIpO2lmKGI9RmYoYi5jaGlsZHJlbikpYS5jaGlsZHJlbj1iO3JldHVybiBhfVxuZnVuY3Rpb24gSGYoYSxiLGMsZCl7YT1hLm9wdGlvbnM7aWYoYil7Yj17fTtmb3IodmFyIGU9MDtlPGMubGVuZ3RoO2UrKyliW1wiJFwiK2NbZV1dPSEwO2ZvcihjPTA7YzxhLmxlbmd0aDtjKyspZT1iLmhhc093blByb3BlcnR5KFwiJFwiK2FbY10udmFsdWUpLGFbY10uc2VsZWN0ZWQhPT1lJiYoYVtjXS5zZWxlY3RlZD1lKSxlJiZkJiYoYVtjXS5kZWZhdWx0U2VsZWN0ZWQ9ITApfWVsc2V7Yz1cIlwiK2M7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIElmKGEsYil7dmFyIGM9Yi52YWx1ZTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpudWxsIT1jP2M6Yi5kZWZhdWx0VmFsdWUsd2FzTXVsdGlwbGU6ISFiLm11bHRpcGxlfX1mdW5jdGlvbiBKZihhLGIpe251bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/RChcIjkxXCIpOnZvaWQgMDtyZXR1cm4gQSh7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiBLZihhLGIpe3ZhciBjPWIudmFsdWU7bnVsbD09YyYmKGM9Yi5kZWZhdWx0VmFsdWUsYj1iLmNoaWxkcmVuLG51bGwhPWImJihudWxsIT1jP0QoXCI5MlwiKTp2b2lkIDAsQXJyYXkuaXNBcnJheShiKSYmKDE+PWIubGVuZ3RoP3ZvaWQgMDpEKFwiOTNcIiksYj1iWzBdKSxjPVwiXCIrYiksbnVsbD09YyYmKGM9XCJcIikpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOlwiXCIrY319XG5mdW5jdGlvbiBMZihhLGIpe3ZhciBjPWIudmFsdWU7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1iLmRlZmF1bHRWYWx1ZSYmKGEuZGVmYXVsdFZhbHVlPWIuZGVmYXVsdFZhbHVlKX1mdW5jdGlvbiBNZihhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiYoYS52YWx1ZT1iKX12YXIgTmY9e2h0bWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsbWF0aG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLHN2ZzpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJ9O1xuZnVuY3Rpb24gT2YoYSl7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Y2FzZSBcIm1hdGhcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtkZWZhdWx0OnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwifX1mdW5jdGlvbiBQZihhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/T2YoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgUWY9dm9pZCAwLFJmPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGIsYyxkLGUpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX06YX0oZnVuY3Rpb24oYSxiKXtpZihhLm5hbWVzcGFjZVVSSSE9PU5mLnN2Z3x8XCJpbm5lckhUTUxcImluIGEpYS5pbm5lckhUTUw9YjtlbHNle1FmPVFmfHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1FmLmlubmVySFRNTD1cIlxceDNjc3ZnXFx4M2VcIitiK1wiXFx4M2Mvc3ZnXFx4M2VcIjtmb3IoYj1RZi5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBTZihhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifVxudmFyIFRmPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMCxmaWxsT3BhY2l0eTohMCxmbG9vZE9wYWNpdHk6ITAsXG5zdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LFVmPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhUZikuZm9yRWFjaChmdW5jdGlvbihhKXtVZi5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO1RmW2JdPVRmW2FdfSl9KTtcbmZ1bmN0aW9uIFZmKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKTt2YXIgZT1jO3ZhciBmPWJbY107ZT1udWxsPT1mfHxcImJvb2xlYW5cIj09PXR5cGVvZiBmfHxcIlwiPT09Zj9cIlwiOmR8fFwibnVtYmVyXCIhPT10eXBlb2YgZnx8MD09PWZ8fFRmLmhhc093blByb3BlcnR5KGUpJiZUZltlXT8oXCJcIitmKS50cmltKCk6ZitcInB4XCI7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciBXZj1BKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gWGYoYSxiLGMpe2ImJihXZlthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/RChcIjEzN1wiLGEsYygpKTp2b2lkIDApLG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJihudWxsIT1iLmNoaWxkcmVuP0QoXCI2MFwiKTp2b2lkIDAsXCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTD92b2lkIDA6RChcIjYxXCIpKSxudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGU/RChcIjYyXCIsYygpKTp2b2lkIDApfVxuZnVuY3Rpb24gWWYoYSxiKXtpZigtMT09PWEuaW5kZXhPZihcIi1cIikpcmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzO3N3aXRjaChhKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITB9fXZhciBaZj1DLnRoYXRSZXR1cm5zKFwiXCIpO1xuZnVuY3Rpb24gJGYoYSxiKXthPTk9PT1hLm5vZGVUeXBlfHwxMT09PWEubm9kZVR5cGU/YTphLm93bmVyRG9jdW1lbnQ7dmFyIGM9a2UoYSk7Yj12YVtiXTtmb3IodmFyIGQ9MDtkPGIubGVuZ3RoO2QrKyl7dmFyIGU9YltkXTtjLmhhc093blByb3BlcnR5KGUpJiZjW2VdfHwoXCJ0b3BTY3JvbGxcIj09PWU/WmQoXCJ0b3BTY3JvbGxcIixcInNjcm9sbFwiLGEpOlwidG9wRm9jdXNcIj09PWV8fFwidG9wQmx1clwiPT09ZT8oWmQoXCJ0b3BGb2N1c1wiLFwiZm9jdXNcIixhKSxaZChcInRvcEJsdXJcIixcImJsdXJcIixhKSxjLnRvcEJsdXI9ITAsYy50b3BGb2N1cz0hMCk6XCJ0b3BDYW5jZWxcIj09PWU/KGljKFwiY2FuY2VsXCIsITApJiZaZChcInRvcENhbmNlbFwiLFwiY2FuY2VsXCIsYSksYy50b3BDYW5jZWw9ITApOlwidG9wQ2xvc2VcIj09PWU/KGljKFwiY2xvc2VcIiwhMCkmJlpkKFwidG9wQ2xvc2VcIixcImNsb3NlXCIsYSksYy50b3BDbG9zZT0hMCk6ZmUuaGFzT3duUHJvcGVydHkoZSkmJlcoZSxmZVtlXSxhKSxjW2VdPSEwKX19XG5mdW5jdGlvbiBhZyhhLGIsYyxkKXtjPTk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50O2Q9PT1OZi5odG1sJiYoZD1PZihhKSk7ZD09PU5mLmh0bWw/XCJzY3JpcHRcIj09PWE/KGE9Yy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGEuaW5uZXJIVE1MPVwiXFx4M2NzY3JpcHRcXHgzZVxceDNjL3NjcmlwdFxceDNlXCIsYT1hLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCkpOmE9XCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzP2MuY3JlYXRlRWxlbWVudChhLHtpczpiLmlzfSk6Yy5jcmVhdGVFbGVtZW50KGEpOmE9Yy5jcmVhdGVFbGVtZW50TlMoZCxhKTtyZXR1cm4gYX1mdW5jdGlvbiBiZyhhLGIpe3JldHVybig5PT09Yi5ub2RlVHlwZT9iOmIub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoYSl9XG5mdW5jdGlvbiBjZyhhLGIsYyxkKXt2YXIgZT1ZZihiLGMpO3N3aXRjaChiKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOlcoXCJ0b3BMb2FkXCIsXCJsb2FkXCIsYSk7dmFyIGY9YzticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoZiBpbiBnZSlnZS5oYXNPd25Qcm9wZXJ0eShmKSYmVyhmLGdlW2ZdLGEpO2Y9YzticmVhaztjYXNlIFwic291cmNlXCI6VyhcInRvcEVycm9yXCIsXCJlcnJvclwiLGEpO2Y9YzticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpXKFwidG9wRXJyb3JcIixcImVycm9yXCIsYSk7VyhcInRvcExvYWRcIixcImxvYWRcIixhKTtmPWM7YnJlYWs7Y2FzZSBcImZvcm1cIjpXKFwidG9wUmVzZXRcIixcInJlc2V0XCIsYSk7VyhcInRvcFN1Ym1pdFwiLFwic3VibWl0XCIsYSk7Zj1jO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6VyhcInRvcFRvZ2dsZVwiLFwidG9nZ2xlXCIsYSk7Zj1jO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOldjKGEsYyk7Zj1WYyhhLGMpO1coXCJ0b3BJbnZhbGlkXCIsXG5cImludmFsaWRcIixhKTskZihkLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmY9R2YoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6SWYoYSxjKTtmPUEoe30sYyx7dmFsdWU6dm9pZCAwfSk7VyhcInRvcEludmFsaWRcIixcImludmFsaWRcIixhKTskZihkLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6S2YoYSxjKTtmPUpmKGEsYyk7VyhcInRvcEludmFsaWRcIixcImludmFsaWRcIixhKTskZihkLFwib25DaGFuZ2VcIik7YnJlYWs7ZGVmYXVsdDpmPWN9WGYoYixmLFpmKTt2YXIgaD1mLGc7Zm9yKGcgaW4gaClpZihoLmhhc093blByb3BlcnR5KGcpKXt2YXIgaz1oW2ddO1wic3R5bGVcIj09PWc/VmYoYSxrLFpmKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1nPyhrPWs/ay5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJlJmKGEsaykpOlwiY2hpbGRyZW5cIj09PWc/XCJzdHJpbmdcIj09PXR5cGVvZiBrPyhcInRleHRhcmVhXCIhPT1ifHxcIlwiIT09aykmJlNmKGEsayk6XCJudW1iZXJcIj09PXR5cGVvZiBrJiZcblNmKGEsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09ZyYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWcmJlwiYXV0b0ZvY3VzXCIhPT1nJiYodWEuaGFzT3duUHJvcGVydHkoZyk/bnVsbCE9ayYmJGYoZCxnKTpudWxsIT1rJiZVYyhhLGcsayxlKSl9c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOmxjKGEpO2FkKGEsYyk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6bGMoYSk7TWYoYSxjKTticmVhaztjYXNlIFwib3B0aW9uXCI6bnVsbCE9Yy52YWx1ZSYmYS5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLGMudmFsdWUpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLm11bHRpcGxlPSEhYy5tdWx0aXBsZTtiPWMudmFsdWU7bnVsbCE9Yj9IZihhLCEhYy5tdWx0aXBsZSxiLCExKTpudWxsIT1jLmRlZmF1bHRWYWx1ZSYmSGYoYSwhIWMubXVsdGlwbGUsYy5kZWZhdWx0VmFsdWUsITApO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGYub25DbGljayYmKGEub25jbGljaz1DKX19XG5mdW5jdGlvbiBkZyhhLGIsYyxkLGUpe3ZhciBmPW51bGw7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOmM9VmMoYSxjKTtkPVZjKGEsZCk7Zj1bXTticmVhaztjYXNlIFwib3B0aW9uXCI6Yz1HZihhLGMpO2Q9R2YoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjPUEoe30sYyx7dmFsdWU6dm9pZCAwfSk7ZD1BKHt9LGQse3ZhbHVlOnZvaWQgMH0pO2Y9W107YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6Yz1KZihhLGMpO2Q9SmYoYSxkKTtmPVtdO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiIT09dHlwZW9mIGMub25DbGljayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGEub25jbGljaz1DKX1YZihiLGQsWmYpO2I9YT12b2lkIDA7dmFyIGg9bnVsbDtmb3IoYSBpbiBjKWlmKCFkLmhhc093blByb3BlcnR5KGEpJiZjLmhhc093blByb3BlcnR5KGEpJiZudWxsIT1jW2FdKWlmKFwic3R5bGVcIj09PWEpe3ZhciBnPWNbYV07Zm9yKGIgaW4gZylnLmhhc093blByb3BlcnR5KGIpJiYoaHx8XG4oaD17fSksaFtiXT1cIlwiKX1lbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09YSYmXCJjaGlsZHJlblwiIT09YSYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWEmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1hJiZcImF1dG9Gb2N1c1wiIT09YSYmKHVhLmhhc093blByb3BlcnR5KGEpP2Z8fChmPVtdKTooZj1mfHxbXSkucHVzaChhLG51bGwpKTtmb3IoYSBpbiBkKXt2YXIgaz1kW2FdO2c9bnVsbCE9Yz9jW2FdOnZvaWQgMDtpZihkLmhhc093blByb3BlcnR5KGEpJiZrIT09ZyYmKG51bGwhPWt8fG51bGwhPWcpKWlmKFwic3R5bGVcIj09PWEpaWYoZyl7Zm9yKGIgaW4gZykhZy5oYXNPd25Qcm9wZXJ0eShiKXx8ayYmay5oYXNPd25Qcm9wZXJ0eShiKXx8KGh8fChoPXt9KSxoW2JdPVwiXCIpO2ZvcihiIGluIGspay5oYXNPd25Qcm9wZXJ0eShiKSYmZ1tiXSE9PWtbYl0mJihofHwoaD17fSksaFtiXT1rW2JdKX1lbHNlIGh8fChmfHwoZj1bXSksZi5wdXNoKGEsaCkpLFxuaD1rO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1hPyhrPWs/ay5fX2h0bWw6dm9pZCAwLGc9Zz9nLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmZyE9PWsmJihmPWZ8fFtdKS5wdXNoKGEsXCJcIitrKSk6XCJjaGlsZHJlblwiPT09YT9nPT09a3x8XCJzdHJpbmdcIiE9PXR5cGVvZiBrJiZcIm51bWJlclwiIT09dHlwZW9mIGt8fChmPWZ8fFtdKS5wdXNoKGEsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09YSYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWEmJih1YS5oYXNPd25Qcm9wZXJ0eShhKT8obnVsbCE9ayYmJGYoZSxhKSxmfHxnPT09a3x8KGY9W10pKTooZj1mfHxbXSkucHVzaChhLGspKX1oJiYoZj1mfHxbXSkucHVzaChcInN0eWxlXCIsaCk7cmV0dXJuIGZ9XG5mdW5jdGlvbiBlZyhhLGIsYyxkLGUpe1wiaW5wdXRcIj09PWMmJlwicmFkaW9cIj09PWUudHlwZSYmbnVsbCE9ZS5uYW1lJiZZYyhhLGUpO1lmKGMsZCk7ZD1ZZihjLGUpO2Zvcih2YXIgZj0wO2Y8Yi5sZW5ndGg7Zis9Mil7dmFyIGg9YltmXSxnPWJbZisxXTtcInN0eWxlXCI9PT1oP1ZmKGEsZyxaZik6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09aD9SZihhLGcpOlwiY2hpbGRyZW5cIj09PWg/U2YoYSxnKTpVYyhhLGgsZyxkKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6WmMoYSxlKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpMZihhLGUpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlPXZvaWQgMCxiPWEuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZSxhLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU9ISFlLm11bHRpcGxlLGM9ZS52YWx1ZSxudWxsIT1jP0hmKGEsISFlLm11bHRpcGxlLGMsITEpOmIhPT0hIWUubXVsdGlwbGUmJihudWxsIT1lLmRlZmF1bHRWYWx1ZT9cbkhmKGEsISFlLm11bHRpcGxlLGUuZGVmYXVsdFZhbHVlLCEwKTpIZihhLCEhZS5tdWx0aXBsZSxlLm11bHRpcGxlP1tdOlwiXCIsITEpKX19XG5mdW5jdGlvbiBmZyhhLGIsYyxkLGUpe3N3aXRjaChiKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOlcoXCJ0b3BMb2FkXCIsXCJsb2FkXCIsYSk7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKHZhciBmIGluIGdlKWdlLmhhc093blByb3BlcnR5KGYpJiZXKGYsZ2VbZl0sYSk7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOlcoXCJ0b3BFcnJvclwiLFwiZXJyb3JcIixhKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpXKFwidG9wRXJyb3JcIixcImVycm9yXCIsYSk7VyhcInRvcExvYWRcIixcImxvYWRcIixhKTticmVhaztjYXNlIFwiZm9ybVwiOlcoXCJ0b3BSZXNldFwiLFwicmVzZXRcIixhKTtXKFwidG9wU3VibWl0XCIsXCJzdWJtaXRcIixhKTticmVhaztjYXNlIFwiZGV0YWlsc1wiOlcoXCJ0b3BUb2dnbGVcIixcInRvZ2dsZVwiLGEpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOldjKGEsYyk7VyhcInRvcEludmFsaWRcIixcImludmFsaWRcIixhKTskZihlLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOklmKGEsXG5jKTtXKFwidG9wSW52YWxpZFwiLFwiaW52YWxpZFwiLGEpOyRmKGUsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpLZihhLGMpLFcoXCJ0b3BJbnZhbGlkXCIsXCJpbnZhbGlkXCIsYSksJGYoZSxcIm9uQ2hhbmdlXCIpfVhmKGIsYyxaZik7ZD1udWxsO2Zvcih2YXIgaCBpbiBjKWMuaGFzT3duUHJvcGVydHkoaCkmJihmPWNbaF0sXCJjaGlsZHJlblwiPT09aD9cInN0cmluZ1wiPT09dHlwZW9mIGY/YS50ZXh0Q29udGVudCE9PWYmJihkPVtcImNoaWxkcmVuXCIsZl0pOlwibnVtYmVyXCI9PT10eXBlb2YgZiYmYS50ZXh0Q29udGVudCE9PVwiXCIrZiYmKGQ9W1wiY2hpbGRyZW5cIixcIlwiK2ZdKTp1YS5oYXNPd25Qcm9wZXJ0eShoKSYmbnVsbCE9ZiYmJGYoZSxoKSk7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOmxjKGEpO2FkKGEsYyk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6bGMoYSk7TWYoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGMub25DbGljayYmXG4oYS5vbmNsaWNrPUMpfXJldHVybiBkfWZ1bmN0aW9uIG5nKGEsYil7cmV0dXJuIGEubm9kZVZhbHVlIT09Yn1cbnZhciBvZz1PYmplY3QuZnJlZXplKHtjcmVhdGVFbGVtZW50OmFnLGNyZWF0ZVRleHROb2RlOmJnLHNldEluaXRpYWxQcm9wZXJ0aWVzOmNnLGRpZmZQcm9wZXJ0aWVzOmRnLHVwZGF0ZVByb3BlcnRpZXM6ZWcsZGlmZkh5ZHJhdGVkUHJvcGVydGllczpmZyxkaWZmSHlkcmF0ZWRUZXh0Om5nLHdhcm5Gb3JVbm1hdGNoZWRUZXh0OmZ1bmN0aW9uKCl7fSx3YXJuRm9yRGVsZXRlZEh5ZHJhdGFibGVFbGVtZW50OmZ1bmN0aW9uKCl7fSx3YXJuRm9yRGVsZXRlZEh5ZHJhdGFibGVUZXh0OmZ1bmN0aW9uKCl7fSx3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZEVsZW1lbnQ6ZnVuY3Rpb24oKXt9LHdhcm5Gb3JJbnNlcnRlZEh5ZHJhdGVkVGV4dDpmdW5jdGlvbigpe30scmVzdG9yZUNvbnRyb2xsZWRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOlpjKGEsYyk7Yj1jLm5hbWU7aWYoXCJyYWRpb1wiPT09Yy50eXBlJiZudWxsIT1iKXtmb3IoYz1hO2MucGFyZW50Tm9kZTspYz1cbmMucGFyZW50Tm9kZTtjPWMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWVcXHgzZFwiK0pTT04uc3RyaW5naWZ5KFwiXCIrYikrJ11bdHlwZVxceDNkXCJyYWRpb1wiXScpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspe3ZhciBkPWNbYl07aWYoZCE9PWEmJmQuZm9ybT09PWEuZm9ybSl7dmFyIGU9WGEoZCk7ZT92b2lkIDA6RChcIjkwXCIpO21jKGQpO1pjKGQsZSl9fX1icmVhaztjYXNlIFwidGV4dGFyZWFcIjpMZihhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMudmFsdWUsbnVsbCE9YiYmSGYoYSwhIWMubXVsdGlwbGUsYiwhMSl9fX0pO1RiLmluamVjdEZpYmVyQ29udHJvbGxlZEhvc3RDb21wb25lbnQob2cpO3ZhciBwZz1udWxsLHFnPW51bGw7XG5mdW5jdGlvbiByZyhhKXt0aGlzLl9leHBpcmF0aW9uVGltZT1YLmNvbXB1dGVVbmlxdWVBc3luY0V4cGlyYXRpb24oKTt0aGlzLl9yb290PWE7dGhpcy5fY2FsbGJhY2tzPXRoaXMuX25leHQ9bnVsbDt0aGlzLl9oYXNDaGlsZHJlbj10aGlzLl9kaWRDb21wbGV0ZT0hMTt0aGlzLl9jaGlsZHJlbj1udWxsO3RoaXMuX2RlZmVyPSEwfXJnLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSl7dGhpcy5fZGVmZXI/dm9pZCAwOkQoXCIyNTBcIik7dGhpcy5faGFzQ2hpbGRyZW49ITA7dGhpcy5fY2hpbGRyZW49YTt2YXIgYj10aGlzLl9yb290Ll9pbnRlcm5hbFJvb3QsYz10aGlzLl9leHBpcmF0aW9uVGltZSxkPW5ldyBzZztYLnVwZGF0ZUNvbnRhaW5lckF0RXhwaXJhdGlvblRpbWUoYSxiLG51bGwsYyxkLl9vbkNvbW1pdCk7cmV0dXJuIGR9O1xucmcucHJvdG90eXBlLnRoZW49ZnVuY3Rpb24oYSl7aWYodGhpcy5fZGlkQ29tcGxldGUpYSgpO2Vsc2V7dmFyIGI9dGhpcy5fY2FsbGJhY2tzO251bGw9PT1iJiYoYj10aGlzLl9jYWxsYmFja3M9W10pO2IucHVzaChhKX19O1xucmcucHJvdG90eXBlLmNvbW1pdD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuX3Jvb3QuX2ludGVybmFsUm9vdCxiPWEuZmlyc3RCYXRjaDt0aGlzLl9kZWZlciYmbnVsbCE9PWI/dm9pZCAwOkQoXCIyNTFcIik7aWYodGhpcy5faGFzQ2hpbGRyZW4pe3ZhciBjPXRoaXMuX2V4cGlyYXRpb25UaW1lO2lmKGIhPT10aGlzKXt0aGlzLl9oYXNDaGlsZHJlbiYmKGM9dGhpcy5fZXhwaXJhdGlvblRpbWU9Yi5fZXhwaXJhdGlvblRpbWUsdGhpcy5yZW5kZXIodGhpcy5fY2hpbGRyZW4pKTtmb3IodmFyIGQ9bnVsbCxlPWI7ZSE9PXRoaXM7KWQ9ZSxlPWUuX25leHQ7bnVsbD09PWQ/RChcIjI1MVwiKTp2b2lkIDA7ZC5fbmV4dD1lLl9uZXh0O3RoaXMuX25leHQ9YjthLmZpcnN0QmF0Y2g9dGhpc310aGlzLl9kZWZlcj0hMTtYLmZsdXNoUm9vdChhLGMpO2I9dGhpcy5fbmV4dDt0aGlzLl9uZXh0PW51bGw7Yj1hLmZpcnN0QmF0Y2g9YjtudWxsIT09YiYmYi5faGFzQ2hpbGRyZW4mJmIucmVuZGVyKGIuX2NoaWxkcmVuKX1lbHNlIHRoaXMuX25leHQ9XG5udWxsLHRoaXMuX2RlZmVyPSExfTtyZy5wcm90b3R5cGUuX29uQ29tcGxldGU9ZnVuY3Rpb24oKXtpZighdGhpcy5fZGlkQ29tcGxldGUpe3RoaXMuX2RpZENvbXBsZXRlPSEwO3ZhciBhPXRoaXMuX2NhbGxiYWNrcztpZihudWxsIT09YSlmb3IodmFyIGI9MDtiPGEubGVuZ3RoO2IrKykoMCxhW2JdKSgpfX07ZnVuY3Rpb24gc2coKXt0aGlzLl9jYWxsYmFja3M9bnVsbDt0aGlzLl9kaWRDb21taXQ9ITE7dGhpcy5fb25Db21taXQ9dGhpcy5fb25Db21taXQuYmluZCh0aGlzKX1zZy5wcm90b3R5cGUudGhlbj1mdW5jdGlvbihhKXtpZih0aGlzLl9kaWRDb21taXQpYSgpO2Vsc2V7dmFyIGI9dGhpcy5fY2FsbGJhY2tzO251bGw9PT1iJiYoYj10aGlzLl9jYWxsYmFja3M9W10pO2IucHVzaChhKX19O1xuc2cucHJvdG90eXBlLl9vbkNvbW1pdD1mdW5jdGlvbigpe2lmKCF0aGlzLl9kaWRDb21taXQpe3RoaXMuX2RpZENvbW1pdD0hMDt2YXIgYT10aGlzLl9jYWxsYmFja3M7aWYobnVsbCE9PWEpZm9yKHZhciBiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBjPWFbYl07XCJmdW5jdGlvblwiIT09dHlwZW9mIGM/RChcIjE5MVwiLGMpOnZvaWQgMDtjKCl9fX07ZnVuY3Rpb24gdGcoYSxiLGMpe3RoaXMuX2ludGVybmFsUm9vdD1YLmNyZWF0ZUNvbnRhaW5lcihhLGIsYyl9dGcucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuX2ludGVybmFsUm9vdCxkPW5ldyBzZztiPXZvaWQgMD09PWI/bnVsbDpiO251bGwhPT1iJiZkLnRoZW4oYik7WC51cGRhdGVDb250YWluZXIoYSxjLG51bGwsZC5fb25Db21taXQpO3JldHVybiBkfTtcbnRnLnByb3RvdHlwZS51bm1vdW50PWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuX2ludGVybmFsUm9vdCxjPW5ldyBzZzthPXZvaWQgMD09PWE/bnVsbDphO251bGwhPT1hJiZjLnRoZW4oYSk7WC51cGRhdGVDb250YWluZXIobnVsbCxiLG51bGwsYy5fb25Db21taXQpO3JldHVybiBjfTt0Zy5wcm90b3R5cGUubGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD10aGlzLl9pbnRlcm5hbFJvb3QsZT1uZXcgc2c7Yz12b2lkIDA9PT1jP251bGw6YztudWxsIT09YyYmZS50aGVuKGMpO1gudXBkYXRlQ29udGFpbmVyKGIsZCxhLGUuX29uQ29tbWl0KTtyZXR1cm4gZX07XG50Zy5wcm90b3R5cGUuY3JlYXRlQmF0Y2g9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgcmcodGhpcyksYj1hLl9leHBpcmF0aW9uVGltZSxjPXRoaXMuX2ludGVybmFsUm9vdCxkPWMuZmlyc3RCYXRjaDtpZihudWxsPT09ZCljLmZpcnN0QmF0Y2g9YSxhLl9uZXh0PW51bGw7ZWxzZXtmb3IoYz1udWxsO251bGwhPT1kJiZkLl9leHBpcmF0aW9uVGltZTw9YjspYz1kLGQ9ZC5fbmV4dDthLl9uZXh0PWQ7bnVsbCE9PWMmJihjLl9uZXh0PWEpfXJldHVybiBhfTtmdW5jdGlvbiB1ZyhhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9XG5mdW5jdGlvbiB2ZyhhLGIpe3N3aXRjaChhKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOnJldHVybiEhYi5hdXRvRm9jdXN9cmV0dXJuITF9XG52YXIgWD1wZih7Z2V0Um9vdEhvc3RDb250ZXh0OmZ1bmN0aW9uKGEpe3ZhciBiPWEubm9kZVR5cGU7c3dpdGNoKGIpe2Nhc2UgOTpjYXNlIDExOmE9KGE9YS5kb2N1bWVudEVsZW1lbnQpP2EubmFtZXNwYWNlVVJJOlBmKG51bGwsXCJcIik7YnJlYWs7ZGVmYXVsdDpiPTg9PT1iP2EucGFyZW50Tm9kZTphLGE9Yi5uYW1lc3BhY2VVUkl8fG51bGwsYj1iLnRhZ05hbWUsYT1QZihhLGIpfXJldHVybiBhfSxnZXRDaGlsZEhvc3RDb250ZXh0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIFBmKGEsYil9LGdldFB1YmxpY0luc3RhbmNlOmZ1bmN0aW9uKGEpe3JldHVybiBhfSxwcmVwYXJlRm9yQ29tbWl0OmZ1bmN0aW9uKCl7cGc9VmQ7dmFyIGE9ZmEoKTtpZihuZShhKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gYSl2YXIgYj17c3RhcnQ6YS5zZWxlY3Rpb25TdGFydCxlbmQ6YS5zZWxlY3Rpb25FbmR9O2Vsc2UgYTp7dmFyIGM9d2luZG93LmdldFNlbGVjdGlvbiYmd2luZG93LmdldFNlbGVjdGlvbigpO1xuaWYoYyYmMCE9PWMucmFuZ2VDb3VudCl7Yj1jLmFuY2hvck5vZGU7dmFyIGQ9Yy5hbmNob3JPZmZzZXQsZT1jLmZvY3VzTm9kZTtjPWMuZm9jdXNPZmZzZXQ7dHJ5e2Iubm9kZVR5cGUsZS5ub2RlVHlwZX1jYXRjaChCKXtiPW51bGw7YnJlYWsgYX12YXIgZj0wLGg9LTEsZz0tMSxrPTAsdj0wLGw9YSxwPW51bGw7Yjpmb3IoOzspe2Zvcih2YXIgejs7KXtsIT09Ynx8MCE9PWQmJjMhPT1sLm5vZGVUeXBlfHwoaD1mK2QpO2whPT1lfHwwIT09YyYmMyE9PWwubm9kZVR5cGV8fChnPWYrYyk7Mz09PWwubm9kZVR5cGUmJihmKz1sLm5vZGVWYWx1ZS5sZW5ndGgpO2lmKG51bGw9PT0oej1sLmZpcnN0Q2hpbGQpKWJyZWFrO3A9bDtsPXp9Zm9yKDs7KXtpZihsPT09YSlicmVhayBiO3A9PT1iJiYrK2s9PT1kJiYoaD1mKTtwPT09ZSYmKyt2PT09YyYmKGc9Zik7aWYobnVsbCE9PSh6PWwubmV4dFNpYmxpbmcpKWJyZWFrO2w9cDtwPWwucGFyZW50Tm9kZX1sPXp9Yj0tMT09PWh8fC0xPT09Zz9udWxsOlxue3N0YXJ0OmgsZW5kOmd9fWVsc2UgYj1udWxsfWI9Ynx8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgYj1udWxsO3FnPXtmb2N1c2VkRWxlbTphLHNlbGVjdGlvblJhbmdlOmJ9O1dkKCExKX0scmVzZXRBZnRlckNvbW1pdDpmdW5jdGlvbigpe3ZhciBhPXFnLGI9ZmEoKSxjPWEuZm9jdXNlZEVsZW0sZD1hLnNlbGVjdGlvblJhbmdlO2lmKGIhPT1jJiZqYShkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsYykpe2lmKG5lKGMpKWlmKGI9ZC5zdGFydCxhPWQuZW5kLHZvaWQgMD09PWEmJihhPWIpLFwic2VsZWN0aW9uU3RhcnRcImluIGMpYy5zZWxlY3Rpb25TdGFydD1iLGMuc2VsZWN0aW9uRW5kPU1hdGgubWluKGEsYy52YWx1ZS5sZW5ndGgpO2Vsc2UgaWYod2luZG93LmdldFNlbGVjdGlvbil7Yj13aW5kb3cuZ2V0U2VsZWN0aW9uKCk7dmFyIGU9Y1ttYigpXS5sZW5ndGg7YT1NYXRoLm1pbihkLnN0YXJ0LGUpO2Q9dm9pZCAwPT09ZC5lbmQ/YTpNYXRoLm1pbihkLmVuZCxlKTshYi5leHRlbmQmJmE+XG5kJiYoZT1kLGQ9YSxhPWUpO2U9bWUoYyxhKTt2YXIgZj1tZShjLGQpO2lmKGUmJmYmJigxIT09Yi5yYW5nZUNvdW50fHxiLmFuY2hvck5vZGUhPT1lLm5vZGV8fGIuYW5jaG9yT2Zmc2V0IT09ZS5vZmZzZXR8fGIuZm9jdXNOb2RlIT09Zi5ub2RlfHxiLmZvY3VzT2Zmc2V0IT09Zi5vZmZzZXQpKXt2YXIgaD1kb2N1bWVudC5jcmVhdGVSYW5nZSgpO2guc2V0U3RhcnQoZS5ub2RlLGUub2Zmc2V0KTtiLnJlbW92ZUFsbFJhbmdlcygpO2E+ZD8oYi5hZGRSYW5nZShoKSxiLmV4dGVuZChmLm5vZGUsZi5vZmZzZXQpKTooaC5zZXRFbmQoZi5ub2RlLGYub2Zmc2V0KSxiLmFkZFJhbmdlKGgpKX19Yj1bXTtmb3IoYT1jO2E9YS5wYXJlbnROb2RlOykxPT09YS5ub2RlVHlwZSYmYi5wdXNoKHtlbGVtZW50OmEsbGVmdDphLnNjcm9sbExlZnQsdG9wOmEuc2Nyb2xsVG9wfSk7Yy5mb2N1cygpO2ZvcihjPTA7YzxiLmxlbmd0aDtjKyspYT1iW2NdLGEuZWxlbWVudC5zY3JvbGxMZWZ0PWEubGVmdCxcbmEuZWxlbWVudC5zY3JvbGxUb3A9YS50b3B9cWc9bnVsbDtXZChwZyk7cGc9bnVsbH0sY3JlYXRlSW5zdGFuY2U6ZnVuY3Rpb24oYSxiLGMsZCxlKXthPWFnKGEsYixjLGQpO2FbRl09ZTthW1RhXT1iO3JldHVybiBhfSxhcHBlbmRJbml0aWFsQ2hpbGQ6ZnVuY3Rpb24oYSxiKXthLmFwcGVuZENoaWxkKGIpfSxmaW5hbGl6ZUluaXRpYWxDaGlsZHJlbjpmdW5jdGlvbihhLGIsYyxkKXtjZyhhLGIsYyxkKTtyZXR1cm4gdmcoYixjKX0scHJlcGFyZVVwZGF0ZTpmdW5jdGlvbihhLGIsYyxkLGUpe3JldHVybiBkZyhhLGIsYyxkLGUpfSxzaG91bGRTZXRUZXh0Q29udGVudDpmdW5jdGlvbihhLGIpe3JldHVyblwidGV4dGFyZWFcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcInN0cmluZ1wiPT09XG50eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWx9LHNob3VsZERlcHJpb3JpdGl6ZVN1YnRyZWU6ZnVuY3Rpb24oYSxiKXtyZXR1cm4hIWIuaGlkZGVufSxjcmVhdGVUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oYSxiLGMsZCl7YT1iZyhhLGIpO2FbRl09ZDtyZXR1cm4gYX0sbm93OnNmLG11dGF0aW9uOntjb21taXRNb3VudDpmdW5jdGlvbihhLGIsYyl7dmcoYixjKSYmYS5mb2N1cygpfSxjb21taXRVcGRhdGU6ZnVuY3Rpb24oYSxiLGMsZCxlKXthW1RhXT1lO2VnKGEsYixjLGQsZSl9LHJlc2V0VGV4dENvbnRlbnQ6ZnVuY3Rpb24oYSl7U2YoYSxcIlwiKX0sY29tbWl0VGV4dFVwZGF0ZTpmdW5jdGlvbihhLGIsYyl7YS5ub2RlVmFsdWU9Y30sYXBwZW5kQ2hpbGQ6ZnVuY3Rpb24oYSxiKXthLmFwcGVuZENoaWxkKGIpfSxhcHBlbmRDaGlsZFRvQ29udGFpbmVyOmZ1bmN0aW9uKGEsYil7OD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShiLGEpOmEuYXBwZW5kQ2hpbGQoYil9LFxuaW5zZXJ0QmVmb3JlOmZ1bmN0aW9uKGEsYixjKXthLmluc2VydEJlZm9yZShiLGMpfSxpbnNlcnRJbkNvbnRhaW5lckJlZm9yZTpmdW5jdGlvbihhLGIsYyl7OD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShiLGMpOmEuaW5zZXJ0QmVmb3JlKGIsYyl9LHJlbW92ZUNoaWxkOmZ1bmN0aW9uKGEsYil7YS5yZW1vdmVDaGlsZChiKX0scmVtb3ZlQ2hpbGRGcm9tQ29udGFpbmVyOmZ1bmN0aW9uKGEsYil7OD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGIpOmEucmVtb3ZlQ2hpbGQoYil9fSxoeWRyYXRpb246e2Nhbkh5ZHJhdGVJbnN0YW5jZTpmdW5jdGlvbihhLGIpe3JldHVybiAxIT09YS5ub2RlVHlwZXx8Yi50b0xvd2VyQ2FzZSgpIT09YS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpP251bGw6YX0sY2FuSHlkcmF0ZVRleHRJbnN0YW5jZTpmdW5jdGlvbihhLGIpe3JldHVyblwiXCI9PT1ifHwzIT09YS5ub2RlVHlwZT9udWxsOmF9LGdldE5leHRIeWRyYXRhYmxlU2libGluZzpmdW5jdGlvbihhKXtmb3IoYT1cbmEubmV4dFNpYmxpbmc7YSYmMSE9PWEubm9kZVR5cGUmJjMhPT1hLm5vZGVUeXBlOylhPWEubmV4dFNpYmxpbmc7cmV0dXJuIGF9LGdldEZpcnN0SHlkcmF0YWJsZUNoaWxkOmZ1bmN0aW9uKGEpe2ZvcihhPWEuZmlyc3RDaGlsZDthJiYxIT09YS5ub2RlVHlwZSYmMyE9PWEubm9kZVR5cGU7KWE9YS5uZXh0U2libGluZztyZXR1cm4gYX0saHlkcmF0ZUluc3RhbmNlOmZ1bmN0aW9uKGEsYixjLGQsZSxmKXthW0ZdPWY7YVtUYV09YztyZXR1cm4gZmcoYSxiLGMsZSxkKX0saHlkcmF0ZVRleHRJbnN0YW5jZTpmdW5jdGlvbihhLGIsYyl7YVtGXT1jO3JldHVybiBuZyhhLGIpfSxkaWROb3RNYXRjaEh5ZHJhdGVkQ29udGFpbmVyVGV4dEluc3RhbmNlOmZ1bmN0aW9uKCl7fSxkaWROb3RNYXRjaEh5ZHJhdGVkVGV4dEluc3RhbmNlOmZ1bmN0aW9uKCl7fSxkaWROb3RIeWRyYXRlQ29udGFpbmVySW5zdGFuY2U6ZnVuY3Rpb24oKXt9LGRpZE5vdEh5ZHJhdGVJbnN0YW5jZTpmdW5jdGlvbigpe30sXG5kaWROb3RGaW5kSHlkcmF0YWJsZUNvbnRhaW5lckluc3RhbmNlOmZ1bmN0aW9uKCl7fSxkaWROb3RGaW5kSHlkcmF0YWJsZUNvbnRhaW5lclRleHRJbnN0YW5jZTpmdW5jdGlvbigpe30sZGlkTm90RmluZEh5ZHJhdGFibGVJbnN0YW5jZTpmdW5jdGlvbigpe30sZGlkTm90RmluZEh5ZHJhdGFibGVUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oKXt9fSxzY2hlZHVsZURlZmVycmVkQ2FsbGJhY2s6dGYsY2FuY2VsRGVmZXJyZWRDYWxsYmFjazp1Zn0pLENnPVg7YWM9Q2cuYmF0Y2hlZFVwZGF0ZXM7YmM9Q2cuaW50ZXJhY3RpdmVVcGRhdGVzO2NjPUNnLmZsdXNoSW50ZXJhY3RpdmVVcGRhdGVzO1xuZnVuY3Rpb24gRGcoYSxiKXtifHwoYj1hPzk9PT1hLm5vZGVUeXBlP2EuZG9jdW1lbnRFbGVtZW50OmEuZmlyc3RDaGlsZDpudWxsLGI9ISghYnx8MSE9PWIubm9kZVR5cGV8fCFiLmhhc0F0dHJpYnV0ZShcImRhdGEtcmVhY3Ryb290XCIpKSk7aWYoIWIpZm9yKHZhciBjO2M9YS5sYXN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYyk7cmV0dXJuIG5ldyB0ZyhhLCExLGIpfVxuZnVuY3Rpb24gRWcoYSxiLGMsZCxlKXt1ZyhjKT92b2lkIDA6RChcIjIwMFwiKTt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXI7aWYoZil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBoPWU7ZT1mdW5jdGlvbigpe3ZhciBhPVguZ2V0UHVibGljUm9vdEluc3RhbmNlKGYuX2ludGVybmFsUm9vdCk7aC5jYWxsKGEpfX1udWxsIT1hP2YubGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKGEsYixlKTpmLnJlbmRlcihiLGUpfWVsc2V7Zj1jLl9yZWFjdFJvb3RDb250YWluZXI9RGcoYyxkKTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGc9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9WC5nZXRQdWJsaWNSb290SW5zdGFuY2UoZi5faW50ZXJuYWxSb290KTtnLmNhbGwoYSl9fVgudW5iYXRjaGVkVXBkYXRlcyhmdW5jdGlvbigpe251bGwhPWE/Zi5sZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIoYSxiLGUpOmYucmVuZGVyKGIsZSl9KX1yZXR1cm4gWC5nZXRQdWJsaWNSb290SW5zdGFuY2UoZi5faW50ZXJuYWxSb290KX1cbmZ1bmN0aW9uIEZnKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7dWcoYik/dm9pZCAwOkQoXCIyMDBcIik7cmV0dXJuIHFmKGEsYixudWxsLGMpfVxudmFyIEdnPXtjcmVhdGVQb3J0YWw6RmcsZmluZERPTU5vZGU6ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGw9PWE/bnVsbDoxPT09YS5ub2RlVHlwZT9hOlguZmluZEhvc3RJbnN0YW5jZShhKX0saHlkcmF0ZTpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIEVnKG51bGwsYSxiLCEwLGMpfSxyZW5kZXI6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBFZyhudWxsLGEsYiwhMSxjKX0sdW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI6ZnVuY3Rpb24oYSxiLGMsZCl7bnVsbD09YXx8dm9pZCAwPT09YS5fcmVhY3RJbnRlcm5hbEZpYmVyP0QoXCIzOFwiKTp2b2lkIDA7cmV0dXJuIEVnKGEsYixjLCExLGQpfSx1bm1vdW50Q29tcG9uZW50QXROb2RlOmZ1bmN0aW9uKGEpe3VnKGEpP3ZvaWQgMDpEKFwiNDBcIik7cmV0dXJuIGEuX3JlYWN0Um9vdENvbnRhaW5lcj8oWC51bmJhdGNoZWRVcGRhdGVzKGZ1bmN0aW9uKCl7RWcobnVsbCxudWxsLGEsITEsZnVuY3Rpb24oKXthLl9yZWFjdFJvb3RDb250YWluZXI9XG5udWxsfSl9KSwhMCk6ITF9LHVuc3RhYmxlX2NyZWF0ZVBvcnRhbDpmdW5jdGlvbigpe3JldHVybiBGZy5hcHBseSh2b2lkIDAsYXJndW1lbnRzKX0sdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM6WC5iYXRjaGVkVXBkYXRlcyx1bnN0YWJsZV9kZWZlcnJlZFVwZGF0ZXM6WC5kZWZlcnJlZFVwZGF0ZXMsZmx1c2hTeW5jOlguZmx1c2hTeW5jLHVuc3RhYmxlX2ZsdXNoQ29udHJvbGxlZDpYLmZsdXNoQ29udHJvbGxlZCxfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDp7RXZlbnRQbHVnaW5IdWI6UmEsRXZlbnRQbHVnaW5SZWdpc3RyeTpDYSxFdmVudFByb3BhZ2F0b3JzOmtiLFJlYWN0Q29udHJvbGxlZENvbXBvbmVudDokYixSZWFjdERPTUNvbXBvbmVudFRyZWU6YmIsUmVhY3RET01FdmVudExpc3RlbmVyOiRkfSx1bnN0YWJsZV9jcmVhdGVSb290OmZ1bmN0aW9uKGEsYil7cmV0dXJuIG5ldyB0ZyhhLCEwLG51bGwhPWImJiEwPT09Yi5oeWRyYXRlKX19O1xuWC5pbmplY3RJbnRvRGV2VG9vbHMoe2ZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOlVhLGJ1bmRsZVR5cGU6MCx2ZXJzaW9uOlwiMTYuMy4yXCIscmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifSk7dmFyIEhnPU9iamVjdC5mcmVlemUoe2RlZmF1bHQ6R2d9KSxJZz1IZyYmR2d8fEhnO21vZHVsZS5leHBvcnRzPUlnW1wiZGVmYXVsdFwiXT9JZ1tcImRlZmF1bHRcIl06SWc7XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjMuMlxuICogcmVhY3QucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIG09cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksbj1yZXF1aXJlKFwiZmJqcy9saWIvaW52YXJpYW50XCIpLHA9cmVxdWlyZShcImZianMvbGliL2VtcHR5T2JqZWN0XCIpLHE9cmVxdWlyZShcImZianMvbGliL2VtcHR5RnVuY3Rpb25cIikscj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2xbXCJmb3JcIl0sdD1yP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsdT1yP1N5bWJvbFtcImZvclwiXShcInJlYWN0LnBvcnRhbFwiKTo2MDEwNix2PXI/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsdz1yP1N5bWJvbFtcImZvclwiXShcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LHg9cj9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSx5PXI/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCx6PXI/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxBPXI/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6XG42MDExMixCPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBDKGEpe2Zvcih2YXIgYj1hcmd1bWVudHMubGVuZ3RoLTEsZT1cImh0dHA6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnRcXHgzZFwiK2EsYz0wO2M8YjtjKyspZSs9XCJcXHgyNmFyZ3NbXVxceDNkXCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjKzFdKTtuKCExLFwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0ICVzIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4gXCIsZSl9dmFyIEQ9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319O1xuZnVuY3Rpb24gRShhLGIsZSl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1wO3RoaXMudXBkYXRlcj1lfHxEfUUucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9e307RS5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYSxiKXtcIm9iamVjdFwiIT09dHlwZW9mIGEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZudWxsIT1hP0MoXCI4NVwiKTp2b2lkIDA7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtFLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtmdW5jdGlvbiBGKCl7fUYucHJvdG90eXBlPUUucHJvdG90eXBlO2Z1bmN0aW9uIEcoYSxiLGUpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9cDt0aGlzLnVwZGF0ZXI9ZXx8RH12YXIgSD1HLnByb3RvdHlwZT1uZXcgRjtcbkguY29uc3RydWN0b3I9RzttKEgsRS5wcm90b3R5cGUpO0guaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEk9e2N1cnJlbnQ6bnVsbH0sSj1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEs9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIEwoYSxiLGUpe3ZhciBjPXZvaWQgMCxkPXt9LGc9bnVsbCxoPW51bGw7aWYobnVsbCE9Yilmb3IoYyBpbiB2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYpLHZvaWQgMCE9PWIua2V5JiYoZz1cIlwiK2Iua2V5KSxiKUouY2FsbChiLGMpJiYhSy5oYXNPd25Qcm9wZXJ0eShjKSYmKGRbY109YltjXSk7dmFyIGY9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1mKWQuY2hpbGRyZW49ZTtlbHNlIGlmKDE8Zil7Zm9yKHZhciBrPUFycmF5KGYpLGw9MDtsPGY7bCsrKWtbbF09YXJndW1lbnRzW2wrMl07ZC5jaGlsZHJlbj1rfWlmKGEmJmEuZGVmYXVsdFByb3BzKWZvcihjIGluIGY9YS5kZWZhdWx0UHJvcHMsZil2b2lkIDA9PT1kW2NdJiYoZFtjXT1mW2NdKTtyZXR1cm57JCR0eXBlb2Y6dCx0eXBlOmEsa2V5OmcscmVmOmgscHJvcHM6ZCxfb3duZXI6SS5jdXJyZW50fX1cbmZ1bmN0aW9uIE0oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PXR9ZnVuY3Rpb24gZXNjYXBlKGEpe3ZhciBiPXtcIlxceDNkXCI6XCJcXHgzZDBcIixcIjpcIjpcIlxceDNkMlwifTtyZXR1cm5cIiRcIisoXCJcIithKS5yZXBsYWNlKC9bPTpdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV19KX12YXIgTj0vXFwvKy9nLE89W107ZnVuY3Rpb24gUChhLGIsZSxjKXtpZihPLmxlbmd0aCl7dmFyIGQ9Ty5wb3AoKTtkLnJlc3VsdD1hO2Qua2V5UHJlZml4PWI7ZC5mdW5jPWU7ZC5jb250ZXh0PWM7ZC5jb3VudD0wO3JldHVybiBkfXJldHVybntyZXN1bHQ6YSxrZXlQcmVmaXg6YixmdW5jOmUsY29udGV4dDpjLGNvdW50OjB9fWZ1bmN0aW9uIFEoYSl7YS5yZXN1bHQ9bnVsbDthLmtleVByZWZpeD1udWxsO2EuZnVuYz1udWxsO2EuY29udGV4dD1udWxsO2EuY291bnQ9MDsxMD5PLmxlbmd0aCYmTy5wdXNoKGEpfVxuZnVuY3Rpb24gUihhLGIsZSxjKXt2YXIgZD10eXBlb2YgYTtpZihcInVuZGVmaW5lZFwiPT09ZHx8XCJib29sZWFuXCI9PT1kKWE9bnVsbDt2YXIgZz0hMTtpZihudWxsPT09YSlnPSEwO2Vsc2Ugc3dpdGNoKGQpe2Nhc2UgXCJzdHJpbmdcIjpjYXNlIFwibnVtYmVyXCI6Zz0hMDticmVhaztjYXNlIFwib2JqZWN0XCI6c3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgdDpjYXNlIHU6Zz0hMH19aWYoZylyZXR1cm4gZShjLGEsXCJcIj09PWI/XCIuXCIrUyhhLDApOmIpLDE7Zz0wO2I9XCJcIj09PWI/XCIuXCI6YitcIjpcIjtpZihBcnJheS5pc0FycmF5KGEpKWZvcih2YXIgaD0wO2g8YS5sZW5ndGg7aCsrKXtkPWFbaF07dmFyIGY9YitTKGQsaCk7Zys9UihkLGYsZSxjKX1lbHNlIGlmKG51bGw9PT1hfHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGE/Zj1udWxsOihmPUImJmFbQl18fGFbXCJAQGl0ZXJhdG9yXCJdLGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIGY/ZjpudWxsKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZilmb3IoYT1mLmNhbGwoYSksXG5oPTA7IShkPWEubmV4dCgpKS5kb25lOylkPWQudmFsdWUsZj1iK1MoZCxoKyspLGcrPVIoZCxmLGUsYyk7ZWxzZVwib2JqZWN0XCI9PT1kJiYoZT1cIlwiK2EsQyhcIjMxXCIsXCJbb2JqZWN0IE9iamVjdF1cIj09PWU/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6ZSxcIlwiKSk7cmV0dXJuIGd9ZnVuY3Rpb24gUyhhLGIpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJm51bGwhPWEua2V5P2VzY2FwZShhLmtleSk6Yi50b1N0cmluZygzNil9ZnVuY3Rpb24gVChhLGIpe2EuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyl9XG5mdW5jdGlvbiBVKGEsYixlKXt2YXIgYz1hLnJlc3VsdCxkPWEua2V5UHJlZml4O2E9YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKTtBcnJheS5pc0FycmF5KGEpP1YoYSxjLGUscS50aGF0UmV0dXJuc0FyZ3VtZW50KTpudWxsIT1hJiYoTShhKSYmKGI9ZCsoIWEua2V5fHxiJiZiLmtleT09PWEua2V5P1wiXCI6KFwiXCIrYS5rZXkpLnJlcGxhY2UoTixcIiRcXHgyNi9cIikrXCIvXCIpK2UsYT17JCR0eXBlb2Y6dCx0eXBlOmEudHlwZSxrZXk6YixyZWY6YS5yZWYscHJvcHM6YS5wcm9wcyxfb3duZXI6YS5fb3duZXJ9KSxjLnB1c2goYSkpfWZ1bmN0aW9uIFYoYSxiLGUsYyxkKXt2YXIgZz1cIlwiO251bGwhPWUmJihnPShcIlwiK2UpLnJlcGxhY2UoTixcIiRcXHgyNi9cIikrXCIvXCIpO2I9UChiLGcsYyxkKTtudWxsPT1hfHxSKGEsXCJcIixVLGIpO1EoYil9XG52YXIgVz17Q2hpbGRyZW46e21hcDpmdW5jdGlvbihhLGIsZSl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgYz1bXTtWKGEsYyxudWxsLGIsZSk7cmV0dXJuIGN9LGZvckVhY2g6ZnVuY3Rpb24oYSxiLGUpe2lmKG51bGw9PWEpcmV0dXJuIGE7Yj1QKG51bGwsbnVsbCxiLGUpO251bGw9PWF8fFIoYSxcIlwiLFQsYik7UShiKX0sY291bnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGw9PWE/MDpSKGEsXCJcIixxLnRoYXRSZXR1cm5zTnVsbCxudWxsKX0sdG9BcnJheTpmdW5jdGlvbihhKXt2YXIgYj1bXTtWKGEsYixudWxsLHEudGhhdFJldHVybnNBcmd1bWVudCk7cmV0dXJuIGJ9LG9ubHk6ZnVuY3Rpb24oYSl7TShhKT92b2lkIDA6QyhcIjE0M1wiKTtyZXR1cm4gYX19LGNyZWF0ZVJlZjpmdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fSxDb21wb25lbnQ6RSxQdXJlQ29tcG9uZW50OkcsY3JlYXRlQ29udGV4dDpmdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPW51bGwpO2E9eyQkdHlwZW9mOnksXG5fY2FsY3VsYXRlQ2hhbmdlZEJpdHM6YixfZGVmYXVsdFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTphLF9jaGFuZ2VkQml0czowLFByb3ZpZGVyOm51bGwsQ29uc3VtZXI6bnVsbH07YS5Qcm92aWRlcj17JCR0eXBlb2Y6eCxfY29udGV4dDphfTtyZXR1cm4gYS5Db25zdW1lcj1hfSxmb3J3YXJkUmVmOmZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjpBLHJlbmRlcjphfX0sRnJhZ21lbnQ6dixTdHJpY3RNb2RlOncsdW5zdGFibGVfQXN5bmNNb2RlOnosY3JlYXRlRWxlbWVudDpMLGNsb25lRWxlbWVudDpmdW5jdGlvbihhLGIsZSl7bnVsbD09PWF8fHZvaWQgMD09PWE/QyhcIjI2N1wiLGEpOnZvaWQgMDt2YXIgYz12b2lkIDAsZD1tKHt9LGEucHJvcHMpLGc9YS5rZXksaD1hLnJlZixmPWEuX293bmVyO2lmKG51bGwhPWIpe3ZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZixmPUkuY3VycmVudCk7dm9pZCAwIT09Yi5rZXkmJihnPVwiXCIrYi5rZXkpO3ZhciBrPXZvaWQgMDthLnR5cGUmJmEudHlwZS5kZWZhdWx0UHJvcHMmJlxuKGs9YS50eXBlLmRlZmF1bHRQcm9wcyk7Zm9yKGMgaW4gYilKLmNhbGwoYixjKSYmIUsuaGFzT3duUHJvcGVydHkoYykmJihkW2NdPXZvaWQgMD09PWJbY10mJnZvaWQgMCE9PWs/a1tjXTpiW2NdKX1jPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09YylkLmNoaWxkcmVuPWU7ZWxzZSBpZigxPGMpe2s9QXJyYXkoYyk7Zm9yKHZhciBsPTA7bDxjO2wrKylrW2xdPWFyZ3VtZW50c1tsKzJdO2QuY2hpbGRyZW49a31yZXR1cm57JCR0eXBlb2Y6dCx0eXBlOmEudHlwZSxrZXk6ZyxyZWY6aCxwcm9wczpkLF9vd25lcjpmfX0sY3JlYXRlRmFjdG9yeTpmdW5jdGlvbihhKXt2YXIgYj1MLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn0saXNWYWxpZEVsZW1lbnQ6TSx2ZXJzaW9uOlwiMTYuMy4yXCIsX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ6e1JlYWN0Q3VycmVudE93bmVyOkksYXNzaWduOm19fSxYPU9iamVjdC5mcmVlemUoe2RlZmF1bHQ6V30pLFxuWT1YJiZXfHxYO21vZHVsZS5leHBvcnRzPVlbXCJkZWZhdWx0XCJdP1lbXCJkZWZhdWx0XCJdOlk7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcclxuXHJcbmltcG9ydCAnYmFiZWwtcG9seWZpbGwnO1xyXG5cclxuaW1wb3J0IEJhc2UgZnJvbSAnLi9zY3JlZW5zL0Jhc2UuanMnO1xyXG5cclxuLy8gJ3JlYWN0LXRhcC1ldmVudC1wbHVnaW4n44KS44Kk44Oz44K544OI44O844Or44GX44Gf5aC05ZCI44CB5Lul5LiL44Gu44Kz44Oh44Oz44OI44KS5aSW44GZXHJcbi8vaW1wb3J0IGluamVjdFRhcEV2ZW50UGx1Z2luIGZyb20gJ3JlYWN0LXRhcC1ldmVudC1wbHVnaW4nO1xyXG4vL2luamVjdFRhcEV2ZW50UGx1Z2luKCk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBcHAgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxCYXNlIC8+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG5cclxuUmVhY3RET00ucmVuZGVyKFxyXG4gICAgPEFwcCAvPixcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhcHAnKVxyXG4pO1xyXG4iLCIvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG5leHBvcnQgZGVmYXVsdCBmcmVlR2xvYmFsO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==